

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Mon Aug 21 14:14:29 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text27,local,class=CODE,merge=1,delta=2
    22                           	psect	text29,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text30,local,class=CODE,merge=1,delta=2
    25                           	psect	pa_nodes0,global,class=CODE,delta=2
    26                           	dabs	1,0x320,16
    27                           	dabs	1,0x2A0,80
    28                           	dabs	1,0x26C,4
    29                           	dabs	1,0x218C,0,_PD
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F1574 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000E                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  008C                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010E                     	;# 
   111  0111                     	;# 
   112  0112                     	;# 
   113  0113                     	;# 
   114  0114                     	;# 
   115  0115                     	;# 
   116  0116                     	;# 
   117  0117                     	;# 
   118  0118                     	;# 
   119  0119                     	;# 
   120  018C                     	;# 
   121  018E                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0194                     	;# 
   128  0195                     	;# 
   129  0196                     	;# 
   130  0197                     	;# 
   131  0199                     	;# 
   132  019A                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019C                     	;# 
   136  019D                     	;# 
   137  019E                     	;# 
   138  019F                     	;# 
   139  020C                     	;# 
   140  020E                     	;# 
   141  028C                     	;# 
   142  028E                     	;# 
   143  030C                     	;# 
   144  030E                     	;# 
   145  038C                     	;# 
   146  038E                     	;# 
   147  0391                     	;# 
   148  0392                     	;# 
   149  0393                     	;# 
   150  0397                     	;# 
   151  0398                     	;# 
   152  0399                     	;# 
   153  0691                     	;# 
   154  0692                     	;# 
   155  0693                     	;# 
   156  0694                     	;# 
   157  0695                     	;# 
   158  0D8E                     	;# 
   159  0D8F                     	;# 
   160  0D90                     	;# 
   161  0D91                     	;# 
   162  0D91                     	;# 
   163  0D92                     	;# 
   164  0D93                     	;# 
   165  0D93                     	;# 
   166  0D94                     	;# 
   167  0D95                     	;# 
   168  0D95                     	;# 
   169  0D96                     	;# 
   170  0D97                     	;# 
   171  0D97                     	;# 
   172  0D98                     	;# 
   173  0D99                     	;# 
   174  0D99                     	;# 
   175  0D9A                     	;# 
   176  0D9B                     	;# 
   177  0D9C                     	;# 
   178  0D9C                     	;# 
   179  0D9D                     	;# 
   180  0D9D                     	;# 
   181  0D9E                     	;# 
   182  0D9F                     	;# 
   183  0DA0                     	;# 
   184  0DA1                     	;# 
   185  0DA1                     	;# 
   186  0DA2                     	;# 
   187  0DA3                     	;# 
   188  0DA3                     	;# 
   189  0DA4                     	;# 
   190  0DA5                     	;# 
   191  0DA5                     	;# 
   192  0DA6                     	;# 
   193  0DA7                     	;# 
   194  0DA7                     	;# 
   195  0DA8                     	;# 
   196  0DA9                     	;# 
   197  0DA9                     	;# 
   198  0DAA                     	;# 
   199  0DAB                     	;# 
   200  0DAC                     	;# 
   201  0DAC                     	;# 
   202  0DAD                     	;# 
   203  0DAD                     	;# 
   204  0DAE                     	;# 
   205  0DAF                     	;# 
   206  0DB0                     	;# 
   207  0DB1                     	;# 
   208  0DB1                     	;# 
   209  0DB2                     	;# 
   210  0DB3                     	;# 
   211  0DB3                     	;# 
   212  0DB4                     	;# 
   213  0DB5                     	;# 
   214  0DB5                     	;# 
   215  0DB6                     	;# 
   216  0DB7                     	;# 
   217  0DB7                     	;# 
   218  0DB8                     	;# 
   219  0DB9                     	;# 
   220  0DB9                     	;# 
   221  0DBA                     	;# 
   222  0DBB                     	;# 
   223  0DBC                     	;# 
   224  0DBC                     	;# 
   225  0DBD                     	;# 
   226  0DBD                     	;# 
   227  0DBE                     	;# 
   228  0DBF                     	;# 
   229  0DC0                     	;# 
   230  0DC1                     	;# 
   231  0DC1                     	;# 
   232  0DC2                     	;# 
   233  0DC3                     	;# 
   234  0DC3                     	;# 
   235  0DC4                     	;# 
   236  0DC5                     	;# 
   237  0DC5                     	;# 
   238  0DC6                     	;# 
   239  0DC7                     	;# 
   240  0DC7                     	;# 
   241  0DC8                     	;# 
   242  0DC9                     	;# 
   243  0DC9                     	;# 
   244  0DCA                     	;# 
   245  0DCB                     	;# 
   246  0DCC                     	;# 
   247  0DCC                     	;# 
   248  0DCD                     	;# 
   249  0DCD                     	;# 
   250  0DCE                     	;# 
   251  0DCF                     	;# 
   252  0DD0                     	;# 
   253  0E0F                     	;# 
   254  0E10                     	;# 
   255  0E11                     	;# 
   256  0E12                     	;# 
   257  0E13                     	;# 
   258  0E14                     	;# 
   259  0E15                     	;# 
   260  0E16                     	;# 
   261  0E17                     	;# 
   262  0E90                     	;# 
   263  0E91                     	;# 
   264  0E92                     	;# 
   265  0E94                     	;# 
   266  0E95                     	;# 
   267  0EA0                     	;# 
   268  0EA1                     	;# 
   269  0EA2                     	;# 
   270  0EA3                     	;# 
   271  0EA4                     	;# 
   272  0EA5                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE8                     	;# 
   279  0FE9                     	;# 
   280  0FEA                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000E                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008E                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0093                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  009F                     	;# 
   330  010C                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  018C                     	;# 
   342  018E                     	;# 
   343  0191                     	;# 
   344  0191                     	;# 
   345  0192                     	;# 
   346  0193                     	;# 
   347  0193                     	;# 
   348  0194                     	;# 
   349  0195                     	;# 
   350  0196                     	;# 
   351  0197                     	;# 
   352  0199                     	;# 
   353  019A                     	;# 
   354  019B                     	;# 
   355  019B                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020C                     	;# 
   361  020E                     	;# 
   362  028C                     	;# 
   363  028E                     	;# 
   364  030C                     	;# 
   365  030E                     	;# 
   366  038C                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  0397                     	;# 
   372  0398                     	;# 
   373  0399                     	;# 
   374  0691                     	;# 
   375  0692                     	;# 
   376  0693                     	;# 
   377  0694                     	;# 
   378  0695                     	;# 
   379  0D8E                     	;# 
   380  0D8F                     	;# 
   381  0D90                     	;# 
   382  0D91                     	;# 
   383  0D91                     	;# 
   384  0D92                     	;# 
   385  0D93                     	;# 
   386  0D93                     	;# 
   387  0D94                     	;# 
   388  0D95                     	;# 
   389  0D95                     	;# 
   390  0D96                     	;# 
   391  0D97                     	;# 
   392  0D97                     	;# 
   393  0D98                     	;# 
   394  0D99                     	;# 
   395  0D99                     	;# 
   396  0D9A                     	;# 
   397  0D9B                     	;# 
   398  0D9C                     	;# 
   399  0D9C                     	;# 
   400  0D9D                     	;# 
   401  0D9D                     	;# 
   402  0D9E                     	;# 
   403  0D9F                     	;# 
   404  0DA0                     	;# 
   405  0DA1                     	;# 
   406  0DA1                     	;# 
   407  0DA2                     	;# 
   408  0DA3                     	;# 
   409  0DA3                     	;# 
   410  0DA4                     	;# 
   411  0DA5                     	;# 
   412  0DA5                     	;# 
   413  0DA6                     	;# 
   414  0DA7                     	;# 
   415  0DA7                     	;# 
   416  0DA8                     	;# 
   417  0DA9                     	;# 
   418  0DA9                     	;# 
   419  0DAA                     	;# 
   420  0DAB                     	;# 
   421  0DAC                     	;# 
   422  0DAC                     	;# 
   423  0DAD                     	;# 
   424  0DAD                     	;# 
   425  0DAE                     	;# 
   426  0DAF                     	;# 
   427  0DB0                     	;# 
   428  0DB1                     	;# 
   429  0DB1                     	;# 
   430  0DB2                     	;# 
   431  0DB3                     	;# 
   432  0DB3                     	;# 
   433  0DB4                     	;# 
   434  0DB5                     	;# 
   435  0DB5                     	;# 
   436  0DB6                     	;# 
   437  0DB7                     	;# 
   438  0DB7                     	;# 
   439  0DB8                     	;# 
   440  0DB9                     	;# 
   441  0DB9                     	;# 
   442  0DBA                     	;# 
   443  0DBB                     	;# 
   444  0DBC                     	;# 
   445  0DBC                     	;# 
   446  0DBD                     	;# 
   447  0DBD                     	;# 
   448  0DBE                     	;# 
   449  0DBF                     	;# 
   450  0DC0                     	;# 
   451  0DC1                     	;# 
   452  0DC1                     	;# 
   453  0DC2                     	;# 
   454  0DC3                     	;# 
   455  0DC3                     	;# 
   456  0DC4                     	;# 
   457  0DC5                     	;# 
   458  0DC5                     	;# 
   459  0DC6                     	;# 
   460  0DC7                     	;# 
   461  0DC7                     	;# 
   462  0DC8                     	;# 
   463  0DC9                     	;# 
   464  0DC9                     	;# 
   465  0DCA                     	;# 
   466  0DCB                     	;# 
   467  0DCC                     	;# 
   468  0DCC                     	;# 
   469  0DCD                     	;# 
   470  0DCD                     	;# 
   471  0DCE                     	;# 
   472  0DCF                     	;# 
   473  0DD0                     	;# 
   474  0E0F                     	;# 
   475  0E10                     	;# 
   476  0E11                     	;# 
   477  0E12                     	;# 
   478  0E13                     	;# 
   479  0E14                     	;# 
   480  0E15                     	;# 
   481  0E16                     	;# 
   482  0E17                     	;# 
   483  0E90                     	;# 
   484  0E91                     	;# 
   485  0E92                     	;# 
   486  0E94                     	;# 
   487  0E95                     	;# 
   488  0EA0                     	;# 
   489  0EA1                     	;# 
   490  0EA2                     	;# 
   491  0EA3                     	;# 
   492  0EA4                     	;# 
   493  0EA5                     	;# 
   494  0FE4                     	;# 
   495  0FE5                     	;# 
   496  0FE6                     	;# 
   497  0FE7                     	;# 
   498  0FE8                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEA                     	;# 
   503  0FEB                     	;# 
   504  0FED                     	;# 
   505  0FEE                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000E                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0015                     	;# 
   526  0016                     	;# 
   527  0016                     	;# 
   528  0017                     	;# 
   529  0018                     	;# 
   530  0019                     	;# 
   531  001A                     	;# 
   532  001B                     	;# 
   533  001C                     	;# 
   534  008C                     	;# 
   535  008E                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  009F                     	;# 
   551  010C                     	;# 
   552  010E                     	;# 
   553  0111                     	;# 
   554  0112                     	;# 
   555  0113                     	;# 
   556  0114                     	;# 
   557  0115                     	;# 
   558  0116                     	;# 
   559  0117                     	;# 
   560  0118                     	;# 
   561  0119                     	;# 
   562  018C                     	;# 
   563  018E                     	;# 
   564  0191                     	;# 
   565  0191                     	;# 
   566  0192                     	;# 
   567  0193                     	;# 
   568  0193                     	;# 
   569  0194                     	;# 
   570  0195                     	;# 
   571  0196                     	;# 
   572  0197                     	;# 
   573  0199                     	;# 
   574  019A                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019D                     	;# 
   579  019E                     	;# 
   580  019F                     	;# 
   581  020C                     	;# 
   582  020E                     	;# 
   583  028C                     	;# 
   584  028E                     	;# 
   585  030C                     	;# 
   586  030E                     	;# 
   587  038C                     	;# 
   588  038E                     	;# 
   589  0391                     	;# 
   590  0392                     	;# 
   591  0393                     	;# 
   592  0397                     	;# 
   593  0398                     	;# 
   594  0399                     	;# 
   595  0691                     	;# 
   596  0692                     	;# 
   597  0693                     	;# 
   598  0694                     	;# 
   599  0695                     	;# 
   600  0D8E                     	;# 
   601  0D8F                     	;# 
   602  0D90                     	;# 
   603  0D91                     	;# 
   604  0D91                     	;# 
   605  0D92                     	;# 
   606  0D93                     	;# 
   607  0D93                     	;# 
   608  0D94                     	;# 
   609  0D95                     	;# 
   610  0D95                     	;# 
   611  0D96                     	;# 
   612  0D97                     	;# 
   613  0D97                     	;# 
   614  0D98                     	;# 
   615  0D99                     	;# 
   616  0D99                     	;# 
   617  0D9A                     	;# 
   618  0D9B                     	;# 
   619  0D9C                     	;# 
   620  0D9C                     	;# 
   621  0D9D                     	;# 
   622  0D9D                     	;# 
   623  0D9E                     	;# 
   624  0D9F                     	;# 
   625  0DA0                     	;# 
   626  0DA1                     	;# 
   627  0DA1                     	;# 
   628  0DA2                     	;# 
   629  0DA3                     	;# 
   630  0DA3                     	;# 
   631  0DA4                     	;# 
   632  0DA5                     	;# 
   633  0DA5                     	;# 
   634  0DA6                     	;# 
   635  0DA7                     	;# 
   636  0DA7                     	;# 
   637  0DA8                     	;# 
   638  0DA9                     	;# 
   639  0DA9                     	;# 
   640  0DAA                     	;# 
   641  0DAB                     	;# 
   642  0DAC                     	;# 
   643  0DAC                     	;# 
   644  0DAD                     	;# 
   645  0DAD                     	;# 
   646  0DAE                     	;# 
   647  0DAF                     	;# 
   648  0DB0                     	;# 
   649  0DB1                     	;# 
   650  0DB1                     	;# 
   651  0DB2                     	;# 
   652  0DB3                     	;# 
   653  0DB3                     	;# 
   654  0DB4                     	;# 
   655  0DB5                     	;# 
   656  0DB5                     	;# 
   657  0DB6                     	;# 
   658  0DB7                     	;# 
   659  0DB7                     	;# 
   660  0DB8                     	;# 
   661  0DB9                     	;# 
   662  0DB9                     	;# 
   663  0DBA                     	;# 
   664  0DBB                     	;# 
   665  0DBC                     	;# 
   666  0DBC                     	;# 
   667  0DBD                     	;# 
   668  0DBD                     	;# 
   669  0DBE                     	;# 
   670  0DBF                     	;# 
   671  0DC0                     	;# 
   672  0DC1                     	;# 
   673  0DC1                     	;# 
   674  0DC2                     	;# 
   675  0DC3                     	;# 
   676  0DC3                     	;# 
   677  0DC4                     	;# 
   678  0DC5                     	;# 
   679  0DC5                     	;# 
   680  0DC6                     	;# 
   681  0DC7                     	;# 
   682  0DC7                     	;# 
   683  0DC8                     	;# 
   684  0DC9                     	;# 
   685  0DC9                     	;# 
   686  0DCA                     	;# 
   687  0DCB                     	;# 
   688  0DCC                     	;# 
   689  0DCC                     	;# 
   690  0DCD                     	;# 
   691  0DCD                     	;# 
   692  0DCE                     	;# 
   693  0DCF                     	;# 
   694  0DD0                     	;# 
   695  0E0F                     	;# 
   696  0E10                     	;# 
   697  0E11                     	;# 
   698  0E12                     	;# 
   699  0E13                     	;# 
   700  0E14                     	;# 
   701  0E15                     	;# 
   702  0E16                     	;# 
   703  0E17                     	;# 
   704  0E90                     	;# 
   705  0E91                     	;# 
   706  0E92                     	;# 
   707  0E94                     	;# 
   708  0E95                     	;# 
   709  0EA0                     	;# 
   710  0EA1                     	;# 
   711  0EA2                     	;# 
   712  0EA3                     	;# 
   713  0EA4                     	;# 
   714  0EA5                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE8                     	;# 
   721  0FE9                     	;# 
   722  0FEA                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000E                     	;# 
   743  0011                     	;# 
   744  0012                     	;# 
   745  0013                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008E                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  009F                     	;# 
   772  010C                     	;# 
   773  010E                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  018C                     	;# 
   784  018E                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0194                     	;# 
   791  0195                     	;# 
   792  0196                     	;# 
   793  0197                     	;# 
   794  0199                     	;# 
   795  019A                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020C                     	;# 
   803  020E                     	;# 
   804  028C                     	;# 
   805  028E                     	;# 
   806  030C                     	;# 
   807  030E                     	;# 
   808  038C                     	;# 
   809  038E                     	;# 
   810  0391                     	;# 
   811  0392                     	;# 
   812  0393                     	;# 
   813  0397                     	;# 
   814  0398                     	;# 
   815  0399                     	;# 
   816  0691                     	;# 
   817  0692                     	;# 
   818  0693                     	;# 
   819  0694                     	;# 
   820  0695                     	;# 
   821  0D8E                     	;# 
   822  0D8F                     	;# 
   823  0D90                     	;# 
   824  0D91                     	;# 
   825  0D91                     	;# 
   826  0D92                     	;# 
   827  0D93                     	;# 
   828  0D93                     	;# 
   829  0D94                     	;# 
   830  0D95                     	;# 
   831  0D95                     	;# 
   832  0D96                     	;# 
   833  0D97                     	;# 
   834  0D97                     	;# 
   835  0D98                     	;# 
   836  0D99                     	;# 
   837  0D99                     	;# 
   838  0D9A                     	;# 
   839  0D9B                     	;# 
   840  0D9C                     	;# 
   841  0D9C                     	;# 
   842  0D9D                     	;# 
   843  0D9D                     	;# 
   844  0D9E                     	;# 
   845  0D9F                     	;# 
   846  0DA0                     	;# 
   847  0DA1                     	;# 
   848  0DA1                     	;# 
   849  0DA2                     	;# 
   850  0DA3                     	;# 
   851  0DA3                     	;# 
   852  0DA4                     	;# 
   853  0DA5                     	;# 
   854  0DA5                     	;# 
   855  0DA6                     	;# 
   856  0DA7                     	;# 
   857  0DA7                     	;# 
   858  0DA8                     	;# 
   859  0DA9                     	;# 
   860  0DA9                     	;# 
   861  0DAA                     	;# 
   862  0DAB                     	;# 
   863  0DAC                     	;# 
   864  0DAC                     	;# 
   865  0DAD                     	;# 
   866  0DAD                     	;# 
   867  0DAE                     	;# 
   868  0DAF                     	;# 
   869  0DB0                     	;# 
   870  0DB1                     	;# 
   871  0DB1                     	;# 
   872  0DB2                     	;# 
   873  0DB3                     	;# 
   874  0DB3                     	;# 
   875  0DB4                     	;# 
   876  0DB5                     	;# 
   877  0DB5                     	;# 
   878  0DB6                     	;# 
   879  0DB7                     	;# 
   880  0DB7                     	;# 
   881  0DB8                     	;# 
   882  0DB9                     	;# 
   883  0DB9                     	;# 
   884  0DBA                     	;# 
   885  0DBB                     	;# 
   886  0DBC                     	;# 
   887  0DBC                     	;# 
   888  0DBD                     	;# 
   889  0DBD                     	;# 
   890  0DBE                     	;# 
   891  0DBF                     	;# 
   892  0DC0                     	;# 
   893  0DC1                     	;# 
   894  0DC1                     	;# 
   895  0DC2                     	;# 
   896  0DC3                     	;# 
   897  0DC3                     	;# 
   898  0DC4                     	;# 
   899  0DC5                     	;# 
   900  0DC5                     	;# 
   901  0DC6                     	;# 
   902  0DC7                     	;# 
   903  0DC7                     	;# 
   904  0DC8                     	;# 
   905  0DC9                     	;# 
   906  0DC9                     	;# 
   907  0DCA                     	;# 
   908  0DCB                     	;# 
   909  0DCC                     	;# 
   910  0DCC                     	;# 
   911  0DCD                     	;# 
   912  0DCD                     	;# 
   913  0DCE                     	;# 
   914  0DCF                     	;# 
   915  0DD0                     	;# 
   916  0E0F                     	;# 
   917  0E10                     	;# 
   918  0E11                     	;# 
   919  0E12                     	;# 
   920  0E13                     	;# 
   921  0E14                     	;# 
   922  0E15                     	;# 
   923  0E16                     	;# 
   924  0E17                     	;# 
   925  0E90                     	;# 
   926  0E91                     	;# 
   927  0E92                     	;# 
   928  0E94                     	;# 
   929  0E95                     	;# 
   930  0EA0                     	;# 
   931  0EA1                     	;# 
   932  0EA2                     	;# 
   933  0EA3                     	;# 
   934  0EA4                     	;# 
   935  0EA5                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEA                     	;# 
   945  0FEB                     	;# 
   946  0FED                     	;# 
   947  0FEE                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000E                     	;# 
   964  0011                     	;# 
   965  0012                     	;# 
   966  0013                     	;# 
   967  0015                     	;# 
   968  0016                     	;# 
   969  0016                     	;# 
   970  0017                     	;# 
   971  0018                     	;# 
   972  0019                     	;# 
   973  001A                     	;# 
   974  001B                     	;# 
   975  001C                     	;# 
   976  008C                     	;# 
   977  008E                     	;# 
   978  0091                     	;# 
   979  0092                     	;# 
   980  0093                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0098                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  009F                     	;# 
   993  010C                     	;# 
   994  010E                     	;# 
   995  0111                     	;# 
   996  0112                     	;# 
   997  0113                     	;# 
   998  0114                     	;# 
   999  0115                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  0118                     	;# 
  1003  0119                     	;# 
  1004  018C                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019D                     	;# 
  1021  019E                     	;# 
  1022  019F                     	;# 
  1023  020C                     	;# 
  1024  020E                     	;# 
  1025  028C                     	;# 
  1026  028E                     	;# 
  1027  030C                     	;# 
  1028  030E                     	;# 
  1029  038C                     	;# 
  1030  038E                     	;# 
  1031  0391                     	;# 
  1032  0392                     	;# 
  1033  0393                     	;# 
  1034  0397                     	;# 
  1035  0398                     	;# 
  1036  0399                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0D8E                     	;# 
  1043  0D8F                     	;# 
  1044  0D90                     	;# 
  1045  0D91                     	;# 
  1046  0D91                     	;# 
  1047  0D92                     	;# 
  1048  0D93                     	;# 
  1049  0D93                     	;# 
  1050  0D94                     	;# 
  1051  0D95                     	;# 
  1052  0D95                     	;# 
  1053  0D96                     	;# 
  1054  0D97                     	;# 
  1055  0D97                     	;# 
  1056  0D98                     	;# 
  1057  0D99                     	;# 
  1058  0D99                     	;# 
  1059  0D9A                     	;# 
  1060  0D9B                     	;# 
  1061  0D9C                     	;# 
  1062  0D9C                     	;# 
  1063  0D9D                     	;# 
  1064  0D9D                     	;# 
  1065  0D9E                     	;# 
  1066  0D9F                     	;# 
  1067  0DA0                     	;# 
  1068  0DA1                     	;# 
  1069  0DA1                     	;# 
  1070  0DA2                     	;# 
  1071  0DA3                     	;# 
  1072  0DA3                     	;# 
  1073  0DA4                     	;# 
  1074  0DA5                     	;# 
  1075  0DA5                     	;# 
  1076  0DA6                     	;# 
  1077  0DA7                     	;# 
  1078  0DA7                     	;# 
  1079  0DA8                     	;# 
  1080  0DA9                     	;# 
  1081  0DA9                     	;# 
  1082  0DAA                     	;# 
  1083  0DAB                     	;# 
  1084  0DAC                     	;# 
  1085  0DAC                     	;# 
  1086  0DAD                     	;# 
  1087  0DAD                     	;# 
  1088  0DAE                     	;# 
  1089  0DAF                     	;# 
  1090  0DB0                     	;# 
  1091  0DB1                     	;# 
  1092  0DB1                     	;# 
  1093  0DB2                     	;# 
  1094  0DB3                     	;# 
  1095  0DB3                     	;# 
  1096  0DB4                     	;# 
  1097  0DB5                     	;# 
  1098  0DB5                     	;# 
  1099  0DB6                     	;# 
  1100  0DB7                     	;# 
  1101  0DB7                     	;# 
  1102  0DB8                     	;# 
  1103  0DB9                     	;# 
  1104  0DB9                     	;# 
  1105  0DBA                     	;# 
  1106  0DBB                     	;# 
  1107  0DBC                     	;# 
  1108  0DBC                     	;# 
  1109  0DBD                     	;# 
  1110  0DBD                     	;# 
  1111  0DBE                     	;# 
  1112  0DBF                     	;# 
  1113  0DC0                     	;# 
  1114  0DC1                     	;# 
  1115  0DC1                     	;# 
  1116  0DC2                     	;# 
  1117  0DC3                     	;# 
  1118  0DC3                     	;# 
  1119  0DC4                     	;# 
  1120  0DC5                     	;# 
  1121  0DC5                     	;# 
  1122  0DC6                     	;# 
  1123  0DC7                     	;# 
  1124  0DC7                     	;# 
  1125  0DC8                     	;# 
  1126  0DC9                     	;# 
  1127  0DC9                     	;# 
  1128  0DCA                     	;# 
  1129  0DCB                     	;# 
  1130  0DCC                     	;# 
  1131  0DCC                     	;# 
  1132  0DCD                     	;# 
  1133  0DCD                     	;# 
  1134  0DCE                     	;# 
  1135  0DCF                     	;# 
  1136  0DD0                     	;# 
  1137  0E0F                     	;# 
  1138  0E10                     	;# 
  1139  0E11                     	;# 
  1140  0E12                     	;# 
  1141  0E13                     	;# 
  1142  0E14                     	;# 
  1143  0E15                     	;# 
  1144  0E16                     	;# 
  1145  0E17                     	;# 
  1146  0E90                     	;# 
  1147  0E91                     	;# 
  1148  0E92                     	;# 
  1149  0E94                     	;# 
  1150  0E95                     	;# 
  1151  0EA0                     	;# 
  1152  0EA1                     	;# 
  1153  0EA2                     	;# 
  1154  0EA3                     	;# 
  1155  0EA4                     	;# 
  1156  0EA5                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE8                     	;# 
  1163  0FE9                     	;# 
  1164  0FEA                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEE                     	;# 
  1170  0FEF                     	;# 
  1171  0000                     	;# 
  1172  0001                     	;# 
  1173  0002                     	;# 
  1174  0003                     	;# 
  1175  0004                     	;# 
  1176  0005                     	;# 
  1177  0006                     	;# 
  1178  0007                     	;# 
  1179  0008                     	;# 
  1180  0009                     	;# 
  1181  000A                     	;# 
  1182  000B                     	;# 
  1183  000C                     	;# 
  1184  000E                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0013                     	;# 
  1188  0015                     	;# 
  1189  0016                     	;# 
  1190  0016                     	;# 
  1191  0017                     	;# 
  1192  0018                     	;# 
  1193  0019                     	;# 
  1194  001A                     	;# 
  1195  001B                     	;# 
  1196  001C                     	;# 
  1197  008C                     	;# 
  1198  008E                     	;# 
  1199  0091                     	;# 
  1200  0092                     	;# 
  1201  0093                     	;# 
  1202  0095                     	;# 
  1203  0096                     	;# 
  1204  0097                     	;# 
  1205  0098                     	;# 
  1206  0099                     	;# 
  1207  009A                     	;# 
  1208  009B                     	;# 
  1209  009B                     	;# 
  1210  009C                     	;# 
  1211  009D                     	;# 
  1212  009E                     	;# 
  1213  009F                     	;# 
  1214  010C                     	;# 
  1215  010E                     	;# 
  1216  0111                     	;# 
  1217  0112                     	;# 
  1218  0113                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  0118                     	;# 
  1224  0119                     	;# 
  1225  018C                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0194                     	;# 
  1233  0195                     	;# 
  1234  0196                     	;# 
  1235  0197                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020C                     	;# 
  1245  020E                     	;# 
  1246  028C                     	;# 
  1247  028E                     	;# 
  1248  030C                     	;# 
  1249  030E                     	;# 
  1250  038C                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0397                     	;# 
  1256  0398                     	;# 
  1257  0399                     	;# 
  1258  0691                     	;# 
  1259  0692                     	;# 
  1260  0693                     	;# 
  1261  0694                     	;# 
  1262  0695                     	;# 
  1263  0D8E                     	;# 
  1264  0D8F                     	;# 
  1265  0D90                     	;# 
  1266  0D91                     	;# 
  1267  0D91                     	;# 
  1268  0D92                     	;# 
  1269  0D93                     	;# 
  1270  0D93                     	;# 
  1271  0D94                     	;# 
  1272  0D95                     	;# 
  1273  0D95                     	;# 
  1274  0D96                     	;# 
  1275  0D97                     	;# 
  1276  0D97                     	;# 
  1277  0D98                     	;# 
  1278  0D99                     	;# 
  1279  0D99                     	;# 
  1280  0D9A                     	;# 
  1281  0D9B                     	;# 
  1282  0D9C                     	;# 
  1283  0D9C                     	;# 
  1284  0D9D                     	;# 
  1285  0D9D                     	;# 
  1286  0D9E                     	;# 
  1287  0D9F                     	;# 
  1288  0DA0                     	;# 
  1289  0DA1                     	;# 
  1290  0DA1                     	;# 
  1291  0DA2                     	;# 
  1292  0DA3                     	;# 
  1293  0DA3                     	;# 
  1294  0DA4                     	;# 
  1295  0DA5                     	;# 
  1296  0DA5                     	;# 
  1297  0DA6                     	;# 
  1298  0DA7                     	;# 
  1299  0DA7                     	;# 
  1300  0DA8                     	;# 
  1301  0DA9                     	;# 
  1302  0DA9                     	;# 
  1303  0DAA                     	;# 
  1304  0DAB                     	;# 
  1305  0DAC                     	;# 
  1306  0DAC                     	;# 
  1307  0DAD                     	;# 
  1308  0DAD                     	;# 
  1309  0DAE                     	;# 
  1310  0DAF                     	;# 
  1311  0DB0                     	;# 
  1312  0DB1                     	;# 
  1313  0DB1                     	;# 
  1314  0DB2                     	;# 
  1315  0DB3                     	;# 
  1316  0DB3                     	;# 
  1317  0DB4                     	;# 
  1318  0DB5                     	;# 
  1319  0DB5                     	;# 
  1320  0DB6                     	;# 
  1321  0DB7                     	;# 
  1322  0DB7                     	;# 
  1323  0DB8                     	;# 
  1324  0DB9                     	;# 
  1325  0DB9                     	;# 
  1326  0DBA                     	;# 
  1327  0DBB                     	;# 
  1328  0DBC                     	;# 
  1329  0DBC                     	;# 
  1330  0DBD                     	;# 
  1331  0DBD                     	;# 
  1332  0DBE                     	;# 
  1333  0DBF                     	;# 
  1334  0DC0                     	;# 
  1335  0DC1                     	;# 
  1336  0DC1                     	;# 
  1337  0DC2                     	;# 
  1338  0DC3                     	;# 
  1339  0DC3                     	;# 
  1340  0DC4                     	;# 
  1341  0DC5                     	;# 
  1342  0DC5                     	;# 
  1343  0DC6                     	;# 
  1344  0DC7                     	;# 
  1345  0DC7                     	;# 
  1346  0DC8                     	;# 
  1347  0DC9                     	;# 
  1348  0DC9                     	;# 
  1349  0DCA                     	;# 
  1350  0DCB                     	;# 
  1351  0DCC                     	;# 
  1352  0DCC                     	;# 
  1353  0DCD                     	;# 
  1354  0DCD                     	;# 
  1355  0DCE                     	;# 
  1356  0DCF                     	;# 
  1357  0DD0                     	;# 
  1358  0E0F                     	;# 
  1359  0E10                     	;# 
  1360  0E11                     	;# 
  1361  0E12                     	;# 
  1362  0E13                     	;# 
  1363  0E14                     	;# 
  1364  0E15                     	;# 
  1365  0E16                     	;# 
  1366  0E17                     	;# 
  1367  0E90                     	;# 
  1368  0E91                     	;# 
  1369  0E92                     	;# 
  1370  0E94                     	;# 
  1371  0E95                     	;# 
  1372  0EA0                     	;# 
  1373  0EA1                     	;# 
  1374  0EA2                     	;# 
  1375  0EA3                     	;# 
  1376  0EA4                     	;# 
  1377  0EA5                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE8                     	;# 
  1384  0FE9                     	;# 
  1385  0FEA                     	;# 
  1386  0FEA                     	;# 
  1387  0FEB                     	;# 
  1388  0FED                     	;# 
  1389  0FEE                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000E                     	;# 
  1406  0011                     	;# 
  1407  0012                     	;# 
  1408  0013                     	;# 
  1409  0015                     	;# 
  1410  0016                     	;# 
  1411  0016                     	;# 
  1412  0017                     	;# 
  1413  0018                     	;# 
  1414  0019                     	;# 
  1415  001A                     	;# 
  1416  001B                     	;# 
  1417  001C                     	;# 
  1418  008C                     	;# 
  1419  008E                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0093                     	;# 
  1423  0095                     	;# 
  1424  0096                     	;# 
  1425  0097                     	;# 
  1426  0098                     	;# 
  1427  0099                     	;# 
  1428  009A                     	;# 
  1429  009B                     	;# 
  1430  009B                     	;# 
  1431  009C                     	;# 
  1432  009D                     	;# 
  1433  009E                     	;# 
  1434  009F                     	;# 
  1435  010C                     	;# 
  1436  010E                     	;# 
  1437  0111                     	;# 
  1438  0112                     	;# 
  1439  0113                     	;# 
  1440  0114                     	;# 
  1441  0115                     	;# 
  1442  0116                     	;# 
  1443  0117                     	;# 
  1444  0118                     	;# 
  1445  0119                     	;# 
  1446  018C                     	;# 
  1447  018E                     	;# 
  1448  0191                     	;# 
  1449  0191                     	;# 
  1450  0192                     	;# 
  1451  0193                     	;# 
  1452  0193                     	;# 
  1453  0194                     	;# 
  1454  0195                     	;# 
  1455  0196                     	;# 
  1456  0197                     	;# 
  1457  0199                     	;# 
  1458  019A                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019F                     	;# 
  1465  020C                     	;# 
  1466  020E                     	;# 
  1467  028C                     	;# 
  1468  028E                     	;# 
  1469  030C                     	;# 
  1470  030E                     	;# 
  1471  038C                     	;# 
  1472  038E                     	;# 
  1473  0391                     	;# 
  1474  0392                     	;# 
  1475  0393                     	;# 
  1476  0397                     	;# 
  1477  0398                     	;# 
  1478  0399                     	;# 
  1479  0691                     	;# 
  1480  0692                     	;# 
  1481  0693                     	;# 
  1482  0694                     	;# 
  1483  0695                     	;# 
  1484  0D8E                     	;# 
  1485  0D8F                     	;# 
  1486  0D90                     	;# 
  1487  0D91                     	;# 
  1488  0D91                     	;# 
  1489  0D92                     	;# 
  1490  0D93                     	;# 
  1491  0D93                     	;# 
  1492  0D94                     	;# 
  1493  0D95                     	;# 
  1494  0D95                     	;# 
  1495  0D96                     	;# 
  1496  0D97                     	;# 
  1497  0D97                     	;# 
  1498  0D98                     	;# 
  1499  0D99                     	;# 
  1500  0D99                     	;# 
  1501  0D9A                     	;# 
  1502  0D9B                     	;# 
  1503  0D9C                     	;# 
  1504  0D9C                     	;# 
  1505  0D9D                     	;# 
  1506  0D9D                     	;# 
  1507  0D9E                     	;# 
  1508  0D9F                     	;# 
  1509  0DA0                     	;# 
  1510  0DA1                     	;# 
  1511  0DA1                     	;# 
  1512  0DA2                     	;# 
  1513  0DA3                     	;# 
  1514  0DA3                     	;# 
  1515  0DA4                     	;# 
  1516  0DA5                     	;# 
  1517  0DA5                     	;# 
  1518  0DA6                     	;# 
  1519  0DA7                     	;# 
  1520  0DA7                     	;# 
  1521  0DA8                     	;# 
  1522  0DA9                     	;# 
  1523  0DA9                     	;# 
  1524  0DAA                     	;# 
  1525  0DAB                     	;# 
  1526  0DAC                     	;# 
  1527  0DAC                     	;# 
  1528  0DAD                     	;# 
  1529  0DAD                     	;# 
  1530  0DAE                     	;# 
  1531  0DAF                     	;# 
  1532  0DB0                     	;# 
  1533  0DB1                     	;# 
  1534  0DB1                     	;# 
  1535  0DB2                     	;# 
  1536  0DB3                     	;# 
  1537  0DB3                     	;# 
  1538  0DB4                     	;# 
  1539  0DB5                     	;# 
  1540  0DB5                     	;# 
  1541  0DB6                     	;# 
  1542  0DB7                     	;# 
  1543  0DB7                     	;# 
  1544  0DB8                     	;# 
  1545  0DB9                     	;# 
  1546  0DB9                     	;# 
  1547  0DBA                     	;# 
  1548  0DBB                     	;# 
  1549  0DBC                     	;# 
  1550  0DBC                     	;# 
  1551  0DBD                     	;# 
  1552  0DBD                     	;# 
  1553  0DBE                     	;# 
  1554  0DBF                     	;# 
  1555  0DC0                     	;# 
  1556  0DC1                     	;# 
  1557  0DC1                     	;# 
  1558  0DC2                     	;# 
  1559  0DC3                     	;# 
  1560  0DC3                     	;# 
  1561  0DC4                     	;# 
  1562  0DC5                     	;# 
  1563  0DC5                     	;# 
  1564  0DC6                     	;# 
  1565  0DC7                     	;# 
  1566  0DC7                     	;# 
  1567  0DC8                     	;# 
  1568  0DC9                     	;# 
  1569  0DC9                     	;# 
  1570  0DCA                     	;# 
  1571  0DCB                     	;# 
  1572  0DCC                     	;# 
  1573  0DCC                     	;# 
  1574  0DCD                     	;# 
  1575  0DCD                     	;# 
  1576  0DCE                     	;# 
  1577  0DCF                     	;# 
  1578  0DD0                     	;# 
  1579  0E0F                     	;# 
  1580  0E10                     	;# 
  1581  0E11                     	;# 
  1582  0E12                     	;# 
  1583  0E13                     	;# 
  1584  0E14                     	;# 
  1585  0E15                     	;# 
  1586  0E16                     	;# 
  1587  0E17                     	;# 
  1588  0E90                     	;# 
  1589  0E91                     	;# 
  1590  0E92                     	;# 
  1591  0E94                     	;# 
  1592  0E95                     	;# 
  1593  0EA0                     	;# 
  1594  0EA1                     	;# 
  1595  0EA2                     	;# 
  1596  0EA3                     	;# 
  1597  0EA4                     	;# 
  1598  0EA5                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEA                     	;# 
  1608  0FEB                     	;# 
  1609  0FED                     	;# 
  1610  0FEE                     	;# 
  1611  0FEE                     	;# 
  1612  0FEF                     	;# 
  1613  0000                     	;# 
  1614  0001                     	;# 
  1615  0002                     	;# 
  1616  0003                     	;# 
  1617  0004                     	;# 
  1618  0005                     	;# 
  1619  0006                     	;# 
  1620  0007                     	;# 
  1621  0008                     	;# 
  1622  0009                     	;# 
  1623  000A                     	;# 
  1624  000B                     	;# 
  1625  000C                     	;# 
  1626  000E                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0013                     	;# 
  1630  0015                     	;# 
  1631  0016                     	;# 
  1632  0016                     	;# 
  1633  0017                     	;# 
  1634  0018                     	;# 
  1635  0019                     	;# 
  1636  001A                     	;# 
  1637  001B                     	;# 
  1638  001C                     	;# 
  1639  008C                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0098                     	;# 
  1648  0099                     	;# 
  1649  009A                     	;# 
  1650  009B                     	;# 
  1651  009B                     	;# 
  1652  009C                     	;# 
  1653  009D                     	;# 
  1654  009E                     	;# 
  1655  009F                     	;# 
  1656  010C                     	;# 
  1657  010E                     	;# 
  1658  0111                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0115                     	;# 
  1663  0116                     	;# 
  1664  0117                     	;# 
  1665  0118                     	;# 
  1666  0119                     	;# 
  1667  018C                     	;# 
  1668  018E                     	;# 
  1669  0191                     	;# 
  1670  0191                     	;# 
  1671  0192                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0197                     	;# 
  1678  0199                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020C                     	;# 
  1687  020E                     	;# 
  1688  028C                     	;# 
  1689  028E                     	;# 
  1690  030C                     	;# 
  1691  030E                     	;# 
  1692  038C                     	;# 
  1693  038E                     	;# 
  1694  0391                     	;# 
  1695  0392                     	;# 
  1696  0393                     	;# 
  1697  0397                     	;# 
  1698  0398                     	;# 
  1699  0399                     	;# 
  1700  0691                     	;# 
  1701  0692                     	;# 
  1702  0693                     	;# 
  1703  0694                     	;# 
  1704  0695                     	;# 
  1705  0D8E                     	;# 
  1706  0D8F                     	;# 
  1707  0D90                     	;# 
  1708  0D91                     	;# 
  1709  0D91                     	;# 
  1710  0D92                     	;# 
  1711  0D93                     	;# 
  1712  0D93                     	;# 
  1713  0D94                     	;# 
  1714  0D95                     	;# 
  1715  0D95                     	;# 
  1716  0D96                     	;# 
  1717  0D97                     	;# 
  1718  0D97                     	;# 
  1719  0D98                     	;# 
  1720  0D99                     	;# 
  1721  0D99                     	;# 
  1722  0D9A                     	;# 
  1723  0D9B                     	;# 
  1724  0D9C                     	;# 
  1725  0D9C                     	;# 
  1726  0D9D                     	;# 
  1727  0D9D                     	;# 
  1728  0D9E                     	;# 
  1729  0D9F                     	;# 
  1730  0DA0                     	;# 
  1731  0DA1                     	;# 
  1732  0DA1                     	;# 
  1733  0DA2                     	;# 
  1734  0DA3                     	;# 
  1735  0DA3                     	;# 
  1736  0DA4                     	;# 
  1737  0DA5                     	;# 
  1738  0DA5                     	;# 
  1739  0DA6                     	;# 
  1740  0DA7                     	;# 
  1741  0DA7                     	;# 
  1742  0DA8                     	;# 
  1743  0DA9                     	;# 
  1744  0DA9                     	;# 
  1745  0DAA                     	;# 
  1746  0DAB                     	;# 
  1747  0DAC                     	;# 
  1748  0DAC                     	;# 
  1749  0DAD                     	;# 
  1750  0DAD                     	;# 
  1751  0DAE                     	;# 
  1752  0DAF                     	;# 
  1753  0DB0                     	;# 
  1754  0DB1                     	;# 
  1755  0DB1                     	;# 
  1756  0DB2                     	;# 
  1757  0DB3                     	;# 
  1758  0DB3                     	;# 
  1759  0DB4                     	;# 
  1760  0DB5                     	;# 
  1761  0DB5                     	;# 
  1762  0DB6                     	;# 
  1763  0DB7                     	;# 
  1764  0DB7                     	;# 
  1765  0DB8                     	;# 
  1766  0DB9                     	;# 
  1767  0DB9                     	;# 
  1768  0DBA                     	;# 
  1769  0DBB                     	;# 
  1770  0DBC                     	;# 
  1771  0DBC                     	;# 
  1772  0DBD                     	;# 
  1773  0DBD                     	;# 
  1774  0DBE                     	;# 
  1775  0DBF                     	;# 
  1776  0DC0                     	;# 
  1777  0DC1                     	;# 
  1778  0DC1                     	;# 
  1779  0DC2                     	;# 
  1780  0DC3                     	;# 
  1781  0DC3                     	;# 
  1782  0DC4                     	;# 
  1783  0DC5                     	;# 
  1784  0DC5                     	;# 
  1785  0DC6                     	;# 
  1786  0DC7                     	;# 
  1787  0DC7                     	;# 
  1788  0DC8                     	;# 
  1789  0DC9                     	;# 
  1790  0DC9                     	;# 
  1791  0DCA                     	;# 
  1792  0DCB                     	;# 
  1793  0DCC                     	;# 
  1794  0DCC                     	;# 
  1795  0DCD                     	;# 
  1796  0DCD                     	;# 
  1797  0DCE                     	;# 
  1798  0DCF                     	;# 
  1799  0DD0                     	;# 
  1800  0E0F                     	;# 
  1801  0E10                     	;# 
  1802  0E11                     	;# 
  1803  0E12                     	;# 
  1804  0E13                     	;# 
  1805  0E14                     	;# 
  1806  0E15                     	;# 
  1807  0E16                     	;# 
  1808  0E17                     	;# 
  1809  0E90                     	;# 
  1810  0E91                     	;# 
  1811  0E92                     	;# 
  1812  0E94                     	;# 
  1813  0E95                     	;# 
  1814  0EA0                     	;# 
  1815  0EA1                     	;# 
  1816  0EA2                     	;# 
  1817  0EA3                     	;# 
  1818  0EA4                     	;# 
  1819  0EA5                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;_PD
  1834                           
  1835                           	psect	idataBANK1
  1836  0000                     __pidataBANK1:	
  1837                           
  1838                           	psect	idataBANK2
  1839  0000                     __pidataBANK2:	
  1840                           
  1841                           	psect	stringtext
  1842  07CC                     __pstringtext:	
  1843  07CC                     _PWM:	
  1844  07CC  3400               	retlw	0
  1845  07CD  3400               	retlw	0
  1846  07CE  3430               	retlw	48
  1847  07CF  3402               	retlw	2
  1848  07D0  343A               	retlw	58
  1849  07D1  3402               	retlw	2
  1850  07D2  3445               	retlw	69
  1851  07D3  3402               	retlw	2
  1852  07D4  3450               	retlw	80
  1853  07D5  3402               	retlw	2
  1854  07D6  345B               	retlw	91
  1855  07D7  3402               	retlw	2
  1856  07D8  3467               	retlw	103
  1857  07D9  3402               	retlw	2
  1858  07DA  3472               	retlw	114
  1859  07DB  3402               	retlw	2
  1860  07DC  347E               	retlw	126
  1861  07DD  3402               	retlw	2
  1862  07DE  348A               	retlw	138
  1863  07DF  3402               	retlw	2
  1864  07E0  3496               	retlw	150
  1865  07E1  3402               	retlw	2
  1866  07E2  34A3               	retlw	163
  1867  07E3  3402               	retlw	2
  1868  07E4  34B0               	retlw	176
  1869  07E5  3402               	retlw	2
  1870  07E6  34BD               	retlw	189
  1871  07E7  3402               	retlw	2
  1872  07E8  34CA               	retlw	202
  1873  07E9  3402               	retlw	2
  1874  07EA  34D8               	retlw	216
  1875  07EB  3402               	retlw	2
  1876  07EC  34E5               	retlw	229
  1877  07ED  3402               	retlw	2
  1878  07EE  34F3               	retlw	243
  1879  07EF  3402               	retlw	2
  1880  07F0  3402               	retlw	2
  1881  07F1  3403               	retlw	3
  1882  07F2  3410               	retlw	16
  1883  07F3  3403               	retlw	3
  1884  07F4  341F               	retlw	31
  1885  07F5  3403               	retlw	3
  1886  07F6  342E               	retlw	46
  1887  07F7  3403               	retlw	3
  1888  07F8  343E               	retlw	62
  1889  07F9  3403               	retlw	3
  1890  07FA  344D               	retlw	77
  1891  07FB  3403               	retlw	3
  1892  07FC  345D               	retlw	93
  1893  07FD  3403               	retlw	3
  1894  07FE  346E               	retlw	110
  1895  07FF  3403               	retlw	3
  1896  0800  347E               	retlw	126
  1897  0801  3403               	retlw	3
  1898  0802  348F               	retlw	143
  1899  0803  3403               	retlw	3
  1900  0804  34A1               	retlw	161
  1901  0805  3403               	retlw	3
  1902  0806  34B2               	retlw	178
  1903  0807  3403               	retlw	3
  1904  0808  34C4               	retlw	196
  1905  0809  3403               	retlw	3
  1906  080A  34D6               	retlw	214
  1907  080B  3403               	retlw	3
  1908  080C  34E9               	retlw	233
  1909  080D  3403               	retlw	3
  1910  080E  34FC               	retlw	252
  1911  080F  3403               	retlw	3
  1912  0810  340F               	retlw	15
  1913  0811  3404               	retlw	4
  1914  0812  3423               	retlw	35
  1915  0813  3404               	retlw	4
  1916  0814  3437               	retlw	55
  1917  0815  3404               	retlw	4
  1918  0816  344B               	retlw	75
  1919  0817  3404               	retlw	4
  1920  0818  3460               	retlw	96
  1921  0819  3404               	retlw	4
  1922  081A  3475               	retlw	117
  1923  081B  3404               	retlw	4
  1924  081C  348B               	retlw	139
  1925  081D  3404               	retlw	4
  1926  081E  34A1               	retlw	161
  1927  081F  3404               	retlw	4
  1928  0820  34B7               	retlw	183
  1929  0821  3404               	retlw	4
  1930  0822  34CE               	retlw	206
  1931  0823  3404               	retlw	4
  1932  0824  34E6               	retlw	230
  1933  0825  3404               	retlw	4
  1934  0826  34FD               	retlw	253
  1935  0827  3404               	retlw	4
  1936  0828  3416               	retlw	22
  1937  0829  3405               	retlw	5
  1938  082A  342E               	retlw	46
  1939  082B  3405               	retlw	5
  1940  082C  3447               	retlw	71
  1941  082D  3405               	retlw	5
  1942  082E  3461               	retlw	97
  1943  082F  3405               	retlw	5
  1944  0830  347B               	retlw	123
  1945  0831  3405               	retlw	5
  1946  0832  3495               	retlw	149
  1947  0833  3405               	retlw	5
  1948  0834  34B1               	retlw	177
  1949  0835  3405               	retlw	5
  1950  0836  34CC               	retlw	204
  1951  0837  3405               	retlw	5
  1952  0838  34E8               	retlw	232
  1953  0839  3405               	retlw	5
  1954  083A  3405               	retlw	5
  1955  083B  3406               	retlw	6
  1956  083C  3422               	retlw	34
  1957  083D  3406               	retlw	6
  1958  083E  3440               	retlw	64
  1959  083F  3406               	retlw	6
  1960  0840  345E               	retlw	94
  1961  0841  3406               	retlw	6
  1962  0842  347D               	retlw	125
  1963  0843  3406               	retlw	6
  1964  0844  349C               	retlw	156
  1965  0845  3406               	retlw	6
  1966  0846  34BC               	retlw	188
  1967  0847  3406               	retlw	6
  1968  0848  34DD               	retlw	221
  1969  0849  3406               	retlw	6
  1970  084A  34FE               	retlw	254
  1971  084B  3406               	retlw	6
  1972  084C  3420               	retlw	32
  1973  084D  3407               	retlw	7
  1974  084E  3443               	retlw	67
  1975  084F  3407               	retlw	7
  1976  0850  3466               	retlw	102
  1977  0851  3407               	retlw	7
  1978  0852  348A               	retlw	138
  1979  0853  3407               	retlw	7
  1980  0854  34AE               	retlw	174
  1981  0855  3407               	retlw	7
  1982  0856  34D3               	retlw	211
  1983  0857  3407               	retlw	7
  1984  0858  34F9               	retlw	249
  1985  0859  3407               	retlw	7
  1986  085A  3420               	retlw	32
  1987  085B  3408               	retlw	8
  1988  085C  3447               	retlw	71
  1989  085D  3408               	retlw	8
  1990  085E  3470               	retlw	112
  1991  085F  3408               	retlw	8
  1992  0860  3498               	retlw	152
  1993  0861  3408               	retlw	8
  1994  0862  34C2               	retlw	194
  1995  0863  3408               	retlw	8
  1996  0864  34ED               	retlw	237
  1997  0865  3408               	retlw	8
  1998  0866  3418               	retlw	24
  1999  0867  3409               	retlw	9
  2000  0868  3444               	retlw	68
  2001  0869  3409               	retlw	9
  2002  086A  3471               	retlw	113
  2003  086B  3409               	retlw	9
  2004  086C  349F               	retlw	159
  2005  086D  3409               	retlw	9
  2006  086E  34CD               	retlw	205
  2007  086F  3409               	retlw	9
  2008  0870  34FD               	retlw	253
  2009  0871  3409               	retlw	9
  2010  0872  342D               	retlw	45
  2011  0873  340A               	retlw	10
  2012  0874  345E               	retlw	94
  2013  0875  340A               	retlw	10
  2014  0876  3491               	retlw	145
  2015  0877  340A               	retlw	10
  2016  0878  34C4               	retlw	196
  2017  0879  340A               	retlw	10
  2018  087A  34F8               	retlw	248
  2019  087B  340A               	retlw	10
  2020  087C  342D               	retlw	45
  2021  087D  340B               	retlw	11
  2022  087E  3463               	retlw	99
  2023  087F  340B               	retlw	11
  2024  0880  349A               	retlw	154
  2025  0881  340B               	retlw	11
  2026  0882  34D3               	retlw	211
  2027  0883  340B               	retlw	11
  2028  0884  340C               	retlw	12
  2029  0885  340C               	retlw	12
  2030  0886  3446               	retlw	70
  2031  0887  340C               	retlw	12
  2032  0888  3482               	retlw	130
  2033  0889  340C               	retlw	12
  2034  088A  34BE               	retlw	190
  2035  088B  340C               	retlw	12
  2036  088C  34FC               	retlw	252
  2037  088D  340C               	retlw	12
  2038  088E  343B               	retlw	59
  2039  088F  340D               	retlw	13
  2040  0890  347B               	retlw	123
  2041  0891  340D               	retlw	13
  2042  0892  34BD               	retlw	189
  2043  0893  340D               	retlw	13
  2044  0894  34FF               	retlw	255
  2045  0895  340D               	retlw	13
  2046  0896  3443               	retlw	67
  2047  0897  340E               	retlw	14
  2048  0898  3488               	retlw	136
  2049  0899  340E               	retlw	14
  2050  089A  34CE               	retlw	206
  2051  089B  340E               	retlw	14
  2052  089C  3416               	retlw	22
  2053  089D  340F               	retlw	15
  2054  089E  345F               	retlw	95
  2055  089F  340F               	retlw	15
  2056  08A0  34AA               	retlw	170
  2057  08A1  340F               	retlw	15
  2058  08A2  34F6               	retlw	246
  2059  08A3  340F               	retlw	15
  2060  08A4  3443               	retlw	67
  2061  08A5  3410               	retlw	16
  2062  08A6  3492               	retlw	146
  2063  08A7  3410               	retlw	16
  2064  08A8  34E2               	retlw	226
  2065  08A9  3410               	retlw	16
  2066  08AA  3434               	retlw	52
  2067  08AB  3411               	retlw	17
  2068  08AC  3487               	retlw	135
  2069  08AD  3411               	retlw	17
  2070  08AE  34DC               	retlw	220
  2071  08AF  3411               	retlw	17
  2072  08B0  3433               	retlw	51
  2073  08B1  3412               	retlw	18
  2074  08B2  348B               	retlw	139
  2075  08B3  3412               	retlw	18
  2076  08B4  34E5               	retlw	229
  2077  08B5  3412               	retlw	18
  2078  08B6  3440               	retlw	64
  2079  08B7  3413               	retlw	19
  2080  08B8  349E               	retlw	158
  2081  08B9  3413               	retlw	19
  2082  08BA  34FD               	retlw	253
  2083  08BB  3413               	retlw	19
  2084  08BC  345E               	retlw	94
  2085  08BD  3414               	retlw	20
  2086  08BE  34C0               	retlw	192
  2087  08BF  3414               	retlw	20
  2088  08C0  3425               	retlw	37
  2089  08C1  3415               	retlw	21
  2090  08C2  348B               	retlw	139
  2091  08C3  3415               	retlw	21
  2092  08C4  34F4               	retlw	244
  2093  08C5  3415               	retlw	21
  2094  08C6  345E               	retlw	94
  2095  08C7  3416               	retlw	22
  2096  08C8  34CA               	retlw	202
  2097  08C9  3416               	retlw	22
  2098  08CA  3439               	retlw	57
  2099  08CB  3417               	retlw	23
  2100  08CC  34A9               	retlw	169
  2101  08CD  3417               	retlw	23
  2102  08CE  341C               	retlw	28
  2103  08CF  3418               	retlw	24
  2104  08D0  3491               	retlw	145
  2105  08D1  3418               	retlw	24
  2106  08D2  3408               	retlw	8
  2107  08D3  3419               	retlw	25
  2108  08D4  3481               	retlw	129
  2109  08D5  3419               	retlw	25
  2110  08D6  34FD               	retlw	253
  2111  08D7  3419               	retlw	25
  2112  08D8  347B               	retlw	123
  2113  08D9  341A               	retlw	26
  2114  08DA  34FB               	retlw	251
  2115  08DB  341A               	retlw	26
  2116  08DC  347E               	retlw	126
  2117  08DD  341B               	retlw	27
  2118  08DE  3403               	retlw	3
  2119  08DF  341C               	retlw	28
  2120  08E0  348B               	retlw	139
  2121  08E1  341C               	retlw	28
  2122  08E2  3415               	retlw	21
  2123  08E3  341D               	retlw	29
  2124  08E4  34A2               	retlw	162
  2125  08E5  341D               	retlw	29
  2126  08E6  3431               	retlw	49
  2127  08E7  341E               	retlw	30
  2128  08E8  34C4               	retlw	196
  2129  08E9  341E               	retlw	30
  2130  08EA  3459               	retlw	89
  2131  08EB  341F               	retlw	31
  2132  08EC  34F1               	retlw	241
  2133  08ED  341F               	retlw	31
  2134  08EE  348B               	retlw	139
  2135  08EF  3420               	retlw	32
  2136  08F0  3429               	retlw	41
  2137  08F1  3421               	retlw	33
  2138  08F2  34CA               	retlw	202
  2139  08F3  3421               	retlw	33
  2140  08F4  346E               	retlw	110
  2141  08F5  3422               	retlw	34
  2142  08F6  3414               	retlw	20
  2143  08F7  3423               	retlw	35
  2144  08F8  34BE               	retlw	190
  2145  08F9  3423               	retlw	35
  2146  08FA  346C               	retlw	108
  2147  08FB  3424               	retlw	36
  2148  08FC  341C               	retlw	28
  2149  08FD  3425               	retlw	37
  2150  08FE  34D0               	retlw	208
  2151  08FF  3425               	retlw	37
  2152  0900  3487               	retlw	135
  2153  0901  3426               	retlw	38
  2154  0902  3442               	retlw	66
  2155  0903  3427               	retlw	39
  2156  0904  3400               	retlw	0
  2157  0905  3428               	retlw	40
  2158  0906  34C2               	retlw	194
  2159  0907  3428               	retlw	40
  2160  0908  3487               	retlw	135
  2161  0909  3429               	retlw	41
  2162  090A  3450               	retlw	80
  2163  090B  342A               	retlw	42
  2164  090C  341D               	retlw	29
  2165  090D  342B               	retlw	43
  2166  090E  34EE               	retlw	238
  2167  090F  342B               	retlw	43
  2168  0910  34C3               	retlw	195
  2169  0911  342C               	retlw	44
  2170  0912  349C               	retlw	156
  2171  0913  342D               	retlw	45
  2172  0914  3479               	retlw	121
  2173  0915  342E               	retlw	46
  2174  0916  345A               	retlw	90
  2175  0917  342F               	retlw	47
  2176  0918  3440               	retlw	64
  2177  0919  3430               	retlw	48
  2178  091A  342A               	retlw	42
  2179  091B  3431               	retlw	49
  2180  091C  3418               	retlw	24
  2181  091D  3432               	retlw	50
  2182  091E  340A               	retlw	10
  2183  091F  3433               	retlw	51
  2184  0920  3402               	retlw	2
  2185  0921  3434               	retlw	52
  2186  0922  34FE               	retlw	254
  2187  0923  3434               	retlw	52
  2188  0924  34FF               	retlw	255
  2189  0925  3435               	retlw	53
  2190  0926  3404               	retlw	4
  2191  0927  3437               	retlw	55
  2192  0928  340F               	retlw	15
  2193  0929  3438               	retlw	56
  2194  092A  341E               	retlw	30
  2195  092B  3439               	retlw	57
  2196  092C  3433               	retlw	51
  2197  092D  343A               	retlw	58
  2198  092E  344D               	retlw	77
  2199  092F  343B               	retlw	59
  2200  0930  346C               	retlw	108
  2201  0931  343C               	retlw	60
  2202  0932  3491               	retlw	145
  2203  0933  343D               	retlw	61
  2204  0934  34BB               	retlw	187
  2205  0935  343E               	retlw	62
  2206  0936  34EB               	retlw	235
  2207  0937  343F               	retlw	63
  2208  0938  3421               	retlw	33
  2209  0939  3441               	retlw	65
  2210  093A  345D               	retlw	93
  2211  093B  3442               	retlw	66
  2212  093C  349E               	retlw	158
  2213  093D  3443               	retlw	67
  2214  093E  34E6               	retlw	230
  2215  093F  3444               	retlw	68
  2216  0940  3434               	retlw	52
  2217  0941  3446               	retlw	70
  2218  0942  3488               	retlw	136
  2219  0943  3447               	retlw	71
  2220  0944  34E2               	retlw	226
  2221  0945  3448               	retlw	72
  2222  0946  3444               	retlw	68
  2223  0947  344A               	retlw	74
  2224  0948  34AB               	retlw	171
  2225  0949  344B               	retlw	75
  2226  094A  341A               	retlw	26
  2227  094B  344D               	retlw	77
  2228  094C  3490               	retlw	144
  2229  094D  344E               	retlw	78
  2230  094E  340C               	retlw	12
  2231  094F  3450               	retlw	80
  2232  0950  3490               	retlw	144
  2233  0951  3451               	retlw	81
  2234  0952  341B               	retlw	27
  2235  0953  3453               	retlw	83
  2236  0954  34AE               	retlw	174
  2237  0955  3454               	retlw	84
  2238  0956  3448               	retlw	72
  2239  0957  3456               	retlw	86
  2240  0958  34EA               	retlw	234
  2241  0959  3457               	retlw	87
  2242  095A  3494               	retlw	148
  2243  095B  3459               	retlw	89
  2244  095C  3446               	retlw	70
  2245  095D  345B               	retlw	91
  2246  095E  3401               	retlw	1
  2247  095F  345D               	retlw	93
  2248  0960  34C3               	retlw	195
  2249  0961  345E               	retlw	94
  2250  0962  348E               	retlw	142
  2251  0963  3460               	retlw	96
  2252  0964  3462               	retlw	98
  2253  0965  3462               	retlw	98
  2254  0966  343F               	retlw	63
  2255  0967  3464               	retlw	100
  2256  0968  3425               	retlw	37
  2257  0969  3466               	retlw	102
  2258  096A  3414               	retlw	20
  2259  096B  3468               	retlw	104
  2260  096C  340C               	retlw	12
  2261  096D  346A               	retlw	106
  2262  096E  340E               	retlw	14
  2263  096F  346C               	retlw	108
  2264  0970  3419               	retlw	25
  2265  0971  346E               	retlw	110
  2266  0972  342F               	retlw	47
  2267  0973  3470               	retlw	112
  2268  0974  344E               	retlw	78
  2269  0975  3472               	retlw	114
  2270  0976  3478               	retlw	120
  2271  0977  3474               	retlw	116
  2272  0978  34AC               	retlw	172
  2273  0979  3476               	retlw	118
  2274  097A  34EB               	retlw	235
  2275  097B  3478               	retlw	120
  2276  097C  3435               	retlw	53
  2277  097D  347B               	retlw	123
  2278  097E  348A               	retlw	138
  2279  097F  347D               	retlw	125
  2280  0980  34EA               	retlw	234
  2281  0981  347F               	retlw	127
  2282  0982  3456               	retlw	86
  2283  0983  3482               	retlw	130
  2284  0984  34CE               	retlw	206
  2285  0985  3484               	retlw	132
  2286  0986  3451               	retlw	81
  2287  0987  3487               	retlw	135
  2288  0988  34E1               	retlw	225
  2289  0989  3489               	retlw	137
  2290  098A  347D               	retlw	125
  2291  098B  348C               	retlw	140
  2292  098C  3426               	retlw	38
  2293  098D  348F               	retlw	143
  2294  098E  34DB               	retlw	219
  2295  098F  3491               	retlw	145
  2296  0990  349E               	retlw	158
  2297  0991  3494               	retlw	148
  2298  0992  346E               	retlw	110
  2299  0993  3497               	retlw	151
  2300  0994  344C               	retlw	76
  2301  0995  349A               	retlw	154
  2302  0996  3437               	retlw	55
  2303  0997  349D               	retlw	157
  2304  0998  3431               	retlw	49
  2305  0999  34A0               	retlw	160
  2306  099A  3439               	retlw	57
  2307  099B  34A3               	retlw	163
  2308  099C  3450               	retlw	80
  2309  099D  34A6               	retlw	166
  2310  099E  3476               	retlw	118
  2311  099F  34A9               	retlw	169
  2312  09A0  34AB               	retlw	171
  2313  09A1  34AC               	retlw	172
  2314  09A2  34EF               	retlw	239
  2315  09A3  34AF               	retlw	175
  2316  09A4  3444               	retlw	68
  2317  09A5  34B3               	retlw	179
  2318  09A6  34A8               	retlw	168
  2319  09A7  34B6               	retlw	182
  2320  09A8  341D               	retlw	29
  2321  09A9  34BA               	retlw	186
  2322  09AA  34A3               	retlw	163
  2323  09AB  34BD               	retlw	189
  2324  09AC  343A               	retlw	58
  2325  09AD  34C1               	retlw	193
  2326  09AE  34E2               	retlw	226
  2327  09AF  34C4               	retlw	196
  2328  09B0  349C               	retlw	156
  2329  09B1  34C8               	retlw	200
  2330  09B2  3468               	retlw	104
  2331  09B3  34CC               	retlw	204
  2332  09B4  3447               	retlw	71
  2333  09B5  34D0               	retlw	208
  2334  09B6  3438               	retlw	56
  2335  09B7  34D4               	retlw	212
  2336  09B8  343C               	retlw	60
  2337  09B9  34D8               	retlw	216
  2338  09BA  3454               	retlw	84
  2339  09BB  34DC               	retlw	220
  2340  09BC  347F               	retlw	127
  2341  09BD  34E0               	retlw	224
  2342  09BE  34BF               	retlw	191
  2343  09BF  34E4               	retlw	228
  2344  09C0  3413               	retlw	19
  2345  09C1  34E9               	retlw	233
  2346  09C2  347D               	retlw	125
  2347  09C3  34ED               	retlw	237
  2348  09C4  34FB               	retlw	251
  2349  09C5  34F1               	retlw	241
  2350  09C6  3490               	retlw	144
  2351  09C7  34F6               	retlw	246
  2352  09C8  343A               	retlw	58
  2353  09C9  34FB               	retlw	251
  2354  09CA  34FF               	retlw	255
  2355  09CB  34FF               	retlw	255
  2356  09CC                     __end_of_PWM:	
  2357  09CC                     _UID:	
  2358  09CC  344D               	retlw	77
  2359  09CD  3452               	retlw	82
  2360  09CE  3417               	retlw	23
  2361  09CF  34C3               	retlw	195
  2362  09D0  3410               	retlw	16
  2363  09D1  3492               	retlw	146
  2364  09D2                     __end_of_UID:	
  2365                           
  2366                           	psect	nvBANK1
  2367  00ED                     __pnvBANK1:	
  2368  00ED                     _DMX_Address:	
  2369  00ED                     	ds	2
  2370  0016                     _TMR1	set	22
  2371  0018                     _T1CON	set	24
  2372  000B                     _INTCON	set	11
  2373  001B                     _PR2	set	27
  2374  0065                     _RA5	set	101
  2375  008C                     _TXIF	set	140
  2376  0088                     _TMR1IF	set	136
  2377  008E                     _ADIF	set	142
  2378  005E                     _PEIE	set	94
  2379  008D                     _RCIF	set	141
  2380  009C                     _ADRESH	set	156
  2381  009E                     _ADCON1	set	158
  2382  009D                     _ADCON0	set	157
  2383  0098                     _OSCTUNE	set	152
  2384  0099                     _OSCCON	set	153
  2385  048E                     _ADIE	set	1166
  2386  0474                     _TRISC4	set	1140
  2387  0488                     _TMR1IE	set	1160
  2388  04E9                     _GO_nDONE	set	1257
  2389  0464                     _TRISA4	set	1124
  2390  048C                     _TXIE	set	1164
  2391  048D                     _RCIE	set	1165
  2392  0475                     _TRISC5	set	1141
  2393  0473                     _TRISC3	set	1139
  2394  0472                     _TRISC2	set	1138
  2395  0471                     _TRISC1	set	1137
  2396  0470                     _TRISC0	set	1136
  2397  0462                     _TRISA2	set	1122
  2398  0873                     _LATC3	set	2163
  2399  0874                     _LATC4	set	2164
  2400  0199                     _RCREG	set	409
  2401  019A                     _TXREG	set	410
  2402  019B                     _SPBRGL	set	411
  2403  019C                     _SPBRGH	set	412
  2404  019F                     _BAUDCON	set	415
  2405  019D                     _RCSTA	set	413
  2406  0CF0                     _TX9D	set	3312
  2407  0CF6                     _TX9	set	3318
  2408  0CEF                     _SPEN	set	3311
  2409  0C64                     _ANSA4	set	3172
  2410  0CEA                     _FERR	set	3306
  2411  0CF5                     _TXEN	set	3317
  2412  0CF2                     _BRGH	set	3314
  2413  0CF4                     _SYNC	set	3316
  2414  0C73                     _ANSC3	set	3187
  2415  0C72                     _ANSC2	set	3186
  2416  0C71                     _ANSC1	set	3185
  2417  0C70                     _ANSC0	set	3184
  2418  0C62                     _ANSA2	set	3170
  2419  0DC3                     _PWM4DC	set	3523
  2420  0DB3                     _PWM3DC	set	3507
  2421  0DA3                     _PWM2DC	set	3491
  2422  0D93                     _PWM1DC	set	3475
  2423  0DCE                     _PWM4CLKCON	set	3534
  2424  0DBE                     _PWM3CLKCON	set	3518
  2425  0DAE                     _PWM2CLKCON	set	3502
  2426  0D9E                     _PWM1CLKCON	set	3486
  2427  0DC5                     _PWM4PRL	set	3525
  2428  0DB5                     _PWM3PRL	set	3509
  2429  0DA5                     _PWM2PRL	set	3493
  2430  0D95                     _PWM1PRL	set	3477
  2431  0DC6                     _PWM4PRH	set	3526
  2432  0DB6                     _PWM3PRH	set	3510
  2433  0DA6                     _PWM2PRH	set	3494
  2434  0D96                     _PWM1PRH	set	3478
  2435  0DC1                     _PWM4PHL	set	3521
  2436  0DB1                     _PWM3PHL	set	3505
  2437  0DA1                     _PWM2PHL	set	3489
  2438  0D91                     _PWM1PHL	set	3473
  2439  0DC2                     _PWM4PHH	set	3522
  2440  0DB2                     _PWM3PHH	set	3506
  2441  0DA2                     _PWM2PHH	set	3490
  2442  0D92                     _PWM1PHH	set	3474
  2443  0DCB                     _PWM4CON	set	3531
  2444  0DBB                     _PWM3CON	set	3515
  2445  0DAB                     _PWM2CON	set	3499
  2446  0D9B                     _PWM1CON	set	3483
  2447  0DCF                     _PWM4LDCON	set	3535
  2448  0DBF                     _PWM3LDCON	set	3519
  2449  0DAF                     _PWM2LDCON	set	3503
  2450  0D9F                     _PWM1LDCON	set	3487
  2451  0DC3                     _PWM4DCL	set	3523
  2452  0DB3                     _PWM3DCL	set	3507
  2453  0DA3                     _PWM2DCL	set	3491
  2454  0D93                     _PWM1DCL	set	3475
  2455  0DC4                     _PWM4DCH	set	3524
  2456  0DB4                     _PWM3DCH	set	3508
  2457  0DA4                     _PWM2DCH	set	3492
  2458  0D94                     _PWM1DCH	set	3476
  2459  0E15                     _RXPPS	set	3605
  2460  0EA4                     _RC4PPS	set	3748
  2461  0EA2                     _RC2PPS	set	3746
  2462  0EA1                     _RC1PPS	set	3745
  2463  0EA0                     _RC0PPS	set	3744
  2464  0E92                     _RA2PPS	set	3730
  2465                           
  2466                           ; #config settings
  2467  0000                     
  2468                           	psect	cinit
  2469  0015                     start_initialization:	
  2470  0015                     __initialization:		;BIGRAM
  2471                           
  2472                           ; Initialize objects allocated to BANK1
  2473  0015  0021               	movlb	1	; select bank1
  2474                           
  2475                           ;initializer for _DMX_sumRepeat
  2476  0016  3002               	movlw	2
  2477  0017  00E8               	movwf	__pdataBANK1& (0+127)
  2478  0018  3064               	movlw	100
  2479  0019  01E9               	clrf	(__pdataBANK1+1)& (0+127)
  2480  001A  01EA               	clrf	(__pdataBANK1+2)& (0+127)
  2481  001B  01EB               	clrf	(__pdataBANK1+3)& (0+127)
  2482                           
  2483                           ;initializer for _DMXPeriod
  2484  001C  00EC               	movwf	(__pdataBANK1+4)& (0+127)
  2485                           
  2486                           ; Initialize objects allocated to BANK2
  2487  001D  0022               	movlb	2	; select bank2
  2488                           
  2489                           ;initializer for _DMX_Repeat
  2490  001E  3001               	movlw	1
  2491  001F  00E4               	movwf	__pdataBANK2& (0+127)
  2492  0020  308C               	movlw	140
  2493  0021  01E5               	clrf	(__pdataBANK2+1)& (0+127)
  2494  0022  01E6               	clrf	(__pdataBANK2+2)& (0+127)
  2495  0023  01E7               	clrf	(__pdataBANK2+3)& (0+127)
  2496  0024  01E8               	clrf	(__pdataBANK2+4)& (0+127)
  2497  0025  01E9               	clrf	(__pdataBANK2+5)& (0+127)
  2498  0026  01EA               	clrf	(__pdataBANK2+6)& (0+127)
  2499  0027  01EB               	clrf	(__pdataBANK2+7)& (0+127)
  2500                           
  2501                           ; Clear objects allocated to BIGRAM
  2502  0028  0084               	movwf	4
  2503  0029  3021               	movlw	33
  2504  002A  0085               	movwf	5
  2505  002B  3064               	movlw	100
  2506  002C  00FE               	movwf	126
  2507  002D  01FF               	clrf	127
  2508  002E  318A  22FF  3180   	fcall	clear_ram0
  2509  0031  30A0               	movlw	low __pbssBANK1
  2510                           
  2511                           ; Clear objects allocated to COMMON
  2512  0032  01F6               	clrf	__pbssCOMMON& (0+127)
  2513  0033  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2514  0034  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2515  0035  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2516                           
  2517                           ; Clear objects allocated to BANK1
  2518  0036  0084               	movwf	4
  2519  0037  3000               	movlw	high __pbssBANK1
  2520  0038  0085               	movwf	5
  2521  0039  3048               	movlw	72
  2522  003A  00FE               	movwf	126
  2523  003B  01FF               	clrf	127
  2524  003C  318A  22FF  3180   	fcall	clear_ram0
  2525                           
  2526                           ; Clear objects allocated to BANK2
  2527  003F  3020               	movlw	low __pbssBANK2
  2528  0040  0084               	movwf	4
  2529  0041  3001               	movlw	high __pbssBANK2
  2530  0042  0085               	movwf	5
  2531  0043  3044               	movlw	68
  2532  0044  00FE               	movwf	126
  2533  0045  01FF               	clrf	127
  2534  0046  318A  22FF  3180   	fcall	clear_ram0
  2535                           
  2536                           ; Clear objects allocated to BANK3
  2537  0049  30A0               	movlw	low __pbssBANK3
  2538  004A  0084               	movwf	4
  2539  004B  3001               	movlw	high __pbssBANK3
  2540  004C  0085               	movwf	5
  2541  004D  3034               	movlw	52
  2542  004E  00FE               	movwf	126
  2543  004F  01FF               	clrf	127
  2544  0050  318A  22FF  3180   	fcall	clear_ram0
  2545  0053                     end_of_initialization:	
  2546                           ;End of C runtime variable initialization code
  2547                           
  2548  0053                     __end_of__initialization:	
  2549  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2550  0054  0020               	movlb	0
  2551  0055  2856               	ljmp	_main	;jump to C main() function
  2552  0056                     __pmaintext:	
  2553 ;;
  2554 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2555 ;;
  2556 ;; *************** function _main *****************
  2557 ;; Defined at:
  2558 ;;		line 24 in file "main.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : B1F/0
  2569 ;;		On exit  : 1C/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2572 ;;      Params:         0       0       0       0       0       0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0       0
  2575 ;;      Totals:         0       0       0       0       0       0       0       0
  2576 ;;Total ram usage:        0 bytes
  2577 ;; Hardware stack levels required when called:    6
  2578 ;; This function calls:
  2579 ;;		_ADC_init
  2580 ;;		_ADC_loop
  2581 ;;		_DMX_init
  2582 ;;		_DMX_loop
  2583 ;;		_RDM_init
  2584 ;;		_RDM_rx_loop
  2585 ;;		_timer1_init
  2586 ;; This function is called by:
  2587 ;;		Startup code after reset
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           
  2592                           ;psect for function _main
  2593  0056                     _main:	
  2594                           
  2595                           ;main.c: 25: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2599  0056  3080               	movlw	128
  2600  0057  003B               	movlb	27	; select bank27
  2601  0058  00CB               	movwf	75	;volatile
  2602  0059  00BB               	movwf	59	;volatile
  2603  005A  00AB               	movwf	43	;volatile
  2604  005B  009B               	movwf	27	;volatile
  2605                           
  2606                           ;main.c: 26: PR2 = 0xFF;
  2607  005C  30FF               	movlw	255
  2608  005D  0020               	movlb	0	; select bank0
  2609  005E  009B               	movwf	27	;volatile
  2610                           
  2611                           ;main.c: 28: OSCCON = 0b11110000;
  2612  005F  30F0               	movlw	240
  2613  0060  0021               	movlb	1	; select bank1
  2614  0061  0099               	movwf	25	;volatile
  2615                           
  2616                           ;main.c: 29: OSCTUNE = 0b000000;
  2617  0062  0198               	clrf	24	;volatile
  2618                           
  2619                           ;main.c: 31: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2620  0063  110E               	bcf	14,2	;volatile
  2621  0064  108E               	bcf	14,1	;volatile
  2622  0065  100E               	bcf	14,0	;volatile
  2623  0066  110C               	bcf	12,2	;volatile
  2624                           
  2625                           ;main.c: 32: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2626  0067  0023               	movlb	3	; select bank3
  2627  0068  110E               	bcf	14,2	;volatile
  2628  0069  108E               	bcf	14,1	;volatile
  2629  006A  100E               	bcf	14,0	;volatile
  2630  006B  110C               	bcf	12,2	;volatile
  2631                           
  2632                           ;main.c: 34: RA2PPS = 0b0011;
  2633  006C  3003               	movlw	3
  2634  006D  003D               	movlb	29	; select bank29
  2635  006E  0092               	movwf	18	;volatile
  2636                           
  2637                           ;main.c: 35: RC0PPS = 0b0100;
  2638  006F  3004               	movlw	4
  2639  0070  00A0               	movwf	32	;volatile
  2640                           
  2641                           ;main.c: 36: RC1PPS = 0b0101;
  2642  0071  3005               	movlw	5
  2643  0072  00A1               	movwf	33	;volatile
  2644                           
  2645                           ;main.c: 37: RC2PPS = 0b0110;
  2646  0073  3006               	movlw	6
  2647  0074  00A2               	movwf	34	;volatile
  2648                           
  2649                           ;main.c: 39: PWM1DCH = 0x00;
  2650  0075  003B               	movlb	27	; select bank27
  2651  0076  0194               	clrf	20	;volatile
  2652                           
  2653                           ;main.c: 40: PWM2DCH = 0x00;
  2654  0077  01A4               	clrf	36	;volatile
  2655                           
  2656                           ;main.c: 41: PWM3DCH = 0x00;
  2657  0078  01B4               	clrf	52	;volatile
  2658                           
  2659                           ;main.c: 42: PWM4DCH = 0x00;
  2660  0079  01C4               	clrf	68	;volatile
  2661                           
  2662                           ;main.c: 44: PWM1DCL = 0x00;
  2663  007A  0193               	clrf	19	;volatile
  2664                           
  2665                           ;main.c: 45: PWM2DCL = 0x00;
  2666  007B  01A3               	clrf	35	;volatile
  2667                           
  2668                           ;main.c: 46: PWM3DCL = 0x00;
  2669  007C  01B3               	clrf	51	;volatile
  2670                           
  2671                           ;main.c: 47: PWM4DCL = 0x00;
  2672  007D  01C3               	clrf	67	;volatile
  2673                           
  2674                           ;main.c: 49: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2675  007E  01C2               	clrf	66	;volatile
  2676  007F  01B2               	clrf	50	;volatile
  2677  0080  01A2               	clrf	34	;volatile
  2678  0081  0192               	clrf	18	;volatile
  2679                           
  2680                           ;main.c: 50: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2681  0082  01C1               	clrf	65	;volatile
  2682  0083  01B1               	clrf	49	;volatile
  2683  0084  01A1               	clrf	33	;volatile
  2684  0085  0191               	clrf	17	;volatile
  2685                           
  2686                           ;main.c: 51: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0xFF;
  2687  0086  30FF               	movlw	255
  2688  0087  00C6               	movwf	70	;volatile
  2689  0088  00B6               	movwf	54	;volatile
  2690  0089  00A6               	movwf	38	;volatile
  2691  008A  0096               	movwf	22	;volatile
  2692                           
  2693                           ;main.c: 52: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2694  008B  00C5               	movwf	69	;volatile
  2695  008C  00B5               	movwf	53	;volatile
  2696  008D  00A5               	movwf	37	;volatile
  2697  008E  0095               	movwf	21	;volatile
  2698                           
  2699                           ;main.c: 53: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2700  008F  01CE               	clrf	78	;volatile
  2701  0090  01BE               	clrf	62	;volatile
  2702  0091  01AE               	clrf	46	;volatile
  2703  0092  019E               	clrf	30	;volatile
  2704                           
  2705                           ;main.c: 56: TRISC3 = 0;
  2706  0093  0021               	movlb	1	; select bank1
  2707  0094  118E               	bcf	14,3	;volatile
  2708                           
  2709                           ;main.c: 57: ANSC3 = 0;
  2710  0095  0023               	movlb	3	; select bank3
  2711  0096  118E               	bcf	14,3	;volatile
  2712                           
  2713                           ;main.c: 58: INTCON = 0b11000000;
  2714  0097  30C0               	movlw	192
  2715  0098  008B               	movwf	11	;volatile
  2716                           
  2717                           ;main.c: 60: DMX_init();
  2718  0099  20DB  3180         	fcall	_DMX_init
  2719                           
  2720                           ;main.c: 62: ADC_init();
  2721  009B  20A8  3180         	fcall	_ADC_init
  2722                           
  2723                           ;main.c: 63: timer1_init();
  2724  009D  27C6               	fcall	_timer1_init
  2725                           
  2726                           ;main.c: 64: RDM_init();
  2727  009E  318F  2738  3180   	fcall	_RDM_init
  2728  00A1                     l4594:	
  2729                           
  2730                           ;main.c: 71: DMX_loop();
  2731  00A1  214C  3180         	fcall	_DMX_loop
  2732                           
  2733                           ;main.c: 72: ADC_loop();
  2734  00A3  20B4               	fcall	_ADC_loop
  2735                           
  2736                           ;main.c: 74: RDM_rx_loop();
  2737  00A4  318D  251C  3180   	fcall	_RDM_rx_loop
  2738  00A7  28A1               	goto	l4594
  2739  00A8                     __end_of_main:	
  2740  00A8                     __ptext25:	
  2741 ;; *************** function _ADC_init *****************
  2742 ;; Defined at:
  2743 ;;		line 14 in file "ADC.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  2  104[None  ] int 
  2750 ;; Registers used:
  2751 ;;		wreg
  2752 ;; Tracked objects:
  2753 ;;		On entry : B1C/3
  2754 ;;		On exit  : B1F/0
  2755 ;;		Unchanged: B00/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2757 ;;      Params:         0       0       0       0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    2
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _ADC_init
  2773  00A8                     _ADC_init:	
  2774                           
  2775                           ;ADC.c: 19: TRISA4 = 1;
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in _ADC_init: [wreg]
  2779  00A8  0021               	movlb	1	; select bank1
  2780  00A9  160C               	bsf	12,4	;volatile
  2781                           
  2782                           ;ADC.c: 20: ANSA4 = 1;
  2783  00AA  0023               	movlb	3	; select bank3
  2784  00AB  160C               	bsf	12,4	;volatile
  2785                           
  2786                           ;ADC.c: 21: ADCON0 = 0b00001101;
  2787  00AC  300D               	movlw	13
  2788  00AD  0021               	movlb	1	; select bank1
  2789  00AE  009D               	movwf	29	;volatile
  2790                           
  2791                           ;ADC.c: 22: ADCON1 = 0b01110000;
  2792  00AF  3070               	movlw	112
  2793  00B0  009E               	movwf	30	;volatile
  2794                           
  2795                           ;ADC.c: 25: ADIF = 0;
  2796  00B1  0020               	movlb	0	; select bank0
  2797  00B2  1311               	bcf	17,6	;volatile
  2798  00B3  0008               	return
  2799  00B4                     __end_of_ADC_init:	
  2800  00B4                     __ptext24:	
  2801 ;; *************** function _ADC_loop *****************
  2802 ;; Defined at:
  2803 ;;		line 32 in file "ADC.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  2  112[None  ] int 
  2810 ;; Registers used:
  2811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2812 ;; Tracked objects:
  2813 ;;		On entry : 1E/0
  2814 ;;		On exit  : 1F/1
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2817 ;;      Params:         0       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0
  2819 ;;      Temps:          2       0       0       0       0       0       0       0
  2820 ;;      Totals:         2       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        2 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    2
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_main
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _ADC_loop
  2833  00B4                     _ADC_loop:	
  2834                           
  2835                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2839  00B4  0021               	movlb	1	; select bank1
  2840  00B5  1C58               	btfss	_ADC_Flags^(0+128),0	;volatile
  2841  00B6  0008               	return
  2842                           
  2843                           ;ADC.c: 34: RxTimer = 0;
  2844  00B7  01D4               	clrf	_RxTimer^(0+128)	;volatile
  2845  00B8  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2846                           
  2847                           ;ADC.c: 35: ADC_Flags.New = 0;
  2848  00B9  1058               	bcf	_ADC_Flags^(0+128),0	;volatile
  2849                           
  2850                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2851  00BA  0859               	movf	_ADC_Data^(0+128),w	;volatile
  2852  00BB  00F4               	movwf	??_ADC_loop
  2853  00BC  30CD               	movlw	low ((_PWM+1)| (0+32768))
  2854  00BD  270E  3180         	fcall	PL100	;call to abstracted procedure
  2855  00BF  3087               	movlw	high ((_PWM+1)| (0+32768))
  2856  00C0  3D75               	addwfc	??_ADC_loop+1,w
  2857  00C1  0085               	movwf	5
  2858  00C2  0800               	movf	0,w	;code access
  2859  00C3  003B               	movlb	27	; select bank27
  2860  00C4  00C4               	movwf	68	;volatile
  2861  00C5  00B4               	movwf	52	;volatile
  2862  00C6  00A4               	movwf	36	;volatile
  2863  00C7  0094               	movwf	20	;volatile
  2864                           
  2865                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2866  00C8  0021               	movlb	1	; select bank1
  2867  00C9  0859               	movf	_ADC_Data^(0+128),w	;volatile
  2868  00CA  00F4               	movwf	??_ADC_loop
  2869  00CB  30CC               	movlw	low (_PWM| (0+32768))
  2870  00CC  270E  3180         	fcall	PL100	;call to abstracted procedure
  2871  00CE  3087               	movlw	high (_PWM| (0+32768))
  2872  00CF  3D75               	addwfc	??_ADC_loop+1,w
  2873  00D0  0085               	movwf	5
  2874  00D1  0800               	movf	0,w	;code access
  2875  00D2  003B               	movlb	27	; select bank27
  2876  00D3  00C3               	movwf	67	;volatile
  2877  00D4  00B3               	movwf	51	;volatile
  2878  00D5  00A3               	movwf	35	;volatile
  2879  00D6  0093               	movwf	19	;volatile
  2880                           
  2881                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2882  00D7  2702               	fcall	PL96	;call to abstracted procedure
  2883                           
  2884                           ;ADC.c: 39: GO_nDONE = 1;
  2885  00D8  0021               	movlb	1	; select bank1
  2886  00D9  149D               	bsf	29,1	;volatile
  2887  00DA  0008               	return
  2888  00DB                     __end_of_ADC_loop:	
  2889  00DB                     __ptext23:	
  2890 ;; *************** function _DMX_init *****************
  2891 ;; Defined at:
  2892 ;;		line 17 in file "DMX.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  Addr            1    4[COMMON] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2901 ;; Tracked objects:
  2902 ;;		On entry : B1F/3
  2903 ;;		On exit  : B1C/0
  2904 ;;		Unchanged: B00/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2906 ;;      Params:         0       0       0       0       0       0       0       0
  2907 ;;      Locals:         1       0       0       0       0       0       0       0
  2908 ;;      Temps:          0       3       0       0       0       0       0       0
  2909 ;;      Totals:         1       3       0       0       0       0       0       0
  2910 ;;Total ram usage:        4 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    2
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _DMX_init
  2922  00DB                     _DMX_init:	
  2923                           
  2924                           ;DMX.c: 19: RXPPS = 0b10101;
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  2928  00DB  3015               	movlw	21
  2929  00DC  003C               	movlb	28	; select bank28
  2930  00DD  0095               	movwf	21	;volatile
  2931                           
  2932                           ;DMX.c: 20: TRISC5 = 1;
  2933  00DE  0021               	movlb	1	; select bank1
  2934  00DF  168E               	bsf	14,5	;volatile
  2935                           
  2936                           ;DMX.c: 22: RCSTA = 0b10010000;
  2937  00E0  3090               	movlw	144
  2938  00E1  0023               	movlb	3	; select bank3
  2939  00E2  009D               	movwf	29	;volatile
  2940                           
  2941                           ;DMX.c: 23: SYNC = 0;
  2942  00E3  121E               	bcf	30,4	;volatile
  2943                           
  2944                           ;DMX.c: 24: BAUDCON = 0b00000000;
  2945  00E4  019F               	clrf	31	;volatile
  2946                           
  2947                           ;DMX.c: 25: BRGH = 1;
  2948  00E5  151E               	bsf	30,2	;volatile
  2949                           
  2950                           ;DMX.c: 26: SPBRGH = 0x00;
  2951  00E6  019C               	clrf	28	;volatile
  2952                           
  2953                           ;DMX.c: 27: SPBRGL = 0x7;
  2954  00E7  3007               	movlw	7
  2955  00E8  009B               	movwf	27	;volatile
  2956                           
  2957                           ;DMX.c: 28: RCIE = 1;
  2958  00E9  0021               	movlb	1	; select bank1
  2959  00EA  1691               	bsf	17,5	;volatile
  2960  00EB  300D               	movlw	13
  2961                           
  2962                           ;DMX.c: 34: DMX_Address = 1;
  2963  00EC  01ED               	clrf	_DMX_Address^(0+128)
  2964  00ED  0AED               	incf	_DMX_Address^(0+128),f
  2965  00EE  01EE               	clrf	(_DMX_Address+1)^(0+128)
  2966                           
  2967                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  2968  00EF  0022               	movlb	2	; select bank2
  2969  00F0  00B9               	movwf	(_PWMDCLptr+1)^(0+256)
  2970  00F1  3093               	movlw	147
  2971  00F2  00B8               	movwf	_PWMDCLptr^(0+256)
  2972                           
  2973                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  2974  00F3  300D               	movlw	13
  2975  00F4  00BB               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^0
  2976  00F5  30A3               	movlw	163
  2977  00F6  00BA               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^0
  2978                           
  2979                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  2980  00F7  300D               	movlw	13
  2981  00F8  00BD               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^0
  2982  00F9  30B3               	movlw	179
  2983  00FA  00BC               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^0
  2984                           
  2985                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  2986  00FB  300D               	movlw	13
  2987  00FC  00BF               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^0
  2988  00FD  30C3               	movlw	195
  2989  00FE  00BE               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^0
  2990                           
  2991                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  2992  00FF  300D               	movlw	13
  2993  0100  0023               	movlb	3	; select bank3
  2994  0101  00B5               	movwf	(_PWMDCHptr+1)^(0+384)
  2995  0102  3094               	movlw	148
  2996  0103  00B4               	movwf	_PWMDCHptr^(0+384)
  2997                           
  2998                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  2999  0104  300D               	movlw	13
  3000  0105  00B7               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  3001  0106  30A4               	movlw	164
  3002  0107  00B6               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  3003                           
  3004                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  3005  0108  300D               	movlw	13
  3006  0109  00B9               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  3007  010A  30B4               	movlw	180
  3008  010B  00B8               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  3009                           
  3010                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  3011  010C  300D               	movlw	13
  3012  010D  00BB               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  3013  010E  30C4               	movlw	196
  3014  010F  00BA               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  3015                           
  3016                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  3017  0110  300D               	movlw	13
  3018  0111  00AD               	movwf	(_PWMLDCONptr+1)^(0+384)
  3019  0112  309F               	movlw	159
  3020  0113  00AC               	movwf	_PWMLDCONptr^(0+384)
  3021                           
  3022                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  3023  0114  300D               	movlw	13
  3024  0115  00AF               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  3025  0116  30AF               	movlw	175
  3026  0117  00AE               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  3027                           
  3028                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  3029  0118  300D               	movlw	13
  3030  0119  00B1               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  3031  011A  30BF               	movlw	191
  3032  011B  00B0               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  3033                           
  3034                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  3035  011C  300D               	movlw	13
  3036  011D  00B3               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  3037  011E  30CF               	movlw	207
  3038  011F  00B2               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  3039                           
  3040                           ;DMX.c: 50: char Addr=0;
  3041  0120  01F4               	clrf	DMX_init@Addr
  3042  0121                     l4306:	
  3043                           ;DMX.c: 51: while(Addr<4){
  3044                           
  3045  0121  3004               	movlw	4
  3046  0122  0274               	subwf	DMX_init@Addr,w
  3047  0123  1803               	btfsc	3,0
  3048  0124  0008               	return
  3049                           
  3050                           ;DMX.c: 52: DMX_sumRepeat[Addr]=2;
  3051  0125  0874               	movf	DMX_init@Addr,w
  3052  0126  3EE8               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3053  0127  0086               	movwf	6
  3054  0128  3002               	movlw	2
  3055  0129  0187               	clrf	7
  3056  012A  0081               	movwf	1
  3057                           
  3058                           ;DMX.c: 53: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3059  012B  3574               	lslf	DMX_init@Addr,w
  3060  012C  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3061  012D  0086               	movwf	6
  3062  012E  3001               	movlw	1	; select bank2/3
  3063  012F  0087               	movwf	7
  3064  0130  3574               	lslf	DMX_init@Addr,w
  3065  0131  26DD  3180         	fcall	PL76	;call to abstracted procedure
  3066  0133  3F80               	movwi [0]fsr0
  3067  0134  0081               	movwf	1
  3068                           
  3069                           ;DMX.c: 54: DMXSign[Addr].InfiniteLoop=0;
  3070  0135  0874               	movf	DMX_init@Addr,w
  3071  0136  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3072  0137  0086               	movwf	6
  3073  0138  0187               	clrf	7
  3074  0139  1101               	bcf	1,2
  3075                           
  3076                           ;DMX.c: 55: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3077  013A  0020               	movlb	0	; select bank0
  3078  013B  01A0               	clrf	??_DMX_init
  3079  013C  01A1               	clrf	??_DMX_init+1
  3080  013D  01A2               	clrf	??_DMX_init+2
  3081  013E  0874               	movf	DMX_init@Addr,w
  3082  013F  0774               	addwf	DMX_init@Addr,w
  3083  0140  0774               	addwf	DMX_init@Addr,w
  3084  0141  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3085  0142  26AD  3180         	fcall	PL52	;call to abstracted procedure
  3086  0144  0874               	movf	DMX_init@Addr,w
  3087  0145  0774               	addwf	DMX_init@Addr,w
  3088  0146  0774               	addwf	DMX_init@Addr,w
  3089  0147  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  3090  0148  26AD  3180         	fcall	PL52	;call to abstracted procedure
  3091                           
  3092                           ;DMX.c: 56: Addr++;
  3093  014A  0AF4               	incf	DMX_init@Addr,f
  3094  014B  2921               	goto	l4306
  3095  014C                     __end_of_DMX_init:	
  3096  014C                     __ptext12:	
  3097 ;; *************** function _DMX_loop *****************
  3098 ;; Defined at:
  3099 ;;		line 59 in file "DMX.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  Addr            1   76[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 1C/0
  3110 ;;		On exit  : 1E/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3113 ;;      Params:         0       0       0       0       0       0       0       0
  3114 ;;      Locals:         0       4       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       8       0       0       0
  3116 ;;      Totals:         0       4       0       0       8       0       0       0
  3117 ;;Total ram usage:       12 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    5
  3120 ;; This function calls:
  3121 ;;		___awtoft
  3122 ;;		___ftadd
  3123 ;;		___ftdiv
  3124 ;;		___ftge
  3125 ;;		___ftmul
  3126 ;;		___ftsub
  3127 ;;		___fttol
  3128 ;;		___lbtoft
  3129 ;;		___lwtoft
  3130 ;; This function is called by:
  3131 ;;		_main
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _DMX_loop
  3137  014C                     _DMX_loop:	
  3138                           
  3139                           ;DMX.c: 60: char Addr = 0;
  3140                           
  3141                           ;incstack = 0
  3142                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3143  014C  0020               	movlb	0	; select bank0
  3144  014D  01EC               	clrf	DMX_loop@Addr
  3145                           
  3146                           ;DMX.c: 62: if (DMX_Flags.RxNew == 1) {
  3147  014E  1C76               	btfss	_DMX_Flags,0	;volatile
  3148  014F  2ABB               	goto	l356
  3149                           
  3150                           ;DMX.c: 63: DMX_Flags.RxNew = 0;
  3151  0150  1076               	bcf	_DMX_Flags,0	;volatile
  3152                           
  3153                           ;DMX.c: 65: DMXStepConst=0x07;
  3154  0151  3007               	movlw	7
  3155  0152  0021               	movlb	1	; select bank1
  3156  0153  00E0               	movwf	_DMXStepConst^(0+128)
  3157  0154                     l4442:	
  3158                           ;DMX.c: 66: while (Addr < 4) {
  3159                           
  3160  0154  3004               	movlw	4
  3161  0155  0020               	movlb	0	; select bank0
  3162  0156  026C               	subwf	DMX_loop@Addr,w
  3163  0157  1803               	btfsc	3,0
  3164  0158  2ABB               	goto	l356
  3165                           
  3166                           ;DMX.c: 67: rxdata=RxData[Addr];
  3167  0159  086C               	movf	DMX_loop@Addr,w
  3168  015A  3EE4               	addlw	(low (_RxData| 0))& (0+255)
  3169  015B  0086               	movwf	6
  3170  015C  0187               	clrf	7
  3171  015D  0801               	movf	1,w
  3172  015E  0021               	movlb	1	; select bank1
  3173  015F  00DF               	movwf	_rxdata^(0+128)
  3174                           
  3175                           ;DMX.c: 68: if (DMX_TargetBright[Addr] < rxdata) {
  3176  0160  0020               	movlb	0	; select bank0
  3177  0161  266B  3180         	fcall	PL28	;call to abstracted procedure
  3178  0163  0086               	movwf	6
  3179  0164  3F40               	moviw [0]fsr1
  3180  0165  00AC               	movwf	___ftge@ff1
  3181  0166  3F41               	moviw [1]fsr1
  3182  0167  00AD               	movwf	___ftge@ff1+1
  3183  0168  3F42               	moviw [2]fsr1
  3184  0169  00AE               	movwf	___ftge@ff1+2
  3185  016A  0021               	movlb	1	; select bank1
  3186  016B  085F               	movf	_rxdata^(0+128),w
  3187  016C  23E8  3180         	fcall	___lbtoft
  3188  016E  0828               	movf	?___lbtoft,w
  3189  016F  00AF               	movwf	___ftge@ff2
  3190  0170  0829               	movf	?___lbtoft+1,w
  3191  0171  00B0               	movwf	___ftge@ff2+1
  3192  0172  082A               	movf	?___lbtoft+2,w
  3193  0173  00B1               	movwf	___ftge@ff2+2
  3194  0174  246F  3180         	fcall	___ftge
  3195  0176  1803               	btfsc	3,0
  3196  0177  29DB               	goto	l4402
  3197                           
  3198                           ;DMX.c: 69: DMX_difference=rxdata-DMX_TargetBright[Addr];
  3199  0178  086C               	movf	DMX_loop@Addr,w
  3200  0179  2637  3180         	fcall	PL16	;call to abstracted procedure
  3201  017B  264D  3180         	fcall	PL22	;call to abstracted procedure
  3202  017D  0021               	movlb	1	; select bank1
  3203  017E  085F               	movf	_rxdata^(0+128),w
  3204  017F  23E8  3180         	fcall	___lbtoft
  3205  0181  0828               	movf	?___lbtoft,w
  3206  0182  00D9               	movwf	___ftsub@f1
  3207  0183  0829               	movf	?___lbtoft+1,w
  3208  0184  00DA               	movwf	___ftsub@f1+1
  3209  0185  082A               	movf	?___lbtoft+2,w
  3210  0186  00DB               	movwf	___ftsub@f1+2
  3211  0187  23F8  3180         	fcall	___ftsub
  3212                           
  3213                           ;DMX.c: 70: if(DMX_difference<0.05){
  3214  0189  25F3  3180         	fcall	PL6	;call to abstracted procedure
  3215  018B  246F  3180         	fcall	___ftge
  3216                           
  3217                           ;DMX.c: 71: DMXSign[Addr].SIGN = 0b00;
  3218  018D  086C               	movf	DMX_loop@Addr,w
  3219  018E  1803               	btfsc	3,0
  3220  018F  299B               	goto	L2
  3221  0190  26BC  3180         	fcall	PL56	;call to abstracted procedure
  3222                           
  3223                           ;DMX.c: 72: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3224  0192  0021               	movlb	1	; select bank1
  3225  0193  085F               	movf	_rxdata^(0+128),w
  3226  0194  23E8  3180         	fcall	___lbtoft
  3227  0196  086C               	movf	DMX_loop@Addr,w
  3228  0197  076C               	addwf	DMX_loop@Addr,w
  3229  0198  25C0  3180         	fcall	PL2	;call to abstracted procedure
  3230                           
  3231                           ;DMX.c: 73: }else{
  3232  019A  2A5D               	goto	l4422
  3233  019B                     L2:	
  3234                           ;DMX.c: 74: DMXSign[Addr].SIGN = 0b01;
  3235                           
  3236  019B  26FC  3180         	fcall	PL92	;call to abstracted procedure
  3237  019D  3801               	iorlw	1
  3238                           
  3239                           ;DMX.c: 75: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3240                           
  3241                           ;DMX.c: 76: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3242  019E  25D6  3180         	fcall	PL4	;call to abstracted procedure
  3243  01A0  076C               	addwf	DMX_loop@Addr,w
  3244  01A1  076C               	addwf	DMX_loop@Addr,w
  3245  01A2  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  3246  01A3  0086               	movwf	6
  3247  01A4  26B5  3180         	fcall	PL54	;call to abstracted procedure
  3248  01A6  086C               	movf	DMX_loop@Addr,w
  3249  01A7  3EE8               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3250  01A8  0086               	movwf	6
  3251  01A9  0801               	movf	1,w
  3252  01AA  23E8  3180         	fcall	___lbtoft
  3253  01AC  2617  3180         	fcall	PL10	;call to abstracted procedure
  3254  01AE  2549  3180         	fcall	___ftmul
  3255  01B0  26E8  3180         	fcall	PL84	;call to abstracted procedure
  3256  01B2  2413  3180         	fcall	___ftdiv
  3257  01B4  083B               	movf	?___ftdiv,w
  3258  01B5  00CD               	movwf	___ftadd@f2
  3259  01B6  083C               	movf	?___ftdiv+1,w
  3260  01B7  00CE               	movwf	___ftadd@f2+1
  3261  01B8  083D               	movf	?___ftdiv+2,w
  3262  01B9  00CF               	movwf	___ftadd@f2+2
  3263  01BA  249B  3180         	fcall	___ftadd
  3264  01BC  086C               	movf	DMX_loop@Addr,w
  3265  01BD  2637  3180         	fcall	PL16	;call to abstracted procedure
  3266  01BF  26D7  3180         	fcall	PL72	;call to abstracted procedure
  3267                           
  3268                           ;DMX.c: 77: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>0x03);
  3269  01C1  2670  3180         	fcall	PL32	;call to abstracted procedure
  3270  01C3  25A5  3180         	fcall	___awtoft
  3271  01C5  2697  3180         	fcall	PL44	;call to abstracted procedure
  3272  01C7  2610  3180         	fcall	PL8	;call to abstracted procedure
  3273  01C9  264D  3180         	fcall	PL22	;call to abstracted procedure
  3274  01CB  266B  3180         	fcall	PL28	;call to abstracted procedure
  3275  01CD  0086               	movwf	6
  3276  01CE  2646  3180         	fcall	PL20	;call to abstracted procedure
  3277  01D0  23F8  3180         	fcall	___ftsub
  3278  01D2  26C9  3180         	fcall	PL62	;call to abstracted procedure
  3279  01D4  2413  3180         	fcall	___ftdiv
  3280  01D6  2663  3180         	fcall	PL26	;call to abstracted procedure
  3281  01D8  26EF  3180         	fcall	PL86	;call to abstracted procedure
  3282  01DA  2A5D               	goto	l4422
  3283  01DB                     l4402:	
  3284  01DB  0021               	movlb	1	; select bank1
  3285  01DC  085F               	movf	_rxdata^(0+128),w
  3286  01DD  23E8  3180         	fcall	___lbtoft
  3287  01DF  0828               	movf	?___lbtoft,w
  3288  01E0  00AC               	movwf	___ftge@ff1
  3289  01E1  0829               	movf	?___lbtoft+1,w
  3290  01E2  00AD               	movwf	___ftge@ff1+1
  3291  01E3  082A               	movf	?___lbtoft+2,w
  3292  01E4  00AE               	movwf	___ftge@ff1+2
  3293  01E5  086C               	movf	DMX_loop@Addr,w
  3294  01E6  2637  3180         	fcall	PL16	;call to abstracted procedure
  3295  01E8  3F40               	moviw [0]fsr1
  3296  01E9  00AF               	movwf	___ftge@ff2
  3297  01EA  3F41               	moviw [1]fsr1
  3298  01EB  00B0               	movwf	___ftge@ff2+1
  3299  01EC  3F42               	moviw [2]fsr1
  3300  01ED  00B1               	movwf	___ftge@ff2+2
  3301  01EE  246F  3180         	fcall	___ftge
  3302  01F0  1803               	btfsc	3,0
  3303  01F1  2A50               	goto	l4418
  3304                           
  3305                           ;DMX.c: 80: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  3306  01F2  0021               	movlb	1	; select bank1
  3307  01F3  085F               	movf	_rxdata^(0+128),w
  3308  01F4  23E8  3180         	fcall	___lbtoft
  3309  01F6  26D0  3180         	fcall	PL70	;call to abstracted procedure
  3310  01F8  266B  3180         	fcall	PL28	;call to abstracted procedure
  3311  01FA  262E  3180         	fcall	PL14	;call to abstracted procedure
  3312  01FC  23F8  3180         	fcall	___ftsub
  3313                           
  3314                           ;DMX.c: 81: if(DMX_difference<0.05){
  3315  01FE  25F3  3180         	fcall	PL6	;call to abstracted procedure
  3316  0200  246F  3180         	fcall	___ftge
  3317                           
  3318                           ;DMX.c: 82: DMXSign[Addr].SIGN = 0b00;
  3319  0202  086C               	movf	DMX_loop@Addr,w
  3320  0203  1803               	btfsc	3,0
  3321  0204  2A10               	goto	L3
  3322  0205  26BC  3180         	fcall	PL56	;call to abstracted procedure
  3323                           
  3324                           ;DMX.c: 83: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3325  0207  0021               	movlb	1	; select bank1
  3326  0208  085F               	movf	_rxdata^(0+128),w
  3327  0209  23E8  3180         	fcall	___lbtoft
  3328  020B  086C               	movf	DMX_loop@Addr,w
  3329  020C  076C               	addwf	DMX_loop@Addr,w
  3330  020D  25C0  3180         	fcall	PL2	;call to abstracted procedure
  3331                           
  3332                           ;DMX.c: 84: }
  3333  020F  2A5D               	goto	l4422
  3334  0210                     L3:	
  3335                           ;DMX.c: 85: else{
  3336                           ;DMX.c: 86: DMXSign[Addr].SIGN = 0b10;
  3337                           
  3338  0210  26FC  3180         	fcall	PL92	;call to abstracted procedure
  3339  0212  3802               	iorlw	2
  3340                           
  3341                           ;DMX.c: 87: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3342                           
  3343                           ;DMX.c: 88: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3344  0213  25D6  3180         	fcall	PL4	;call to abstracted procedure
  3345  0215  3EE8               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3346  0216  0086               	movwf	6
  3347  0217  0801               	movf	1,w
  3348  0218  23E8  3180         	fcall	___lbtoft
  3349  021A  2617  3180         	fcall	PL10	;call to abstracted procedure
  3350  021C  2549  3180         	fcall	___ftmul
  3351  021E  26E8  3180         	fcall	PL84	;call to abstracted procedure
  3352  0220  2413  3180         	fcall	___ftdiv
  3353  0222  083B               	movf	?___ftdiv,w
  3354  0223  00D6               	movwf	___ftsub@f2
  3355  0224  083C               	movf	?___ftdiv+1,w
  3356  0225  00D7               	movwf	___ftsub@f2+1
  3357  0226  083D               	movf	?___ftdiv+2,w
  3358  0227  00D8               	movwf	___ftsub@f2+2
  3359  0228  266B  3180         	fcall	PL28	;call to abstracted procedure
  3360  022A  262E  3180         	fcall	PL14	;call to abstracted procedure
  3361  022C  23F8  3180         	fcall	___ftsub
  3362  022E  086C               	movf	DMX_loop@Addr,w
  3363  022F  2637  3180         	fcall	PL16	;call to abstracted procedure
  3364  0231  26E2  3180         	fcall	PL82	;call to abstracted procedure
  3365                           
  3366                           ;DMX.c: 89: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMXP
      +                          eriod>>0x03);
  3367  0233  2670  3180         	fcall	PL32	;call to abstracted procedure
  3368  0235  25A5  3180         	fcall	___awtoft
  3369  0237  2697  3180         	fcall	PL44	;call to abstracted procedure
  3370  0239  086C               	movf	DMX_loop@Addr,w
  3371  023A  2637  3180         	fcall	PL16	;call to abstracted procedure
  3372  023C  264D  3180         	fcall	PL22	;call to abstracted procedure
  3373  023E  086C               	movf	DMX_loop@Addr,w
  3374  023F  076C               	addwf	DMX_loop@Addr,w
  3375  0240  076C               	addwf	DMX_loop@Addr,w
  3376  0241  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3377  0242  0086               	movwf	6
  3378  0243  2646  3180         	fcall	PL20	;call to abstracted procedure
  3379  0245  23F8  3180         	fcall	___ftsub
  3380  0247  26C9  3180         	fcall	PL62	;call to abstracted procedure
  3381  0249  2413  3180         	fcall	___ftdiv
  3382  024B  2663  3180         	fcall	PL26	;call to abstracted procedure
  3383  024D  26EF  3180         	fcall	PL86	;call to abstracted procedure
  3384  024F  2A5D               	goto	l4422
  3385  0250                     l4418:	
  3386                           
  3387                           ;DMX.c: 92: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3388  0250  0021               	movlb	1	; select bank1
  3389  0251  085F               	movf	_rxdata^(0+128),w
  3390  0252  23E8  3180         	fcall	___lbtoft
  3391  0254  086C               	movf	DMX_loop@Addr,w
  3392  0255  076C               	addwf	DMX_loop@Addr,w
  3393  0256  25C0  3180         	fcall	PL2	;call to abstracted procedure
  3394                           
  3395                           ;DMX.c: 93: DMXSign[Addr].SIGN = 0b00;
  3396  0258  086C               	movf	DMX_loop@Addr,w
  3397  0259  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3398  025A  0086               	movwf	6
  3399  025B  30FC               	movlw	-4
  3400  025C  0581               	andwf	1,f
  3401  025D                     l4422:	
  3402                           
  3403                           ;DMX.c: 94: }
  3404                           ;DMX.c: 96: if(preRxData[Addr]==RxData[Addr]){
  3405  025D  086C               	movf	DMX_loop@Addr,w
  3406  025E  3EE4               	addlw	(low (_RxData| 0))& (0+255)
  3407  025F  0086               	movwf	6
  3408  0260  0187               	clrf	7
  3409  0261  086C               	movf	DMX_loop@Addr,w
  3410  0262  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3411  0263  0084               	movwf	4
  3412  0264  3001               	movlw	1	; select bank2/3
  3413  0265  0085               	movwf	5
  3414  0266  0800               	movf	0,w
  3415  0267  0601               	xorwf	1,w
  3416  0268  1D03               	skipz
  3417  0269  2A86               	goto	l4434
  3418                           
  3419                           ;DMX.c: 97: if( !DMXSign[Addr].InfiniteLoop){
  3420  026A  086C               	movf	DMX_loop@Addr,w
  3421  026B  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3422  026C  0086               	movwf	6
  3423  026D  1901               	btfsc	1,2
  3424  026E  2AAE               	goto	l370
  3425                           
  3426                           ;DMX.c: 98: DMX_Repeat[Addr][0]++;
  3427  026F  356C               	lslf	DMX_loop@Addr,w
  3428  0270  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3429  0271  0086               	movwf	6
  3430  0272  3001               	movlw	1	; select bank2/3
  3431  0273  0087               	movwf	7
  3432  0274  0A81               	incf	1,f
  3433                           
  3434                           ;DMX.c: 99: if(DMX_Repeat[Addr][0]==0b10){
  3435  0275  356C               	lslf	DMX_loop@Addr,w
  3436  0276  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3437  0277  0086               	movwf	6
  3438  0278  3002               	movlw	2
  3439  0279  0601               	xorwf	1,w
  3440  027A  1D03               	btfss	3,2
  3441  027B  2AAE               	goto	l370
  3442                           
  3443                           ;DMX.c: 100: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3444  027C  356C               	lslf	DMX_loop@Addr,w
  3445  027D  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3446  027E  0086               	movwf	6
  3447  027F  356C               	lslf	DMX_loop@Addr,w
  3448  0280  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3449  0281  0084               	movwf	4
  3450  0282  3001               	movlw	1	; select bank2/3
  3451                           
  3452                           ;DMX.c: 101: DMX_sumRepeat[Addr]=2;
  3453                           
  3454                           ;DMX.c: 102: DMXSign[Addr].InfiniteLoop=1;
  3455  0283  268A  3180         	fcall	PL38	;call to abstracted procedure
  3456  0285  2AAE               	goto	l370
  3457  0286                     l4434:	
  3458                           
  3459                           ;DMX.c: 106: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  3460  0286  356C               	lslf	DMX_loop@Addr,w
  3461  0287  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3462  0288  0086               	movwf	6
  3463  0289  3001               	movlw	1	; select bank2/3
  3464  028A  0087               	movwf	7
  3465  028B  356C               	lslf	DMX_loop@Addr,w
  3466  028C  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3467  028D  0084               	movwf	4
  3468  028E  3001               	movlw	1	; select bank2/3
  3469  028F  0085               	movwf	5
  3470  0290  0800               	movf	0,w
  3471  0291  0081               	movwf	1
  3472                           
  3473                           ;DMX.c: 107: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  3474  0292  086C               	movf	DMX_loop@Addr,w
  3475  0293  3EE8               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3476  0294  0086               	movwf	6
  3477  0295  0187               	clrf	7
  3478  0296  356C               	lslf	DMX_loop@Addr,w
  3479  0297  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3480  0298  0084               	movwf	4
  3481  0299  0800               	movf	0,w
  3482  029A  0023               	movlb	3	; select bank3
  3483  029B  00D4               	movwf	??_DMX_loop^(0+384)
  3484  029C  0020               	movlb	0	; select bank0
  3485  029D  356C               	lslf	DMX_loop@Addr,w
  3486  029E  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3487  029F  0084               	movwf	4
  3488  02A0  0800               	movf	0,w
  3489  02A1  0023               	movlb	3	; select bank3
  3490  02A2  0754               	addwf	??_DMX_loop^(0+384),w
  3491  02A3  0081               	movwf	1
  3492                           
  3493                           ;DMX.c: 108: DMX_Repeat[Addr][0]=1;
  3494  02A4  0020               	movlb	0	; select bank0
  3495  02A5  2708  3180         	fcall	PL98	;call to abstracted procedure
  3496  02A7  0181               	clrf	1
  3497  02A8  0A81               	incf	1,f
  3498                           
  3499                           ;DMX.c: 109: DMXSign[Addr].InfiniteLoop=0;
  3500  02A9  086C               	movf	DMX_loop@Addr,w
  3501  02AA  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3502  02AB  0086               	movwf	6
  3503  02AC  0187               	clrf	7
  3504  02AD  1101               	bcf	1,2
  3505  02AE                     l370:	
  3506                           
  3507                           ;DMX.c: 110: }
  3508                           ;DMX.c: 111: preRxData[Addr]=RxData[Addr];
  3509  02AE  086C               	movf	DMX_loop@Addr,w
  3510  02AF  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3511  02B0  0086               	movwf	6
  3512  02B1  3001               	movlw	1	; select bank2/3
  3513  02B2  0087               	movwf	7
  3514  02B3  086C               	movf	DMX_loop@Addr,w
  3515  02B4  3EE4               	addlw	(low (_RxData| 0))& (0+255)
  3516  02B5  0084               	movwf	4
  3517  02B6  0185               	clrf	5
  3518  02B7  0800               	movf	0,w
  3519  02B8  0081               	movwf	1
  3520                           
  3521                           ;DMX.c: 112: Addr++;
  3522  02B9  0AEC               	incf	DMX_loop@Addr,f
  3523  02BA  2954               	goto	l4442
  3524  02BB                     l356:	
  3525                           
  3526                           ;DMX.c: 113: }
  3527                           ;DMX.c: 114: }
  3528                           ;DMX.c: 116: if (Timer.MS) {
  3529  02BB  0021               	movlb	1	; select bank1
  3530  02BC  1C38               	btfss	_Timer^(0+128),0	;volatile
  3531  02BD  0008               	return
  3532                           
  3533                           ;DMX.c: 117: DMXPeriodConst++;
  3534  02BE  0AE1               	incf	_DMXPeriodConst^(0+128),f	;volatile
  3535                           
  3536                           ;DMX.c: 118: Timer.MS = 0;
  3537  02BF  1038               	bcf	_Timer^(0+128),0	;volatile
  3538                           
  3539                           ;DMX.c: 119: Addr = 0;
  3540  02C0  0020               	movlb	0	; select bank0
  3541  02C1  01EC               	clrf	DMX_loop@Addr
  3542                           
  3543                           ;DMX.c: 120: if(DMXStepConst==0){
  3544  02C2  0021               	movlb	1	; select bank1
  3545  02C3  0860               	movf	_DMXStepConst^(0+128),w
  3546  02C4  1D03               	btfss	3,2
  3547  02C5  2BB5               	goto	l4488
  3548                           
  3549                           ;DMX.c: 121: DMXStepConst=0x07;
  3550  02C6  3007               	movlw	7
  3551  02C7  00E0               	movwf	_DMXStepConst^(0+128)
  3552                           
  3553                           ;DMX.c: 122: while (Addr < 4) {
  3554  02C8  2BAF               	goto	l4486
  3555  02C9                     l4454:	
  3556                           
  3557                           ;DMX.c: 125: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  3558  02C9  2663  3180         	fcall	PL26	;call to abstracted procedure
  3559  02CB  26B5  3180         	fcall	PL54	;call to abstracted procedure
  3560  02CD  2610  3180         	fcall	PL8	;call to abstracted procedure
  3561  02CF  3F40               	moviw [0]fsr1
  3562  02D0  00CD               	movwf	___ftadd@f2
  3563  02D1  3F41               	moviw [1]fsr1
  3564  02D2  00CE               	movwf	___ftadd@f2+1
  3565  02D3  3F42               	moviw [2]fsr1
  3566  02D4  00CF               	movwf	___ftadd@f2+2
  3567  02D5  249B  3180         	fcall	___ftadd
  3568  02D7  2610  3180         	fcall	PL8	;call to abstracted procedure
  3569  02D9  26D7  3180         	fcall	PL72	;call to abstracted procedure
  3570  02DB  3FC2               	movwi [2]fsr1
  3571                           
  3572                           ;DMX.c: 131: break;
  3573  02DC  2AFC               	goto	l4462
  3574  02DD                     l4456:	
  3575                           
  3576                           ;DMX.c: 133: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  3577  02DD  2663  3180         	fcall	PL26	;call to abstracted procedure
  3578  02DF  264D  3180         	fcall	PL22	;call to abstracted procedure
  3579  02E1  2610  3180         	fcall	PL8	;call to abstracted procedure
  3580  02E3  2646  3180         	fcall	PL20	;call to abstracted procedure
  3581  02E5  23F8  3180         	fcall	___ftsub
  3582  02E7  2610  3180         	fcall	PL8	;call to abstracted procedure
  3583  02E9  26E2  3180         	fcall	PL82	;call to abstracted procedure
  3584  02EB  3FC2               	movwi [2]fsr1
  3585                           
  3586                           ;DMX.c: 139: break;
  3587  02EC  2AFC               	goto	l4462
  3588  02ED                     l4460:	
  3589  02ED  086C               	movf	DMX_loop@Addr,w
  3590  02EE  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3591  02EF  0086               	movwf	6
  3592  02F0  0187               	clrf	7
  3593  02F1  0801               	movf	1,w
  3594  02F2  3903               	andlw	3
  3595                           
  3596                           ; Switch size 1, requested type "space"
  3597                           ; Number of cases is 3, Range of values is 0 to 2
  3598                           ; switch strategies available:
  3599                           ; Name         Instructions Cycles
  3600                           ; simple_byte           10     6 (average)
  3601                           ; direct_byte           12     6 (fixed)
  3602                           ; jumptable            260     6 (fixed)
  3603                           ;	Chosen strategy is simple_byte
  3604  02F3  1903               	skipnz
  3605  02F4  2AFC               	goto	l4462
  3606  02F5  3A01               	xorlw	1	; case 1
  3607  02F6  1903               	skipnz
  3608  02F7  2AC9               	goto	l4454
  3609  02F8  3A03               	xorlw	3	; case 2
  3610  02F9  1903               	skipnz
  3611  02FA  2ADD               	goto	l4456
  3612  02FB  2AFC               	goto	l4462
  3613  02FC                     l4462:	
  3614                           
  3615                           ;DMX.c: 143: rxdata=DMX_CurrentBright[Addr];
  3616  02FC  2610  3180         	fcall	PL8	;call to abstracted procedure
  3617  02FE  3F40               	moviw [0]fsr1
  3618  02FF  00DC               	movwf	___fttol@f1
  3619  0300  3F41               	moviw [1]fsr1
  3620  0301  00DD               	movwf	___fttol@f1+1
  3621  0302  3F42               	moviw [2]fsr1
  3622  0303  00DE               	movwf	___fttol@f1+2
  3623  0304  276A  3180         	fcall	___fttol
  3624  0306  085C               	movf	?___fttol,w
  3625  0307  0021               	movlb	1	; select bank1
  3626  0308  00DF               	movwf	_rxdata^(0+128)
  3627                           
  3628                           ;DMX.c: 144: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3629  0309  267D  3180         	fcall	PL36	;call to abstracted procedure
  3630  030B  00D6               	movwf	(??_DMX_loop+2)^(0+384)
  3631  030C  3F01               	moviw [1]fsr0
  3632  030D  00D7               	movwf	((??_DMX_loop+2)^(0+384)+1)
  3633  030E  0021               	movlb	1	; select bank1
  3634  030F  085F               	movf	_rxdata^(0+128),w
  3635  0310  0023               	movlb	3	; select bank3
  3636  0311  00D8               	movwf	(??_DMX_loop+4)^(0+384)
  3637  0312  30CE               	movlw	low ((_PWM+2)| (0+32768))
  3638  0313  01D9               	clrf	((??_DMX_loop+4)^(0+384)+1)
  3639  0314  35D8               	lslf	(??_DMX_loop+4)^(0+384),f
  3640  0315  0DD9               	rlf	((??_DMX_loop+4)^(0+384)+1),f
  3641  0316  0758               	addwf	(??_DMX_loop+4)^(0+384),w
  3642  0317  0084               	movwf	4
  3643  0318  3087               	movlw	high ((_PWM+2)| (0+32768))
  3644  0319  3D59               	addwfc	(??_DMX_loop+5)^(0+384),w
  3645  031A  0085               	movwf	5
  3646  031B  3F00               	moviw [0]fsr0
  3647  031C  00DA               	movwf	(??_DMX_loop+6)^(0+384)
  3648  031D  3F01               	moviw [1]fsr0
  3649  031E  00DB               	movwf	((??_DMX_loop+6)^(0+384)+1)
  3650  031F  0856               	movf	(??_DMX_loop+2)^(0+384),w
  3651  0320  025A               	subwf	(??_DMX_loop+6)^(0+384),w
  3652  0321  0020               	movlb	0	; select bank0
  3653  0322  00A8               	movwf	___lwtoft@c
  3654  0323  0023               	movlb	3	; select bank3
  3655  0324  0857               	movf	(??_DMX_loop+3)^(0+384),w
  3656  0325  3B5B               	subwfb	(??_DMX_loop+7)^(0+384),w
  3657  0326  0020               	movlb	0	; select bank0
  3658  0327  00A9               	movwf	___lwtoft@c+1
  3659  0328  271C  3180         	fcall	___lwtoft
  3660  032A  0828               	movf	?___lwtoft,w
  3661  032B  00AF               	movwf	___ftmul@f2
  3662  032C  0829               	movf	?___lwtoft+1,w
  3663  032D  00B0               	movwf	___ftmul@f2+1
  3664  032E  082A               	movf	?___lwtoft+2,w
  3665  032F  00B1               	movwf	___ftmul@f2+2
  3666  0330  2610  3180         	fcall	PL8	;call to abstracted procedure
  3667  0332  2646  3180         	fcall	PL20	;call to abstracted procedure
  3668  0334  0021               	movlb	1	; select bank1
  3669  0335  085F               	movf	_rxdata^(0+128),w
  3670  0336  23E8  3180         	fcall	___lbtoft
  3671  0338  26D0  3180         	fcall	PL70	;call to abstracted procedure
  3672  033A  23F8  3180         	fcall	___ftsub
  3673  033C  0856               	movf	?___ftsub,w
  3674  033D  00AC               	movwf	___ftmul@f1
  3675  033E  0857               	movf	?___ftsub+1,w
  3676  033F  00AD               	movwf	___ftmul@f1+1
  3677  0340  0858               	movf	?___ftsub+2,w
  3678  0341  00AE               	movwf	___ftmul@f1+2
  3679  0342  2549  3180         	fcall	___ftmul
  3680  0344  082C               	movf	?___ftmul,w
  3681  0345  00E9               	movwf	_DMX_loop$1439
  3682  0346  082D               	movf	?___ftmul+1,w
  3683  0347  00EA               	movwf	_DMX_loop$1439+1
  3684  0348  082E               	movf	?___ftmul+2,w
  3685  0349  00EB               	movwf	_DMX_loop$1439+2
  3686                           
  3687                           ;DMX.c: 144: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3688  034A  0021               	movlb	1	; select bank1
  3689  034B  085F               	movf	_rxdata^(0+128),w
  3690  034C  267D  3180         	fcall	PL36	;call to abstracted procedure
  3691  034E  0020               	movlb	0	; select bank0
  3692  034F  00A8               	movwf	___lwtoft@c
  3693  0350  3F01               	moviw [1]fsr0
  3694  0351  00A9               	movwf	___lwtoft@c+1
  3695  0352  271C  3180         	fcall	___lwtoft
  3696  0354  0828               	movf	?___lwtoft,w
  3697  0355  00CD               	movwf	___ftadd@f2
  3698  0356  0829               	movf	?___lwtoft+1,w
  3699  0357  00CE               	movwf	___ftadd@f2+1
  3700  0358  082A               	movf	?___lwtoft+2,w
  3701  0359  00CF               	movwf	___ftadd@f2+2
  3702  035A  0869               	movf	_DMX_loop$1439,w
  3703  035B  00CA               	movwf	___ftadd@f1
  3704  035C  086A               	movf	_DMX_loop$1439+1,w
  3705  035D  00CB               	movwf	___ftadd@f1+1
  3706  035E  086B               	movf	_DMX_loop$1439+2,w
  3707  035F  00CC               	movwf	___ftadd@f1+2
  3708  0360  249B  3180         	fcall	___ftadd
  3709  0362  084A               	movf	?___ftadd,w
  3710  0363  00DC               	movwf	___fttol@f1
  3711  0364  084B               	movf	?___ftadd+1,w
  3712  0365  00DD               	movwf	___fttol@f1+1
  3713  0366  084C               	movf	?___ftadd+2,w
  3714  0367  00DE               	movwf	___fttol@f1+2
  3715  0368  276A  3180         	fcall	___fttol
  3716  036A  26A7  3180         	fcall	PL50	;call to abstracted procedure
  3717  036C  085C               	movf	?___fttol,w
  3718  036D  3FC0               	movwi [0]fsr1
  3719  036E  085D               	movf	?___fttol+1,w
  3720  036F  3FC1               	movwi [1]fsr1
  3721                           
  3722                           ;DMX.c: 145: if(rxdata==0 ){
  3723  0370  0021               	movlb	1	; select bank1
  3724  0371  085F               	movf	_rxdata^(0+128),w
  3725  0372  1D03               	btfss	3,2
  3726  0373  2B7C               	goto	l4472
  3727                           
  3728                           ;DMX.c: 146: CurrentPWM.DC[Addr]=0;
  3729  0374  0020               	movlb	0	; select bank0
  3730  0375  356C               	lslf	DMX_loop@Addr,w
  3731  0376  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3732  0377  0086               	movwf	6
  3733  0378  3000               	movlw	0
  3734  0379  3FC0               	movwi [0]fsr1
  3735  037A  3FC1               	movwi [1]fsr1
  3736                           
  3737                           ;DMX.c: 147: }
  3738  037B  2B84               	goto	l382
  3739  037C                     l4472:	
  3740                           
  3741                           ;DMX.c: 148: else if(rxdata==0xff ){
  3742  037C  0F5F               	incfsz	_rxdata^(0+128),w
  3743  037D  2B84               	goto	l382
  3744                           
  3745                           ;DMX.c: 149: CurrentPWM.DC[Addr]=0xffff;
  3746  037E  0020               	movlb	0	; select bank0
  3747  037F  26A7  3180         	fcall	PL50	;call to abstracted procedure
  3748  0381  30FF               	movlw	255
  3749  0382  3FC0               	movwi [0]fsr1
  3750  0383  3FC1               	movwi [1]fsr1
  3751  0384                     l382:	
  3752                           
  3753                           ;DMX.c: 150: }
  3754                           ;DMX.c: 151: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  3755  0384  0020               	movlb	0	; select bank0
  3756  0385  356C               	lslf	DMX_loop@Addr,w
  3757  0386  3E41               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3758  0387  269E  3180         	fcall	PL48	;call to abstracted procedure
  3759  0389  3EB4               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  3760                           
  3761                           ;DMX.c: 152: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  3762  038A  2654  3180         	fcall	PL24	;call to abstracted procedure
  3763  038C  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3764  038D  269E  3180         	fcall	PL48	;call to abstracted procedure
  3765  038F  3E38               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  3766                           
  3767                           ;DMX.c: 153: *PWMLDCONptr[Addr] = 0b10000000;
  3768  0390  2654  3180         	fcall	PL24	;call to abstracted procedure
  3769  0392  3EAC               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  3770  0393  0086               	movwf	6
  3771  0394  3001               	movlw	1	; select bank3/4
  3772  0395  0087               	movwf	7
  3773  0396  3F40               	moviw [0]fsr1
  3774  0397  0023               	movlb	3	; select bank3
  3775  0398  00D4               	movwf	??_DMX_loop^(0+384)
  3776  0399  3F41               	moviw [1]fsr1
  3777  039A  00D5               	movwf	(??_DMX_loop^(0+384)+1)
  3778  039B  0854               	movf	??_DMX_loop^(0+384),w
  3779  039C  0086               	movwf	6
  3780  039D  0855               	movf	(??_DMX_loop+1)^(0+384),w
  3781  039E  0087               	movwf	7
  3782  039F  3080               	movlw	128
  3783  03A0  0081               	movwf	1
  3784                           
  3785                           ;DMX.c: 156: TXREG=CurrentPWM.PWM[0].DCH;
  3786  03A1  0022               	movlb	2	; select bank2
  3787  03A2  0841               	movf	(_CurrentPWM^(0+256)+1),w
  3788  03A3  0023               	movlb	3	; select bank3
  3789  03A4  009A               	movwf	26	;volatile
  3790                           
  3791                           ;DMX.c: 157: send=CurrentPWM.PWM[0].DCL;
  3792  03A5  0022               	movlb	2	; select bank2
  3793  03A6  0840               	movf	_CurrentPWM^(0+256),w
  3794  03A7  0021               	movlb	1	; select bank1
  3795  03A8  00DE               	movwf	_send^(0+128)
  3796                           
  3797                           ;DMX.c: 158: TXEN = 1;
  3798  03A9  0023               	movlb	3	; select bank3
  3799  03AA  169E               	bsf	30,5	;volatile
  3800                           
  3801                           ;DMX.c: 159: TXIE = 1;
  3802  03AB  0021               	movlb	1	; select bank1
  3803  03AC  1611               	bsf	17,4	;volatile
  3804                           
  3805                           ;DMX.c: 161: Addr++;
  3806  03AD  0020               	movlb	0	; select bank0
  3807  03AE  0AEC               	incf	DMX_loop@Addr,f
  3808  03AF                     l4486:	
  3809  03AF  3004               	movlw	4
  3810  03B0  0020               	movlb	0	; select bank0
  3811  03B1  026C               	subwf	DMX_loop@Addr,w
  3812  03B2  1803               	btfsc	3,0
  3813  03B3  2BB6               	goto	l4490
  3814  03B4  2AED               	goto	l4460
  3815  03B5                     l4488:	
  3816                           
  3817                           ;DMX.c: 164: DMXStepConst--;
  3818  03B5  03E0               	decf	_DMXStepConst^(0+128),f
  3819  03B6                     l4490:	
  3820                           
  3821                           ;DMX.c: 165: }
  3822                           ;DMX.c: 168: if (DMX_Flags.RxTimeout == 1) {
  3823  03B6  1D76               	btfss	_DMX_Flags,2	;volatile
  3824  03B7  0008               	return
  3825                           
  3826                           ;DMX.c: 169: PWM1DC = PWM2DC = PWM3DC = PWM4DC = 0;
  3827  03B8  003B               	movlb	27	; select bank27
  3828  03B9  01C3               	clrf	67	;volatile
  3829  03BA  01C4               	clrf	68	;volatile
  3830  03BB  01B3               	clrf	51	;volatile
  3831  03BC  01B4               	clrf	52	;volatile
  3832  03BD  01A3               	clrf	35	;volatile
  3833  03BE  01A4               	clrf	36	;volatile
  3834  03BF  0193               	clrf	19	;volatile
  3835  03C0  0194               	clrf	20	;volatile
  3836                           
  3837                           ;DMX.c: 170: PWM1LDCON = PWM2LDCON = PWM3LDCON = PWM4LDCON = 0b10000000;
  3838  03C1  2702  3180         	fcall	PL96	;call to abstracted procedure
  3839                           
  3840                           ;DMX.c: 171: Addr = 0;
  3841  03C3  0020               	movlb	0	; select bank0
  3842  03C4  01EC               	clrf	DMX_loop@Addr
  3843  03C5                     l4508:	
  3844                           ;DMX.c: 172: while (Addr < 4) {
  3845                           
  3846  03C5  3004               	movlw	4
  3847  03C6  026C               	subwf	DMX_loop@Addr,w
  3848  03C7  1803               	btfsc	3,0
  3849  03C8  0008               	return
  3850                           
  3851                           ;DMX.c: 173: DMXSign[Addr].SIGN = 0b00;
  3852  03C9  086C               	movf	DMX_loop@Addr,w
  3853  03CA  26BC  3180         	fcall	PL56	;call to abstracted procedure
  3854                           
  3855                           ;DMX.c: 174: CurrentPWM.DC[Addr]=0;
  3856  03CC  26A7  3180         	fcall	PL50	;call to abstracted procedure
  3857  03CE  3000               	movlw	0
  3858  03CF  3FC0               	movwi [0]fsr1
  3859  03D0  3FC1               	movwi [1]fsr1
  3860                           
  3861                           ;DMX.c: 175: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3862  03D1  0023               	movlb	3	; select bank3
  3863  03D2  01D4               	clrf	??_DMX_loop^(0+384)
  3864  03D3  01D5               	clrf	(??_DMX_loop^(0+384)+1)
  3865  03D4  01D6               	clrf	(??_DMX_loop^(0+384)+2)
  3866  03D5  0020               	movlb	0	; select bank0
  3867  03D6  2610  3180         	fcall	PL8	;call to abstracted procedure
  3868  03D8  263D  3180         	fcall	PL18	;call to abstracted procedure
  3869  03DA  266B  3180         	fcall	PL28	;call to abstracted procedure
  3870  03DC  0086               	movwf	6
  3871                           
  3872                           ;DMX.c: 176: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3873  03DD  263D  3180         	fcall	PL18	;call to abstracted procedure
  3874  03DF  2708  3180         	fcall	PL98	;call to abstracted procedure
  3875  03E1  356C               	lslf	DMX_loop@Addr,w
  3876  03E2  26DD  3180         	fcall	PL76	;call to abstracted procedure
  3877                           
  3878                           ;DMX.c: 177: DMX_sumRepeat[Addr]=2;
  3879                           
  3880                           ;DMX.c: 178: DMXSign[Addr].InfiniteLoop=1;
  3881  03E4  268A  3180         	fcall	PL38	;call to abstracted procedure
  3882                           
  3883                           ;DMX.c: 179: Addr++;
  3884  03E6  0AEC               	incf	DMX_loop@Addr,f
  3885  03E7  2BC5               	goto	l4508
  3886  03E8                     __end_of_DMX_loop:	
  3887  03E8                     __ptext14:	
  3888 ;; *************** function ___lbtoft *****************
  3889 ;; Defined at:
  3890 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  c               1    wreg     unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  c               1    4[COMMON] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  3    8[BANK0 ] float 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 1E/1
  3901 ;;		On exit  : 1F/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3904 ;;      Params:         0       4       0       0       0       0       0       0
  3905 ;;      Locals:         1       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0
  3907 ;;      Totals:         1       4       0       0       0       0       0       0
  3908 ;;Total ram usage:        5 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    3
  3911 ;; This function calls:
  3912 ;;		___ftpack
  3913 ;; This function is called by:
  3914 ;;		_DMX_loop
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function ___lbtoft
  3920  03E8                     ___lbtoft:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3924                           ;___lbtoft@c stored from wreg
  3925  03E8  00F4               	movwf	___lbtoft@c
  3926  03E9  0020               	movlb	0	; select bank0
  3927  03EA  00A0               	movwf	___ftpack@arg
  3928  03EB  308E               	movlw	142
  3929  03EC  01A1               	clrf	___ftpack@arg+1
  3930  03ED  01A2               	clrf	___ftpack@arg+2
  3931  03EE  00A3               	movwf	___ftpack@exp
  3932  03EF  01A4               	clrf	___ftpack@sign
  3933  03F0  272C               	fcall	___ftpack
  3934  03F1  0820               	movf	?___ftpack,w
  3935  03F2  00A8               	movwf	?___lbtoft
  3936  03F3  0821               	movf	?___ftpack+1,w
  3937  03F4  00A9               	movwf	?___lbtoft+1
  3938  03F5  0822               	movf	?___ftpack+2,w
  3939  03F6  00AA               	movwf	?___lbtoft+2
  3940  03F7  0008               	return
  3941  03F8                     __end_of___lbtoft:	
  3942  03F8                     __ptext16:	
  3943 ;; *************** function ___ftsub *****************
  3944 ;; Defined at:
  3945 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  f2              3   54[BANK0 ] float 
  3948 ;;  f1              3   57[BANK0 ] float 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;		None
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  3   54[BANK0 ] float 
  3953 ;; Registers used:
  3954 ;;		wreg, status,2, status,0, pclath, cstack
  3955 ;; Tracked objects:
  3956 ;;		On entry : 1F/0
  3957 ;;		On exit  : 1F/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3960 ;;      Params:         0       6       0       0       0       0       0       0
  3961 ;;      Locals:         0       0       0       0       0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0       0       0       0
  3963 ;;      Totals:         0       6       0       0       0       0       0       0
  3964 ;;Total ram usage:        6 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    4
  3967 ;; This function calls:
  3968 ;;		___ftadd
  3969 ;; This function is called by:
  3970 ;;		_DMX_loop
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function ___ftsub
  3976  03F8                     ___ftsub:	
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3980  03F8  0858               	movf	___ftsub@f2+2,w
  3981  03F9  0457               	iorwf	___ftsub@f2+1,w
  3982  03FA  0456               	iorwf	___ftsub@f2,w
  3983  03FB  1903               	skipnz
  3984  03FC  2BFF               	goto	l4242
  3985  03FD  3080               	movlw	128
  3986  03FE  06D8               	xorwf	___ftsub@f2+2,f
  3987  03FF                     l4242:	
  3988  03FF  0859               	movf	___ftsub@f1,w
  3989  0400  00CA               	movwf	___ftadd@f1
  3990  0401  085A               	movf	___ftsub@f1+1,w
  3991  0402  00CB               	movwf	___ftadd@f1+1
  3992  0403  085B               	movf	___ftsub@f1+2,w
  3993  0404  00CC               	movwf	___ftadd@f1+2
  3994  0405  0856               	movf	___ftsub@f2,w
  3995  0406  00CD               	movwf	___ftadd@f2
  3996  0407  0857               	movf	___ftsub@f2+1,w
  3997  0408  00CE               	movwf	___ftadd@f2+1
  3998  0409  0858               	movf	___ftsub@f2+2,w
  3999  040A  00CF               	movwf	___ftadd@f2+2
  4000  040B  249B               	fcall	___ftadd
  4001  040C  084A               	movf	?___ftadd,w
  4002  040D  00D6               	movwf	?___ftsub
  4003  040E  084B               	movf	?___ftadd+1,w
  4004  040F  00D7               	movwf	?___ftsub+1
  4005  0410  084C               	movf	?___ftadd+2,w
  4006  0411  00D8               	movwf	?___ftsub+2
  4007  0412  0008               	return
  4008  0413                     __end_of___ftsub:	
  4009  0413                     __ptext20:	
  4010 ;; *************** function ___ftdiv *****************
  4011 ;; Defined at:
  4012 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  f2              3   27[BANK0 ] float 
  4015 ;;  f1              3   30[BANK0 ] float 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  f3              3   37[BANK0 ] float 
  4018 ;;  sign            1   41[BANK0 ] unsigned char 
  4019 ;;  exp             1   40[BANK0 ] unsigned char 
  4020 ;;  cntr            1   36[BANK0 ] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  3   27[BANK0 ] float 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, pclath, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 1F/0
  4027 ;;		On exit  : 1F/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4030 ;;      Params:         0       6       0       0       0       0       0       0
  4031 ;;      Locals:         0       6       0       0       0       0       0       0
  4032 ;;      Temps:          0       3       0       0       0       0       0       0
  4033 ;;      Totals:         0      15       0       0       0       0       0       0
  4034 ;;Total ram usage:       15 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    3
  4037 ;; This function calls:
  4038 ;;		___ftpack
  4039 ;; This function is called by:
  4040 ;;		_DMX_loop
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function ___ftdiv
  4046  0413                     ___ftdiv:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4050  0413  083E               	movf	___ftdiv@f1,w
  4051  0414  00C1               	movwf	??___ftdiv
  4052  0415  083F               	movf	___ftdiv@f1+1,w
  4053  0416  00C2               	movwf	??___ftdiv+1
  4054  0417  0840               	movf	___ftdiv@f1+2,w
  4055  0418  00C3               	movwf	??___ftdiv+2
  4056  0419  1003               	clrc
  4057  041A  0D42               	rlf	??___ftdiv+1,w
  4058  041B  0D43               	rlf	??___ftdiv+2,w
  4059  041C  00C8               	movwf	___ftdiv@exp
  4060  041D  0848               	movf	___ftdiv@exp,w
  4061  041E  1D03               	btfss	3,2
  4062  041F  2C21               	goto	l4150
  4063  0420  2F14               	ljmp	PL104	;call to abstracted procedure
  4064  0421                     l4150:	
  4065  0421  083B               	movf	___ftdiv@f2,w
  4066  0422  00C1               	movwf	??___ftdiv
  4067  0423  083C               	movf	___ftdiv@f2+1,w
  4068  0424  00C2               	movwf	??___ftdiv+1
  4069  0425  083D               	movf	___ftdiv@f2+2,w
  4070  0426  00C3               	movwf	??___ftdiv+2
  4071  0427  1003               	clrc
  4072  0428  0D42               	rlf	??___ftdiv+1,w
  4073  0429  0D43               	rlf	??___ftdiv+2,w
  4074  042A  00C9               	movwf	___ftdiv@sign
  4075  042B  0849               	movf	___ftdiv@sign,w
  4076  042C  1D03               	btfss	3,2
  4077  042D  2C2F               	goto	l1340
  4078  042E  2F14               	ljmp	PL104	;call to abstracted procedure
  4079  042F                     l1340:	
  4080  042F  3089               	movlw	137
  4081  0430  01C5               	clrf	___ftdiv@f3
  4082  0431  01C6               	clrf	___ftdiv@f3+1
  4083  0432  01C7               	clrf	___ftdiv@f3+2
  4084  0433  0749               	addwf	___ftdiv@sign,w
  4085  0434  00C1               	movwf	??___ftdiv
  4086  0435  02C8               	subwf	___ftdiv@exp,f
  4087  0436  0840               	movf	___ftdiv@f1+2,w
  4088  0437  00C9               	movwf	___ftdiv@sign
  4089  0438  083D               	movf	___ftdiv@f2+2,w
  4090  0439  06C9               	xorwf	___ftdiv@sign,f
  4091  043A  3080               	movlw	128
  4092  043B  05C9               	andwf	___ftdiv@sign,f
  4093  043C  3018               	movlw	24
  4094  043D  17BF               	bsf	___ftdiv@f1+1,7
  4095  043E  01C0               	clrf	___ftdiv@f1+2
  4096  043F  17BC               	bsf	___ftdiv@f2+1,7
  4097  0440  01BD               	clrf	___ftdiv@f2+2
  4098  0441  00C4               	movwf	___ftdiv@cntr
  4099  0442                     l4172:	
  4100  0442  35C5               	lslf	___ftdiv@f3,f
  4101  0443  0DC6               	rlf	___ftdiv@f3+1,f
  4102  0444  0DC7               	rlf	___ftdiv@f3+2,f
  4103  0445  083D               	movf	___ftdiv@f2+2,w
  4104  0446  0240               	subwf	___ftdiv@f1+2,w
  4105  0447  1D03               	skipz
  4106  0448  2C4F               	goto	u3035
  4107  0449  083C               	movf	___ftdiv@f2+1,w
  4108  044A  023F               	subwf	___ftdiv@f1+1,w
  4109  044B  1D03               	skipz
  4110  044C  2C4F               	goto	u3035
  4111  044D  083B               	movf	___ftdiv@f2,w
  4112  044E  023E               	subwf	___ftdiv@f1,w
  4113  044F                     u3035:	
  4114  044F  1C03               	skipc
  4115  0450  2C58               	goto	l4178
  4116  0451  083B               	movf	___ftdiv@f2,w
  4117  0452  02BE               	subwf	___ftdiv@f1,f
  4118  0453  083C               	movf	___ftdiv@f2+1,w
  4119  0454  3BBF               	subwfb	___ftdiv@f1+1,f
  4120  0455  083D               	movf	___ftdiv@f2+2,w
  4121  0456  3BC0               	subwfb	___ftdiv@f1+2,f
  4122  0457  1445               	bsf	___ftdiv@f3,0
  4123  0458                     l4178:	
  4124  0458  35BE               	lslf	___ftdiv@f1,f
  4125  0459  0DBF               	rlf	___ftdiv@f1+1,f
  4126  045A  0DC0               	rlf	___ftdiv@f1+2,f
  4127  045B  0BC4               	decfsz	___ftdiv@cntr,f
  4128  045C  2C42               	goto	l4172
  4129  045D  0845               	movf	___ftdiv@f3,w
  4130  045E  00A0               	movwf	___ftpack@arg
  4131  045F  0846               	movf	___ftdiv@f3+1,w
  4132  0460  00A1               	movwf	___ftpack@arg+1
  4133  0461  0847               	movf	___ftdiv@f3+2,w
  4134  0462  00A2               	movwf	___ftpack@arg+2
  4135  0463  0848               	movf	___ftdiv@exp,w
  4136  0464  00A3               	movwf	___ftpack@exp
  4137  0465  0849               	movf	___ftdiv@sign,w
  4138  0466  00A4               	movwf	___ftpack@sign
  4139  0467  272C               	fcall	___ftpack
  4140  0468  0820               	movf	?___ftpack,w
  4141  0469  00BB               	movwf	?___ftdiv
  4142  046A  0821               	movf	?___ftpack+1,w
  4143  046B  00BC               	movwf	?___ftdiv+1
  4144  046C  0822               	movf	?___ftpack+2,w
  4145  046D  00BD               	movwf	?___ftdiv+2
  4146  046E  0008               	return
  4147  046F                     __end_of___ftdiv:	
  4148  046F                     __ptext19:	
  4149 ;; *************** function ___ftge *****************
  4150 ;; Defined at:
  4151 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  ff1             3   12[BANK0 ] float 
  4154 ;;  ff2             3   15[BANK0 ] float 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;		None               void
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 1F/0
  4163 ;;		On exit  : 1F/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4166 ;;      Params:         0       6       0       0       0       0       0       0
  4167 ;;      Locals:         0       0       0       0       0       0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0       0
  4169 ;;      Totals:         0       6       0       0       0       0       0       0
  4170 ;;Total ram usage:        6 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    2
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_DMX_loop
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function ___ftge
  4182  046F                     ___ftge:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4186  046F  1FAE               	btfss	___ftge@ff1+2,7
  4187  0470  2C7E               	goto	l3080
  4188  0471  082C               	movf	___ftge@ff1,w
  4189  0472  3C00               	sublw	0
  4190  0473  00AC               	movwf	___ftge@ff1
  4191  0474  082D               	movf	___ftge@ff1+1,w
  4192  0475  1C03               	skipc
  4193  0476  0F2D               	incfsz	___ftge@ff1+1,w
  4194  0477  3C00               	sublw	0
  4195  0478  00AD               	movwf	___ftge@ff1+1
  4196  0479  082E               	movf	___ftge@ff1+2,w
  4197  047A  1C03               	skipc
  4198  047B  0F2E               	incfsz	___ftge@ff1+2,w
  4199  047C  3C80               	sublw	128
  4200  047D  00AE               	movwf	___ftge@ff1+2
  4201  047E                     l3080:	
  4202  047E  1FB1               	btfss	___ftge@ff2+2,7
  4203  047F  2C8D               	goto	l3084
  4204  0480  082F               	movf	___ftge@ff2,w
  4205  0481  3C00               	sublw	0
  4206  0482  00AF               	movwf	___ftge@ff2
  4207  0483  0830               	movf	___ftge@ff2+1,w
  4208  0484  1C03               	skipc
  4209  0485  0F30               	incfsz	___ftge@ff2+1,w
  4210  0486  3C00               	sublw	0
  4211  0487  00B0               	movwf	___ftge@ff2+1
  4212  0488  0831               	movf	___ftge@ff2+2,w
  4213  0489  1C03               	skipc
  4214  048A  0F31               	incfsz	___ftge@ff2+2,w
  4215  048B  3C80               	sublw	128
  4216  048C  00B1               	movwf	___ftge@ff2+2
  4217  048D                     l3084:	
  4218  048D  3080               	movlw	128
  4219  048E  06AE               	xorwf	___ftge@ff1+2,f
  4220  048F  06B1               	xorwf	___ftge@ff2+2,f
  4221  0490  0831               	movf	___ftge@ff2+2,w
  4222  0491  022E               	subwf	___ftge@ff1+2,w
  4223  0492  1D03               	skipz
  4224  0493  0008               	return
  4225  0494  0830               	movf	___ftge@ff2+1,w
  4226  0495  022D               	subwf	___ftge@ff1+1,w
  4227  0496  1D03               	skipz
  4228  0497  0008               	return
  4229  0498  082F               	movf	___ftge@ff2,w
  4230  0499  022C               	subwf	___ftge@ff1,w
  4231  049A  0008               	return
  4232  049B                     __end_of___ftge:	
  4233  049B                     __ptext17:	
  4234 ;; *************** function ___ftadd *****************
  4235 ;; Defined at:
  4236 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  f1              3   42[BANK0 ] float 
  4239 ;;  f2              3   45[BANK0 ] float 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  exp1            1   53[BANK0 ] unsigned char 
  4242 ;;  exp2            1   52[BANK0 ] unsigned char 
  4243 ;;  sign            1   51[BANK0 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  3   42[BANK0 ] float 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0, pclath, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 1F/0
  4250 ;;		On exit  : 1F/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4253 ;;      Params:         0       6       0       0       0       0       0       0
  4254 ;;      Locals:         0       3       0       0       0       0       0       0
  4255 ;;      Temps:          0       3       0       0       0       0       0       0
  4256 ;;      Totals:         0      12       0       0       0       0       0       0
  4257 ;;Total ram usage:       12 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    3
  4260 ;; This function calls:
  4261 ;;		___ftpack
  4262 ;; This function is called by:
  4263 ;;		_DMX_loop
  4264 ;;		___ftsub
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function ___ftadd
  4270  049B                     ___ftadd:	
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4274  049B  084A               	movf	___ftadd@f1,w
  4275  049C  00D0               	movwf	??___ftadd
  4276  049D  084B               	movf	___ftadd@f1+1,w
  4277  049E  00D1               	movwf	??___ftadd+1
  4278  049F  084C               	movf	___ftadd@f1+2,w
  4279  04A0  00D2               	movwf	??___ftadd+2
  4280  04A1  1003               	clrc
  4281  04A2  0D51               	rlf	??___ftadd+1,w
  4282  04A3  0D52               	rlf	??___ftadd+2,w
  4283  04A4  00D5               	movwf	___ftadd@exp1
  4284  04A5  084D               	movf	___ftadd@f2,w
  4285  04A6  00D0               	movwf	??___ftadd
  4286  04A7  084E               	movf	___ftadd@f2+1,w
  4287  04A8  00D1               	movwf	??___ftadd+1
  4288  04A9  084F               	movf	___ftadd@f2+2,w
  4289  04AA  00D2               	movwf	??___ftadd+2
  4290  04AB  1003               	clrc
  4291  04AC  0D51               	rlf	??___ftadd+1,w
  4292  04AD  0D52               	rlf	??___ftadd+2,w
  4293  04AE  00D4               	movwf	___ftadd@exp2
  4294  04AF  0855               	movf	___ftadd@exp1,w
  4295  04B0  1903               	btfsc	3,2
  4296  04B1  2CBE               	goto	l3936
  4297  04B2  0854               	movf	___ftadd@exp2,w
  4298  04B3  0255               	subwf	___ftadd@exp1,w
  4299  04B4  0854               	movf	___ftadd@exp2,w
  4300  04B5  1803               	skipnc
  4301  04B6  2CC6               	goto	L4
  4302  04B7  00D0               	movwf	??___ftadd
  4303  04B8  0855               	movf	___ftadd@exp1,w
  4304  04B9  02D0               	subwf	??___ftadd,f
  4305  04BA  3019               	movlw	25
  4306  04BB  0250               	subwf	??___ftadd,w
  4307  04BC  1C03               	skipc
  4308  04BD  2CC5               	goto	l3940
  4309  04BE                     l3936:	
  4310  04BE  084D               	movf	___ftadd@f2,w
  4311  04BF  00CA               	movwf	?___ftadd
  4312  04C0  084E               	movf	___ftadd@f2+1,w
  4313  04C1  00CB               	movwf	?___ftadd+1
  4314  04C2  084F               	movf	___ftadd@f2+2,w
  4315  04C3  00CC               	movwf	?___ftadd+2
  4316  04C4  0008               	return
  4317  04C5                     l3940:	
  4318  04C5  0854               	movf	___ftadd@exp2,w
  4319  04C6                     L4:	
  4320  04C6  1903               	btfsc	3,2
  4321  04C7  0008               	return
  4322  04C8  0855               	movf	___ftadd@exp1,w
  4323  04C9  0254               	subwf	___ftadd@exp2,w
  4324  04CA  1803               	skipnc
  4325  04CB  2CD4               	goto	l3946
  4326  04CC  0855               	movf	___ftadd@exp1,w
  4327  04CD  00D0               	movwf	??___ftadd
  4328  04CE  0854               	movf	___ftadd@exp2,w
  4329  04CF  02D0               	subwf	??___ftadd,f
  4330  04D0  3019               	movlw	25
  4331  04D1  0250               	subwf	??___ftadd,w
  4332  04D2  1803               	btfsc	3,0
  4333  04D3  0008               	return
  4334  04D4                     l3946:	
  4335  04D4  3006               	movlw	6
  4336  04D5  00D3               	movwf	___ftadd@sign
  4337  04D6  1BCC               	btfsc	___ftadd@f1+2,7
  4338  04D7  17D3               	bsf	___ftadd@sign,7
  4339  04D8  1BCF               	btfsc	___ftadd@f2+2,7
  4340  04D9  1753               	bsf	___ftadd@sign,6
  4341  04DA  17CB               	bsf	___ftadd@f1+1,7
  4342  04DB  01CC               	clrf	___ftadd@f1+2
  4343  04DC  17CE               	bsf	___ftadd@f2+1,7
  4344  04DD  01CF               	clrf	___ftadd@f2+2
  4345  04DE  0854               	movf	___ftadd@exp2,w
  4346  04DF  0255               	subwf	___ftadd@exp1,w
  4347  04E0  1803               	skipnc
  4348  04E1  2CF9               	goto	l3968
  4349  04E2                     l3958:	
  4350  04E2  35CD               	lslf	___ftadd@f2,f
  4351  04E3  0DCE               	rlf	___ftadd@f2+1,f
  4352  04E4  0DCF               	rlf	___ftadd@f2+2,f
  4353  04E5  03D4               	decf	___ftadd@exp2,f
  4354  04E6  0854               	movf	___ftadd@exp2,w
  4355  04E7  0655               	xorwf	___ftadd@exp1,w
  4356  04E8  1903               	skipnz
  4357  04E9  2CF4               	goto	l3966
  4358  04EA  03D3               	decf	___ftadd@sign,f
  4359  04EB  0853               	movf	___ftadd@sign,w
  4360  04EC  3907               	andlw	7
  4361  04ED  1903               	btfsc	3,2
  4362  04EE  2CF4               	goto	l3966
  4363  04EF  2CE2               	goto	l3958
  4364  04F0                     l3964:	
  4365  04F0  36CC               	lsrf	___ftadd@f1+2,f
  4366  04F1  0CCB               	rrf	___ftadd@f1+1,f
  4367  04F2  0CCA               	rrf	___ftadd@f1,f
  4368  04F3  0AD5               	incf	___ftadd@exp1,f
  4369  04F4                     l3966:	
  4370  04F4  0855               	movf	___ftadd@exp1,w
  4371  04F5  0654               	xorwf	___ftadd@exp2,w
  4372  04F6  1903               	btfsc	3,2
  4373  04F7  2D13               	goto	l1322
  4374  04F8  2CF0               	goto	l3964
  4375  04F9                     l3968:	
  4376  04F9  0855               	movf	___ftadd@exp1,w
  4377  04FA  0254               	subwf	___ftadd@exp2,w
  4378  04FB  1803               	skipnc
  4379  04FC  2D13               	goto	l1322
  4380  04FD                     l3970:	
  4381  04FD  35CA               	lslf	___ftadd@f1,f
  4382  04FE  0DCB               	rlf	___ftadd@f1+1,f
  4383  04FF  0DCC               	rlf	___ftadd@f1+2,f
  4384  0500  03D5               	decf	___ftadd@exp1,f
  4385  0501  0854               	movf	___ftadd@exp2,w
  4386  0502  0655               	xorwf	___ftadd@exp1,w
  4387  0503  1903               	skipnz
  4388  0504  2D0F               	goto	l3978
  4389  0505  03D3               	decf	___ftadd@sign,f
  4390  0506  0853               	movf	___ftadd@sign,w
  4391  0507  3907               	andlw	7
  4392  0508  1903               	btfsc	3,2
  4393  0509  2D0F               	goto	l3978
  4394  050A  2CFD               	goto	l3970
  4395  050B                     l3976:	
  4396  050B  36CF               	lsrf	___ftadd@f2+2,f
  4397  050C  0CCE               	rrf	___ftadd@f2+1,f
  4398  050D  0CCD               	rrf	___ftadd@f2,f
  4399  050E  0AD4               	incf	___ftadd@exp2,f
  4400  050F                     l3978:	
  4401  050F  0855               	movf	___ftadd@exp1,w
  4402  0510  0654               	xorwf	___ftadd@exp2,w
  4403  0511  1D03               	skipz
  4404  0512  2D0B               	goto	l3976
  4405  0513                     l1322:	
  4406  0513  1FD3               	btfss	___ftadd@sign,7
  4407  0514  2D1E               	goto	l3984
  4408  0515  30FF               	movlw	255
  4409  0516  06CA               	xorwf	___ftadd@f1,f
  4410  0517  06CB               	xorwf	___ftadd@f1+1,f
  4411  0518  06CC               	xorwf	___ftadd@f1+2,f
  4412  0519  0ACA               	incf	___ftadd@f1,f
  4413  051A  1903               	skipnz
  4414  051B  0ACB               	incf	___ftadd@f1+1,f
  4415  051C  1903               	skipnz
  4416  051D  0ACC               	incf	___ftadd@f1+2,f
  4417  051E                     l3984:	
  4418  051E  1F53               	btfss	___ftadd@sign,6
  4419  051F  2D26               	goto	l3990
  4420  0520  26F6  3180         	fcall	PL90	;call to abstracted procedure
  4421  0522  1903               	skipnz
  4422  0523  0ACE               	incf	___ftadd@f2+1,f
  4423  0524  1903               	skipnz
  4424  0525  0ACF               	incf	___ftadd@f2+2,f
  4425  0526                     l3990:	
  4426  0526  01D3               	clrf	___ftadd@sign
  4427  0527  084A               	movf	___ftadd@f1,w
  4428  0528  07CD               	addwf	___ftadd@f2,f
  4429  0529  084B               	movf	___ftadd@f1+1,w
  4430  052A  3DCE               	addwfc	___ftadd@f2+1,f
  4431  052B  084C               	movf	___ftadd@f1+2,w
  4432  052C  3DCF               	addwfc	___ftadd@f2+2,f
  4433  052D  1FCF               	btfss	___ftadd@f2+2,7
  4434  052E  2D37               	goto	l4002
  4435  052F  26F6  3180         	fcall	PL90	;call to abstracted procedure
  4436  0531  1903               	skipnz
  4437  0532  0ACE               	incf	___ftadd@f2+1,f
  4438  0533  1903               	skipnz
  4439  0534  0ACF               	incf	___ftadd@f2+2,f
  4440  0535  01D3               	clrf	___ftadd@sign
  4441  0536  0AD3               	incf	___ftadd@sign,f
  4442  0537                     l4002:	
  4443  0537  084D               	movf	___ftadd@f2,w
  4444  0538  00A0               	movwf	___ftpack@arg
  4445  0539  084E               	movf	___ftadd@f2+1,w
  4446  053A  00A1               	movwf	___ftpack@arg+1
  4447  053B  084F               	movf	___ftadd@f2+2,w
  4448  053C  00A2               	movwf	___ftpack@arg+2
  4449  053D  0855               	movf	___ftadd@exp1,w
  4450  053E  00A3               	movwf	___ftpack@exp
  4451  053F  0853               	movf	___ftadd@sign,w
  4452  0540  00A4               	movwf	___ftpack@sign
  4453  0541  272C               	fcall	___ftpack
  4454  0542  0820               	movf	?___ftpack,w
  4455  0543  00CA               	movwf	?___ftadd
  4456  0544  0821               	movf	?___ftpack+1,w
  4457  0545  00CB               	movwf	?___ftadd+1
  4458  0546  0822               	movf	?___ftpack+2,w
  4459  0547  00CC               	movwf	?___ftadd+2
  4460  0548  0008               	return
  4461  0549                     __end_of___ftadd:	
  4462  0549                     __ptext18:	
  4463 ;; *************** function ___ftmul *****************
  4464 ;; Defined at:
  4465 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  f1              3   12[BANK0 ] float 
  4468 ;;  f2              3   15[BANK0 ] float 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  4471 ;;  sign            1   26[BANK0 ] unsigned char 
  4472 ;;  cntr            1   25[BANK0 ] unsigned char 
  4473 ;;  exp             1   21[BANK0 ] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  3   12[BANK0 ] float 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, pclath, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 1F/0
  4480 ;;		On exit  : 1F/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4483 ;;      Params:         0       6       0       0       0       0       0       0
  4484 ;;      Locals:         0       6       0       0       0       0       0       0
  4485 ;;      Temps:          0       3       0       0       0       0       0       0
  4486 ;;      Totals:         0      15       0       0       0       0       0       0
  4487 ;;Total ram usage:       15 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    3
  4490 ;; This function calls:
  4491 ;;		___ftpack
  4492 ;; This function is called by:
  4493 ;;		_DMX_loop
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function ___ftmul
  4499  0549                     ___ftmul:	
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4503  0549  082C               	movf	___ftmul@f1,w
  4504  054A  00B2               	movwf	??___ftmul
  4505  054B  082D               	movf	___ftmul@f1+1,w
  4506  054C  00B3               	movwf	??___ftmul+1
  4507  054D  082E               	movf	___ftmul@f1+2,w
  4508  054E  00B4               	movwf	??___ftmul+2
  4509  054F  1003               	clrc
  4510  0550  0D33               	rlf	??___ftmul+1,w
  4511  0551  0D34               	rlf	??___ftmul+2,w
  4512  0552  00B5               	movwf	___ftmul@exp
  4513  0553  0835               	movf	___ftmul@exp,w
  4514  0554  1D03               	btfss	3,2
  4515  0555  2D57               	goto	l4190
  4516  0556  2F18               	ljmp	PL108	;call to abstracted procedure
  4517  0557                     l4190:	
  4518  0557  082F               	movf	___ftmul@f2,w
  4519  0558  00B2               	movwf	??___ftmul
  4520  0559  0830               	movf	___ftmul@f2+1,w
  4521  055A  00B3               	movwf	??___ftmul+1
  4522  055B  0831               	movf	___ftmul@f2+2,w
  4523  055C  00B4               	movwf	??___ftmul+2
  4524  055D  1003               	clrc
  4525  055E  0D33               	rlf	??___ftmul+1,w
  4526  055F  0D34               	rlf	??___ftmul+2,w
  4527  0560  00BA               	movwf	___ftmul@sign
  4528  0561  083A               	movf	___ftmul@sign,w
  4529  0562  1D03               	btfss	3,2
  4530  0563  2D65               	goto	l4194
  4531  0564  2F18               	ljmp	PL108	;call to abstracted procedure
  4532  0565                     l4194:	
  4533  0565  083A               	movf	___ftmul@sign,w
  4534  0566  3E7B               	addlw	123
  4535  0567  07B5               	addwf	___ftmul@exp,f
  4536  0568  082E               	movf	___ftmul@f1+2,w
  4537  0569  00BA               	movwf	___ftmul@sign
  4538  056A  0831               	movf	___ftmul@f2+2,w
  4539  056B  06BA               	xorwf	___ftmul@sign,f
  4540  056C  3080               	movlw	128
  4541  056D  05BA               	andwf	___ftmul@sign,f
  4542  056E  30FF               	movlw	255
  4543  056F  17AD               	bsf	___ftmul@f1+1,7
  4544  0570  17B0               	bsf	___ftmul@f2+1,7
  4545  0571  05AF               	andwf	___ftmul@f2,f
  4546  0572  05B0               	andwf	___ftmul@f2+1,f
  4547  0573  3007               	movlw	7
  4548  0574  01B1               	clrf	___ftmul@f2+2
  4549  0575  01B6               	clrf	___ftmul@f3_as_product
  4550  0576  01B7               	clrf	___ftmul@f3_as_product+1
  4551  0577  01B8               	clrf	___ftmul@f3_as_product+2
  4552  0578  00B9               	movwf	___ftmul@cntr
  4553  0579                     l4212:	
  4554  0579  1C2C               	btfss	___ftmul@f1,0
  4555  057A  2D7D               	goto	l4216
  4556  057B  26C2  3180         	fcall	PL60	;call to abstracted procedure
  4557  057D                     l4216:	
  4558  057D  36AE               	lsrf	___ftmul@f1+2,f
  4559  057E  0CAD               	rrf	___ftmul@f1+1,f
  4560  057F  0CAC               	rrf	___ftmul@f1,f
  4561  0580  35AF               	lslf	___ftmul@f2,f
  4562  0581  0DB0               	rlf	___ftmul@f2+1,f
  4563  0582  0DB1               	rlf	___ftmul@f2+2,f
  4564  0583  0BB9               	decfsz	___ftmul@cntr,f
  4565  0584  2D79               	goto	l4212
  4566  0585  3009               	movlw	9
  4567  0586  00B9               	movwf	___ftmul@cntr
  4568  0587                     l4224:	
  4569  0587  1C2C               	btfss	___ftmul@f1,0
  4570  0588  2D8B               	goto	l4228
  4571  0589  26C2  3180         	fcall	PL60	;call to abstracted procedure
  4572  058B                     l4228:	
  4573  058B  36AE               	lsrf	___ftmul@f1+2,f
  4574  058C  0CAD               	rrf	___ftmul@f1+1,f
  4575  058D  0CAC               	rrf	___ftmul@f1,f
  4576  058E  36B8               	lsrf	___ftmul@f3_as_product+2,f
  4577  058F  0CB7               	rrf	___ftmul@f3_as_product+1,f
  4578  0590  0CB6               	rrf	___ftmul@f3_as_product,f
  4579  0591  0BB9               	decfsz	___ftmul@cntr,f
  4580  0592  2D87               	goto	l4224
  4581  0593  0836               	movf	___ftmul@f3_as_product,w
  4582  0594  00A0               	movwf	___ftpack@arg
  4583  0595  0837               	movf	___ftmul@f3_as_product+1,w
  4584  0596  00A1               	movwf	___ftpack@arg+1
  4585  0597  0838               	movf	___ftmul@f3_as_product+2,w
  4586  0598  00A2               	movwf	___ftpack@arg+2
  4587  0599  0835               	movf	___ftmul@exp,w
  4588  059A  00A3               	movwf	___ftpack@exp
  4589  059B  083A               	movf	___ftmul@sign,w
  4590  059C  00A4               	movwf	___ftpack@sign
  4591  059D  272C               	fcall	___ftpack
  4592  059E  0820               	movf	?___ftpack,w
  4593  059F  00AC               	movwf	?___ftmul
  4594  05A0  0821               	movf	?___ftpack+1,w
  4595  05A1  00AD               	movwf	?___ftmul+1
  4596  05A2  0822               	movf	?___ftpack+2,w
  4597  05A3  00AE               	movwf	?___ftmul+2
  4598  05A4  0008               	return
  4599  05A5                     __end_of___ftmul:	
  4600  05A5                     __ptext21:	
  4601 ;; *************** function ___awtoft *****************
  4602 ;; Defined at:
  4603 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  c               2    8[BANK0 ] int 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  sign            1    4[COMMON] unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  3    8[BANK0 ] float 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0, pclath, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 1F/0
  4614 ;;		On exit  : 1F/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4617 ;;      Params:         0       3       0       0       0       0       0       0
  4618 ;;      Locals:         1       0       0       0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0       0
  4620 ;;      Totals:         1       3       0       0       0       0       0       0
  4621 ;;Total ram usage:        4 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    3
  4624 ;; This function calls:
  4625 ;;		___ftpack
  4626 ;; This function is called by:
  4627 ;;		_DMX_loop
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function ___awtoft
  4633  05A5                     ___awtoft:	
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4637  05A5  01F4               	clrf	___awtoft@sign
  4638  05A6  1FA9               	btfss	___awtoft@c+1,7
  4639  05A7  2DAF               	goto	l4142
  4640  05A8  09A8               	comf	___awtoft@c,f
  4641  05A9  09A9               	comf	___awtoft@c+1,f
  4642  05AA  0AA8               	incf	___awtoft@c,f
  4643  05AB  1903               	skipnz
  4644  05AC  0AA9               	incf	___awtoft@c+1,f
  4645  05AD  01F4               	clrf	___awtoft@sign
  4646  05AE  0AF4               	incf	___awtoft@sign,f
  4647  05AF                     l4142:	
  4648  05AF  0828               	movf	___awtoft@c,w
  4649  05B0  00A0               	movwf	___ftpack@arg
  4650  05B1  0829               	movf	___awtoft@c+1,w
  4651  05B2  00A1               	movwf	___ftpack@arg+1
  4652  05B3  308E               	movlw	142
  4653  05B4  01A2               	clrf	___ftpack@arg+2
  4654  05B5  00A3               	movwf	___ftpack@exp
  4655  05B6  0874               	movf	___awtoft@sign,w
  4656  05B7  00A4               	movwf	___ftpack@sign
  4657  05B8  272C               	fcall	___ftpack
  4658  05B9  0820               	movf	?___ftpack,w
  4659  05BA  00A8               	movwf	?___awtoft
  4660  05BB  0821               	movf	?___ftpack+1,w
  4661  05BC  00A9               	movwf	?___awtoft+1
  4662  05BD  0822               	movf	?___ftpack+2,w
  4663  05BE  00AA               	movwf	?___awtoft+2
  4664  05BF  0008               	return
  4665  05C0                     __end_of___awtoft:	
  4666  05C0                     PL2:	
  4667  05C0  076C               	addwf	DMX_loop@Addr,w
  4668  05C1  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4669  05C2  0086               	movwf	6
  4670  05C3  0187               	clrf	7
  4671  05C4  0828               	movf	?___lbtoft,w
  4672  05C5  3FC0               	movwi [0]fsr1
  4673  05C6  0829               	movf	?___lbtoft+1,w
  4674  05C7  3FC1               	movwi [1]fsr1
  4675  05C8  082A               	movf	?___lbtoft+2,w
  4676  05C9  3FC2               	movwi [2]fsr1
  4677  05CA  086C               	movf	DMX_loop@Addr,w
  4678  05CB  076C               	addwf	DMX_loop@Addr,w
  4679  05CC  076C               	addwf	DMX_loop@Addr,w
  4680  05CD  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4681  05CE  0086               	movwf	6
  4682  05CF  0828               	movf	?___lbtoft,w
  4683  05D0  3FC0               	movwi [0]fsr1
  4684  05D1  0829               	movf	?___lbtoft+1,w
  4685  05D2  3FC1               	movwi [1]fsr1
  4686  05D3  082A               	movf	?___lbtoft+2,w
  4687  05D4  3FC2               	movwi [2]fsr1
  4688  05D5  0008               	return
  4689  05D6                     __end_ofPL2:	
  4690  05D6                     PL4:	
  4691  05D6  0081               	movwf	1
  4692  05D7  086C               	movf	DMX_loop@Addr,w
  4693  05D8  076C               	addwf	DMX_loop@Addr,w
  4694  05D9  076C               	addwf	DMX_loop@Addr,w
  4695  05DA  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4696  05DB  0086               	movwf	6
  4697  05DC  3F40               	moviw [0]fsr1
  4698  05DD  0023               	movlb	3	; select bank3
  4699  05DE  00D4               	movwf	??_DMX_loop^(0+384)
  4700  05DF  3F41               	moviw [1]fsr1
  4701  05E0  00D5               	movwf	(??_DMX_loop^(0+384)+1)
  4702  05E1  3F42               	moviw [2]fsr1
  4703  05E2  00D6               	movwf	(??_DMX_loop^(0+384)+2)
  4704  05E3  0020               	movlb	0	; select bank0
  4705  05E4  086C               	movf	DMX_loop@Addr,w
  4706  05E5  076C               	addwf	DMX_loop@Addr,w
  4707  05E6  076C               	addwf	DMX_loop@Addr,w
  4708  05E7  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4709  05E8  0086               	movwf	6
  4710  05E9  0023               	movlb	3	; select bank3
  4711  05EA  0854               	movf	??_DMX_loop^(0+384),w
  4712  05EB  3FC0               	movwi [0]fsr1
  4713  05EC  0855               	movf	(??_DMX_loop+1)^(0+384),w
  4714  05ED  3FC1               	movwi [1]fsr1
  4715  05EE  0856               	movf	(??_DMX_loop+2)^(0+384),w
  4716  05EF  3FC2               	movwi [2]fsr1
  4717  05F0  0020               	movlb	0	; select bank0
  4718  05F1  086C               	movf	DMX_loop@Addr,w
  4719  05F2  0008               	return
  4720  05F3                     __end_ofPL4:	
  4721  05F3                     PL6:	
  4722  05F3  0856               	movf	?___ftsub,w
  4723  05F4  0021               	movlb	1	; select bank1
  4724  05F5  00C3               	movwf	_DMX_difference^(0+128)
  4725  05F6  0020               	movlb	0	; select bank0
  4726  05F7  0857               	movf	?___ftsub+1,w
  4727  05F8  0021               	movlb	1	; select bank1
  4728  05F9  00C4               	movwf	(_DMX_difference+1)^(0+128)
  4729  05FA  0020               	movlb	0	; select bank0
  4730  05FB  0858               	movf	?___ftsub+2,w
  4731  05FC  0021               	movlb	1	; select bank1
  4732  05FD  00C5               	movwf	(_DMX_difference+2)^(0+128)
  4733  05FE  0843               	movf	_DMX_difference^(0+128),w
  4734  05FF  0020               	movlb	0	; select bank0
  4735  0600  00AC               	movwf	___ftge@ff1
  4736  0601  0021               	movlb	1	; select bank1
  4737  0602  0844               	movf	(_DMX_difference+1)^(0+128),w
  4738  0603  0020               	movlb	0	; select bank0
  4739  0604  00AD               	movwf	___ftge@ff1+1
  4740  0605  0021               	movlb	1	; select bank1
  4741  0606  0845               	movf	(_DMX_difference+2)^(0+128),w
  4742  0607  0020               	movlb	0	; select bank0
  4743  0608  00AE               	movwf	___ftge@ff1+2
  4744  0609  30CD               	movlw	205
  4745  060A  00AF               	movwf	___ftge@ff2
  4746  060B  304C               	movlw	76
  4747  060C  00B0               	movwf	___ftge@ff2+1
  4748  060D  303D               	movlw	61
  4749  060E  00B1               	movwf	___ftge@ff2+2
  4750  060F  0008               	return
  4751  0610                     __end_ofPL6:	
  4752  0610                     PL8:	
  4753  0610  086C               	movf	DMX_loop@Addr,w
  4754  0611  076C               	addwf	DMX_loop@Addr,w
  4755  0612  076C               	addwf	DMX_loop@Addr,w
  4756  0613  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4757  0614  0086               	movwf	6
  4758  0615  0187               	clrf	7
  4759  0616  0008               	return
  4760  0617                     __end_ofPL8:	
  4761  0617                     PL10:	
  4762  0617  0828               	movf	?___lbtoft,w
  4763  0618  00BB               	movwf	___ftdiv@f2
  4764  0619  0829               	movf	?___lbtoft+1,w
  4765  061A  00BC               	movwf	___ftdiv@f2+1
  4766  061B  082A               	movf	?___lbtoft+2,w
  4767  061C  00BD               	movwf	___ftdiv@f2+2
  4768  061D  3040               	movlw	64
  4769  061E  01AC               	clrf	___ftmul@f1
  4770  061F  01AD               	clrf	___ftmul@f1+1
  4771  0620  00AE               	movwf	___ftmul@f1+2
  4772  0621  0021               	movlb	1	; select bank1
  4773  0622  0843               	movf	_DMX_difference^(0+128),w
  4774  0623  0020               	movlb	0	; select bank0
  4775  0624  00AF               	movwf	___ftmul@f2
  4776  0625  0021               	movlb	1	; select bank1
  4777  0626  0844               	movf	(_DMX_difference+1)^(0+128),w
  4778  0627  0020               	movlb	0	; select bank0
  4779  0628  00B0               	movwf	___ftmul@f2+1
  4780  0629  0021               	movlb	1	; select bank1
  4781  062A  0845               	movf	(_DMX_difference+2)^(0+128),w
  4782  062B  0020               	movlb	0	; select bank0
  4783  062C  00B1               	movwf	___ftmul@f2+2
  4784  062D  0008               	return
  4785  062E                     __end_ofPL10:	
  4786  062E                     PL14:	
  4787  062E  0086               	movwf	6
  4788  062F  0187               	clrf	7
  4789  0630  3F40               	moviw [0]fsr1
  4790  0631  00D9               	movwf	___ftsub@f1
  4791  0632  3F41               	moviw [1]fsr1
  4792  0633  00DA               	movwf	___ftsub@f1+1
  4793  0634  3F42               	moviw [2]fsr1
  4794  0635  00DB               	movwf	___ftsub@f1+2
  4795  0636  0008               	return
  4796  0637                     __end_ofPL14:	
  4797  0637                     PL16:	
  4798  0637  076C               	addwf	DMX_loop@Addr,w
  4799  0638  076C               	addwf	DMX_loop@Addr,w
  4800  0639  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4801  063A  0086               	movwf	6
  4802  063B  0187               	clrf	7
  4803  063C  0008               	return
  4804  063D                     __end_ofPL16:	
  4805  063D                     PL18:	
  4806  063D  0023               	movlb	3	; select bank3
  4807  063E  0854               	movf	??_DMX_loop^(0+384),w
  4808  063F  3FC0               	movwi [0]fsr1
  4809  0640  0855               	movf	(??_DMX_loop+1)^(0+384),w
  4810  0641  3FC1               	movwi [1]fsr1
  4811  0642  0856               	movf	(??_DMX_loop+2)^(0+384),w
  4812  0643  3FC2               	movwi [2]fsr1
  4813  0644  0020               	movlb	0	; select bank0
  4814  0645  0008               	return
  4815  0646                     __end_ofPL18:	
  4816  0646                     PL20:	
  4817  0646  3F40               	moviw [0]fsr1
  4818  0647  00D9               	movwf	___ftsub@f1
  4819  0648  3F41               	moviw [1]fsr1
  4820  0649  00DA               	movwf	___ftsub@f1+1
  4821  064A  3F42               	moviw [2]fsr1
  4822  064B  00DB               	movwf	___ftsub@f1+2
  4823  064C  0008               	return
  4824  064D                     __end_ofPL20:	
  4825  064D                     PL22:	
  4826  064D  3F40               	moviw [0]fsr1
  4827  064E  00D6               	movwf	___ftsub@f2
  4828  064F  3F41               	moviw [1]fsr1
  4829  0650  00D7               	movwf	___ftsub@f2+1
  4830  0651  3F42               	moviw [2]fsr1
  4831  0652  00D8               	movwf	___ftsub@f2+2
  4832  0653  0008               	return
  4833  0654                     __end_ofPL22:	
  4834  0654                     PL24:	
  4835  0654  0086               	movwf	6
  4836  0655  3F40               	moviw [0]fsr1
  4837  0656  0023               	movlb	3	; select bank3
  4838  0657  00D5               	movwf	(??_DMX_loop+1)^(0+384)
  4839  0658  3F41               	moviw [1]fsr1
  4840  0659  00D6               	movwf	((??_DMX_loop+1)^(0+384)+1)
  4841  065A  0855               	movf	(??_DMX_loop+1)^(0+384),w
  4842  065B  0086               	movwf	6
  4843  065C  0856               	movf	(??_DMX_loop+2)^(0+384),w
  4844  065D  0087               	movwf	7
  4845  065E  0854               	movf	??_DMX_loop^(0+384),w
  4846  065F  0081               	movwf	1
  4847  0660  0020               	movlb	0	; select bank0
  4848  0661  356C               	lslf	DMX_loop@Addr,w
  4849  0662  0008               	return
  4850  0663                     __end_ofPL24:	
  4851  0663                     PL26:	
  4852  0663  086C               	movf	DMX_loop@Addr,w
  4853  0664  076C               	addwf	DMX_loop@Addr,w
  4854  0665  076C               	addwf	DMX_loop@Addr,w
  4855  0666  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4856  0667  0086               	movwf	6
  4857  0668  3001               	movlw	1	; select bank3/4
  4858  0669  0087               	movwf	7
  4859  066A  0008               	return
  4860  066B                     __end_ofPL26:	
  4861  066B                     PL28:	
  4862  066B  086C               	movf	DMX_loop@Addr,w
  4863  066C  076C               	addwf	DMX_loop@Addr,w
  4864  066D  076C               	addwf	DMX_loop@Addr,w
  4865  066E  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4866  066F  0008               	return
  4867  0670                     __end_ofPL28:	
  4868  0670                     PL32:	
  4869  0670  3FC2               	movwi [2]fsr1
  4870  0671  0021               	movlb	1	; select bank1
  4871  0672  086C               	movf	_DMXPeriod^(0+128),w
  4872  0673  0023               	movlb	3	; select bank3
  4873  0674  00D4               	movwf	??_DMX_loop^(0+384)
  4874  0675  36D4               	lsrf	??_DMX_loop^(0+384),f
  4875  0676  36D4               	lsrf	??_DMX_loop^(0+384),f
  4876  0677  36D4               	lsrf	??_DMX_loop^(0+384),f
  4877  0678  0854               	movf	??_DMX_loop^(0+384),w
  4878  0679  0020               	movlb	0	; select bank0
  4879  067A  00A8               	movwf	___awtoft@c
  4880  067B  01A9               	clrf	___awtoft@c+1
  4881  067C  0008               	return
  4882  067D                     __end_ofPL32:	
  4883  067D                     PL36:	
  4884  067D  0023               	movlb	3	; select bank3
  4885  067E  00D4               	movwf	??_DMX_loop^(0+384)
  4886  067F  30CC               	movlw	low (_PWM| (0+32768))
  4887  0680  01D5               	clrf	(??_DMX_loop^(0+384)+1)
  4888  0681  35D4               	lslf	??_DMX_loop^(0+384),f
  4889  0682  0DD5               	rlf	(??_DMX_loop^(0+384)+1),f
  4890  0683  0754               	addwf	??_DMX_loop^(0+384),w
  4891  0684  0084               	movwf	4
  4892  0685  3087               	movlw	high (_PWM| (0+32768))
  4893  0686  3D55               	addwfc	(??_DMX_loop+1)^(0+384),w
  4894  0687  0085               	movwf	5
  4895  0688  3F00               	moviw [0]fsr0
  4896  0689  0008               	return
  4897  068A                     __end_ofPL36:	
  4898  068A                     PL38:	
  4899  068A  3F80               	movwi [0]fsr0
  4900  068B  0081               	movwf	1
  4901  068C  086C               	movf	DMX_loop@Addr,w
  4902  068D  3EE8               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  4903  068E  0086               	movwf	6
  4904  068F  3002               	movlw	2
  4905  0690  0187               	clrf	7
  4906  0691  0081               	movwf	1
  4907  0692  086C               	movf	DMX_loop@Addr,w
  4908  0693  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4909  0694  0086               	movwf	6
  4910  0695  1501               	bsf	1,2
  4911  0696  0008               	return
  4912  0697                     __end_ofPL38:	
  4913  0697                     PL44:	
  4914  0697  0828               	movf	?___awtoft,w
  4915  0698  00BB               	movwf	___ftdiv@f2
  4916  0699  0829               	movf	?___awtoft+1,w
  4917  069A  00BC               	movwf	___ftdiv@f2+1
  4918  069B  082A               	movf	?___awtoft+2,w
  4919  069C  00BD               	movwf	___ftdiv@f2+2
  4920  069D  0008               	return
  4921  069E                     __end_ofPL44:	
  4922  069E                     PL48:	
  4923  069E  0086               	movwf	6
  4924  069F  3001               	movlw	1	; select bank2/3
  4925  06A0  0087               	movwf	7
  4926  06A1  0801               	movf	1,w
  4927  06A2  0023               	movlb	3	; select bank3
  4928  06A3  00D4               	movwf	??_DMX_loop^(0+384)
  4929  06A4  0020               	movlb	0	; select bank0
  4930  06A5  356C               	lslf	DMX_loop@Addr,w
  4931  06A6  0008               	return
  4932  06A7                     __end_ofPL48:	
  4933  06A7                     PL50:	
  4934  06A7  356C               	lslf	DMX_loop@Addr,w
  4935  06A8  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  4936  06A9  0086               	movwf	6
  4937  06AA  3001               	movlw	1	; select bank2/3
  4938  06AB  0087               	movwf	7
  4939  06AC  0008               	return
  4940  06AD                     __end_ofPL50:	
  4941  06AD                     PL52:	
  4942  06AD  0086               	movwf	6
  4943  06AE  0820               	movf	??_DMX_init,w
  4944  06AF  3FC0               	movwi [0]fsr1
  4945  06B0  0821               	movf	??_DMX_init+1,w
  4946  06B1  3FC1               	movwi [1]fsr1
  4947  06B2  0822               	movf	??_DMX_init+2,w
  4948  06B3  3FC2               	movwi [2]fsr1
  4949  06B4  0008               	return
  4950  06B5                     __end_ofPL52:	
  4951  06B5                     PL54:	
  4952  06B5  3F40               	moviw [0]fsr1
  4953  06B6  00CA               	movwf	___ftadd@f1
  4954  06B7  3F41               	moviw [1]fsr1
  4955  06B8  00CB               	movwf	___ftadd@f1+1
  4956  06B9  3F42               	moviw [2]fsr1
  4957  06BA  00CC               	movwf	___ftadd@f1+2
  4958  06BB  0008               	return
  4959  06BC                     __end_ofPL54:	
  4960  06BC                     PL56:	
  4961  06BC  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4962  06BD  0086               	movwf	6
  4963  06BE  30FC               	movlw	-4
  4964  06BF  0187               	clrf	7
  4965  06C0  0581               	andwf	1,f
  4966  06C1  0008               	return
  4967  06C2                     __end_ofPL56:	
  4968  06C2                     PL60:	
  4969  06C2  082F               	movf	___ftmul@f2,w
  4970  06C3  07B6               	addwf	___ftmul@f3_as_product,f
  4971  06C4  0830               	movf	___ftmul@f2+1,w
  4972  06C5  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  4973  06C6  0831               	movf	___ftmul@f2+2,w
  4974  06C7  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  4975  06C8  0008               	return
  4976  06C9                     __end_ofPL60:	
  4977  06C9                     PL62:	
  4978  06C9  0856               	movf	?___ftsub,w
  4979  06CA  00BE               	movwf	___ftdiv@f1
  4980  06CB  0857               	movf	?___ftsub+1,w
  4981  06CC  00BF               	movwf	___ftdiv@f1+1
  4982  06CD  0858               	movf	?___ftsub+2,w
  4983  06CE  00C0               	movwf	___ftdiv@f1+2
  4984  06CF  0008               	return
  4985  06D0                     __end_ofPL62:	
  4986  06D0                     PL70:	
  4987  06D0  0828               	movf	?___lbtoft,w
  4988  06D1  00D6               	movwf	___ftsub@f2
  4989  06D2  0829               	movf	?___lbtoft+1,w
  4990  06D3  00D7               	movwf	___ftsub@f2+1
  4991  06D4  082A               	movf	?___lbtoft+2,w
  4992  06D5  00D8               	movwf	___ftsub@f2+2
  4993  06D6  0008               	return
  4994  06D7                     __end_ofPL70:	
  4995  06D7                     PL72:	
  4996  06D7  084A               	movf	?___ftadd,w
  4997  06D8  3FC0               	movwi [0]fsr1
  4998  06D9  084B               	movf	?___ftadd+1,w
  4999  06DA  3FC1               	movwi [1]fsr1
  5000  06DB  084C               	movf	?___ftadd+2,w
  5001  06DC  0008               	return
  5002  06DD                     __end_ofPL72:	
  5003  06DD                     PL76:	
  5004  06DD  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5005  06DE  0084               	movwf	4
  5006  06DF  3001               	movlw	1	; select bank2/3
  5007  06E0  0085               	movwf	5
  5008  06E1  0008               	return
  5009  06E2                     __end_ofPL76:	
  5010  06E2                     PL82:	
  5011  06E2  0856               	movf	?___ftsub,w
  5012  06E3  3FC0               	movwi [0]fsr1
  5013  06E4  0857               	movf	?___ftsub+1,w
  5014  06E5  3FC1               	movwi [1]fsr1
  5015  06E6  0858               	movf	?___ftsub+2,w
  5016  06E7  0008               	return
  5017  06E8                     __end_ofPL82:	
  5018  06E8                     PL84:	
  5019  06E8  082C               	movf	?___ftmul,w
  5020  06E9  00BE               	movwf	___ftdiv@f1
  5021  06EA  082D               	movf	?___ftmul+1,w
  5022  06EB  00BF               	movwf	___ftdiv@f1+1
  5023  06EC  082E               	movf	?___ftmul+2,w
  5024  06ED  00C0               	movwf	___ftdiv@f1+2
  5025  06EE  0008               	return
  5026  06EF                     __end_ofPL84:	
  5027  06EF                     PL86:	
  5028  06EF  083B               	movf	?___ftdiv,w
  5029  06F0  3FC0               	movwi [0]fsr1
  5030  06F1  083C               	movf	?___ftdiv+1,w
  5031  06F2  3FC1               	movwi [1]fsr1
  5032  06F3  083D               	movf	?___ftdiv+2,w
  5033  06F4  3FC2               	movwi [2]fsr1
  5034  06F5  0008               	return
  5035  06F6                     __end_ofPL86:	
  5036  06F6                     PL90:	
  5037  06F6  30FF               	movlw	255
  5038  06F7  06CD               	xorwf	___ftadd@f2,f
  5039  06F8  06CE               	xorwf	___ftadd@f2+1,f
  5040  06F9  06CF               	xorwf	___ftadd@f2+2,f
  5041  06FA  0ACD               	incf	___ftadd@f2,f
  5042  06FB  0008               	return
  5043  06FC                     __end_ofPL90:	
  5044  06FC                     PL92:	
  5045  06FC  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5046  06FD  0086               	movwf	6
  5047  06FE  0187               	clrf	7
  5048  06FF  0801               	movf	1,w
  5049  0700  39FC               	andlw	-4
  5050  0701  0008               	return
  5051  0702                     __end_ofPL92:	
  5052  0702                     PL96:	
  5053  0702  3080               	movlw	128
  5054  0703  00CF               	movwf	79	;volatile
  5055  0704  00BF               	movwf	63	;volatile
  5056  0705  00AF               	movwf	47	;volatile
  5057  0706  009F               	movwf	31	;volatile
  5058  0707  0008               	return
  5059  0708                     __end_ofPL96:	
  5060  0708                     PL98:	
  5061  0708  356C               	lslf	DMX_loop@Addr,w
  5062  0709  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5063  070A  0086               	movwf	6
  5064  070B  3001               	movlw	1	; select bank2/3
  5065  070C  0087               	movwf	7
  5066  070D  0008               	return
  5067  070E                     __end_ofPL98:	
  5068  070E                     PL100:	
  5069  070E  01F5               	clrf	??_ADC_loop+1
  5070  070F  35F4               	lslf	??_ADC_loop,f
  5071  0710  0DF5               	rlf	??_ADC_loop+1,f
  5072  0711  0774               	addwf	??_ADC_loop,w
  5073  0712  0084               	movwf	4
  5074  0713  0008               	return
  5075  0714                     __end_ofPL100:	
  5076  0714                     PL104:	
  5077  0714  01BB               	clrf	?___ftdiv
  5078  0715  01BC               	clrf	?___ftdiv+1
  5079  0716  01BD               	clrf	?___ftdiv+2
  5080  0717  0008               	return
  5081  0718                     __end_ofPL104:	
  5082  0718                     PL108:	
  5083  0718  01AC               	clrf	?___ftmul
  5084  0719  01AD               	clrf	?___ftmul+1
  5085  071A  01AE               	clrf	?___ftmul+2
  5086  071B  0008               	return
  5087  071C                     __end_ofPL108:	
  5088  071C                     __ptext13:	
  5089 ;; *************** function ___lwtoft *****************
  5090 ;; Defined at:
  5091 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  c               2    8[BANK0 ] unsigned int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;		None
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  3    8[BANK0 ] float 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, pclath, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 1F/0
  5102 ;;		On exit  : 1F/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5105 ;;      Params:         0       3       0       0       0       0       0       0
  5106 ;;      Locals:         0       0       0       0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0
  5108 ;;      Totals:         0       3       0       0       0       0       0       0
  5109 ;;Total ram usage:        3 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    3
  5112 ;; This function calls:
  5113 ;;		___ftpack
  5114 ;; This function is called by:
  5115 ;;		_DMX_loop
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function ___lwtoft
  5121  071C                     ___lwtoft:	
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5125  071C  0828               	movf	___lwtoft@c,w
  5126  071D  00A0               	movwf	___ftpack@arg
  5127  071E  0829               	movf	___lwtoft@c+1,w
  5128  071F  00A1               	movwf	___ftpack@arg+1
  5129  0720  308E               	movlw	142
  5130  0721  01A2               	clrf	___ftpack@arg+2
  5131  0722  00A3               	movwf	___ftpack@exp
  5132  0723  01A4               	clrf	___ftpack@sign
  5133  0724  272C               	fcall	___ftpack
  5134  0725  0820               	movf	?___ftpack,w
  5135  0726  00A8               	movwf	?___lwtoft
  5136  0727  0821               	movf	?___ftpack+1,w
  5137  0728  00A9               	movwf	?___lwtoft+1
  5138  0729  0822               	movf	?___ftpack+2,w
  5139  072A  00AA               	movwf	?___lwtoft+2
  5140  072B  0008               	return
  5141  072C                     __end_of___lwtoft:	
  5142  072C                     __ptext22:	
  5143 ;; *************** function ___ftpack *****************
  5144 ;; Defined at:
  5145 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;  arg             3    0[BANK0 ] unsigned um
  5148 ;;  exp             1    3[BANK0 ] unsigned char 
  5149 ;;  sign            1    4[BANK0 ] unsigned char 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  3    0[BANK0 ] float 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0
  5156 ;; Tracked objects:
  5157 ;;		On entry : 1F/0
  5158 ;;		On exit  : 1F/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5161 ;;      Params:         0       5       0       0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0
  5163 ;;      Temps:          0       3       0       0       0       0       0       0
  5164 ;;      Totals:         0       8       0       0       0       0       0       0
  5165 ;;Total ram usage:        8 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    2
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		___awtoft
  5172 ;;		___ftadd
  5173 ;;		___ftdiv
  5174 ;;		___ftmul
  5175 ;;		___lbtoft
  5176 ;;		___lwtoft
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function ___ftpack
  5182  072C                     ___ftpack:	
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5186  072C  0823               	movf	___ftpack@exp,w
  5187  072D  1903               	btfsc	3,2
  5188  072E  2F34               	goto	l1286
  5189  072F  0822               	movf	___ftpack@arg+2,w
  5190  0730  0421               	iorwf	___ftpack@arg+1,w
  5191  0731  0420               	iorwf	___ftpack@arg,w
  5192  0732  1D03               	skipz
  5193  0733  2F3C               	goto	l3912
  5194  0734                     l1286:	
  5195  0734  01A0               	clrf	?___ftpack
  5196  0735  01A1               	clrf	?___ftpack+1
  5197  0736  01A2               	clrf	?___ftpack+2
  5198  0737  0008               	return
  5199  0738                     l3910:	
  5200  0738  0AA3               	incf	___ftpack@exp,f
  5201  0739  36A2               	lsrf	___ftpack@arg+2,f
  5202  073A  0CA1               	rrf	___ftpack@arg+1,f
  5203  073B  0CA0               	rrf	___ftpack@arg,f
  5204  073C                     l3912:	
  5205  073C  30FE               	movlw	254
  5206  073D  0522               	andwf	___ftpack@arg+2,w
  5207  073E  1903               	btfsc	3,2
  5208  073F  2F4A               	goto	l3916
  5209  0740  2F38               	goto	l3910
  5210  0741                     l3914:	
  5211  0741  0AA3               	incf	___ftpack@exp,f
  5212  0742  0AA0               	incf	___ftpack@arg,f
  5213  0743  1903               	skipnz
  5214  0744  0AA1               	incf	___ftpack@arg+1,f
  5215  0745  1903               	skipnz
  5216  0746  0AA2               	incf	___ftpack@arg+2,f
  5217  0747  36A2               	lsrf	___ftpack@arg+2,f
  5218  0748  0CA1               	rrf	___ftpack@arg+1,f
  5219  0749  0CA0               	rrf	___ftpack@arg,f
  5220  074A                     l3916:	
  5221  074A  30FF               	movlw	255
  5222  074B  0522               	andwf	___ftpack@arg+2,w
  5223  074C  1903               	btfsc	3,2
  5224  074D  2F57               	goto	l3920
  5225  074E  2F41               	goto	l3914
  5226  074F                     l3922:	
  5227  074F  3002               	movlw	2
  5228  0750  0223               	subwf	___ftpack@exp,w
  5229  0751  1C03               	btfss	3,0
  5230  0752  2F59               	goto	l1298
  5231  0753  03A3               	decf	___ftpack@exp,f
  5232  0754  35A0               	lslf	___ftpack@arg,f
  5233  0755  0DA1               	rlf	___ftpack@arg+1,f
  5234  0756  0DA2               	rlf	___ftpack@arg+2,f
  5235  0757                     l3920:	
  5236  0757  1FA1               	btfss	___ftpack@arg+1,7
  5237  0758  2F4F               	goto	l3922
  5238  0759                     l1298:	
  5239  0759  1C23               	btfss	___ftpack@exp,0
  5240  075A  13A1               	bcf	___ftpack@arg+1,7
  5241  075B  36A3               	lsrf	___ftpack@exp,f
  5242  075C  0823               	movf	___ftpack@exp,w
  5243  075D  00A7               	movwf	??___ftpack+2
  5244  075E  01A6               	clrf	??___ftpack+1
  5245  075F  01A5               	clrf	??___ftpack
  5246  0760  0825               	movf	??___ftpack,w
  5247  0761  04A0               	iorwf	___ftpack@arg,f
  5248  0762  0826               	movf	??___ftpack+1,w
  5249  0763  04A1               	iorwf	___ftpack@arg+1,f
  5250  0764  0827               	movf	??___ftpack+2,w
  5251  0765  04A2               	iorwf	___ftpack@arg+2,f
  5252  0766  0824               	movf	___ftpack@sign,w
  5253  0767  1D03               	btfss	3,2
  5254  0768  17A2               	bsf	___ftpack@arg+2,7
  5255  0769  0008               	return
  5256  076A                     __end_of___ftpack:	
  5257  076A                     __ptext15:	
  5258 ;; *************** function ___fttol *****************
  5259 ;; Defined at:
  5260 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  f1              3   60[BANK0 ] float 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  lval            4   68[BANK0 ] unsigned long 
  5265 ;;  exp1            1   72[BANK0 ] unsigned char 
  5266 ;;  sign1           1   67[BANK0 ] unsigned char 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  4   60[BANK0 ] long 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 1F/0
  5273 ;;		On exit  : 1F/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5276 ;;      Params:         0       4       0       0       0       0       0       0
  5277 ;;      Locals:         0       6       0       0       0       0       0       0
  5278 ;;      Temps:          0       3       0       0       0       0       0       0
  5279 ;;      Totals:         0      13       0       0       0       0       0       0
  5280 ;;Total ram usage:       13 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    2
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_DMX_loop
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function ___fttol
  5292  076A                     ___fttol:	
  5293                           
  5294                           ;incstack = 0
  5295                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5296  076A  27BF  3180         	fcall	PL78	;call to abstracted procedure
  5297  076C  1003               	clrc
  5298  076D  0D61               	rlf	??___fttol+1,w
  5299  076E  0D62               	rlf	??___fttol+2,w
  5300  076F  00E8               	movwf	___fttol@exp1
  5301  0770  0868               	movf	___fttol@exp1,w
  5302  0771  1D03               	btfss	3,2
  5303  0772  2F78               	goto	l3160
  5304  0773                     l3158:	
  5305  0773  01DC               	clrf	?___fttol
  5306  0774  01DD               	clrf	?___fttol+1
  5307  0775  01DE               	clrf	?___fttol+2
  5308  0776  01DF               	clrf	?___fttol+3
  5309  0777  0008               	return
  5310  0778                     l3160:	
  5311  0778  27BF  3180         	fcall	PL78	;call to abstracted procedure
  5312  077A  3017               	movlw	23
  5313  077B                     u1885:	
  5314  077B  36E2               	lsrf	??___fttol+2,f
  5315  077C  0CE1               	rrf	??___fttol+1,f
  5316  077D  0CE0               	rrf	??___fttol,f
  5317  077E  0B89               	decfsz	9,f
  5318  077F  2F7B               	goto	u1885
  5319  0780  0860               	movf	??___fttol,w
  5320  0781  00E3               	movwf	___fttol@sign1
  5321  0782  17DD               	bsf	___fttol@f1+1,7
  5322  0783  01DE               	clrf	___fttol@f1+2
  5323  0784  085C               	movf	___fttol@f1,w
  5324  0785  00E4               	movwf	___fttol@lval
  5325  0786  085D               	movf	___fttol@f1+1,w
  5326  0787  00E5               	movwf	___fttol@lval+1
  5327  0788  085E               	movf	___fttol@f1+2,w
  5328  0789  00E6               	movwf	___fttol@lval+2
  5329  078A  308E               	movlw	142
  5330  078B  01E7               	clrf	___fttol@lval+3
  5331  078C  02E8               	subwf	___fttol@exp1,f
  5332  078D  1FE8               	btfss	___fttol@exp1,7
  5333  078E  2F9B               	goto	l3180
  5334  078F  0868               	movf	___fttol@exp1,w
  5335  0790  3A80               	xorlw	128
  5336  0791  3E8F               	addlw	143
  5337  0792  1C03               	btfss	3,0
  5338  0793  2F73               	goto	l3158
  5339  0794                     l3176:	
  5340  0794  36E7               	lsrf	___fttol@lval+3,f
  5341  0795  0CE6               	rrf	___fttol@lval+2,f
  5342  0796  0CE5               	rrf	___fttol@lval+1,f
  5343  0797  0CE4               	rrf	___fttol@lval,f
  5344  0798  0FE8               	incfsz	___fttol@exp1,f
  5345  0799  2F94               	goto	l3176
  5346  079A  2FA8               	goto	l3188
  5347  079B                     l3180:	
  5348  079B  3018               	movlw	24
  5349  079C  0268               	subwf	___fttol@exp1,w
  5350  079D  1803               	btfsc	3,0
  5351  079E  2F73               	goto	l3158
  5352  079F                     l3186:	
  5353  079F  0868               	movf	___fttol@exp1,w
  5354  07A0  1903               	btfsc	3,2
  5355  07A1  2FA8               	goto	l3188
  5356  07A2  35E4               	lslf	___fttol@lval,f
  5357  07A3  0DE5               	rlf	___fttol@lval+1,f
  5358  07A4  0DE6               	rlf	___fttol@lval+2,f
  5359  07A5  0DE7               	rlf	___fttol@lval+3,f
  5360  07A6  03E8               	decf	___fttol@exp1,f
  5361  07A7  2F9F               	goto	l3186
  5362  07A8                     l3188:	
  5363  07A8  0863               	movf	___fttol@sign1,w
  5364  07A9  1903               	btfsc	3,2
  5365  07AA  2FB6               	goto	l3192
  5366  07AB  09E4               	comf	___fttol@lval,f
  5367  07AC  09E5               	comf	___fttol@lval+1,f
  5368  07AD  09E6               	comf	___fttol@lval+2,f
  5369  07AE  09E7               	comf	___fttol@lval+3,f
  5370  07AF  0AE4               	incf	___fttol@lval,f
  5371  07B0  1903               	skipnz
  5372  07B1  0AE5               	incf	___fttol@lval+1,f
  5373  07B2  1903               	skipnz
  5374  07B3  0AE6               	incf	___fttol@lval+2,f
  5375  07B4  1903               	skipnz
  5376  07B5  0AE7               	incf	___fttol@lval+3,f
  5377  07B6                     l3192:	
  5378  07B6  0867               	movf	___fttol@lval+3,w
  5379  07B7  00DF               	movwf	?___fttol+3
  5380  07B8  0866               	movf	___fttol@lval+2,w
  5381  07B9  00DE               	movwf	?___fttol+2
  5382  07BA  0865               	movf	___fttol@lval+1,w
  5383  07BB  00DD               	movwf	?___fttol+1
  5384  07BC  0864               	movf	___fttol@lval,w
  5385  07BD  00DC               	movwf	?___fttol
  5386  07BE  0008               	return
  5387  07BF                     __end_of___fttol:	
  5388  07BF                     PL78:	
  5389  07BF  085C               	movf	___fttol@f1,w
  5390  07C0  00E0               	movwf	??___fttol
  5391  07C1  085D               	movf	___fttol@f1+1,w
  5392  07C2  00E1               	movwf	??___fttol+1
  5393  07C3  085E               	movf	___fttol@f1+2,w
  5394  07C4  00E2               	movwf	??___fttol+2
  5395  07C5  0008               	return
  5396  07C6                     __end_ofPL78:	
  5397  07C6                     __ptext1:	
  5398 ;; *************** function _timer1_init *****************
  5399 ;; Defined at:
  5400 ;;		line 15 in file "Timer.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  2  106[None  ] int 
  5407 ;; Registers used:
  5408 ;;		wreg
  5409 ;; Tracked objects:
  5410 ;;		On entry : B1F/0
  5411 ;;		On exit  : B1F/0
  5412 ;;		Unchanged: B00/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5414 ;;      Params:         0       0       0       0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    2
  5421 ;; This function calls:
  5422 ;;		Nothing
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _timer1_init
  5430  07C6                     _timer1_init:	
  5431                           
  5432                           ;Timer.c: 16: TMR1IE = 1;
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _timer1_init: [wreg]
  5436  07C6  0021               	movlb	1	; select bank1
  5437  07C7  1411               	bsf	17,0	;volatile
  5438                           
  5439                           ;Timer.c: 17: T1CON = 0b00110001;
  5440  07C8  3031               	movlw	49
  5441  07C9  0020               	movlb	0	; select bank0
  5442  07CA  0098               	movwf	24	;volatile
  5443  07CB  0008               	return
  5444  07CC                     __end_of_timer1_init:	
  5445                           
  5446                           	psect	bssCOMMON
  5447  0076                     __pbssCOMMON:	
  5448  0076                     _DMX_Flags:	
  5449  0076                     	ds	2
  5450  0078                     _PackCount:	
  5451  0078                     	ds	1
  5452  0079                     _PDCount:	
  5453  0079                     	ds	1
  5454                           
  5455                           	psect	bssBANK1
  5456  00A0                     __pbssBANK1:	
  5457  00A0                     _DMX_TargetBright:	
  5458  00A0                     	ds	12
  5459  00AC                     _DMX_CurrentBright:	
  5460  00AC                     	ds	12
  5461  00B8                     _Timer:	
  5462  00B8                     	ds	7
  5463  00BF                     _DMXSign:	
  5464  00BF                     	ds	4
  5465  00C3                     _DMX_difference:	
  5466  00C3                     	ds	3
  5467  00C6                     _checkSum:	
  5468  00C6                     	ds	2
  5469  00C8                     _TX_PD_Flag:	
  5470  00C8                     	ds	2
  5471  00CA                     _PD_Flag:	
  5472  00CA                     	ds	2
  5473  00CC                     _PD_ID:	
  5474  00CC                     	ds	2
  5475  00CE                     _PD_Manu:	
  5476  00CE                     	ds	2
  5477  00D0                     _TxCount:	
  5478  00D0                     	ds	2
  5479  00D2                     _i:	
  5480  00D2                     	ds	2
  5481  00D4                     _RxTimer:	
  5482  00D4                     	ds	2
  5483  00D6                     _RxAddrCount:	
  5484  00D6                     	ds	2
  5485  00D8                     _ADC_Flags:	
  5486  00D8                     	ds	1
  5487  00D9                     _ADC_Data:	
  5488  00D9                     	ds	1
  5489  00DA                     _TimerState:	
  5490  00DA                     	ds	1
  5491  00DB                     _TX_PDCount:	
  5492  00DB                     	ds	1
  5493  00DC                     _TxState:	
  5494  00DC                     	ds	1
  5495  00DD                     _TxByte:	
  5496  00DD                     	ds	1
  5497  00DE                     _send:	
  5498  00DE                     	ds	1
  5499  00DF                     _rxdata:	
  5500  00DF                     	ds	1
  5501  00E0                     _DMXStepConst:	
  5502  00E0                     	ds	1
  5503  00E1                     _DMXPeriodConst:	
  5504  00E1                     	ds	1
  5505  00E2                     _RxState:	
  5506  00E2                     	ds	1
  5507  00E3                     _RxDataPtr:	
  5508  00E3                     	ds	1
  5509  00E4                     _RxData:	
  5510  00E4                     	ds	4
  5511                           
  5512                           	psect	dataBANK1
  5513  00E8                     __pdataBANK1:	
  5514  00E8                     _DMX_sumRepeat:	
  5515  00E8                     	ds	4
  5516  00EC                     _DMXPeriod:	
  5517  00EC                     	ds	1
  5518                           
  5519                           	psect	bssBANK2
  5520  0120                     __pbssBANK2:	
  5521  0120                     _RX_RDM_Data:	
  5522  0120                     	ds	24
  5523  0138                     _PWMDCLptr:	
  5524  0138                     	ds	8
  5525  0140                     _CurrentPWM:	
  5526  0140                     	ds	8
  5527  0148                     _preRxData:	
  5528  0148                     	ds	4
  5529  014C                     _TX_RDM_Data:	
  5530  014C                     	ds	24
  5531                           
  5532                           	psect	dataBANK2
  5533  0164                     __pdataBANK2:	
  5534  0164                     _DMX_Repeat:	
  5535  0164                     	ds	8
  5536                           
  5537                           	psect	bssBANK3
  5538  01A0                     __pbssBANK3:	
  5539  01A0                     _DMX_SpaceBright:	
  5540  01A0                     	ds	12
  5541  01AC                     _PWMLDCONptr:	
  5542  01AC                     	ds	8
  5543  01B4                     _PWMDCHptr:	
  5544  01B4                     	ds	8
  5545  01BC                     _DISCOVERY_RDM_Data:	
  5546  01BC                     	ds	24
  5547                           
  5548                           	psect	clrtext
  5549  0AFF                     clear_ram0:	
  5550                           ;	Called with FSR0 containing the base address, and
  5551                           ;	btemp/btemp+1 has the size to clear
  5552                           
  5553  0AFF  0064               	clrwdt	;clear the watchdog before getting into this loop
  5554  0B00                     clrloop0:	
  5555  0B00  3001               	movlw	1
  5556  0B01  0180               	clrf	0	;clear RAM location pointed to by FSR
  5557  0B02  3101               	addfsr 0,1
  5558  0B03  02FE               	subwf	126,f
  5559  0B04  3000               	movlw	0
  5560  0B05  3BFF               	subwfb	127,f
  5561  0B06  087F               	movf	127,w
  5562  0B07  047E               	iorwf	126,w
  5563  0B08  1903               	btfsc	3,2
  5564  0B09  3400               	retlw	0	;all done for this memory range, return
  5565  0B0A  2B00               	goto	clrloop0	;have we reached the end yet?
  5566                           
  5567                           	psect	cstackBANK3
  5568  01D4                     __pcstackBANK3:	
  5569  01D4                     ??_DMX_loop:	
  5570                           
  5571                           ; 1 bytes @ 0x0
  5572  01D4                     	ds	8
  5573                           
  5574                           	psect	cstackCOMMON
  5575  0070                     __pcstackCOMMON:	
  5576  0070                     ?_DMX_init:	
  5577  0070                     ?_DMX_loop:	
  5578                           ; 1 bytes @ 0x0
  5579                           
  5580  0070                     ??_ADC_interrupt:	
  5581                           ; 1 bytes @ 0x0
  5582                           
  5583  0070                     ??_DMX_interrput:	
  5584                           ; 1 bytes @ 0x0
  5585                           
  5586  0070                     ??_timer1_interrupt:	
  5587                           ; 1 bytes @ 0x0
  5588                           
  5589  0070                     ??_RDM_tx_interrupt:	
  5590                           ; 1 bytes @ 0x0
  5591                           
  5592  0070                     ?_RDM_discovery_CC:	
  5593                           ; 1 bytes @ 0x0
  5594                           
  5595  0070                     ?_RDM_GET_CC:	
  5596                           ; 1 bytes @ 0x0
  5597                           
  5598  0070                     ?_RDM_SET_CC:	
  5599                           ; 1 bytes @ 0x0
  5600                           
  5601  0070                     ?_RDM_TXSTART:	
  5602                           ; 1 bytes @ 0x0
  5603                           
  5604  0070                     ?_TX_RDM_Response_Set:	
  5605                           ; 1 bytes @ 0x0
  5606                           
  5607  0070                     ?_main:	
  5608                           ; 1 bytes @ 0x0
  5609                           
  5610  0070                     ?_isr:	
  5611                           ; 1 bytes @ 0x0
  5612                           
  5613  0070                     ?_RDM_tx_TimerBreak:	
  5614                           ; 1 bytes @ 0x0
  5615                           
  5616  0070                     ?_ADC_init:	
  5617                           ; 1 bytes @ 0x0
  5618                           
  5619  0070                     ?_timer1_init:	
  5620                           ; 2 bytes @ 0x0
  5621                           
  5622  0070                     ?_RDM_init:	
  5623                           ; 2 bytes @ 0x0
  5624                           
  5625  0070                     ?_ADC_loop:	
  5626                           ; 2 bytes @ 0x0
  5627                           
  5628  0070                     ?_RDM_rx_loop:	
  5629                           ; 2 bytes @ 0x0
  5630                           
  5631  0070                     ?_ADC_interrupt:	
  5632                           ; 2 bytes @ 0x0
  5633                           
  5634  0070                     ?_DMX_interrput:	
  5635                           ; 2 bytes @ 0x0
  5636                           
  5637  0070                     ?_timer1_interrupt:	
  5638                           ; 2 bytes @ 0x0
  5639                           
  5640  0070                     ?_RDM_tx_interrupt:	
  5641                           ; 2 bytes @ 0x0
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x0
  5645  0070                     	ds	2
  5646  0072                     DMX_interrput@RxDat:	
  5647                           
  5648                           ; 1 bytes @ 0x2
  5649  0072                     	ds	2
  5650  0074                     ??_ADC_init:	
  5651  0074                     ??_timer1_init:	
  5652                           ; 1 bytes @ 0x4
  5653                           
  5654  0074                     ??_ADC_loop:	
  5655                           ; 1 bytes @ 0x4
  5656                           
  5657  0074                     ??_RDM_get_checkSum:	
  5658                           ; 1 bytes @ 0x4
  5659                           
  5660  0074                     ??_RDM_TXSTART:	
  5661                           ; 1 bytes @ 0x4
  5662                           
  5663  0074                     ??_TX_RDM_Response_Set:	
  5664                           ; 1 bytes @ 0x4
  5665                           
  5666  0074                     ??_isr:	
  5667                           ; 1 bytes @ 0x4
  5668                           
  5669  0074                     ??_RDM_tx_TimerBreak:	
  5670                           ; 1 bytes @ 0x4
  5671                           
  5672  0074                     ?___bmul:	
  5673                           ; 1 bytes @ 0x4
  5674                           
  5675  0074                     ??___awtoft:	
  5676                           ; 1 bytes @ 0x4
  5677                           
  5678  0074                     ??___lbtoft:	
  5679                           ; 1 bytes @ 0x4
  5680                           
  5681  0074                     ??___lwtoft:	
  5682                           ; 1 bytes @ 0x4
  5683                           
  5684  0074                     DMX_init@Addr:	
  5685                           ; 1 bytes @ 0x4
  5686                           
  5687  0074                     ___bmul@multiplicand:	
  5688                           ; 1 bytes @ 0x4
  5689                           
  5690  0074                     ___awtoft@sign:	
  5691                           ; 1 bytes @ 0x4
  5692                           
  5693  0074                     ___lbtoft@c:	
  5694                           ; 1 bytes @ 0x4
  5695                           
  5696                           
  5697                           ; 1 bytes @ 0x4
  5698  0074                     	ds	1
  5699  0075                     ??_RDM_rx_loop:	
  5700  0075                     ??_RDM_SET_CC:	
  5701                           ; 1 bytes @ 0x5
  5702                           
  5703  0075                     ??___bmul:	
  5704                           ; 1 bytes @ 0x5
  5705                           
  5706  0075                     ??___ftge:	
  5707                           ; 1 bytes @ 0x5
  5708                           
  5709  0075                     ??___ftsub:	
  5710                           ; 1 bytes @ 0x5
  5711                           
  5712                           
  5713                           ; 1 bytes @ 0x5
  5714  0075                     	ds	1
  5715  0076                     ??_main:	
  5716                           
  5717                           	psect	cstackBANK0
  5718  0020                     __pcstackBANK0:	
  5719                           ; 1 bytes @ 0x6
  5720                           
  5721  0020                     ??_DMX_init:	
  5722  0020                     ?_RDM_get_checkSum:	
  5723                           ; 1 bytes @ 0x0
  5724                           
  5725  0020                     ?___ftpack:	
  5726                           ; 2 bytes @ 0x0
  5727                           
  5728  0020                     ___bmul@product:	
  5729                           ; 3 bytes @ 0x0
  5730                           
  5731  0020                     ___ftpack@arg:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  0020                     RDM_get_checkSum@Data:	
  5735                           ; 3 bytes @ 0x0
  5736                           
  5737                           
  5738                           ; 24 bytes @ 0x0
  5739  0020                     	ds	1
  5740  0021                     ___bmul@multiplier:	
  5741                           
  5742                           ; 1 bytes @ 0x1
  5743  0021                     	ds	1
  5744  0022                     ??_RDM_init:	
  5745                           
  5746                           ; 1 bytes @ 0x2
  5747  0022                     	ds	1
  5748  0023                     ___ftpack@exp:	
  5749                           
  5750                           ; 1 bytes @ 0x3
  5751  0023                     	ds	1
  5752  0024                     ___ftpack@sign:	
  5753                           
  5754                           ; 1 bytes @ 0x4
  5755  0024                     	ds	1
  5756  0025                     ??___ftpack:	
  5757                           
  5758                           ; 1 bytes @ 0x5
  5759  0025                     	ds	3
  5760  0028                     ?___awtoft:	
  5761  0028                     ?___lbtoft:	
  5762                           ; 3 bytes @ 0x8
  5763                           
  5764  0028                     ?___lwtoft:	
  5765                           ; 3 bytes @ 0x8
  5766                           
  5767  0028                     ___awtoft@c:	
  5768                           ; 3 bytes @ 0x8
  5769                           
  5770  0028                     ___lwtoft@c:	
  5771                           ; 2 bytes @ 0x8
  5772                           
  5773                           
  5774                           ; 2 bytes @ 0x8
  5775  0028                     	ds	4
  5776  002C                     ?___ftge:	
  5777  002C                     ?___ftmul:	
  5778                           ; 1 bit 
  5779                           
  5780  002C                     ___ftge@ff1:	
  5781                           ; 3 bytes @ 0xC
  5782                           
  5783  002C                     ___ftmul@f1:	
  5784                           ; 3 bytes @ 0xC
  5785                           
  5786                           
  5787                           ; 3 bytes @ 0xC
  5788  002C                     	ds	3
  5789  002F                     ___ftge@ff2:	
  5790  002F                     ___ftmul@f2:	
  5791                           ; 3 bytes @ 0xF
  5792                           
  5793                           
  5794                           ; 3 bytes @ 0xF
  5795  002F                     	ds	3
  5796  0032                     ??___ftmul:	
  5797                           
  5798                           ; 1 bytes @ 0x12
  5799  0032                     	ds	3
  5800  0035                     ___ftmul@exp:	
  5801                           
  5802                           ; 1 bytes @ 0x15
  5803  0035                     	ds	1
  5804  0036                     ___ftmul@f3_as_product:	
  5805                           
  5806                           ; 3 bytes @ 0x16
  5807  0036                     	ds	2
  5808  0038                     RDM_get_checkSum@len:	
  5809                           
  5810                           ; 1 bytes @ 0x18
  5811  0038                     	ds	1
  5812  0039                     ??_RDM_discovery_CC:	
  5813  0039                     ??_RDM_GET_CC:	
  5814                           ; 1 bytes @ 0x19
  5815                           
  5816  0039                     ___ftmul@cntr:	
  5817                           ; 1 bytes @ 0x19
  5818                           
  5819                           
  5820                           ; 1 bytes @ 0x19
  5821  0039                     	ds	1
  5822  003A                     ___ftmul@sign:	
  5823                           
  5824                           ; 1 bytes @ 0x1A
  5825  003A                     	ds	1
  5826  003B                     ?___ftdiv:	
  5827  003B                     ___ftdiv@f2:	
  5828                           ; 3 bytes @ 0x1B
  5829                           
  5830                           
  5831                           ; 3 bytes @ 0x1B
  5832  003B                     	ds	3
  5833  003E                     ___ftdiv@f1:	
  5834                           
  5835                           ; 3 bytes @ 0x1E
  5836  003E                     	ds	3
  5837  0041                     ??___ftdiv:	
  5838                           
  5839                           ; 1 bytes @ 0x21
  5840  0041                     	ds	3
  5841  0044                     ___ftdiv@cntr:	
  5842                           
  5843                           ; 1 bytes @ 0x24
  5844  0044                     	ds	1
  5845  0045                     ___ftdiv@f3:	
  5846                           
  5847                           ; 3 bytes @ 0x25
  5848  0045                     	ds	3
  5849  0048                     ___ftdiv@exp:	
  5850                           
  5851                           ; 1 bytes @ 0x28
  5852  0048                     	ds	1
  5853  0049                     ___ftdiv@sign:	
  5854                           
  5855                           ; 1 bytes @ 0x29
  5856  0049                     	ds	1
  5857  004A                     ?___ftadd:	
  5858  004A                     ___ftadd@f1:	
  5859                           ; 3 bytes @ 0x2A
  5860                           
  5861                           
  5862                           ; 3 bytes @ 0x2A
  5863  004A                     	ds	3
  5864  004D                     ___ftadd@f2:	
  5865                           
  5866                           ; 3 bytes @ 0x2D
  5867  004D                     	ds	3
  5868  0050                     ??___ftadd:	
  5869                           
  5870                           ; 1 bytes @ 0x30
  5871  0050                     	ds	3
  5872  0053                     ___ftadd@sign:	
  5873                           
  5874                           ; 1 bytes @ 0x33
  5875  0053                     	ds	1
  5876  0054                     ___ftadd@exp2:	
  5877                           
  5878                           ; 1 bytes @ 0x34
  5879  0054                     	ds	1
  5880  0055                     ___ftadd@exp1:	
  5881                           
  5882                           ; 1 bytes @ 0x35
  5883  0055                     	ds	1
  5884  0056                     ?___ftsub:	
  5885  0056                     ___ftsub@f2:	
  5886                           ; 3 bytes @ 0x36
  5887                           
  5888                           
  5889                           ; 3 bytes @ 0x36
  5890  0056                     	ds	3
  5891  0059                     ___ftsub@f1:	
  5892                           
  5893                           ; 3 bytes @ 0x39
  5894  0059                     	ds	3
  5895  005C                     ?___fttol:	
  5896  005C                     ___fttol@f1:	
  5897                           ; 4 bytes @ 0x3C
  5898                           
  5899                           
  5900                           ; 3 bytes @ 0x3C
  5901  005C                     	ds	4
  5902  0060                     ??___fttol:	
  5903                           
  5904                           ; 1 bytes @ 0x40
  5905  0060                     	ds	3
  5906  0063                     ___fttol@sign1:	
  5907                           
  5908                           ; 1 bytes @ 0x43
  5909  0063                     	ds	1
  5910  0064                     ___fttol@lval:	
  5911                           
  5912                           ; 4 bytes @ 0x44
  5913  0064                     	ds	4
  5914  0068                     ___fttol@exp1:	
  5915                           
  5916                           ; 1 bytes @ 0x48
  5917  0068                     	ds	1
  5918  0069                     _DMX_loop$1439:	
  5919                           
  5920                           ; 3 bytes @ 0x49
  5921  0069                     	ds	3
  5922  006C                     DMX_loop@Addr:	
  5923                           
  5924                           ; 1 bytes @ 0x4C
  5925  006C                     	ds	1
  5926                           
  5927                           	psect	text3
  5928  0C5C                     __ptext3:	
  5929 ;; *************** function _RDM_discovery_CC *****************
  5930 ;; Defined at:
  5931 ;;		line 56 in file "RDM_Read.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 1C/2
  5942 ;;		On exit  : 1C/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5945 ;;      Params:         0       0       0       0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0
  5947 ;;      Temps:          0       4       0       0       0       0       0       0
  5948 ;;      Totals:         0       4       0       0       0       0       0       0
  5949 ;;Total ram usage:        4 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    4
  5952 ;; This function calls:
  5953 ;;		_RDM_TXSTART
  5954 ;; This function is called by:
  5955 ;;		_RDM_rx_loop
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function _RDM_discovery_CC
  5961  0C5C                     _RDM_discovery_CC:	
  5962  0C5C                     l4006:	
  5963                           ;incstack = 0
  5964                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5965                           
  5966                           
  5967                           ;RDM_Read.c: 57: switch (RX_RDM_Data.PID) {
  5968  0C5C  2CBC               	goto	l4066
  5969  0C5D                     l1100:	
  5970                           ;RDM_Read.c: 58: case 0x0001:
  5971                           
  5972                           
  5973                           ;RDM_Read.c: 59: if (!DMX_Flags.RDMmute) {
  5974  0C5D  1977               	btfsc	_DMX_Flags+1,2	;volatile
  5975  0C5E  0008               	return
  5976                           
  5977                           ;RDM_Read.c: 60: DMX_Flags.RDMcheck = 1;
  5978  0C5F  0877               	movf	_DMX_Flags+1,w	;volatile
  5979  0C60  39FC               	andlw	-4
  5980  0C61  3801               	iorlw	1
  5981  0C62  00F7               	movwf	_DMX_Flags+1	;volatile
  5982                           
  5983                           ;RDM_Read.c: 61: PD_Manu = &PD.u8[100-2];
  5984  0C63  3021               	movlw	33
  5985  0C64  0021               	movlb	1	; select bank1
  5986  0C65  00CF               	movwf	(_PD_Manu+1)^(0+128)
  5987  0C66  30EE               	movlw	238
  5988  0C67  00CE               	movwf	_PD_Manu^(0+128)
  5989                           
  5990                           ;RDM_Read.c: 62: PD_ID = &PD.u8[100-6];
  5991  0C68  3021               	movlw	33
  5992  0C69  00CD               	movwf	(_PD_ID+1)^(0+128)
  5993  0C6A  30EA               	movlw	234
  5994                           
  5995                           ;RDM_Read.c: 63: if (*PD_Manu <= 0x4D52) {
  5996  0C6B  2661  318C         	fcall	PL34	;call to abstracted procedure
  5997  0C6D  3053               	movlw	83
  5998  0C6E  1903               	skipnz
  5999  0C6F  0239               	subwf	??_RDM_discovery_CC,w
  6000  0C70  1803               	skipnc
  6001  0C71  2C7F               	goto	l4024
  6002                           
  6003                           ;RDM_Read.c: 64: DMX_Flags.RDMcheck++;
  6004                           
  6005                           ;RDM_Read.c: 65: if (*PD_Manu == 0x4D52 && *PD_ID > 0x17C31092) {
  6006  0C72  263D  318C         	fcall	PL12	;call to abstracted procedure
  6007  0C74  1D03               	btfss	3,2
  6008  0C75  2C7F               	goto	l4024
  6009  0C76  266E  318C         	fcall	PL46	;call to abstracted procedure
  6010  0C78  3093               	movlw	147
  6011  0C79  2653  318C         	fcall	PL30	;call to abstracted procedure
  6012  0C7B  1C03               	btfss	3,0
  6013  0C7C  2C7F               	goto	l4024
  6014                           
  6015                           ;RDM_Read.c: 66: DMX_Flags.RDMcheck = 0;
  6016  0C7D  30FC               	movlw	-4
  6017  0C7E  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6018  0C7F                     l4024:	
  6019                           
  6020                           ;RDM_Read.c: 67: }
  6021                           ;RDM_Read.c: 68: }
  6022                           ;RDM_Read.c: 69: PD_Manu = &PD.u8[100-8];
  6023  0C7F  3021               	movlw	33
  6024  0C80  0021               	movlb	1	; select bank1
  6025  0C81  00CF               	movwf	(_PD_Manu+1)^(0+128)
  6026  0C82  30E8               	movlw	232
  6027  0C83  00CE               	movwf	_PD_Manu^(0+128)
  6028                           
  6029                           ;RDM_Read.c: 70: PD_ID = &PD.u8[100-12];
  6030  0C84  3021               	movlw	33
  6031  0C85  00CD               	movwf	(_PD_ID+1)^(0+128)
  6032  0C86  30E4               	movlw	228
  6033                           
  6034                           ;RDM_Read.c: 71: if (*PD_Manu >= 0x4D52) {
  6035  0C87  2661  318C         	fcall	PL34	;call to abstracted procedure
  6036  0C89  3052               	movlw	82
  6037  0C8A  1903               	skipnz
  6038  0C8B  0239               	subwf	??_RDM_discovery_CC,w
  6039  0C8C  1C03               	skipc
  6040  0C8D  2C9B               	goto	l1104
  6041                           
  6042                           ;RDM_Read.c: 72: DMX_Flags.RDMcheck++;
  6043                           
  6044                           ;RDM_Read.c: 73: if (*PD_Manu == 0x4D52 && *PD_ID < 0x17C31092) {
  6045  0C8E  263D  318C         	fcall	PL12	;call to abstracted procedure
  6046  0C90  1D03               	btfss	3,2
  6047  0C91  2C9B               	goto	l1104
  6048  0C92  266E  318C         	fcall	PL46	;call to abstracted procedure
  6049  0C94  3092               	movlw	146
  6050  0C95  2653  318C         	fcall	PL30	;call to abstracted procedure
  6051  0C97  1803               	btfsc	3,0
  6052  0C98  2C9B               	goto	l1104
  6053                           
  6054                           ;RDM_Read.c: 74: DMX_Flags.RDMcheck = 0;
  6055  0C99  30FC               	movlw	-4
  6056  0C9A  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6057  0C9B                     l1104:	
  6058                           
  6059                           ;RDM_Read.c: 75: }
  6060                           ;RDM_Read.c: 76: }
  6061                           ;RDM_Read.c: 77: if (DMX_Flags.RDMcheck == 3) {
  6062  0C9B  0877               	movf	_DMX_Flags+1,w	;volatile
  6063  0C9C  3903               	andlw	3
  6064  0C9D  3A03               	xorlw	3
  6065  0C9E  1D03               	skipz
  6066  0C9F  0008               	return
  6067                           
  6068                           ;RDM_Read.c: 78: TxState = TX_DISCOVERY;
  6069  0CA0  0021               	movlb	1	; select bank1
  6070  0CA1  01DC               	clrf	_TxState^(0+128)	;volatile
  6071                           
  6072                           ;RDM_Read.c: 79: TXREG = 0xFE;
  6073  0CA2  30FE               	movlw	254
  6074  0CA3  0023               	movlb	3	; select bank3
  6075  0CA4  009A               	movwf	26	;volatile
  6076                           
  6077                           ;RDM_Read.c: 80: TxByte= &DISCOVERY_RDM_Data.value[23];
  6078  0CA5  30D3               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  6079  0CA6  0021               	movlb	1	; select bank1
  6080  0CA7  00DD               	movwf	_TxByte^(0+128)
  6081                           
  6082                           ;RDM_Read.c: 81: TxCount = 0;
  6083  0CA8  01D0               	clrf	_TxCount^(0+128)
  6084  0CA9  01D1               	clrf	(_TxCount+1)^(0+128)
  6085                           
  6086                           ;RDM_Read.c: 82: LATC3 = 1;
  6087  0CAA  0022               	movlb	2	; select bank2
  6088  0CAB  158E               	bsf	14,3	;volatile
  6089                           
  6090                           ;RDM_Read.c: 83: RCIE = 0;
  6091  0CAC  0021               	movlb	1	; select bank1
  6092  0CAD  1291               	bcf	17,5	;volatile
  6093                           
  6094                           ;RDM_Read.c: 84: TXEN = 1;
  6095  0CAE  0023               	movlb	3	; select bank3
  6096  0CAF  169E               	bsf	30,5	;volatile
  6097                           
  6098                           ;RDM_Read.c: 85: TXIE = 1;
  6099  0CB0  0021               	movlb	1	; select bank1
  6100  0CB1  1611               	bsf	17,4	;volatile
  6101  0CB2  0008               	return
  6102  0CB3                     l1108:	
  6103                           ;RDM_Read.c: 90: case 0x0002:
  6104                           
  6105                           
  6106                           ;RDM_Read.c: 91: DMX_Flags.RDMmute = 1;
  6107  0CB3  1577               	bsf	_DMX_Flags+1,2	;volatile
  6108  0CB4                     L1:	
  6109                           
  6110                           ;RDM_Read.c: 92: TX_RDM_Data.PDL=2;
  6111                           
  6112                           ;RDM_Read.c: 93: PD.u16[20-1] = 0;
  6113  0CB4  267D  318C         	fcall	PL66	;call to abstracted procedure
  6114  0CB6  3000               	movlw	0
  6115  0CB7  3FC0               	movwi [0]fsr1
  6116  0CB8  3FC1               	movwi [1]fsr1
  6117                           
  6118                           ;RDM_Read.c: 94: RDM_TXSTART();
  6119  0CB9  2CCE               	ljmp	l2794
  6120  0CBA                     l1109:	
  6121                           ;RDM_Read.c: 96: case 0x0003:
  6122                           
  6123                           ;RDM_Read.c: 95: break;
  6124                           
  6125                           
  6126                           ;RDM_Read.c: 97: DMX_Flags.RDMmute = 0;
  6127  0CBA  1177               	bcf	_DMX_Flags+1,2	;volatile
  6128  0CBB  2CB4               	goto	L1
  6129  0CBC                     l4066:	
  6130                           ;RDM_Read.c: 98: TX_RDM_Data.PDL=2;
  6131                           
  6132                           
  6133                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6134                           ; Switch size 1, requested type "space"
  6135                           ; Number of cases is 1, Range of values is 0 to 0
  6136                           ; switch strategies available:
  6137                           ; Name         Instructions Cycles
  6138                           ; simple_byte            4     3 (average)
  6139                           ; direct_byte            8     6 (fixed)
  6140                           ; jumptable            260     6 (fixed)
  6141                           ;	Chosen strategy is simple_byte
  6142  0CBC  0022               	movlb	2	; select bank2
  6143  0CBD  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6144  0CBE  3A00               	xorlw	0	; case 0
  6145  0CBF  1903               	skipnz
  6146  0CC0  2CC2               	goto	l4710
  6147  0CC1  2CCD               	goto	l1111
  6148  0CC2                     l4710:	
  6149                           
  6150                           ; Switch size 1, requested type "space"
  6151                           ; Number of cases is 3, Range of values is 1 to 3
  6152                           ; switch strategies available:
  6153                           ; Name         Instructions Cycles
  6154                           ; simple_byte           10     6 (average)
  6155                           ; direct_byte           15     9 (fixed)
  6156                           ; jumptable            263     9 (fixed)
  6157                           ;	Chosen strategy is simple_byte
  6158  0CC2  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6159  0CC3  3A01               	xorlw	1	; case 1
  6160  0CC4  1903               	skipnz
  6161  0CC5  2C5D               	goto	l1100
  6162  0CC6  3A03               	xorlw	3	; case 2
  6163  0CC7  1903               	skipnz
  6164  0CC8  2CB3               	goto	l1108
  6165  0CC9  3A01               	xorlw	1	; case 3
  6166  0CCA  1903               	skipnz
  6167  0CCB  2CBA               	goto	l1109
  6168  0CCC  2CCD               	goto	l1111
  6169  0CCD                     l1111:	
  6170  0CCD  0008               	return
  6171  0CCE                     __end_of_RDM_discovery_CC:	
  6172  0CCE                     __ptext6:	
  6173 ;; *************** function _RDM_TXSTART *****************
  6174 ;; Defined at:
  6175 ;;		line 107 in file "RDM_Read.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 1C/2
  6186 ;;		On exit  : 1F/1
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6189 ;;      Params:         0       0       0       0       0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0
  6191 ;;      Temps:          1       0       0       0       0       0       0       0
  6192 ;;      Totals:         1       0       0       0       0       0       0       0
  6193 ;;Total ram usage:        1 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    3
  6196 ;; This function calls:
  6197 ;;		_RDM_get_checkSum
  6198 ;;		_RDM_tx_TimerBreak
  6199 ;;		_TX_RDM_Response_Set
  6200 ;; This function is called by:
  6201 ;;		_RDM_GET_CC
  6202 ;;		_RDM_SET_CC
  6203 ;;		_RDM_discovery_CC
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _RDM_TXSTART
  6209  0CCE                     _RDM_TXSTART:	
  6210  0CCE                     l2794:	
  6211                           ;incstack = 0
  6212                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6213                           
  6214                           
  6215                           ;RDM_Read.c: 108: TXREG = 0xCC;
  6216  0CCE  30CC               	movlw	204
  6217  0CCF  0023               	movlb	3	; select bank3
  6218  0CD0  009A               	movwf	26	;volatile
  6219                           
  6220                           ;RDM_Read.c: 109: TX_RDM_Response_Set();
  6221  0CD1  24ED  318C         	fcall	_TX_RDM_Response_Set
  6222                           
  6223                           ;RDM_Read.c: 110: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  6224  0CD3  304C               	movlw	low _TX_RDM_Data
  6225  0CD4  0086               	movwf	6
  6226  0CD5  3001               	movlw	high _TX_RDM_Data
  6227  0CD6  2684  318C         	fcall	PL74	;call to abstracted procedure
  6228  0CD8  00F4               	movwf	??_RDM_TXSTART
  6229  0CD9                     u1420:	
  6230  0CD9  0016               	moviw fsr1++
  6231  0CDA  001A               	movwi fsr0++
  6232  0CDB  0BF4               	decfsz	??_RDM_TXSTART,f
  6233  0CDC  2CD9               	goto	u1420
  6234  0CDD  3028               	movlw	40
  6235  0CDE  0020               	movlb	0	; select bank0
  6236  0CDF  00B8               	movwf	RDM_get_checkSum@len
  6237  0CE0  2583  318C         	fcall	_RDM_get_checkSum
  6238  0CE2  0821               	movf	?_RDM_get_checkSum+1,w
  6239  0CE3  0022               	movlb	2	; select bank2
  6240  0CE4  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  6241  0CE5  0020               	movlb	0	; select bank0
  6242  0CE6  0820               	movf	?_RDM_get_checkSum,w
  6243  0CE7  0022               	movlb	2	; select bank2
  6244  0CE8  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  6245                           
  6246                           ;RDM_Read.c: 111: TxState = TX_START;
  6247  0CE9  3001               	movlw	1
  6248  0CEA  0021               	movlb	1	; select bank1
  6249  0CEB  00DC               	movwf	_TxState^(0+128)	;volatile
  6250                           
  6251                           ;RDM_Read.c: 112: RDM_tx_TimerBreak();
  6252  0CEC  2D0C               	ljmp	l2746
  6253  0CED                     __end_of_RDM_TXSTART:	
  6254  0CED                     __ptext7:	
  6255 ;; *************** function _TX_RDM_Response_Set *****************
  6256 ;; Defined at:
  6257 ;;		line 115 in file "RDM_Read.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6266 ;; Tracked objects:
  6267 ;;		On entry : 1F/3
  6268 ;;		On exit  : 1F/2
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6271 ;;      Params:         0       0       0       0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0
  6274 ;;      Totals:         0       0       0       0       0       0       0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    2
  6278 ;; This function calls:
  6279 ;;		Nothing
  6280 ;; This function is called by:
  6281 ;;		_RDM_TXSTART
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           
  6286                           ;psect for function _TX_RDM_Response_Set
  6287  0CED                     _TX_RDM_Response_Set:	
  6288                           
  6289                           ;RDM_Read.c: 116: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  6290                           
  6291                           ;incstack = 0
  6292                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  6293  0CED  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  6294  0CEE  0086               	movwf	6
  6295  0CEF  3001               	movlw	1	; select bank2/3
  6296  0CF0  0087               	movwf	7
  6297  0CF1  3F40               	moviw [0]fsr1
  6298  0CF2  0022               	movlb	2	; select bank2
  6299  0CF3  00DD               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
  6300  0CF4  3F41               	moviw [1]fsr1
  6301  0CF5  00DE               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
  6302  0CF6  3F42               	moviw [2]fsr1
  6303  0CF7  00DF               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
  6304  0CF8  3F43               	moviw [3]fsr1
  6305  0CF9  00E0               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
  6306                           
  6307                           ;RDM_Read.c: 117: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  6308  0CFA  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  6309  0CFB  00E2               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
  6310  0CFC  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  6311  0CFD  00E1               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
  6312                           
  6313                           ;RDM_Read.c: 118: TX_RDM_Data.TN=RX_RDM_Data.TN;
  6314  0CFE  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  6315  0CFF  00D6               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
  6316                           
  6317                           ;RDM_Read.c: 119: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  6318  0D00  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6319  0D01  3E01               	addlw	1
  6320  0D02  00D1               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
  6321                           
  6322                           ;RDM_Read.c: 120: TX_RDM_Data.PID=RX_RDM_Data.PID;
  6323  0D03  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6324  0D04  00D0               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
  6325  0D05  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6326  0D06  00CF               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
  6327                           
  6328                           ;RDM_Read.c: 121: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  6329  0D07  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  6330  0D08  3E18               	addlw	24
  6331  0D09  00E3               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
  6332                           
  6333                           ;RDM_Read.c: 122: TX_RDM_Data.PORT=0x00;
  6334  0D0A  01D5               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
  6335  0D0B  0008               	return
  6336  0D0C                     __end_of_TX_RDM_Response_Set:	
  6337  0D0C                     __ptext8:	
  6338 ;; *************** function _RDM_tx_TimerBreak *****************
  6339 ;; Defined at:
  6340 ;;		line 197 in file "RDM.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg
  6349 ;; Tracked objects:
  6350 ;;		On entry : 1F/1
  6351 ;;		On exit  : 1F/1
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6354 ;;      Params:         0       0       0       0       0       0       0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0
  6357 ;;      Totals:         0       0       0       0       0       0       0       0
  6358 ;;Total ram usage:        0 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    2
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_RDM_TXSTART
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _RDM_tx_TimerBreak
  6370  0D0C                     _RDM_tx_TimerBreak:	
  6371  0D0C                     l2746:	
  6372                           ;incstack = 0
  6373                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  6374                           
  6375                           
  6376                           ;RDM.c: 198: TMR1 = 0xFFA5;
  6377  0D0C  30FF               	movlw	255
  6378  0D0D  0020               	movlb	0	; select bank0
  6379  0D0E  0097               	movwf	23	;volatile
  6380  0D0F  30A5               	movlw	165
  6381  0D10  0096               	movwf	22	;volatile
  6382                           
  6383                           ;RDM.c: 199: TimerState = TIMER_BREAK;
  6384  0D11  3001               	movlw	1
  6385  0D12  0021               	movlb	1	; select bank1
  6386  0D13  00DA               	movwf	_TimerState^(0+128)	;volatile
  6387                           
  6388                           ;RDM.c: 200: LATC4 = 0;
  6389  0D14  0022               	movlb	2	; select bank2
  6390  0D15  120E               	bcf	14,4	;volatile
  6391                           
  6392                           ;RDM.c: 201: LATC3 = 1;
  6393  0D16  158E               	bsf	14,3	;volatile
  6394                           
  6395                           ;RDM.c: 202: TX_PD_Flag=1;
  6396  0D17  0021               	movlb	1	; select bank1
  6397  0D18  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  6398  0D19  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6399                           
  6400                           ;RDM.c: 203: RCIE = 0;
  6401  0D1A  1291               	bcf	17,5	;volatile
  6402  0D1B  0008               	return
  6403  0D1C                     __end_of_RDM_tx_TimerBreak:	
  6404  0D1C                     __ptext2:	
  6405 ;; *************** function _RDM_rx_loop *****************
  6406 ;; Defined at:
  6407 ;;		line 96 in file "RDM.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  2  114[None  ] int 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 1F/1
  6418 ;;		On exit  : 1C/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6421 ;;      Params:         0       0       0       0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0       0
  6423 ;;      Temps:          1       0       0       0       0       0       0       0
  6424 ;;      Totals:         1       0       0       0       0       0       0       0
  6425 ;;Total ram usage:        1 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    5
  6428 ;; This function calls:
  6429 ;;		_RDM_GET_CC
  6430 ;;		_RDM_SET_CC
  6431 ;;		_RDM_discovery_CC
  6432 ;;		_RDM_get_checkSum
  6433 ;; This function is called by:
  6434 ;;		_main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _RDM_rx_loop
  6440  0D1C                     _RDM_rx_loop:	
  6441                           
  6442                           ;RDM.c: 97: if (DMX_Flags.RDMNew == 1) {
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6446  0D1C  1F76               	btfss	_DMX_Flags,6	;volatile
  6447  0D1D  0008               	return
  6448                           
  6449                           ;RDM.c: 98: DMX_Flags.RDMNew = 0;
  6450  0D1E  1376               	bcf	_DMX_Flags,6	;volatile
  6451                           
  6452                           ;RDM.c: 99: DMX_Flags.RDMcheck = 0;
  6453  0D1F  30FC               	movlw	-4
  6454  0D20  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6455                           
  6456                           ;RDM.c: 101: if ((RX_RDM_Data.DUID.M == 0x4D52 || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RD
      +                          M_Data.DUID.ID == 0x17C31092 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  6457  0D21  3052               	movlw	82
  6458  0D22  0022               	movlb	2	; select bank2
  6459  0D23  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6460  0D24  304D               	movlw	77
  6461  0D25  1903               	skipnz
  6462  0D26  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6463  0D27  1903               	btfsc	3,2
  6464  0D28  2D2E               	goto	l4518
  6465  0D29  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6466  0D2A  2D4A               	goto	l721
  6467  0D2B  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6468  0D2C  1D03               	btfss	3,2
  6469  0D2D  2D4A               	goto	l721
  6470  0D2E                     l4518:	
  6471  0D2E  3092               	movlw	146
  6472  0D2F  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6473  0D30  3010               	movlw	16
  6474  0D31  1903               	skipnz
  6475  0D32  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6476  0D33  30C3               	movlw	195
  6477  0D34  1903               	skipnz
  6478  0D35  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6479  0D36  3017               	movlw	23
  6480  0D37  1903               	skipnz
  6481  0D38  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6482  0D39  1903               	btfsc	3,2
  6483  0D3A  2D46               	goto	l4522
  6484  0D3B  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6485  0D3C  2D4A               	goto	l721
  6486  0D3D  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6487  0D3E  1D03               	skipz
  6488  0D3F  2D4A               	goto	l721
  6489  0D40  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6490  0D41  1D03               	skipz
  6491  0D42  2D4A               	goto	l721
  6492  0D43  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6493  0D44  1D03               	btfss	3,2
  6494  0D45  2D4A               	goto	l721
  6495  0D46                     l4522:	
  6496                           
  6497                           ;RDM.c: 102: DMX_Flags.RDMcheck = 1;
  6498  0D46  0877               	movf	_DMX_Flags+1,w	;volatile
  6499  0D47  39FC               	andlw	-4
  6500  0D48  3801               	iorlw	1
  6501  0D49  00F7               	movwf	_DMX_Flags+1	;volatile
  6502  0D4A                     l721:	
  6503                           
  6504                           ;RDM.c: 103: }
  6505                           ;RDM.c: 105: if (DMX_Flags.RDMcheck == 1 && RDM_get_checkSum(RX_RDM_Data,100) == RX_RDM_
      +                          Data.CS) {
  6506  0D4A  0877               	movf	_DMX_Flags+1,w	;volatile
  6507  0D4B  3903               	andlw	3
  6508  0D4C  3A01               	xorlw	1
  6509  0D4D  1D03               	skipz
  6510  0D4E  2D6E               	goto	l726
  6511  0D4F  3020               	movlw	low _RX_RDM_Data
  6512  0D50  0086               	movwf	6
  6513  0D51  3001               	movlw	high _RX_RDM_Data
  6514  0D52  2684  318C         	fcall	PL74	;call to abstracted procedure
  6515  0D54  00F5               	movwf	??_RDM_rx_loop
  6516  0D55                     u3400:	
  6517  0D55  0016               	moviw fsr1++
  6518  0D56  001A               	movwi fsr0++
  6519  0D57  0BF5               	decfsz	??_RDM_rx_loop,f
  6520  0D58  2D55               	goto	u3400
  6521  0D59  3064               	movlw	100
  6522  0D5A  0020               	movlb	0	; select bank0
  6523  0D5B  00B8               	movwf	RDM_get_checkSum@len
  6524  0D5C  2583  318C         	fcall	_RDM_get_checkSum
  6525  0D5E  0022               	movlb	2	; select bank2
  6526  0D5F  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  6527  0D60  0020               	movlb	0	; select bank0
  6528  0D61  0621               	xorwf	?_RDM_get_checkSum+1,w
  6529  0D62  1D03               	skipz
  6530  0D63  2D68               	goto	u3415
  6531  0D64  0022               	movlb	2	; select bank2
  6532  0D65  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  6533  0D66  0020               	movlb	0	; select bank0
  6534  0D67  0620               	xorwf	?_RDM_get_checkSum,w
  6535  0D68                     u3415:	
  6536  0D68  1D03               	skipz
  6537  0D69  2D6E               	goto	l726
  6538                           
  6539                           ;RDM.c: 106: DMX_Flags.RDMcheck = 2;
  6540  0D6A  0877               	movf	_DMX_Flags+1,w	;volatile
  6541  0D6B  39FC               	andlw	-4
  6542  0D6C  3802               	iorlw	2
  6543  0D6D  00F7               	movwf	_DMX_Flags+1	;volatile
  6544  0D6E                     l726:	
  6545                           
  6546                           ;RDM.c: 107: }
  6547                           ;RDM.c: 109: if (DMX_Flags.RDMcheck == 2) {
  6548  0D6E  0877               	movf	_DMX_Flags+1,w	;volatile
  6549  0D6F  3903               	andlw	3
  6550  0D70  3A02               	xorlw	2
  6551  0D71  1D03               	skipz
  6552  0D72  0008               	return
  6553                           
  6554                           ;RDM.c: 119: break;
  6555  0D73  0022               	movlb	2	; select bank2
  6556  0D74  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6557                           
  6558                           ; Switch size 1, requested type "space"
  6559                           ; Number of cases is 3, Range of values is 16 to 48
  6560                           ; switch strategies available:
  6561                           ; Name         Instructions Cycles
  6562                           ; simple_byte           10     6 (average)
  6563                           ; direct_byte           75     9 (fixed)
  6564                           ; jumptable            263     9 (fixed)
  6565                           ;	Chosen strategy is simple_byte
  6566  0D75  3A10               	xorlw	16	; case 16
  6567  0D76  1903               	skipnz
  6568  0D77  2D7F               	goto	l4530
  6569  0D78  3A30               	xorlw	48	; case 32
  6570  0D79  1903               	skipnz
  6571  0D7A  2D80               	goto	l4532
  6572  0D7B  3A10               	xorlw	16	; case 48
  6573  0D7C  1903               	skipnz
  6574  0D7D  2D81               	goto	l4534
  6575  0D7E  2D82               	goto	l733
  6576  0D7F                     l4530:	
  6577                           
  6578                           ;RDM.c: 112: RDM_discovery_CC();
  6579  0D7F  2C5C               	ljmp	l4006
  6580  0D80                     l4532:	
  6581                           ;RDM.c: 113: break;
  6582                           
  6583                           
  6584                           ;RDM.c: 115: RDM_GET_CC();
  6585  0D80  2DB1               	ljmp	l4074
  6586  0D81                     l4534:	
  6587                           ;RDM.c: 116: break;
  6588                           
  6589                           
  6590                           ;RDM.c: 118: RDM_SET_CC();
  6591  0D81  2E24               	ljmp	l2994
  6592  0D82                     l733:	
  6593  0D82  0008               	return
  6594  0D83                     __end_of_RDM_rx_loop:	
  6595  0D83                     __ptext9:	
  6596 ;; *************** function _RDM_get_checkSum *****************
  6597 ;; Defined at:
  6598 ;;		line 126 in file "RDM_Read.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  Data           24    0[BANK0 ] struct .
  6601 ;;  len             1   24[BANK0 ] unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  2    0[BANK0 ] unsigned int 
  6606 ;; Registers used:
  6607 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 1F/0
  6610 ;;		On exit  : 1F/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6613 ;;      Params:         0      25       0       0       0       0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0
  6616 ;;      Totals:         0      25       0       0       0       0       0       0
  6617 ;;Total ram usage:       25 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    2
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_RDM_rx_loop
  6624 ;;		_RDM_TXSTART
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _RDM_get_checkSum
  6630  0D83                     _RDM_get_checkSum:	
  6631                           
  6632                           ;RDM_Read.c: 127: checkSum = 0x00CD;
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  6636  0D83  30CD               	movlw	205
  6637  0D84  0021               	movlb	1	; select bank1
  6638  0D85  00C6               	movwf	_checkSum^(0+128)
  6639  0D86  3017               	movlw	23
  6640  0D87  01C7               	clrf	(_checkSum+1)^(0+128)
  6641                           
  6642                           ;RDM_Read.c: 128: PackCount = 23;
  6643  0D88  00F8               	movwf	_PackCount	;volatile
  6644  0D89                     l2732:	
  6645                           ;RDM_Read.c: 129: while (PackCount > 1) {
  6646                           
  6647  0D89  3002               	movlw	2
  6648  0D8A  0278               	subwf	_PackCount,w	;volatile
  6649  0D8B  1C03               	btfss	3,0
  6650  0D8C  2D97               	goto	l2734
  6651                           
  6652                           ;RDM_Read.c: 130: checkSum += Data.value[PackCount];
  6653  0D8D  0878               	movf	_PackCount,w
  6654  0D8E  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  6655  0D8F  0086               	movwf	6
  6656  0D90  0187               	clrf	7
  6657  0D91  0801               	movf	1,w
  6658  0D92  07C6               	addwf	_checkSum^(0+128),f
  6659  0D93  1803               	skipnc
  6660  0D94  0AC7               	incf	(_checkSum+1)^(0+128),f
  6661                           
  6662                           ;RDM_Read.c: 131: PackCount--;
  6663  0D95  03F8               	decf	_PackCount,f	;volatile
  6664  0D96  2D89               	goto	l2732
  6665  0D97                     l2734:	
  6666                           
  6667                           ;RDM_Read.c: 132: }
  6668                           ;RDM_Read.c: 133: PackCount = len-1;
  6669  0D97  0020               	movlb	0	; select bank0
  6670  0D98  0838               	movf	RDM_get_checkSum@len,w
  6671  0D99  3EFF               	addlw	255
  6672  0D9A  00F8               	movwf	_PackCount	;volatile
  6673                           
  6674                           ;RDM_Read.c: 134: PDCount = len - Data.PDL;
  6675  0D9B  0822               	movf	RDM_get_checkSum@Data+2,w
  6676  0D9C  0238               	subwf	RDM_get_checkSum@len,w
  6677  0D9D  00F9               	movwf	_PDCount
  6678  0D9E                     l2740:	
  6679                           ;RDM_Read.c: 135: while (PackCount >= PDCount) {
  6680                           
  6681  0D9E  0879               	movf	_PDCount,w
  6682  0D9F  0278               	subwf	_PackCount,w	;volatile
  6683  0DA0  1C03               	btfss	3,0
  6684  0DA1  2DA8               	goto	l2742
  6685                           
  6686                           ;RDM_Read.c: 136: checkSum += PD.u8[PDCount];
  6687  0DA2  0879               	movf	_PDCount,w
  6688  0DA3  2732  318C         	fcall	PL68	;call to abstracted procedure
  6689                           
  6690                           ;RDM_Read.c: 137: PDCount++;
  6691  0DA5  27F4  318C         	fcall	PL64	;call to abstracted procedure
  6692  0DA7  2D9E               	goto	l2740
  6693  0DA8                     l2742:	
  6694                           
  6695                           ;RDM_Read.c: 138: }
  6696                           ;RDM_Read.c: 139: return checkSum;
  6697  0DA8  0021               	movlb	1	; select bank1
  6698  0DA9  0847               	movf	(_checkSum+1)^(0+128),w
  6699  0DAA  0020               	movlb	0	; select bank0
  6700  0DAB  00A1               	movwf	?_RDM_get_checkSum+1
  6701  0DAC  0021               	movlb	1	; select bank1
  6702  0DAD  0846               	movf	_checkSum^(0+128),w
  6703  0DAE  0020               	movlb	0	; select bank0
  6704  0DAF  00A0               	movwf	?_RDM_get_checkSum
  6705  0DB0  0008               	return
  6706  0DB1                     __end_of_RDM_get_checkSum:	
  6707  0DB1                     __ptext5:	
  6708 ;; *************** function _RDM_GET_CC *****************
  6709 ;; Defined at:
  6710 ;;		line 15 in file "RDM_Read.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 1C/2
  6721 ;;		On exit  : 1F/1
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6724 ;;      Params:         0       0       0       0       0       0       0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0
  6726 ;;      Temps:          0       2       0       0       0       0       0       0
  6727 ;;      Totals:         0       2       0       0       0       0       0       0
  6728 ;;Total ram usage:        2 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    4
  6731 ;; This function calls:
  6732 ;;		_RDM_TXSTART
  6733 ;; This function is called by:
  6734 ;;		_RDM_rx_loop
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _RDM_GET_CC
  6740  0DB1                     _RDM_GET_CC:	
  6741  0DB1                     l4074:	
  6742                           ;incstack = 0
  6743                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6744                           
  6745                           
  6746                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  6747  0DB1  2E0D               	goto	l4108
  6748  0DB2                     l4076:	
  6749                           
  6750                           ;RDM_Read.c: 18: TX_RDM_Data.PDL=1;
  6751  0DB2  3001               	movlw	1
  6752  0DB3  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6753                           
  6754                           ;RDM_Read.c: 19: PD.u8[40-1] =DMX_Flags.RDMidentify;
  6755  0DB4  0C77               	rrf	_DMX_Flags+1,w	;volatile
  6756  0DB5  0020               	movlb	0	; select bank0
  6757  0DB6  00B9               	movwf	??_RDM_GET_CC
  6758  0DB7  0CB9               	rrf	??_RDM_GET_CC,f
  6759  0DB8  0C39               	rrf	??_RDM_GET_CC,w
  6760  0DB9  3901               	andlw	1
  6761  0DBA  00BA               	movwf	??_RDM_GET_CC+1
  6762  0DBB  30B3               	movlw	179
  6763  0DBC  0086               	movwf	6
  6764  0DBD  3021               	movlw	33
  6765  0DBE  0087               	movwf	7
  6766  0DBF  083A               	movf	??_RDM_GET_CC+1,w
  6767  0DC0  0081               	movwf	1
  6768                           
  6769                           ;RDM_Read.c: 20: break;
  6770  0DC1  2E23               	goto	l4110
  6771  0DC2                     l4080:	
  6772                           
  6773                           ;RDM_Read.c: 22: TX_RDM_Data.PDL=0x13;
  6774  0DC2  3013               	movlw	19
  6775  0DC3  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6776                           
  6777                           ;RDM_Read.c: 23: PD.u16[20-1]=0x0100;
  6778  0DC4  0020               	movlb	0	; select bank0
  6779  0DC5  3001               	movlw	1
  6780  0DC6  01B9               	clrf	??_RDM_GET_CC
  6781  0DC7  00BA               	movwf	??_RDM_GET_CC+1
  6782  0DC8  30B2               	movlw	178
  6783  0DC9  0086               	movwf	6
  6784  0DCA  3021               	movlw	33
  6785  0DCB  0087               	movwf	7
  6786  0DCC  0839               	movf	??_RDM_GET_CC,w
  6787  0DCD  3FC0               	movwi [0]fsr1
  6788  0DCE  083A               	movf	??_RDM_GET_CC+1,w
  6789  0DCF  3FC1               	movwi [1]fsr1
  6790                           
  6791                           ;RDM_Read.c: 24: PD.u16[20-2]=0x0080;
  6792  0DD0  3080               	movlw	128
  6793  0DD1  00B9               	movwf	??_RDM_GET_CC
  6794  0DD2  30B0               	movlw	176
  6795  0DD3  2691  318C         	fcall	PL88	;call to abstracted procedure
  6796                           
  6797                           ;RDM_Read.c: 25: PD.u16[20-3]=0x0004;
  6798  0DD5  3004               	movlw	4
  6799  0DD6  00B9               	movwf	??_RDM_GET_CC
  6800  0DD7  30AE               	movlw	174
  6801  0DD8  2691  318C         	fcall	PL88	;call to abstracted procedure
  6802                           
  6803                           ;RDM_Read.c: 26: PD_ID=&PD.u8[40-10];
  6804  0DDA  3021               	movlw	33
  6805  0DDB  0021               	movlb	1	; select bank1
  6806  0DDC  00CD               	movwf	(_PD_ID+1)^(0+128)
  6807  0DDD  30AA               	movlw	170
  6808  0DDE  00CC               	movwf	_PD_ID^(0+128)
  6809                           
  6810                           ;RDM_Read.c: 27: *PD_ID=1;
  6811  0DDF  0086               	movwf	6
  6812  0DE0  084D               	movf	(_PD_ID+1)^(0+128),w
  6813  0DE1  0087               	movwf	7
  6814  0DE2  3001               	movlw	1
  6815  0DE3  3FC0               	movwi [0]fsr1
  6816  0DE4  3000               	movlw	0
  6817  0DE5  3FC1               	movwi [1]fsr1
  6818  0DE6  3FC2               	movwi [2]fsr1
  6819  0DE7  3FC3               	movwi [3]fsr1
  6820                           
  6821                           ;RDM_Read.c: 28: PD.u16[20-6]=0x04;
  6822  0DE8  3004               	movlw	4
  6823  0DE9  0020               	movlb	0	; select bank0
  6824  0DEA  268A  318C         	fcall	PL80	;call to abstracted procedure
  6825  0DEC  315C               	addfsr 1,28
  6826  0DED  0839               	movf	??_RDM_GET_CC,w
  6827  0DEE  3FC0               	movwi [0]fsr1
  6828  0DEF  083A               	movf	??_RDM_GET_CC+1,w
  6829  0DF0  3FC1               	movwi [1]fsr1
  6830                           
  6831                           ;RDM_Read.c: 29: PD.u16[20-7]=0x01;
  6832  0DF1  3001               	movlw	1
  6833  0DF2  268A  318C         	fcall	PL80	;call to abstracted procedure
  6834  0DF4  315A               	addfsr 1,26
  6835  0DF5  0839               	movf	??_RDM_GET_CC,w
  6836  0DF6  3FC0               	movwi [0]fsr1
  6837  0DF7  083A               	movf	??_RDM_GET_CC+1,w
  6838                           
  6839                           ;RDM_Read.c: 30: PD.u16[20-8]=DMX_Address;
  6840  0DF8  2677  318C         	fcall	PL58	;call to abstracted procedure
  6841  0DFA  3158               	addfsr 1,24
  6842  0DFB  2698  318C         	fcall	PL94	;call to abstracted procedure
  6843                           
  6844                           ;RDM_Read.c: 31: PD.u16[20-9]=0;
  6845  0DFD  2677  318C         	fcall	PL58	;call to abstracted procedure
  6846  0DFF  3000               	movlw	0
  6847  0E00  3156               	addfsr 1,22
  6848  0E01  3FC0               	movwi [0]fsr1
  6849                           
  6850                           ;RDM_Read.c: 32: PD.u8[40-19]=0;
  6851  0E02  2677  318C         	fcall	PL58	;call to abstracted procedure
  6852  0E04  3155               	addfsr 1,21
  6853  0E05  0181               	clrf	1
  6854                           
  6855                           ;RDM_Read.c: 33: break;
  6856  0E06  2E23               	goto	l4110
  6857  0E07                     l4102:	
  6858                           
  6859                           ;RDM_Read.c: 35: TX_RDM_Data.PDL=2;
  6860                           
  6861                           ;RDM_Read.c: 37: PD.u16[20-1]=DMX_Address;
  6862  0E07  267D  318C         	fcall	PL66	;call to abstracted procedure
  6863  0E09  2698  318C         	fcall	PL94	;call to abstracted procedure
  6864  0E0B  3FC1               	movwi [1]fsr1
  6865                           
  6866                           ;RDM_Read.c: 38: break;
  6867  0E0C  2E23               	goto	l4110
  6868  0E0D                     l4108:	
  6869                           
  6870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6871                           ; Switch size 1, requested type "space"
  6872                           ; Number of cases is 2, Range of values is 0 to 16
  6873                           ; switch strategies available:
  6874                           ; Name         Instructions Cycles
  6875                           ; simple_byte            7     4 (average)
  6876                           ; direct_byte           40     6 (fixed)
  6877                           ; jumptable            260     6 (fixed)
  6878                           ;	Chosen strategy is simple_byte
  6879  0E0D  0022               	movlb	2	; select bank2
  6880  0E0E  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6881  0E0F  3A00               	xorlw	0	; case 0
  6882  0E10  1903               	skipnz
  6883  0E11  2E16               	goto	l4714
  6884  0E12  3A10               	xorlw	16	; case 16
  6885  0E13  1903               	skipnz
  6886  0E14  2E1E               	goto	l4716
  6887  0E15  2E23               	goto	l4110
  6888  0E16                     l4714:	
  6889                           
  6890                           ; Switch size 1, requested type "space"
  6891                           ; Number of cases is 2, Range of values is 96 to 240
  6892                           ; switch strategies available:
  6893                           ; Name         Instructions Cycles
  6894                           ; simple_byte            7     4 (average)
  6895                           ; jumptable            263     9 (fixed)
  6896                           ;	Chosen strategy is simple_byte
  6897  0E16  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6898  0E17  3A60               	xorlw	96	; case 96
  6899  0E18  1903               	skipnz
  6900  0E19  2DC2               	goto	l4080
  6901  0E1A  3A90               	xorlw	144	; case 240
  6902  0E1B  1903               	skipnz
  6903  0E1C  2E07               	goto	l4102
  6904  0E1D  2E23               	goto	l4110
  6905  0E1E                     l4716:	
  6906                           
  6907                           ; Switch size 1, requested type "space"
  6908                           ; Number of cases is 1, Range of values is 0 to 0
  6909                           ; switch strategies available:
  6910                           ; Name         Instructions Cycles
  6911                           ; simple_byte            4     3 (average)
  6912                           ; direct_byte            8     6 (fixed)
  6913                           ; jumptable            260     6 (fixed)
  6914                           ;	Chosen strategy is simple_byte
  6915  0E1E  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6916  0E1F  3A00               	xorlw	0	; case 0
  6917  0E20  1903               	skipnz
  6918  0E21  2DB2               	goto	l4076
  6919  0E22  2E23               	goto	l4110
  6920  0E23                     l4110:	
  6921                           
  6922                           ;RDM_Read.c: 40: RDM_TXSTART();
  6923  0E23  2CCE               	ljmp	l2794
  6924  0E24                     __end_of_RDM_GET_CC:	
  6925  0E24                     __ptext4:	
  6926 ;; *************** function _RDM_SET_CC *****************
  6927 ;; Defined at:
  6928 ;;		line 43 in file "RDM_Read.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 1C/2
  6939 ;;		On exit  : 1F/1
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6942 ;;      Params:         0       0       0       0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    4
  6949 ;; This function calls:
  6950 ;;		_RDM_TXSTART
  6951 ;; This function is called by:
  6952 ;;		_RDM_rx_loop
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           
  6957                           ;psect for function _RDM_SET_CC
  6958  0E24                     _RDM_SET_CC:	
  6959  0E24                     l2994:	
  6960                           ;incstack = 0
  6961                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6962                           
  6963                           
  6964                           ;RDM_Read.c: 44: switch (RX_RDM_Data.PID){
  6965  0E24  2E31               	goto	l3002
  6966  0E25                     l2996:	
  6967                           
  6968                           ;RDM_Read.c: 47: DMX_Address=PD.u16[50-1];
  6969  0E25  30EE               	movlw	238
  6970  0E26  0086               	movwf	6
  6971  0E27  3021               	movlw	33
  6972  0E28  0087               	movwf	7
  6973  0E29  3F40               	moviw [0]fsr1
  6974  0E2A  0021               	movlb	1	; select bank1
  6975  0E2B  00ED               	movwf	_DMX_Address^(0+128)
  6976  0E2C  3F41               	moviw [1]fsr1
  6977  0E2D  00EE               	movwf	(_DMX_Address+1)^(0+128)
  6978                           
  6979                           ;RDM_Read.c: 49: TX_RDM_Data.PDL=0;
  6980  0E2E  0022               	movlb	2	; select bank2
  6981  0E2F  01CE               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6982                           
  6983                           ;RDM_Read.c: 51: break;
  6984  0E30  2E3C               	goto	l3004
  6985  0E31                     l3002:	
  6986                           
  6987                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6988                           ; Switch size 1, requested type "space"
  6989                           ; Number of cases is 1, Range of values is 0 to 0
  6990                           ; switch strategies available:
  6991                           ; Name         Instructions Cycles
  6992                           ; simple_byte            4     3 (average)
  6993                           ; direct_byte            8     6 (fixed)
  6994                           ; jumptable            260     6 (fixed)
  6995                           ;	Chosen strategy is simple_byte
  6996  0E31  0022               	movlb	2	; select bank2
  6997  0E32  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6998  0E33  3A00               	xorlw	0	; case 0
  6999  0E34  1903               	skipnz
  7000  0E35  2E37               	goto	l4712
  7001  0E36  2E3C               	goto	l3004
  7002  0E37                     l4712:	
  7003                           
  7004                           ; Switch size 1, requested type "space"
  7005                           ; Number of cases is 1, Range of values is 240 to 240
  7006                           ; switch strategies available:
  7007                           ; Name         Instructions Cycles
  7008                           ; simple_byte            4     3 (average)
  7009                           ; direct_byte           11     9 (fixed)
  7010                           ; jumptable            263     9 (fixed)
  7011                           ;	Chosen strategy is simple_byte
  7012  0E37  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7013  0E38  3AF0               	xorlw	240	; case 240
  7014  0E39  1903               	skipnz
  7015  0E3A  2E25               	goto	l2996
  7016  0E3B  2E3C               	goto	l3004
  7017  0E3C                     l3004:	
  7018                           
  7019                           ;RDM_Read.c: 53: RDM_TXSTART();
  7020  0E3C  2CCE               	ljmp	l2794
  7021  0E3D                     __end_of_RDM_SET_CC:	
  7022  0E3D                     PL12:	
  7023  0E3D  0877               	movf	_DMX_Flags+1,w	;volatile
  7024  0E3E  3903               	andlw	3
  7025  0E3F  00B9               	movwf	??_RDM_discovery_CC
  7026  0E40  0AB9               	incf	??_RDM_discovery_CC,f
  7027  0E41  0877               	movf	_DMX_Flags+1,w	;volatile
  7028  0E42  0639               	xorwf	??_RDM_discovery_CC,w
  7029  0E43  39FC               	andlw	-4
  7030  0E44  0639               	xorwf	??_RDM_discovery_CC,w
  7031  0E45  00F7               	movwf	_DMX_Flags+1	;volatile
  7032  0E46  0021               	movlb	1	; select bank1
  7033  0E47  084E               	movf	_PD_Manu^(0+128),w
  7034  0E48  0086               	movwf	6
  7035  0E49  084F               	movf	(_PD_Manu+1)^(0+128),w
  7036  0E4A  0087               	movwf	7
  7037  0E4B  0016               	moviw fsr1++
  7038  0E4C  3A52               	xorlw	82
  7039  0E4D  0020               	movlb	0	; select bank0
  7040  0E4E  00B9               	movwf	??_RDM_discovery_CC
  7041  0E4F  0016               	moviw fsr1++
  7042  0E50  3A4D               	xorlw	77
  7043  0E51  04B9               	iorwf	??_RDM_discovery_CC,f
  7044  0E52  0008               	return
  7045  0E53                     __end_ofPL12:	
  7046  0E53                     PL30:	
  7047  0E53  0239               	subwf	??_RDM_discovery_CC,w
  7048  0E54  3F41               	moviw [1]fsr1
  7049  0E55  00B9               	movwf	??_RDM_discovery_CC
  7050  0E56  3010               	movlw	16
  7051  0E57  3B39               	subwfb	??_RDM_discovery_CC,w
  7052  0E58  3F42               	moviw [2]fsr1
  7053  0E59  00B9               	movwf	??_RDM_discovery_CC
  7054  0E5A  30C3               	movlw	195
  7055  0E5B  3B39               	subwfb	??_RDM_discovery_CC,w
  7056  0E5C  3F43               	moviw [3]fsr1
  7057  0E5D  00B9               	movwf	??_RDM_discovery_CC
  7058  0E5E  3017               	movlw	23
  7059  0E5F  3B39               	subwfb	??_RDM_discovery_CC,w
  7060  0E60  0008               	return
  7061  0E61                     __end_ofPL30:	
  7062  0E61                     PL34:	
  7063  0E61  00CC               	movwf	_PD_ID^(0+128)
  7064  0E62  084E               	movf	_PD_Manu^(0+128),w
  7065  0E63  0086               	movwf	6
  7066  0E64  084F               	movf	(_PD_Manu+1)^(0+128),w
  7067  0E65  0087               	movwf	7
  7068  0E66  3F40               	moviw [0]fsr1
  7069  0E67  0020               	movlb	0	; select bank0
  7070  0E68  00B9               	movwf	??_RDM_discovery_CC
  7071  0E69  3F41               	moviw [1]fsr1
  7072  0E6A  00BA               	movwf	??_RDM_discovery_CC+1
  7073  0E6B  304D               	movlw	77
  7074  0E6C  023A               	subwf	??_RDM_discovery_CC+1,w
  7075  0E6D  0008               	return
  7076  0E6E                     __end_ofPL34:	
  7077  0E6E                     PL46:	
  7078  0E6E  0021               	movlb	1	; select bank1
  7079  0E6F  084C               	movf	_PD_ID^(0+128),w
  7080  0E70  0086               	movwf	6
  7081  0E71  084D               	movf	(_PD_ID+1)^(0+128),w
  7082  0E72  0087               	movwf	7
  7083  0E73  3F40               	moviw [0]fsr1
  7084  0E74  0020               	movlb	0	; select bank0
  7085  0E75  00B9               	movwf	??_RDM_discovery_CC
  7086  0E76  0008               	return
  7087  0E77                     __end_ofPL46:	
  7088  0E77                     PL58:	
  7089  0E77  3FC1               	movwi [1]fsr1
  7090  0E78  308C               	movlw	140
  7091  0E79  0086               	movwf	6
  7092  0E7A  3021               	movlw	33
  7093  0E7B  0087               	movwf	7
  7094  0E7C  0008               	return
  7095  0E7D                     __end_ofPL58:	
  7096  0E7D                     PL66:	
  7097  0E7D  3002               	movlw	2
  7098  0E7E  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  7099  0E7F  30B2               	movlw	178
  7100  0E80  0086               	movwf	6
  7101  0E81  3021               	movlw	33
  7102  0E82  0087               	movwf	7
  7103  0E83  0008               	return
  7104  0E84                     __end_ofPL66:	
  7105  0E84                     PL74:	
  7106  0E84  0087               	movwf	7
  7107  0E85  3020               	movlw	low RDM_get_checkSum@Data
  7108  0E86  0084               	movwf	4
  7109  0E87  3000               	movlw	high RDM_get_checkSum@Data
  7110  0E88  0085               	movwf	5
  7111  0E89  3418               	retlw	24
  7112  0E8A                     __end_ofPL74:	
  7113  0E8A                     PL80:	
  7114  0E8A  00B9               	movwf	??_RDM_GET_CC
  7115  0E8B  308C               	movlw	140
  7116  0E8C  01BA               	clrf	??_RDM_GET_CC+1
  7117  0E8D  0086               	movwf	6
  7118  0E8E  3021               	movlw	33
  7119  0E8F  0087               	movwf	7
  7120  0E90  0008               	return
  7121  0E91                     __end_ofPL80:	
  7122  0E91                     PL88:	
  7123  0E91  01BA               	clrf	??_RDM_GET_CC+1
  7124  0E92  0086               	movwf	6
  7125  0E93  0839               	movf	??_RDM_GET_CC,w
  7126  0E94  3FC0               	movwi [0]fsr1
  7127  0E95  083A               	movf	??_RDM_GET_CC+1,w
  7128  0E96  3FC1               	movwi [1]fsr1
  7129  0E97  0008               	return
  7130  0E98                     __end_ofPL88:	
  7131  0E98                     PL94:	
  7132  0E98  0021               	movlb	1	; select bank1
  7133  0E99  086D               	movf	_DMX_Address^(0+128),w
  7134  0E9A  3FC0               	movwi [0]fsr1
  7135  0E9B  086E               	movf	(_DMX_Address+1)^(0+128),w
  7136  0E9C  0008               	return
  7137  0E9D                     __end_ofPL94:	
  7138  0E9D                     __ptext28:	
  7139 ;; *************** function _RDM_tx_interrupt *****************
  7140 ;; Defined at:
  7141 ;;		line 125 in file "RDM.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  2  122[None  ] int 
  7148 ;; Registers used:
  7149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 1E/0
  7152 ;;		On exit  : 1C/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7155 ;;      Params:         0       0       0       0       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0
  7157 ;;      Temps:          4       0       0       0       0       0       0       0
  7158 ;;      Totals:         4       0       0       0       0       0       0       0
  7159 ;;Total ram usage:        4 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_isr
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _RDM_tx_interrupt
  7170  0E9D                     _RDM_tx_interrupt:	
  7171                           
  7172                           ;RDM.c: 126: if (TXIE && TXIF) {
  7173                           
  7174                           ;incstack = 0
  7175                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  7176  0E9D  0021               	movlb	1	; select bank1
  7177  0E9E  1E11               	btfss	17,4	;volatile
  7178  0E9F  0008               	return
  7179  0EA0  0020               	movlb	0	; select bank0
  7180  0EA1  1E11               	btfss	17,4	;volatile
  7181  0EA2  0008               	return
  7182                           
  7183                           ;RDM.c: 128: if(send!=0){
  7184  0EA3  0021               	movlb	1	; select bank1
  7185  0EA4  085E               	movf	_send^(0+128),w
  7186  0EA5  1903               	btfsc	3,2
  7187  0EA6  2EAD               	goto	i1l737
  7188                           
  7189                           ;RDM.c: 129: TXREG = send;
  7190  0EA7  085E               	movf	_send^(0+128),w
  7191  0EA8  0023               	movlb	3	; select bank3
  7192  0EA9  009A               	movwf	26	;volatile
  7193                           
  7194                           ;RDM.c: 130: send=0;
  7195  0EAA  0021               	movlb	1	; select bank1
  7196  0EAB  01DE               	clrf	_send^(0+128)
  7197                           
  7198                           ;RDM.c: 131: }else{
  7199  0EAC  2F18               	goto	i1l3726
  7200  0EAD                     i1l737:	
  7201                           
  7202                           ;RDM.c: 133: TXIE = 0;
  7203  0EAD  1211               	bcf	17,4	;volatile
  7204  0EAE  2F18               	goto	i1l3726
  7205  0EAF                     i1l3680:	
  7206                           
  7207                           ;RDM.c: 138: if(TX_PD_Flag==1){
  7208  0EAF  0348               	decf	_TX_PD_Flag^(0+128),w	;volatile
  7209  0EB0  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7210  0EB1  1D03               	btfss	3,2
  7211  0EB2  2EB9               	goto	i1l3686
  7212                           
  7213                           ;RDM.c: 139: TX_PD_Flag=0;
  7214  0EB3  01C8               	clrf	_TX_PD_Flag^(0+128)	;volatile
  7215  0EB4  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7216                           
  7217                           ;RDM.c: 140: TXREG = 0xCC;
  7218  0EB5  30CC               	movlw	204
  7219  0EB6  0023               	movlb	3	; select bank3
  7220  0EB7  009A               	movwf	26	;volatile
  7221                           
  7222                           ;RDM.c: 141: }else{
  7223  0EB8  0008               	return
  7224  0EB9                     i1l3686:	
  7225                           
  7226                           ;RDM.c: 142: TXREG = 0x01;
  7227  0EB9  3001               	movlw	1
  7228  0EBA  0023               	movlb	3	; select bank3
  7229  0EBB  009A               	movwf	26	;volatile
  7230                           
  7231                           ;RDM.c: 143: TxByte = &TX_RDM_Data.value[23];
  7232  0EBC  3063               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
  7233  0EBD  0021               	movlb	1	; select bank1
  7234  0EBE  00DD               	movwf	_TxByte^(0+128)
  7235  0EBF  3002               	movlw	2
  7236                           
  7237                           ;RDM.c: 144: TxCount = 0;
  7238  0EC0  01D0               	clrf	_TxCount^(0+128)
  7239  0EC1  01D1               	clrf	(_TxCount+1)^(0+128)
  7240                           
  7241                           ;RDM.c: 145: TxState = TX_DATA;
  7242  0EC2  00DC               	movwf	_TxState^(0+128)	;volatile
  7243  0EC3  0008               	return
  7244  0EC4                     i1l3692:	
  7245                           
  7246                           ;RDM.c: 153: if (TxCount <= 24) {
  7247  0EC4  3000               	movlw	0
  7248  0EC5  0251               	subwf	(_TxCount+1)^(0+128),w
  7249  0EC6  3019               	movlw	25
  7250  0EC7  1903               	skipnz
  7251  0EC8  0250               	subwf	_TxCount^(0+128),w
  7252  0EC9  1803               	skipnc
  7253  0ECA  2ECF               	goto	i1l745
  7254                           
  7255                           ;RDM.c: 155: TXREG = *TxByte;
  7256                           
  7257                           ;RDM.c: 156: TxByte--;
  7258                           
  7259                           ;RDM.c: 157: TxCount++;
  7260  0ECB  2727               	fcall	PL42	;call to abstracted procedure
  7261  0ECC  1903               	skipnz
  7262  0ECD  0AD1               	incf	(_TxCount+1)^(0+128),f
  7263                           
  7264                           ;RDM.c: 158: }else{
  7265  0ECE  0008               	return
  7266  0ECF                     i1l745:	
  7267                           
  7268                           ;RDM.c: 159: RCIE = 1;
  7269  0ECF  1691               	bsf	17,5	;volatile
  7270                           
  7271                           ;RDM.c: 160: LATC4 = 1;
  7272  0ED0  0022               	movlb	2	; select bank2
  7273  0ED1  160E               	bsf	14,4	;volatile
  7274                           
  7275                           ;RDM.c: 161: TXEN = 0;
  7276  0ED2  0023               	movlb	3	; select bank3
  7277  0ED3  129E               	bcf	30,5	;volatile
  7278                           
  7279                           ;RDM.c: 162: TXIE = 0;
  7280  0ED4  0021               	movlb	1	; select bank1
  7281  0ED5  1211               	bcf	17,4	;volatile
  7282                           
  7283                           ;RDM.c: 163: LATC3=0;
  7284  0ED6  0022               	movlb	2	; select bank2
  7285  0ED7  118E               	bcf	14,3	;volatile
  7286  0ED8  0008               	return
  7287  0ED9                     i1l3700:	
  7288                           
  7289                           ;RDM.c: 167: if (TxCount <= 24) {
  7290  0ED9  3000               	movlw	0
  7291  0EDA  0251               	subwf	(_TxCount+1)^(0+128),w
  7292  0EDB  3019               	movlw	25
  7293  0EDC  1903               	skipnz
  7294  0EDD  0250               	subwf	_TxCount^(0+128),w
  7295  0EDE  1803               	skipnc
  7296  0EDF  2ECF               	goto	i1l745
  7297                           
  7298                           ;RDM.c: 169: TXREG = *TxByte;
  7299                           
  7300                           ;RDM.c: 170: TxByte--;
  7301                           
  7302                           ;RDM.c: 171: TxCount++;
  7303  0EE0  2727  318C         	fcall	PL42	;call to abstracted procedure
  7304  0EE2  1903               	skipnz
  7305  0EE3  0AD1               	incf	(_TxCount+1)^(0+128),f
  7306                           
  7307                           ;RDM.c: 172: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  7308  0EE4  3016               	movlw	22
  7309  0EE5  0650               	xorwf	_TxCount^(0+128),w
  7310  0EE6  0451               	iorwf	(_TxCount+1)^(0+128),w
  7311  0EE7  1D03               	btfss	3,2
  7312  0EE8  0008               	return
  7313  0EE9  0022               	movlb	2	; select bank2
  7314  0EEA  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7315  0EEB  1903               	btfsc	3,2
  7316  0EEC  0008               	return
  7317  0EED  0021               	movlb	1	; select bank1
  7318  0EEE  0848               	movf	_TX_PD_Flag^(0+128),w	;volatile
  7319  0EEF  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7320  0EF0  1D03               	btfss	3,2
  7321  0EF1  0008               	return
  7322                           
  7323                           ;RDM.c: 173: TxState = TX_RDM_PD;
  7324  0EF2  3003               	movlw	3
  7325  0EF3  00DC               	movwf	_TxState^(0+128)	;volatile
  7326                           
  7327                           ;RDM.c: 174: TX_PDCount = 40-1;
  7328  0EF4  3027               	movlw	39
  7329  0EF5  00DB               	movwf	_TX_PDCount^(0+128)
  7330  0EF6  0008               	return
  7331  0EF7                     i1l3716:	
  7332                           
  7333                           ;RDM.c: 185: TXREG = PD.u8[TX_PDCount];
  7334  0EF7  085B               	movf	_TX_PDCount^(0+128),w
  7335  0EF8  2732  318C         	fcall	PL68	;call to abstracted procedure
  7336  0EFA  0801               	movf	1,w
  7337  0EFB  0023               	movlb	3	; select bank3
  7338  0EFC  009A               	movwf	26	;volatile
  7339                           
  7340                           ;RDM.c: 186: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  7341  0EFD  01F1               	clrf	??_RDM_tx_interrupt+1
  7342  0EFE  0022               	movlb	2	; select bank2
  7343  0EFF  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7344  0F00  3C28               	sublw	40
  7345  0F01  00F0               	movwf	??_RDM_tx_interrupt
  7346  0F02  1C03               	skipc
  7347  0F03  03F1               	decf	??_RDM_tx_interrupt+1,f
  7348  0F04  0021               	movlb	1	; select bank1
  7349  0F05  085B               	movf	_TX_PDCount^(0+128),w
  7350  0F06  00F2               	movwf	??_RDM_tx_interrupt+2
  7351  0F07  01F3               	clrf	??_RDM_tx_interrupt+3
  7352  0F08  0871               	movf	??_RDM_tx_interrupt+1,w
  7353  0F09  0673               	xorwf	??_RDM_tx_interrupt+3,w
  7354  0F0A  1D03               	skipz
  7355  0F0B  2F0E               	goto	u262_25
  7356  0F0C  0870               	movf	??_RDM_tx_interrupt,w
  7357  0F0D  0672               	xorwf	??_RDM_tx_interrupt+2,w
  7358  0F0E                     u262_25:	
  7359  0F0E  1D03               	skipz
  7360  0F0F  2F16               	goto	i1l3722
  7361                           
  7362                           ;RDM.c: 187: TxState = TX_DATA;
  7363  0F10  3002               	movlw	2
  7364  0F11  00DC               	movwf	_TxState^(0+128)	;volatile
  7365                           
  7366                           ;RDM.c: 188: TX_PD_Flag = 1;
  7367  0F12  3001               	movlw	1
  7368  0F13  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  7369  0F14  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7370                           
  7371                           ;RDM.c: 189: }else{
  7372  0F15  0008               	return
  7373  0F16                     i1l3722:	
  7374                           
  7375                           ;RDM.c: 190: TX_PDCount--;
  7376  0F16  03DB               	decf	_TX_PDCount^(0+128),f
  7377  0F17  0008               	return
  7378  0F18                     i1l3726:	
  7379  0F18  085C               	movf	_TxState^(0+128),w	;volatile
  7380                           
  7381                           ; Switch size 1, requested type "space"
  7382                           ; Number of cases is 4, Range of values is 0 to 3
  7383                           ; switch strategies available:
  7384                           ; Name         Instructions Cycles
  7385                           ; simple_byte           13     7 (average)
  7386                           ; direct_byte           14     6 (fixed)
  7387                           ; jumptable            260     6 (fixed)
  7388                           ;	Chosen strategy is simple_byte
  7389  0F19  3A00               	xorlw	0	; case 0
  7390  0F1A  1903               	skipnz
  7391  0F1B  2EC4               	goto	i1l3692
  7392  0F1C  3A01               	xorlw	1	; case 1
  7393  0F1D  1903               	skipnz
  7394  0F1E  2EAF               	goto	i1l3680
  7395  0F1F  3A03               	xorlw	3	; case 2
  7396  0F20  1903               	skipnz
  7397  0F21  2ED9               	goto	i1l3700
  7398  0F22  3A01               	xorlw	1	; case 3
  7399  0F23  1903               	skipnz
  7400  0F24  2EF7               	goto	i1l3716
  7401  0F25  2F26               	goto	i1l754
  7402  0F26                     i1l754:	
  7403  0F26  0008               	return
  7404  0F27                     __end_of_RDM_tx_interrupt:	
  7405  0F27                     PL42:	
  7406  0F27  085D               	movf	_TxByte^(0+128),w
  7407  0F28  0086               	movwf	6
  7408  0F29  3001               	movlw	1	; select bank2/3
  7409  0F2A  0087               	movwf	7
  7410  0F2B  0801               	movf	1,w
  7411  0F2C  0023               	movlb	3	; select bank3
  7412  0F2D  009A               	movwf	26	;volatile
  7413  0F2E  0021               	movlb	1	; select bank1
  7414  0F2F  03DD               	decf	_TxByte^(0+128),f
  7415  0F30  0AD0               	incf	_TxCount^(0+128),f
  7416  0F31  0008               	return
  7417  0F32                     __end_ofPL42:	
  7418  0F32                     PL68:	
  7419  0F32  3E8C               	addlw	140
  7420  0F33  0086               	movwf	6
  7421  0F34  3021               	movlw	33
  7422  0F35  0187               	clrf	7
  7423  0F36  3D87               	addwfc	7,f
  7424  0F37  0008               	return
  7425  0F38                     __end_ofPL68:	
  7426  0F38                     __ptext10:	
  7427 ;; *************** function _RDM_init *****************
  7428 ;; Defined at:
  7429 ;;		line 16 in file "RDM.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  2  108[None  ] int 
  7436 ;; Registers used:
  7437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : B1F/0
  7440 ;;		On exit  : 1C/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7443 ;;      Params:         0       0       0       0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0
  7445 ;;      Temps:          0       2       0       0       0       0       0       0
  7446 ;;      Totals:         0       2       0       0       0       0       0       0
  7447 ;;Total ram usage:        2 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    3
  7450 ;; This function calls:
  7451 ;;		___bmul
  7452 ;; This function is called by:
  7453 ;;		_main
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _RDM_init
  7459  0F38                     _RDM_init:	
  7460                           
  7461                           ;RDM.c: 17: TimerState = 0;
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7465  0F38  0021               	movlb	1	; select bank1
  7466  0F39  01DA               	clrf	_TimerState^(0+128)	;volatile
  7467                           
  7468                           ;RDM.c: 19: Timer.HR_Count = 0;
  7469  0F3A  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  7470                           
  7471                           ;RDM.c: 20: Timer.MIN_Count = 0;
  7472  0F3B  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7473                           
  7474                           ;RDM.c: 21: Timer.SEC_Count = 0;
  7475  0F3C  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7476                           
  7477                           ;RDM.c: 22: Timer.flags = 0;
  7478  0F3D  01B8               	clrf	_Timer^(0+128)	;volatile
  7479                           
  7480                           ;RDM.c: 25: TMR1 = 0xFE0B;
  7481  0F3E  318B  2378  318C   	fcall	PL102	;call to abstracted procedure
  7482                           
  7483                           ;RDM.c: 26: TMR1IF = 0;
  7484  0F41  1011               	bcf	17,0	;volatile
  7485                           
  7486                           ;RDM.c: 27: TMR1IE = 1;
  7487  0F42  0021               	movlb	1	; select bank1
  7488  0F43  1411               	bsf	17,0	;volatile
  7489                           
  7490                           ;RDM.c: 28: PEIE = 1;
  7491  0F44  170B               	bsf	11,6	;volatile
  7492                           
  7493                           ;RDM.c: 31: LATC4 = 1;
  7494  0F45  0022               	movlb	2	; select bank2
  7495  0F46  160E               	bsf	14,4	;volatile
  7496                           
  7497                           ;RDM.c: 32: TRISC4 = 0;
  7498  0F47  0021               	movlb	1	; select bank1
  7499  0F48  120E               	bcf	14,4	;volatile
  7500                           
  7501                           ;RDM.c: 33: TXEN = 1;
  7502  0F49  0023               	movlb	3	; select bank3
  7503  0F4A  169E               	bsf	30,5	;volatile
  7504                           
  7505                           ;RDM.c: 34: SPEN = 1;
  7506  0F4B  179D               	bsf	29,7	;volatile
  7507                           
  7508                           ;RDM.c: 35: SYNC = 0;
  7509  0F4C  121E               	bcf	30,4	;volatile
  7510                           
  7511                           ;RDM.c: 36: RC4PPS = 0b1001;
  7512  0F4D  3009               	movlw	9
  7513  0F4E  003D               	movlb	29	; select bank29
  7514  0F4F  00A4               	movwf	36	;volatile
  7515                           
  7516                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  7517  0F50  304C               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7518  0F51  0021               	movlb	1	; select bank1
  7519  0F52  00DD               	movwf	_TxByte^(0+128)
  7520                           
  7521                           ;RDM.c: 39: TX9 = TX9D = 1;
  7522  0F53  0023               	movlb	3	; select bank3
  7523  0F54  141E               	bsf	30,0	;volatile
  7524  0F55  1C1E               	btfss	30,0	;volatile
  7525  0F56  2F5A               	goto	u3130
  7526  0F57  0023               	movlb	3	; select bank3
  7527  0F58  171E               	bsf	30,6	;volatile
  7528  0F59  2F5C               	goto	l4334
  7529  0F5A                     u3130:	
  7530  0F5A  0023               	movlb	3	; select bank3
  7531  0F5B  131E               	bcf	30,6	;volatile
  7532  0F5C                     l4334:	
  7533                           
  7534                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  7535  0F5C  1177               	bcf	_DMX_Flags+1,2	;volatile
  7536                           
  7537                           ;RDM.c: 44: DMX_Flags.RDMidentify = 0;
  7538  0F5D  11F7               	bcf	_DMX_Flags+1,3	;volatile
  7539                           
  7540                           ;RDM.c: 59: DMX_Address=1;
  7541  0F5E  0021               	movlb	1	; select bank1
  7542  0F5F  3017               	movlw	23
  7543  0F60  01ED               	clrf	_DMX_Address^(0+128)
  7544  0F61  0AED               	incf	_DMX_Address^(0+128),f
  7545  0F62  01EE               	clrf	(_DMX_Address+1)^(0+128)
  7546                           
  7547                           ;RDM.c: 64: PDCount = 23;
  7548  0F63  00F9               	movwf	_PDCount
  7549  0F64                     l4346:	
  7550                           ;RDM.c: 65: while (PDCount >= 17) {
  7551                           
  7552  0F64  3011               	movlw	17
  7553  0F65  0279               	subwf	_PDCount,w
  7554  0F66  1C03               	btfss	3,0
  7555  0F67  2F71               	goto	l4348
  7556                           
  7557                           ;RDM.c: 66: DISCOVERY_RDM_Data.value[PDCount] = 0xFE;
  7558  0F68  0879               	movf	_PDCount,w
  7559  0F69  3EBC               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  7560  0F6A  0086               	movwf	6
  7561  0F6B  3001               	movlw	1	; select bank3/4
  7562  0F6C  0087               	movwf	7
  7563  0F6D  30FE               	movlw	254
  7564  0F6E  0081               	movwf	1
  7565                           
  7566                           ;RDM.c: 67: PDCount--;
  7567  0F6F  03F9               	decf	_PDCount,f
  7568  0F70  2F64               	goto	l4346
  7569  0F71                     l4348:	
  7570                           
  7571                           ;RDM.c: 68: }
  7572                           ;RDM.c: 69: DISCOVERY_RDM_Data.value[16] = 0xAA;
  7573  0F71  30AA               	movlw	170
  7574  0F72  0023               	movlb	3	; select bank3
  7575  0F73  00CC               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)	;volatile
  7576                           
  7577                           ;RDM.c: 70: PDCount = 0;
  7578  0F74  01F9               	clrf	_PDCount
  7579                           
  7580                           ;RDM.c: 71: checkSum = 0;
  7581  0F75  0021               	movlb	1	; select bank1
  7582  0F76  01C6               	clrf	_checkSum^(0+128)
  7583  0F77  01C7               	clrf	(_checkSum+1)^(0+128)
  7584  0F78                     l4362:	
  7585                           ;RDM.c: 72: while (PDCount < 6) {
  7586                           
  7587  0F78  3006               	movlw	6
  7588  0F79  0279               	subwf	_PDCount,w
  7589  0F7A  1803               	btfsc	3,0
  7590  0F7B  2FA6               	goto	l4364
  7591                           
  7592                           ;RDM.c: 73: DISCOVERY_RDM_Data.value[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  7593  0F7C  30FE               	movlw	254
  7594  0F7D  00F4               	movwf	___bmul@multiplicand
  7595  0F7E  0879               	movf	_PDCount,w
  7596  0F7F  27DB  318C         	fcall	___bmul
  7597  0F81  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7598  0F82  27E8  318C         	fcall	PL40	;call to abstracted procedure
  7599  0F84  38AA               	iorlw	170
  7600                           
  7601                           ;RDM.c: 74: DISCOVERY_RDM_Data.value[14 - PDCount * 2] = UID[PDCount] | 0x55;
  7602  0F85  27FB  318C         	fcall	PL110	;call to abstracted procedure
  7603  0F87  27DB  318C         	fcall	___bmul
  7604  0F89  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7605  0F8A  27E8  318C         	fcall	PL40	;call to abstracted procedure
  7606  0F8C  3855               	iorlw	85
  7607                           
  7608                           ;RDM.c: 75: checkSum += DISCOVERY_RDM_Data.value[15 - PDCount * 2];
  7609  0F8D  27FB  318C         	fcall	PL110	;call to abstracted procedure
  7610  0F8F  27DB  318C         	fcall	___bmul
  7611  0F91  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7612  0F92  0086               	movwf	6
  7613  0F93  3001               	movlw	1	; select bank3/4
  7614  0F94  0087               	movwf	7
  7615  0F95  0801               	movf	1,w
  7616  0F96  0021               	movlb	1	; select bank1
  7617  0F97  07C6               	addwf	_checkSum^(0+128),f
  7618  0F98  1803               	skipnc
  7619  0F99  0AC7               	incf	(_checkSum+1)^(0+128),f
  7620                           
  7621                           ;RDM.c: 76: checkSum += DISCOVERY_RDM_Data.value[14 - PDCount * 2];
  7622  0F9A  30FE               	movlw	254
  7623  0F9B  00F4               	movwf	___bmul@multiplicand
  7624  0F9C  0879               	movf	_PDCount,w
  7625  0F9D  27DB  318C         	fcall	___bmul
  7626  0F9F  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7627  0FA0  0086               	movwf	6
  7628  0FA1  3001               	movlw	1	; select bank3/4
  7629  0FA2  0087               	movwf	7
  7630                           
  7631                           ;RDM.c: 77: PDCount++;
  7632  0FA3  27F4  318C         	fcall	PL64	;call to abstracted procedure
  7633  0FA5  2F78               	goto	l4362
  7634  0FA6                     l4364:	
  7635                           
  7636                           ;RDM.c: 78: }
  7637                           ;RDM.c: 79: TX_RDM_Data.CS = checkSum;
  7638  0FA6  0847               	movf	(_checkSum+1)^(0+128),w
  7639  0FA7  0022               	movlb	2	; select bank2
  7640  0FA8  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7641  0FA9  0021               	movlb	1	; select bank1
  7642  0FAA  0846               	movf	_checkSum^(0+128),w
  7643  0FAB  0022               	movlb	2	; select bank2
  7644  0FAC  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7645                           
  7646                           ;RDM.c: 80: PDCount = 0;
  7647  0FAD  01F9               	clrf	_PDCount
  7648                           
  7649                           ;RDM.c: 81: DISCOVERY_RDM_Data.value[3] = TX_RDM_Data.CSH | 0xAA;
  7650  0FAE  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7651  0FAF  38AA               	iorlw	170
  7652  0FB0  0023               	movlb	3	; select bank3
  7653  0FB1  00BF               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)	;volatile
  7654                           
  7655                           ;RDM.c: 82: DISCOVERY_RDM_Data.value[2] = TX_RDM_Data.CSH | 0x55;
  7656  0FB2  0022               	movlb	2	; select bank2
  7657  0FB3  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7658  0FB4  3855               	iorlw	85
  7659  0FB5  0023               	movlb	3	; select bank3
  7660  0FB6  00BE               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)	;volatile
  7661                           
  7662                           ;RDM.c: 83: DISCOVERY_RDM_Data.value[1] = TX_RDM_Data.CSL | 0xAA;
  7663  0FB7  0022               	movlb	2	; select bank2
  7664  0FB8  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7665  0FB9  38AA               	iorlw	170
  7666  0FBA  0023               	movlb	3	; select bank3
  7667  0FBB  00BD               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)	;volatile
  7668                           
  7669                           ;RDM.c: 84: DISCOVERY_RDM_Data.value[0] = TX_RDM_Data.CSL | 0x55;
  7670  0FBC  0022               	movlb	2	; select bank2
  7671  0FBD  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7672  0FBE  3855               	iorlw	85
  7673  0FBF  0023               	movlb	3	; select bank3
  7674  0FC0  00BC               	movwf	_DISCOVERY_RDM_Data^(0+384)	;volatile
  7675                           
  7676                           ;RDM.c: 86: PDCount = 16;
  7677  0FC1  3010               	movlw	16
  7678  0FC2  00F9               	movwf	_PDCount
  7679  0FC3                     l4374:	
  7680                           ;RDM.c: 87: while (PDCount >= 11) {
  7681                           
  7682  0FC3  300B               	movlw	11
  7683  0FC4  0279               	subwf	_PDCount,w
  7684  0FC5  1C03               	btfss	3,0
  7685  0FC6  0008               	return
  7686                           
  7687                           ;RDM.c: 88: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  7688  0FC7  0879               	movf	_PDCount,w
  7689  0FC8  3E4C               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7690  0FC9  0086               	movwf	6
  7691  0FCA  3001               	movlw	1	; select bank2/3
  7692  0FCB  0087               	movwf	7
  7693  0FCC  3089               	movlw	high ((_UID| (0+32768)+16))
  7694  0FCD  0020               	movlb	0	; select bank0
  7695  0FCE  00A3               	movwf	??_RDM_init+1
  7696  0FCF  0879               	movf	_PDCount,w
  7697  0FD0  3CDC               	sublw	low ((_UID| (0+32768)+16))
  7698  0FD1  00A2               	movwf	??_RDM_init
  7699  0FD2  1C03               	skipc
  7700  0FD3  03A3               	decf	??_RDM_init+1,f
  7701  0FD4  0084               	movwf	4
  7702  0FD5  0823               	movf	??_RDM_init+1,w
  7703  0FD6  0085               	movwf	5
  7704  0FD7  0800               	movf	0,w	;code access
  7705  0FD8  0081               	movwf	1
  7706                           
  7707                           ;RDM.c: 89: PDCount--;
  7708  0FD9  03F9               	decf	_PDCount,f
  7709  0FDA  2FC3               	goto	l4374
  7710  0FDB                     __end_of_RDM_init:	
  7711  0FDB                     __ptext11:	
  7712 ;; *************** function ___bmul *****************
  7713 ;; Defined at:
  7714 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  multiplier      1    wreg     unsigned char 
  7717 ;;  multiplicand    1    4[COMMON] unsigned char 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  multiplier      1    1[BANK0 ] unsigned char 
  7720 ;;  product         1    0[BANK0 ] unsigned char 
  7721 ;; Return value:  Size  Location     Type
  7722 ;;                  1    wreg      unsigned char 
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0
  7725 ;; Tracked objects:
  7726 ;;		On entry : 1E/1
  7727 ;;		On exit  : 1F/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7730 ;;      Params:         1       0       0       0       0       0       0       0
  7731 ;;      Locals:         0       2       0       0       0       0       0       0
  7732 ;;      Temps:          0       0       0       0       0       0       0       0
  7733 ;;      Totals:         1       2       0       0       0       0       0       0
  7734 ;;Total ram usage:        3 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    2
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_RDM_init
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           
  7745                           ;psect for function ___bmul
  7746  0FDB                     ___bmul:	
  7747                           
  7748                           ;incstack = 0
  7749                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7750                           ;___bmul@multiplier stored from wreg
  7751  0FDB  0020               	movlb	0	; select bank0
  7752  0FDC  00A1               	movwf	___bmul@multiplier
  7753  0FDD  01A0               	clrf	___bmul@product
  7754  0FDE                     l4122:	
  7755  0FDE  0874               	movf	___bmul@multiplicand,w
  7756  0FDF  1821               	btfsc	___bmul@multiplier,0
  7757  0FE0  07A0               	addwf	___bmul@product,f
  7758  0FE1  35F4               	lslf	___bmul@multiplicand,f
  7759  0FE2  36A1               	lsrf	___bmul@multiplier,f
  7760  0FE3  0821               	movf	___bmul@multiplier,w
  7761  0FE4  1D03               	btfss	3,2
  7762  0FE5  2FDE               	goto	l4122
  7763  0FE6  0820               	movf	___bmul@product,w
  7764  0FE7  0008               	return
  7765  0FE8                     __end_of___bmul:	
  7766  0FE8                     PL40:	
  7767  0FE8  0086               	movwf	6
  7768  0FE9  3001               	movlw	1	; select bank3/4
  7769  0FEA  0087               	movwf	7
  7770  0FEB  0879               	movf	_PDCount,w
  7771  0FEC  3ECC               	addlw	low (_UID| (0+32768))
  7772  0FED  0084               	movwf	4
  7773  0FEE  3089               	movlw	high (_UID| (0+32768))
  7774  0FEF  1803               	skipnc
  7775  0FF0  3E01               	addlw	1
  7776  0FF1  0085               	movwf	5
  7777  0FF2  0800               	movf	0,w	;code access
  7778  0FF3  0008               	return
  7779  0FF4                     __end_ofPL40:	
  7780  0FF4                     PL64:	
  7781  0FF4  0801               	movf	1,w
  7782  0FF5  0021               	movlb	1	; select bank1
  7783  0FF6  07C6               	addwf	_checkSum^(0+128),f
  7784  0FF7  1803               	skipnc
  7785  0FF8  0AC7               	incf	(_checkSum+1)^(0+128),f
  7786  0FF9  0AF9               	incf	_PDCount,f
  7787  0FFA  0008               	return
  7788  0FFB                     __end_ofPL64:	
  7789  0FFB                     PL110:	
  7790  0FFB  0081               	movwf	1
  7791  0FFC  30FE               	movlw	254
  7792  0FFD  00F4               	movwf	___bmul@multiplicand
  7793  0FFE  0879               	movf	_PDCount,w
  7794  0FFF  0008               	return
  7795  1000                     __end_ofPL110:	
  7796                           
  7797                           	psect	intentry
  7798  0004                     __pintentry:	
  7799 ;; *************** function _isr *****************
  7800 ;; Defined at:
  7801 ;;		line 78 in file "main.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;		None
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 1C/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7815 ;;      Params:         0       0       0       0       0       0       0       0
  7816 ;;      Locals:         0       0       0       0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0       0
  7818 ;;      Totals:         0       0       0       0       0       0       0       0
  7819 ;;Total ram usage:        0 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    1
  7822 ;; This function calls:
  7823 ;;		_ADC_interrupt
  7824 ;;		_DMX_interrput
  7825 ;;		_RDM_tx_interrupt
  7826 ;;		_timer1_interrupt
  7827 ;; This function is called by:
  7828 ;;		Interrupt level 1
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832  0004                     _isr:	
  7833                           
  7834                           ;incstack = 0
  7835  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7836                           
  7837                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7838  0005  3180               	pagesel	$
  7839                           
  7840                           ;main.c: 79: ADC_interrupt();
  7841  0006  318A  22F5  3180   	fcall	_ADC_interrupt
  7842                           
  7843                           ;main.c: 81: DMX_interrput();
  7844  0009  318B  237E  3180   	fcall	_DMX_interrput
  7845                           
  7846                           ;main.c: 82: timer1_interrupt();
  7847  000C  318B  230B  3180   	fcall	_timer1_interrupt
  7848                           
  7849                           ;main.c: 83: RDM_tx_interrupt();
  7850  000F  318E  269D         	fcall	_RDM_tx_interrupt
  7851  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7852  0012  0009               	retfie
  7853  0013                     __end_of_isr:	
  7854                           
  7855                           	psect	text27
  7856  0B0B                     __ptext27:	
  7857 ;; *************** function _timer1_interrupt *****************
  7858 ;; Defined at:
  7859 ;;		line 21 in file "Timer.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;		None
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;		None
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  2  120[None  ] int 
  7866 ;; Registers used:
  7867 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 1E/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7873 ;;      Params:         0       0       0       0       0       0       0       0
  7874 ;;      Locals:         0       0       0       0       0       0       0       0
  7875 ;;      Temps:          1       0       0       0       0       0       0       0
  7876 ;;      Totals:         1       0       0       0       0       0       0       0
  7877 ;;Total ram usage:        1 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; This function calls:
  7880 ;;		Nothing
  7881 ;; This function is called by:
  7882 ;;		_isr
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           
  7887                           ;psect for function _timer1_interrupt
  7888  0B0B                     _timer1_interrupt:	
  7889                           
  7890                           ;Timer.c: 22: if (TMR1IE && TMR1IF) {
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
  7894  0B0B  0021               	movlb	1	; select bank1
  7895  0B0C  1C11               	btfss	17,0	;volatile
  7896  0B0D  0008               	return
  7897  0B0E  0020               	movlb	0	; select bank0
  7898  0B0F  1C11               	btfss	17,0	;volatile
  7899  0B10  0008               	return
  7900                           
  7901                           ;Timer.c: 23: TMR1IF = 0;
  7902  0B11  1011               	bcf	17,0	;volatile
  7903                           
  7904                           ;Timer.c: 24: switch (TimerState) {
  7905  0B12  2B6B               	goto	i1l3668
  7906  0B13                     i1l3622:	
  7907                           
  7908                           ;Timer.c: 26: TimerState = TIMER_500US;
  7909  0B13  01DA               	clrf	_TimerState^(0+128)	;volatile
  7910  0B14                     i1l3624:	
  7911                           
  7912                           ;Timer.c: 36: if(ADIE==RA5){
  7913  0B14  0020               	movlb	0	; select bank0
  7914  0B15  1E8C               	btfss	12,5	;volatile
  7915  0B16  2B19               	goto	u246_20
  7916  0B17  3001               	movlw	1
  7917  0B18  2B1A               	goto	u246_22
  7918  0B19                     u246_20:	
  7919  0B19  3000               	movlw	0
  7920  0B1A                     u246_22:	
  7921  0B1A  00F0               	movwf	??_timer1_interrupt
  7922  0B1B  0021               	movlb	1	; select bank1
  7923  0B1C  1F11               	btfss	17,6	;volatile
  7924  0B1D  2B20               	goto	u247_20
  7925  0B1E  3001               	movlw	1
  7926  0B1F  2B21               	goto	u247_22
  7927  0B20                     u247_20:	
  7928  0B20  3000               	movlw	0
  7929  0B21                     u247_22:	
  7930  0B21  0670               	xorwf	??_timer1_interrupt,w
  7931  0B22  1903               	btfsc	3,2
  7932                           
  7933                           ;Timer.c: 37: Timer.Switch=1;
  7934  0B23  143E               	bsf	(_Timer^(0+128)+6),0	;volatile
  7935                           
  7936                           ;Timer.c: 38: }
  7937                           ;Timer.c: 39: TMR1 = 0xFE0B;
  7938  0B24  2378  318B         	fcall	PL102	;call to abstracted procedure
  7939                           
  7940                           ;Timer.c: 40: RxTimer++;
  7941  0B26  0021               	movlb	1	; select bank1
  7942  0B27  0AD4               	incf	_RxTimer^(0+128),f	;volatile
  7943  0B28  1903               	skipnz
  7944  0B29  0AD5               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7945                           
  7946                           ;Timer.c: 41: if (RxTimer == 2400) {
  7947  0B2A  3060               	movlw	96
  7948  0B2B  0654               	xorwf	_RxTimer^(0+128),w	;volatile
  7949  0B2C  3009               	movlw	9
  7950  0B2D  1903               	skipnz
  7951  0B2E  0655               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7952  0B2F  1D03               	btfss	3,2
  7953  0B30  2B36               	goto	i1l3636
  7954                           
  7955                           ;Timer.c: 42: RxTimer = 2400 + 1;
  7956  0B31  3061               	movlw	97
  7957  0B32  00D4               	movwf	_RxTimer^(0+128)	;volatile
  7958  0B33  3009               	movlw	9
  7959  0B34  00D5               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7960                           
  7961                           ;Timer.c: 43: DMX_Flags.RxTimeout = 1;
  7962  0B35  1576               	bsf	_DMX_Flags,2	;volatile
  7963  0B36                     i1l3636:	
  7964                           
  7965                           ;Timer.c: 44: }
  7966                           ;Timer.c: 46: Timer.MS_Count++;
  7967  0B36  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
  7968  0B37  1903               	skipnz
  7969  0B38  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7970                           
  7971                           ;Timer.c: 47: Timer.MS = 1;
  7972  0B39  1438               	bsf	_Timer^(0+128),0	;volatile
  7973                           
  7974                           ;Timer.c: 48: if (Timer.MS_Count == 1000)
  7975  0B3A  30E8               	movlw	232
  7976  0B3B  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7977  0B3C  3003               	movlw	3
  7978  0B3D  1903               	skipnz
  7979  0B3E  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7980  0B3F  1D03               	btfss	3,2
  7981  0B40  0008               	return
  7982                           
  7983                           ;Timer.c: 49: {
  7984                           ;Timer.c: 50: Timer.MS_Count = 0;
  7985  0B41  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
  7986  0B42  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7987                           
  7988                           ;Timer.c: 51: Timer.SEC_Count++;
  7989  0B43  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
  7990                           
  7991                           ;Timer.c: 52: Timer.SEC = 1;
  7992  0B44  14B8               	bsf	_Timer^(0+128),1	;volatile
  7993                           
  7994                           ;Timer.c: 53: if (Timer.SEC_Count == 60)
  7995  0B45  303C               	movlw	60
  7996  0B46  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7997  0B47  1D03               	btfss	3,2
  7998  0B48  0008               	return
  7999                           
  8000                           ;Timer.c: 54: {
  8001                           ;Timer.c: 55: Timer.SEC_Count = 0;
  8002  0B49  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  8003                           
  8004                           ;Timer.c: 56: Timer.MIN_Count++;
  8005  0B4A  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
  8006                           
  8007                           ;Timer.c: 57: Timer.MIN = 1;
  8008  0B4B  1538               	bsf	_Timer^(0+128),2	;volatile
  8009                           
  8010                           ;Timer.c: 59: if (Timer.MIN_Count == 60)
  8011  0B4C  303C               	movlw	60
  8012  0B4D  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
  8013  0B4E  1D03               	btfss	3,2
  8014  0B4F  0008               	return
  8015                           
  8016                           ;Timer.c: 60: {
  8017                           ;Timer.c: 61: Timer.MIN_Count = 0;
  8018  0B50  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  8019                           
  8020                           ;Timer.c: 62: Timer.HR_Count++;
  8021  0B51  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
  8022                           
  8023                           ;Timer.c: 63: Timer.HR = 1;
  8024  0B52  15B8               	bsf	_Timer^(0+128),3	;volatile
  8025  0B53  0008               	return
  8026  0B54                     i1l903:	
  8027                           ;Timer.c: 75: case TIMER_BREAK:
  8028                           
  8029                           
  8030                           ;Timer.c: 76: LATC4 = 1;
  8031  0B54  0022               	movlb	2	; select bank2
  8032  0B55  160E               	bsf	14,4	;volatile
  8033                           
  8034                           ;Timer.c: 77: TMR1 = 0xFFF5;
  8035  0B56  30FF               	movlw	255
  8036  0B57  0020               	movlb	0	; select bank0
  8037  0B58  0097               	movwf	23	;volatile
  8038  0B59  30F5               	movlw	245
  8039  0B5A  0096               	movwf	22	;volatile
  8040                           
  8041                           ;Timer.c: 78: TimerState = TX_TIMER_MAB;
  8042  0B5B  3002               	movlw	2
  8043  0B5C  0021               	movlb	1	; select bank1
  8044  0B5D  00DA               	movwf	_TimerState^(0+128)	;volatile
  8045                           
  8046                           ;Timer.c: 79: break;
  8047  0B5E  0008               	return
  8048  0B5F                     i1l904:	
  8049                           ;Timer.c: 81: case TX_TIMER_MAB:
  8050                           
  8051                           
  8052                           ;Timer.c: 82: TXEN = 1;
  8053  0B5F  0023               	movlb	3	; select bank3
  8054  0B60  169E               	bsf	30,5	;volatile
  8055                           
  8056                           ;Timer.c: 83: TXIE = 1;
  8057  0B61  0021               	movlb	1	; select bank1
  8058  0B62  1611               	bsf	17,4	;volatile
  8059                           
  8060                           ;Timer.c: 84: TMR1 = 0xFCDF;
  8061  0B63  30FC               	movlw	252
  8062  0B64  0020               	movlb	0	; select bank0
  8063  0B65  0097               	movwf	23	;volatile
  8064  0B66  30DF               	movlw	223
  8065  0B67  0096               	movwf	22	;volatile
  8066                           
  8067                           ;Timer.c: 85: TimerState = TIMER_500US;
  8068  0B68  0021               	movlb	1	; select bank1
  8069  0B69  01DA               	clrf	_TimerState^(0+128)	;volatile
  8070                           
  8071                           ;Timer.c: 86: break;
  8072  0B6A  0008               	return
  8073  0B6B                     i1l3668:	
  8074  0B6B  0021               	movlb	1	; select bank1
  8075  0B6C  085A               	movf	_TimerState^(0+128),w	;volatile
  8076                           
  8077                           ; Switch size 1, requested type "space"
  8078                           ; Number of cases is 3, Range of values is 0 to 2
  8079                           ; switch strategies available:
  8080                           ; Name         Instructions Cycles
  8081                           ; simple_byte           10     6 (average)
  8082                           ; direct_byte           12     6 (fixed)
  8083                           ; jumptable            260     6 (fixed)
  8084                           ;	Chosen strategy is simple_byte
  8085  0B6D  3A00               	xorlw	0	; case 0
  8086  0B6E  1903               	skipnz
  8087  0B6F  2B14               	goto	i1l3624
  8088  0B70  3A01               	xorlw	1	; case 1
  8089  0B71  1903               	skipnz
  8090  0B72  2B54               	goto	i1l903
  8091  0B73  3A03               	xorlw	3	; case 2
  8092  0B74  1903               	skipnz
  8093  0B75  2B5F               	goto	i1l904
  8094  0B76  2B13               	goto	i1l3622
  8095  0B77  0008               	return
  8096  0B78                     __end_of_timer1_interrupt:	
  8097  0B78                     PL102:	
  8098  0B78  30FE               	movlw	254
  8099  0B79  0020               	movlb	0	; select bank0
  8100  0B7A  0097               	movwf	23	;volatile
  8101  0B7B  300B               	movlw	11
  8102  0B7C  0096               	movwf	22	;volatile
  8103  0B7D  0008               	return
  8104  0B7E                     __end_ofPL102:	
  8105                           
  8106                           	psect	text29
  8107  0B7E                     __ptext29:	
  8108 ;; *************** function _DMX_interrput *****************
  8109 ;; Defined at:
  8110 ;;		line 186 in file "DMX.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  2  118[None  ] int 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8119 ;; Tracked objects:
  8120 ;;		On entry : 1F/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8124 ;;      Params:         0       0       0       0       0       0       0       0
  8125 ;;      Locals:         1       0       0       0       0       0       0       0
  8126 ;;      Temps:          2       0       0       0       0       0       0       0
  8127 ;;      Totals:         3       0       0       0       0       0       0       0
  8128 ;;Total ram usage:        3 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; This function calls:
  8131 ;;		Nothing
  8132 ;; This function is called by:
  8133 ;;		_isr
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _DMX_interrput
  8139  0B7E                     _DMX_interrput:	
  8140                           
  8141                           ;DMX.c: 187: if (RCIE & RCIF) {
  8142                           
  8143                           ;incstack = 0
  8144                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8145  0B7E  3001               	movlw	1
  8146  0B7F  0021               	movlb	1	; select bank1
  8147  0B80  1E91               	btfss	17,5	;volatile
  8148  0B81  3900               	andlw	0
  8149  0B82  0020               	movlb	0	; select bank0
  8150  0B83  1E91               	btfss	17,5	;volatile
  8151  0B84  3900               	andlw	0
  8152  0B85  1C09               	btfss	9,0
  8153  0B86  0008               	return
  8154                           
  8155                           ;DMX.c: 188: volatile char RxDat;
  8156                           ;DMX.c: 189: if (FERR)
  8157  0B87  0023               	movlb	3	; select bank3
  8158  0B88  1D1D               	btfss	29,2	;volatile
  8159  0B89  2C3B               	goto	i1l3602
  8160                           
  8161                           ;DMX.c: 190: {
  8162                           ;DMX.c: 191: RxDat = RCREG;
  8163  0B8A  0819               	movf	25,w	;volatile
  8164  0B8B  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8165                           
  8166                           ;DMX.c: 192: DMX_Flags.RxBreak = 1;
  8167  0B8C  14F6               	bsf	_DMX_Flags,1	;volatile
  8168                           
  8169                           ;DMX.c: 193: RxState = WAIT_FOR_START;
  8170  0B8D  3001               	movlw	1
  8171  0B8E  0021               	movlb	1	; select bank1
  8172  0B8F  00E2               	movwf	_RxState^(0+128)	;volatile
  8173                           
  8174                           ;DMX.c: 194: RxTimer = 0;
  8175  0B90  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8176  0B91  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8177  0B92  2C3B               	goto	i1l3602
  8178  0B93                     i1l3522:	
  8179                           
  8180                           ;DMX.c: 198: RxDat = RCREG;
  8181  0B93  0023               	movlb	3	; select bank3
  8182  0B94  0819               	movf	25,w	;volatile
  8183  0B95  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8184                           
  8185                           ;DMX.c: 199: break;
  8186  0B96  2C46               	goto	i1l3604
  8187  0B97                     i1l398:	
  8188                           ;DMX.c: 200: case WAIT_FOR_START:
  8189                           
  8190                           
  8191                           ;DMX.c: 201: if (RCIF)
  8192  0B97  0020               	movlb	0	; select bank0
  8193  0B98  1E91               	btfss	17,5	;volatile
  8194  0B99  2C46               	goto	i1l3604
  8195                           
  8196                           ;DMX.c: 202: {
  8197                           ;DMX.c: 203: RxDat = RCREG;
  8198  0B9A  0023               	movlb	3	; select bank3
  8199  0B9B  0819               	movf	25,w	;volatile
  8200  0B9C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8201  0B9D  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8202  0B9E  1D03               	btfss	3,2
  8203  0B9F  2BAC               	goto	i1l3532
  8204                           
  8205                           ;DMX.c: 206: RxState = RX_DMX_READ_DATA;
  8206  0BA0  3002               	movlw	2
  8207  0BA1  0021               	movlb	1	; select bank1
  8208  0BA2  00E2               	movwf	_RxState^(0+128)	;volatile
  8209                           
  8210                           ;DMX.c: 207: RxDataPtr = &RxData[0];
  8211  0BA3  30E4               	movlw	(low (_RxData| 0))& (0+255)
  8212  0BA4  00E3               	movwf	_RxDataPtr^(0+128)
  8213                           
  8214                           ;DMX.c: 208: RxAddrCount = 1;
  8215  0BA5  3001               	movlw	1
  8216  0BA6  00D6               	movwf	_RxAddrCount^(0+128)	;volatile
  8217  0BA7  01D7               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8218                           
  8219                           ;DMX.c: 210: DMXPeriod = DMXPeriodConst;
  8220  0BA8  0861               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8221  0BA9  00EC               	movwf	_DMXPeriod^(0+128)
  8222                           
  8223                           ;DMX.c: 211: DMXPeriodConst = 0;
  8224  0BAA  01E1               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8225                           
  8226                           ;DMX.c: 212: } else if (RxDat == 0xCC) {
  8227  0BAB  2C46               	goto	i1l3604
  8228  0BAC                     i1l3532:	
  8229  0BAC  30CC               	movlw	204
  8230  0BAD  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8231  0BAE  1D03               	btfss	3,2
  8232  0BAF  2BB4               	goto	i1l3536
  8233                           
  8234                           ;DMX.c: 214: RxState = RX_RDM_READ_SubStartCode;
  8235  0BB0  3003               	movlw	3
  8236  0BB1  0021               	movlb	1	; select bank1
  8237  0BB2  00E2               	movwf	_RxState^(0+128)	;volatile
  8238                           
  8239                           ;DMX.c: 216: } else {
  8240  0BB3  2C46               	goto	i1l3604
  8241  0BB4                     i1l3536:	
  8242                           
  8243                           ;DMX.c: 217: RxState = RX_WAIT_FOR_BREAK;
  8244  0BB4  0021               	movlb	1	; select bank1
  8245  0BB5  01E2               	clrf	_RxState^(0+128)	;volatile
  8246  0BB6  2C46               	goto	i1l3604
  8247  0BB7                     i1l3538:	
  8248                           
  8249                           ;DMX.c: 222: RxDat = RCREG;
  8250  0BB7  0023               	movlb	3	; select bank3
  8251  0BB8  0819               	movf	25,w	;volatile
  8252  0BB9  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8253                           
  8254                           ;DMX.c: 223: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8255  0BBA  0021               	movlb	1	; select bank1
  8256  0BBB  086E               	movf	(_DMX_Address+1)^(0+128),w
  8257  0BBC  0257               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8258  0BBD  1D03               	skipz
  8259  0BBE  2BC1               	goto	u233_25
  8260  0BBF  086D               	movf	_DMX_Address^(0+128),w
  8261  0BC0  0256               	subwf	_RxAddrCount^(0+128),w	;volatile
  8262  0BC1                     u233_25:	
  8263  0BC1  1C03               	skipc
  8264  0BC2  2BCD               	goto	i1l3546
  8265  0BC3  086D               	movf	_DMX_Address^(0+128),w
  8266  0BC4  046E               	iorwf	(_DMX_Address+1)^(0+128),w
  8267  0BC5  1903               	btfsc	3,2
  8268  0BC6  2BCD               	goto	i1l3546
  8269                           
  8270                           ;DMX.c: 224: {
  8271                           ;DMX.c: 225: *RxDataPtr = RxDat;
  8272  0BC7  0863               	movf	_RxDataPtr^(0+128),w
  8273  0BC8  0086               	movwf	6
  8274  0BC9  0187               	clrf	7
  8275  0BCA  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8276  0BCB  0081               	movwf	1
  8277                           
  8278                           ;DMX.c: 226: RxDataPtr++;
  8279  0BCC  0AE3               	incf	_RxDataPtr^(0+128),f
  8280  0BCD                     i1l3546:	
  8281                           
  8282                           ;DMX.c: 227: }
  8283                           ;DMX.c: 228: RxAddrCount++;
  8284  0BCD  0AD6               	incf	_RxAddrCount^(0+128),f	;volatile
  8285  0BCE  1903               	skipnz
  8286  0BCF  0AD7               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8287                           
  8288                           ;DMX.c: 230: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8289  0BD0  086D               	movf	_DMX_Address^(0+128),w
  8290  0BD1  3E04               	addlw	4
  8291  0BD2  00F0               	movwf	??_DMX_interrput
  8292  0BD3  3000               	movlw	0
  8293  0BD4  3D6E               	addwfc	(_DMX_Address+1)^(0+128),w
  8294  0BD5  00F1               	movwf	??_DMX_interrput+1
  8295  0BD6  0257               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8296  0BD7  1D03               	skipz
  8297  0BD8  2BDB               	goto	u235_25
  8298  0BD9  0870               	movf	??_DMX_interrput,w
  8299  0BDA  0256               	subwf	_RxAddrCount^(0+128),w	;volatile
  8300  0BDB                     u235_25:	
  8301  0BDB  1C03               	skipc
  8302  0BDC  2C46               	goto	i1l3604
  8303  0BDD  086D               	movf	_DMX_Address^(0+128),w
  8304  0BDE  046E               	iorwf	(_DMX_Address+1)^(0+128),w
  8305  0BDF  1903               	btfsc	3,2
  8306  0BE0  2C46               	goto	i1l3604
  8307                           
  8308                           ;DMX.c: 231: DMX_Flags.RxNew = 1;
  8309  0BE1  1476               	bsf	_DMX_Flags,0	;volatile
  8310                           
  8311                           ;DMX.c: 232: RxState = RX_WAIT_FOR_BREAK;
  8312                           
  8313                           ;DMX.c: 233: RxTimer = 0;
  8314                           
  8315                           ;DMX.c: 234: DMX_Flags.RxTimeout = 0;
  8316  0BE2  2457  318B         	fcall	PL106	;call to abstracted procedure
  8317  0BE4  2C46               	goto	i1l3604
  8318  0BE5                     i1l3558:	
  8319                           
  8320                           ;DMX.c: 238: RxDat = RCREG;
  8321  0BE5  0023               	movlb	3	; select bank3
  8322  0BE6  0819               	movf	25,w	;volatile
  8323  0BE7  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8324                           
  8325                           ;DMX.c: 239: if (RxDat == 0x01)
  8326  0BE8  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8327  0BE9  2C46               	goto	i1l3604
  8328                           
  8329                           ;DMX.c: 240: {
  8330                           ;DMX.c: 241: RxState = RX_RDM_READ_DATA;
  8331  0BEA  3004               	movlw	4
  8332  0BEB  0021               	movlb	1	; select bank1
  8333  0BEC  00E2               	movwf	_RxState^(0+128)	;volatile
  8334                           
  8335                           ;DMX.c: 242: PackCount = 23;
  8336  0BED  3017               	movlw	23
  8337  0BEE  00F8               	movwf	_PackCount	;volatile
  8338                           
  8339                           ;DMX.c: 243: PD_Flag = 0;
  8340  0BEF  01CA               	clrf	_PD_Flag^(0+128)	;volatile
  8341  0BF0  2C37               	goto	L6
  8342  0BF1                     i1l3566:	
  8343                           
  8344                           ;DMX.c: 248: RxDat = RCREG;
  8345  0BF1  0023               	movlb	3	; select bank3
  8346  0BF2  0819               	movf	25,w	;volatile
  8347  0BF3  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8348                           
  8349                           ;DMX.c: 249: RX_RDM_Data.value[PackCount] = RxDat;
  8350  0BF4  0878               	movf	_PackCount,w
  8351  0BF5  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8352  0BF6  0086               	movwf	6
  8353  0BF7  3001               	movlw	1	; select bank2/3
  8354  0BF8  0087               	movwf	7
  8355  0BF9  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8356  0BFA  0081               	movwf	1
  8357                           
  8358                           ;DMX.c: 251: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8359  0BFB  3002               	movlw	2
  8360  0BFC  0678               	xorwf	_PackCount,w	;volatile
  8361  0BFD  1D03               	btfss	3,2
  8362  0BFE  2C10               	goto	i1l3580
  8363  0BFF  0878               	movf	_PackCount,w
  8364  0C00  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8365  0C01  0086               	movwf	6
  8366  0C02  0801               	movf	1,w
  8367  0C03  1903               	btfsc	3,2
  8368  0C04  2C10               	goto	i1l3580
  8369  0C05  0021               	movlb	1	; select bank1
  8370  0C06  084A               	movf	_PD_Flag^(0+128),w	;volatile
  8371  0C07  044B               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8372  0C08  1D03               	btfss	3,2
  8373  0C09  2C10               	goto	i1l3580
  8374                           
  8375                           ;DMX.c: 252: RxState = RX_RDM_PD;
  8376  0C0A  3005               	movlw	5
  8377  0C0B  00E2               	movwf	_RxState^(0+128)	;volatile
  8378                           
  8379                           ;DMX.c: 253: PDCount = 100-1;
  8380  0C0C  3063               	movlw	99
  8381  0C0D  00F9               	movwf	_PDCount
  8382  0C0E                     i1l3578:	
  8383                           
  8384                           ;DMX.c: 254: PackCount--;
  8385  0C0E  03F8               	decf	_PackCount,f	;volatile
  8386                           
  8387                           ;DMX.c: 255: break;
  8388  0C0F  2C46               	goto	i1l3604
  8389  0C10                     i1l3580:	
  8390                           
  8391                           ;DMX.c: 256: }
  8392                           ;DMX.c: 257: if (PackCount == 0) {
  8393  0C10  0878               	movf	_PackCount,w	;volatile
  8394  0C11  1D03               	btfss	3,2
  8395  0C12  2C0E               	goto	i1l3578
  8396                           
  8397                           ;DMX.c: 258: DMX_Flags.RDMNew = 1;
  8398  0C13  1776               	bsf	_DMX_Flags,6	;volatile
  8399                           
  8400                           ;DMX.c: 259: RxState = RX_WAIT_FOR_BREAK;
  8401  0C14  0021               	movlb	1	; select bank1
  8402                           
  8403                           ;DMX.c: 260: RxTimer = 0;
  8404                           
  8405                           ;DMX.c: 261: DMX_Flags.RxTimeout = 0;
  8406  0C15  2457  318B         	fcall	PL106	;call to abstracted procedure
  8407  0C17  2C0E               	goto	i1l3578
  8408  0C18                     i1l3590:	
  8409                           
  8410                           ;DMX.c: 267: RxDat = RCREG;
  8411  0C18  0023               	movlb	3	; select bank3
  8412  0C19  0819               	movf	25,w	;volatile
  8413  0C1A  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8414                           
  8415                           ;DMX.c: 268: PD.u8[PDCount] = RxDat;
  8416  0C1B  0879               	movf	_PDCount,w
  8417  0C1C  3E8C               	addlw	140
  8418  0C1D  00F0               	movwf	??_DMX_interrput
  8419  0C1E  3021               	movlw	33
  8420  0C1F  01F1               	clrf	??_DMX_interrput+1
  8421  0C20  3DF1               	addwfc	??_DMX_interrput+1,f
  8422  0C21  0870               	movf	??_DMX_interrput,w
  8423  0C22  0086               	movwf	6
  8424  0C23  0871               	movf	??_DMX_interrput+1,w
  8425  0C24  0087               	movwf	7
  8426  0C25  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8427  0C26  0081               	movwf	1
  8428                           
  8429                           ;DMX.c: 269: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  8430  0C27  01F1               	clrf	??_DMX_interrput+1
  8431  0C28  0022               	movlb	2	; select bank2
  8432  0C29  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8433  0C2A  3C64               	sublw	100
  8434  0C2B  00F0               	movwf	??_DMX_interrput
  8435  0C2C  1C03               	skipc
  8436  0C2D  03F1               	decf	??_DMX_interrput+1,f
  8437  0C2E  0679               	xorwf	_PDCount,w
  8438  0C2F  0471               	iorwf	??_DMX_interrput+1,w
  8439  0C30  1D03               	skipz
  8440  0C31  2C39               	goto	i1l3598
  8441                           
  8442                           ;DMX.c: 270: RxState = RX_RDM_READ_DATA;
  8443  0C32  3004               	movlw	4
  8444  0C33  0021               	movlb	1	; select bank1
  8445  0C34  00E2               	movwf	_RxState^(0+128)	;volatile
  8446                           
  8447                           ;DMX.c: 271: PD_Flag = 1;
  8448  0C35  3001               	movlw	1
  8449  0C36  00CA               	movwf	_PD_Flag^(0+128)	;volatile
  8450  0C37                     L6:	
  8451  0C37  01CB               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8452                           
  8453                           ;DMX.c: 272: }else{
  8454  0C38  2C46               	goto	i1l3604
  8455  0C39                     i1l3598:	
  8456                           
  8457                           ;DMX.c: 273: PDCount--;
  8458  0C39  03F9               	decf	_PDCount,f
  8459  0C3A  2C46               	goto	i1l3604
  8460  0C3B                     i1l3602:	
  8461  0C3B  0021               	movlb	1	; select bank1
  8462  0C3C  0862               	movf	_RxState^(0+128),w	;volatile
  8463                           
  8464                           ; Switch size 1, requested type "space"
  8465                           ; Number of cases is 6, Range of values is 0 to 5
  8466                           ; switch strategies available:
  8467                           ; Name         Instructions Cycles
  8468                           ; direct_byte           18     6 (fixed)
  8469                           ; simple_byte           19    10 (average)
  8470                           ; jumptable            260     6 (fixed)
  8471                           ;	Chosen strategy is direct_byte
  8472  0C3D  0084               	movwf	4
  8473  0C3E  3006               	movlw	6
  8474  0C3F  0204               	subwf	4,w
  8475  0C40  1803               	skipnc
  8476  0C41  2C46               	goto	i1l3604
  8477  0C42  3189               	movlp	high i1S4718
  8478  0C43  3504               	lslf	4,w
  8479  0C44  3ED2               	addlw	low i1S4718
  8480  0C45  0082               	movwf	2
  8481  0C46                     i1l3604:	
  8482                           
  8483                           ;DMX.c: 278: if (RxTimer > 2400) {
  8484  0C46  0021               	movlb	1	; select bank1
  8485  0C47  0855               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8486  0C48  3A80               	xorlw	128
  8487  0C49  00F0               	movwf	??_DMX_interrput
  8488  0C4A  3089               	movlw	137
  8489  0C4B  0270               	subwf	??_DMX_interrput,w
  8490  0C4C  1D03               	skipz
  8491  0C4D  2C50               	goto	u243_25
  8492  0C4E  3061               	movlw	97
  8493  0C4F  0254               	subwf	_RxTimer^(0+128),w	;volatile
  8494  0C50                     u243_25:	
  8495  0C50  1C03               	skipc
  8496  0C51  0008               	return
  8497                           
  8498                           ;DMX.c: 279: DMX_Flags.RxTimeout = 1;
  8499  0C52  1576               	bsf	_DMX_Flags,2	;volatile
  8500                           
  8501                           ;DMX.c: 280: RxTimer = 0;
  8502  0C53  0021               	movlb	1	; select bank1
  8503  0C54  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8504  0C55  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8505  0C56  0008               	return
  8506  0C57                     __end_of_DMX_interrput:	
  8507  0C57                     PL106:	
  8508  0C57  01E2               	clrf	_RxState^(0+128)	;volatile
  8509  0C58  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8510  0C59  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8511  0C5A  1176               	bcf	_DMX_Flags,2	;volatile
  8512  0C5B  0008               	return
  8513  0C5C                     __end_ofPL106:	
  8514                           
  8515                           	psect	swtext1
  8516  09D2                     __pswtext1:	
  8517  09D2                     i1S4718:	
  8518  09D2  318B  2B93         	ljmp	i1l3522
  8519  09D4  318B  2B97         	ljmp	i1l398
  8520  09D6  318B  2BB7         	ljmp	i1l3538
  8521  09D8  318B  2BE5         	ljmp	i1l3558
  8522  09DA  318B  2BF1         	ljmp	i1l3566
  8523  09DC  318C  2C18         	ljmp	i1l3590
  8524                           
  8525                           	psect	text30
  8526  0AF5                     __ptext30:	
  8527 ;; *************** function _ADC_interrupt *****************
  8528 ;; Defined at:
  8529 ;;		line 43 in file "ADC.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  2  116[None  ] int 
  8536 ;; Registers used:
  8537 ;;		wreg
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 1F/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8543 ;;      Params:         0       0       0       0       0       0       0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0
  8546 ;;      Totals:         0       0       0       0       0       0       0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		_isr
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _ADC_interrupt
  8558  0AF5                     _ADC_interrupt:	
  8559                           
  8560                           ;ADC.c: 44: if (ADIF == 1) {
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _ADC_interrupt: [wreg]
  8564  0AF5  0020               	movlb	0	; select bank0
  8565  0AF6  1F11               	btfss	17,6	;volatile
  8566  0AF7  0008               	return
  8567                           
  8568                           ;ADC.c: 45: ADC_Data=ADRESH;
  8569  0AF8  0021               	movlb	1	; select bank1
  8570  0AF9  081C               	movf	28,w	;volatile
  8571  0AFA  00D9               	movwf	_ADC_Data^(0+128)	;volatile
  8572                           
  8573                           ;ADC.c: 46: ADC_Flags.New=1;
  8574  0AFB  1458               	bsf	_ADC_Flags^(0+128),0	;volatile
  8575                           
  8576                           ;ADC.c: 47: ADIF = 0;
  8577  0AFC  0020               	movlb	0	; select bank0
  8578  0AFD  1311               	bcf	17,6	;volatile
  8579  0AFE  0008               	return
  8580  0AFF                     __end_of_ADC_interrupt:	
  8581  007E                     btemp	set	126	;btemp
  8582  007E                     int$flags	set	126
  8583  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        13
    BSS         196
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     77      77
    BANK1            80      0      79
    BANK2            80      0      76
    BANK3            80      8      60
    BANK4            76      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    DataPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    RxArPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PD_Manu	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    TxByte	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK1[4]), 

    PWMLDCONptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    _main->_ADC_loop
    _main->_RDM_rx_loop
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_RDM_TXSTART
    _RDM_GET_CC->_RDM_TXSTART
    _RDM_init->___bmul
    _DMX_loop->___awtoft
    _DMX_loop->___lbtoft
    ___fttol->___lbtoft
    ___ftsub->___lbtoft
    ___ftadd->___lbtoft
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_DMX_loop
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_TXSTART->_RDM_get_checkSum
    _RDM_init->___bmul
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39009
                           _ADC_init
                           _ADC_loop
                           _DMX_init
                           _DMX_loop
                           _RDM_init
                        _RDM_rx_loop
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    1784
                                              5 COMMON     1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     446
                                             25 BANK0      4     4      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0     446
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     446
                                             25 BANK0      2     2      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     446
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     446
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             2     2      0     276
                                              2 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            12    12      0   36726
                                             73 BANK0      4     4      0
                                              0 BANK3      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              4 COMMON     1     1      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     430
                                             60 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7084
                                             54 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5532
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     848
                                             12 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4733
                                             27 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             4     4      0     223
                                              4 COMMON     1     1      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_loop
   _DMX_init
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_init
     ___bmul
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_SET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     12E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4D      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4C      10       95.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      8      3C      12       75.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4C      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     12E      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Aug 21 14:14:29 2017

                           _i 00D2                             pc 0002                ___bmul@product 0020  
                 __CFG_CP$OFF 0000                            PL2 05C0                            PL4 05D6  
                          PL6 05F3                            PL8 0610                            _PD 218C  
                ___ftadd@exp1 0055                  ___ftadd@exp2 0054                           PL10 0617  
                         PL20 0646                           PL12 0E3D                           PL30 0E53  
                         PL22 064D                           PL14 062E                           PL40 0FE8  
                         PL32 0670                           PL24 0654                           PL16 0637  
                         PL50 06A7                           PL42 0F27                           PL34 0E61  
                         PL26 0663                           PL18 063D                           PL60 06C2  
                         PL52 06AD                           PL44 0697                           PL36 067D  
                         PL28 066B                           PL70 06D0                           PL62 06C9  
                         PL54 06B5                           PL46 0E6E                           PL38 068A  
                         PL80 0E8A                           PL72 06D7                           PL64 0FF4  
                         PL56 06BC                           PL48 069E                           PL90 06F6  
                         PL82 06E2                           PL74 0E84                           PL66 0E7D  
                         PL58 0E77                           PL92 06FC                           PL84 06E8  
                         PL76 06DD                           PL68 0F32                           PL94 0E98  
                         PL86 06EF                           PL78 07BF                           PL96 0702  
                         PL88 0E91                           PL98 0708                  ___ftadd@sign 0053  
                         l370 02AE                           l356 02BB                           l382 0384  
                         l721 0D4A                           l733 0D82                           l726 0D6E  
                         _RA5 0065                           _PR2 001B                           _UID 09CC  
                         _TX9 0CF6                           _PWM 07CC                           _isr 0004  
                         wreg 0009                          PL100 070E                          PL110 0FFB  
                        PL102 0B78                          PL104 0714                          PL106 0C57  
                        PL108 0718                  __CFG_LVP$OFF 0000                  ___ftdiv@cntr 0044  
                ___ftdiv@sign 0049                          l1100 0C5D                          l1111 0CCD  
                        l1104 0C9B                          l1108 0CB3                          l1109 0CBA  
                        l1322 0513                          l3002 0E31                          l1340 042F  
                        l3004 0E3C                          l4002 0537                          l1286 0734  
                        l4102 0E07                          l4110 0E23                          l4006 0C5C  
                        l3080 047E                          l3160 0778                          l4024 0C7F  
                        l1298 0759                          l4122 0FDE                          l3084 048D  
                        l4212 0579                          l3180 079B                          l4108 0E0D  
                        l4142 05AF                          l4150 0421                          l3158 0773  
                        l4224 0587                          l4216 057D                          l3192 07B6  
                        l3176 0794                          l4080 0DC2                          l4306 0121  
                        l4242 03FF                          l3186 079F                          l4402 01DB  
                        l4074 0DB1                          l4066 0CBC                          l4172 0442  
                        l4228 058B                          l3188 07A8                          l2740 0D9E  
                        l2732 0D89                          l4076 0DB2                          l4190 0557  
                        l4422 025D                          l4334 0F5C                          l2742 0DA8  
                        l2734 0D97                          l4178 0458                          l4194 0565  
                        l4434 0286                          l4418 0250                          l4442 0154  
                        l4362 0F78                          l4346 0F64                          l2746 0D0C  
                        l4530 0D7F                          l4522 0D46                          l4508 03C5  
                        l4460 02ED                          l4364 0FA6                          l4348 0F71  
                        l4532 0D80                          l3910 0738                          l4462 02FC  
                        l4454 02C9                          l4374 0FC3                          l4710 0CC2  
                        l4534 0D81                          l4518 0D2E                          l3920 0757  
                        l3912 073C                          l4472 037C                          l4456 02DD  
                        l4712 0E37                          l3922 074F                          l3914 0741  
                        l4490 03B6                          l2794 0CCE                          l4714 0E16  
                        l3916 074A                          l3940 04C5                          l4716 0E1E  
                        l4486 03AF                          l3936 04BE                          l4488 03B5  
                        l3970 04FD                          l3946 04D4                          l2994 0E24  
                        l4594 00A1                          l3964 04F0                          l2996 0E25  
                        l3990 0526                          l3966 04F4                          l3958 04E2  
                        _ADIE 048E                          l3984 051E                          l3976 050B  
                        l3968 04F9                          _ADIF 008E                          l3978 050F  
                        ?_isr 0070                          _BRGH 0CF2                          _FERR 0CEA  
                        u1420 0CD9                          u3130 0F5A                          u3035 044F  
                        u3400 0D55                          u3415 0D68                          _PEIE 005E  
                        u1885 077B                          _RCIE 048D                          _RCIF 008D  
                        _TMR1 0016                          _SPEN 0CEF                          _TX9D 0CF0  
                        _TXIE 048C                          _TXEN 0CF5                          _TXIF 008C  
                        _SYNC 0CF4                  __CFG_WRT$OFF 0000           _TX_RDM_Response_Set 0CED  
                        _main 0056                  ___ftpack@arg 0020                  ___ftpack@exp 0023  
                        _send 00DE                          fsr0h 0005                          fsr1h 0007  
                        indf0 0000                          fsr0l 0004                          indf1 0001  
                        fsr1l 0006                          btemp 007E                          start 0013  
                  _TX_PDCount 00DB              __end_of_ADC_init 00B4              __end_of_ADC_loop 00DB  
                  _TX_PD_Flag 00C8                   ?_RDM_GET_CC 0070             ___bmul@multiplier 0021  
               __CFG_MCLRE$ON 0000                  ___ftmul@cntr 0039                  ___ftmul@sign 003A  
                 ?_RDM_SET_CC 0070                  ___fttol@exp1 0068                  ___fttol@lval 0064  
                       ??_isr 0074                 __CFG_PLLEN$ON 0000          ?_TX_RDM_Response_Set 0070  
                 _RX_RDM_Data 0120                         ?_main 0070               __end_of___ftadd 0549  
               __CFG_WDTE$OFF 0000              __end_of_DMX_init 014C                         _ANSA2 0C62  
                       _ANSC0 0C70                         _ANSA4 0C64               __end_of___ftdiv 046F  
                       _ANSC1 0C71                         _ANSC2 0C72                         _ANSC3 0C73  
            __end_of_DMX_loop 03E8               __end_of___ftmul 05A5                         _T1CON 0018  
             __end_of___ftsub 0413               __end_of___fttol 07BF                         _LATC3 0873  
                       _LATC4 0874                         i1l398 0B97                         i1l903 0B54  
                       i1l904 0B5F                         i1l745 0ECF                         i1l737 0EAD  
                       i1l754 0F26                         _RCREG 0199     __size_of_RDM_tx_interrupt 008A  
                       _RCSTA 019D                         _PD_ID 00CC                         _RXPPS 0E15  
                       _TXREG 019A                         _Timer 00B8              __end_of_RDM_init 0FDB  
               ___awtoft@sign 0074                 ___ftpack@sign 0024                __CFG_BOREN$OFF 0000  
                 _TX_RDM_Data 014C                         status 0003                         wtemp0 007E  
                __end_ofPL100 0714                  __end_ofPL110 1000                  __end_ofPL102 0B7E  
                __end_ofPL104 0718                  __end_ofPL106 0C5C                  __end_ofPL108 071C  
           ?_RDM_get_checkSum 0020            ??_RDM_get_checkSum 0074               __initialization 0015  
                __end_of_main 00A8                    _CurrentPWM 0140             ?_RDM_discovery_CC 0070  
       ??_TX_RDM_Response_Set 0074                  ?_RDM_TXSTART 0070            ??_RDM_discovery_CC 0039  
                      ??_main 0076                 ___fttol@sign1 0063           __size_of_RDM_GET_CC 0073  
                      _ADCON0 009D                        _ADCON1 009E                        i1S4718 09D2  
                      _ADRESH 009C           __size_of_RDM_SET_CC 0019              __end_of___awtoft 05C0  
            __end_of___ftpack 076A              __end_of___lbtoft 03F8                        _RA2PPS 0E92  
                      _RC0PPS 0EA0                        _RC1PPS 0EA1                        _RC2PPS 0EA2  
                      _RC4PPS 0EA4                        i1l3522 0B93                        i1l3602 0C3B  
                      i1l3532 0BAC                        i1l3604 0C46                        i1l3700 0ED9  
                      i1l3622 0B13                        i1l3536 0BB4                        i1l3624 0B14  
                      i1l3546 0BCD                        i1l3538 0BB7                        i1l3722 0F16  
                      i1l3580 0C10                        i1l3716 0EF7                        i1l3636 0B36  
                      i1l3590 0C18                        i1l3566 0BF1                        i1l3558 0BE5  
                      i1l3726 0F18                        i1l3680 0EAF                        i1l3578 0C0E  
                      i1l3692 0EC4                        i1l3668 0B6B                        i1l3598 0C39  
                      i1l3686 0EB9                        _INTCON 000B                        u233_25 0BC1  
                      u243_25 0C50                        u235_25 0BDB                        u246_20 0B19  
                      u246_22 0B1A                        u262_25 0F0E                        u247_20 0B20  
                      u247_22 0B21              __end_of___lwtoft 072C                        _OSCCON 0099  
                      _PWM1DC 0D93                        _PWM2DC 0DA3                        _PWM3DC 0DB3  
      __size_of_DMX_interrput 00D9                        _PWM4DC 0DC3                        _TMR1IE 0488  
                      _TMR1IF 0088             _DMX_CurrentBright 00AC                        _SPBRGH 019C  
                      _SPBRGL 019B                        _TRISA2 0462                        _TRISC0 0470  
                      _TRISA4 0464                        _TRISC1 0471                        _TRISC2 0472  
                      _TRISC3 0473                        _TRISC4 0474                        _TRISC5 0475  
              __CFG_PWRTE$OFF 0000                        _RxData 00E4              _timer1_interrupt 0B0B  
                      _TxByte 00DD                        ___bmul 0FDB                        ___ftge 046F  
                   ??___ftadd 0050                __CFG_STVREN$ON 0000                     ??___ftdiv 0041  
                   ??___ftmul 0032                     ??___ftsub 0075                     ??___fttol 0060  
                ?_timer1_init 0070                  ?_RDM_rx_loop 0070                    _TimerState 00DA  
                      _rxdata 00DF         ___ftmul@f3_as_product 0036           RDM_get_checkSum@len 0038  
                   ?_ADC_init 0070                     ?_ADC_loop 0070       __end_of__initialization 0053  
                  ___ftadd@f1 004A                    ___ftadd@f2 004D                    ___ftge@ff1 002C  
                  ___ftge@ff2 002F                    ___ftdiv@f1 003E                    ___ftdiv@f2 003B  
                  ___ftdiv@f3 0045                     ?_DMX_init 0070                     ?_DMX_loop 0070  
               _DMX_loop$1439 0069                _DMXPeriodConst 00E1                    ___awtoft@c 0028  
                  ___lbtoft@c 0074           ___bmul@multiplicand 0074                    ___ftmul@f1 002C  
                  ___ftmul@f2 002F                    ___ftsub@f1 0059                    ___ftsub@f2 0056  
                  ___fttol@f1 005C                __pcstackCOMMON 0070                  __pidataBANK1 0000  
                __pidataBANK2 0000              _DMX_TargetBright 00A0                     ?_RDM_init 0070  
                  __end_ofPL2 05D6                    __end_ofPL4 05F3                    __end_ofPL6 0610  
                  __end_ofPL8 0617                 _DMX_interrput 0B7E                    ___lwtoft@c 0028  
            _RDM_tx_interrupt 0E9D                    ??_ADC_init 0074                    ??_ADC_loop 0074  
                  __pbssBANK1 00A0                    __pbssBANK2 0120                    __pbssBANK3 01A0  
               _DMX_sumRepeat 00E8                   _RxAddrCount 00D6        __size_of_ADC_interrupt 000A  
                  ??_DMX_init 0020                    ??_DMX_loop 01D4                  ??_RDM_GET_CC 0039  
                  __pmaintext 0056                  ??_RDM_SET_CC 0075                       ?___bmul 0074  
                     ?___ftge 002C                    ??_RDM_init 0022                    __pintentry 0004  
              ?_DMX_interrput 0070                       _BAUDCON 019F                     ?___awtoft 0028  
                   ?___ftpack 0020                     ?___lbtoft 0028             _RDM_tx_TimerBreak 0D0C  
                   ?___lwtoft 0028          __size_of_RDM_TXSTART 001F            ?_RDM_tx_TimerBreak 0070  
                     _DMXSign 00BF                       _PWM1DCH 0D94                       _PWM1DCL 0D93  
                     _PWM2DCH 0DA4                       _PWM2DCL 0DA3                       _OSCTUNE 0098  
                     _PWM3DCH 0DB4                       _PWM3DCL 0DB3                       _PWM4DCH 0DC4  
                     _PWM1CON 0D9B                       _PWM4DCL 0DC3                       _PWM2CON 0DAB  
                     _PWM3CON 0DBB                       _PWM4CON 0DCB                       _PDCount 0079  
                     _PWM1PHH 0D92                       _PWM1PHL 0D91                       _PWM2PHH 0DA2  
                     _PWM2PHL 0DA1                       _PWM3PHH 0DB2                       _PWM3PHL 0DB1  
                     _PWM1PRH 0D96                       _PWM4PHH 0DC2                       _PWM1PRL 0D95  
                     _PWM4PHL 0DC1                       _PWM2PRH 0DA6                       _PWM2PRL 0DA5  
                     _PWM3PRH 0DB6                       _PWM3PRL 0DB5                       _PD_Flag 00CA  
                     _PWM4PRH 0DC6                       _PWM4PRL 0DC5                       _PD_Manu 00CE  
          __end_of_RDM_GET_CC 0E24           ??_RDM_tx_TimerBreak 0074            __end_of_RDM_SET_CC 0E3D  
                   _ADC_Flags 00D8                  DMX_init@Addr 0074                       _TxCount 00D0  
                     _RxTimer 00D4                       _RxState 00E2                       _TxState 00DC  
             __size_of___bmul 000D               __size_of___ftge 002C                       ___ftadd 049B  
                     ___ftdiv 0413                       ___ftmul 0549                       ___ftsub 03F8  
                     ___fttol 076A     __end_of_RDM_tx_TimerBreak 0D1C                  DMX_loop@Addr 006C  
                  ??___awtoft 0074                    ??___ftpack 0025                    ??___lbtoft 0074  
        __size_of_timer1_init 0006                       __ptext1 07C6                       __ptext2 0D1C  
                     __ptext3 0C5C                       __ptext4 0E24                       __ptext5 0DB1  
                     __ptext6 0CCE                       __ptext7 0CED                       __ptext8 0D0C  
                     __ptext9 0D83                 _ADC_interrupt 0AF5          __size_of_RDM_rx_loop 0067  
                  ??___lwtoft 0074     __size_of_RDM_get_checkSum 002E                  __size_of_isr 000F  
    __end_of_timer1_interrupt 0B78                       clrloop0 0B00     __size_of_RDM_discovery_CC 0072  
        RDM_get_checkSum@Data 0020          end_of_initialization 0053                     _DMX_Flags 0076  
                   _DMXPeriod 00EC                _DMX_difference 00C3   __end_of_TX_RDM_Response_Set 0D0C  
             ??_DMX_interrput 0070                     _PWM1LDCON 0D9F                     _PWM2LDCON 0DAF  
                   _PWM3LDCON 0DBF                     _PWM4LDCON 0DCF                  __pstringtext 07CC  
              ?_ADC_interrupt 0070                     _PWMDCHptr 01B4                     _PWMDCLptr 0138  
            __CFG_FOSC$INTOSC 0000             __size_of_ADC_init 000C             __size_of_ADC_loop 0027  
                 ___ftdiv@exp 0048      __end_of_RDM_tx_interrupt 0F27                   ___ftmul@exp 0035  
           __size_of_DMX_init 0071             __size_of_DMX_loop 029C                __end_of___bmul 0FE8  
              __end_of___ftge 049B    __size_of_RDM_tx_TimerBreak 0010             __size_of_RDM_init 00A3  
                   _PackCount 0078                   __end_ofPL10 062E                   __end_ofPL20 064D  
                 __end_ofPL12 0E53                   __end_ofPL30 0E61                   __end_ofPL22 0654  
                 __end_ofPL14 0637                   __end_ofPL40 0FF4                   __end_ofPL32 067D  
                 __end_ofPL24 0663                   __end_ofPL16 063D                   __end_ofPL50 06AD  
                 __end_ofPL42 0F32                   __end_ofPL34 0E6E                   __end_ofPL26 066B  
                 __end_ofPL18 0646                   __end_ofPL60 06C9                   __end_ofPL52 06B5  
                 __end_ofPL44 069E                   __end_ofPL36 068A                   __end_ofPL28 0670  
                 __end_ofPL70 06D7                   __end_ofPL62 06D0                   __end_ofPL54 06BC  
                 __end_ofPL46 0E77                   __end_ofPL38 0697                   __end_ofPL80 0E91  
                 __end_ofPL72 06DD                   __end_ofPL64 0FFB                   __end_ofPL56 06C2  
                 __end_ofPL48 06A7                   __end_ofPL90 06FC                   __end_ofPL82 06E8  
                 __end_ofPL74 0E8A                   __end_ofPL66 0E84                   __end_ofPL58 0E7D  
                 __end_ofPL92 0702                   __end_ofPL84 06EF                   __end_ofPL76 06E2  
                 __end_ofPL68 0F38                   __end_ofPL94 0E9D                   __end_ofPL86 06F6  
                 __end_ofPL78 07C6                   __end_ofPL96 0708                   __end_ofPL88 0E98  
                 __end_ofPL98 070E           start_initialization 0015                   __end_of_UID 09D2  
                 __end_of_PWM 09CC                   __end_of_isr 0013                     _RxDataPtr 00E3  
                _DMXStepConst 00E0              __CFG_LPBOREN$OFF 0000                      ??___bmul 0075  
                    ??___ftge 0075               ??_ADC_interrupt 0070                   __pdataBANK1 00E8  
                 __pdataBANK2 0164              _RDM_get_checkSum 0D83             __size_of___awtoft 001B  
           __size_of___ftpack 003E             __size_of___lbtoft 0010                   __pbssBIGRAM 218C  
                 __pbssCOMMON 0076                     ___latbits 0001             __size_of___lwtoft 0010  
               __pcstackBANK0 0020                 __pcstackBANK3 01D4              _RDM_discovery_CC 0C5C  
             _DMX_SpaceBright 01A0                     __pnvBANK1 00ED                      ?___ftadd 004A  
                    ?___ftdiv 003B                      ?___ftmul 002C                      ?___ftsub 0056  
                    ?___fttol 005C              __CFG_PPS1WAY$OFF 0000                 ??_RDM_TXSTART 0074  
                   __pswtext1 09D2                      _ADC_Data 00D9                      _ADC_init 00A8  
                    _ADC_loop 00B4             ?_timer1_interrupt 0070            ??_timer1_interrupt 0070  
                   _preRxData 0148                     clear_ram0 0AFF                      _DMX_init 00DB  
                    _DMX_loop 014C                      _GO_nDONE 04E9            DMX_interrput@RxDat 0072  
               ??_timer1_init 0074                      _RDM_init 0F38                 ??_RDM_rx_loop 0075  
         __end_of_RDM_TXSTART 0CED                   _DMX_Address 00ED             ?_RDM_tx_interrupt 0070  
          ??_RDM_tx_interrupt 0070              __size_of___ftadd 00AE         __end_of_DMX_interrput 0C57  
            __size_of___ftdiv 005C              __size_of___ftmul 005C              __size_of___ftsub 001B  
            __size_of___fttol 0055                      ___awtoft 05A5                      ___ftpack 072C  
                    ___lbtoft 03E8  __size_of_TX_RDM_Response_Set 001F                      ___lwtoft 071C  
         __end_of_timer1_init 07CC           __end_of_RDM_rx_loop 0D83                      _checkSum 00C6  
                    __ptext10 0F38                      __ptext11 0FDB                      __ptext20 0413  
                    __ptext12 014C                      __ptext21 05A5                      __ptext13 071C  
                    __ptext30 0AF5                      __ptext22 072C                      __ptext14 03E8  
                    __ptext23 00DB                      __ptext15 076A                      __ptext24 00B4  
                    __ptext16 03F8                      __ptext25 00A8                      __ptext17 049B  
                    __ptext18 0549                      __ptext27 0B0B                      __ptext19 046F  
                    __ptext28 0E9D                      __ptext29 0B7E                 __size_of_main 0052  
    __end_of_RDM_get_checkSum 0DB1                      int$flags 007E      __end_of_RDM_discovery_CC 0CCE  
                 _RDM_TXSTART 0CCE                    _DMX_Repeat 0164                      intlevel1 0000  
           __CFG_CLKOUTEN$OFF 0000                    _RDM_GET_CC 0DB1                    _RDM_SET_CC 0E24  
          _DISCOVERY_RDM_Data 01BC                   _timer1_init 07C6                    _PWM1CLKCON 0D9E  
                  _PWM2CLKCON 0DAE                   _RDM_rx_loop 0D1C                    _PWM3CLKCON 0DBE  
                  _PWM4CLKCON 0DCE                   _PWMLDCONptr 01AC         __end_of_ADC_interrupt 0AFF  
   __size_of_timer1_interrupt 006D  
