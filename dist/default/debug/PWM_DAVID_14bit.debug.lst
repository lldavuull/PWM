

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 14 14:53:49 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text23,local,class=CODE,merge=1,delta=2
    26                           	psect	text29,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text30,local,class=CODE,merge=1,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x320,16
    31                           	dabs	1,0x2A0,80
    32                           	dabs	1,0x26C,4
    33                           	dabs	1,0x218C,0,_PD
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.41
    37                           ; Generated 25/01/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F1574 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000E                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  008C                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  018C                     	;# 
   125  018E                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0194                     	;# 
   132  0195                     	;# 
   133  0196                     	;# 
   134  0197                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019C                     	;# 
   140  019D                     	;# 
   141  019E                     	;# 
   142  019F                     	;# 
   143  020C                     	;# 
   144  020E                     	;# 
   145  028C                     	;# 
   146  028E                     	;# 
   147  030C                     	;# 
   148  030E                     	;# 
   149  038C                     	;# 
   150  038E                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  0397                     	;# 
   155  0398                     	;# 
   156  0399                     	;# 
   157  0691                     	;# 
   158  0692                     	;# 
   159  0693                     	;# 
   160  0694                     	;# 
   161  0695                     	;# 
   162  0D8E                     	;# 
   163  0D8F                     	;# 
   164  0D90                     	;# 
   165  0D91                     	;# 
   166  0D91                     	;# 
   167  0D92                     	;# 
   168  0D93                     	;# 
   169  0D93                     	;# 
   170  0D94                     	;# 
   171  0D95                     	;# 
   172  0D95                     	;# 
   173  0D96                     	;# 
   174  0D97                     	;# 
   175  0D97                     	;# 
   176  0D98                     	;# 
   177  0D99                     	;# 
   178  0D99                     	;# 
   179  0D9A                     	;# 
   180  0D9B                     	;# 
   181  0D9C                     	;# 
   182  0D9C                     	;# 
   183  0D9D                     	;# 
   184  0D9D                     	;# 
   185  0D9E                     	;# 
   186  0D9F                     	;# 
   187  0DA0                     	;# 
   188  0DA1                     	;# 
   189  0DA1                     	;# 
   190  0DA2                     	;# 
   191  0DA3                     	;# 
   192  0DA3                     	;# 
   193  0DA4                     	;# 
   194  0DA5                     	;# 
   195  0DA5                     	;# 
   196  0DA6                     	;# 
   197  0DA7                     	;# 
   198  0DA7                     	;# 
   199  0DA8                     	;# 
   200  0DA9                     	;# 
   201  0DA9                     	;# 
   202  0DAA                     	;# 
   203  0DAB                     	;# 
   204  0DAC                     	;# 
   205  0DAC                     	;# 
   206  0DAD                     	;# 
   207  0DAD                     	;# 
   208  0DAE                     	;# 
   209  0DAF                     	;# 
   210  0DB0                     	;# 
   211  0DB1                     	;# 
   212  0DB1                     	;# 
   213  0DB2                     	;# 
   214  0DB3                     	;# 
   215  0DB3                     	;# 
   216  0DB4                     	;# 
   217  0DB5                     	;# 
   218  0DB5                     	;# 
   219  0DB6                     	;# 
   220  0DB7                     	;# 
   221  0DB7                     	;# 
   222  0DB8                     	;# 
   223  0DB9                     	;# 
   224  0DB9                     	;# 
   225  0DBA                     	;# 
   226  0DBB                     	;# 
   227  0DBC                     	;# 
   228  0DBC                     	;# 
   229  0DBD                     	;# 
   230  0DBD                     	;# 
   231  0DBE                     	;# 
   232  0DBF                     	;# 
   233  0DC0                     	;# 
   234  0DC1                     	;# 
   235  0DC1                     	;# 
   236  0DC2                     	;# 
   237  0DC3                     	;# 
   238  0DC3                     	;# 
   239  0DC4                     	;# 
   240  0DC5                     	;# 
   241  0DC5                     	;# 
   242  0DC6                     	;# 
   243  0DC7                     	;# 
   244  0DC7                     	;# 
   245  0DC8                     	;# 
   246  0DC9                     	;# 
   247  0DC9                     	;# 
   248  0DCA                     	;# 
   249  0DCB                     	;# 
   250  0DCC                     	;# 
   251  0DCC                     	;# 
   252  0DCD                     	;# 
   253  0DCD                     	;# 
   254  0DCE                     	;# 
   255  0DCF                     	;# 
   256  0DD0                     	;# 
   257  0E0F                     	;# 
   258  0E10                     	;# 
   259  0E11                     	;# 
   260  0E12                     	;# 
   261  0E13                     	;# 
   262  0E14                     	;# 
   263  0E15                     	;# 
   264  0E16                     	;# 
   265  0E17                     	;# 
   266  0E90                     	;# 
   267  0E91                     	;# 
   268  0E92                     	;# 
   269  0E94                     	;# 
   270  0E95                     	;# 
   271  0EA0                     	;# 
   272  0EA1                     	;# 
   273  0EA2                     	;# 
   274  0EA3                     	;# 
   275  0EA4                     	;# 
   276  0EA5                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE8                     	;# 
   283  0FE9                     	;# 
   284  0FEA                     	;# 
   285  0FEA                     	;# 
   286  0FEB                     	;# 
   287  0FED                     	;# 
   288  0FEE                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000E                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  008C                     	;# 
   318  008E                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010E                     	;# 
   336  0111                     	;# 
   337  0112                     	;# 
   338  0113                     	;# 
   339  0114                     	;# 
   340  0115                     	;# 
   341  0116                     	;# 
   342  0117                     	;# 
   343  0118                     	;# 
   344  0119                     	;# 
   345  018C                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0194                     	;# 
   353  0195                     	;# 
   354  0196                     	;# 
   355  0197                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020C                     	;# 
   365  020E                     	;# 
   366  028C                     	;# 
   367  028E                     	;# 
   368  030C                     	;# 
   369  030E                     	;# 
   370  038C                     	;# 
   371  038E                     	;# 
   372  0391                     	;# 
   373  0392                     	;# 
   374  0393                     	;# 
   375  0397                     	;# 
   376  0398                     	;# 
   377  0399                     	;# 
   378  0691                     	;# 
   379  0692                     	;# 
   380  0693                     	;# 
   381  0694                     	;# 
   382  0695                     	;# 
   383  0D8E                     	;# 
   384  0D8F                     	;# 
   385  0D90                     	;# 
   386  0D91                     	;# 
   387  0D91                     	;# 
   388  0D92                     	;# 
   389  0D93                     	;# 
   390  0D93                     	;# 
   391  0D94                     	;# 
   392  0D95                     	;# 
   393  0D95                     	;# 
   394  0D96                     	;# 
   395  0D97                     	;# 
   396  0D97                     	;# 
   397  0D98                     	;# 
   398  0D99                     	;# 
   399  0D99                     	;# 
   400  0D9A                     	;# 
   401  0D9B                     	;# 
   402  0D9C                     	;# 
   403  0D9C                     	;# 
   404  0D9D                     	;# 
   405  0D9D                     	;# 
   406  0D9E                     	;# 
   407  0D9F                     	;# 
   408  0DA0                     	;# 
   409  0DA1                     	;# 
   410  0DA1                     	;# 
   411  0DA2                     	;# 
   412  0DA3                     	;# 
   413  0DA3                     	;# 
   414  0DA4                     	;# 
   415  0DA5                     	;# 
   416  0DA5                     	;# 
   417  0DA6                     	;# 
   418  0DA7                     	;# 
   419  0DA7                     	;# 
   420  0DA8                     	;# 
   421  0DA9                     	;# 
   422  0DA9                     	;# 
   423  0DAA                     	;# 
   424  0DAB                     	;# 
   425  0DAC                     	;# 
   426  0DAC                     	;# 
   427  0DAD                     	;# 
   428  0DAD                     	;# 
   429  0DAE                     	;# 
   430  0DAF                     	;# 
   431  0DB0                     	;# 
   432  0DB1                     	;# 
   433  0DB1                     	;# 
   434  0DB2                     	;# 
   435  0DB3                     	;# 
   436  0DB3                     	;# 
   437  0DB4                     	;# 
   438  0DB5                     	;# 
   439  0DB5                     	;# 
   440  0DB6                     	;# 
   441  0DB7                     	;# 
   442  0DB7                     	;# 
   443  0DB8                     	;# 
   444  0DB9                     	;# 
   445  0DB9                     	;# 
   446  0DBA                     	;# 
   447  0DBB                     	;# 
   448  0DBC                     	;# 
   449  0DBC                     	;# 
   450  0DBD                     	;# 
   451  0DBD                     	;# 
   452  0DBE                     	;# 
   453  0DBF                     	;# 
   454  0DC0                     	;# 
   455  0DC1                     	;# 
   456  0DC1                     	;# 
   457  0DC2                     	;# 
   458  0DC3                     	;# 
   459  0DC3                     	;# 
   460  0DC4                     	;# 
   461  0DC5                     	;# 
   462  0DC5                     	;# 
   463  0DC6                     	;# 
   464  0DC7                     	;# 
   465  0DC7                     	;# 
   466  0DC8                     	;# 
   467  0DC9                     	;# 
   468  0DC9                     	;# 
   469  0DCA                     	;# 
   470  0DCB                     	;# 
   471  0DCC                     	;# 
   472  0DCC                     	;# 
   473  0DCD                     	;# 
   474  0DCD                     	;# 
   475  0DCE                     	;# 
   476  0DCF                     	;# 
   477  0DD0                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E16                     	;# 
   486  0E17                     	;# 
   487  0E90                     	;# 
   488  0E91                     	;# 
   489  0E92                     	;# 
   490  0E94                     	;# 
   491  0E95                     	;# 
   492  0EA0                     	;# 
   493  0EA1                     	;# 
   494  0EA2                     	;# 
   495  0EA3                     	;# 
   496  0EA4                     	;# 
   497  0EA5                     	;# 
   498  0FE4                     	;# 
   499  0FE5                     	;# 
   500  0FE6                     	;# 
   501  0FE7                     	;# 
   502  0FE8                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEA                     	;# 
   507  0FEB                     	;# 
   508  0FED                     	;# 
   509  0FEE                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009A                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  0197                     	;# 
   577  0199                     	;# 
   578  019A                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019C                     	;# 
   582  019D                     	;# 
   583  019E                     	;# 
   584  019F                     	;# 
   585  020C                     	;# 
   586  020E                     	;# 
   587  028C                     	;# 
   588  028E                     	;# 
   589  030C                     	;# 
   590  030E                     	;# 
   591  038C                     	;# 
   592  038E                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  0397                     	;# 
   597  0398                     	;# 
   598  0399                     	;# 
   599  0691                     	;# 
   600  0692                     	;# 
   601  0693                     	;# 
   602  0694                     	;# 
   603  0695                     	;# 
   604  0D8E                     	;# 
   605  0D8F                     	;# 
   606  0D90                     	;# 
   607  0D91                     	;# 
   608  0D91                     	;# 
   609  0D92                     	;# 
   610  0D93                     	;# 
   611  0D93                     	;# 
   612  0D94                     	;# 
   613  0D95                     	;# 
   614  0D95                     	;# 
   615  0D96                     	;# 
   616  0D97                     	;# 
   617  0D97                     	;# 
   618  0D98                     	;# 
   619  0D99                     	;# 
   620  0D99                     	;# 
   621  0D9A                     	;# 
   622  0D9B                     	;# 
   623  0D9C                     	;# 
   624  0D9C                     	;# 
   625  0D9D                     	;# 
   626  0D9D                     	;# 
   627  0D9E                     	;# 
   628  0D9F                     	;# 
   629  0DA0                     	;# 
   630  0DA1                     	;# 
   631  0DA1                     	;# 
   632  0DA2                     	;# 
   633  0DA3                     	;# 
   634  0DA3                     	;# 
   635  0DA4                     	;# 
   636  0DA5                     	;# 
   637  0DA5                     	;# 
   638  0DA6                     	;# 
   639  0DA7                     	;# 
   640  0DA7                     	;# 
   641  0DA8                     	;# 
   642  0DA9                     	;# 
   643  0DA9                     	;# 
   644  0DAA                     	;# 
   645  0DAB                     	;# 
   646  0DAC                     	;# 
   647  0DAC                     	;# 
   648  0DAD                     	;# 
   649  0DAD                     	;# 
   650  0DAE                     	;# 
   651  0DAF                     	;# 
   652  0DB0                     	;# 
   653  0DB1                     	;# 
   654  0DB1                     	;# 
   655  0DB2                     	;# 
   656  0DB3                     	;# 
   657  0DB3                     	;# 
   658  0DB4                     	;# 
   659  0DB5                     	;# 
   660  0DB5                     	;# 
   661  0DB6                     	;# 
   662  0DB7                     	;# 
   663  0DB7                     	;# 
   664  0DB8                     	;# 
   665  0DB9                     	;# 
   666  0DB9                     	;# 
   667  0DBA                     	;# 
   668  0DBB                     	;# 
   669  0DBC                     	;# 
   670  0DBC                     	;# 
   671  0DBD                     	;# 
   672  0DBD                     	;# 
   673  0DBE                     	;# 
   674  0DBF                     	;# 
   675  0DC0                     	;# 
   676  0DC1                     	;# 
   677  0DC1                     	;# 
   678  0DC2                     	;# 
   679  0DC3                     	;# 
   680  0DC3                     	;# 
   681  0DC4                     	;# 
   682  0DC5                     	;# 
   683  0DC5                     	;# 
   684  0DC6                     	;# 
   685  0DC7                     	;# 
   686  0DC7                     	;# 
   687  0DC8                     	;# 
   688  0DC9                     	;# 
   689  0DC9                     	;# 
   690  0DCA                     	;# 
   691  0DCB                     	;# 
   692  0DCC                     	;# 
   693  0DCC                     	;# 
   694  0DCD                     	;# 
   695  0DCD                     	;# 
   696  0DCE                     	;# 
   697  0DCF                     	;# 
   698  0DD0                     	;# 
   699  0E0F                     	;# 
   700  0E10                     	;# 
   701  0E11                     	;# 
   702  0E12                     	;# 
   703  0E13                     	;# 
   704  0E14                     	;# 
   705  0E15                     	;# 
   706  0E16                     	;# 
   707  0E17                     	;# 
   708  0E90                     	;# 
   709  0E91                     	;# 
   710  0E92                     	;# 
   711  0E94                     	;# 
   712  0E95                     	;# 
   713  0EA0                     	;# 
   714  0EA1                     	;# 
   715  0EA2                     	;# 
   716  0EA3                     	;# 
   717  0EA4                     	;# 
   718  0EA5                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008E                     	;# 
   761  0091                     	;# 
   762  0092                     	;# 
   763  0093                     	;# 
   764  0095                     	;# 
   765  0096                     	;# 
   766  0097                     	;# 
   767  0098                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  009F                     	;# 
   776  010C                     	;# 
   777  010E                     	;# 
   778  0111                     	;# 
   779  0112                     	;# 
   780  0113                     	;# 
   781  0114                     	;# 
   782  0115                     	;# 
   783  0116                     	;# 
   784  0117                     	;# 
   785  0118                     	;# 
   786  0119                     	;# 
   787  018C                     	;# 
   788  018E                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0194                     	;# 
   795  0195                     	;# 
   796  0196                     	;# 
   797  0197                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019C                     	;# 
   803  019D                     	;# 
   804  019E                     	;# 
   805  019F                     	;# 
   806  020C                     	;# 
   807  020E                     	;# 
   808  028C                     	;# 
   809  028E                     	;# 
   810  030C                     	;# 
   811  030E                     	;# 
   812  038C                     	;# 
   813  038E                     	;# 
   814  0391                     	;# 
   815  0392                     	;# 
   816  0393                     	;# 
   817  0397                     	;# 
   818  0398                     	;# 
   819  0399                     	;# 
   820  0691                     	;# 
   821  0692                     	;# 
   822  0693                     	;# 
   823  0694                     	;# 
   824  0695                     	;# 
   825  0D8E                     	;# 
   826  0D8F                     	;# 
   827  0D90                     	;# 
   828  0D91                     	;# 
   829  0D91                     	;# 
   830  0D92                     	;# 
   831  0D93                     	;# 
   832  0D93                     	;# 
   833  0D94                     	;# 
   834  0D95                     	;# 
   835  0D95                     	;# 
   836  0D96                     	;# 
   837  0D97                     	;# 
   838  0D97                     	;# 
   839  0D98                     	;# 
   840  0D99                     	;# 
   841  0D99                     	;# 
   842  0D9A                     	;# 
   843  0D9B                     	;# 
   844  0D9C                     	;# 
   845  0D9C                     	;# 
   846  0D9D                     	;# 
   847  0D9D                     	;# 
   848  0D9E                     	;# 
   849  0D9F                     	;# 
   850  0DA0                     	;# 
   851  0DA1                     	;# 
   852  0DA1                     	;# 
   853  0DA2                     	;# 
   854  0DA3                     	;# 
   855  0DA3                     	;# 
   856  0DA4                     	;# 
   857  0DA5                     	;# 
   858  0DA5                     	;# 
   859  0DA6                     	;# 
   860  0DA7                     	;# 
   861  0DA7                     	;# 
   862  0DA8                     	;# 
   863  0DA9                     	;# 
   864  0DA9                     	;# 
   865  0DAA                     	;# 
   866  0DAB                     	;# 
   867  0DAC                     	;# 
   868  0DAC                     	;# 
   869  0DAD                     	;# 
   870  0DAD                     	;# 
   871  0DAE                     	;# 
   872  0DAF                     	;# 
   873  0DB0                     	;# 
   874  0DB1                     	;# 
   875  0DB1                     	;# 
   876  0DB2                     	;# 
   877  0DB3                     	;# 
   878  0DB3                     	;# 
   879  0DB4                     	;# 
   880  0DB5                     	;# 
   881  0DB5                     	;# 
   882  0DB6                     	;# 
   883  0DB7                     	;# 
   884  0DB7                     	;# 
   885  0DB8                     	;# 
   886  0DB9                     	;# 
   887  0DB9                     	;# 
   888  0DBA                     	;# 
   889  0DBB                     	;# 
   890  0DBC                     	;# 
   891  0DBC                     	;# 
   892  0DBD                     	;# 
   893  0DBD                     	;# 
   894  0DBE                     	;# 
   895  0DBF                     	;# 
   896  0DC0                     	;# 
   897  0DC1                     	;# 
   898  0DC1                     	;# 
   899  0DC2                     	;# 
   900  0DC3                     	;# 
   901  0DC3                     	;# 
   902  0DC4                     	;# 
   903  0DC5                     	;# 
   904  0DC5                     	;# 
   905  0DC6                     	;# 
   906  0DC7                     	;# 
   907  0DC7                     	;# 
   908  0DC8                     	;# 
   909  0DC9                     	;# 
   910  0DC9                     	;# 
   911  0DCA                     	;# 
   912  0DCB                     	;# 
   913  0DCC                     	;# 
   914  0DCC                     	;# 
   915  0DCD                     	;# 
   916  0DCD                     	;# 
   917  0DCE                     	;# 
   918  0DCF                     	;# 
   919  0DD0                     	;# 
   920  0E0F                     	;# 
   921  0E10                     	;# 
   922  0E11                     	;# 
   923  0E12                     	;# 
   924  0E13                     	;# 
   925  0E14                     	;# 
   926  0E15                     	;# 
   927  0E16                     	;# 
   928  0E17                     	;# 
   929  0E90                     	;# 
   930  0E91                     	;# 
   931  0E92                     	;# 
   932  0E94                     	;# 
   933  0E95                     	;# 
   934  0EA0                     	;# 
   935  0EA1                     	;# 
   936  0EA2                     	;# 
   937  0EA3                     	;# 
   938  0EA4                     	;# 
   939  0EA5                     	;# 
   940  0FE4                     	;# 
   941  0FE5                     	;# 
   942  0FE6                     	;# 
   943  0FE7                     	;# 
   944  0FE8                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEA                     	;# 
   949  0FEB                     	;# 
   950  0FED                     	;# 
   951  0FEE                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000E                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0013                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  008C                     	;# 
   981  008E                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0093                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0098                     	;# 
   989  0099                     	;# 
   990  009A                     	;# 
   991  009B                     	;# 
   992  009B                     	;# 
   993  009C                     	;# 
   994  009D                     	;# 
   995  009E                     	;# 
   996  009F                     	;# 
   997  010C                     	;# 
   998  010E                     	;# 
   999  0111                     	;# 
  1000  0112                     	;# 
  1001  0113                     	;# 
  1002  0114                     	;# 
  1003  0115                     	;# 
  1004  0116                     	;# 
  1005  0117                     	;# 
  1006  0118                     	;# 
  1007  0119                     	;# 
  1008  018C                     	;# 
  1009  018E                     	;# 
  1010  0191                     	;# 
  1011  0191                     	;# 
  1012  0192                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0194                     	;# 
  1016  0195                     	;# 
  1017  0196                     	;# 
  1018  0197                     	;# 
  1019  0199                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020E                     	;# 
  1029  028C                     	;# 
  1030  028E                     	;# 
  1031  030C                     	;# 
  1032  030E                     	;# 
  1033  038C                     	;# 
  1034  038E                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0397                     	;# 
  1039  0398                     	;# 
  1040  0399                     	;# 
  1041  0691                     	;# 
  1042  0692                     	;# 
  1043  0693                     	;# 
  1044  0694                     	;# 
  1045  0695                     	;# 
  1046  0D8E                     	;# 
  1047  0D8F                     	;# 
  1048  0D90                     	;# 
  1049  0D91                     	;# 
  1050  0D91                     	;# 
  1051  0D92                     	;# 
  1052  0D93                     	;# 
  1053  0D93                     	;# 
  1054  0D94                     	;# 
  1055  0D95                     	;# 
  1056  0D95                     	;# 
  1057  0D96                     	;# 
  1058  0D97                     	;# 
  1059  0D97                     	;# 
  1060  0D98                     	;# 
  1061  0D99                     	;# 
  1062  0D99                     	;# 
  1063  0D9A                     	;# 
  1064  0D9B                     	;# 
  1065  0D9C                     	;# 
  1066  0D9C                     	;# 
  1067  0D9D                     	;# 
  1068  0D9D                     	;# 
  1069  0D9E                     	;# 
  1070  0D9F                     	;# 
  1071  0DA0                     	;# 
  1072  0DA1                     	;# 
  1073  0DA1                     	;# 
  1074  0DA2                     	;# 
  1075  0DA3                     	;# 
  1076  0DA3                     	;# 
  1077  0DA4                     	;# 
  1078  0DA5                     	;# 
  1079  0DA5                     	;# 
  1080  0DA6                     	;# 
  1081  0DA7                     	;# 
  1082  0DA7                     	;# 
  1083  0DA8                     	;# 
  1084  0DA9                     	;# 
  1085  0DA9                     	;# 
  1086  0DAA                     	;# 
  1087  0DAB                     	;# 
  1088  0DAC                     	;# 
  1089  0DAC                     	;# 
  1090  0DAD                     	;# 
  1091  0DAD                     	;# 
  1092  0DAE                     	;# 
  1093  0DAF                     	;# 
  1094  0DB0                     	;# 
  1095  0DB1                     	;# 
  1096  0DB1                     	;# 
  1097  0DB2                     	;# 
  1098  0DB3                     	;# 
  1099  0DB3                     	;# 
  1100  0DB4                     	;# 
  1101  0DB5                     	;# 
  1102  0DB5                     	;# 
  1103  0DB6                     	;# 
  1104  0DB7                     	;# 
  1105  0DB7                     	;# 
  1106  0DB8                     	;# 
  1107  0DB9                     	;# 
  1108  0DB9                     	;# 
  1109  0DBA                     	;# 
  1110  0DBB                     	;# 
  1111  0DBC                     	;# 
  1112  0DBC                     	;# 
  1113  0DBD                     	;# 
  1114  0DBD                     	;# 
  1115  0DBE                     	;# 
  1116  0DBF                     	;# 
  1117  0DC0                     	;# 
  1118  0DC1                     	;# 
  1119  0DC1                     	;# 
  1120  0DC2                     	;# 
  1121  0DC3                     	;# 
  1122  0DC3                     	;# 
  1123  0DC4                     	;# 
  1124  0DC5                     	;# 
  1125  0DC5                     	;# 
  1126  0DC6                     	;# 
  1127  0DC7                     	;# 
  1128  0DC7                     	;# 
  1129  0DC8                     	;# 
  1130  0DC9                     	;# 
  1131  0DC9                     	;# 
  1132  0DCA                     	;# 
  1133  0DCB                     	;# 
  1134  0DCC                     	;# 
  1135  0DCC                     	;# 
  1136  0DCD                     	;# 
  1137  0DCD                     	;# 
  1138  0DCE                     	;# 
  1139  0DCF                     	;# 
  1140  0DD0                     	;# 
  1141  0E0F                     	;# 
  1142  0E10                     	;# 
  1143  0E11                     	;# 
  1144  0E12                     	;# 
  1145  0E13                     	;# 
  1146  0E14                     	;# 
  1147  0E15                     	;# 
  1148  0E16                     	;# 
  1149  0E17                     	;# 
  1150  0E90                     	;# 
  1151  0E91                     	;# 
  1152  0E92                     	;# 
  1153  0E94                     	;# 
  1154  0E95                     	;# 
  1155  0EA0                     	;# 
  1156  0EA1                     	;# 
  1157  0EA2                     	;# 
  1158  0EA3                     	;# 
  1159  0EA4                     	;# 
  1160  0EA5                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE8                     	;# 
  1167  0FE9                     	;# 
  1168  0FEA                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEE                     	;# 
  1174  0FEF                     	;# 
  1175  0000                     	;# 
  1176  0001                     	;# 
  1177  0002                     	;# 
  1178  0003                     	;# 
  1179  0004                     	;# 
  1180  0005                     	;# 
  1181  0006                     	;# 
  1182  0007                     	;# 
  1183  0008                     	;# 
  1184  0009                     	;# 
  1185  000A                     	;# 
  1186  000B                     	;# 
  1187  000C                     	;# 
  1188  000E                     	;# 
  1189  0011                     	;# 
  1190  0012                     	;# 
  1191  0013                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0016                     	;# 
  1195  0017                     	;# 
  1196  0018                     	;# 
  1197  0019                     	;# 
  1198  001A                     	;# 
  1199  001B                     	;# 
  1200  001C                     	;# 
  1201  008C                     	;# 
  1202  008E                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0093                     	;# 
  1206  0095                     	;# 
  1207  0096                     	;# 
  1208  0097                     	;# 
  1209  0098                     	;# 
  1210  0099                     	;# 
  1211  009A                     	;# 
  1212  009B                     	;# 
  1213  009B                     	;# 
  1214  009C                     	;# 
  1215  009D                     	;# 
  1216  009E                     	;# 
  1217  009F                     	;# 
  1218  010C                     	;# 
  1219  010E                     	;# 
  1220  0111                     	;# 
  1221  0112                     	;# 
  1222  0113                     	;# 
  1223  0114                     	;# 
  1224  0115                     	;# 
  1225  0116                     	;# 
  1226  0117                     	;# 
  1227  0118                     	;# 
  1228  0119                     	;# 
  1229  018C                     	;# 
  1230  018E                     	;# 
  1231  0191                     	;# 
  1232  0191                     	;# 
  1233  0192                     	;# 
  1234  0193                     	;# 
  1235  0193                     	;# 
  1236  0194                     	;# 
  1237  0195                     	;# 
  1238  0196                     	;# 
  1239  0197                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020C                     	;# 
  1249  020E                     	;# 
  1250  028C                     	;# 
  1251  028E                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  0691                     	;# 
  1263  0692                     	;# 
  1264  0693                     	;# 
  1265  0694                     	;# 
  1266  0695                     	;# 
  1267  0D8E                     	;# 
  1268  0D8F                     	;# 
  1269  0D90                     	;# 
  1270  0D91                     	;# 
  1271  0D91                     	;# 
  1272  0D92                     	;# 
  1273  0D93                     	;# 
  1274  0D93                     	;# 
  1275  0D94                     	;# 
  1276  0D95                     	;# 
  1277  0D95                     	;# 
  1278  0D96                     	;# 
  1279  0D97                     	;# 
  1280  0D97                     	;# 
  1281  0D98                     	;# 
  1282  0D99                     	;# 
  1283  0D99                     	;# 
  1284  0D9A                     	;# 
  1285  0D9B                     	;# 
  1286  0D9C                     	;# 
  1287  0D9C                     	;# 
  1288  0D9D                     	;# 
  1289  0D9D                     	;# 
  1290  0D9E                     	;# 
  1291  0D9F                     	;# 
  1292  0DA0                     	;# 
  1293  0DA1                     	;# 
  1294  0DA1                     	;# 
  1295  0DA2                     	;# 
  1296  0DA3                     	;# 
  1297  0DA3                     	;# 
  1298  0DA4                     	;# 
  1299  0DA5                     	;# 
  1300  0DA5                     	;# 
  1301  0DA6                     	;# 
  1302  0DA7                     	;# 
  1303  0DA7                     	;# 
  1304  0DA8                     	;# 
  1305  0DA9                     	;# 
  1306  0DA9                     	;# 
  1307  0DAA                     	;# 
  1308  0DAB                     	;# 
  1309  0DAC                     	;# 
  1310  0DAC                     	;# 
  1311  0DAD                     	;# 
  1312  0DAD                     	;# 
  1313  0DAE                     	;# 
  1314  0DAF                     	;# 
  1315  0DB0                     	;# 
  1316  0DB1                     	;# 
  1317  0DB1                     	;# 
  1318  0DB2                     	;# 
  1319  0DB3                     	;# 
  1320  0DB3                     	;# 
  1321  0DB4                     	;# 
  1322  0DB5                     	;# 
  1323  0DB5                     	;# 
  1324  0DB6                     	;# 
  1325  0DB7                     	;# 
  1326  0DB7                     	;# 
  1327  0DB8                     	;# 
  1328  0DB9                     	;# 
  1329  0DB9                     	;# 
  1330  0DBA                     	;# 
  1331  0DBB                     	;# 
  1332  0DBC                     	;# 
  1333  0DBC                     	;# 
  1334  0DBD                     	;# 
  1335  0DBD                     	;# 
  1336  0DBE                     	;# 
  1337  0DBF                     	;# 
  1338  0DC0                     	;# 
  1339  0DC1                     	;# 
  1340  0DC1                     	;# 
  1341  0DC2                     	;# 
  1342  0DC3                     	;# 
  1343  0DC3                     	;# 
  1344  0DC4                     	;# 
  1345  0DC5                     	;# 
  1346  0DC5                     	;# 
  1347  0DC6                     	;# 
  1348  0DC7                     	;# 
  1349  0DC7                     	;# 
  1350  0DC8                     	;# 
  1351  0DC9                     	;# 
  1352  0DC9                     	;# 
  1353  0DCA                     	;# 
  1354  0DCB                     	;# 
  1355  0DCC                     	;# 
  1356  0DCC                     	;# 
  1357  0DCD                     	;# 
  1358  0DCD                     	;# 
  1359  0DCE                     	;# 
  1360  0DCF                     	;# 
  1361  0DD0                     	;# 
  1362  0E0F                     	;# 
  1363  0E10                     	;# 
  1364  0E11                     	;# 
  1365  0E12                     	;# 
  1366  0E13                     	;# 
  1367  0E14                     	;# 
  1368  0E15                     	;# 
  1369  0E16                     	;# 
  1370  0E17                     	;# 
  1371  0E90                     	;# 
  1372  0E91                     	;# 
  1373  0E92                     	;# 
  1374  0E94                     	;# 
  1375  0E95                     	;# 
  1376  0EA0                     	;# 
  1377  0EA1                     	;# 
  1378  0EA2                     	;# 
  1379  0EA3                     	;# 
  1380  0EA4                     	;# 
  1381  0EA5                     	;# 
  1382  0FE4                     	;# 
  1383  0FE5                     	;# 
  1384  0FE6                     	;# 
  1385  0FE7                     	;# 
  1386  0FE8                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEA                     	;# 
  1391  0FEB                     	;# 
  1392  0FED                     	;# 
  1393  0FEE                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000E                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0013                     	;# 
  1413  0015                     	;# 
  1414  0016                     	;# 
  1415  0016                     	;# 
  1416  0017                     	;# 
  1417  0018                     	;# 
  1418  0019                     	;# 
  1419  001A                     	;# 
  1420  001B                     	;# 
  1421  001C                     	;# 
  1422  008C                     	;# 
  1423  008E                     	;# 
  1424  0091                     	;# 
  1425  0092                     	;# 
  1426  0093                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0098                     	;# 
  1431  0099                     	;# 
  1432  009A                     	;# 
  1433  009B                     	;# 
  1434  009B                     	;# 
  1435  009C                     	;# 
  1436  009D                     	;# 
  1437  009E                     	;# 
  1438  009F                     	;# 
  1439  010C                     	;# 
  1440  010E                     	;# 
  1441  0111                     	;# 
  1442  0112                     	;# 
  1443  0113                     	;# 
  1444  0114                     	;# 
  1445  0115                     	;# 
  1446  0116                     	;# 
  1447  0117                     	;# 
  1448  0118                     	;# 
  1449  0119                     	;# 
  1450  018C                     	;# 
  1451  018E                     	;# 
  1452  0191                     	;# 
  1453  0191                     	;# 
  1454  0192                     	;# 
  1455  0193                     	;# 
  1456  0193                     	;# 
  1457  0194                     	;# 
  1458  0195                     	;# 
  1459  0196                     	;# 
  1460  0197                     	;# 
  1461  0199                     	;# 
  1462  019A                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019D                     	;# 
  1467  019E                     	;# 
  1468  019F                     	;# 
  1469  020C                     	;# 
  1470  020E                     	;# 
  1471  028C                     	;# 
  1472  028E                     	;# 
  1473  030C                     	;# 
  1474  030E                     	;# 
  1475  038C                     	;# 
  1476  038E                     	;# 
  1477  0391                     	;# 
  1478  0392                     	;# 
  1479  0393                     	;# 
  1480  0397                     	;# 
  1481  0398                     	;# 
  1482  0399                     	;# 
  1483  0691                     	;# 
  1484  0692                     	;# 
  1485  0693                     	;# 
  1486  0694                     	;# 
  1487  0695                     	;# 
  1488  0D8E                     	;# 
  1489  0D8F                     	;# 
  1490  0D90                     	;# 
  1491  0D91                     	;# 
  1492  0D91                     	;# 
  1493  0D92                     	;# 
  1494  0D93                     	;# 
  1495  0D93                     	;# 
  1496  0D94                     	;# 
  1497  0D95                     	;# 
  1498  0D95                     	;# 
  1499  0D96                     	;# 
  1500  0D97                     	;# 
  1501  0D97                     	;# 
  1502  0D98                     	;# 
  1503  0D99                     	;# 
  1504  0D99                     	;# 
  1505  0D9A                     	;# 
  1506  0D9B                     	;# 
  1507  0D9C                     	;# 
  1508  0D9C                     	;# 
  1509  0D9D                     	;# 
  1510  0D9D                     	;# 
  1511  0D9E                     	;# 
  1512  0D9F                     	;# 
  1513  0DA0                     	;# 
  1514  0DA1                     	;# 
  1515  0DA1                     	;# 
  1516  0DA2                     	;# 
  1517  0DA3                     	;# 
  1518  0DA3                     	;# 
  1519  0DA4                     	;# 
  1520  0DA5                     	;# 
  1521  0DA5                     	;# 
  1522  0DA6                     	;# 
  1523  0DA7                     	;# 
  1524  0DA7                     	;# 
  1525  0DA8                     	;# 
  1526  0DA9                     	;# 
  1527  0DA9                     	;# 
  1528  0DAA                     	;# 
  1529  0DAB                     	;# 
  1530  0DAC                     	;# 
  1531  0DAC                     	;# 
  1532  0DAD                     	;# 
  1533  0DAD                     	;# 
  1534  0DAE                     	;# 
  1535  0DAF                     	;# 
  1536  0DB0                     	;# 
  1537  0DB1                     	;# 
  1538  0DB1                     	;# 
  1539  0DB2                     	;# 
  1540  0DB3                     	;# 
  1541  0DB3                     	;# 
  1542  0DB4                     	;# 
  1543  0DB5                     	;# 
  1544  0DB5                     	;# 
  1545  0DB6                     	;# 
  1546  0DB7                     	;# 
  1547  0DB7                     	;# 
  1548  0DB8                     	;# 
  1549  0DB9                     	;# 
  1550  0DB9                     	;# 
  1551  0DBA                     	;# 
  1552  0DBB                     	;# 
  1553  0DBC                     	;# 
  1554  0DBC                     	;# 
  1555  0DBD                     	;# 
  1556  0DBD                     	;# 
  1557  0DBE                     	;# 
  1558  0DBF                     	;# 
  1559  0DC0                     	;# 
  1560  0DC1                     	;# 
  1561  0DC1                     	;# 
  1562  0DC2                     	;# 
  1563  0DC3                     	;# 
  1564  0DC3                     	;# 
  1565  0DC4                     	;# 
  1566  0DC5                     	;# 
  1567  0DC5                     	;# 
  1568  0DC6                     	;# 
  1569  0DC7                     	;# 
  1570  0DC7                     	;# 
  1571  0DC8                     	;# 
  1572  0DC9                     	;# 
  1573  0DC9                     	;# 
  1574  0DCA                     	;# 
  1575  0DCB                     	;# 
  1576  0DCC                     	;# 
  1577  0DCC                     	;# 
  1578  0DCD                     	;# 
  1579  0DCD                     	;# 
  1580  0DCE                     	;# 
  1581  0DCF                     	;# 
  1582  0DD0                     	;# 
  1583  0E0F                     	;# 
  1584  0E10                     	;# 
  1585  0E11                     	;# 
  1586  0E12                     	;# 
  1587  0E13                     	;# 
  1588  0E14                     	;# 
  1589  0E15                     	;# 
  1590  0E16                     	;# 
  1591  0E17                     	;# 
  1592  0E90                     	;# 
  1593  0E91                     	;# 
  1594  0E92                     	;# 
  1595  0E94                     	;# 
  1596  0E95                     	;# 
  1597  0EA0                     	;# 
  1598  0EA1                     	;# 
  1599  0EA2                     	;# 
  1600  0EA3                     	;# 
  1601  0EA4                     	;# 
  1602  0EA5                     	;# 
  1603  0FE4                     	;# 
  1604  0FE5                     	;# 
  1605  0FE6                     	;# 
  1606  0FE7                     	;# 
  1607  0FE8                     	;# 
  1608  0FE8                     	;# 
  1609  0FE9                     	;# 
  1610  0FEA                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEE                     	;# 
  1616  0FEF                     	;# 
  1617  0000                     	;# 
  1618  0001                     	;# 
  1619  0002                     	;# 
  1620  0003                     	;# 
  1621  0004                     	;# 
  1622  0005                     	;# 
  1623  0006                     	;# 
  1624  0007                     	;# 
  1625  0008                     	;# 
  1626  0009                     	;# 
  1627  000A                     	;# 
  1628  000B                     	;# 
  1629  000C                     	;# 
  1630  000E                     	;# 
  1631  0011                     	;# 
  1632  0012                     	;# 
  1633  0013                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008E                     	;# 
  1645  0091                     	;# 
  1646  0092                     	;# 
  1647  0093                     	;# 
  1648  0095                     	;# 
  1649  0096                     	;# 
  1650  0097                     	;# 
  1651  0098                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  009F                     	;# 
  1660  010C                     	;# 
  1661  010E                     	;# 
  1662  0111                     	;# 
  1663  0112                     	;# 
  1664  0113                     	;# 
  1665  0114                     	;# 
  1666  0115                     	;# 
  1667  0116                     	;# 
  1668  0117                     	;# 
  1669  0118                     	;# 
  1670  0119                     	;# 
  1671  018C                     	;# 
  1672  018E                     	;# 
  1673  0191                     	;# 
  1674  0191                     	;# 
  1675  0192                     	;# 
  1676  0193                     	;# 
  1677  0193                     	;# 
  1678  0194                     	;# 
  1679  0195                     	;# 
  1680  0196                     	;# 
  1681  0197                     	;# 
  1682  0199                     	;# 
  1683  019A                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019C                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019F                     	;# 
  1690  020C                     	;# 
  1691  020E                     	;# 
  1692  028C                     	;# 
  1693  028E                     	;# 
  1694  030C                     	;# 
  1695  030E                     	;# 
  1696  038C                     	;# 
  1697  038E                     	;# 
  1698  0391                     	;# 
  1699  0392                     	;# 
  1700  0393                     	;# 
  1701  0397                     	;# 
  1702  0398                     	;# 
  1703  0399                     	;# 
  1704  0691                     	;# 
  1705  0692                     	;# 
  1706  0693                     	;# 
  1707  0694                     	;# 
  1708  0695                     	;# 
  1709  0D8E                     	;# 
  1710  0D8F                     	;# 
  1711  0D90                     	;# 
  1712  0D91                     	;# 
  1713  0D91                     	;# 
  1714  0D92                     	;# 
  1715  0D93                     	;# 
  1716  0D93                     	;# 
  1717  0D94                     	;# 
  1718  0D95                     	;# 
  1719  0D95                     	;# 
  1720  0D96                     	;# 
  1721  0D97                     	;# 
  1722  0D97                     	;# 
  1723  0D98                     	;# 
  1724  0D99                     	;# 
  1725  0D99                     	;# 
  1726  0D9A                     	;# 
  1727  0D9B                     	;# 
  1728  0D9C                     	;# 
  1729  0D9C                     	;# 
  1730  0D9D                     	;# 
  1731  0D9D                     	;# 
  1732  0D9E                     	;# 
  1733  0D9F                     	;# 
  1734  0DA0                     	;# 
  1735  0DA1                     	;# 
  1736  0DA1                     	;# 
  1737  0DA2                     	;# 
  1738  0DA3                     	;# 
  1739  0DA3                     	;# 
  1740  0DA4                     	;# 
  1741  0DA5                     	;# 
  1742  0DA5                     	;# 
  1743  0DA6                     	;# 
  1744  0DA7                     	;# 
  1745  0DA7                     	;# 
  1746  0DA8                     	;# 
  1747  0DA9                     	;# 
  1748  0DA9                     	;# 
  1749  0DAA                     	;# 
  1750  0DAB                     	;# 
  1751  0DAC                     	;# 
  1752  0DAC                     	;# 
  1753  0DAD                     	;# 
  1754  0DAD                     	;# 
  1755  0DAE                     	;# 
  1756  0DAF                     	;# 
  1757  0DB0                     	;# 
  1758  0DB1                     	;# 
  1759  0DB1                     	;# 
  1760  0DB2                     	;# 
  1761  0DB3                     	;# 
  1762  0DB3                     	;# 
  1763  0DB4                     	;# 
  1764  0DB5                     	;# 
  1765  0DB5                     	;# 
  1766  0DB6                     	;# 
  1767  0DB7                     	;# 
  1768  0DB7                     	;# 
  1769  0DB8                     	;# 
  1770  0DB9                     	;# 
  1771  0DB9                     	;# 
  1772  0DBA                     	;# 
  1773  0DBB                     	;# 
  1774  0DBC                     	;# 
  1775  0DBC                     	;# 
  1776  0DBD                     	;# 
  1777  0DBD                     	;# 
  1778  0DBE                     	;# 
  1779  0DBF                     	;# 
  1780  0DC0                     	;# 
  1781  0DC1                     	;# 
  1782  0DC1                     	;# 
  1783  0DC2                     	;# 
  1784  0DC3                     	;# 
  1785  0DC3                     	;# 
  1786  0DC4                     	;# 
  1787  0DC5                     	;# 
  1788  0DC5                     	;# 
  1789  0DC6                     	;# 
  1790  0DC7                     	;# 
  1791  0DC7                     	;# 
  1792  0DC8                     	;# 
  1793  0DC9                     	;# 
  1794  0DC9                     	;# 
  1795  0DCA                     	;# 
  1796  0DCB                     	;# 
  1797  0DCC                     	;# 
  1798  0DCC                     	;# 
  1799  0DCD                     	;# 
  1800  0DCD                     	;# 
  1801  0DCE                     	;# 
  1802  0DCF                     	;# 
  1803  0DD0                     	;# 
  1804  0E0F                     	;# 
  1805  0E10                     	;# 
  1806  0E11                     	;# 
  1807  0E12                     	;# 
  1808  0E13                     	;# 
  1809  0E14                     	;# 
  1810  0E15                     	;# 
  1811  0E16                     	;# 
  1812  0E17                     	;# 
  1813  0E90                     	;# 
  1814  0E91                     	;# 
  1815  0E92                     	;# 
  1816  0E94                     	;# 
  1817  0E95                     	;# 
  1818  0EA0                     	;# 
  1819  0EA1                     	;# 
  1820  0EA2                     	;# 
  1821  0EA3                     	;# 
  1822  0EA4                     	;# 
  1823  0EA5                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEA                     	;# 
  1833  0FEB                     	;# 
  1834  0FED                     	;# 
  1835  0FEE                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;_PD
  1838                           
  1839                           	psect	idataCOMMON
  1840  0000                     __pidataCOMMON:	
  1841                           
  1842                           	psect	idataBANK1
  1843  0000                     __pidataBANK1:	
  1844                           
  1845                           	psect	idataBANK2
  1846  0000                     __pidataBANK2:	
  1847                           
  1848                           	psect	stringtext
  1849  0763                     __pstringtext:	
  1850  0763                     _PWM:	
  1851  0763  3400               	retlw	0
  1852  0764  3400               	retlw	0
  1853  0765  3430               	retlw	48
  1854  0766  3400               	retlw	0
  1855  0767  3431               	retlw	49
  1856  0768  3400               	retlw	0
  1857  0769  3432               	retlw	50
  1858  076A  3400               	retlw	0
  1859  076B  3433               	retlw	51
  1860  076C  3400               	retlw	0
  1861  076D  3434               	retlw	52
  1862  076E  3400               	retlw	0
  1863  076F  3436               	retlw	54
  1864  0770  3400               	retlw	0
  1865  0771  3437               	retlw	55
  1866  0772  3400               	retlw	0
  1867  0773  3438               	retlw	56
  1868  0774  3400               	retlw	0
  1869  0775  343A               	retlw	58
  1870  0776  3400               	retlw	0
  1871  0777  343B               	retlw	59
  1872  0778  3400               	retlw	0
  1873  0779  343C               	retlw	60
  1874  077A  3400               	retlw	0
  1875  077B  343E               	retlw	62
  1876  077C  3400               	retlw	0
  1877  077D  343F               	retlw	63
  1878  077E  3400               	retlw	0
  1879  077F  3441               	retlw	65
  1880  0780  3400               	retlw	0
  1881  0781  3443               	retlw	67
  1882  0782  3400               	retlw	0
  1883  0783  3444               	retlw	68
  1884  0784  3400               	retlw	0
  1885  0785  3446               	retlw	70
  1886  0786  3400               	retlw	0
  1887  0787  3448               	retlw	72
  1888  0788  3400               	retlw	0
  1889  0789  3449               	retlw	73
  1890  078A  3400               	retlw	0
  1891  078B  344B               	retlw	75
  1892  078C  3400               	retlw	0
  1893  078D  344D               	retlw	77
  1894  078E  3400               	retlw	0
  1895  078F  344F               	retlw	79
  1896  0790  3400               	retlw	0
  1897  0791  3451               	retlw	81
  1898  0792  3400               	retlw	0
  1899  0793  3453               	retlw	83
  1900  0794  3400               	retlw	0
  1901  0795  3455               	retlw	85
  1902  0796  3400               	retlw	0
  1903  0797  3457               	retlw	87
  1904  0798  3400               	retlw	0
  1905  0799  3459               	retlw	89
  1906  079A  3400               	retlw	0
  1907  079B  345B               	retlw	91
  1908  079C  3400               	retlw	0
  1909  079D  345D               	retlw	93
  1910  079E  3400               	retlw	0
  1911  079F  3460               	retlw	96
  1912  07A0  3400               	retlw	0
  1913  07A1  3462               	retlw	98
  1914  07A2  3400               	retlw	0
  1915  07A3  3464               	retlw	100
  1916  07A4  3400               	retlw	0
  1917  07A5  3467               	retlw	103
  1918  07A6  3400               	retlw	0
  1919  07A7  3469               	retlw	105
  1920  07A8  3400               	retlw	0
  1921  07A9  346C               	retlw	108
  1922  07AA  3400               	retlw	0
  1923  07AB  346E               	retlw	110
  1924  07AC  3400               	retlw	0
  1925  07AD  3471               	retlw	113
  1926  07AE  3400               	retlw	0
  1927  07AF  3474               	retlw	116
  1928  07B0  3400               	retlw	0
  1929  07B1  3477               	retlw	119
  1930  07B2  3400               	retlw	0
  1931  07B3  3479               	retlw	121
  1932  07B4  3400               	retlw	0
  1933  07B5  347C               	retlw	124
  1934  07B6  3400               	retlw	0
  1935  07B7  347F               	retlw	127
  1936  07B8  3400               	retlw	0
  1937  07B9  3483               	retlw	131
  1938  07BA  3400               	retlw	0
  1939  07BB  3486               	retlw	134
  1940  07BC  3400               	retlw	0
  1941  07BD  3489               	retlw	137
  1942  07BE  3400               	retlw	0
  1943  07BF  348C               	retlw	140
  1944  07C0  3400               	retlw	0
  1945  07C1  3490               	retlw	144
  1946  07C2  3400               	retlw	0
  1947  07C3  3493               	retlw	147
  1948  07C4  3400               	retlw	0
  1949  07C5  3497               	retlw	151
  1950  07C6  3400               	retlw	0
  1951  07C7  349A               	retlw	154
  1952  07C8  3400               	retlw	0
  1953  07C9  349E               	retlw	158
  1954  07CA  3400               	retlw	0
  1955  07CB  34A2               	retlw	162
  1956  07CC  3400               	retlw	0
  1957  07CD  34A6               	retlw	166
  1958  07CE  3400               	retlw	0
  1959  07CF  34AA               	retlw	170
  1960  07D0  3400               	retlw	0
  1961  07D1  34AE               	retlw	174
  1962  07D2  3400               	retlw	0
  1963  07D3  34B2               	retlw	178
  1964  07D4  3400               	retlw	0
  1965  07D5  34B7               	retlw	183
  1966  07D6  3400               	retlw	0
  1967  07D7  34BB               	retlw	187
  1968  07D8  3400               	retlw	0
  1969  07D9  34C0               	retlw	192
  1970  07DA  3400               	retlw	0
  1971  07DB  34C4               	retlw	196
  1972  07DC  3400               	retlw	0
  1973  07DD  34C9               	retlw	201
  1974  07DE  3400               	retlw	0
  1975  07DF  34CE               	retlw	206
  1976  07E0  3400               	retlw	0
  1977  07E1  34D3               	retlw	211
  1978  07E2  3400               	retlw	0
  1979  07E3  34D8               	retlw	216
  1980  07E4  3400               	retlw	0
  1981  07E5  34DD               	retlw	221
  1982  07E6  3400               	retlw	0
  1983  07E7  34E3               	retlw	227
  1984  07E8  3400               	retlw	0
  1985  07E9  34E8               	retlw	232
  1986  07EA  3400               	retlw	0
  1987  07EB  34EE               	retlw	238
  1988  07EC  3400               	retlw	0
  1989  07ED  34F3               	retlw	243
  1990  07EE  3400               	retlw	0
  1991  07EF  34F9               	retlw	249
  1992  07F0  3400               	retlw	0
  1993  07F1  34FF               	retlw	255
  1994  07F2  3400               	retlw	0
  1995  07F3  3406               	retlw	6
  1996  07F4  3401               	retlw	1
  1997  07F5  340C               	retlw	12
  1998  07F6  3401               	retlw	1
  1999  07F7  3412               	retlw	18
  2000  07F8  3401               	retlw	1
  2001  07F9  3419               	retlw	25
  2002  07FA  3401               	retlw	1
  2003  07FB  3420               	retlw	32
  2004  07FC  3401               	retlw	1
  2005  07FD  3427               	retlw	39
  2006  07FE  3401               	retlw	1
  2007  07FF  342E               	retlw	46
  2008  0800  3401               	retlw	1
  2009  0801  3435               	retlw	53
  2010  0802  3401               	retlw	1
  2011  0803  343D               	retlw	61
  2012  0804  3401               	retlw	1
  2013  0805  3444               	retlw	68
  2014  0806  3401               	retlw	1
  2015  0807  344C               	retlw	76
  2016  0808  3401               	retlw	1
  2017  0809  3454               	retlw	84
  2018  080A  3401               	retlw	1
  2019  080B  345D               	retlw	93
  2020  080C  3401               	retlw	1
  2021  080D  3465               	retlw	101
  2022  080E  3401               	retlw	1
  2023  080F  346E               	retlw	110
  2024  0810  3401               	retlw	1
  2025  0811  3477               	retlw	119
  2026  0812  3401               	retlw	1
  2027  0813  3480               	retlw	128
  2028  0814  3401               	retlw	1
  2029  0815  3489               	retlw	137
  2030  0816  3401               	retlw	1
  2031  0817  3492               	retlw	146
  2032  0818  3401               	retlw	1
  2033  0819  349C               	retlw	156
  2034  081A  3401               	retlw	1
  2035  081B  34A6               	retlw	166
  2036  081C  3401               	retlw	1
  2037  081D  34B0               	retlw	176
  2038  081E  3401               	retlw	1
  2039  081F  34BB               	retlw	187
  2040  0820  3401               	retlw	1
  2041  0821  34C6               	retlw	198
  2042  0822  3401               	retlw	1
  2043  0823  34D1               	retlw	209
  2044  0824  3401               	retlw	1
  2045  0825  34DC               	retlw	220
  2046  0826  3401               	retlw	1
  2047  0827  34E7               	retlw	231
  2048  0828  3401               	retlw	1
  2049  0829  34F3               	retlw	243
  2050  082A  3401               	retlw	1
  2051  082B  34FF               	retlw	255
  2052  082C  3401               	retlw	1
  2053  082D  340C               	retlw	12
  2054  082E  3402               	retlw	2
  2055  082F  3418               	retlw	24
  2056  0830  3402               	retlw	2
  2057  0831  3425               	retlw	37
  2058  0832  3402               	retlw	2
  2059  0833  3433               	retlw	51
  2060  0834  3402               	retlw	2
  2061  0835  3440               	retlw	64
  2062  0836  3402               	retlw	2
  2063  0837  344E               	retlw	78
  2064  0838  3402               	retlw	2
  2065  0839  345C               	retlw	92
  2066  083A  3402               	retlw	2
  2067  083B  346B               	retlw	107
  2068  083C  3402               	retlw	2
  2069  083D  347A               	retlw	122
  2070  083E  3402               	retlw	2
  2071  083F  3489               	retlw	137
  2072  0840  3402               	retlw	2
  2073  0841  3499               	retlw	153
  2074  0842  3402               	retlw	2
  2075  0843  34A9               	retlw	169
  2076  0844  3402               	retlw	2
  2077  0845  34BA               	retlw	186
  2078  0846  3402               	retlw	2
  2079  0847  34CB               	retlw	203
  2080  0848  3402               	retlw	2
  2081  0849  34DC               	retlw	220
  2082  084A  3402               	retlw	2
  2083  084B  34EE               	retlw	238
  2084  084C  3402               	retlw	2
  2085  084D  3400               	retlw	0
  2086  084E  3403               	retlw	3
  2087  084F  3412               	retlw	18
  2088  0850  3403               	retlw	3
  2089  0851  3425               	retlw	37
  2090  0852  3403               	retlw	3
  2091  0853  3439               	retlw	57
  2092  0854  3403               	retlw	3
  2093  0855  344D               	retlw	77
  2094  0856  3403               	retlw	3
  2095  0857  3461               	retlw	97
  2096  0858  3403               	retlw	3
  2097  0859  3476               	retlw	118
  2098  085A  3403               	retlw	3
  2099  085B  348C               	retlw	140
  2100  085C  3403               	retlw	3
  2101  085D  34A2               	retlw	162
  2102  085E  3403               	retlw	3
  2103  085F  34B8               	retlw	184
  2104  0860  3403               	retlw	3
  2105  0861  34CF               	retlw	207
  2106  0862  3403               	retlw	3
  2107  0863  34E7               	retlw	231
  2108  0864  3403               	retlw	3
  2109  0865  34FF               	retlw	255
  2110  0866  3403               	retlw	3
  2111  0867  3418               	retlw	24
  2112  0868  3404               	retlw	4
  2113  0869  3431               	retlw	49
  2114  086A  3404               	retlw	4
  2115  086B  344B               	retlw	75
  2116  086C  3404               	retlw	4
  2117  086D  3466               	retlw	102
  2118  086E  3404               	retlw	4
  2119  086F  3481               	retlw	129
  2120  0870  3404               	retlw	4
  2121  0871  349D               	retlw	157
  2122  0872  3404               	retlw	4
  2123  0873  34B9               	retlw	185
  2124  0874  3404               	retlw	4
  2125  0875  34D7               	retlw	215
  2126  0876  3404               	retlw	4
  2127  0877  34F5               	retlw	245
  2128  0878  3404               	retlw	4
  2129  0879  3413               	retlw	19
  2130  087A  3405               	retlw	5
  2131  087B  3433               	retlw	51
  2132  087C  3405               	retlw	5
  2133  087D  3453               	retlw	83
  2134  087E  3405               	retlw	5
  2135  087F  3474               	retlw	116
  2136  0880  3405               	retlw	5
  2137  0881  3496               	retlw	150
  2138  0882  3405               	retlw	5
  2139  0883  34B8               	retlw	184
  2140  0884  3405               	retlw	5
  2141  0885  34DC               	retlw	220
  2142  0886  3405               	retlw	5
  2143  0887  3400               	retlw	0
  2144  0888  3406               	retlw	6
  2145  0889  3425               	retlw	37
  2146  088A  3406               	retlw	6
  2147  088B  344B               	retlw	75
  2148  088C  3406               	retlw	6
  2149  088D  3472               	retlw	114
  2150  088E  3406               	retlw	6
  2151  088F  349A               	retlw	154
  2152  0890  3406               	retlw	6
  2153  0891  34C3               	retlw	195
  2154  0892  3406               	retlw	6
  2155  0893  34ED               	retlw	237
  2156  0894  3406               	retlw	6
  2157  0895  3418               	retlw	24
  2158  0896  3407               	retlw	7
  2159  0897  3444               	retlw	68
  2160  0898  3407               	retlw	7
  2161  0899  3471               	retlw	113
  2162  089A  3407               	retlw	7
  2163  089B  349F               	retlw	159
  2164  089C  3407               	retlw	7
  2165  089D  34CE               	retlw	206
  2166  089E  3407               	retlw	7
  2167  089F  34FF               	retlw	255
  2168  08A0  3407               	retlw	7
  2169  08A1  3430               	retlw	48
  2170  08A2  3408               	retlw	8
  2171  08A3  3463               	retlw	99
  2172  08A4  3408               	retlw	8
  2173  08A5  3497               	retlw	151
  2174  08A6  3408               	retlw	8
  2175  08A7  34CC               	retlw	204
  2176  08A8  3408               	retlw	8
  2177  08A9  3403               	retlw	3
  2178  08AA  3409               	retlw	9
  2179  08AB  343B               	retlw	59
  2180  08AC  3409               	retlw	9
  2181  08AD  3474               	retlw	116
  2182  08AE  3409               	retlw	9
  2183  08AF  34AE               	retlw	174
  2184  08B0  3409               	retlw	9
  2185  08B1  34EA               	retlw	234
  2186  08B2  3409               	retlw	9
  2187  08B3  3428               	retlw	40
  2188  08B4  340A               	retlw	10
  2189  08B5  3467               	retlw	103
  2190  08B6  340A               	retlw	10
  2191  08B7  34A7               	retlw	167
  2192  08B8  340A               	retlw	10
  2193  08B9  34E9               	retlw	233
  2194  08BA  340A               	retlw	10
  2195  08BB  342D               	retlw	45
  2196  08BC  340B               	retlw	11
  2197  08BD  3472               	retlw	114
  2198  08BE  340B               	retlw	11
  2199  08BF  34B9               	retlw	185
  2200  08C0  340B               	retlw	11
  2201  08C1  3401               	retlw	1
  2202  08C2  340C               	retlw	12
  2203  08C3  344C               	retlw	76
  2204  08C4  340C               	retlw	12
  2205  08C5  3498               	retlw	152
  2206  08C6  340C               	retlw	12
  2207  08C7  34E6               	retlw	230
  2208  08C8  340C               	retlw	12
  2209  08C9  3436               	retlw	54
  2210  08CA  340D               	retlw	13
  2211  08CB  3488               	retlw	136
  2212  08CC  340D               	retlw	13
  2213  08CD  34DB               	retlw	219
  2214  08CE  340D               	retlw	13
  2215  08CF  3431               	retlw	49
  2216  08D0  340E               	retlw	14
  2217  08D1  3489               	retlw	137
  2218  08D2  340E               	retlw	14
  2219  08D3  34E3               	retlw	227
  2220  08D4  340E               	retlw	14
  2221  08D5  343F               	retlw	63
  2222  08D6  340F               	retlw	15
  2223  08D7  349E               	retlw	158
  2224  08D8  340F               	retlw	15
  2225  08D9  34FE               	retlw	254
  2226  08DA  340F               	retlw	15
  2227  08DB  3462               	retlw	98
  2228  08DC  3410               	retlw	16
  2229  08DD  34C7               	retlw	199
  2230  08DE  3410               	retlw	16
  2231  08DF  342F               	retlw	47
  2232  08E0  3411               	retlw	17
  2233  08E1  3499               	retlw	153
  2234  08E2  3411               	retlw	17
  2235  08E3  3406               	retlw	6
  2236  08E4  3412               	retlw	18
  2237  08E5  3476               	retlw	118
  2238  08E6  3412               	retlw	18
  2239  08E7  34E8               	retlw	232
  2240  08E8  3412               	retlw	18
  2241  08E9  345D               	retlw	93
  2242  08EA  3413               	retlw	19
  2243  08EB  34D5               	retlw	213
  2244  08EC  3413               	retlw	19
  2245  08ED  3450               	retlw	80
  2246  08EE  3414               	retlw	20
  2247  08EF  34CE               	retlw	206
  2248  08F0  3414               	retlw	20
  2249  08F1  344F               	retlw	79
  2250  08F2  3415               	retlw	21
  2251  08F3  34D3               	retlw	211
  2252  08F4  3415               	retlw	21
  2253  08F5  345A               	retlw	90
  2254  08F6  3416               	retlw	22
  2255  08F7  34E5               	retlw	229
  2256  08F8  3416               	retlw	22
  2257  08F9  3472               	retlw	114
  2258  08FA  3417               	retlw	23
  2259  08FB  3404               	retlw	4
  2260  08FC  3418               	retlw	24
  2261  08FD  3498               	retlw	152
  2262  08FE  3418               	retlw	24
  2263  08FF  3431               	retlw	49
  2264  0900  3419               	retlw	25
  2265  0901  34CD               	retlw	205
  2266  0902  3419               	retlw	25
  2267  0903  346D               	retlw	109
  2268  0904  341A               	retlw	26
  2269  0905  3410               	retlw	16
  2270  0906  341B               	retlw	27
  2271  0907  34B8               	retlw	184
  2272  0908  341B               	retlw	27
  2273  0909  3463               	retlw	99
  2274  090A  341C               	retlw	28
  2275  090B  3413               	retlw	19
  2276  090C  341D               	retlw	29
  2277  090D  34C7               	retlw	199
  2278  090E  341D               	retlw	29
  2279  090F  3480               	retlw	128
  2280  0910  341E               	retlw	30
  2281  0911  343D               	retlw	61
  2282  0912  341F               	retlw	31
  2283  0913  34FE               	retlw	254
  2284  0914  341F               	retlw	31
  2285  0915  34C4               	retlw	196
  2286  0916  3420               	retlw	32
  2287  0917  348F               	retlw	143
  2288  0918  3421               	retlw	33
  2289  0919  345F               	retlw	95
  2290  091A  3422               	retlw	34
  2291  091B  3434               	retlw	52
  2292  091C  3423               	retlw	35
  2293  091D  340E               	retlw	14
  2294  091E  3424               	retlw	36
  2295  091F  34ED               	retlw	237
  2296  0920  3424               	retlw	36
  2297  0921  34D2               	retlw	210
  2298  0922  3425               	retlw	37
  2299  0923  34BC               	retlw	188
  2300  0924  3426               	retlw	38
  2301  0925  34AC               	retlw	172
  2302  0926  3427               	retlw	39
  2303  0927  34A2               	retlw	162
  2304  0928  3428               	retlw	40
  2305  0929  349E               	retlw	158
  2306  092A  3429               	retlw	41
  2307  092B  349F               	retlw	159
  2308  092C  342A               	retlw	42
  2309  092D  34A7               	retlw	167
  2310  092E  342B               	retlw	43
  2311  092F  34B6               	retlw	182
  2312  0930  342C               	retlw	44
  2313  0931  34CB               	retlw	203
  2314  0932  342D               	retlw	45
  2315  0933  34E6               	retlw	230
  2316  0934  342E               	retlw	46
  2317  0935  3409               	retlw	9
  2318  0936  3430               	retlw	48
  2319  0937  3432               	retlw	50
  2320  0938  3431               	retlw	49
  2321  0939  3463               	retlw	99
  2322  093A  3432               	retlw	50
  2323  093B  349B               	retlw	155
  2324  093C  3433               	retlw	51
  2325  093D  34DB               	retlw	219
  2326  093E  3434               	retlw	52
  2327  093F  3422               	retlw	34
  2328  0940  3436               	retlw	54
  2329  0941  3471               	retlw	113
  2330  0942  3437               	retlw	55
  2331  0943  34C9               	retlw	201
  2332  0944  3438               	retlw	56
  2333  0945  3429               	retlw	41
  2334  0946  343A               	retlw	58
  2335  0947  3491               	retlw	145
  2336  0948  343B               	retlw	59
  2337  0949  3402               	retlw	2
  2338  094A  343D               	retlw	61
  2339  094B  347C               	retlw	124
  2340  094C  343E               	retlw	62
  2341  094D  34FF               	retlw	255
  2342  094E  343F               	retlw	63
  2343  094F  34FF               	retlw	255
  2344  0950  343F               	retlw	63
  2345  0951  34FF               	retlw	255
  2346  0952  343F               	retlw	63
  2347  0953  34FF               	retlw	255
  2348  0954  343F               	retlw	63
  2349  0955  34FF               	retlw	255
  2350  0956  343F               	retlw	63
  2351  0957  34FF               	retlw	255
  2352  0958  343F               	retlw	63
  2353  0959  34FF               	retlw	255
  2354  095A  343F               	retlw	63
  2355  095B  34FF               	retlw	255
  2356  095C  343F               	retlw	63
  2357  095D  34FF               	retlw	255
  2358  095E  343F               	retlw	63
  2359  095F  34FF               	retlw	255
  2360  0960  343F               	retlw	63
  2361  0961  34FF               	retlw	255
  2362  0962  343F               	retlw	63
  2363  0963                     __end_of_PWM:	
  2364  0963                     _UID:	
  2365  0963  344D               	retlw	77
  2366  0964  3452               	retlw	82
  2367  0965  3417               	retlw	23
  2368  0966  34C3               	retlw	195
  2369  0967  3410               	retlw	16
  2370  0968  3492               	retlw	146
  2371  0969                     __end_of_UID:	
  2372                           
  2373                           	psect	nvBANK2
  2374  016E                     __pnvBANK2:	
  2375  016E                     _TimerState:	
  2376  016E                     	ds	1
  2377  0016                     _TMR1	set	22
  2378  0018                     _T1CON	set	24
  2379  000B                     _INTCON	set	11
  2380  001C                     _T2CON	set	28
  2381  001B                     _PR2	set	27
  2382  0065                     _RA5	set	101
  2383  008C                     _TXIF	set	140
  2384  0088                     _TMR1IF	set	136
  2385  008E                     _ADIF	set	142
  2386  005E                     _PEIE	set	94
  2387  008D                     _RCIF	set	141
  2388  0072                     _RC2	set	114
  2389  0071                     _RC1	set	113
  2390  0070                     _RC0	set	112
  2391  0062                     _RA2	set	98
  2392  009C                     _ADRESH	set	156
  2393  009E                     _ADCON1	set	158
  2394  009D                     _ADCON0	set	157
  2395  0098                     _OSCTUNE	set	152
  2396  0099                     _OSCCON	set	153
  2397  048E                     _ADIE	set	1166
  2398  048C                     _TXIE	set	1164
  2399  0474                     _TRISC4	set	1140
  2400  0488                     _TMR1IE	set	1160
  2401  04E9                     _GO_nDONE	set	1257
  2402  0464                     _TRISA4	set	1124
  2403  048D                     _RCIE	set	1165
  2404  0475                     _TRISC5	set	1141
  2405  0473                     _TRISC3	set	1139
  2406  0472                     _TRISC2	set	1138
  2407  0471                     _TRISC1	set	1137
  2408  0470                     _TRISC0	set	1136
  2409  0462                     _TRISA2	set	1122
  2410  0873                     _LATC3	set	2163
  2411  0874                     _LATC4	set	2164
  2412  019A                     _TXREG	set	410
  2413  0199                     _RCREG	set	409
  2414  019B                     _SPBRGL	set	411
  2415  019C                     _SPBRGH	set	412
  2416  019F                     _BAUDCON	set	415
  2417  019D                     _RCSTA	set	413
  2418  0CF0                     _TX9D	set	3312
  2419  0CF6                     _TX9	set	3318
  2420  0CEF                     _SPEN	set	3311
  2421  0CF5                     _TXEN	set	3317
  2422  0C64                     _ANSA4	set	3172
  2423  0CEA                     _FERR	set	3306
  2424  0CF2                     _BRGH	set	3314
  2425  0CF4                     _SYNC	set	3316
  2426  0C73                     _ANSC3	set	3187
  2427  0C72                     _ANSC2	set	3186
  2428  0C71                     _ANSC1	set	3185
  2429  0C70                     _ANSC0	set	3184
  2430  0C62                     _ANSA2	set	3170
  2431  0DCB                     _PWM4CON	set	3531
  2432  0DBB                     _PWM3CON	set	3515
  2433  0DAB                     _PWM2CON	set	3499
  2434  0D9B                     _PWM1CON	set	3483
  2435  0DCE                     _PWM4CLKCON	set	3534
  2436  0DBE                     _PWM3CLKCON	set	3518
  2437  0DAE                     _PWM2CLKCON	set	3502
  2438  0D9E                     _PWM1CLKCON	set	3486
  2439  0DC5                     _PWM4PRL	set	3525
  2440  0DB5                     _PWM3PRL	set	3509
  2441  0DA5                     _PWM2PRL	set	3493
  2442  0D95                     _PWM1PRL	set	3477
  2443  0DC6                     _PWM4PRH	set	3526
  2444  0DB6                     _PWM3PRH	set	3510
  2445  0DA6                     _PWM2PRH	set	3494
  2446  0D96                     _PWM1PRH	set	3478
  2447  0DC1                     _PWM4PHL	set	3521
  2448  0DB1                     _PWM3PHL	set	3505
  2449  0DA1                     _PWM2PHL	set	3489
  2450  0D91                     _PWM1PHL	set	3473
  2451  0DC2                     _PWM4PHH	set	3522
  2452  0DB2                     _PWM3PHH	set	3506
  2453  0DA2                     _PWM2PHH	set	3490
  2454  0D92                     _PWM1PHH	set	3474
  2455  0DCF                     _PWM4LDCON	set	3535
  2456  0DBF                     _PWM3LDCON	set	3519
  2457  0DAF                     _PWM2LDCON	set	3503
  2458  0D9F                     _PWM1LDCON	set	3487
  2459  0DC3                     _PWM4DCL	set	3523
  2460  0DB3                     _PWM3DCL	set	3507
  2461  0DA3                     _PWM2DCL	set	3491
  2462  0D93                     _PWM1DCL	set	3475
  2463  0DC4                     _PWM4DCH	set	3524
  2464  0DB4                     _PWM3DCH	set	3508
  2465  0DA4                     _PWM2DCH	set	3492
  2466  0D94                     _PWM1DCH	set	3476
  2467  0E15                     _RXPPS	set	3605
  2468  0EA4                     _RC4PPS	set	3748
  2469  0EA2                     _RC2PPS	set	3746
  2470  0EA1                     _RC1PPS	set	3745
  2471  0EA0                     _RC0PPS	set	3744
  2472  0E92                     _RA2PPS	set	3730
  2473                           
  2474                           ; #config settings
  2475  0000                     
  2476                           	psect	cinit
  2477  0015                     start_initialization:	
  2478  0015                     __initialization:		;BIGRAM
  2479                           
  2480                           ;initializer for _DMXPeriod
  2481  0015  3064               	movlw	100
  2482  0016  00FB               	movwf	__pdataCOMMON& (0+127)
  2483                           
  2484                           ; Initialize objects allocated to BANK1
  2485  0017  0021               	movlb	1	; select bank1
  2486                           
  2487                           ;initializer for _DMX_sumRepeat
  2488  0018  3002               	movlw	2
  2489  0019  00EC               	movwf	__pdataBANK1& (0+127)
  2490  001A  01ED               	clrf	(__pdataBANK1+1)& (0+127)
  2491  001B  01EE               	clrf	(__pdataBANK1+2)& (0+127)
  2492  001C  01EF               	clrf	(__pdataBANK1+3)& (0+127)
  2493                           
  2494                           ; Initialize objects allocated to BANK2
  2495  001D  0022               	movlb	2	; select bank2
  2496                           
  2497                           ;initializer for _DMX_Repeat
  2498  001E  3001               	movlw	1
  2499  001F  00E6               	movwf	__pdataBANK2& (0+127)
  2500  0020  308C               	movlw	140
  2501  0021  01E7               	clrf	(__pdataBANK2+1)& (0+127)
  2502  0022  01E8               	clrf	(__pdataBANK2+2)& (0+127)
  2503  0023  01E9               	clrf	(__pdataBANK2+3)& (0+127)
  2504  0024  01EA               	clrf	(__pdataBANK2+4)& (0+127)
  2505  0025  01EB               	clrf	(__pdataBANK2+5)& (0+127)
  2506  0026  01EC               	clrf	(__pdataBANK2+6)& (0+127)
  2507  0027  01ED               	clrf	(__pdataBANK2+7)& (0+127)
  2508                           
  2509                           ; Clear objects allocated to BIGRAM
  2510  0028  0084               	movwf	4
  2511  0029  3021               	movlw	33
  2512  002A  0085               	movwf	5
  2513  002B  3064               	movlw	100
  2514  002C  00FE               	movwf	126
  2515  002D  01FF               	clrf	127
  2516  002E  318A  2262  3180   	fcall	clear_ram0
  2517                           
  2518                           ; Clear objects allocated to COMMON
  2519  0031  01F6               	clrf	__pbssCOMMON& (0+127)
  2520  0032  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2521  0033  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2522  0034  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2523  0035  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2524                           
  2525                           ; Clear objects allocated to BANK0
  2526  0036  0020               	movlb	0	; select bank0
  2527  0037  30A0               	movlw	low __pbssBANK1
  2528  0038  01EA               	clrf	__pbssBANK0& (0+127)
  2529  0039  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2530  003A  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2531                           
  2532                           ; Clear objects allocated to BANK1
  2533  003B  0084               	movwf	4
  2534  003C  3000               	movlw	high __pbssBANK1
  2535  003D  0085               	movwf	5
  2536  003E  3044               	movlw	68
  2537  003F  00FE               	movwf	126
  2538  0040  01FF               	clrf	127
  2539  0041  318A  2262  3180   	fcall	clear_ram0
  2540                           
  2541                           ; Clear objects allocated to BANK2
  2542  0044  3020               	movlw	low __pbssBANK2
  2543  0045  0084               	movwf	4
  2544  0046  3001               	movlw	high __pbssBANK2
  2545  0047  0085               	movwf	5
  2546  0048  3046               	movlw	70
  2547  0049  00FE               	movwf	126
  2548  004A  01FF               	clrf	127
  2549  004B  318A  2262  3180   	fcall	clear_ram0
  2550                           
  2551                           ; Clear objects allocated to BANK3
  2552  004E  30A0               	movlw	low __pbssBANK3
  2553  004F  0084               	movwf	4
  2554  0050  3001               	movlw	high __pbssBANK3
  2555  0051  0085               	movwf	5
  2556  0052  3034               	movlw	52
  2557  0053  00FE               	movwf	126
  2558  0054  01FF               	clrf	127
  2559  0055  318A  2262  3180   	fcall	clear_ram0
  2560  0058                     end_of_initialization:	
  2561                           ;End of C runtime variable initialization code
  2562                           
  2563  0058                     __end_of__initialization:	
  2564  0058  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2565  0059  0020               	movlb	0
  2566  005A  285B               	ljmp	_main	;jump to C main() function
  2567  005B                     __pmaintext:	
  2568                           ; 1 bytes @ 0x4A
  2569 ;;
  2570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2571 ;;
  2572 ;; *************** function _main *****************
  2573 ;; Defined at:
  2574 ;;		line 24 in file "main.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : B1F/0
  2585 ;;		On exit  : 1C/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2588 ;;      Params:         0       0       0       0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels required when called:    8
  2594 ;; This function calls:
  2595 ;;		_ADC_loop
  2596 ;;		_DMX_loop
  2597 ;;		_RDM_rx_loop
  2598 ;;		_timer1_init
  2599 ;; This function is called by:
  2600 ;;		Startup code after reset
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           
  2605                           ;psect for function _main
  2606  005B                     _main:	
  2607                           
  2608                           ;main.c: 25: PWM1DCH = 0x00;
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2612  005B  003B               	movlb	27	; select bank27
  2613  005C  0194               	clrf	20	;volatile
  2614                           
  2615                           ;main.c: 26: PWM2DCH = 0x00;
  2616  005D  01A4               	clrf	36	;volatile
  2617                           
  2618                           ;main.c: 27: PWM3DCH = 0x00;
  2619  005E  01B4               	clrf	52	;volatile
  2620                           
  2621                           ;main.c: 28: PWM4DCH = 0x00;
  2622  005F  01C4               	clrf	68	;volatile
  2623                           
  2624                           ;main.c: 30: PWM1DCL = 0x00;
  2625  0060  0193               	clrf	19	;volatile
  2626                           
  2627                           ;main.c: 31: PWM2DCL = 0x00;
  2628  0061  01A3               	clrf	35	;volatile
  2629                           
  2630                           ;main.c: 32: PWM3DCL = 0x00;
  2631  0062  01B3               	clrf	51	;volatile
  2632                           
  2633                           ;main.c: 33: PWM4DCL = 0x00;
  2634  0063  01C3               	clrf	67	;volatile
  2635                           
  2636                           ;main.c: 34: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  2637  0064  26EE  3180         	fcall	PL102	;call to abstracted procedure
  2638                           
  2639                           ;main.c: 36: RA2PPS = 0b0011;
  2640  0066  3003               	movlw	3
  2641  0067  003D               	movlb	29	; select bank29
  2642  0068  0092               	movwf	18	;volatile
  2643                           
  2644                           ;main.c: 37: RC0PPS = 0b0100;
  2645  0069  3004               	movlw	4
  2646  006A  00A0               	movwf	32	;volatile
  2647                           
  2648                           ;main.c: 38: RC1PPS = 0b0101;
  2649  006B  3005               	movlw	5
  2650  006C  00A1               	movwf	33	;volatile
  2651                           
  2652                           ;main.c: 39: RC2PPS = 0b0110;
  2653  006D  3006               	movlw	6
  2654  006E  00A2               	movwf	34	;volatile
  2655                           
  2656                           ;main.c: 41: PR2 = 0xFF;
  2657  006F  30FF               	movlw	255
  2658  0070  0020               	movlb	0	; select bank0
  2659  0071  009B               	movwf	27	;volatile
  2660                           
  2661                           ;main.c: 42: T2CON = 0b00000101;
  2662  0072  3005               	movlw	5
  2663  0073  009C               	movwf	28	;volatile
  2664                           
  2665                           ;main.c: 44: OSCCON = 0b11110000;
  2666  0074  30F0               	movlw	240
  2667  0075  0021               	movlb	1	; select bank1
  2668  0076  0099               	movwf	25	;volatile
  2669                           
  2670                           ;main.c: 45: OSCTUNE = 0b000000;
  2671  0077  0198               	clrf	24	;volatile
  2672                           
  2673                           ;main.c: 47: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2674  0078  110E               	bcf	14,2	;volatile
  2675  0079  108E               	bcf	14,1	;volatile
  2676  007A  100E               	bcf	14,0	;volatile
  2677  007B  110C               	bcf	12,2	;volatile
  2678                           
  2679                           ;main.c: 48: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2680  007C  0023               	movlb	3	; select bank3
  2681  007D  110E               	bcf	14,2	;volatile
  2682  007E  108E               	bcf	14,1	;volatile
  2683  007F  100E               	bcf	14,0	;volatile
  2684  0080  110C               	bcf	12,2	;volatile
  2685                           
  2686                           ;main.c: 50: RA2=RC0=RC1=RC2=0;
  2687  0081  0020               	movlb	0	; select bank0
  2688  0082  110E               	bcf	14,2	;volatile
  2689  0083  108E               	bcf	14,1	;volatile
  2690  0084  100E               	bcf	14,0	;volatile
  2691  0085  110C               	bcf	12,2	;volatile
  2692                           
  2693                           ;main.c: 52: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2694  0086  003B               	movlb	27	; select bank27
  2695  0087  01C2               	clrf	66	;volatile
  2696  0088  01B2               	clrf	50	;volatile
  2697  0089  01A2               	clrf	34	;volatile
  2698  008A  0192               	clrf	18	;volatile
  2699                           
  2700                           ;main.c: 53: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2701  008B  01C1               	clrf	65	;volatile
  2702  008C  01B1               	clrf	49	;volatile
  2703  008D  01A1               	clrf	33	;volatile
  2704  008E  0191               	clrf	17	;volatile
  2705                           
  2706                           ;main.c: 54: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0x3F;
  2707  008F  303F               	movlw	63
  2708  0090  00C6               	movwf	70	;volatile
  2709  0091  00B6               	movwf	54	;volatile
  2710  0092  00A6               	movwf	38	;volatile
  2711  0093  0096               	movwf	22	;volatile
  2712                           
  2713                           ;main.c: 55: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2714  0094  30FF               	movlw	255
  2715  0095  00C5               	movwf	69	;volatile
  2716  0096  00B5               	movwf	53	;volatile
  2717  0097  00A5               	movwf	37	;volatile
  2718  0098  0095               	movwf	21	;volatile
  2719                           
  2720                           ;main.c: 56: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2721  0099  01CE               	clrf	78	;volatile
  2722  009A  01BE               	clrf	62	;volatile
  2723  009B  01AE               	clrf	46	;volatile
  2724  009C  019E               	clrf	30	;volatile
  2725                           
  2726                           ;main.c: 60: TRISC3 = 0;
  2727  009D  0021               	movlb	1	; select bank1
  2728  009E  118E               	bcf	14,3	;volatile
  2729                           
  2730                           ;main.c: 61: ANSC3 = 0;
  2731  009F  0023               	movlb	3	; select bank3
  2732  00A0  118E               	bcf	14,3	;volatile
  2733                           
  2734                           ;main.c: 62: INTCON = 0b11000000;
  2735  00A1  30C0               	movlw	192
  2736  00A2  008B               	movwf	11	;volatile
  2737                           
  2738                           ;main.c: 66: DMX_CurrentBright[0]=-1;
  2739  00A3  3000               	movlw	0
  2740  00A4  0021               	movlb	1	; select bank1
  2741  00A5  00AC               	movwf	_DMX_CurrentBright^(0+128)
  2742  00A6  3080               	movlw	128
  2743  00A7  00AD               	movwf	(_DMX_CurrentBright+1)^(0+128)
  2744  00A8  30BF               	movlw	191
  2745  00A9  00AE               	movwf	(_DMX_CurrentBright+2)^(0+128)
  2746                           
  2747                           ;main.c: 67: timer1_init();
  2748  00AA  2598  3180         	fcall	_timer1_init
  2749  00AC                     l4556:	
  2750                           
  2751                           ;main.c: 77: DMX_loop();
  2752  00AC  20DB  3180         	fcall	_DMX_loop
  2753                           
  2754                           ;main.c: 78: ADC_loop();
  2755  00AE  20B3               	fcall	_ADC_loop
  2756                           
  2757                           ;main.c: 80: RDM_rx_loop();
  2758  00AF  318D  25EE  3180   	fcall	_RDM_rx_loop
  2759  00B2  28AC               	goto	l4556
  2760  00B3                     __end_of_main:	
  2761  00B3                     __ptext21:	
  2762 ;; *************** function _ADC_loop *****************
  2763 ;; Defined at:
  2764 ;;		line 32 in file "ADC.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;		None
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;		None
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  2  116[None  ] int 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2773 ;; Tracked objects:
  2774 ;;		On entry : 1D/1
  2775 ;;		On exit  : 1F/1
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2778 ;;      Params:         0       0       0       0       0       0       0       0
  2779 ;;      Locals:         0       0       0       0       0       0       0       0
  2780 ;;      Temps:          0       2       0       0       0       0       0       0
  2781 ;;      Totals:         0       2       0       0       0       0       0       0
  2782 ;;Total ram usage:        2 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    4
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           
  2793                           ;psect for function _ADC_loop
  2794  00B3                     _ADC_loop:	
  2795                           
  2796                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2800  00B3  0021               	movlb	1	; select bank1
  2801  00B4  1C56               	btfss	_ADC_Flags^(0+128),0	;volatile
  2802  00B5  0008               	return
  2803                           
  2804                           ;ADC.c: 34: RxTimer = 0;
  2805  00B6  01D2               	clrf	_RxTimer^(0+128)	;volatile
  2806  00B7  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2807                           
  2808                           ;ADC.c: 35: ADC_Flags.New = 0;
  2809  00B8  1056               	bcf	_ADC_Flags^(0+128),0	;volatile
  2810                           
  2811                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2812  00B9  0878               	movf	_ADC_Data,w	;volatile
  2813  00BA  0020               	movlb	0	; select bank0
  2814  00BB  00A0               	movwf	??_ADC_loop
  2815  00BC  3064               	movlw	low ((_PWM+1)| (0+32768))
  2816  00BD  26F4  3180         	fcall	PL106	;call to abstracted procedure
  2817  00BF  3087               	movlw	high ((_PWM+1)| (0+32768))
  2818  00C0  3D21               	addwfc	??_ADC_loop+1,w
  2819  00C1  0085               	movwf	5
  2820  00C2  0800               	movf	0,w	;code access
  2821  00C3  003B               	movlb	27	; select bank27
  2822  00C4  00C4               	movwf	68	;volatile
  2823  00C5  00B4               	movwf	52	;volatile
  2824  00C6  00A4               	movwf	36	;volatile
  2825  00C7  0094               	movwf	20	;volatile
  2826                           
  2827                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2828  00C8  0878               	movf	_ADC_Data,w	;volatile
  2829  00C9  0020               	movlb	0	; select bank0
  2830  00CA  00A0               	movwf	??_ADC_loop
  2831  00CB  3063               	movlw	low (_PWM| (0+32768))
  2832  00CC  26F4  3180         	fcall	PL106	;call to abstracted procedure
  2833  00CE  3087               	movlw	high (_PWM| (0+32768))
  2834  00CF  3D21               	addwfc	??_ADC_loop+1,w
  2835  00D0  0085               	movwf	5
  2836  00D1  0800               	movf	0,w	;code access
  2837  00D2  003B               	movlb	27	; select bank27
  2838  00D3  00C3               	movwf	67	;volatile
  2839  00D4  00B3               	movwf	51	;volatile
  2840  00D5  00A3               	movwf	35	;volatile
  2841  00D6  0093               	movwf	19	;volatile
  2842                           
  2843                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2844  00D7  26EE               	fcall	PL102	;call to abstracted procedure
  2845                           
  2846                           ;ADC.c: 39: GO_nDONE = 1;
  2847  00D8  0021               	movlb	1	; select bank1
  2848  00D9  149D               	bsf	29,1	;volatile
  2849  00DA  0008               	return
  2850  00DB                     __end_of_ADC_loop:	
  2851  00DB                     __ptext10:	
  2852 ;; *************** function _DMX_loop *****************
  2853 ;; Defined at:
  2854 ;;		line 59 in file "DMX.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  Addr            1    3[BANK3 ] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 1C/1
  2865 ;;		On exit  : 1D/1
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2868 ;;      Params:         0       0       0       0       0       0       0       0
  2869 ;;      Locals:         0       0       0       0       4       0       0       0
  2870 ;;      Temps:          0       0       8       0       0       0       0       0
  2871 ;;      Totals:         0       0       8       0       4       0       0       0
  2872 ;;Total ram usage:       12 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    7
  2875 ;; This function calls:
  2876 ;;		___awtoft
  2877 ;;		___ftadd
  2878 ;;		___ftdiv
  2879 ;;		___ftge
  2880 ;;		___ftmul
  2881 ;;		___ftsub
  2882 ;;		___fttol
  2883 ;;		___lbtoft
  2884 ;;		___lwtoft
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function _DMX_loop
  2892  00DB                     _DMX_loop:	
  2893                           
  2894                           ;DMX.c: 60: char Addr = 0;
  2895                           
  2896                           ;incstack = 0
  2897                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2898  00DB  0023               	movlb	3	; select bank3
  2899  00DC  01D7               	clrf	DMX_loop@Addr^(0+384)
  2900                           
  2901                           ;DMX.c: 62: if (DMX_Flags.RxNew == 1) {
  2902  00DD  0020               	movlb	0	; select bank0
  2903  00DE  1C6A               	btfss	_DMX_Flags,0	;volatile
  2904  00DF  2A45               	goto	l348
  2905                           
  2906                           ;DMX.c: 63: DMX_Flags.RxNew = 0;
  2907  00E0  106A               	bcf	_DMX_Flags,0	;volatile
  2908                           
  2909                           ;DMX.c: 65: DMXPeriodDimming=0;
  2910  00E1  0021               	movlb	1	; select bank1
  2911  00E2  01DC               	clrf	_DMXPeriodDimming^(0+128)	;volatile
  2912                           
  2913                           ;DMX.c: 66: DMXStepConst=3;
  2914  00E3  3003               	movlw	3
  2915  00E4  00DB               	movwf	_DMXStepConst^(0+128)
  2916  00E5                     l4428:	
  2917                           ;DMX.c: 67: while (Addr < 4) {
  2918                           
  2919  00E5  3004               	movlw	4
  2920  00E6  0023               	movlb	3	; select bank3
  2921  00E7  0257               	subwf	DMX_loop@Addr^(0+384),w
  2922  00E8  1803               	btfsc	3,0
  2923  00E9  2A45               	goto	l348
  2924                           
  2925                           ;DMX.c: 68: rxdata=RxData[Addr];
  2926  00EA  0857               	movf	DMX_loop@Addr^(0+384),w
  2927  00EB  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  2928  00EC  0086               	movwf	6
  2929  00ED  0187               	clrf	7
  2930  00EE  0801               	movf	1,w
  2931  00EF  0020               	movlb	0	; select bank0
  2932  00F0  00EC               	movwf	_rxdata
  2933                           
  2934                           ;DMX.c: 69: if (DMX_TargetBright[Addr] < rxdata) {
  2935  00F1  0023               	movlb	3	; select bank3
  2936  00F2  2655  3180         	fcall	PL30	;call to abstracted procedure
  2937  00F4  26B2  3180         	fcall	PL64	;call to abstracted procedure
  2938  00F6  086C               	movf	_rxdata,w
  2939  00F7  2372  3180         	fcall	___lbtoft
  2940  00F9  0828               	movf	?___lbtoft,w
  2941  00FA  00B0               	movwf	___ftge@ff2
  2942  00FB  0829               	movf	?___lbtoft+1,w
  2943  00FC  00B1               	movwf	___ftge@ff2+1
  2944  00FD  082A               	movf	?___lbtoft+2,w
  2945  00FE  00B2               	movwf	___ftge@ff2+2
  2946  00FF  239D  3180         	fcall	___ftge
  2947  0101  1803               	btfsc	3,0
  2948  0102  2964               	goto	l4388
  2949                           
  2950                           ;DMX.c: 70: DMX_difference=rxdata-DMX_TargetBright[Addr];
  2951  0103  25CC  3180         	fcall	PL8	;call to abstracted procedure
  2952  0105  2638  3180         	fcall	PL24	;call to abstracted procedure
  2953  0107  086C               	movf	_rxdata,w
  2954  0108  2372  3180         	fcall	___lbtoft
  2955  010A  0828               	movf	?___lbtoft,w
  2956  010B  00DA               	movwf	___ftsub@f1
  2957  010C  0829               	movf	?___lbtoft+1,w
  2958  010D  00DB               	movwf	___ftsub@f1+1
  2959  010E  082A               	movf	?___lbtoft+2,w
  2960  010F  00DC               	movwf	___ftsub@f1+2
  2961  0110  2382  3180         	fcall	___ftsub
  2962                           
  2963                           ;DMX.c: 71: if(DMX_difference<0.05){
  2964  0112  25E4  3180         	fcall	PL12	;call to abstracted procedure
  2965  0114  239D  3180         	fcall	___ftge
  2966  0116  1803               	btfsc	3,0
  2967  0117  2922               	goto	l4382
  2968                           
  2969                           ;DMX.c: 72: DMXSign[Addr].SIGN = 0b00;
  2970  0118  0023               	movlb	3	; select bank3
  2971                           
  2972                           ;DMX.c: 73: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  2973  0119  2698  3180         	fcall	PL54	;call to abstracted procedure
  2974  011B  2372  3180         	fcall	___lbtoft
  2975  011D  0023               	movlb	3	; select bank3
  2976  011E  0857               	movf	DMX_loop@Addr^(0+384),w
  2977  011F  25A5  3180         	fcall	PL2	;call to abstracted procedure
  2978                           
  2979                           ;DMX.c: 74: }else{
  2980  0121  29DB               	goto	l4408
  2981  0122                     l4382:	
  2982                           
  2983                           ;DMX.c: 75: DMXSign[Addr].SIGN = 0b01;
  2984  0122  26AA  3180         	fcall	PL60	;call to abstracted procedure
  2985  0124  3801               	iorlw	1
  2986                           
  2987                           ;DMX.c: 76: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  2988  0125  25D6  3180         	fcall	PL10	;call to abstracted procedure
  2989  0127  25C5  3180         	fcall	PL6	;call to abstracted procedure
  2990                           
  2991                           ;DMX.c: 77: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  2992  0129  2688  3180         	fcall	PL50	;call to abstracted procedure
  2993  012B  2655  3180         	fcall	PL30	;call to abstracted procedure
  2994  012D  2680  3180         	fcall	PL48	;call to abstracted procedure
  2995  012F  0023               	movlb	3	; select bank3
  2996  0130  26FA  3180         	fcall	PL108	;call to abstracted procedure
  2997  0132  2372  3180         	fcall	___lbtoft
  2998  0134  2601  3180         	fcall	PL14	;call to abstracted procedure
  2999  0136  24D3  3180         	fcall	___ftmul
  3000  0138  26C0  3180         	fcall	PL76	;call to abstracted procedure
  3001  013A  23C9  3180         	fcall	___ftdiv
  3002  013C  083C               	movf	?___ftdiv,w
  3003  013D  00CE               	movwf	___ftadd@f2
  3004  013E  083D               	movf	?___ftdiv+1,w
  3005  013F  00CF               	movwf	___ftadd@f2+1
  3006  0140  083E               	movf	?___ftdiv+2,w
  3007  0141  00D0               	movwf	___ftadd@f2+2
  3008  0142  2425  3180         	fcall	___ftadd
  3009  0144  0023               	movlb	3	; select bank3
  3010  0145  0857               	movf	DMX_loop@Addr^(0+384),w
  3011  0146  0757               	addwf	DMX_loop@Addr^(0+384),w
  3012  0147  25BF  3180         	fcall	PL4	;call to abstracted procedure
  3013  0149  26DC  3180         	fcall	PL90	;call to abstracted procedure
  3014                           
  3015                           ;DMX.c: 78: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>2);
  3016  014B  266E  3180         	fcall	PL44	;call to abstracted procedure
  3017  014D  256D  3180         	fcall	___awtoft
  3018  014F  2679  3180         	fcall	PL46	;call to abstracted procedure
  3019  0151  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3020  0153  0187               	clrf	7
  3021  0154  2620  3180         	fcall	PL20	;call to abstracted procedure
  3022  0156  0023               	movlb	3	; select bank3
  3023  0157  2655  3180         	fcall	PL30	;call to abstracted procedure
  3024  0159  2618  3180         	fcall	PL18	;call to abstracted procedure
  3025  015B  2382  3180         	fcall	___ftsub
  3026  015D  26CE  3180         	fcall	PL82	;call to abstracted procedure
  3027  015F  23C9  3180         	fcall	___ftdiv
  3028  0161  2628  3180         	fcall	PL22	;call to abstracted procedure
  3029  0163  29DB               	goto	l4408
  3030  0164                     l4388:	
  3031  0164  086C               	movf	_rxdata,w
  3032  0165  2372  3180         	fcall	___lbtoft
  3033  0167  0828               	movf	?___lbtoft,w
  3034  0168  00AD               	movwf	___ftge@ff1
  3035  0169  0829               	movf	?___lbtoft+1,w
  3036  016A  00AE               	movwf	___ftge@ff1+1
  3037  016B  082A               	movf	?___lbtoft+2,w
  3038  016C  00AF               	movwf	___ftge@ff1+2
  3039  016D  25CC  3180         	fcall	PL8	;call to abstracted procedure
  3040  016F  26E2  3180         	fcall	PL98	;call to abstracted procedure
  3041  0171  239D  3180         	fcall	___ftge
  3042                           
  3043                           ;DMX.c: 81: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  3044  0173  086C               	movf	_rxdata,w
  3045  0174  1803               	btfsc	3,0
  3046  0175  29CF               	goto	L2
  3047  0176  2372  3180         	fcall	___lbtoft
  3048  0178  26D5  3180         	fcall	PL86	;call to abstracted procedure
  3049  017A  25CC  3180         	fcall	PL8	;call to abstracted procedure
  3050  017C  2668  3180         	fcall	PL40	;call to abstracted procedure
  3051  017E  2382  3180         	fcall	___ftsub
  3052                           
  3053                           ;DMX.c: 82: if(DMX_difference<0.05){
  3054  0180  25E4  3180         	fcall	PL12	;call to abstracted procedure
  3055  0182  239D  3180         	fcall	___ftge
  3056  0184  1803               	btfsc	3,0
  3057  0185  2990               	goto	l4398
  3058                           
  3059                           ;DMX.c: 83: DMXSign[Addr].SIGN = 0b00;
  3060  0186  0023               	movlb	3	; select bank3
  3061                           
  3062                           ;DMX.c: 84: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3063  0187  2698  3180         	fcall	PL54	;call to abstracted procedure
  3064  0189  2372  3180         	fcall	___lbtoft
  3065  018B  0023               	movlb	3	; select bank3
  3066  018C  0857               	movf	DMX_loop@Addr^(0+384),w
  3067  018D  25A5  3180         	fcall	PL2	;call to abstracted procedure
  3068                           
  3069                           ;DMX.c: 85: }
  3070  018F  29DB               	goto	l4408
  3071  0190                     l4398:	
  3072                           
  3073                           ;DMX.c: 86: else{
  3074                           ;DMX.c: 87: DMXSign[Addr].SIGN = 0b10;
  3075  0190  26AA  3180         	fcall	PL60	;call to abstracted procedure
  3076  0192  3802               	iorlw	2
  3077                           
  3078                           ;DMX.c: 88: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3079  0193  25D6  3180         	fcall	PL10	;call to abstracted procedure
  3080  0195  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3081                           
  3082                           ;DMX.c: 89: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3083  0197  2688  3180         	fcall	PL50	;call to abstracted procedure
  3084  0199  26FA  3180         	fcall	PL108	;call to abstracted procedure
  3085  019B  2372  3180         	fcall	___lbtoft
  3086  019D  2601  3180         	fcall	PL14	;call to abstracted procedure
  3087  019F  24D3  3180         	fcall	___ftmul
  3088  01A1  26C0  3180         	fcall	PL76	;call to abstracted procedure
  3089  01A3  23C9  3180         	fcall	___ftdiv
  3090  01A5  083C               	movf	?___ftdiv,w
  3091  01A6  00D7               	movwf	___ftsub@f2
  3092  01A7  083D               	movf	?___ftdiv+1,w
  3093  01A8  00D8               	movwf	___ftsub@f2+1
  3094  01A9  083E               	movf	?___ftdiv+2,w
  3095  01AA  00D9               	movwf	___ftsub@f2+2
  3096  01AB  25CC  3180         	fcall	PL8	;call to abstracted procedure
  3097  01AD  2668  3180         	fcall	PL40	;call to abstracted procedure
  3098  01AF  2382  3180         	fcall	___ftsub
  3099  01B1  0023               	movlb	3	; select bank3
  3100  01B2  0857               	movf	DMX_loop@Addr^(0+384),w
  3101  01B3  0757               	addwf	DMX_loop@Addr^(0+384),w
  3102  01B4  25BF  3180         	fcall	PL4	;call to abstracted procedure
  3103  01B6  26BA  3180         	fcall	PL72	;call to abstracted procedure
  3104                           
  3105                           ;DMX.c: 90: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMXP
      +                          eriod>>2);
  3106  01B8  266E  3180         	fcall	PL44	;call to abstracted procedure
  3107  01BA  256D  3180         	fcall	___awtoft
  3108  01BC  2679  3180         	fcall	PL46	;call to abstracted procedure
  3109  01BE  25CC  3180         	fcall	PL8	;call to abstracted procedure
  3110  01C0  2638  3180         	fcall	PL24	;call to abstracted procedure
  3111  01C2  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3112  01C4  2618  3180         	fcall	PL18	;call to abstracted procedure
  3113  01C6  2382  3180         	fcall	___ftsub
  3114  01C8  26CE  3180         	fcall	PL82	;call to abstracted procedure
  3115  01CA  23C9  3180         	fcall	___ftdiv
  3116  01CC  2628  3180         	fcall	PL22	;call to abstracted procedure
  3117  01CE  29DB               	goto	l4408
  3118  01CF                     L2:	
  3119                           ;DMX.c: 93: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3120                           
  3121  01CF  2372  3180         	fcall	___lbtoft
  3122  01D1  0023               	movlb	3	; select bank3
  3123  01D2  0857               	movf	DMX_loop@Addr^(0+384),w
  3124  01D3  25A5  3180         	fcall	PL2	;call to abstracted procedure
  3125                           
  3126                           ;DMX.c: 94: DMXSign[Addr].SIGN = 0b00;
  3127  01D5  0023               	movlb	3	; select bank3
  3128  01D6  0857               	movf	DMX_loop@Addr^(0+384),w
  3129  01D7  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3130  01D8  0086               	movwf	6
  3131  01D9  30FC               	movlw	-4
  3132  01DA  0581               	andwf	1,f
  3133  01DB                     l4408:	
  3134                           
  3135                           ;DMX.c: 95: }
  3136                           ;DMX.c: 97: if(preRxData[Addr]==RxData[Addr]){
  3137  01DB  0023               	movlb	3	; select bank3
  3138  01DC  0857               	movf	DMX_loop@Addr^(0+384),w
  3139  01DD  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  3140  01DE  0086               	movwf	6
  3141  01DF  0187               	clrf	7
  3142  01E0  0857               	movf	DMX_loop@Addr^(0+384),w
  3143  01E1  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3144  01E2  0084               	movwf	4
  3145  01E3  3001               	movlw	1	; select bank2/3
  3146  01E4  0085               	movwf	5
  3147  01E5  0800               	movf	0,w
  3148  01E6  0601               	xorwf	1,w
  3149  01E7  1D03               	skipz
  3150  01E8  2A0D               	goto	l4420
  3151                           
  3152                           ;DMX.c: 98: if( !DMXSign[Addr].InfiniteLoop){
  3153  01E9  0857               	movf	DMX_loop@Addr^(0+384),w
  3154  01EA  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3155  01EB  0086               	movwf	6
  3156  01EC  1901               	btfsc	1,2
  3157  01ED  2A38               	goto	l362
  3158                           
  3159                           ;DMX.c: 99: DMX_Repeat[Addr][0]++;
  3160  01EE  3557               	lslf	DMX_loop@Addr^(0+384),w
  3161  01EF  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3162  01F0  0086               	movwf	6
  3163  01F1  3001               	movlw	1	; select bank2/3
  3164  01F2  0087               	movwf	7
  3165  01F3  0A81               	incf	1,f
  3166                           
  3167                           ;DMX.c: 100: if(DMX_Repeat[Addr][0]==0x10){
  3168  01F4  3557               	lslf	DMX_loop@Addr^(0+384),w
  3169  01F5  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3170  01F6  0086               	movwf	6
  3171  01F7  3010               	movlw	16
  3172  01F8  0601               	xorwf	1,w
  3173  01F9  1D03               	btfss	3,2
  3174  01FA  2A38               	goto	l362
  3175                           
  3176                           ;DMX.c: 101: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3177  01FB  3557               	lslf	DMX_loop@Addr^(0+384),w
  3178  01FC  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3179  01FD  0086               	movwf	6
  3180  01FE  3557               	lslf	DMX_loop@Addr^(0+384),w
  3181  01FF  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3182  0200  0084               	movwf	4
  3183  0201  3001               	movlw	1	; select bank2/3
  3184  0202  3F80               	movwi [0]fsr0
  3185  0203  0081               	movwf	1
  3186                           
  3187                           ;DMX.c: 102: DMX_sumRepeat[Addr]=2;
  3188  0204  0857               	movf	DMX_loop@Addr^(0+384),w
  3189  0205  318D  251F  3180   	fcall	PL104	;call to abstracted procedure
  3190                           
  3191                           ;DMX.c: 103: DMXSign[Addr].InfiniteLoop=1;
  3192  0208  0857               	movf	DMX_loop@Addr^(0+384),w
  3193  0209  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3194  020A  0086               	movwf	6
  3195  020B  1501               	bsf	1,2
  3196  020C  2A38               	goto	l362
  3197  020D                     l4420:	
  3198                           
  3199                           ;DMX.c: 107: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  3200  020D  3557               	lslf	DMX_loop@Addr^(0+384),w
  3201  020E  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3202  020F  0086               	movwf	6
  3203  0210  3001               	movlw	1	; select bank2/3
  3204  0211  0087               	movwf	7
  3205  0212  3557               	lslf	DMX_loop@Addr^(0+384),w
  3206  0213  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3207  0214  0084               	movwf	4
  3208  0215  3001               	movlw	1	; select bank2/3
  3209  0216  0085               	movwf	5
  3210  0217  0800               	movf	0,w
  3211  0218  0081               	movwf	1
  3212                           
  3213                           ;DMX.c: 108: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  3214  0219  0857               	movf	DMX_loop@Addr^(0+384),w
  3215  021A  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3216  021B  0086               	movwf	6
  3217  021C  0187               	clrf	7
  3218  021D  3557               	lslf	DMX_loop@Addr^(0+384),w
  3219  021E  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3220  021F  0084               	movwf	4
  3221  0220  0800               	movf	0,w
  3222  0221  0021               	movlb	1	; select bank1
  3223  0222  00E4               	movwf	??_DMX_loop^(0+128)
  3224  0223  0023               	movlb	3	; select bank3
  3225  0224  3557               	lslf	DMX_loop@Addr^(0+384),w
  3226  0225  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3227  0226  0084               	movwf	4
  3228  0227  0800               	movf	0,w
  3229  0228  0021               	movlb	1	; select bank1
  3230  0229  0764               	addwf	??_DMX_loop^(0+128),w
  3231  022A  0081               	movwf	1
  3232                           
  3233                           ;DMX.c: 109: DMX_Repeat[Addr][0]=1;
  3234  022B  0023               	movlb	3	; select bank3
  3235  022C  3557               	lslf	DMX_loop@Addr^(0+384),w
  3236  022D  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3237  022E  0086               	movwf	6
  3238  022F  3001               	movlw	1	; select bank2/3
  3239  0230  0087               	movwf	7
  3240  0231  0181               	clrf	1
  3241  0232  0A81               	incf	1,f
  3242                           
  3243                           ;DMX.c: 110: DMXSign[Addr].InfiniteLoop=0;
  3244  0233  0857               	movf	DMX_loop@Addr^(0+384),w
  3245  0234  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3246  0235  0086               	movwf	6
  3247  0236  0187               	clrf	7
  3248  0237  1101               	bcf	1,2
  3249  0238                     l362:	
  3250                           
  3251                           ;DMX.c: 111: }
  3252                           ;DMX.c: 112: preRxData[Addr]=RxData[Addr];
  3253  0238  0857               	movf	DMX_loop@Addr^(0+384),w
  3254  0239  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3255  023A  0086               	movwf	6
  3256  023B  3001               	movlw	1	; select bank2/3
  3257  023C  0087               	movwf	7
  3258  023D  0857               	movf	DMX_loop@Addr^(0+384),w
  3259  023E  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  3260  023F  0084               	movwf	4
  3261  0240  0185               	clrf	5
  3262  0241  0800               	movf	0,w
  3263  0242  0081               	movwf	1
  3264                           
  3265                           ;DMX.c: 113: Addr++;
  3266  0243  0AD7               	incf	DMX_loop@Addr^(0+384),f
  3267  0244  28E5               	goto	l4428
  3268  0245                     l348:	
  3269                           
  3270                           ;DMX.c: 114: }
  3271                           ;DMX.c: 115: }
  3272                           ;DMX.c: 117: if (Timer.MS) {
  3273  0245  0021               	movlb	1	; select bank1
  3274  0246  1C38               	btfss	_Timer^(0+128),0	;volatile
  3275  0247  0008               	return
  3276                           
  3277                           ;DMX.c: 118: DMXPeriodConst++;
  3278  0248  0ADD               	incf	_DMXPeriodConst^(0+128),f	;volatile
  3279                           
  3280                           ;DMX.c: 119: Timer.MS = 0;
  3281  0249  1038               	bcf	_Timer^(0+128),0	;volatile
  3282                           
  3283                           ;DMX.c: 120: Addr = 0;
  3284  024A  0023               	movlb	3	; select bank3
  3285  024B  01D7               	clrf	DMX_loop@Addr^(0+384)
  3286                           
  3287                           ;DMX.c: 121: DMXPeriodDimming++;
  3288  024C  0021               	movlb	1	; select bank1
  3289  024D  0ADC               	incf	_DMXPeriodDimming^(0+128),f	;volatile
  3290                           
  3291                           ;DMX.c: 122: if(DMXStepConst==0 && DMXPeriodDimming<DMXPeriod){
  3292  024E  085B               	movf	_DMXStepConst^(0+128),w
  3293  024F  1D03               	btfss	3,2
  3294  0250  2B70               	goto	l4472
  3295  0251  087B               	movf	_DMXPeriod,w
  3296  0252  025C               	subwf	_DMXPeriodDimming^(0+128),w	;volatile
  3297  0253  1803               	skipnc
  3298  0254  2B70               	goto	l4472
  3299                           
  3300                           ;DMX.c: 123: DMXStepConst=3;
  3301  0255  3003               	movlw	3
  3302  0256  00DB               	movwf	_DMXStepConst^(0+128)
  3303                           
  3304                           ;DMX.c: 124: while (Addr < 4) {
  3305  0257  2B5B               	goto	l4470
  3306  0258                     l4444:	
  3307                           
  3308                           ;DMX.c: 128: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  3309  0258  263E  3180         	fcall	PL26	;call to abstracted procedure
  3310  025A  2680  3180         	fcall	PL48	;call to abstracted procedure
  3311  025C  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3312  025E  0187               	clrf	7
  3313  025F  3F40               	moviw [0]fsr1
  3314  0260  0020               	movlb	0	; select bank0
  3315  0261  00CE               	movwf	___ftadd@f2
  3316  0262  3F41               	moviw [1]fsr1
  3317  0263  00CF               	movwf	___ftadd@f2+1
  3318  0264  3F42               	moviw [2]fsr1
  3319  0265  00D0               	movwf	___ftadd@f2+2
  3320  0266  2425  3180         	fcall	___ftadd
  3321  0268  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3322  026A  0187               	clrf	7
  3323  026B  0020               	movlb	0	; select bank0
  3324  026C  26DC  3180         	fcall	PL90	;call to abstracted procedure
  3325  026E  3FC2               	movwi [2]fsr1
  3326                           
  3327                           ;DMX.c: 129: if(DMX_CurrentBright[Addr]>255){
  3328  026F  307F               	movlw	127
  3329  0270  01AD               	clrf	___ftge@ff1
  3330  0271  00AE               	movwf	___ftge@ff1+1
  3331  0272  3043               	movlw	67
  3332  0273  00AF               	movwf	___ftge@ff1+2
  3333  0274  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3334  0276  3F40               	moviw [0]fsr1
  3335  0277  0020               	movlb	0	; select bank0
  3336  0278  26E2  3180         	fcall	PL98	;call to abstracted procedure
  3337  027A  239D  3180         	fcall	___ftge
  3338  027C  1803               	btfsc	3,0
  3339  027D  2AAC               	goto	l4456
  3340                           
  3341                           ;DMX.c: 130: DMX_CurrentBright[Addr]=255;
  3342  027E  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3343  0280  3000               	movlw	0
  3344  0281  0187               	clrf	7
  3345  0282  3FC0               	movwi [0]fsr1
  3346  0283  307F               	movlw	127
  3347  0284  3FC1               	movwi [1]fsr1
  3348  0285  3043               	movlw	67
  3349  0286  3FC2               	movwi [2]fsr1
  3350  0287  2AAC               	goto	l4456
  3351  0288                     l4448:	
  3352                           
  3353                           ;DMX.c: 136: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  3354  0288  263E  3180         	fcall	PL26	;call to abstracted procedure
  3355  028A  2620  3180         	fcall	PL20	;call to abstracted procedure
  3356  028C  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3357  028E  0187               	clrf	7
  3358  028F  2618  3180         	fcall	PL18	;call to abstracted procedure
  3359  0291  2382  3180         	fcall	___ftsub
  3360  0293  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3361  0295  0187               	clrf	7
  3362  0296  0020               	movlb	0	; select bank0
  3363  0297  26BA  3180         	fcall	PL72	;call to abstracted procedure
  3364  0299  3FC2               	movwi [2]fsr1
  3365                           
  3366                           ;DMX.c: 137: if(DMX_CurrentBright[Addr]<0){
  3367  029A  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3368  029C  26B2  3180         	fcall	PL64	;call to abstracted procedure
  3369  029E  01B0               	clrf	___ftge@ff2
  3370  029F  01B1               	clrf	___ftge@ff2+1
  3371  02A0  01B2               	clrf	___ftge@ff2+2
  3372  02A1  239D  3180         	fcall	___ftge
  3373  02A3  1803               	btfsc	3,0
  3374  02A4  2AAC               	goto	l4456
  3375                           
  3376                           ;DMX.c: 138: DMX_CurrentBright[Addr]=0;
  3377  02A5  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3378  02A7  3000               	movlw	0
  3379  02A8  0187               	clrf	7
  3380  02A9  3FC0               	movwi [0]fsr1
  3381  02AA  3FC1               	movwi [1]fsr1
  3382  02AB  3FC2               	movwi [2]fsr1
  3383  02AC                     l4456:	
  3384                           
  3385                           ;DMX.c: 145: rxdata=DMX_CurrentBright[Addr];
  3386  02AC  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3387  02AE  0187               	clrf	7
  3388  02AF  3F40               	moviw [0]fsr1
  3389  02B0  0020               	movlb	0	; select bank0
  3390  02B1  00DD               	movwf	___fttol@f1
  3391  02B2  3F41               	moviw [1]fsr1
  3392  02B3  00DE               	movwf	___fttol@f1+1
  3393  02B4  3F42               	moviw [2]fsr1
  3394  02B5  00DF               	movwf	___fttol@f1+2
  3395  02B6  2707  3180         	fcall	___fttol
  3396  02B8  085D               	movf	?___fttol,w
  3397  02B9  00EC               	movwf	_rxdata
  3398                           
  3399                           ;DMX.c: 146: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3400  02BA  265B  3180         	fcall	PL34	;call to abstracted procedure
  3401  02BC  00E6               	movwf	(??_DMX_loop+2)^(0+128)
  3402  02BD  3F01               	moviw [1]fsr0
  3403  02BE  00E7               	movwf	((??_DMX_loop+2)^(0+128)+1)
  3404  02BF  0020               	movlb	0	; select bank0
  3405  02C0  086C               	movf	_rxdata,w
  3406  02C1  0021               	movlb	1	; select bank1
  3407  02C2  00E8               	movwf	(??_DMX_loop+4)^(0+128)
  3408  02C3  3065               	movlw	low ((_PWM+2)| (0+32768))
  3409  02C4  01E9               	clrf	((??_DMX_loop+4)^(0+128)+1)
  3410  02C5  35E8               	lslf	(??_DMX_loop+4)^(0+128),f
  3411  02C6  0DE9               	rlf	((??_DMX_loop+4)^(0+128)+1),f
  3412  02C7  0768               	addwf	(??_DMX_loop+4)^(0+128),w
  3413  02C8  0084               	movwf	4
  3414  02C9  3087               	movlw	high ((_PWM+2)| (0+32768))
  3415  02CA  3D69               	addwfc	(??_DMX_loop+5)^(0+128),w
  3416  02CB  0085               	movwf	5
  3417  02CC  3F00               	moviw [0]fsr0
  3418  02CD  00EA               	movwf	(??_DMX_loop+6)^(0+128)
  3419  02CE  3F01               	moviw [1]fsr0
  3420  02CF  00EB               	movwf	((??_DMX_loop+6)^(0+128)+1)
  3421  02D0  0866               	movf	(??_DMX_loop+2)^(0+128),w
  3422  02D1  026A               	subwf	(??_DMX_loop+6)^(0+128),w
  3423  02D2  0020               	movlb	0	; select bank0
  3424  02D3  00A8               	movwf	___lwtoft@c
  3425  02D4  0021               	movlb	1	; select bank1
  3426  02D5  0867               	movf	(??_DMX_loop+3)^(0+128),w
  3427  02D6  3B6B               	subwfb	(??_DMX_loop+7)^(0+128),w
  3428  02D7  0020               	movlb	0	; select bank0
  3429  02D8  00A9               	movwf	___lwtoft@c+1
  3430  02D9  2588  3180         	fcall	___lwtoft
  3431  02DB  0828               	movf	?___lwtoft,w
  3432  02DC  00B0               	movwf	___ftmul@f2
  3433  02DD  0829               	movf	?___lwtoft+1,w
  3434  02DE  00B1               	movwf	___ftmul@f2+1
  3435  02DF  082A               	movf	?___lwtoft+2,w
  3436  02E0  00B2               	movwf	___ftmul@f2+2
  3437  02E1  25C5  3180         	fcall	PL6	;call to abstracted procedure
  3438  02E3  0187               	clrf	7
  3439  02E4  2618  3180         	fcall	PL18	;call to abstracted procedure
  3440  02E6  086C               	movf	_rxdata,w
  3441  02E7  2372  3180         	fcall	___lbtoft
  3442  02E9  26D5  3180         	fcall	PL86	;call to abstracted procedure
  3443  02EB  2382  3180         	fcall	___ftsub
  3444  02ED  0857               	movf	?___ftsub,w
  3445  02EE  00AD               	movwf	___ftmul@f1
  3446  02EF  0858               	movf	?___ftsub+1,w
  3447  02F0  00AE               	movwf	___ftmul@f1+1
  3448  02F1  0859               	movf	?___ftsub+2,w
  3449  02F2  00AF               	movwf	___ftmul@f1+2
  3450  02F3  24D3  3180         	fcall	___ftmul
  3451  02F5  082D               	movf	?___ftmul,w
  3452  02F6  0023               	movlb	3	; select bank3
  3453  02F7  00D4               	movwf	_DMX_loop$1446^(0+384)
  3454  02F8  0020               	movlb	0	; select bank0
  3455  02F9  082E               	movf	?___ftmul+1,w
  3456  02FA  0023               	movlb	3	; select bank3
  3457  02FB  00D5               	movwf	(_DMX_loop$1446+1)^(0+384)
  3458  02FC  0020               	movlb	0	; select bank0
  3459  02FD  082F               	movf	?___ftmul+2,w
  3460  02FE  0023               	movlb	3	; select bank3
  3461  02FF  00D6               	movwf	(_DMX_loop$1446+2)^(0+384)
  3462                           
  3463                           ;DMX.c: 146: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3464  0300  0020               	movlb	0	; select bank0
  3465  0301  086C               	movf	_rxdata,w
  3466  0302  265B  3180         	fcall	PL34	;call to abstracted procedure
  3467  0304  0020               	movlb	0	; select bank0
  3468  0305  00A8               	movwf	___lwtoft@c
  3469  0306  3F01               	moviw [1]fsr0
  3470  0307  00A9               	movwf	___lwtoft@c+1
  3471  0308  2588  3180         	fcall	___lwtoft
  3472  030A  0828               	movf	?___lwtoft,w
  3473  030B  00CE               	movwf	___ftadd@f2
  3474  030C  0829               	movf	?___lwtoft+1,w
  3475  030D  00CF               	movwf	___ftadd@f2+1
  3476  030E  082A               	movf	?___lwtoft+2,w
  3477  030F  00D0               	movwf	___ftadd@f2+2
  3478  0310  0023               	movlb	3	; select bank3
  3479  0311  0854               	movf	_DMX_loop$1446^(0+384),w
  3480  0312  0020               	movlb	0	; select bank0
  3481  0313  00CB               	movwf	___ftadd@f1
  3482  0314  0023               	movlb	3	; select bank3
  3483  0315  0855               	movf	(_DMX_loop$1446+1)^(0+384),w
  3484  0316  0020               	movlb	0	; select bank0
  3485  0317  00CC               	movwf	___ftadd@f1+1
  3486  0318  0023               	movlb	3	; select bank3
  3487  0319  0856               	movf	(_DMX_loop$1446+2)^(0+384),w
  3488  031A  0020               	movlb	0	; select bank0
  3489  031B  00CD               	movwf	___ftadd@f1+2
  3490  031C  2425  3180         	fcall	___ftadd
  3491  031E  084B               	movf	?___ftadd,w
  3492  031F  00DD               	movwf	___fttol@f1
  3493  0320  084C               	movf	?___ftadd+1,w
  3494  0321  00DE               	movwf	___fttol@f1+1
  3495  0322  084D               	movf	?___ftadd+2,w
  3496  0323  00DF               	movwf	___fttol@f1+2
  3497  0324  2707  3180         	fcall	___fttol
  3498  0326  2691  3180         	fcall	PL52	;call to abstracted procedure
  3499  0328  0020               	movlb	0	; select bank0
  3500  0329  085D               	movf	?___fttol,w
  3501  032A  3FC0               	movwi [0]fsr1
  3502  032B  085E               	movf	?___fttol+1,w
  3503  032C  3FC1               	movwi [1]fsr1
  3504                           
  3505                           ;DMX.c: 147: if(rxdata==0 | CurrentPWM.PWM[Addr].DCH>0x6F){
  3506  032D  086C               	movf	_rxdata,w
  3507  032E  1903               	btfsc	3,2
  3508  032F  2B38               	goto	l4466
  3509  0330  0023               	movlb	3	; select bank3
  3510  0331  3557               	lslf	DMX_loop@Addr^(0+384),w
  3511  0332  3E41               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3512  0333  0086               	movwf	6
  3513  0334  3070               	movlw	112
  3514  0335  0201               	subwf	1,w
  3515  0336  1C03               	skipc
  3516  0337  2B3D               	goto	l375
  3517  0338                     l4466:	
  3518                           
  3519                           ;DMX.c: 148: CurrentPWM.DC[Addr]=0;
  3520  0338  2691  3180         	fcall	PL52	;call to abstracted procedure
  3521  033A  3000               	movlw	0
  3522  033B  3FC0               	movwi [0]fsr1
  3523  033C  3FC1               	movwi [1]fsr1
  3524  033D                     l375:	
  3525                           
  3526                           ;DMX.c: 149: }
  3527                           ;DMX.c: 150: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  3528  033D  3557               	lslf	DMX_loop@Addr^(0+384),w
  3529  033E  3E41               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3530  033F  26A1  3180         	fcall	PL58	;call to abstracted procedure
  3531  0341  3EB4               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  3532                           
  3533                           ;DMX.c: 151: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  3534  0342  2646  3180         	fcall	PL28	;call to abstracted procedure
  3535  0344  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3536  0345  26A1  3180         	fcall	PL58	;call to abstracted procedure
  3537  0347  3E38               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  3538                           
  3539                           ;DMX.c: 152: *PWMLDCONptr[Addr] = 0b10000000;
  3540  0348  2646  3180         	fcall	PL28	;call to abstracted procedure
  3541  034A  3EAC               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  3542  034B  0086               	movwf	6
  3543  034C  3001               	movlw	1	; select bank3/4
  3544  034D  0087               	movwf	7
  3545  034E  3F40               	moviw [0]fsr1
  3546  034F  0021               	movlb	1	; select bank1
  3547  0350  00E4               	movwf	??_DMX_loop^(0+128)
  3548  0351  3F41               	moviw [1]fsr1
  3549  0352  00E5               	movwf	(??_DMX_loop^(0+128)+1)
  3550  0353  0864               	movf	??_DMX_loop^(0+128),w
  3551  0354  0086               	movwf	6
  3552  0355  0865               	movf	(??_DMX_loop+1)^(0+128),w
  3553  0356  0087               	movwf	7
  3554  0357  3080               	movlw	128
  3555  0358  0081               	movwf	1
  3556                           
  3557                           ;DMX.c: 153: Addr++;
  3558  0359  0023               	movlb	3	; select bank3
  3559  035A  0AD7               	incf	DMX_loop@Addr^(0+384),f
  3560  035B                     l4470:	
  3561  035B  3004               	movlw	4
  3562  035C  0023               	movlb	3	; select bank3
  3563  035D  0257               	subwf	DMX_loop@Addr^(0+384),w
  3564  035E  1803               	btfsc	3,0
  3565  035F  0008               	return
  3566  0360  0857               	movf	DMX_loop@Addr^(0+384),w
  3567  0361  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3568  0362  0086               	movwf	6
  3569  0363  0187               	clrf	7
  3570  0364  0801               	movf	1,w
  3571  0365  3903               	andlw	3
  3572                           
  3573                           ; Switch size 1, requested type "space"
  3574                           ; Number of cases is 3, Range of values is 0 to 2
  3575                           ; switch strategies available:
  3576                           ; Name         Instructions Cycles
  3577                           ; simple_byte           10     6 (average)
  3578                           ; direct_byte           12     6 (fixed)
  3579                           ; jumptable            260     6 (fixed)
  3580                           ;	Chosen strategy is simple_byte
  3581  0366  1903               	skipnz
  3582  0367  2AAC               	goto	l4456
  3583  0368  3A01               	xorlw	1	; case 1
  3584  0369  1903               	skipnz
  3585  036A  2A58               	goto	l4444
  3586  036B  3A03               	xorlw	3	; case 2
  3587  036C  1903               	skipnz
  3588  036D  2A88               	goto	l4448
  3589  036E  2AAC               	goto	l4456
  3590  036F  2AAC               	goto	l4456
  3591  0370                     l4472:	
  3592                           
  3593                           ;DMX.c: 156: DMXStepConst--;
  3594  0370  03DB               	decf	_DMXStepConst^(0+128),f
  3595  0371  0008               	return
  3596  0372                     __end_of_DMX_loop:	
  3597  0372                     __ptext12:	
  3598 ;; *************** function ___lbtoft *****************
  3599 ;; Defined at:
  3600 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  c               1    wreg     unsigned char 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  c               1   12[BANK0 ] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  3    8[BANK0 ] float 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 1C/0
  3611 ;;		On exit  : 1F/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3614 ;;      Params:         0       4       0       0       0       0       0       0
  3615 ;;      Locals:         0       1       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0
  3617 ;;      Totals:         0       5       0       0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    5
  3621 ;; This function calls:
  3622 ;;		___ftpack
  3623 ;; This function is called by:
  3624 ;;		_DMX_loop
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function ___lbtoft
  3630  0372                     ___lbtoft:	
  3631                           
  3632                           ;incstack = 0
  3633                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3634                           ;___lbtoft@c stored from wreg
  3635  0372  0020               	movlb	0	; select bank0
  3636  0373  00AC               	movwf	___lbtoft@c
  3637  0374  00A0               	movwf	___ftpack@arg
  3638  0375  308E               	movlw	142
  3639  0376  01A1               	clrf	___ftpack@arg+1
  3640  0377  01A2               	clrf	___ftpack@arg+2
  3641  0378  00A3               	movwf	___ftpack@exp
  3642  0379  01A4               	clrf	___ftpack@sign
  3643  037A  252F               	fcall	___ftpack
  3644  037B  0820               	movf	?___ftpack,w
  3645  037C  00A8               	movwf	?___lbtoft
  3646  037D  0821               	movf	?___ftpack+1,w
  3647  037E  00A9               	movwf	?___lbtoft+1
  3648  037F  0822               	movf	?___ftpack+2,w
  3649  0380  00AA               	movwf	?___lbtoft+2
  3650  0381  0008               	return
  3651  0382                     __end_of___lbtoft:	
  3652  0382                     __ptext14:	
  3653 ;; *************** function ___ftsub *****************
  3654 ;; Defined at:
  3655 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  f2              3   55[BANK0 ] float 
  3658 ;;  f1              3   58[BANK0 ] float 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  3   55[BANK0 ] float 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, pclath, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 1F/0
  3667 ;;		On exit  : 1F/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3670 ;;      Params:         0       6       0       0       0       0       0       0
  3671 ;;      Locals:         0       0       0       0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0
  3673 ;;      Totals:         0       6       0       0       0       0       0       0
  3674 ;;Total ram usage:        6 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    6
  3677 ;; This function calls:
  3678 ;;		___ftadd
  3679 ;; This function is called by:
  3680 ;;		_DMX_loop
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function ___ftsub
  3686  0382                     ___ftsub:	
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3690  0382  0859               	movf	___ftsub@f2+2,w
  3691  0383  0458               	iorwf	___ftsub@f2+1,w
  3692  0384  0457               	iorwf	___ftsub@f2,w
  3693  0385  1903               	skipnz
  3694  0386  2B89               	goto	l4300
  3695  0387  3080               	movlw	128
  3696  0388  06D9               	xorwf	___ftsub@f2+2,f
  3697  0389                     l4300:	
  3698  0389  085A               	movf	___ftsub@f1,w
  3699  038A  00CB               	movwf	___ftadd@f1
  3700  038B  085B               	movf	___ftsub@f1+1,w
  3701  038C  00CC               	movwf	___ftadd@f1+1
  3702  038D  085C               	movf	___ftsub@f1+2,w
  3703  038E  00CD               	movwf	___ftadd@f1+2
  3704  038F  0857               	movf	___ftsub@f2,w
  3705  0390  00CE               	movwf	___ftadd@f2
  3706  0391  0858               	movf	___ftsub@f2+1,w
  3707  0392  00CF               	movwf	___ftadd@f2+1
  3708  0393  0859               	movf	___ftsub@f2+2,w
  3709  0394  00D0               	movwf	___ftadd@f2+2
  3710  0395  2425               	fcall	___ftadd
  3711  0396  084B               	movf	?___ftadd,w
  3712  0397  00D7               	movwf	?___ftsub
  3713  0398  084C               	movf	?___ftadd+1,w
  3714  0399  00D8               	movwf	?___ftsub+1
  3715  039A  084D               	movf	?___ftadd+2,w
  3716  039B  00D9               	movwf	?___ftsub+2
  3717  039C  0008               	return
  3718  039D                     __end_of___ftsub:	
  3719  039D                     __ptext17:	
  3720 ;; *************** function ___ftge *****************
  3721 ;; Defined at:
  3722 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  ff1             3   13[BANK0 ] float 
  3725 ;;  ff2             3   16[BANK0 ] float 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;		None               void
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : 1F/0
  3734 ;;		On exit  : 1F/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3737 ;;      Params:         0       6       0       0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0
  3740 ;;      Totals:         0       6       0       0       0       0       0       0
  3741 ;;Total ram usage:        6 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    4
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_DMX_loop
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function ___ftge
  3753  039D                     ___ftge:	
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3757  039D  1FAF               	btfss	___ftge@ff1+2,7
  3758  039E  2BAC               	goto	l4228
  3759  039F  082D               	movf	___ftge@ff1,w
  3760  03A0  3C00               	sublw	0
  3761  03A1  00AD               	movwf	___ftge@ff1
  3762  03A2  082E               	movf	___ftge@ff1+1,w
  3763  03A3  1C03               	skipc
  3764  03A4  0F2E               	incfsz	___ftge@ff1+1,w
  3765  03A5  3C00               	sublw	0
  3766  03A6  00AE               	movwf	___ftge@ff1+1
  3767  03A7  082F               	movf	___ftge@ff1+2,w
  3768  03A8  1C03               	skipc
  3769  03A9  0F2F               	incfsz	___ftge@ff1+2,w
  3770  03AA  3C80               	sublw	128
  3771  03AB  00AF               	movwf	___ftge@ff1+2
  3772  03AC                     l4228:	
  3773  03AC  1FB2               	btfss	___ftge@ff2+2,7
  3774  03AD  2BBB               	goto	l4232
  3775  03AE  0830               	movf	___ftge@ff2,w
  3776  03AF  3C00               	sublw	0
  3777  03B0  00B0               	movwf	___ftge@ff2
  3778  03B1  0831               	movf	___ftge@ff2+1,w
  3779  03B2  1C03               	skipc
  3780  03B3  0F31               	incfsz	___ftge@ff2+1,w
  3781  03B4  3C00               	sublw	0
  3782  03B5  00B1               	movwf	___ftge@ff2+1
  3783  03B6  0832               	movf	___ftge@ff2+2,w
  3784  03B7  1C03               	skipc
  3785  03B8  0F32               	incfsz	___ftge@ff2+2,w
  3786  03B9  3C80               	sublw	128
  3787  03BA  00B2               	movwf	___ftge@ff2+2
  3788  03BB                     l4232:	
  3789  03BB  3080               	movlw	128
  3790  03BC  06AF               	xorwf	___ftge@ff1+2,f
  3791  03BD  06B2               	xorwf	___ftge@ff2+2,f
  3792  03BE  0832               	movf	___ftge@ff2+2,w
  3793  03BF  022F               	subwf	___ftge@ff1+2,w
  3794  03C0  1D03               	skipz
  3795  03C1  0008               	return
  3796  03C2  0831               	movf	___ftge@ff2+1,w
  3797  03C3  022E               	subwf	___ftge@ff1+1,w
  3798  03C4  1D03               	skipz
  3799  03C5  0008               	return
  3800  03C6  0830               	movf	___ftge@ff2,w
  3801  03C7  022D               	subwf	___ftge@ff1,w
  3802  03C8  0008               	return
  3803  03C9                     __end_of___ftge:	
  3804  03C9                     __ptext18:	
  3805 ;; *************** function ___ftdiv *****************
  3806 ;; Defined at:
  3807 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  f2              3   28[BANK0 ] float 
  3810 ;;  f1              3   31[BANK0 ] float 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  f3              3   38[BANK0 ] float 
  3813 ;;  sign            1   42[BANK0 ] unsigned char 
  3814 ;;  exp             1   41[BANK0 ] unsigned char 
  3815 ;;  cntr            1   37[BANK0 ] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  3   28[BANK0 ] float 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 1F/0
  3822 ;;		On exit  : 1F/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3825 ;;      Params:         0       6       0       0       0       0       0       0
  3826 ;;      Locals:         0       6       0       0       0       0       0       0
  3827 ;;      Temps:          0       3       0       0       0       0       0       0
  3828 ;;      Totals:         0      15       0       0       0       0       0       0
  3829 ;;Total ram usage:       15 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    5
  3832 ;; This function calls:
  3833 ;;		___ftpack
  3834 ;; This function is called by:
  3835 ;;		_DMX_loop
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function ___ftdiv
  3841  03C9                     ___ftdiv:	
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3845  03C9  083F               	movf	___ftdiv@f1,w
  3846  03CA  00C2               	movwf	??___ftdiv
  3847  03CB  0840               	movf	___ftdiv@f1+1,w
  3848  03CC  00C3               	movwf	??___ftdiv+1
  3849  03CD  0841               	movf	___ftdiv@f1+2,w
  3850  03CE  00C4               	movwf	??___ftdiv+2
  3851  03CF  1003               	clrc
  3852  03D0  0D43               	rlf	??___ftdiv+1,w
  3853  03D1  0D44               	rlf	??___ftdiv+2,w
  3854  03D2  00C9               	movwf	___ftdiv@exp
  3855  03D3  0849               	movf	___ftdiv@exp,w
  3856  03D4  1D03               	btfss	3,2
  3857  03D5  2BD7               	goto	l4188
  3858  03D6  2EFF               	ljmp	PL110	;call to abstracted procedure
  3859  03D7                     l4188:	
  3860  03D7  083C               	movf	___ftdiv@f2,w
  3861  03D8  00C2               	movwf	??___ftdiv
  3862  03D9  083D               	movf	___ftdiv@f2+1,w
  3863  03DA  00C3               	movwf	??___ftdiv+1
  3864  03DB  083E               	movf	___ftdiv@f2+2,w
  3865  03DC  00C4               	movwf	??___ftdiv+2
  3866  03DD  1003               	clrc
  3867  03DE  0D43               	rlf	??___ftdiv+1,w
  3868  03DF  0D44               	rlf	??___ftdiv+2,w
  3869  03E0  00CA               	movwf	___ftdiv@sign
  3870  03E1  084A               	movf	___ftdiv@sign,w
  3871  03E2  1D03               	btfss	3,2
  3872  03E3  2BE5               	goto	l1348
  3873  03E4  2EFF               	ljmp	PL110	;call to abstracted procedure
  3874  03E5                     l1348:	
  3875  03E5  3089               	movlw	137
  3876  03E6  01C6               	clrf	___ftdiv@f3
  3877  03E7  01C7               	clrf	___ftdiv@f3+1
  3878  03E8  01C8               	clrf	___ftdiv@f3+2
  3879  03E9  074A               	addwf	___ftdiv@sign,w
  3880  03EA  00C2               	movwf	??___ftdiv
  3881  03EB  02C9               	subwf	___ftdiv@exp,f
  3882  03EC  0841               	movf	___ftdiv@f1+2,w
  3883  03ED  00CA               	movwf	___ftdiv@sign
  3884  03EE  083E               	movf	___ftdiv@f2+2,w
  3885  03EF  06CA               	xorwf	___ftdiv@sign,f
  3886  03F0  3080               	movlw	128
  3887  03F1  05CA               	andwf	___ftdiv@sign,f
  3888  03F2  3018               	movlw	24
  3889  03F3  17C0               	bsf	___ftdiv@f1+1,7
  3890  03F4  01C1               	clrf	___ftdiv@f1+2
  3891  03F5  17BD               	bsf	___ftdiv@f2+1,7
  3892  03F6  01BE               	clrf	___ftdiv@f2+2
  3893  03F7  00C5               	movwf	___ftdiv@cntr
  3894  03F8                     l4210:	
  3895  03F8  35C6               	lslf	___ftdiv@f3,f
  3896  03F9  0DC7               	rlf	___ftdiv@f3+1,f
  3897  03FA  0DC8               	rlf	___ftdiv@f3+2,f
  3898  03FB  083E               	movf	___ftdiv@f2+2,w
  3899  03FC  0241               	subwf	___ftdiv@f1+2,w
  3900  03FD  1D03               	skipz
  3901  03FE  2C05               	goto	u3065
  3902  03FF  083D               	movf	___ftdiv@f2+1,w
  3903  0400  0240               	subwf	___ftdiv@f1+1,w
  3904  0401  1D03               	skipz
  3905  0402  2C05               	goto	u3065
  3906  0403  083C               	movf	___ftdiv@f2,w
  3907  0404  023F               	subwf	___ftdiv@f1,w
  3908  0405                     u3065:	
  3909  0405  1C03               	skipc
  3910  0406  2C0E               	goto	l4216
  3911  0407  083C               	movf	___ftdiv@f2,w
  3912  0408  02BF               	subwf	___ftdiv@f1,f
  3913  0409  083D               	movf	___ftdiv@f2+1,w
  3914  040A  3BC0               	subwfb	___ftdiv@f1+1,f
  3915  040B  083E               	movf	___ftdiv@f2+2,w
  3916  040C  3BC1               	subwfb	___ftdiv@f1+2,f
  3917  040D  1446               	bsf	___ftdiv@f3,0
  3918  040E                     l4216:	
  3919  040E  35BF               	lslf	___ftdiv@f1,f
  3920  040F  0DC0               	rlf	___ftdiv@f1+1,f
  3921  0410  0DC1               	rlf	___ftdiv@f1+2,f
  3922  0411  0BC5               	decfsz	___ftdiv@cntr,f
  3923  0412  2BF8               	goto	l4210
  3924  0413  0846               	movf	___ftdiv@f3,w
  3925  0414  00A0               	movwf	___ftpack@arg
  3926  0415  0847               	movf	___ftdiv@f3+1,w
  3927  0416  00A1               	movwf	___ftpack@arg+1
  3928  0417  0848               	movf	___ftdiv@f3+2,w
  3929  0418  00A2               	movwf	___ftpack@arg+2
  3930  0419  0849               	movf	___ftdiv@exp,w
  3931  041A  00A3               	movwf	___ftpack@exp
  3932  041B  084A               	movf	___ftdiv@sign,w
  3933  041C  00A4               	movwf	___ftpack@sign
  3934  041D  252F               	fcall	___ftpack
  3935  041E  0820               	movf	?___ftpack,w
  3936  041F  00BC               	movwf	?___ftdiv
  3937  0420  0821               	movf	?___ftpack+1,w
  3938  0421  00BD               	movwf	?___ftdiv+1
  3939  0422  0822               	movf	?___ftpack+2,w
  3940  0423  00BE               	movwf	?___ftdiv+2
  3941  0424  0008               	return
  3942  0425                     __end_of___ftdiv:	
  3943  0425                     __ptext15:	
  3944 ;; *************** function ___ftadd *****************
  3945 ;; Defined at:
  3946 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  f1              3   43[BANK0 ] float 
  3949 ;;  f2              3   46[BANK0 ] float 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  exp1            1   54[BANK0 ] unsigned char 
  3952 ;;  exp2            1   53[BANK0 ] unsigned char 
  3953 ;;  sign            1   52[BANK0 ] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  3   43[BANK0 ] float 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0, pclath, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 1F/0
  3960 ;;		On exit  : 1F/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3963 ;;      Params:         0       6       0       0       0       0       0       0
  3964 ;;      Locals:         0       3       0       0       0       0       0       0
  3965 ;;      Temps:          0       3       0       0       0       0       0       0
  3966 ;;      Totals:         0      12       0       0       0       0       0       0
  3967 ;;Total ram usage:       12 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    5
  3970 ;; This function calls:
  3971 ;;		___ftpack
  3972 ;; This function is called by:
  3973 ;;		_DMX_loop
  3974 ;;		___ftsub
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function ___ftadd
  3980  0425                     ___ftadd:	
  3981                           
  3982                           ;incstack = 0
  3983                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3984  0425  084B               	movf	___ftadd@f1,w
  3985  0426  00D1               	movwf	??___ftadd
  3986  0427  084C               	movf	___ftadd@f1+1,w
  3987  0428  00D2               	movwf	??___ftadd+1
  3988  0429  084D               	movf	___ftadd@f1+2,w
  3989  042A  00D3               	movwf	??___ftadd+2
  3990  042B  1003               	clrc
  3991  042C  0D52               	rlf	??___ftadd+1,w
  3992  042D  0D53               	rlf	??___ftadd+2,w
  3993  042E  00D6               	movwf	___ftadd@exp1
  3994  042F  084E               	movf	___ftadd@f2,w
  3995  0430  00D1               	movwf	??___ftadd
  3996  0431  084F               	movf	___ftadd@f2+1,w
  3997  0432  00D2               	movwf	??___ftadd+1
  3998  0433  0850               	movf	___ftadd@f2+2,w
  3999  0434  00D3               	movwf	??___ftadd+2
  4000  0435  1003               	clrc
  4001  0436  0D52               	rlf	??___ftadd+1,w
  4002  0437  0D53               	rlf	??___ftadd+2,w
  4003  0438  00D5               	movwf	___ftadd@exp2
  4004  0439  0856               	movf	___ftadd@exp1,w
  4005  043A  1903               	btfsc	3,2
  4006  043B  2C48               	goto	l3970
  4007  043C  0855               	movf	___ftadd@exp2,w
  4008  043D  0256               	subwf	___ftadd@exp1,w
  4009  043E  0855               	movf	___ftadd@exp2,w
  4010  043F  1803               	skipnc
  4011  0440  2C50               	goto	L3
  4012  0441  00D1               	movwf	??___ftadd
  4013  0442  0856               	movf	___ftadd@exp1,w
  4014  0443  02D1               	subwf	??___ftadd,f
  4015  0444  3019               	movlw	25
  4016  0445  0251               	subwf	??___ftadd,w
  4017  0446  1C03               	skipc
  4018  0447  2C4F               	goto	l3974
  4019  0448                     l3970:	
  4020  0448  084E               	movf	___ftadd@f2,w
  4021  0449  00CB               	movwf	?___ftadd
  4022  044A  084F               	movf	___ftadd@f2+1,w
  4023  044B  00CC               	movwf	?___ftadd+1
  4024  044C  0850               	movf	___ftadd@f2+2,w
  4025  044D  00CD               	movwf	?___ftadd+2
  4026  044E  0008               	return
  4027  044F                     l3974:	
  4028  044F  0855               	movf	___ftadd@exp2,w
  4029  0450                     L3:	
  4030  0450  1903               	btfsc	3,2
  4031  0451  0008               	return
  4032  0452  0856               	movf	___ftadd@exp1,w
  4033  0453  0255               	subwf	___ftadd@exp2,w
  4034  0454  1803               	skipnc
  4035  0455  2C5E               	goto	l3980
  4036  0456  0856               	movf	___ftadd@exp1,w
  4037  0457  00D1               	movwf	??___ftadd
  4038  0458  0855               	movf	___ftadd@exp2,w
  4039  0459  02D1               	subwf	??___ftadd,f
  4040  045A  3019               	movlw	25
  4041  045B  0251               	subwf	??___ftadd,w
  4042  045C  1803               	btfsc	3,0
  4043  045D  0008               	return
  4044  045E                     l3980:	
  4045  045E  3006               	movlw	6
  4046  045F  00D4               	movwf	___ftadd@sign
  4047  0460  1BCD               	btfsc	___ftadd@f1+2,7
  4048  0461  17D4               	bsf	___ftadd@sign,7
  4049  0462  1BD0               	btfsc	___ftadd@f2+2,7
  4050  0463  1754               	bsf	___ftadd@sign,6
  4051  0464  17CC               	bsf	___ftadd@f1+1,7
  4052  0465  01CD               	clrf	___ftadd@f1+2
  4053  0466  17CF               	bsf	___ftadd@f2+1,7
  4054  0467  01D0               	clrf	___ftadd@f2+2
  4055  0468  0855               	movf	___ftadd@exp2,w
  4056  0469  0256               	subwf	___ftadd@exp1,w
  4057  046A  1803               	skipnc
  4058  046B  2C83               	goto	l4002
  4059  046C                     l3992:	
  4060  046C  35CE               	lslf	___ftadd@f2,f
  4061  046D  0DCF               	rlf	___ftadd@f2+1,f
  4062  046E  0DD0               	rlf	___ftadd@f2+2,f
  4063  046F  03D5               	decf	___ftadd@exp2,f
  4064  0470  0855               	movf	___ftadd@exp2,w
  4065  0471  0656               	xorwf	___ftadd@exp1,w
  4066  0472  1903               	skipnz
  4067  0473  2C7E               	goto	l4000
  4068  0474  03D4               	decf	___ftadd@sign,f
  4069  0475  0854               	movf	___ftadd@sign,w
  4070  0476  3907               	andlw	7
  4071  0477  1903               	btfsc	3,2
  4072  0478  2C7E               	goto	l4000
  4073  0479  2C6C               	goto	l3992
  4074  047A                     l3998:	
  4075  047A  36CD               	lsrf	___ftadd@f1+2,f
  4076  047B  0CCC               	rrf	___ftadd@f1+1,f
  4077  047C  0CCB               	rrf	___ftadd@f1,f
  4078  047D  0AD6               	incf	___ftadd@exp1,f
  4079  047E                     l4000:	
  4080  047E  0856               	movf	___ftadd@exp1,w
  4081  047F  0655               	xorwf	___ftadd@exp2,w
  4082  0480  1903               	btfsc	3,2
  4083  0481  2C9D               	goto	l1330
  4084  0482  2C7A               	goto	l3998
  4085  0483                     l4002:	
  4086  0483  0856               	movf	___ftadd@exp1,w
  4087  0484  0255               	subwf	___ftadd@exp2,w
  4088  0485  1803               	skipnc
  4089  0486  2C9D               	goto	l1330
  4090  0487                     l4004:	
  4091  0487  35CB               	lslf	___ftadd@f1,f
  4092  0488  0DCC               	rlf	___ftadd@f1+1,f
  4093  0489  0DCD               	rlf	___ftadd@f1+2,f
  4094  048A  03D6               	decf	___ftadd@exp1,f
  4095  048B  0855               	movf	___ftadd@exp2,w
  4096  048C  0656               	xorwf	___ftadd@exp1,w
  4097  048D  1903               	skipnz
  4098  048E  2C99               	goto	l4012
  4099  048F  03D4               	decf	___ftadd@sign,f
  4100  0490  0854               	movf	___ftadd@sign,w
  4101  0491  3907               	andlw	7
  4102  0492  1903               	btfsc	3,2
  4103  0493  2C99               	goto	l4012
  4104  0494  2C87               	goto	l4004
  4105  0495                     l4010:	
  4106  0495  36D0               	lsrf	___ftadd@f2+2,f
  4107  0496  0CCF               	rrf	___ftadd@f2+1,f
  4108  0497  0CCE               	rrf	___ftadd@f2,f
  4109  0498  0AD5               	incf	___ftadd@exp2,f
  4110  0499                     l4012:	
  4111  0499  0856               	movf	___ftadd@exp1,w
  4112  049A  0655               	xorwf	___ftadd@exp2,w
  4113  049B  1D03               	skipz
  4114  049C  2C95               	goto	l4010
  4115  049D                     l1330:	
  4116  049D  1FD4               	btfss	___ftadd@sign,7
  4117  049E  2CA8               	goto	l4018
  4118  049F  30FF               	movlw	255
  4119  04A0  06CB               	xorwf	___ftadd@f1,f
  4120  04A1  06CC               	xorwf	___ftadd@f1+1,f
  4121  04A2  06CD               	xorwf	___ftadd@f1+2,f
  4122  04A3  0ACB               	incf	___ftadd@f1,f
  4123  04A4  1903               	skipnz
  4124  04A5  0ACC               	incf	___ftadd@f1+1,f
  4125  04A6  1903               	skipnz
  4126  04A7  0ACD               	incf	___ftadd@f1+2,f
  4127  04A8                     l4018:	
  4128  04A8  1F54               	btfss	___ftadd@sign,6
  4129  04A9  2CB0               	goto	l4024
  4130  04AA  26E8  3180         	fcall	PL100	;call to abstracted procedure
  4131  04AC  1903               	skipnz
  4132  04AD  0ACF               	incf	___ftadd@f2+1,f
  4133  04AE  1903               	skipnz
  4134  04AF  0AD0               	incf	___ftadd@f2+2,f
  4135  04B0                     l4024:	
  4136  04B0  01D4               	clrf	___ftadd@sign
  4137  04B1  084B               	movf	___ftadd@f1,w
  4138  04B2  07CE               	addwf	___ftadd@f2,f
  4139  04B3  084C               	movf	___ftadd@f1+1,w
  4140  04B4  3DCF               	addwfc	___ftadd@f2+1,f
  4141  04B5  084D               	movf	___ftadd@f1+2,w
  4142  04B6  3DD0               	addwfc	___ftadd@f2+2,f
  4143  04B7  1FD0               	btfss	___ftadd@f2+2,7
  4144  04B8  2CC1               	goto	l4036
  4145  04B9  26E8  3180         	fcall	PL100	;call to abstracted procedure
  4146  04BB  1903               	skipnz
  4147  04BC  0ACF               	incf	___ftadd@f2+1,f
  4148  04BD  1903               	skipnz
  4149  04BE  0AD0               	incf	___ftadd@f2+2,f
  4150  04BF  01D4               	clrf	___ftadd@sign
  4151  04C0  0AD4               	incf	___ftadd@sign,f
  4152  04C1                     l4036:	
  4153  04C1  084E               	movf	___ftadd@f2,w
  4154  04C2  00A0               	movwf	___ftpack@arg
  4155  04C3  084F               	movf	___ftadd@f2+1,w
  4156  04C4  00A1               	movwf	___ftpack@arg+1
  4157  04C5  0850               	movf	___ftadd@f2+2,w
  4158  04C6  00A2               	movwf	___ftpack@arg+2
  4159  04C7  0856               	movf	___ftadd@exp1,w
  4160  04C8  00A3               	movwf	___ftpack@exp
  4161  04C9  0854               	movf	___ftadd@sign,w
  4162  04CA  00A4               	movwf	___ftpack@sign
  4163  04CB  252F               	fcall	___ftpack
  4164  04CC  0820               	movf	?___ftpack,w
  4165  04CD  00CB               	movwf	?___ftadd
  4166  04CE  0821               	movf	?___ftpack+1,w
  4167  04CF  00CC               	movwf	?___ftadd+1
  4168  04D0  0822               	movf	?___ftpack+2,w
  4169  04D1  00CD               	movwf	?___ftadd+2
  4170  04D2  0008               	return
  4171  04D3                     __end_of___ftadd:	
  4172  04D3                     __ptext16:	
  4173 ;; *************** function ___ftmul *****************
  4174 ;; Defined at:
  4175 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  f1              3   13[BANK0 ] float 
  4178 ;;  f2              3   16[BANK0 ] float 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  4181 ;;  sign            1   27[BANK0 ] unsigned char 
  4182 ;;  cntr            1   26[BANK0 ] unsigned char 
  4183 ;;  exp             1   22[BANK0 ] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  3   13[BANK0 ] float 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, pclath, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 1F/0
  4190 ;;		On exit  : 1F/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4193 ;;      Params:         0       6       0       0       0       0       0       0
  4194 ;;      Locals:         0       6       0       0       0       0       0       0
  4195 ;;      Temps:          0       3       0       0       0       0       0       0
  4196 ;;      Totals:         0      15       0       0       0       0       0       0
  4197 ;;Total ram usage:       15 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    5
  4200 ;; This function calls:
  4201 ;;		___ftpack
  4202 ;; This function is called by:
  4203 ;;		_DMX_loop
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           
  4208                           ;psect for function ___ftmul
  4209  04D3                     ___ftmul:	
  4210                           
  4211                           ;incstack = 0
  4212                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4213  04D3  082D               	movf	___ftmul@f1,w
  4214  04D4  00B3               	movwf	??___ftmul
  4215  04D5  082E               	movf	___ftmul@f1+1,w
  4216  04D6  00B4               	movwf	??___ftmul+1
  4217  04D7  082F               	movf	___ftmul@f1+2,w
  4218  04D8  00B5               	movwf	??___ftmul+2
  4219  04D9  1003               	clrc
  4220  04DA  0D34               	rlf	??___ftmul+1,w
  4221  04DB  0D35               	rlf	??___ftmul+2,w
  4222  04DC  00B6               	movwf	___ftmul@exp
  4223  04DD  0836               	movf	___ftmul@exp,w
  4224  04DE  1D03               	btfss	3,2
  4225  04DF  2CE1               	goto	l4248
  4226  04E0  2F03               	ljmp	PL112	;call to abstracted procedure
  4227  04E1                     l4248:	
  4228  04E1  0830               	movf	___ftmul@f2,w
  4229  04E2  00B3               	movwf	??___ftmul
  4230  04E3  0831               	movf	___ftmul@f2+1,w
  4231  04E4  00B4               	movwf	??___ftmul+1
  4232  04E5  0832               	movf	___ftmul@f2+2,w
  4233  04E6  00B5               	movwf	??___ftmul+2
  4234  04E7  1003               	clrc
  4235  04E8  0D34               	rlf	??___ftmul+1,w
  4236  04E9  0D35               	rlf	??___ftmul+2,w
  4237  04EA  00BB               	movwf	___ftmul@sign
  4238  04EB  083B               	movf	___ftmul@sign,w
  4239  04EC  1D03               	btfss	3,2
  4240  04ED  2CEF               	goto	l4252
  4241  04EE  2F03               	ljmp	PL112	;call to abstracted procedure
  4242  04EF                     l4252:	
  4243  04EF  083B               	movf	___ftmul@sign,w
  4244  04F0  3E7B               	addlw	123
  4245  04F1  07B6               	addwf	___ftmul@exp,f
  4246  04F2  082F               	movf	___ftmul@f1+2,w
  4247  04F3  00BB               	movwf	___ftmul@sign
  4248  04F4  0832               	movf	___ftmul@f2+2,w
  4249  04F5  06BB               	xorwf	___ftmul@sign,f
  4250  04F6  3080               	movlw	128
  4251  04F7  05BB               	andwf	___ftmul@sign,f
  4252  04F8  30FF               	movlw	255
  4253  04F9  17AE               	bsf	___ftmul@f1+1,7
  4254  04FA  17B1               	bsf	___ftmul@f2+1,7
  4255  04FB  05B0               	andwf	___ftmul@f2,f
  4256  04FC  05B1               	andwf	___ftmul@f2+1,f
  4257  04FD  3007               	movlw	7
  4258  04FE  01B2               	clrf	___ftmul@f2+2
  4259  04FF  01B7               	clrf	___ftmul@f3_as_product
  4260  0500  01B8               	clrf	___ftmul@f3_as_product+1
  4261  0501  01B9               	clrf	___ftmul@f3_as_product+2
  4262  0502  00BA               	movwf	___ftmul@cntr
  4263  0503                     l4270:	
  4264  0503  1C2D               	btfss	___ftmul@f1,0
  4265  0504  2D07               	goto	l4274
  4266  0505  26C7  3180         	fcall	PL80	;call to abstracted procedure
  4267  0507                     l4274:	
  4268  0507  36AF               	lsrf	___ftmul@f1+2,f
  4269  0508  0CAE               	rrf	___ftmul@f1+1,f
  4270  0509  0CAD               	rrf	___ftmul@f1,f
  4271  050A  35B0               	lslf	___ftmul@f2,f
  4272  050B  0DB1               	rlf	___ftmul@f2+1,f
  4273  050C  0DB2               	rlf	___ftmul@f2+2,f
  4274  050D  0BBA               	decfsz	___ftmul@cntr,f
  4275  050E  2D03               	goto	l4270
  4276  050F  3009               	movlw	9
  4277  0510  00BA               	movwf	___ftmul@cntr
  4278  0511                     l4282:	
  4279  0511  1C2D               	btfss	___ftmul@f1,0
  4280  0512  2D15               	goto	l4286
  4281  0513  26C7  3180         	fcall	PL80	;call to abstracted procedure
  4282  0515                     l4286:	
  4283  0515  36AF               	lsrf	___ftmul@f1+2,f
  4284  0516  0CAE               	rrf	___ftmul@f1+1,f
  4285  0517  0CAD               	rrf	___ftmul@f1,f
  4286  0518  36B9               	lsrf	___ftmul@f3_as_product+2,f
  4287  0519  0CB8               	rrf	___ftmul@f3_as_product+1,f
  4288  051A  0CB7               	rrf	___ftmul@f3_as_product,f
  4289  051B  0BBA               	decfsz	___ftmul@cntr,f
  4290  051C  2D11               	goto	l4282
  4291  051D  0837               	movf	___ftmul@f3_as_product,w
  4292  051E  00A0               	movwf	___ftpack@arg
  4293  051F  0838               	movf	___ftmul@f3_as_product+1,w
  4294  0520  00A1               	movwf	___ftpack@arg+1
  4295  0521  0839               	movf	___ftmul@f3_as_product+2,w
  4296  0522  00A2               	movwf	___ftpack@arg+2
  4297  0523  0836               	movf	___ftmul@exp,w
  4298  0524  00A3               	movwf	___ftpack@exp
  4299  0525  083B               	movf	___ftmul@sign,w
  4300  0526  00A4               	movwf	___ftpack@sign
  4301  0527  252F               	fcall	___ftpack
  4302  0528  0820               	movf	?___ftpack,w
  4303  0529  00AD               	movwf	?___ftmul
  4304  052A  0821               	movf	?___ftpack+1,w
  4305  052B  00AE               	movwf	?___ftmul+1
  4306  052C  0822               	movf	?___ftpack+2,w
  4307  052D  00AF               	movwf	?___ftmul+2
  4308  052E  0008               	return
  4309  052F                     __end_of___ftmul:	
  4310  052F                     __ptext20:	
  4311 ;; *************** function ___ftpack *****************
  4312 ;; Defined at:
  4313 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  arg             3    0[BANK0 ] unsigned um
  4316 ;;  exp             1    3[BANK0 ] unsigned char 
  4317 ;;  sign            1    4[BANK0 ] unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  3    0[BANK0 ] float 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0
  4324 ;; Tracked objects:
  4325 ;;		On entry : 1F/0
  4326 ;;		On exit  : 1F/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4329 ;;      Params:         0       5       0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0
  4331 ;;      Temps:          0       3       0       0       0       0       0       0
  4332 ;;      Totals:         0       8       0       0       0       0       0       0
  4333 ;;Total ram usage:        8 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    4
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		___awtoft
  4340 ;;		___ftadd
  4341 ;;		___ftdiv
  4342 ;;		___ftmul
  4343 ;;		___lbtoft
  4344 ;;		___lwtoft
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function ___ftpack
  4350  052F                     ___ftpack:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4354  052F  0823               	movf	___ftpack@exp,w
  4355  0530  1903               	btfsc	3,2
  4356  0531  2D37               	goto	l1294
  4357  0532  0822               	movf	___ftpack@arg+2,w
  4358  0533  0421               	iorwf	___ftpack@arg+1,w
  4359  0534  0420               	iorwf	___ftpack@arg,w
  4360  0535  1D03               	skipz
  4361  0536  2D3F               	goto	l3936
  4362  0537                     l1294:	
  4363  0537  01A0               	clrf	?___ftpack
  4364  0538  01A1               	clrf	?___ftpack+1
  4365  0539  01A2               	clrf	?___ftpack+2
  4366  053A  0008               	return
  4367  053B                     l3934:	
  4368  053B  0AA3               	incf	___ftpack@exp,f
  4369  053C  36A2               	lsrf	___ftpack@arg+2,f
  4370  053D  0CA1               	rrf	___ftpack@arg+1,f
  4371  053E  0CA0               	rrf	___ftpack@arg,f
  4372  053F                     l3936:	
  4373  053F  30FE               	movlw	254
  4374  0540  0522               	andwf	___ftpack@arg+2,w
  4375  0541  1903               	btfsc	3,2
  4376  0542  2D4D               	goto	l3940
  4377  0543  2D3B               	goto	l3934
  4378  0544                     l3938:	
  4379  0544  0AA3               	incf	___ftpack@exp,f
  4380  0545  0AA0               	incf	___ftpack@arg,f
  4381  0546  1903               	skipnz
  4382  0547  0AA1               	incf	___ftpack@arg+1,f
  4383  0548  1903               	skipnz
  4384  0549  0AA2               	incf	___ftpack@arg+2,f
  4385  054A  36A2               	lsrf	___ftpack@arg+2,f
  4386  054B  0CA1               	rrf	___ftpack@arg+1,f
  4387  054C  0CA0               	rrf	___ftpack@arg,f
  4388  054D                     l3940:	
  4389  054D  30FF               	movlw	255
  4390  054E  0522               	andwf	___ftpack@arg+2,w
  4391  054F  1903               	btfsc	3,2
  4392  0550  2D5A               	goto	l3944
  4393  0551  2D44               	goto	l3938
  4394  0552                     l3946:	
  4395  0552  3002               	movlw	2
  4396  0553  0223               	subwf	___ftpack@exp,w
  4397  0554  1C03               	btfss	3,0
  4398  0555  2D5C               	goto	l1306
  4399  0556  03A3               	decf	___ftpack@exp,f
  4400  0557  35A0               	lslf	___ftpack@arg,f
  4401  0558  0DA1               	rlf	___ftpack@arg+1,f
  4402  0559  0DA2               	rlf	___ftpack@arg+2,f
  4403  055A                     l3944:	
  4404  055A  1FA1               	btfss	___ftpack@arg+1,7
  4405  055B  2D52               	goto	l3946
  4406  055C                     l1306:	
  4407  055C  1C23               	btfss	___ftpack@exp,0
  4408  055D  13A1               	bcf	___ftpack@arg+1,7
  4409  055E  36A3               	lsrf	___ftpack@exp,f
  4410  055F  0823               	movf	___ftpack@exp,w
  4411  0560  00A7               	movwf	??___ftpack+2
  4412  0561  01A6               	clrf	??___ftpack+1
  4413  0562  01A5               	clrf	??___ftpack
  4414  0563  0825               	movf	??___ftpack,w
  4415  0564  04A0               	iorwf	___ftpack@arg,f
  4416  0565  0826               	movf	??___ftpack+1,w
  4417  0566  04A1               	iorwf	___ftpack@arg+1,f
  4418  0567  0827               	movf	??___ftpack+2,w
  4419  0568  04A2               	iorwf	___ftpack@arg+2,f
  4420  0569  0824               	movf	___ftpack@sign,w
  4421  056A  1D03               	btfss	3,2
  4422  056B  17A2               	bsf	___ftpack@arg+2,7
  4423  056C  0008               	return
  4424  056D                     __end_of___ftpack:	
  4425  056D                     __ptext19:	
  4426 ;; *************** function ___awtoft *****************
  4427 ;; Defined at:
  4428 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  c               2    8[BANK0 ] int 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  sign            1   11[BANK0 ] unsigned char 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  3    8[BANK0 ] float 
  4435 ;; Registers used:
  4436 ;;		wreg, status,2, status,0, pclath, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 1F/0
  4439 ;;		On exit  : 1F/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4442 ;;      Params:         0       3       0       0       0       0       0       0
  4443 ;;      Locals:         0       1       0       0       0       0       0       0
  4444 ;;      Temps:          0       0       0       0       0       0       0       0
  4445 ;;      Totals:         0       4       0       0       0       0       0       0
  4446 ;;Total ram usage:        4 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    5
  4449 ;; This function calls:
  4450 ;;		___ftpack
  4451 ;; This function is called by:
  4452 ;;		_DMX_loop
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function ___awtoft
  4458  056D                     ___awtoft:	
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4462  056D  01AB               	clrf	___awtoft@sign
  4463  056E  1FA9               	btfss	___awtoft@c+1,7
  4464  056F  2D77               	goto	l4180
  4465  0570  09A8               	comf	___awtoft@c,f
  4466  0571  09A9               	comf	___awtoft@c+1,f
  4467  0572  0AA8               	incf	___awtoft@c,f
  4468  0573  1903               	skipnz
  4469  0574  0AA9               	incf	___awtoft@c+1,f
  4470  0575  01AB               	clrf	___awtoft@sign
  4471  0576  0AAB               	incf	___awtoft@sign,f
  4472  0577                     l4180:	
  4473  0577  0828               	movf	___awtoft@c,w
  4474  0578  00A0               	movwf	___ftpack@arg
  4475  0579  0829               	movf	___awtoft@c+1,w
  4476  057A  00A1               	movwf	___ftpack@arg+1
  4477  057B  308E               	movlw	142
  4478  057C  01A2               	clrf	___ftpack@arg+2
  4479  057D  00A3               	movwf	___ftpack@exp
  4480  057E  082B               	movf	___awtoft@sign,w
  4481  057F  00A4               	movwf	___ftpack@sign
  4482  0580  252F               	fcall	___ftpack
  4483  0581  0820               	movf	?___ftpack,w
  4484  0582  00A8               	movwf	?___awtoft
  4485  0583  0821               	movf	?___ftpack+1,w
  4486  0584  00A9               	movwf	?___awtoft+1
  4487  0585  0822               	movf	?___ftpack+2,w
  4488  0586  00AA               	movwf	?___awtoft+2
  4489  0587  0008               	return
  4490  0588                     __end_of___awtoft:	
  4491  0588                     __ptext11:	
  4492 ;; *************** function ___lwtoft *****************
  4493 ;; Defined at:
  4494 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  c               2    8[BANK0 ] unsigned int 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  3    8[BANK0 ] float 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 1F/0
  4505 ;;		On exit  : 1F/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4508 ;;      Params:         0       3       0       0       0       0       0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0       0
  4511 ;;      Totals:         0       3       0       0       0       0       0       0
  4512 ;;Total ram usage:        3 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    5
  4515 ;; This function calls:
  4516 ;;		___ftpack
  4517 ;; This function is called by:
  4518 ;;		_DMX_loop
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function ___lwtoft
  4524  0588                     ___lwtoft:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4528  0588  0828               	movf	___lwtoft@c,w
  4529  0589  00A0               	movwf	___ftpack@arg
  4530  058A  0829               	movf	___lwtoft@c+1,w
  4531  058B  00A1               	movwf	___ftpack@arg+1
  4532  058C  308E               	movlw	142
  4533  058D  01A2               	clrf	___ftpack@arg+2
  4534  058E  00A3               	movwf	___ftpack@exp
  4535  058F  01A4               	clrf	___ftpack@sign
  4536  0590  252F               	fcall	___ftpack
  4537  0591  0820               	movf	?___ftpack,w
  4538  0592  00A8               	movwf	?___lwtoft
  4539  0593  0821               	movf	?___ftpack+1,w
  4540  0594  00A9               	movwf	?___lwtoft+1
  4541  0595  0822               	movf	?___ftpack+2,w
  4542  0596  00AA               	movwf	?___lwtoft+2
  4543  0597  0008               	return
  4544  0598                     __end_of___lwtoft:	
  4545  0598                     __ptext1:	
  4546 ;; *************** function _timer1_init *****************
  4547 ;; Defined at:
  4548 ;;		line 15 in file "Timer.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  2  112[None  ] int 
  4555 ;; Registers used:
  4556 ;;		wreg, status,2
  4557 ;; Tracked objects:
  4558 ;;		On entry : B1F/1
  4559 ;;		On exit  : B1F/1
  4560 ;;		Unchanged: B00/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4562 ;;      Params:         0       0       0       0       0       0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0       0
  4564 ;;      Temps:          0       0       0       0       0       0       0       0
  4565 ;;      Totals:         0       0       0       0       0       0       0       0
  4566 ;;Total ram usage:        0 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    4
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_main
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           
  4577                           ;psect for function _timer1_init
  4578  0598                     _timer1_init:	
  4579                           
  4580                           ;Timer.c: 16: TMR1IE = 1;
  4581                           
  4582                           ;incstack = 0
  4583                           ; Regs used in _timer1_init: [wreg+status,2]
  4584  0598  1411               	bsf	17,0	;volatile
  4585                           
  4586                           ;Timer.c: 17: T1CON = 0b00110001;
  4587  0599  3031               	movlw	49
  4588  059A  0020               	movlb	0	; select bank0
  4589  059B  0098               	movwf	24	;volatile
  4590                           
  4591                           ;Timer.c: 18: TimerState = TIMER_StartUpDelay;
  4592  059C  3003               	movlw	3
  4593  059D  0022               	movlb	2	; select bank2
  4594  059E  00EE               	movwf	_TimerState^(0+256)	;volatile
  4595                           
  4596                           ;Timer.c: 19: TMR1=0;
  4597  059F  0020               	movlb	0	; select bank0
  4598  05A0  0196               	clrf	22	;volatile
  4599  05A1  0197               	clrf	23	;volatile
  4600                           
  4601                           ;Timer.c: 20: Timer_DelayCount=0;
  4602  05A2  0021               	movlb	1	; select bank1
  4603  05A3  01D7               	clrf	_Timer_DelayCount^(0+128)	;volatile
  4604  05A4  0008               	return
  4605  05A5                     __end_of_timer1_init:	
  4606  05A5                     PL2:	
  4607  05A5  0757               	addwf	DMX_loop@Addr^(0+384),w
  4608  05A6  0757               	addwf	DMX_loop@Addr^(0+384),w
  4609  05A7  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4610  05A8  0086               	movwf	6
  4611  05A9  0187               	clrf	7
  4612  05AA  0020               	movlb	0	; select bank0
  4613  05AB  0828               	movf	?___lbtoft,w
  4614  05AC  3FC0               	movwi [0]fsr1
  4615  05AD  0829               	movf	?___lbtoft+1,w
  4616  05AE  3FC1               	movwi [1]fsr1
  4617  05AF  082A               	movf	?___lbtoft+2,w
  4618  05B0  3FC2               	movwi [2]fsr1
  4619  05B1  0023               	movlb	3	; select bank3
  4620  05B2  0857               	movf	DMX_loop@Addr^(0+384),w
  4621  05B3  0757               	addwf	DMX_loop@Addr^(0+384),w
  4622  05B4  0757               	addwf	DMX_loop@Addr^(0+384),w
  4623  05B5  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4624  05B6  0086               	movwf	6
  4625  05B7  0020               	movlb	0	; select bank0
  4626  05B8  0828               	movf	?___lbtoft,w
  4627  05B9  3FC0               	movwi [0]fsr1
  4628  05BA  0829               	movf	?___lbtoft+1,w
  4629  05BB  3FC1               	movwi [1]fsr1
  4630  05BC  082A               	movf	?___lbtoft+2,w
  4631  05BD  3FC2               	movwi [2]fsr1
  4632  05BE  0008               	return
  4633  05BF                     __end_ofPL2:	
  4634  05BF                     PL4:	
  4635  05BF  0757               	addwf	DMX_loop@Addr^(0+384),w
  4636  05C0  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4637  05C1  0086               	movwf	6
  4638  05C2  0187               	clrf	7
  4639  05C3  0020               	movlb	0	; select bank0
  4640  05C4  0008               	return
  4641  05C5                     __end_ofPL4:	
  4642  05C5                     PL6:	
  4643  05C5  0023               	movlb	3	; select bank3
  4644  05C6  0857               	movf	DMX_loop@Addr^(0+384),w
  4645  05C7  0757               	addwf	DMX_loop@Addr^(0+384),w
  4646  05C8  0757               	addwf	DMX_loop@Addr^(0+384),w
  4647  05C9  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4648  05CA  0086               	movwf	6
  4649  05CB  0008               	return
  4650  05CC                     __end_ofPL6:	
  4651  05CC                     PL8:	
  4652  05CC  0023               	movlb	3	; select bank3
  4653  05CD  0857               	movf	DMX_loop@Addr^(0+384),w
  4654  05CE  0757               	addwf	DMX_loop@Addr^(0+384),w
  4655  05CF  0757               	addwf	DMX_loop@Addr^(0+384),w
  4656  05D0  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4657  05D1  0086               	movwf	6
  4658  05D2  0187               	clrf	7
  4659  05D3  3F40               	moviw [0]fsr1
  4660  05D4  0020               	movlb	0	; select bank0
  4661  05D5  0008               	return
  4662  05D6                     __end_ofPL8:	
  4663  05D6                     PL10:	
  4664  05D6  0081               	movwf	1
  4665  05D7  0857               	movf	DMX_loop@Addr^(0+384),w
  4666  05D8  0757               	addwf	DMX_loop@Addr^(0+384),w
  4667  05D9  0757               	addwf	DMX_loop@Addr^(0+384),w
  4668  05DA  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4669  05DB  0086               	movwf	6
  4670  05DC  3F40               	moviw [0]fsr1
  4671  05DD  0021               	movlb	1	; select bank1
  4672  05DE  00E4               	movwf	??_DMX_loop^(0+128)
  4673  05DF  3F41               	moviw [1]fsr1
  4674  05E0  00E5               	movwf	(??_DMX_loop^(0+128)+1)
  4675  05E1  3F42               	moviw [2]fsr1
  4676  05E2  00E6               	movwf	(??_DMX_loop^(0+128)+2)
  4677  05E3  0008               	return
  4678  05E4                     __end_ofPL10:	
  4679  05E4                     PL12:	
  4680  05E4  0857               	movf	?___ftsub,w
  4681  05E5  0021               	movlb	1	; select bank1
  4682  05E6  00C3               	movwf	_DMX_difference^(0+128)
  4683  05E7  0020               	movlb	0	; select bank0
  4684  05E8  0858               	movf	?___ftsub+1,w
  4685  05E9  0021               	movlb	1	; select bank1
  4686  05EA  00C4               	movwf	(_DMX_difference+1)^(0+128)
  4687  05EB  0020               	movlb	0	; select bank0
  4688  05EC  0859               	movf	?___ftsub+2,w
  4689  05ED  0021               	movlb	1	; select bank1
  4690  05EE  00C5               	movwf	(_DMX_difference+2)^(0+128)
  4691  05EF  0843               	movf	_DMX_difference^(0+128),w
  4692  05F0  0020               	movlb	0	; select bank0
  4693  05F1  00AD               	movwf	___ftge@ff1
  4694  05F2  0021               	movlb	1	; select bank1
  4695  05F3  0844               	movf	(_DMX_difference+1)^(0+128),w
  4696  05F4  0020               	movlb	0	; select bank0
  4697  05F5  00AE               	movwf	___ftge@ff1+1
  4698  05F6  0021               	movlb	1	; select bank1
  4699  05F7  0845               	movf	(_DMX_difference+2)^(0+128),w
  4700  05F8  0020               	movlb	0	; select bank0
  4701  05F9  00AF               	movwf	___ftge@ff1+2
  4702  05FA  30CD               	movlw	205
  4703  05FB  00B0               	movwf	___ftge@ff2
  4704  05FC  304C               	movlw	76
  4705  05FD  00B1               	movwf	___ftge@ff2+1
  4706  05FE  303D               	movlw	61
  4707  05FF  00B2               	movwf	___ftge@ff2+2
  4708  0600  0008               	return
  4709  0601                     __end_ofPL12:	
  4710  0601                     PL14:	
  4711  0601  0828               	movf	?___lbtoft,w
  4712  0602  00BC               	movwf	___ftdiv@f2
  4713  0603  0829               	movf	?___lbtoft+1,w
  4714  0604  00BD               	movwf	___ftdiv@f2+1
  4715  0605  082A               	movf	?___lbtoft+2,w
  4716  0606  00BE               	movwf	___ftdiv@f2+2
  4717  0607  3040               	movlw	64
  4718  0608  01AD               	clrf	___ftmul@f1
  4719  0609  01AE               	clrf	___ftmul@f1+1
  4720  060A  00AF               	movwf	___ftmul@f1+2
  4721  060B  0021               	movlb	1	; select bank1
  4722  060C  0843               	movf	_DMX_difference^(0+128),w
  4723  060D  0020               	movlb	0	; select bank0
  4724  060E  00B0               	movwf	___ftmul@f2
  4725  060F  0021               	movlb	1	; select bank1
  4726  0610  0844               	movf	(_DMX_difference+1)^(0+128),w
  4727  0611  0020               	movlb	0	; select bank0
  4728  0612  00B1               	movwf	___ftmul@f2+1
  4729  0613  0021               	movlb	1	; select bank1
  4730  0614  0845               	movf	(_DMX_difference+2)^(0+128),w
  4731  0615  0020               	movlb	0	; select bank0
  4732  0616  00B2               	movwf	___ftmul@f2+2
  4733  0617  0008               	return
  4734  0618                     __end_ofPL14:	
  4735  0618                     PL18:	
  4736  0618  3F40               	moviw [0]fsr1
  4737  0619  0020               	movlb	0	; select bank0
  4738  061A  00DA               	movwf	___ftsub@f1
  4739  061B  3F41               	moviw [1]fsr1
  4740  061C  00DB               	movwf	___ftsub@f1+1
  4741  061D  3F42               	moviw [2]fsr1
  4742  061E  00DC               	movwf	___ftsub@f1+2
  4743  061F  0008               	return
  4744  0620                     __end_ofPL18:	
  4745  0620                     PL20:	
  4746  0620  3F40               	moviw [0]fsr1
  4747  0621  0020               	movlb	0	; select bank0
  4748  0622  00D7               	movwf	___ftsub@f2
  4749  0623  3F41               	moviw [1]fsr1
  4750  0624  00D8               	movwf	___ftsub@f2+1
  4751  0625  3F42               	moviw [2]fsr1
  4752  0626  00D9               	movwf	___ftsub@f2+2
  4753  0627  0008               	return
  4754  0628                     __end_ofPL20:	
  4755  0628                     PL22:	
  4756  0628  0023               	movlb	3	; select bank3
  4757  0629  0857               	movf	DMX_loop@Addr^(0+384),w
  4758  062A  0757               	addwf	DMX_loop@Addr^(0+384),w
  4759  062B  0757               	addwf	DMX_loop@Addr^(0+384),w
  4760  062C  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4761  062D  0086               	movwf	6
  4762  062E  3001               	movlw	1	; select bank3/4
  4763  062F  0087               	movwf	7
  4764  0630  0020               	movlb	0	; select bank0
  4765  0631  083C               	movf	?___ftdiv,w
  4766  0632  3FC0               	movwi [0]fsr1
  4767  0633  083D               	movf	?___ftdiv+1,w
  4768  0634  3FC1               	movwi [1]fsr1
  4769  0635  083E               	movf	?___ftdiv+2,w
  4770  0636  3FC2               	movwi [2]fsr1
  4771  0637  0008               	return
  4772  0638                     __end_ofPL22:	
  4773  0638                     PL24:	
  4774  0638  00D7               	movwf	___ftsub@f2
  4775  0639  3F41               	moviw [1]fsr1
  4776  063A  00D8               	movwf	___ftsub@f2+1
  4777  063B  3F42               	moviw [2]fsr1
  4778  063C  00D9               	movwf	___ftsub@f2+2
  4779  063D  0008               	return
  4780  063E                     __end_ofPL24:	
  4781  063E                     PL26:	
  4782  063E  0857               	movf	DMX_loop@Addr^(0+384),w
  4783  063F  0757               	addwf	DMX_loop@Addr^(0+384),w
  4784  0640  0757               	addwf	DMX_loop@Addr^(0+384),w
  4785  0641  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4786  0642  0086               	movwf	6
  4787  0643  3001               	movlw	1	; select bank3/4
  4788  0644  0087               	movwf	7
  4789  0645  0008               	return
  4790  0646                     __end_ofPL26:	
  4791  0646                     PL28:	
  4792  0646  0086               	movwf	6
  4793  0647  3F40               	moviw [0]fsr1
  4794  0648  0021               	movlb	1	; select bank1
  4795  0649  00E5               	movwf	(??_DMX_loop+1)^(0+128)
  4796  064A  3F41               	moviw [1]fsr1
  4797  064B  00E6               	movwf	((??_DMX_loop+1)^(0+128)+1)
  4798  064C  0865               	movf	(??_DMX_loop+1)^(0+128),w
  4799  064D  0086               	movwf	6
  4800  064E  0866               	movf	(??_DMX_loop+2)^(0+128),w
  4801  064F  0087               	movwf	7
  4802  0650  0864               	movf	??_DMX_loop^(0+128),w
  4803  0651  0081               	movwf	1
  4804  0652  0023               	movlb	3	; select bank3
  4805  0653  3557               	lslf	DMX_loop@Addr^(0+384),w
  4806  0654  0008               	return
  4807  0655                     __end_ofPL28:	
  4808  0655                     PL30:	
  4809  0655  0857               	movf	DMX_loop@Addr^(0+384),w
  4810  0656  0757               	addwf	DMX_loop@Addr^(0+384),w
  4811  0657  0757               	addwf	DMX_loop@Addr^(0+384),w
  4812  0658  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4813  0659  0086               	movwf	6
  4814  065A  0008               	return
  4815  065B                     __end_ofPL30:	
  4816  065B                     PL34:	
  4817  065B  0021               	movlb	1	; select bank1
  4818  065C  00E4               	movwf	??_DMX_loop^(0+128)
  4819  065D  3063               	movlw	low (_PWM| (0+32768))
  4820  065E  01E5               	clrf	(??_DMX_loop^(0+128)+1)
  4821  065F  35E4               	lslf	??_DMX_loop^(0+128),f
  4822  0660  0DE5               	rlf	(??_DMX_loop^(0+128)+1),f
  4823  0661  0764               	addwf	??_DMX_loop^(0+128),w
  4824  0662  0084               	movwf	4
  4825  0663  3087               	movlw	high (_PWM| (0+32768))
  4826  0664  3D65               	addwfc	(??_DMX_loop+1)^(0+128),w
  4827  0665  0085               	movwf	5
  4828  0666  3F00               	moviw [0]fsr0
  4829  0667  0008               	return
  4830  0668                     __end_ofPL34:	
  4831  0668                     PL40:	
  4832  0668  00DA               	movwf	___ftsub@f1
  4833  0669  3F41               	moviw [1]fsr1
  4834  066A  00DB               	movwf	___ftsub@f1+1
  4835  066B  3F42               	moviw [2]fsr1
  4836  066C  00DC               	movwf	___ftsub@f1+2
  4837  066D  0008               	return
  4838  066E                     __end_ofPL40:	
  4839  066E                     PL44:	
  4840  066E  3FC2               	movwi [2]fsr1
  4841  066F  087B               	movf	_DMXPeriod,w
  4842  0670  0021               	movlb	1	; select bank1
  4843  0671  00E4               	movwf	??_DMX_loop^(0+128)
  4844  0672  36E4               	lsrf	??_DMX_loop^(0+128),f
  4845  0673  36E4               	lsrf	??_DMX_loop^(0+128),f
  4846  0674  0864               	movf	??_DMX_loop^(0+128),w
  4847  0675  0020               	movlb	0	; select bank0
  4848  0676  00A8               	movwf	___awtoft@c
  4849  0677  01A9               	clrf	___awtoft@c+1
  4850  0678  0008               	return
  4851  0679                     __end_ofPL44:	
  4852  0679                     PL46:	
  4853  0679  0828               	movf	?___awtoft,w
  4854  067A  00BC               	movwf	___ftdiv@f2
  4855  067B  0829               	movf	?___awtoft+1,w
  4856  067C  00BD               	movwf	___ftdiv@f2+1
  4857  067D  082A               	movf	?___awtoft+2,w
  4858  067E  00BE               	movwf	___ftdiv@f2+2
  4859  067F  0008               	return
  4860  0680                     __end_ofPL46:	
  4861  0680                     PL48:	
  4862  0680  3F40               	moviw [0]fsr1
  4863  0681  0020               	movlb	0	; select bank0
  4864  0682  00CB               	movwf	___ftadd@f1
  4865  0683  3F41               	moviw [1]fsr1
  4866  0684  00CC               	movwf	___ftadd@f1+1
  4867  0685  3F42               	moviw [2]fsr1
  4868  0686  00CD               	movwf	___ftadd@f1+2
  4869  0687  0008               	return
  4870  0688                     __end_ofPL48:	
  4871  0688                     PL50:	
  4872  0688  0021               	movlb	1	; select bank1
  4873  0689  0864               	movf	??_DMX_loop^(0+128),w
  4874  068A  3FC0               	movwi [0]fsr1
  4875  068B  0865               	movf	(??_DMX_loop+1)^(0+128),w
  4876  068C  3FC1               	movwi [1]fsr1
  4877  068D  0866               	movf	(??_DMX_loop+2)^(0+128),w
  4878  068E  3FC2               	movwi [2]fsr1
  4879  068F  0023               	movlb	3	; select bank3
  4880  0690  0008               	return
  4881  0691                     __end_ofPL50:	
  4882  0691                     PL52:	
  4883  0691  0023               	movlb	3	; select bank3
  4884  0692  3557               	lslf	DMX_loop@Addr^(0+384),w
  4885  0693  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  4886  0694  0086               	movwf	6
  4887  0695  3001               	movlw	1	; select bank2/3
  4888  0696  0087               	movwf	7
  4889  0697  0008               	return
  4890  0698                     __end_ofPL52:	
  4891  0698                     PL54:	
  4892  0698  0857               	movf	DMX_loop@Addr^(0+384),w
  4893  0699  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4894  069A  0086               	movwf	6
  4895  069B  30FC               	movlw	-4
  4896  069C  0187               	clrf	7
  4897  069D  0581               	andwf	1,f
  4898  069E  0020               	movlb	0	; select bank0
  4899  069F  086C               	movf	_rxdata,w
  4900  06A0  0008               	return
  4901  06A1                     __end_ofPL54:	
  4902  06A1                     PL58:	
  4903  06A1  0086               	movwf	6
  4904  06A2  3001               	movlw	1	; select bank2/3
  4905  06A3  0087               	movwf	7
  4906  06A4  0801               	movf	1,w
  4907  06A5  0021               	movlb	1	; select bank1
  4908  06A6  00E4               	movwf	??_DMX_loop^(0+128)
  4909  06A7  0023               	movlb	3	; select bank3
  4910  06A8  3557               	lslf	DMX_loop@Addr^(0+384),w
  4911  06A9  0008               	return
  4912  06AA                     __end_ofPL58:	
  4913  06AA                     PL60:	
  4914  06AA  0023               	movlb	3	; select bank3
  4915  06AB  0857               	movf	DMX_loop@Addr^(0+384),w
  4916  06AC  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4917  06AD  0086               	movwf	6
  4918  06AE  0187               	clrf	7
  4919  06AF  0801               	movf	1,w
  4920  06B0  39FC               	andlw	-4
  4921  06B1  0008               	return
  4922  06B2                     __end_ofPL60:	
  4923  06B2                     PL64:	
  4924  06B2  3F40               	moviw [0]fsr1
  4925  06B3  0020               	movlb	0	; select bank0
  4926  06B4  00AD               	movwf	___ftge@ff1
  4927  06B5  3F41               	moviw [1]fsr1
  4928  06B6  00AE               	movwf	___ftge@ff1+1
  4929  06B7  3F42               	moviw [2]fsr1
  4930  06B8  00AF               	movwf	___ftge@ff1+2
  4931  06B9  0008               	return
  4932  06BA                     __end_ofPL64:	
  4933  06BA                     PL72:	
  4934  06BA  0857               	movf	?___ftsub,w
  4935  06BB  3FC0               	movwi [0]fsr1
  4936  06BC  0858               	movf	?___ftsub+1,w
  4937  06BD  3FC1               	movwi [1]fsr1
  4938  06BE  0859               	movf	?___ftsub+2,w
  4939  06BF  0008               	return
  4940  06C0                     __end_ofPL72:	
  4941  06C0                     PL76:	
  4942  06C0  082D               	movf	?___ftmul,w
  4943  06C1  00BF               	movwf	___ftdiv@f1
  4944  06C2  082E               	movf	?___ftmul+1,w
  4945  06C3  00C0               	movwf	___ftdiv@f1+1
  4946  06C4  082F               	movf	?___ftmul+2,w
  4947  06C5  00C1               	movwf	___ftdiv@f1+2
  4948  06C6  0008               	return
  4949  06C7                     __end_ofPL76:	
  4950  06C7                     PL80:	
  4951  06C7  0830               	movf	___ftmul@f2,w
  4952  06C8  07B7               	addwf	___ftmul@f3_as_product,f
  4953  06C9  0831               	movf	___ftmul@f2+1,w
  4954  06CA  3DB8               	addwfc	___ftmul@f3_as_product+1,f
  4955  06CB  0832               	movf	___ftmul@f2+2,w
  4956  06CC  3DB9               	addwfc	___ftmul@f3_as_product+2,f
  4957  06CD  0008               	return
  4958  06CE                     __end_ofPL80:	
  4959  06CE                     PL82:	
  4960  06CE  0857               	movf	?___ftsub,w
  4961  06CF  00BF               	movwf	___ftdiv@f1
  4962  06D0  0858               	movf	?___ftsub+1,w
  4963  06D1  00C0               	movwf	___ftdiv@f1+1
  4964  06D2  0859               	movf	?___ftsub+2,w
  4965  06D3  00C1               	movwf	___ftdiv@f1+2
  4966  06D4  0008               	return
  4967  06D5                     __end_ofPL82:	
  4968  06D5                     PL86:	
  4969  06D5  0828               	movf	?___lbtoft,w
  4970  06D6  00D7               	movwf	___ftsub@f2
  4971  06D7  0829               	movf	?___lbtoft+1,w
  4972  06D8  00D8               	movwf	___ftsub@f2+1
  4973  06D9  082A               	movf	?___lbtoft+2,w
  4974  06DA  00D9               	movwf	___ftsub@f2+2
  4975  06DB  0008               	return
  4976  06DC                     __end_ofPL86:	
  4977  06DC                     PL90:	
  4978  06DC  084B               	movf	?___ftadd,w
  4979  06DD  3FC0               	movwi [0]fsr1
  4980  06DE  084C               	movf	?___ftadd+1,w
  4981  06DF  3FC1               	movwi [1]fsr1
  4982  06E0  084D               	movf	?___ftadd+2,w
  4983  06E1  0008               	return
  4984  06E2                     __end_ofPL90:	
  4985  06E2                     PL98:	
  4986  06E2  00B0               	movwf	___ftge@ff2
  4987  06E3  3F41               	moviw [1]fsr1
  4988  06E4  00B1               	movwf	___ftge@ff2+1
  4989  06E5  3F42               	moviw [2]fsr1
  4990  06E6  00B2               	movwf	___ftge@ff2+2
  4991  06E7  0008               	return
  4992  06E8                     __end_ofPL98:	
  4993  06E8                     PL100:	
  4994  06E8  30FF               	movlw	255
  4995  06E9  06CE               	xorwf	___ftadd@f2,f
  4996  06EA  06CF               	xorwf	___ftadd@f2+1,f
  4997  06EB  06D0               	xorwf	___ftadd@f2+2,f
  4998  06EC  0ACE               	incf	___ftadd@f2,f
  4999  06ED  0008               	return
  5000  06EE                     __end_ofPL100:	
  5001  06EE                     PL102:	
  5002  06EE  3080               	movlw	128
  5003  06EF  00CF               	movwf	79	;volatile
  5004  06F0  00BF               	movwf	63	;volatile
  5005  06F1  00AF               	movwf	47	;volatile
  5006  06F2  009F               	movwf	31	;volatile
  5007  06F3  0008               	return
  5008  06F4                     __end_ofPL102:	
  5009  06F4                     PL106:	
  5010  06F4  01A1               	clrf	??_ADC_loop+1
  5011  06F5  35A0               	lslf	??_ADC_loop,f
  5012  06F6  0DA1               	rlf	??_ADC_loop+1,f
  5013  06F7  0720               	addwf	??_ADC_loop,w
  5014  06F8  0084               	movwf	4
  5015  06F9  0008               	return
  5016  06FA                     __end_ofPL106:	
  5017  06FA                     PL108:	
  5018  06FA  0857               	movf	DMX_loop@Addr^(0+384),w
  5019  06FB  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  5020  06FC  0086               	movwf	6
  5021  06FD  0801               	movf	1,w
  5022  06FE  0008               	return
  5023  06FF                     __end_ofPL108:	
  5024  06FF                     PL110:	
  5025  06FF  01BC               	clrf	?___ftdiv
  5026  0700  01BD               	clrf	?___ftdiv+1
  5027  0701  01BE               	clrf	?___ftdiv+2
  5028  0702  0008               	return
  5029  0703                     __end_ofPL110:	
  5030  0703                     PL112:	
  5031  0703  01AD               	clrf	?___ftmul
  5032  0704  01AE               	clrf	?___ftmul+1
  5033  0705  01AF               	clrf	?___ftmul+2
  5034  0706  0008               	return
  5035  0707                     __end_ofPL112:	
  5036  0707                     __ptext13:	
  5037 ;; *************** function ___fttol *****************
  5038 ;; Defined at:
  5039 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  f1              3   61[BANK0 ] float 
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;  lval            4   69[BANK0 ] unsigned long 
  5044 ;;  exp1            1   73[BANK0 ] unsigned char 
  5045 ;;  sign1           1   68[BANK0 ] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  4   61[BANK0 ] long 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0
  5050 ;; Tracked objects:
  5051 ;;		On entry : 1F/0
  5052 ;;		On exit  : 1F/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5055 ;;      Params:         0       4       0       0       0       0       0       0
  5056 ;;      Locals:         0       6       0       0       0       0       0       0
  5057 ;;      Temps:          0       3       0       0       0       0       0       0
  5058 ;;      Totals:         0      13       0       0       0       0       0       0
  5059 ;;Total ram usage:       13 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    4
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_DMX_loop
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function ___fttol
  5071  0707                     ___fttol:	
  5072                           
  5073                           ;incstack = 0
  5074                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5075  0707  275C  3180         	fcall	PL68	;call to abstracted procedure
  5076  0709  1003               	clrc
  5077  070A  0D62               	rlf	??___fttol+1,w
  5078  070B  0D63               	rlf	??___fttol+2,w
  5079  070C  00E9               	movwf	___fttol@exp1
  5080  070D  0869               	movf	___fttol@exp1,w
  5081  070E  1D03               	btfss	3,2
  5082  070F  2F15               	goto	l4308
  5083  0710                     l4306:	
  5084  0710  01DD               	clrf	?___fttol
  5085  0711  01DE               	clrf	?___fttol+1
  5086  0712  01DF               	clrf	?___fttol+2
  5087  0713  01E0               	clrf	?___fttol+3
  5088  0714  0008               	return
  5089  0715                     l4308:	
  5090  0715  275C  3180         	fcall	PL68	;call to abstracted procedure
  5091  0717  3017               	movlw	23
  5092  0718                     u3195:	
  5093  0718  36E3               	lsrf	??___fttol+2,f
  5094  0719  0CE2               	rrf	??___fttol+1,f
  5095  071A  0CE1               	rrf	??___fttol,f
  5096  071B  0B89               	decfsz	9,f
  5097  071C  2F18               	goto	u3195
  5098  071D  0861               	movf	??___fttol,w
  5099  071E  00E4               	movwf	___fttol@sign1
  5100  071F  17DE               	bsf	___fttol@f1+1,7
  5101  0720  01DF               	clrf	___fttol@f1+2
  5102  0721  085D               	movf	___fttol@f1,w
  5103  0722  00E5               	movwf	___fttol@lval
  5104  0723  085E               	movf	___fttol@f1+1,w
  5105  0724  00E6               	movwf	___fttol@lval+1
  5106  0725  085F               	movf	___fttol@f1+2,w
  5107  0726  00E7               	movwf	___fttol@lval+2
  5108  0727  308E               	movlw	142
  5109  0728  01E8               	clrf	___fttol@lval+3
  5110  0729  02E9               	subwf	___fttol@exp1,f
  5111  072A  1FE9               	btfss	___fttol@exp1,7
  5112  072B  2F38               	goto	l4328
  5113  072C  0869               	movf	___fttol@exp1,w
  5114  072D  3A80               	xorlw	128
  5115  072E  3E8F               	addlw	143
  5116  072F  1C03               	btfss	3,0
  5117  0730  2F10               	goto	l4306
  5118  0731                     l4324:	
  5119  0731  36E8               	lsrf	___fttol@lval+3,f
  5120  0732  0CE7               	rrf	___fttol@lval+2,f
  5121  0733  0CE6               	rrf	___fttol@lval+1,f
  5122  0734  0CE5               	rrf	___fttol@lval,f
  5123  0735  0FE9               	incfsz	___fttol@exp1,f
  5124  0736  2F31               	goto	l4324
  5125  0737  2F45               	goto	l4336
  5126  0738                     l4328:	
  5127  0738  3018               	movlw	24
  5128  0739  0269               	subwf	___fttol@exp1,w
  5129  073A  1803               	btfsc	3,0
  5130  073B  2F10               	goto	l4306
  5131  073C                     l4334:	
  5132  073C  0869               	movf	___fttol@exp1,w
  5133  073D  1903               	btfsc	3,2
  5134  073E  2F45               	goto	l4336
  5135  073F  35E5               	lslf	___fttol@lval,f
  5136  0740  0DE6               	rlf	___fttol@lval+1,f
  5137  0741  0DE7               	rlf	___fttol@lval+2,f
  5138  0742  0DE8               	rlf	___fttol@lval+3,f
  5139  0743  03E9               	decf	___fttol@exp1,f
  5140  0744  2F3C               	goto	l4334
  5141  0745                     l4336:	
  5142  0745  0864               	movf	___fttol@sign1,w
  5143  0746  1903               	btfsc	3,2
  5144  0747  2F53               	goto	l4340
  5145  0748  09E5               	comf	___fttol@lval,f
  5146  0749  09E6               	comf	___fttol@lval+1,f
  5147  074A  09E7               	comf	___fttol@lval+2,f
  5148  074B  09E8               	comf	___fttol@lval+3,f
  5149  074C  0AE5               	incf	___fttol@lval,f
  5150  074D  1903               	skipnz
  5151  074E  0AE6               	incf	___fttol@lval+1,f
  5152  074F  1903               	skipnz
  5153  0750  0AE7               	incf	___fttol@lval+2,f
  5154  0751  1903               	skipnz
  5155  0752  0AE8               	incf	___fttol@lval+3,f
  5156  0753                     l4340:	
  5157  0753  0868               	movf	___fttol@lval+3,w
  5158  0754  00E0               	movwf	?___fttol+3
  5159  0755  0867               	movf	___fttol@lval+2,w
  5160  0756  00DF               	movwf	?___fttol+2
  5161  0757  0866               	movf	___fttol@lval+1,w
  5162  0758  00DE               	movwf	?___fttol+1
  5163  0759  0865               	movf	___fttol@lval,w
  5164  075A  00DD               	movwf	?___fttol
  5165  075B  0008               	return
  5166  075C                     __end_of___fttol:	
  5167  075C                     PL68:	
  5168  075C  085D               	movf	___fttol@f1,w
  5169  075D  00E1               	movwf	??___fttol
  5170  075E  085E               	movf	___fttol@f1+1,w
  5171  075F  00E2               	movwf	??___fttol+1
  5172  0760  085F               	movf	___fttol@f1+2,w
  5173  0761  00E3               	movwf	??___fttol+2
  5174  0762  0008               	return
  5175  0763                     __end_ofPL68:	
  5176                           
  5177                           	psect	bssCOMMON
  5178  0076                     __pbssCOMMON:	
  5179  0076                     _DMX_Address:	
  5180  0076                     	ds	2
  5181  0078                     _ADC_Data:	
  5182  0078                     	ds	1
  5183  0079                     _PackCount:	
  5184  0079                     	ds	1
  5185  007A                     _PDCount:	
  5186  007A                     	ds	1
  5187                           
  5188                           	psect	dataCOMMON
  5189  007B                     __pdataCOMMON:	
  5190  007B                     _DMXPeriod:	
  5191  007B                     	ds	1
  5192                           
  5193                           	psect	bssBANK0
  5194  006A                     __pbssBANK0:	
  5195  006A                     _DMX_Flags:	
  5196  006A                     	ds	2
  5197  006C                     _rxdata:	
  5198  006C                     	ds	1
  5199                           
  5200                           	psect	bssBANK1
  5201  00A0                     __pbssBANK1:	
  5202  00A0                     _DMX_TargetBright:	
  5203  00A0                     	ds	12
  5204  00AC                     _DMX_CurrentBright:	
  5205  00AC                     	ds	12
  5206  00B8                     _Timer:	
  5207  00B8                     	ds	7
  5208  00BF                     _DMXSign:	
  5209  00BF                     	ds	4
  5210  00C3                     _DMX_difference:	
  5211  00C3                     	ds	3
  5212  00C6                     _checkSum:	
  5213  00C6                     	ds	2
  5214  00C8                     _TX_PD_Flag:	
  5215  00C8                     	ds	2
  5216  00CA                     _PD_Flag:	
  5217  00CA                     	ds	2
  5218  00CC                     _PD_ID:	
  5219  00CC                     	ds	2
  5220  00CE                     _PD_Manu:	
  5221  00CE                     	ds	2
  5222  00D0                     _TxCount:	
  5223  00D0                     	ds	2
  5224  00D2                     _RxTimer:	
  5225  00D2                     	ds	2
  5226  00D4                     _RxAddrCount:	
  5227  00D4                     	ds	2
  5228  00D6                     _ADC_Flags:	
  5229  00D6                     	ds	1
  5230  00D7                     _Timer_DelayCount:	
  5231  00D7                     	ds	1
  5232  00D8                     _TX_PDCount:	
  5233  00D8                     	ds	1
  5234  00D9                     _TxState:	
  5235  00D9                     	ds	1
  5236  00DA                     _TxByte:	
  5237  00DA                     	ds	1
  5238  00DB                     _DMXStepConst:	
  5239  00DB                     	ds	1
  5240  00DC                     _DMXPeriodDimming:	
  5241  00DC                     	ds	1
  5242  00DD                     _DMXPeriodConst:	
  5243  00DD                     	ds	1
  5244  00DE                     _RxState:	
  5245  00DE                     	ds	1
  5246  00DF                     _RxDataPtr:	
  5247  00DF                     	ds	1
  5248  00E0                     _RxData:	
  5249  00E0                     	ds	4
  5250                           
  5251                           	psect	dataBANK1
  5252  00EC                     __pdataBANK1:	
  5253  00EC                     _DMX_sumRepeat:	
  5254  00EC                     	ds	4
  5255                           
  5256                           	psect	bssBANK2
  5257  0120                     __pbssBANK2:	
  5258  0120                     _RX_RDM_Data:	
  5259  0120                     	ds	24
  5260  0138                     _PWMDCLptr:	
  5261  0138                     	ds	8
  5262  0140                     _CurrentPWM:	
  5263  0140                     	ds	8
  5264  0148                     _preRxData:	
  5265  0148                     	ds	4
  5266  014C                     _i:	
  5267  014C                     	ds	2
  5268  014E                     _TX_RDM_Data:	
  5269  014E                     	ds	24
  5270                           
  5271                           	psect	dataBANK2
  5272  0166                     __pdataBANK2:	
  5273  0166                     _DMX_Repeat:	
  5274  0166                     	ds	8
  5275                           
  5276                           	psect	bssBANK3
  5277  01A0                     __pbssBANK3:	
  5278  01A0                     _DMX_SpaceBright:	
  5279  01A0                     	ds	12
  5280  01AC                     _PWMLDCONptr:	
  5281  01AC                     	ds	8
  5282  01B4                     _PWMDCHptr:	
  5283  01B4                     	ds	8
  5284  01BC                     _DISCOVERY_RDM_Data:	
  5285  01BC                     	ds	24
  5286                           
  5287                           	psect	clrtext
  5288  0A62                     clear_ram0:	
  5289                           ;	Called with FSR0 containing the base address, and
  5290                           ;	btemp/btemp+1 has the size to clear
  5291                           
  5292  0A62  0064               	clrwdt	;clear the watchdog before getting into this loop
  5293  0A63                     clrloop0:	
  5294  0A63  3001               	movlw	1
  5295  0A64  0180               	clrf	0	;clear RAM location pointed to by FSR
  5296  0A65  3101               	addfsr 0,1
  5297  0A66  02FE               	subwf	126,f
  5298  0A67  3000               	movlw	0
  5299  0A68  3BFF               	subwfb	127,f
  5300  0A69  087F               	movf	127,w
  5301  0A6A  047E               	iorwf	126,w
  5302  0A6B  1903               	btfsc	3,2
  5303  0A6C  3400               	retlw	0	;all done for this memory range, return
  5304  0A6D  2A63               	goto	clrloop0	;have we reached the end yet?
  5305                           
  5306                           	psect	cstackBANK3
  5307  01D4                     __pcstackBANK3:	
  5308  01D4                     _DMX_loop$1446:	
  5309                           
  5310                           ; 3 bytes @ 0x0
  5311  01D4                     	ds	3
  5312  01D7                     DMX_loop@Addr:	
  5313                           
  5314                           ; 1 bytes @ 0x3
  5315  01D7                     	ds	1
  5316                           
  5317                           	psect	cstackBANK1
  5318  00E4                     __pcstackBANK1:	
  5319  00E4                     ??_DMX_loop:	
  5320                           
  5321                           ; 1 bytes @ 0x0
  5322  00E4                     	ds	8
  5323                           
  5324                           	psect	cstackCOMMON
  5325  0070                     __pcstackCOMMON:	
  5326  0070                     ?_DMX_loop:	
  5327  0070                     ??_ADC_interrupt:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0070                     ??_DMX_interrput:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333  0070                     ??_RDM_tx_interrupt:	
  5334                           ; 1 bytes @ 0x0
  5335                           
  5336  0070                     ?_RDM_discovery_CC:	
  5337                           ; 1 bytes @ 0x0
  5338                           
  5339  0070                     ?_RDM_GET_CC:	
  5340                           ; 1 bytes @ 0x0
  5341                           
  5342  0070                     ?_RDM_SET_CC:	
  5343                           ; 1 bytes @ 0x0
  5344                           
  5345  0070                     ?_RDM_TXSTART:	
  5346                           ; 1 bytes @ 0x0
  5347                           
  5348  0070                     ?_TX_RDM_Response_Set:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0070                     ?_main:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0070                     ?_isr:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0070                     ?_DMX_init:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0070                     ??_DMX_init:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0070                     ?_ADC_init:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0070                     ??_ADC_init:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0070                     ?_RDM_init:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0070                     ?_RDM_tx_TimerBreak:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0070                     ?___bmul:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0070                     ?_timer1_init:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0070                     ?_ADC_loop:	
  5382                           ; 2 bytes @ 0x0
  5383                           
  5384  0070                     ?_RDM_rx_loop:	
  5385                           ; 2 bytes @ 0x0
  5386                           
  5387  0070                     ?_ADC_interrupt:	
  5388                           ; 2 bytes @ 0x0
  5389                           
  5390  0070                     ?_DMX_interrput:	
  5391                           ; 2 bytes @ 0x0
  5392                           
  5393  0070                     ?_timer1_interrupt:	
  5394                           ; 2 bytes @ 0x0
  5395                           
  5396  0070                     ?_RDM_tx_interrupt:	
  5397                           ; 2 bytes @ 0x0
  5398                           
  5399  0070                     ___bmul@multiplicand:	
  5400                           ; 2 bytes @ 0x0
  5401                           
  5402                           
  5403                           ; 1 bytes @ 0x0
  5404  0070                     	ds	1
  5405  0071                     ??___bmul:	
  5406  0071                     ___bmul@product:	
  5407                           ; 1 bytes @ 0x1
  5408                           
  5409                           
  5410                           ; 1 bytes @ 0x1
  5411  0071                     	ds	1
  5412  0072                     DMX_interrput@RxDat:	
  5413  0072                     ___bmul@multiplier:	
  5414                           ; 1 bytes @ 0x2
  5415                           
  5416                           
  5417                           ; 1 bytes @ 0x2
  5418  0072                     	ds	1
  5419  0073                     ??_RDM_init:	
  5420  0073                     DMX_init@Addr:	
  5421                           ; 1 bytes @ 0x3
  5422                           
  5423                           
  5424                           ; 1 bytes @ 0x3
  5425  0073                     	ds	2
  5426  0075                     ??_timer1_interrupt:	
  5427                           
  5428                           ; 1 bytes @ 0x5
  5429  0075                     	ds	1
  5430  0076                     ??_isr:	
  5431                           
  5432                           	psect	cstackBANK0
  5433  0020                     __pcstackBANK0:	
  5434                           ; 1 bytes @ 0x6
  5435                           
  5436  0020                     ??_timer1_init:	
  5437  0020                     ??_ADC_loop:	
  5438                           ; 1 bytes @ 0x0
  5439                           
  5440  0020                     ??_TX_RDM_Response_Set:	
  5441                           ; 1 bytes @ 0x0
  5442                           
  5443  0020                     ??_RDM_tx_TimerBreak:	
  5444                           ; 1 bytes @ 0x0
  5445                           
  5446  0020                     ?_RDM_get_checkSum:	
  5447                           ; 1 bytes @ 0x0
  5448                           
  5449  0020                     ?___ftpack:	
  5450                           ; 2 bytes @ 0x0
  5451                           
  5452  0020                     ___ftpack@arg:	
  5453                           ; 3 bytes @ 0x0
  5454                           
  5455  0020                     RDM_get_checkSum@Data:	
  5456                           ; 3 bytes @ 0x0
  5457                           
  5458                           
  5459                           ; 24 bytes @ 0x0
  5460  0020                     	ds	3
  5461  0023                     ___ftpack@exp:	
  5462                           
  5463                           ; 1 bytes @ 0x3
  5464  0023                     	ds	1
  5465  0024                     ___ftpack@sign:	
  5466                           
  5467                           ; 1 bytes @ 0x4
  5468  0024                     	ds	1
  5469  0025                     ??___ftpack:	
  5470                           
  5471                           ; 1 bytes @ 0x5
  5472  0025                     	ds	3
  5473  0028                     ?___awtoft:	
  5474  0028                     ?___lbtoft:	
  5475                           ; 3 bytes @ 0x8
  5476                           
  5477  0028                     ?___lwtoft:	
  5478                           ; 3 bytes @ 0x8
  5479                           
  5480  0028                     ___awtoft@c:	
  5481                           ; 3 bytes @ 0x8
  5482                           
  5483  0028                     ___lwtoft@c:	
  5484                           ; 2 bytes @ 0x8
  5485                           
  5486                           
  5487                           ; 2 bytes @ 0x8
  5488  0028                     	ds	3
  5489  002B                     ??___awtoft:	
  5490  002B                     ??___lwtoft:	
  5491                           ; 1 bytes @ 0xB
  5492                           
  5493  002B                     ___awtoft@sign:	
  5494                           ; 1 bytes @ 0xB
  5495                           
  5496                           
  5497                           ; 1 bytes @ 0xB
  5498  002B                     	ds	1
  5499  002C                     ??___lbtoft:	
  5500  002C                     ___lbtoft@c:	
  5501                           ; 1 bytes @ 0xC
  5502                           
  5503                           
  5504                           ; 1 bytes @ 0xC
  5505  002C                     	ds	1
  5506  002D                     ?___ftge:	
  5507  002D                     ?___ftmul:	
  5508                           ; 1 bit 
  5509                           
  5510  002D                     ___ftge@ff1:	
  5511                           ; 3 bytes @ 0xD
  5512                           
  5513  002D                     ___ftmul@f1:	
  5514                           ; 3 bytes @ 0xD
  5515                           
  5516                           
  5517                           ; 3 bytes @ 0xD
  5518  002D                     	ds	3
  5519  0030                     ___ftge@ff2:	
  5520  0030                     ___ftmul@f2:	
  5521                           ; 3 bytes @ 0x10
  5522                           
  5523                           
  5524                           ; 3 bytes @ 0x10
  5525  0030                     	ds	3
  5526  0033                     ??___ftge:	
  5527  0033                     ??___ftmul:	
  5528                           ; 1 bytes @ 0x13
  5529                           
  5530                           
  5531                           ; 1 bytes @ 0x13
  5532  0033                     	ds	3
  5533  0036                     ___ftmul@exp:	
  5534                           
  5535                           ; 1 bytes @ 0x16
  5536  0036                     	ds	1
  5537  0037                     ___ftmul@f3_as_product:	
  5538                           
  5539                           ; 3 bytes @ 0x17
  5540  0037                     	ds	1
  5541  0038                     RDM_get_checkSum@len:	
  5542                           
  5543                           ; 1 bytes @ 0x18
  5544  0038                     	ds	1
  5545  0039                     ??_RDM_get_checkSum:	
  5546  0039                     ??_RDM_TXSTART:	
  5547                           ; 1 bytes @ 0x19
  5548                           
  5549                           
  5550                           ; 1 bytes @ 0x19
  5551  0039                     	ds	1
  5552  003A                     ??_RDM_discovery_CC:	
  5553  003A                     ??_RDM_GET_CC:	
  5554                           ; 1 bytes @ 0x1A
  5555                           
  5556  003A                     ??_RDM_SET_CC:	
  5557                           ; 1 bytes @ 0x1A
  5558                           
  5559  003A                     ___ftmul@cntr:	
  5560                           ; 1 bytes @ 0x1A
  5561                           
  5562                           
  5563                           ; 1 bytes @ 0x1A
  5564  003A                     	ds	1
  5565  003B                     ___ftmul@sign:	
  5566                           
  5567                           ; 1 bytes @ 0x1B
  5568  003B                     	ds	1
  5569  003C                     ?___ftdiv:	
  5570  003C                     ___ftdiv@f2:	
  5571                           ; 3 bytes @ 0x1C
  5572                           
  5573                           
  5574                           ; 3 bytes @ 0x1C
  5575  003C                     	ds	2
  5576  003E                     ??_RDM_rx_loop:	
  5577                           
  5578                           ; 1 bytes @ 0x1E
  5579  003E                     	ds	1
  5580  003F                     ___ftdiv@f1:	
  5581                           
  5582                           ; 3 bytes @ 0x1F
  5583  003F                     	ds	3
  5584  0042                     ??___ftdiv:	
  5585                           
  5586                           ; 1 bytes @ 0x22
  5587  0042                     	ds	3
  5588  0045                     ___ftdiv@cntr:	
  5589                           
  5590                           ; 1 bytes @ 0x25
  5591  0045                     	ds	1
  5592  0046                     ___ftdiv@f3:	
  5593                           
  5594                           ; 3 bytes @ 0x26
  5595  0046                     	ds	3
  5596  0049                     ___ftdiv@exp:	
  5597                           
  5598                           ; 1 bytes @ 0x29
  5599  0049                     	ds	1
  5600  004A                     ___ftdiv@sign:	
  5601                           
  5602                           ; 1 bytes @ 0x2A
  5603  004A                     	ds	1
  5604  004B                     ?___ftadd:	
  5605  004B                     ___ftadd@f1:	
  5606                           ; 3 bytes @ 0x2B
  5607                           
  5608                           
  5609                           ; 3 bytes @ 0x2B
  5610  004B                     	ds	3
  5611  004E                     ___ftadd@f2:	
  5612                           
  5613                           ; 3 bytes @ 0x2E
  5614  004E                     	ds	3
  5615  0051                     ??___ftadd:	
  5616                           
  5617                           ; 1 bytes @ 0x31
  5618  0051                     	ds	3
  5619  0054                     ___ftadd@sign:	
  5620                           
  5621                           ; 1 bytes @ 0x34
  5622  0054                     	ds	1
  5623  0055                     ___ftadd@exp2:	
  5624                           
  5625                           ; 1 bytes @ 0x35
  5626  0055                     	ds	1
  5627  0056                     ___ftadd@exp1:	
  5628                           
  5629                           ; 1 bytes @ 0x36
  5630  0056                     	ds	1
  5631  0057                     ?___ftsub:	
  5632  0057                     ___ftsub@f2:	
  5633                           ; 3 bytes @ 0x37
  5634                           
  5635                           
  5636                           ; 3 bytes @ 0x37
  5637  0057                     	ds	3
  5638  005A                     ___ftsub@f1:	
  5639                           
  5640                           ; 3 bytes @ 0x3A
  5641  005A                     	ds	3
  5642  005D                     ??___ftsub:	
  5643  005D                     ?___fttol:	
  5644                           ; 1 bytes @ 0x3D
  5645                           
  5646  005D                     ___fttol@f1:	
  5647                           ; 4 bytes @ 0x3D
  5648                           
  5649                           
  5650                           ; 3 bytes @ 0x3D
  5651  005D                     	ds	4
  5652  0061                     ??___fttol:	
  5653                           
  5654                           ; 1 bytes @ 0x41
  5655  0061                     	ds	3
  5656  0064                     ___fttol@sign1:	
  5657                           
  5658                           ; 1 bytes @ 0x44
  5659  0064                     	ds	1
  5660  0065                     ___fttol@lval:	
  5661                           
  5662                           ; 4 bytes @ 0x45
  5663  0065                     	ds	4
  5664  0069                     ___fttol@exp1:	
  5665                           
  5666                           ; 1 bytes @ 0x49
  5667  0069                     	ds	1
  5668  006A                     ??_main:	
  5669                           
  5670                           	psect	text3
  5671  0D2A                     __ptext3:	
  5672 ;; *************** function _RDM_discovery_CC *****************
  5673 ;; Defined at:
  5674 ;;		line 56 in file "RDM_Read.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 1C/2
  5685 ;;		On exit  : 1C/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5688 ;;      Params:         0       0       0       0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0       0
  5690 ;;      Temps:          0       4       0       0       0       0       0       0
  5691 ;;      Totals:         0       4       0       0       0       0       0       0
  5692 ;;Total ram usage:        4 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    6
  5695 ;; This function calls:
  5696 ;;		_RDM_TXSTART
  5697 ;; This function is called by:
  5698 ;;		_RDM_rx_loop
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function _RDM_discovery_CC
  5704  0D2A                     _RDM_discovery_CC:	
  5705  0D2A                     l4040:	
  5706                           ;incstack = 0
  5707                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5708                           
  5709                           
  5710                           ;RDM_Read.c: 57: switch (RX_RDM_Data.PID) {
  5711  0D2A  2D8F               	goto	l4100
  5712  0D2B                     l1108:	
  5713                           ;RDM_Read.c: 58: case 0x0001:
  5714                           
  5715                           
  5716                           ;RDM_Read.c: 59: if (!DMX_Flags.RDMmute) {
  5717  0D2B  0020               	movlb	0	; select bank0
  5718  0D2C  196B               	btfsc	_DMX_Flags+1,2	;volatile
  5719  0D2D  0008               	return
  5720                           
  5721                           ;RDM_Read.c: 60: DMX_Flags.RDMcheck = 1;
  5722  0D2E  086B               	movf	_DMX_Flags+1,w	;volatile
  5723  0D2F  39FC               	andlw	-4
  5724  0D30  3801               	iorlw	1
  5725  0D31  00EB               	movwf	_DMX_Flags+1	;volatile
  5726                           
  5727                           ;RDM_Read.c: 61: PD_Manu = &PD.u8[100-2];
  5728  0D32  3021               	movlw	33
  5729  0D33  0021               	movlb	1	; select bank1
  5730  0D34  00CF               	movwf	(_PD_Manu+1)^(0+128)
  5731  0D35  30EE               	movlw	238
  5732  0D36  00CE               	movwf	_PD_Manu^(0+128)
  5733                           
  5734                           ;RDM_Read.c: 62: PD_ID = &PD.u8[100-6];
  5735  0D37  3021               	movlw	33
  5736  0D38  00CD               	movwf	(_PD_ID+1)^(0+128)
  5737  0D39  30EA               	movlw	234
  5738                           
  5739                           ;RDM_Read.c: 63: if (*PD_Manu <= 0x4D52) {
  5740  0D3A  2739  318D         	fcall	PL36	;call to abstracted procedure
  5741  0D3C  3053               	movlw	83
  5742  0D3D  1903               	skipnz
  5743  0D3E  023A               	subwf	??_RDM_discovery_CC,w
  5744  0D3F  1803               	skipnc
  5745  0D40  2D4E               	goto	l4058
  5746                           
  5747                           ;RDM_Read.c: 64: DMX_Flags.RDMcheck++;
  5748                           
  5749                           ;RDM_Read.c: 65: if (*PD_Manu == 0x4D52 && *PD_ID > 0x17C31092) {
  5750  0D41  2715  318D         	fcall	PL16	;call to abstracted procedure
  5751  0D43  1D03               	btfss	3,2
  5752  0D44  2D4E               	goto	l4058
  5753  0D45  2746  318D         	fcall	PL56	;call to abstracted procedure
  5754  0D47  3093               	movlw	147
  5755  0D48  272B  318D         	fcall	PL32	;call to abstracted procedure
  5756  0D4A  1C03               	btfss	3,0
  5757  0D4B  2D4E               	goto	l4058
  5758                           
  5759                           ;RDM_Read.c: 66: DMX_Flags.RDMcheck = 0;
  5760  0D4C  30FC               	movlw	-4
  5761  0D4D  05EB               	andwf	_DMX_Flags+1,f	;volatile
  5762  0D4E                     l4058:	
  5763                           
  5764                           ;RDM_Read.c: 67: }
  5765                           ;RDM_Read.c: 68: }
  5766                           ;RDM_Read.c: 69: PD_Manu = &PD.u8[100-8];
  5767  0D4E  3021               	movlw	33
  5768  0D4F  0021               	movlb	1	; select bank1
  5769  0D50  00CF               	movwf	(_PD_Manu+1)^(0+128)
  5770  0D51  30E8               	movlw	232
  5771  0D52  00CE               	movwf	_PD_Manu^(0+128)
  5772                           
  5773                           ;RDM_Read.c: 70: PD_ID = &PD.u8[100-12];
  5774  0D53  3021               	movlw	33
  5775  0D54  00CD               	movwf	(_PD_ID+1)^(0+128)
  5776  0D55  30E4               	movlw	228
  5777                           
  5778                           ;RDM_Read.c: 71: if (*PD_Manu >= 0x4D52) {
  5779  0D56  2739  318D         	fcall	PL36	;call to abstracted procedure
  5780  0D58  3052               	movlw	82
  5781  0D59  1903               	skipnz
  5782  0D5A  023A               	subwf	??_RDM_discovery_CC,w
  5783  0D5B  1C03               	skipc
  5784  0D5C  2D6A               	goto	l1112
  5785                           
  5786                           ;RDM_Read.c: 72: DMX_Flags.RDMcheck++;
  5787                           
  5788                           ;RDM_Read.c: 73: if (*PD_Manu == 0x4D52 && *PD_ID < 0x17C31092) {
  5789  0D5D  2715  318D         	fcall	PL16	;call to abstracted procedure
  5790  0D5F  1D03               	btfss	3,2
  5791  0D60  2D6A               	goto	l1112
  5792  0D61  2746  318D         	fcall	PL56	;call to abstracted procedure
  5793  0D63  3092               	movlw	146
  5794  0D64  272B  318D         	fcall	PL32	;call to abstracted procedure
  5795  0D66  1803               	btfsc	3,0
  5796  0D67  2D6A               	goto	l1112
  5797                           
  5798                           ;RDM_Read.c: 74: DMX_Flags.RDMcheck = 0;
  5799  0D68  30FC               	movlw	-4
  5800  0D69  05EB               	andwf	_DMX_Flags+1,f	;volatile
  5801  0D6A                     l1112:	
  5802                           
  5803                           ;RDM_Read.c: 75: }
  5804                           ;RDM_Read.c: 76: }
  5805                           ;RDM_Read.c: 77: if (DMX_Flags.RDMcheck == 3) {
  5806  0D6A  086B               	movf	_DMX_Flags+1,w	;volatile
  5807  0D6B  3903               	andlw	3
  5808  0D6C  3A03               	xorlw	3
  5809  0D6D  1D03               	skipz
  5810  0D6E  0008               	return
  5811                           
  5812                           ;RDM_Read.c: 78: TxState = TX_DISCOVERY;
  5813  0D6F  0021               	movlb	1	; select bank1
  5814  0D70  01D9               	clrf	_TxState^(0+128)	;volatile
  5815                           
  5816                           ;RDM_Read.c: 79: TXREG = 0xFE;
  5817  0D71  30FE               	movlw	254
  5818  0D72  0023               	movlb	3	; select bank3
  5819  0D73  009A               	movwf	26	;volatile
  5820                           
  5821                           ;RDM_Read.c: 80: TxByte= &DISCOVERY_RDM_Data.value[23];
  5822  0D74  30D3               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  5823  0D75  0021               	movlb	1	; select bank1
  5824  0D76  00DA               	movwf	_TxByte^(0+128)
  5825                           
  5826                           ;RDM_Read.c: 81: TxCount = 0;
  5827  0D77  01D0               	clrf	_TxCount^(0+128)
  5828  0D78  01D1               	clrf	(_TxCount+1)^(0+128)
  5829                           
  5830                           ;RDM_Read.c: 82: LATC3 = 1;
  5831  0D79  0022               	movlb	2	; select bank2
  5832  0D7A  158E               	bsf	14,3	;volatile
  5833                           
  5834                           ;RDM_Read.c: 83: RCIE = 0;
  5835  0D7B  0021               	movlb	1	; select bank1
  5836  0D7C  1291               	bcf	17,5	;volatile
  5837                           
  5838                           ;RDM_Read.c: 84: TXEN = 1;
  5839  0D7D  0023               	movlb	3	; select bank3
  5840  0D7E  169E               	bsf	30,5	;volatile
  5841                           
  5842                           ;RDM_Read.c: 85: TXIE = 1;
  5843  0D7F  0021               	movlb	1	; select bank1
  5844  0D80  1611               	bsf	17,4	;volatile
  5845  0D81  0008               	return
  5846  0D82                     l1116:	
  5847                           ;RDM_Read.c: 90: case 0x0002:
  5848                           
  5849                           
  5850                           ;RDM_Read.c: 91: DMX_Flags.RDMmute = 1;
  5851  0D82  0020               	movlb	0	; select bank0
  5852  0D83  156B               	bsf	_DMX_Flags+1,2	;volatile
  5853  0D84                     L1:	
  5854                           
  5855                           ;RDM_Read.c: 92: TX_RDM_Data.PDL=2;
  5856  0D84  3002               	movlw	2
  5857  0D85  0022               	movlb	2	; select bank2
  5858                           
  5859                           ;RDM_Read.c: 93: PD.u16[20-1] = 0;
  5860  0D86  2769  318D         	fcall	PL96	;call to abstracted procedure
  5861  0D88  3000               	movlw	0
  5862  0D89  3FC0               	movwi [0]fsr1
  5863  0D8A  3FC1               	movwi [1]fsr1
  5864                           
  5865                           ;RDM_Read.c: 94: RDM_TXSTART();
  5866  0D8B  2DA1               	ljmp	l3954
  5867  0D8C                     l1117:	
  5868                           ;RDM_Read.c: 96: case 0x0003:
  5869                           
  5870                           ;RDM_Read.c: 95: break;
  5871                           
  5872                           
  5873                           ;RDM_Read.c: 97: DMX_Flags.RDMmute = 0;
  5874  0D8C  0020               	movlb	0	; select bank0
  5875  0D8D  116B               	bcf	_DMX_Flags+1,2	;volatile
  5876  0D8E  2D84               	goto	L1
  5877  0D8F                     l4100:	
  5878                           ;RDM_Read.c: 98: TX_RDM_Data.PDL=2;
  5879                           
  5880                           
  5881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5882                           ; Switch size 1, requested type "space"
  5883                           ; Number of cases is 1, Range of values is 0 to 0
  5884                           ; switch strategies available:
  5885                           ; Name         Instructions Cycles
  5886                           ; simple_byte            4     3 (average)
  5887                           ; direct_byte            8     6 (fixed)
  5888                           ; jumptable            260     6 (fixed)
  5889                           ;	Chosen strategy is simple_byte
  5890  0D8F  0022               	movlb	2	; select bank2
  5891  0D90  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  5892  0D91  3A00               	xorlw	0	; case 0
  5893  0D92  1903               	skipnz
  5894  0D93  2D95               	goto	l4672
  5895  0D94  2DA0               	goto	l1119
  5896  0D95                     l4672:	
  5897                           
  5898                           ; Switch size 1, requested type "space"
  5899                           ; Number of cases is 3, Range of values is 1 to 3
  5900                           ; switch strategies available:
  5901                           ; Name         Instructions Cycles
  5902                           ; simple_byte           10     6 (average)
  5903                           ; direct_byte           15     9 (fixed)
  5904                           ; jumptable            263     9 (fixed)
  5905                           ;	Chosen strategy is simple_byte
  5906  0D95  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  5907  0D96  3A01               	xorlw	1	; case 1
  5908  0D97  1903               	skipnz
  5909  0D98  2D2B               	goto	l1108
  5910  0D99  3A03               	xorlw	3	; case 2
  5911  0D9A  1903               	skipnz
  5912  0D9B  2D82               	goto	l1116
  5913  0D9C  3A01               	xorlw	1	; case 3
  5914  0D9D  1903               	skipnz
  5915  0D9E  2D8C               	goto	l1117
  5916  0D9F  2DA0               	goto	l1119
  5917  0DA0                     l1119:	
  5918  0DA0  0008               	return
  5919  0DA1                     __end_of_RDM_discovery_CC:	
  5920  0DA1                     __ptext6:	
  5921 ;; *************** function _RDM_TXSTART *****************
  5922 ;; Defined at:
  5923 ;;		line 107 in file "RDM_Read.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 1D/2
  5934 ;;		On exit  : 1F/1
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5937 ;;      Params:         0       0       0       0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0       0       0       0
  5939 ;;      Temps:          0       1       0       0       0       0       0       0
  5940 ;;      Totals:         0       1       0       0       0       0       0       0
  5941 ;;Total ram usage:        1 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    5
  5944 ;; This function calls:
  5945 ;;		_RDM_get_checkSum
  5946 ;;		_RDM_tx_TimerBreak
  5947 ;;		_TX_RDM_Response_Set
  5948 ;; This function is called by:
  5949 ;;		_RDM_GET_CC
  5950 ;;		_RDM_SET_CC
  5951 ;;		_RDM_discovery_CC
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function _RDM_TXSTART
  5957  0DA1                     _RDM_TXSTART:	
  5958  0DA1                     l3954:	
  5959                           ;incstack = 0
  5960                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5961                           
  5962                           
  5963                           ;RDM_Read.c: 108: TXREG = 0xCC;
  5964  0DA1  30CC               	movlw	204
  5965  0DA2  0023               	movlb	3	; select bank3
  5966  0DA3  009A               	movwf	26	;volatile
  5967                           
  5968                           ;RDM_Read.c: 109: TX_RDM_Response_Set();
  5969  0DA4  25C0  318D         	fcall	_TX_RDM_Response_Set
  5970                           
  5971                           ;RDM_Read.c: 110: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  5972  0DA6  304E               	movlw	low _TX_RDM_Data
  5973  0DA7  0086               	movwf	6
  5974  0DA8  3001               	movlw	high _TX_RDM_Data
  5975  0DA9  2763  318D         	fcall	PL92	;call to abstracted procedure
  5976  0DAB  0020               	movlb	0	; select bank0
  5977  0DAC  00B9               	movwf	??_RDM_TXSTART
  5978  0DAD                     u2750:	
  5979  0DAD  0016               	moviw fsr1++
  5980  0DAE  001A               	movwi fsr0++
  5981  0DAF  0BB9               	decfsz	??_RDM_TXSTART,f
  5982  0DB0  2DAD               	goto	u2750
  5983  0DB1  3028               	movlw	40
  5984  0DB2  00B8               	movwf	RDM_get_checkSum@len
  5985  0DB3  2657  318D         	fcall	_RDM_get_checkSum
  5986  0DB5  0821               	movf	?_RDM_get_checkSum+1,w
  5987  0DB6  0022               	movlb	2	; select bank2
  5988  0DB7  00CF               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  5989  0DB8  0020               	movlb	0	; select bank0
  5990  0DB9  0820               	movf	?_RDM_get_checkSum,w
  5991  0DBA  0022               	movlb	2	; select bank2
  5992  0DBB  00CE               	movwf	_TX_RDM_Data^(0+256)	;volatile
  5993                           
  5994                           ;RDM_Read.c: 111: TxState = TX_START;
  5995  0DBC  3001               	movlw	1
  5996  0DBD  0021               	movlb	1	; select bank1
  5997  0DBE  00D9               	movwf	_TxState^(0+128)	;volatile
  5998                           
  5999                           ;RDM_Read.c: 112: RDM_tx_TimerBreak();
  6000  0DBF  2DDF               	ljmp	l3906
  6001  0DC0                     __end_of_RDM_TXSTART:	
  6002  0DC0                     __ptext7:	
  6003 ;; *************** function _TX_RDM_Response_Set *****************
  6004 ;; Defined at:
  6005 ;;		line 115 in file "RDM_Read.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 1F/3
  6016 ;;		On exit  : 1F/2
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6019 ;;      Params:         0       0       0       0       0       0       0       0
  6020 ;;      Locals:         0       0       0       0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0
  6022 ;;      Totals:         0       0       0       0       0       0       0       0
  6023 ;;Total ram usage:        0 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    4
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_RDM_TXSTART
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           
  6034                           ;psect for function _TX_RDM_Response_Set
  6035  0DC0                     _TX_RDM_Response_Set:	
  6036                           
  6037                           ;RDM_Read.c: 116: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  6041  0DC0  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  6042  0DC1  0086               	movwf	6
  6043  0DC2  3001               	movlw	1	; select bank2/3
  6044  0DC3  0087               	movwf	7
  6045  0DC4  3F40               	moviw [0]fsr1
  6046  0DC5  0022               	movlb	2	; select bank2
  6047  0DC6  00DF               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
  6048  0DC7  3F41               	moviw [1]fsr1
  6049  0DC8  00E0               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
  6050  0DC9  3F42               	moviw [2]fsr1
  6051  0DCA  00E1               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
  6052  0DCB  3F43               	moviw [3]fsr1
  6053  0DCC  00E2               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
  6054                           
  6055                           ;RDM_Read.c: 117: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  6056  0DCD  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  6057  0DCE  00E4               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
  6058  0DCF  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  6059  0DD0  00E3               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
  6060                           
  6061                           ;RDM_Read.c: 118: TX_RDM_Data.TN=RX_RDM_Data.TN;
  6062  0DD1  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  6063  0DD2  00D8               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
  6064                           
  6065                           ;RDM_Read.c: 119: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  6066  0DD3  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6067  0DD4  3E01               	addlw	1
  6068  0DD5  00D3               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
  6069                           
  6070                           ;RDM_Read.c: 120: TX_RDM_Data.PID=RX_RDM_Data.PID;
  6071  0DD6  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6072  0DD7  00D2               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
  6073  0DD8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6074  0DD9  00D1               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
  6075                           
  6076                           ;RDM_Read.c: 121: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  6077  0DDA  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  6078  0DDB  3E18               	addlw	24
  6079  0DDC  00E5               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
  6080                           
  6081                           ;RDM_Read.c: 122: TX_RDM_Data.PORT=0x00;
  6082  0DDD  01D7               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
  6083  0DDE  0008               	return
  6084  0DDF                     __end_of_TX_RDM_Response_Set:	
  6085  0DDF                     __ptext8:	
  6086 ;; *************** function _RDM_tx_TimerBreak *****************
  6087 ;; Defined at:
  6088 ;;		line 188 in file "RDM.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;		None
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;		None
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      void 
  6095 ;; Registers used:
  6096 ;;		wreg
  6097 ;; Tracked objects:
  6098 ;;		On entry : 1F/1
  6099 ;;		On exit  : 1F/1
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6102 ;;      Params:         0       0       0       0       0       0       0       0
  6103 ;;      Locals:         0       0       0       0       0       0       0       0
  6104 ;;      Temps:          0       0       0       0       0       0       0       0
  6105 ;;      Totals:         0       0       0       0       0       0       0       0
  6106 ;;Total ram usage:        0 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    4
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_RDM_TXSTART
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function _RDM_tx_TimerBreak
  6118  0DDF                     _RDM_tx_TimerBreak:	
  6119  0DDF                     l3906:	
  6120                           ;incstack = 0
  6121                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  6122                           
  6123                           
  6124                           ;RDM.c: 189: TMR1 = 0xFFA5;
  6125  0DDF  30FF               	movlw	255
  6126  0DE0  0020               	movlb	0	; select bank0
  6127  0DE1  0097               	movwf	23	;volatile
  6128  0DE2  30A5               	movlw	165
  6129  0DE3  0096               	movwf	22	;volatile
  6130                           
  6131                           ;RDM.c: 190: TimerState = TIMER_BREAK;
  6132  0DE4  3001               	movlw	1
  6133  0DE5  0022               	movlb	2	; select bank2
  6134  0DE6  00EE               	movwf	_TimerState^(0+256)	;volatile
  6135                           
  6136                           ;RDM.c: 191: LATC4 = 0;
  6137  0DE7  120E               	bcf	14,4	;volatile
  6138                           
  6139                           ;RDM.c: 192: LATC3 = 1;
  6140  0DE8  158E               	bsf	14,3	;volatile
  6141                           
  6142                           ;RDM.c: 193: TX_PD_Flag=1;
  6143  0DE9  0021               	movlb	1	; select bank1
  6144  0DEA  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  6145  0DEB  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6146                           
  6147                           ;RDM.c: 194: RCIE = 0;
  6148  0DEC  1291               	bcf	17,5	;volatile
  6149  0DED  0008               	return
  6150  0DEE                     __end_of_RDM_tx_TimerBreak:	
  6151  0DEE                     __ptext2:	
  6152 ;; *************** function _RDM_rx_loop *****************
  6153 ;; Defined at:
  6154 ;;		line 96 in file "RDM.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  2  118[None  ] int 
  6161 ;; Registers used:
  6162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 1F/1
  6165 ;;		On exit  : 1C/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6168 ;;      Params:         0       0       0       0       0       0       0       0
  6169 ;;      Locals:         0       0       0       0       0       0       0       0
  6170 ;;      Temps:          0       1       0       0       0       0       0       0
  6171 ;;      Totals:         0       1       0       0       0       0       0       0
  6172 ;;Total ram usage:        1 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; Hardware stack levels required when called:    7
  6175 ;; This function calls:
  6176 ;;		_RDM_GET_CC
  6177 ;;		_RDM_SET_CC
  6178 ;;		_RDM_discovery_CC
  6179 ;;		_RDM_get_checkSum
  6180 ;; This function is called by:
  6181 ;;		_main
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function _RDM_rx_loop
  6187  0DEE                     _RDM_rx_loop:	
  6188                           
  6189                           ;RDM.c: 97: if (DMX_Flags.RDMNew == 1) {
  6190                           
  6191                           ;incstack = 0
  6192                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6193  0DEE  0020               	movlb	0	; select bank0
  6194  0DEF  1F6A               	btfss	_DMX_Flags,6	;volatile
  6195  0DF0  0008               	return
  6196                           
  6197                           ;RDM.c: 98: DMX_Flags.RDMNew = 0;
  6198  0DF1  136A               	bcf	_DMX_Flags,6	;volatile
  6199                           
  6200                           ;RDM.c: 99: DMX_Flags.RDMcheck = 0;
  6201  0DF2  30FC               	movlw	-4
  6202  0DF3  05EB               	andwf	_DMX_Flags+1,f	;volatile
  6203                           
  6204                           ;RDM.c: 101: if ((RX_RDM_Data.DUID.M == 0x4D52 || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RD
      +                          M_Data.DUID.ID == 0x17C31092 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  6205  0DF4  3052               	movlw	82
  6206  0DF5  0022               	movlb	2	; select bank2
  6207  0DF6  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6208  0DF7  304D               	movlw	77
  6209  0DF8  1903               	skipnz
  6210  0DF9  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6211  0DFA  1903               	btfsc	3,2
  6212  0DFB  2E01               	goto	l4496
  6213  0DFC  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6214  0DFD  2E1E               	goto	l713
  6215  0DFE  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6216  0DFF  1D03               	btfss	3,2
  6217  0E00  2E1E               	goto	l713
  6218  0E01                     l4496:	
  6219  0E01  3092               	movlw	146
  6220  0E02  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6221  0E03  3010               	movlw	16
  6222  0E04  1903               	skipnz
  6223  0E05  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6224  0E06  30C3               	movlw	195
  6225  0E07  1903               	skipnz
  6226  0E08  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6227  0E09  3017               	movlw	23
  6228  0E0A  1903               	skipnz
  6229  0E0B  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6230  0E0C  1903               	btfsc	3,2
  6231  0E0D  2E19               	goto	l4500
  6232  0E0E  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6233  0E0F  2E1E               	goto	l713
  6234  0E10  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6235  0E11  1D03               	skipz
  6236  0E12  2E1E               	goto	l713
  6237  0E13  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6238  0E14  1D03               	skipz
  6239  0E15  2E1E               	goto	l713
  6240  0E16  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6241  0E17  1D03               	btfss	3,2
  6242  0E18  2E1E               	goto	l713
  6243  0E19                     l4500:	
  6244                           
  6245                           ;RDM.c: 102: DMX_Flags.RDMcheck = 1;
  6246  0E19  0020               	movlb	0	; select bank0
  6247  0E1A  086B               	movf	_DMX_Flags+1,w	;volatile
  6248  0E1B  39FC               	andlw	-4
  6249  0E1C  3801               	iorlw	1
  6250  0E1D  00EB               	movwf	_DMX_Flags+1	;volatile
  6251  0E1E                     l713:	
  6252                           
  6253                           ;RDM.c: 103: }
  6254                           ;RDM.c: 105: if (DMX_Flags.RDMcheck == 1 && RDM_get_checkSum(RX_RDM_Data,100) == RX_RDM_
      +                          Data.CS) {
  6255  0E1E  0020               	movlb	0	; select bank0
  6256  0E1F  086B               	movf	_DMX_Flags+1,w	;volatile
  6257  0E20  3903               	andlw	3
  6258  0E21  3A01               	xorlw	1
  6259  0E22  1D03               	skipz
  6260  0E23  2E42               	goto	l718
  6261  0E24  3020               	movlw	low _RX_RDM_Data
  6262  0E25  0086               	movwf	6
  6263  0E26  3001               	movlw	high _RX_RDM_Data
  6264  0E27  2763  318D         	fcall	PL92	;call to abstracted procedure
  6265  0E29  00BE               	movwf	??_RDM_rx_loop
  6266  0E2A                     u3500:	
  6267  0E2A  0016               	moviw fsr1++
  6268  0E2B  001A               	movwi fsr0++
  6269  0E2C  0BBE               	decfsz	??_RDM_rx_loop,f
  6270  0E2D  2E2A               	goto	u3500
  6271  0E2E  3064               	movlw	100
  6272  0E2F  00B8               	movwf	RDM_get_checkSum@len
  6273  0E30  2657  318D         	fcall	_RDM_get_checkSum
  6274  0E32  0022               	movlb	2	; select bank2
  6275  0E33  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  6276  0E34  0020               	movlb	0	; select bank0
  6277  0E35  0621               	xorwf	?_RDM_get_checkSum+1,w
  6278  0E36  1D03               	skipz
  6279  0E37  2E3C               	goto	u3515
  6280  0E38  0022               	movlb	2	; select bank2
  6281  0E39  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  6282  0E3A  0020               	movlb	0	; select bank0
  6283  0E3B  0620               	xorwf	?_RDM_get_checkSum,w
  6284  0E3C                     u3515:	
  6285  0E3C  1D03               	skipz
  6286  0E3D  2E42               	goto	l718
  6287                           
  6288                           ;RDM.c: 106: DMX_Flags.RDMcheck = 2;
  6289  0E3E  086B               	movf	_DMX_Flags+1,w	;volatile
  6290  0E3F  39FC               	andlw	-4
  6291  0E40  3802               	iorlw	2
  6292  0E41  00EB               	movwf	_DMX_Flags+1	;volatile
  6293  0E42                     l718:	
  6294                           
  6295                           ;RDM.c: 107: }
  6296                           ;RDM.c: 109: if (DMX_Flags.RDMcheck == 2) {
  6297  0E42  086B               	movf	_DMX_Flags+1,w	;volatile
  6298  0E43  3903               	andlw	3
  6299  0E44  3A02               	xorlw	2
  6300  0E45  1D03               	skipz
  6301  0E46  0008               	return
  6302                           
  6303                           ;RDM.c: 119: break;
  6304  0E47  0022               	movlb	2	; select bank2
  6305  0E48  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6306                           
  6307                           ; Switch size 1, requested type "space"
  6308                           ; Number of cases is 3, Range of values is 16 to 48
  6309                           ; switch strategies available:
  6310                           ; Name         Instructions Cycles
  6311                           ; simple_byte           10     6 (average)
  6312                           ; direct_byte           75     9 (fixed)
  6313                           ; jumptable            263     9 (fixed)
  6314                           ;	Chosen strategy is simple_byte
  6315  0E49  3A10               	xorlw	16	; case 16
  6316  0E4A  1903               	skipnz
  6317  0E4B  2E53               	goto	l4508
  6318  0E4C  3A30               	xorlw	48	; case 32
  6319  0E4D  1903               	skipnz
  6320  0E4E  2E54               	goto	l4510
  6321  0E4F  3A10               	xorlw	16	; case 48
  6322  0E50  1903               	skipnz
  6323  0E51  2E55               	goto	l4512
  6324  0E52  2E56               	goto	l725
  6325  0E53                     l4508:	
  6326                           
  6327                           ;RDM.c: 112: RDM_discovery_CC();
  6328  0E53  2D2A               	ljmp	l4040
  6329  0E54                     l4510:	
  6330                           ;RDM.c: 113: break;
  6331                           
  6332                           
  6333                           ;RDM.c: 115: RDM_GET_CC();
  6334  0E54  2E88               	ljmp	l4108
  6335  0E55                     l4512:	
  6336                           ;RDM.c: 116: break;
  6337                           
  6338                           
  6339                           ;RDM.c: 118: RDM_SET_CC();
  6340  0E55  2EFE               	ljmp	l4154
  6341  0E56                     l725:	
  6342  0E56  0008               	return
  6343  0E57                     __end_of_RDM_rx_loop:	
  6344  0E57                     __ptext9:	
  6345 ;; *************** function _RDM_get_checkSum *****************
  6346 ;; Defined at:
  6347 ;;		line 126 in file "RDM_Read.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  Data           24    0[BANK0 ] struct .
  6350 ;;  len             1   24[BANK0 ] unsigned char 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  2    0[BANK0 ] unsigned int 
  6355 ;; Registers used:
  6356 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6357 ;; Tracked objects:
  6358 ;;		On entry : 1F/0
  6359 ;;		On exit  : 1F/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6362 ;;      Params:         0      25       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0       0
  6364 ;;      Temps:          0       0       0       0       0       0       0       0
  6365 ;;      Totals:         0      25       0       0       0       0       0       0
  6366 ;;Total ram usage:       25 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    4
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		_RDM_rx_loop
  6373 ;;		_RDM_TXSTART
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _RDM_get_checkSum
  6379  0E57                     _RDM_get_checkSum:	
  6380                           
  6381                           ;RDM_Read.c: 127: checkSum = 0x00CD;
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  6385  0E57  30CD               	movlw	205
  6386  0E58  0021               	movlb	1	; select bank1
  6387  0E59  00C6               	movwf	_checkSum^(0+128)
  6388  0E5A  3017               	movlw	23
  6389  0E5B  01C7               	clrf	(_checkSum+1)^(0+128)
  6390                           
  6391                           ;RDM_Read.c: 128: PackCount = 23;
  6392  0E5C  00F9               	movwf	_PackCount	;volatile
  6393  0E5D                     l3892:	
  6394                           ;RDM_Read.c: 129: while (PackCount > 1) {
  6395                           
  6396  0E5D  3002               	movlw	2
  6397  0E5E  0279               	subwf	_PackCount,w	;volatile
  6398  0E5F  1C03               	btfss	3,0
  6399  0E60  2E6B               	goto	l3894
  6400                           
  6401                           ;RDM_Read.c: 130: checkSum += Data.value[PackCount];
  6402  0E61  0879               	movf	_PackCount,w
  6403  0E62  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  6404  0E63  0086               	movwf	6
  6405  0E64  0187               	clrf	7
  6406  0E65  0801               	movf	1,w
  6407  0E66  07C6               	addwf	_checkSum^(0+128),f
  6408  0E67  1803               	skipnc
  6409  0E68  0AC7               	incf	(_checkSum+1)^(0+128),f
  6410                           
  6411                           ;RDM_Read.c: 131: PackCount--;
  6412  0E69  03F9               	decf	_PackCount,f	;volatile
  6413  0E6A  2E5D               	goto	l3892
  6414  0E6B                     l3894:	
  6415                           
  6416                           ;RDM_Read.c: 132: }
  6417                           ;RDM_Read.c: 133: PackCount = len-1;
  6418  0E6B  0020               	movlb	0	; select bank0
  6419  0E6C  0838               	movf	RDM_get_checkSum@len,w
  6420  0E6D  3EFF               	addlw	255
  6421  0E6E  00F9               	movwf	_PackCount	;volatile
  6422                           
  6423                           ;RDM_Read.c: 134: PDCount = len - Data.PDL;
  6424  0E6F  0822               	movf	RDM_get_checkSum@Data+2,w
  6425  0E70  0238               	subwf	RDM_get_checkSum@len,w
  6426  0E71  00FA               	movwf	_PDCount
  6427  0E72                     l3900:	
  6428                           ;RDM_Read.c: 135: while (PackCount >= PDCount) {
  6429                           
  6430  0E72  087A               	movf	_PDCount,w
  6431  0E73  0279               	subwf	_PackCount,w	;volatile
  6432  0E74  1C03               	btfss	3,0
  6433  0E75  2E7F               	goto	l3902
  6434                           
  6435                           ;RDM_Read.c: 136: checkSum += PD.u8[PDCount];
  6436  0E76  087A               	movf	_PDCount,w
  6437  0E77  27F9  318D         	fcall	PL84	;call to abstracted procedure
  6438  0E79  0021               	movlb	1	; select bank1
  6439  0E7A  07C6               	addwf	_checkSum^(0+128),f
  6440  0E7B  1803               	skipnc
  6441  0E7C  0AC7               	incf	(_checkSum+1)^(0+128),f
  6442                           
  6443                           ;RDM_Read.c: 137: PDCount++;
  6444  0E7D  0AFA               	incf	_PDCount,f
  6445  0E7E  2E72               	goto	l3900
  6446  0E7F                     l3902:	
  6447                           
  6448                           ;RDM_Read.c: 138: }
  6449                           ;RDM_Read.c: 139: return checkSum;
  6450  0E7F  0021               	movlb	1	; select bank1
  6451  0E80  0847               	movf	(_checkSum+1)^(0+128),w
  6452  0E81  0020               	movlb	0	; select bank0
  6453  0E82  00A1               	movwf	?_RDM_get_checkSum+1
  6454  0E83  0021               	movlb	1	; select bank1
  6455  0E84  0846               	movf	_checkSum^(0+128),w
  6456  0E85  0020               	movlb	0	; select bank0
  6457  0E86  00A0               	movwf	?_RDM_get_checkSum
  6458  0E87  0008               	return
  6459  0E88                     __end_of_RDM_get_checkSum:	
  6460  0E88                     __ptext5:	
  6461 ;; *************** function _RDM_GET_CC *****************
  6462 ;; Defined at:
  6463 ;;		line 15 in file "RDM_Read.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      void 
  6470 ;; Registers used:
  6471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 1C/2
  6474 ;;		On exit  : 1F/1
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6477 ;;      Params:         0       0       0       0       0       0       0       0
  6478 ;;      Locals:         0       0       0       0       0       0       0       0
  6479 ;;      Temps:          0       2       0       0       0       0       0       0
  6480 ;;      Totals:         0       2       0       0       0       0       0       0
  6481 ;;Total ram usage:        2 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    6
  6484 ;; This function calls:
  6485 ;;		_RDM_TXSTART
  6486 ;; This function is called by:
  6487 ;;		_RDM_rx_loop
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _RDM_GET_CC
  6493  0E88                     _RDM_GET_CC:	
  6494  0E88                     l4108:	
  6495                           ;incstack = 0
  6496                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6497                           
  6498                           
  6499                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  6500  0E88  2EE7               	goto	l4142
  6501  0E89                     l4110:	
  6502                           
  6503                           ;RDM_Read.c: 18: TX_RDM_Data.PDL=1;
  6504  0E89  3001               	movlw	1
  6505  0E8A  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6506                           
  6507                           ;RDM_Read.c: 19: PD.u8[40-1] =DMX_Flags.RDMidentify;
  6508  0E8B  0020               	movlb	0	; select bank0
  6509  0E8C  0C6B               	rrf	_DMX_Flags+1,w	;volatile
  6510  0E8D  00BA               	movwf	??_RDM_GET_CC
  6511  0E8E  0CBA               	rrf	??_RDM_GET_CC,f
  6512  0E8F  0C3A               	rrf	??_RDM_GET_CC,w
  6513  0E90  3901               	andlw	1
  6514  0E91  00BB               	movwf	??_RDM_GET_CC+1
  6515  0E92  30B3               	movlw	179
  6516  0E93  0086               	movwf	6
  6517  0E94  3021               	movlw	33
  6518  0E95  0087               	movwf	7
  6519  0E96  083B               	movf	??_RDM_GET_CC+1,w
  6520  0E97  0081               	movwf	1
  6521                           
  6522                           ;RDM_Read.c: 20: break;
  6523  0E98  2EFD               	goto	l4144
  6524  0E99                     l4114:	
  6525                           
  6526                           ;RDM_Read.c: 22: TX_RDM_Data.PDL=0x13;
  6527  0E99  3013               	movlw	19
  6528  0E9A  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6529                           
  6530                           ;RDM_Read.c: 23: PD.u16[20-1]=0x0100;
  6531  0E9B  0020               	movlb	0	; select bank0
  6532  0E9C  3001               	movlw	1
  6533  0E9D  01BA               	clrf	??_RDM_GET_CC
  6534  0E9E  00BB               	movwf	??_RDM_GET_CC+1
  6535  0E9F  30B2               	movlw	178
  6536  0EA0  0086               	movwf	6
  6537  0EA1  3021               	movlw	33
  6538  0EA2  0087               	movwf	7
  6539  0EA3  083A               	movf	??_RDM_GET_CC,w
  6540  0EA4  3FC0               	movwi [0]fsr1
  6541  0EA5  083B               	movf	??_RDM_GET_CC+1,w
  6542  0EA6  3FC1               	movwi [1]fsr1
  6543                           
  6544                           ;RDM_Read.c: 24: PD.u16[20-2]=0x0080;
  6545  0EA7  3080               	movlw	128
  6546  0EA8  00BA               	movwf	??_RDM_GET_CC
  6547  0EA9  30B0               	movlw	176
  6548  0EAA  275C  318D         	fcall	PL78	;call to abstracted procedure
  6549                           
  6550                           ;RDM_Read.c: 25: PD.u16[20-3]=0x0004;
  6551  0EAC  3004               	movlw	4
  6552  0EAD  00BA               	movwf	??_RDM_GET_CC
  6553  0EAE  30AE               	movlw	174
  6554  0EAF  275C  318D         	fcall	PL78	;call to abstracted procedure
  6555                           
  6556                           ;RDM_Read.c: 26: PD_ID=&PD.u8[40-10];
  6557  0EB1  3021               	movlw	33
  6558  0EB2  0021               	movlb	1	; select bank1
  6559  0EB3  00CD               	movwf	(_PD_ID+1)^(0+128)
  6560  0EB4  30AA               	movlw	170
  6561  0EB5  00CC               	movwf	_PD_ID^(0+128)
  6562                           
  6563                           ;RDM_Read.c: 27: *PD_ID=1;
  6564  0EB6  0086               	movwf	6
  6565  0EB7  084D               	movf	(_PD_ID+1)^(0+128),w
  6566  0EB8  0087               	movwf	7
  6567  0EB9  3001               	movlw	1
  6568  0EBA  3FC0               	movwi [0]fsr1
  6569  0EBB  3000               	movlw	0
  6570  0EBC  3FC1               	movwi [1]fsr1
  6571  0EBD  3FC2               	movwi [2]fsr1
  6572  0EBE  3FC3               	movwi [3]fsr1
  6573                           
  6574                           ;RDM_Read.c: 28: PD.u16[20-6]=0x04;
  6575  0EBF  3004               	movlw	4
  6576  0EC0  0020               	movlb	0	; select bank0
  6577  0EC1  2755  318D         	fcall	PL70	;call to abstracted procedure
  6578  0EC3  315C               	addfsr 1,28
  6579  0EC4  083A               	movf	??_RDM_GET_CC,w
  6580  0EC5  3FC0               	movwi [0]fsr1
  6581  0EC6  083B               	movf	??_RDM_GET_CC+1,w
  6582  0EC7  3FC1               	movwi [1]fsr1
  6583                           
  6584                           ;RDM_Read.c: 29: PD.u16[20-7]=0x01;
  6585  0EC8  3001               	movlw	1
  6586  0EC9  2755  318D         	fcall	PL70	;call to abstracted procedure
  6587  0ECB  315A               	addfsr 1,26
  6588  0ECC  083A               	movf	??_RDM_GET_CC,w
  6589  0ECD  3FC0               	movwi [0]fsr1
  6590  0ECE  083B               	movf	??_RDM_GET_CC+1,w
  6591                           
  6592                           ;RDM_Read.c: 30: PD.u16[20-8]=DMX_Address;
  6593  0ECF  274F  318D         	fcall	PL66	;call to abstracted procedure
  6594  0ED1  3158               	addfsr 1,24
  6595  0ED2  0876               	movf	_DMX_Address,w
  6596  0ED3  3FC0               	movwi [0]fsr1
  6597  0ED4  0877               	movf	_DMX_Address+1,w
  6598                           
  6599                           ;RDM_Read.c: 31: PD.u16[20-9]=0;
  6600  0ED5  274F  318D         	fcall	PL66	;call to abstracted procedure
  6601  0ED7  3000               	movlw	0
  6602  0ED8  3156               	addfsr 1,22
  6603  0ED9  3FC0               	movwi [0]fsr1
  6604                           
  6605                           ;RDM_Read.c: 32: PD.u8[40-19]=0;
  6606  0EDA  274F  318D         	fcall	PL66	;call to abstracted procedure
  6607  0EDC  3155               	addfsr 1,21
  6608  0EDD  0181               	clrf	1
  6609                           
  6610                           ;RDM_Read.c: 33: break;
  6611  0EDE  2EFD               	goto	l4144
  6612  0EDF                     l4136:	
  6613                           
  6614                           ;RDM_Read.c: 35: TX_RDM_Data.PDL=2;
  6615  0EDF  3002               	movlw	2
  6616                           
  6617                           ;RDM_Read.c: 37: PD.u16[20-1]=DMX_Address;
  6618  0EE0  2769  318D         	fcall	PL96	;call to abstracted procedure
  6619  0EE2  0876               	movf	_DMX_Address,w
  6620  0EE3  3FC0               	movwi [0]fsr1
  6621  0EE4  0877               	movf	_DMX_Address+1,w
  6622  0EE5  3FC1               	movwi [1]fsr1
  6623                           
  6624                           ;RDM_Read.c: 38: break;
  6625  0EE6  2EFD               	goto	l4144
  6626  0EE7                     l4142:	
  6627                           
  6628                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6629                           ; Switch size 1, requested type "space"
  6630                           ; Number of cases is 2, Range of values is 0 to 16
  6631                           ; switch strategies available:
  6632                           ; Name         Instructions Cycles
  6633                           ; simple_byte            7     4 (average)
  6634                           ; direct_byte           40     6 (fixed)
  6635                           ; jumptable            260     6 (fixed)
  6636                           ;	Chosen strategy is simple_byte
  6637  0EE7  0022               	movlb	2	; select bank2
  6638  0EE8  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6639  0EE9  3A00               	xorlw	0	; case 0
  6640  0EEA  1903               	skipnz
  6641  0EEB  2EF0               	goto	l4676
  6642  0EEC  3A10               	xorlw	16	; case 16
  6643  0EED  1903               	skipnz
  6644  0EEE  2EF8               	goto	l4678
  6645  0EEF  2EFD               	goto	l4144
  6646  0EF0                     l4676:	
  6647                           
  6648                           ; Switch size 1, requested type "space"
  6649                           ; Number of cases is 2, Range of values is 96 to 240
  6650                           ; switch strategies available:
  6651                           ; Name         Instructions Cycles
  6652                           ; simple_byte            7     4 (average)
  6653                           ; jumptable            263     9 (fixed)
  6654                           ;	Chosen strategy is simple_byte
  6655  0EF0  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6656  0EF1  3A60               	xorlw	96	; case 96
  6657  0EF2  1903               	skipnz
  6658  0EF3  2E99               	goto	l4114
  6659  0EF4  3A90               	xorlw	144	; case 240
  6660  0EF5  1903               	skipnz
  6661  0EF6  2EDF               	goto	l4136
  6662  0EF7  2EFD               	goto	l4144
  6663  0EF8                     l4678:	
  6664                           
  6665                           ; Switch size 1, requested type "space"
  6666                           ; Number of cases is 1, Range of values is 0 to 0
  6667                           ; switch strategies available:
  6668                           ; Name         Instructions Cycles
  6669                           ; simple_byte            4     3 (average)
  6670                           ; direct_byte            8     6 (fixed)
  6671                           ; jumptable            260     6 (fixed)
  6672                           ;	Chosen strategy is simple_byte
  6673  0EF8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6674  0EF9  3A00               	xorlw	0	; case 0
  6675  0EFA  1903               	skipnz
  6676  0EFB  2E89               	goto	l4110
  6677  0EFC  2EFD               	goto	l4144
  6678  0EFD                     l4144:	
  6679                           
  6680                           ;RDM_Read.c: 40: RDM_TXSTART();
  6681  0EFD  2DA1               	ljmp	l3954
  6682  0EFE                     __end_of_RDM_GET_CC:	
  6683  0EFE                     __ptext4:	
  6684 ;; *************** function _RDM_SET_CC *****************
  6685 ;; Defined at:
  6686 ;;		line 43 in file "RDM_Read.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 1C/2
  6697 ;;		On exit  : 1F/1
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6700 ;;      Params:         0       0       0       0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0
  6703 ;;      Totals:         0       0       0       0       0       0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    6
  6707 ;; This function calls:
  6708 ;;		_RDM_TXSTART
  6709 ;; This function is called by:
  6710 ;;		_RDM_rx_loop
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function _RDM_SET_CC
  6716  0EFE                     _RDM_SET_CC:	
  6717  0EFE                     l4154:	
  6718                           ;incstack = 0
  6719                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6720                           
  6721                           
  6722                           ;RDM_Read.c: 44: switch (RX_RDM_Data.PID){
  6723  0EFE  2F09               	goto	l4162
  6724  0EFF                     l4156:	
  6725                           
  6726                           ;RDM_Read.c: 47: DMX_Address=PD.u16[50-1];
  6727  0EFF  30EE               	movlw	238
  6728  0F00  0086               	movwf	6
  6729  0F01  3021               	movlw	33
  6730  0F02  0087               	movwf	7
  6731  0F03  3F40               	moviw [0]fsr1
  6732  0F04  00F6               	movwf	_DMX_Address
  6733  0F05  3F41               	moviw [1]fsr1
  6734  0F06  00F7               	movwf	_DMX_Address+1
  6735                           
  6736                           ;RDM_Read.c: 49: TX_RDM_Data.PDL=0;
  6737  0F07  01D0               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6738                           
  6739                           ;RDM_Read.c: 51: break;
  6740  0F08  2F14               	goto	l4164
  6741  0F09                     l4162:	
  6742                           
  6743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6744                           ; Switch size 1, requested type "space"
  6745                           ; Number of cases is 1, Range of values is 0 to 0
  6746                           ; switch strategies available:
  6747                           ; Name         Instructions Cycles
  6748                           ; simple_byte            4     3 (average)
  6749                           ; direct_byte            8     6 (fixed)
  6750                           ; jumptable            260     6 (fixed)
  6751                           ;	Chosen strategy is simple_byte
  6752  0F09  0022               	movlb	2	; select bank2
  6753  0F0A  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6754  0F0B  3A00               	xorlw	0	; case 0
  6755  0F0C  1903               	skipnz
  6756  0F0D  2F0F               	goto	l4674
  6757  0F0E  2F14               	goto	l4164
  6758  0F0F                     l4674:	
  6759                           
  6760                           ; Switch size 1, requested type "space"
  6761                           ; Number of cases is 1, Range of values is 240 to 240
  6762                           ; switch strategies available:
  6763                           ; Name         Instructions Cycles
  6764                           ; simple_byte            4     3 (average)
  6765                           ; direct_byte           11     9 (fixed)
  6766                           ; jumptable            263     9 (fixed)
  6767                           ;	Chosen strategy is simple_byte
  6768  0F0F  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6769  0F10  3AF0               	xorlw	240	; case 240
  6770  0F11  1903               	skipnz
  6771  0F12  2EFF               	goto	l4156
  6772  0F13  2F14               	goto	l4164
  6773  0F14                     l4164:	
  6774                           
  6775                           ;RDM_Read.c: 53: RDM_TXSTART();
  6776  0F14  2DA1               	ljmp	l3954
  6777  0F15                     __end_of_RDM_SET_CC:	
  6778  0F15                     PL16:	
  6779  0F15  086B               	movf	_DMX_Flags+1,w	;volatile
  6780  0F16  3903               	andlw	3
  6781  0F17  00BA               	movwf	??_RDM_discovery_CC
  6782  0F18  0ABA               	incf	??_RDM_discovery_CC,f
  6783  0F19  086B               	movf	_DMX_Flags+1,w	;volatile
  6784  0F1A  063A               	xorwf	??_RDM_discovery_CC,w
  6785  0F1B  39FC               	andlw	-4
  6786  0F1C  063A               	xorwf	??_RDM_discovery_CC,w
  6787  0F1D  00EB               	movwf	_DMX_Flags+1	;volatile
  6788  0F1E  0021               	movlb	1	; select bank1
  6789  0F1F  084E               	movf	_PD_Manu^(0+128),w
  6790  0F20  0086               	movwf	6
  6791  0F21  084F               	movf	(_PD_Manu+1)^(0+128),w
  6792  0F22  0087               	movwf	7
  6793  0F23  0016               	moviw fsr1++
  6794  0F24  3A52               	xorlw	82
  6795  0F25  0020               	movlb	0	; select bank0
  6796  0F26  00BA               	movwf	??_RDM_discovery_CC
  6797  0F27  0016               	moviw fsr1++
  6798  0F28  3A4D               	xorlw	77
  6799  0F29  04BA               	iorwf	??_RDM_discovery_CC,f
  6800  0F2A  0008               	return
  6801  0F2B                     __end_ofPL16:	
  6802  0F2B                     PL32:	
  6803  0F2B  023A               	subwf	??_RDM_discovery_CC,w
  6804  0F2C  3F41               	moviw [1]fsr1
  6805  0F2D  00BA               	movwf	??_RDM_discovery_CC
  6806  0F2E  3010               	movlw	16
  6807  0F2F  3B3A               	subwfb	??_RDM_discovery_CC,w
  6808  0F30  3F42               	moviw [2]fsr1
  6809  0F31  00BA               	movwf	??_RDM_discovery_CC
  6810  0F32  30C3               	movlw	195
  6811  0F33  3B3A               	subwfb	??_RDM_discovery_CC,w
  6812  0F34  3F43               	moviw [3]fsr1
  6813  0F35  00BA               	movwf	??_RDM_discovery_CC
  6814  0F36  3017               	movlw	23
  6815  0F37  3B3A               	subwfb	??_RDM_discovery_CC,w
  6816  0F38  0008               	return
  6817  0F39                     __end_ofPL32:	
  6818  0F39                     PL36:	
  6819  0F39  00CC               	movwf	_PD_ID^(0+128)
  6820  0F3A  084E               	movf	_PD_Manu^(0+128),w
  6821  0F3B  0086               	movwf	6
  6822  0F3C  084F               	movf	(_PD_Manu+1)^(0+128),w
  6823  0F3D  0087               	movwf	7
  6824  0F3E  3F40               	moviw [0]fsr1
  6825  0F3F  0020               	movlb	0	; select bank0
  6826  0F40  00BA               	movwf	??_RDM_discovery_CC
  6827  0F41  3F41               	moviw [1]fsr1
  6828  0F42  00BB               	movwf	??_RDM_discovery_CC+1
  6829  0F43  304D               	movlw	77
  6830  0F44  023B               	subwf	??_RDM_discovery_CC+1,w
  6831  0F45  0008               	return
  6832  0F46                     __end_ofPL36:	
  6833  0F46                     PL56:	
  6834  0F46  0021               	movlb	1	; select bank1
  6835  0F47  084C               	movf	_PD_ID^(0+128),w
  6836  0F48  0086               	movwf	6
  6837  0F49  084D               	movf	(_PD_ID+1)^(0+128),w
  6838  0F4A  0087               	movwf	7
  6839  0F4B  3F40               	moviw [0]fsr1
  6840  0F4C  0020               	movlb	0	; select bank0
  6841  0F4D  00BA               	movwf	??_RDM_discovery_CC
  6842  0F4E  0008               	return
  6843  0F4F                     __end_ofPL56:	
  6844  0F4F                     PL66:	
  6845  0F4F  3FC1               	movwi [1]fsr1
  6846  0F50  308C               	movlw	140
  6847  0F51  0086               	movwf	6
  6848  0F52  3021               	movlw	33
  6849  0F53  0087               	movwf	7
  6850  0F54  0008               	return
  6851  0F55                     __end_ofPL66:	
  6852  0F55                     PL70:	
  6853  0F55  00BA               	movwf	??_RDM_GET_CC
  6854  0F56  308C               	movlw	140
  6855  0F57  01BB               	clrf	??_RDM_GET_CC+1
  6856  0F58  0086               	movwf	6
  6857  0F59  3021               	movlw	33
  6858  0F5A  0087               	movwf	7
  6859  0F5B  0008               	return
  6860  0F5C                     __end_ofPL70:	
  6861  0F5C                     PL78:	
  6862  0F5C  01BB               	clrf	??_RDM_GET_CC+1
  6863  0F5D  0086               	movwf	6
  6864  0F5E  083A               	movf	??_RDM_GET_CC,w
  6865  0F5F  3FC0               	movwi [0]fsr1
  6866  0F60  083B               	movf	??_RDM_GET_CC+1,w
  6867  0F61  3FC1               	movwi [1]fsr1
  6868  0F62  0008               	return
  6869  0F63                     __end_ofPL78:	
  6870  0F63                     PL92:	
  6871  0F63  0087               	movwf	7
  6872  0F64  3020               	movlw	low RDM_get_checkSum@Data
  6873  0F65  0084               	movwf	4
  6874  0F66  3000               	movlw	high RDM_get_checkSum@Data
  6875  0F67  0085               	movwf	5
  6876  0F68  3418               	retlw	24
  6877  0F69                     __end_ofPL92:	
  6878  0F69                     PL96:	
  6879  0F69  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6880  0F6A  30B2               	movlw	178
  6881  0F6B  0086               	movwf	6
  6882  0F6C  3021               	movlw	33
  6883  0F6D  0087               	movwf	7
  6884  0F6E  0008               	return
  6885  0F6F                     __end_ofPL96:	
  6886  0F6F                     __ptext28:	
  6887 ;; *************** function _RDM_tx_interrupt *****************
  6888 ;; Defined at:
  6889 ;;		line 125 in file "RDM.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  2  126[None  ] int 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6898 ;; Tracked objects:
  6899 ;;		On entry : 4/0
  6900 ;;		On exit  : 1C/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6903 ;;      Params:         0       0       0       0       0       0       0       0
  6904 ;;      Locals:         0       0       0       0       0       0       0       0
  6905 ;;      Temps:          4       0       0       0       0       0       0       0
  6906 ;;      Totals:         4       0       0       0       0       0       0       0
  6907 ;;Total ram usage:        4 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_isr
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function _RDM_tx_interrupt
  6918  0F6F                     _RDM_tx_interrupt:	
  6919                           
  6920                           ;RDM.c: 126: if (TXIE && TXIF) {
  6921                           
  6922                           ;incstack = 0
  6923                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  6924  0F6F  0021               	movlb	1	; select bank1
  6925  0F70  1E11               	btfss	17,4	;volatile
  6926  0F71  0008               	return
  6927  0F72  0020               	movlb	0	; select bank0
  6928  0F73  1E11               	btfss	17,4	;volatile
  6929  0F74  0008               	return
  6930  0F75  2FDE               	goto	i1l3718
  6931  0F76                     i1l3672:	
  6932                           
  6933                           ;RDM.c: 129: if(TX_PD_Flag==1){
  6934  0F76  0348               	decf	_TX_PD_Flag^(0+128),w	;volatile
  6935  0F77  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  6936  0F78  1D03               	btfss	3,2
  6937  0F79  2F80               	goto	i1l3678
  6938                           
  6939                           ;RDM.c: 130: TX_PD_Flag=0;
  6940  0F7A  01C8               	clrf	_TX_PD_Flag^(0+128)	;volatile
  6941  0F7B  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6942                           
  6943                           ;RDM.c: 131: TXREG = 0xCC;
  6944  0F7C  30CC               	movlw	204
  6945  0F7D  0023               	movlb	3	; select bank3
  6946  0F7E  009A               	movwf	26	;volatile
  6947                           
  6948                           ;RDM.c: 132: }else{
  6949  0F7F  0008               	return
  6950  0F80                     i1l3678:	
  6951                           
  6952                           ;RDM.c: 133: TXREG = 0x01;
  6953  0F80  3001               	movlw	1
  6954  0F81  0023               	movlb	3	; select bank3
  6955  0F82  009A               	movwf	26	;volatile
  6956                           
  6957                           ;RDM.c: 134: TxByte = &TX_RDM_Data.value[23];
  6958  0F83  3065               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
  6959  0F84  0021               	movlb	1	; select bank1
  6960  0F85  00DA               	movwf	_TxByte^(0+128)
  6961  0F86  3002               	movlw	2
  6962                           
  6963                           ;RDM.c: 135: TxCount = 0;
  6964  0F87  01D0               	clrf	_TxCount^(0+128)
  6965  0F88  01D1               	clrf	(_TxCount+1)^(0+128)
  6966                           
  6967                           ;RDM.c: 136: TxState = TX_DATA;
  6968  0F89  00D9               	movwf	_TxState^(0+128)	;volatile
  6969  0F8A  0008               	return
  6970  0F8B                     i1l3684:	
  6971                           
  6972                           ;RDM.c: 144: if (TxCount <= 24) {
  6973  0F8B  3000               	movlw	0
  6974  0F8C  0251               	subwf	(_TxCount+1)^(0+128),w
  6975  0F8D  3019               	movlw	25
  6976  0F8E  1903               	skipnz
  6977  0F8F  0250               	subwf	_TxCount^(0+128),w
  6978  0F90  1803               	skipnc
  6979  0F91  2F96               	goto	i1l735
  6980                           
  6981                           ;RDM.c: 146: TXREG = *TxByte;
  6982                           
  6983                           ;RDM.c: 147: TxByte--;
  6984                           
  6985                           ;RDM.c: 148: TxCount++;
  6986  0F92  27EE               	fcall	PL42	;call to abstracted procedure
  6987  0F93  1903               	skipnz
  6988  0F94  0AD1               	incf	(_TxCount+1)^(0+128),f
  6989                           
  6990                           ;RDM.c: 149: }else{
  6991  0F95  0008               	return
  6992  0F96                     i1l735:	
  6993                           
  6994                           ;RDM.c: 150: RCIE = 1;
  6995  0F96  1691               	bsf	17,5	;volatile
  6996                           
  6997                           ;RDM.c: 151: LATC4 = 1;
  6998  0F97  0022               	movlb	2	; select bank2
  6999  0F98  160E               	bsf	14,4	;volatile
  7000                           
  7001                           ;RDM.c: 152: TXEN = 0;
  7002  0F99  0023               	movlb	3	; select bank3
  7003  0F9A  129E               	bcf	30,5	;volatile
  7004                           
  7005                           ;RDM.c: 153: TXIE = 0;
  7006  0F9B  0021               	movlb	1	; select bank1
  7007  0F9C  1211               	bcf	17,4	;volatile
  7008                           
  7009                           ;RDM.c: 154: LATC3=0;
  7010  0F9D  0022               	movlb	2	; select bank2
  7011  0F9E  118E               	bcf	14,3	;volatile
  7012  0F9F  0008               	return
  7013  0FA0                     i1l3692:	
  7014                           
  7015                           ;RDM.c: 158: if (TxCount <= 24) {
  7016  0FA0  3000               	movlw	0
  7017  0FA1  0251               	subwf	(_TxCount+1)^(0+128),w
  7018  0FA2  3019               	movlw	25
  7019  0FA3  1903               	skipnz
  7020  0FA4  0250               	subwf	_TxCount^(0+128),w
  7021  0FA5  1803               	skipnc
  7022  0FA6  2F96               	goto	i1l735
  7023                           
  7024                           ;RDM.c: 160: TXREG = *TxByte;
  7025                           
  7026                           ;RDM.c: 161: TxByte--;
  7027                           
  7028                           ;RDM.c: 162: TxCount++;
  7029  0FA7  27EE  318D         	fcall	PL42	;call to abstracted procedure
  7030  0FA9  1903               	skipnz
  7031  0FAA  0AD1               	incf	(_TxCount+1)^(0+128),f
  7032                           
  7033                           ;RDM.c: 163: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  7034  0FAB  3016               	movlw	22
  7035  0FAC  0650               	xorwf	_TxCount^(0+128),w
  7036  0FAD  0451               	iorwf	(_TxCount+1)^(0+128),w
  7037  0FAE  1D03               	btfss	3,2
  7038  0FAF  0008               	return
  7039  0FB0  0022               	movlb	2	; select bank2
  7040  0FB1  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7041  0FB2  1903               	btfsc	3,2
  7042  0FB3  0008               	return
  7043  0FB4  0021               	movlb	1	; select bank1
  7044  0FB5  0848               	movf	_TX_PD_Flag^(0+128),w	;volatile
  7045  0FB6  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7046  0FB7  1D03               	btfss	3,2
  7047  0FB8  0008               	return
  7048                           
  7049                           ;RDM.c: 164: TxState = TX_RDM_PD;
  7050  0FB9  3003               	movlw	3
  7051  0FBA  00D9               	movwf	_TxState^(0+128)	;volatile
  7052                           
  7053                           ;RDM.c: 165: TX_PDCount = 40-1;
  7054  0FBB  3027               	movlw	39
  7055  0FBC  00D8               	movwf	_TX_PDCount^(0+128)
  7056  0FBD  0008               	return
  7057  0FBE                     i1l3708:	
  7058                           
  7059                           ;RDM.c: 176: TXREG = PD.u8[TX_PDCount];
  7060  0FBE  0858               	movf	_TX_PDCount^(0+128),w
  7061  0FBF  27F9  318D         	fcall	PL84	;call to abstracted procedure
  7062  0FC1  0023               	movlb	3	; select bank3
  7063  0FC2  009A               	movwf	26	;volatile
  7064                           
  7065                           ;RDM.c: 177: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  7066  0FC3  01F1               	clrf	??_RDM_tx_interrupt+1
  7067  0FC4  0022               	movlb	2	; select bank2
  7068  0FC5  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7069  0FC6  3C28               	sublw	40
  7070  0FC7  00F0               	movwf	??_RDM_tx_interrupt
  7071  0FC8  1C03               	skipc
  7072  0FC9  03F1               	decf	??_RDM_tx_interrupt+1,f
  7073  0FCA  0021               	movlb	1	; select bank1
  7074  0FCB  0858               	movf	_TX_PDCount^(0+128),w
  7075  0FCC  00F2               	movwf	??_RDM_tx_interrupt+2
  7076  0FCD  01F3               	clrf	??_RDM_tx_interrupt+3
  7077  0FCE  0871               	movf	??_RDM_tx_interrupt+1,w
  7078  0FCF  0673               	xorwf	??_RDM_tx_interrupt+3,w
  7079  0FD0  1D03               	skipz
  7080  0FD1  2FD4               	goto	u264_25
  7081  0FD2  0870               	movf	??_RDM_tx_interrupt,w
  7082  0FD3  0672               	xorwf	??_RDM_tx_interrupt+2,w
  7083  0FD4                     u264_25:	
  7084  0FD4  1D03               	skipz
  7085  0FD5  2FDC               	goto	i1l3714
  7086                           
  7087                           ;RDM.c: 178: TxState = TX_DATA;
  7088  0FD6  3002               	movlw	2
  7089  0FD7  00D9               	movwf	_TxState^(0+128)	;volatile
  7090                           
  7091                           ;RDM.c: 179: TX_PD_Flag = 1;
  7092  0FD8  3001               	movlw	1
  7093  0FD9  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  7094  0FDA  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7095                           
  7096                           ;RDM.c: 180: }else{
  7097  0FDB  0008               	return
  7098  0FDC                     i1l3714:	
  7099                           
  7100                           ;RDM.c: 181: TX_PDCount--;
  7101  0FDC  03D8               	decf	_TX_PDCount^(0+128),f
  7102  0FDD  0008               	return
  7103  0FDE                     i1l3718:	
  7104  0FDE  0021               	movlb	1	; select bank1
  7105  0FDF  0859               	movf	_TxState^(0+128),w	;volatile
  7106                           
  7107                           ; Switch size 1, requested type "space"
  7108                           ; Number of cases is 4, Range of values is 0 to 3
  7109                           ; switch strategies available:
  7110                           ; Name         Instructions Cycles
  7111                           ; simple_byte           13     7 (average)
  7112                           ; direct_byte           14     6 (fixed)
  7113                           ; jumptable            260     6 (fixed)
  7114                           ;	Chosen strategy is simple_byte
  7115  0FE0  3A00               	xorlw	0	; case 0
  7116  0FE1  1903               	skipnz
  7117  0FE2  2F8B               	goto	i1l3684
  7118  0FE3  3A01               	xorlw	1	; case 1
  7119  0FE4  1903               	skipnz
  7120  0FE5  2F76               	goto	i1l3672
  7121  0FE6  3A03               	xorlw	3	; case 2
  7122  0FE7  1903               	skipnz
  7123  0FE8  2FA0               	goto	i1l3692
  7124  0FE9  3A01               	xorlw	1	; case 3
  7125  0FEA  1903               	skipnz
  7126  0FEB  2FBE               	goto	i1l3708
  7127  0FEC  2FED               	goto	i1l744
  7128  0FED                     i1l744:	
  7129  0FED  0008               	return
  7130  0FEE                     __end_of_RDM_tx_interrupt:	
  7131  0FEE                     PL42:	
  7132  0FEE  085A               	movf	_TxByte^(0+128),w
  7133  0FEF  0086               	movwf	6
  7134  0FF0  3001               	movlw	1	; select bank2/3
  7135  0FF1  0087               	movwf	7
  7136  0FF2  0801               	movf	1,w
  7137  0FF3  0023               	movlb	3	; select bank3
  7138  0FF4  009A               	movwf	26	;volatile
  7139  0FF5  0021               	movlb	1	; select bank1
  7140  0FF6  03DA               	decf	_TxByte^(0+128),f
  7141  0FF7  0AD0               	incf	_TxCount^(0+128),f
  7142  0FF8  0008               	return
  7143  0FF9                     __end_ofPL42:	
  7144  0FF9                     PL84:	
  7145  0FF9  3E8C               	addlw	140
  7146  0FFA  0086               	movwf	6
  7147  0FFB  3021               	movlw	33
  7148  0FFC  0187               	clrf	7
  7149  0FFD  3D87               	addwfc	7,f
  7150  0FFE  0801               	movf	1,w
  7151  0FFF  0008               	return
  7152  1000                     __end_ofPL84:	
  7153                           
  7154                           	psect	intentry
  7155  0004                     __pintentry:	
  7156 ;; *************** function _isr *****************
  7157 ;; Defined at:
  7158 ;;		line 84 in file "main.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 1C/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7172 ;;      Params:         0       0       0       0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0
  7175 ;;      Totals:         0       0       0       0       0       0       0       0
  7176 ;;Total ram usage:        0 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    3
  7179 ;; This function calls:
  7180 ;;		_ADC_interrupt
  7181 ;;		_DMX_interrput
  7182 ;;		_RDM_tx_interrupt
  7183 ;;		_timer1_interrupt
  7184 ;; This function is called by:
  7185 ;;		Interrupt level 1
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189  0004                     _isr:	
  7190                           
  7191                           ;incstack = 0
  7192  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7193                           
  7194                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7195  0005  3180               	pagesel	$
  7196                           
  7197                           ;main.c: 85: ADC_interrupt();
  7198  0006  318A  2258  3180   	fcall	_ADC_interrupt
  7199                           
  7200                           ;main.c: 87: DMX_interrput();
  7201  0009  318A  226E  3180   	fcall	_DMX_interrput
  7202                           
  7203                           ;main.c: 88: timer1_interrupt();
  7204  000C  318B  2351  3180   	fcall	_timer1_interrupt
  7205                           
  7206                           ;main.c: 89: RDM_tx_interrupt();
  7207  000F  318F  276F         	fcall	_RDM_tx_interrupt
  7208  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7209  0012  0009               	retfie
  7210  0013                     __end_of_isr:	
  7211                           
  7212                           	psect	text23
  7213  0B51                     __ptext23:	
  7214 ;; *************** function _timer1_interrupt *****************
  7215 ;; Defined at:
  7216 ;;		line 24 in file "Timer.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  2  124[None  ] int 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 4/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7230 ;;      Params:         0       0       0       0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0
  7232 ;;      Temps:          1       0       0       0       0       0       0       0
  7233 ;;      Totals:         1       0       0       0       0       0       0       0
  7234 ;;Total ram usage:        1 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    2
  7237 ;; This function calls:
  7238 ;;		_ADC_init
  7239 ;;		_DMX_init
  7240 ;;		_RDM_init
  7241 ;; This function is called by:
  7242 ;;		_isr
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _timer1_interrupt
  7248  0B51                     _timer1_interrupt:	
  7249                           
  7250                           ;Timer.c: 25: if (TMR1IE && TMR1IF) {
  7251                           
  7252                           ;incstack = 0
  7253                           ; Regs used in _timer1_interrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7254  0B51  0021               	movlb	1	; select bank1
  7255  0B52  1C11               	btfss	17,0	;volatile
  7256  0B53  0008               	return
  7257  0B54  0020               	movlb	0	; select bank0
  7258  0B55  1C11               	btfss	17,0	;volatile
  7259  0B56  0008               	return
  7260                           
  7261                           ;Timer.c: 26: TMR1IF = 0;
  7262  0B57  1011               	bcf	17,0	;volatile
  7263                           
  7264                           ;Timer.c: 27: switch (TimerState) {
  7265  0B58  2BC9               	goto	i1l3664
  7266  0B59                     i1l3604:	
  7267                           
  7268                           ;Timer.c: 29: TimerState = TIMER_500US;
  7269  0B59  01EE               	clrf	_TimerState^(0+256)	;volatile
  7270  0B5A                     i1l902:	
  7271                           ;Timer.c: 30: case TIMER_StartUpDelay:
  7272                           
  7273                           
  7274                           ;Timer.c: 31: TMR1=0;
  7275  0B5A  0020               	movlb	0	; select bank0
  7276  0B5B  0196               	clrf	22	;volatile
  7277  0B5C  0197               	clrf	23	;volatile
  7278                           
  7279                           ;Timer.c: 32: Timer_DelayCount++;
  7280  0B5D  0021               	movlb	1	; select bank1
  7281  0B5E  0AD7               	incf	_Timer_DelayCount^(0+128),f	;volatile
  7282                           
  7283                           ;Timer.c: 33: if(Timer_DelayCount>=0x10){
  7284  0B5F  3010               	movlw	16
  7285  0B60  0257               	subwf	_Timer_DelayCount^(0+128),w	;volatile
  7286  0B61  1C03               	skipc
  7287  0B62  0008               	return
  7288                           
  7289                           ;Timer.c: 34: TimerState = TIMER_500US;
  7290  0B63  0022               	movlb	2	; select bank2
  7291  0B64  01EE               	clrf	_TimerState^(0+256)	;volatile
  7292                           
  7293                           ;Timer.c: 35: ADC_init();
  7294  0B65  23D9  318B         	fcall	_ADC_init
  7295                           
  7296                           ;Timer.c: 36: DMX_init();
  7297  0B67  23E5  318B         	fcall	_DMX_init
  7298                           
  7299                           ;Timer.c: 37: RDM_init();
  7300  0B69  2454               	fcall	_RDM_init
  7301                           
  7302                           ;Timer.c: 38: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  7303  0B6A  3080               	movlw	128
  7304  0B6B  003B               	movlb	27	; select bank27
  7305  0B6C  00CB               	movwf	75	;volatile
  7306  0B6D  00BB               	movwf	59	;volatile
  7307  0B6E  00AB               	movwf	43	;volatile
  7308  0B6F  009B               	movwf	27	;volatile
  7309  0B70  0008               	return
  7310  0B71                     i1l3620:	
  7311                           
  7312                           ;Timer.c: 50: if(ADIE==RA5){
  7313  0B71  0020               	movlb	0	; select bank0
  7314  0B72  1E8C               	btfss	12,5	;volatile
  7315  0B73  2B76               	goto	u249_20
  7316  0B74  3001               	movlw	1
  7317  0B75  2B77               	goto	u249_22
  7318  0B76                     u249_20:	
  7319  0B76  3000               	movlw	0
  7320  0B77                     u249_22:	
  7321  0B77  00F5               	movwf	??_timer1_interrupt
  7322  0B78  0021               	movlb	1	; select bank1
  7323  0B79  1F11               	btfss	17,6	;volatile
  7324  0B7A  2B7D               	goto	u250_20
  7325  0B7B  3001               	movlw	1
  7326  0B7C  2B7E               	goto	u250_22
  7327  0B7D                     u250_20:	
  7328  0B7D  3000               	movlw	0
  7329  0B7E                     u250_22:	
  7330  0B7E  0675               	xorwf	??_timer1_interrupt,w
  7331  0B7F  1903               	btfsc	3,2
  7332                           
  7333                           ;Timer.c: 51: Timer.Switch=1;
  7334  0B80  143E               	bsf	(_Timer^(0+128)+6),0	;volatile
  7335                           
  7336                           ;Timer.c: 52: }
  7337                           ;Timer.c: 53: TMR1 = 0xFE0B;
  7338  0B81  2519  318B         	fcall	PL94	;call to abstracted procedure
  7339                           
  7340                           ;Timer.c: 54: RxTimer++;
  7341  0B83  0021               	movlb	1	; select bank1
  7342  0B84  0AD2               	incf	_RxTimer^(0+128),f	;volatile
  7343  0B85  1903               	skipnz
  7344  0B86  0AD3               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7345                           
  7346                           ;Timer.c: 55: if (RxTimer == 2400) {
  7347  0B87  3060               	movlw	96
  7348  0B88  0652               	xorwf	_RxTimer^(0+128),w	;volatile
  7349  0B89  3009               	movlw	9
  7350  0B8A  1903               	skipnz
  7351  0B8B  0653               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7352  0B8C  1D03               	btfss	3,2
  7353  0B8D  2B94               	goto	i1l3632
  7354                           
  7355                           ;Timer.c: 56: RxTimer = 2400 + 1;
  7356  0B8E  3061               	movlw	97
  7357  0B8F  00D2               	movwf	_RxTimer^(0+128)	;volatile
  7358  0B90  3009               	movlw	9
  7359  0B91  00D3               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7360                           
  7361                           ;Timer.c: 57: DMX_Flags.RxTimeout = 1;
  7362  0B92  0020               	movlb	0	; select bank0
  7363  0B93  156A               	bsf	_DMX_Flags,2	;volatile
  7364  0B94                     i1l3632:	
  7365                           
  7366                           ;Timer.c: 58: }
  7367                           ;Timer.c: 60: Timer.MS_Count++;
  7368  0B94  0021               	movlb	1	; select bank1
  7369  0B95  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
  7370  0B96  1903               	skipnz
  7371  0B97  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7372                           
  7373                           ;Timer.c: 61: Timer.MS = 1;
  7374  0B98  1438               	bsf	_Timer^(0+128),0	;volatile
  7375                           
  7376                           ;Timer.c: 62: if (Timer.MS_Count == 1000)
  7377  0B99  30E8               	movlw	232
  7378  0B9A  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7379  0B9B  3003               	movlw	3
  7380  0B9C  1903               	skipnz
  7381  0B9D  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7382  0B9E  1D03               	btfss	3,2
  7383  0B9F  0008               	return
  7384                           
  7385                           ;Timer.c: 63: {
  7386                           ;Timer.c: 64: Timer.MS_Count = 0;
  7387  0BA0  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
  7388  0BA1  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7389                           
  7390                           ;Timer.c: 65: Timer.SEC_Count++;
  7391  0BA2  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
  7392                           
  7393                           ;Timer.c: 66: Timer.SEC = 1;
  7394  0BA3  14B8               	bsf	_Timer^(0+128),1	;volatile
  7395                           
  7396                           ;Timer.c: 67: if (Timer.SEC_Count == 60)
  7397  0BA4  303C               	movlw	60
  7398  0BA5  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7399  0BA6  1D03               	btfss	3,2
  7400  0BA7  0008               	return
  7401                           
  7402                           ;Timer.c: 68: {
  7403                           ;Timer.c: 69: Timer.SEC_Count = 0;
  7404  0BA8  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7405                           
  7406                           ;Timer.c: 70: Timer.MIN_Count++;
  7407  0BA9  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
  7408                           
  7409                           ;Timer.c: 71: Timer.MIN = 1;
  7410  0BAA  1538               	bsf	_Timer^(0+128),2	;volatile
  7411                           
  7412                           ;Timer.c: 73: if (Timer.MIN_Count == 60)
  7413  0BAB  303C               	movlw	60
  7414  0BAC  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
  7415  0BAD  1D03               	btfss	3,2
  7416  0BAE  0008               	return
  7417                           
  7418                           ;Timer.c: 74: {
  7419                           ;Timer.c: 75: Timer.MIN_Count = 0;
  7420  0BAF  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7421                           
  7422                           ;Timer.c: 76: Timer.HR_Count++;
  7423  0BB0  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
  7424                           
  7425                           ;Timer.c: 77: Timer.HR = 1;
  7426  0BB1  15B8               	bsf	_Timer^(0+128),3	;volatile
  7427  0BB2  0008               	return
  7428  0BB3                     i1l911:	
  7429                           ;Timer.c: 89: case TIMER_BREAK:
  7430                           
  7431                           
  7432                           ;Timer.c: 90: LATC4 = 1;
  7433  0BB3  160E               	bsf	14,4	;volatile
  7434                           
  7435                           ;Timer.c: 91: TMR1 = 0xFFF5;
  7436  0BB4  30FF               	movlw	255
  7437  0BB5  0020               	movlb	0	; select bank0
  7438  0BB6  0097               	movwf	23	;volatile
  7439  0BB7  30F5               	movlw	245
  7440  0BB8  0096               	movwf	22	;volatile
  7441                           
  7442                           ;Timer.c: 92: TimerState = TX_TIMER_MAB;
  7443  0BB9  3002               	movlw	2
  7444  0BBA  0022               	movlb	2	; select bank2
  7445  0BBB  00EE               	movwf	_TimerState^(0+256)	;volatile
  7446                           
  7447                           ;Timer.c: 93: break;
  7448  0BBC  0008               	return
  7449  0BBD                     i1l912:	
  7450                           ;Timer.c: 95: case TX_TIMER_MAB:
  7451                           
  7452                           
  7453                           ;Timer.c: 96: TXEN = 1;
  7454  0BBD  0023               	movlb	3	; select bank3
  7455  0BBE  169E               	bsf	30,5	;volatile
  7456                           
  7457                           ;Timer.c: 97: TXIE = 1;
  7458  0BBF  0021               	movlb	1	; select bank1
  7459  0BC0  1611               	bsf	17,4	;volatile
  7460                           
  7461                           ;Timer.c: 98: TMR1 = 0xFCDF;
  7462  0BC1  30FC               	movlw	252
  7463  0BC2  0020               	movlb	0	; select bank0
  7464  0BC3  0097               	movwf	23	;volatile
  7465  0BC4  30DF               	movlw	223
  7466  0BC5  0096               	movwf	22	;volatile
  7467                           
  7468                           ;Timer.c: 99: TimerState = TIMER_500US;
  7469  0BC6  0022               	movlb	2	; select bank2
  7470  0BC7  01EE               	clrf	_TimerState^(0+256)	;volatile
  7471                           
  7472                           ;Timer.c: 100: break;
  7473  0BC8  0008               	return
  7474  0BC9                     i1l3664:	
  7475  0BC9  0022               	movlb	2	; select bank2
  7476  0BCA  086E               	movf	_TimerState^(0+256),w	;volatile
  7477                           
  7478                           ; Switch size 1, requested type "space"
  7479                           ; Number of cases is 4, Range of values is 0 to 3
  7480                           ; switch strategies available:
  7481                           ; Name         Instructions Cycles
  7482                           ; simple_byte           13     7 (average)
  7483                           ; direct_byte           14     6 (fixed)
  7484                           ; jumptable            260     6 (fixed)
  7485                           ;	Chosen strategy is simple_byte
  7486  0BCB  3A00               	xorlw	0	; case 0
  7487  0BCC  1903               	skipnz
  7488  0BCD  2B71               	goto	i1l3620
  7489  0BCE  3A01               	xorlw	1	; case 1
  7490  0BCF  1903               	skipnz
  7491  0BD0  2BB3               	goto	i1l911
  7492  0BD1  3A03               	xorlw	3	; case 2
  7493  0BD2  1903               	skipnz
  7494  0BD3  2BBD               	goto	i1l912
  7495  0BD4  3A01               	xorlw	1	; case 3
  7496  0BD5  1903               	skipnz
  7497  0BD6  2B5A               	goto	i1l902
  7498  0BD7  2B59               	goto	i1l3604
  7499  0BD8  0008               	return
  7500  0BD9                     __end_of_timer1_interrupt:	
  7501  0BD9                     __ptext27:	
  7502 ;; *************** function _ADC_init *****************
  7503 ;; Defined at:
  7504 ;;		line 14 in file "ADC.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      void 
  7511 ;; Registers used:
  7512 ;;		wreg
  7513 ;; Tracked objects:
  7514 ;;		On entry : 1F/2
  7515 ;;		On exit  : 1F/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7518 ;;      Params:         0       0       0       0       0       0       0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0
  7521 ;;      Totals:         0       0       0       0       0       0       0       0
  7522 ;;Total ram usage:        0 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; This function calls:
  7525 ;;		Nothing
  7526 ;; This function is called by:
  7527 ;;		_timer1_interrupt
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _ADC_init
  7533  0BD9                     _ADC_init:	
  7534                           
  7535                           ;ADC.c: 19: TRISA4 = 1;
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _ADC_init: [wreg]
  7539  0BD9  0021               	movlb	1	; select bank1
  7540  0BDA  160C               	bsf	12,4	;volatile
  7541                           
  7542                           ;ADC.c: 20: ANSA4 = 1;
  7543  0BDB  0023               	movlb	3	; select bank3
  7544  0BDC  160C               	bsf	12,4	;volatile
  7545                           
  7546                           ;ADC.c: 21: ADCON0 = 0b00001101;
  7547  0BDD  300D               	movlw	13
  7548  0BDE  0021               	movlb	1	; select bank1
  7549  0BDF  009D               	movwf	29	;volatile
  7550                           
  7551                           ;ADC.c: 22: ADCON1 = 0b01110000;
  7552  0BE0  3070               	movlw	112
  7553  0BE1  009E               	movwf	30	;volatile
  7554                           
  7555                           ;ADC.c: 25: ADIF = 0;
  7556  0BE2  0020               	movlb	0	; select bank0
  7557  0BE3  1311               	bcf	17,6	;volatile
  7558  0BE4  0008               	return
  7559  0BE5                     __end_of_ADC_init:	
  7560  0BE5                     __ptext26:	
  7561 ;; *************** function _DMX_init *****************
  7562 ;; Defined at:
  7563 ;;		line 17 in file "DMX.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;		None
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  Addr            1    3[COMMON] unsigned char 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      void 
  7570 ;; Registers used:
  7571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 1F/0
  7574 ;;		On exit  : 1C/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7577 ;;      Params:         0       0       0       0       0       0       0       0
  7578 ;;      Locals:         1       0       0       0       0       0       0       0
  7579 ;;      Temps:          3       0       0       0       0       0       0       0
  7580 ;;      Totals:         4       0       0       0       0       0       0       0
  7581 ;;Total ram usage:        4 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		_timer1_interrupt
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           
  7591                           ;psect for function _DMX_init
  7592  0BE5                     _DMX_init:	
  7593                           
  7594                           ;DMX.c: 19: RXPPS = 0b10101;
  7595                           
  7596                           ;incstack = 0
  7597                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  7598  0BE5  3015               	movlw	21
  7599  0BE6  003C               	movlb	28	; select bank28
  7600  0BE7  0095               	movwf	21	;volatile
  7601                           
  7602                           ;DMX.c: 20: TRISC5 = 1;
  7603  0BE8  0021               	movlb	1	; select bank1
  7604  0BE9  168E               	bsf	14,5	;volatile
  7605                           
  7606                           ;DMX.c: 22: RCSTA = 0b10010000;
  7607  0BEA  3090               	movlw	144
  7608  0BEB  0023               	movlb	3	; select bank3
  7609  0BEC  009D               	movwf	29	;volatile
  7610                           
  7611                           ;DMX.c: 23: SYNC = 0;
  7612  0BED  121E               	bcf	30,4	;volatile
  7613                           
  7614                           ;DMX.c: 24: BAUDCON = 0b00000000;
  7615  0BEE  019F               	clrf	31	;volatile
  7616                           
  7617                           ;DMX.c: 25: BRGH = 1;
  7618  0BEF  151E               	bsf	30,2	;volatile
  7619                           
  7620                           ;DMX.c: 26: SPBRGH = 0x00;
  7621  0BF0  019C               	clrf	28	;volatile
  7622                           
  7623                           ;DMX.c: 27: SPBRGL = 0x7;
  7624  0BF1  3007               	movlw	7
  7625  0BF2  009B               	movwf	27	;volatile
  7626                           
  7627                           ;DMX.c: 28: RCIE = 1;
  7628  0BF3  0021               	movlb	1	; select bank1
  7629  0BF4  1691               	bsf	17,5	;volatile
  7630  0BF5  300D               	movlw	13
  7631                           
  7632                           ;DMX.c: 34: DMX_Address = 1;
  7633  0BF6  01F6               	clrf	_DMX_Address
  7634  0BF7  0AF6               	incf	_DMX_Address,f
  7635  0BF8  01F7               	clrf	_DMX_Address+1
  7636                           
  7637                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  7638  0BF9  0022               	movlb	2	; select bank2
  7639  0BFA  00B9               	movwf	(_PWMDCLptr+1)^(0+256)
  7640  0BFB  3093               	movlw	147
  7641  0BFC  00B8               	movwf	_PWMDCLptr^(0+256)
  7642                           
  7643                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  7644  0BFD  300D               	movlw	13
  7645  0BFE  00BB               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^0
  7646  0BFF  30A3               	movlw	163
  7647  0C00  00BA               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^0
  7648                           
  7649                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  7650  0C01  300D               	movlw	13
  7651  0C02  00BD               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^0
  7652  0C03  30B3               	movlw	179
  7653  0C04  00BC               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^0
  7654                           
  7655                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  7656  0C05  300D               	movlw	13
  7657  0C06  00BF               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^0
  7658  0C07  30C3               	movlw	195
  7659  0C08  00BE               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^0
  7660                           
  7661                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  7662  0C09  300D               	movlw	13
  7663  0C0A  0023               	movlb	3	; select bank3
  7664  0C0B  00B5               	movwf	(_PWMDCHptr+1)^(0+384)
  7665  0C0C  3094               	movlw	148
  7666  0C0D  00B4               	movwf	_PWMDCHptr^(0+384)
  7667                           
  7668                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  7669  0C0E  300D               	movlw	13
  7670  0C0F  00B7               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  7671  0C10  30A4               	movlw	164
  7672  0C11  00B6               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  7673                           
  7674                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  7675  0C12  300D               	movlw	13
  7676  0C13  00B9               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  7677  0C14  30B4               	movlw	180
  7678  0C15  00B8               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  7679                           
  7680                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  7681  0C16  300D               	movlw	13
  7682  0C17  00BB               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  7683  0C18  30C4               	movlw	196
  7684  0C19  00BA               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  7685                           
  7686                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  7687  0C1A  300D               	movlw	13
  7688  0C1B  00AD               	movwf	(_PWMLDCONptr+1)^(0+384)
  7689  0C1C  309F               	movlw	159
  7690  0C1D  00AC               	movwf	_PWMLDCONptr^(0+384)
  7691                           
  7692                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  7693  0C1E  300D               	movlw	13
  7694  0C1F  00AF               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  7695  0C20  30AF               	movlw	175
  7696  0C21  00AE               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  7697                           
  7698                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  7699  0C22  300D               	movlw	13
  7700  0C23  00B1               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  7701  0C24  30BF               	movlw	191
  7702  0C25  00B0               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  7703                           
  7704                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  7705  0C26  300D               	movlw	13
  7706  0C27  00B3               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  7707  0C28  30CF               	movlw	207
  7708  0C29  00B2               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  7709                           
  7710                           ;DMX.c: 50: char Addr=0;
  7711  0C2A  01F3               	clrf	DMX_init@Addr
  7712  0C2B                     i1l2932:	
  7713                           ;DMX.c: 51: while(Addr<4){
  7714                           
  7715  0C2B  3004               	movlw	4
  7716  0C2C  0273               	subwf	DMX_init@Addr,w
  7717  0C2D  1803               	btfsc	3,0
  7718  0C2E  0008               	return
  7719                           
  7720                           ;DMX.c: 52: DMX_sumRepeat[Addr]=2;
  7721  0C2F  0873               	movf	DMX_init@Addr,w
  7722  0C30  251F  318B         	fcall	PL104	;call to abstracted procedure
  7723                           
  7724                           ;DMX.c: 53: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  7725  0C32  3573               	lslf	DMX_init@Addr,w
  7726  0C33  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  7727  0C34  0086               	movwf	6
  7728  0C35  3001               	movlw	1	; select bank2/3
  7729  0C36  0087               	movwf	7
  7730  0C37  3573               	lslf	DMX_init@Addr,w
  7731  0C38  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  7732  0C39  0084               	movwf	4
  7733  0C3A  3001               	movlw	1	; select bank2/3
  7734  0C3B  0085               	movwf	5
  7735  0C3C  3F80               	movwi [0]fsr0
  7736  0C3D  0081               	movwf	1
  7737                           
  7738                           ;DMX.c: 54: DMXSign[Addr].InfiniteLoop=0;
  7739  0C3E  0873               	movf	DMX_init@Addr,w
  7740  0C3F  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  7741  0C40  0086               	movwf	6
  7742  0C41  0187               	clrf	7
  7743  0C42  1101               	bcf	1,2
  7744                           
  7745                           ;DMX.c: 55: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  7746  0C43  01F0               	clrf	??_DMX_init
  7747  0C44  01F1               	clrf	??_DMX_init+1
  7748  0C45  01F2               	clrf	??_DMX_init+2
  7749  0C46  0873               	movf	DMX_init@Addr,w
  7750  0C47  0773               	addwf	DMX_init@Addr,w
  7751  0C48  0773               	addwf	DMX_init@Addr,w
  7752  0C49  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  7753  0C4A  250A  318B         	fcall	PL62	;call to abstracted procedure
  7754  0C4C  0873               	movf	DMX_init@Addr,w
  7755  0C4D  0773               	addwf	DMX_init@Addr,w
  7756  0C4E  0773               	addwf	DMX_init@Addr,w
  7757  0C4F  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  7758  0C50  250A  318B         	fcall	PL62	;call to abstracted procedure
  7759                           
  7760                           ;DMX.c: 56: Addr++;
  7761  0C52  0AF3               	incf	DMX_init@Addr,f
  7762  0C53  2C2B               	goto	i1l2932
  7763  0C54                     __end_of_DMX_init:	
  7764  0C54                     __ptext24:	
  7765 ;; *************** function _RDM_init *****************
  7766 ;; Defined at:
  7767 ;;		line 16 in file "RDM.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1    wreg      void 
  7774 ;; Registers used:
  7775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 1C/0
  7778 ;;		On exit  : 1C/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7781 ;;      Params:         0       0       0       0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0
  7783 ;;      Temps:          2       0       0       0       0       0       0       0
  7784 ;;      Totals:         2       0       0       0       0       0       0       0
  7785 ;;Total ram usage:        2 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    1
  7788 ;; This function calls:
  7789 ;;		___bmul
  7790 ;; This function is called by:
  7791 ;;		_timer1_interrupt
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           
  7796                           ;psect for function _RDM_init
  7797  0C54                     _RDM_init:	
  7798                           
  7799                           ;RDM.c: 17: TimerState = 0;
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7803  0C54  0022               	movlb	2	; select bank2
  7804  0C55  01EE               	clrf	_TimerState^(0+256)	;volatile
  7805                           
  7806                           ;RDM.c: 19: Timer.HR_Count = 0;
  7807  0C56  0021               	movlb	1	; select bank1
  7808  0C57  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  7809                           
  7810                           ;RDM.c: 20: Timer.MIN_Count = 0;
  7811  0C58  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7812                           
  7813                           ;RDM.c: 21: Timer.SEC_Count = 0;
  7814  0C59  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7815                           
  7816                           ;RDM.c: 22: Timer.flags = 0;
  7817  0C5A  01B8               	clrf	_Timer^(0+128)	;volatile
  7818                           
  7819                           ;RDM.c: 25: TMR1 = 0xFE0B;
  7820  0C5B  2519  318B         	fcall	PL94	;call to abstracted procedure
  7821                           
  7822                           ;RDM.c: 26: TMR1IF = 0;
  7823  0C5D  1011               	bcf	17,0	;volatile
  7824                           
  7825                           ;RDM.c: 27: TMR1IE = 1;
  7826  0C5E  0021               	movlb	1	; select bank1
  7827  0C5F  1411               	bsf	17,0	;volatile
  7828                           
  7829                           ;RDM.c: 28: PEIE = 1;
  7830  0C60  170B               	bsf	11,6	;volatile
  7831                           
  7832                           ;RDM.c: 31: LATC4 = 1;
  7833  0C61  0022               	movlb	2	; select bank2
  7834  0C62  160E               	bsf	14,4	;volatile
  7835                           
  7836                           ;RDM.c: 32: TRISC4 = 0;
  7837  0C63  0021               	movlb	1	; select bank1
  7838  0C64  120E               	bcf	14,4	;volatile
  7839                           
  7840                           ;RDM.c: 33: TXEN = 1;
  7841  0C65  0023               	movlb	3	; select bank3
  7842  0C66  169E               	bsf	30,5	;volatile
  7843                           
  7844                           ;RDM.c: 34: SPEN = 1;
  7845  0C67  179D               	bsf	29,7	;volatile
  7846                           
  7847                           ;RDM.c: 35: SYNC = 0;
  7848  0C68  121E               	bcf	30,4	;volatile
  7849                           
  7850                           ;RDM.c: 36: RC4PPS = 0b1001;
  7851  0C69  3009               	movlw	9
  7852  0C6A  003D               	movlb	29	; select bank29
  7853  0C6B  00A4               	movwf	36	;volatile
  7854                           
  7855                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  7856  0C6C  304E               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7857  0C6D  0021               	movlb	1	; select bank1
  7858  0C6E  00DA               	movwf	_TxByte^(0+128)
  7859                           
  7860                           ;RDM.c: 39: TX9 = TX9D = 1;
  7861  0C6F  0023               	movlb	3	; select bank3
  7862  0C70  141E               	bsf	30,0	;volatile
  7863  0C71  1C1E               	btfss	30,0	;volatile
  7864  0C72  2C76               	goto	u166_20
  7865  0C73  0023               	movlb	3	; select bank3
  7866  0C74  171E               	bsf	30,6	;volatile
  7867  0C75  2C78               	goto	i1l2966
  7868  0C76                     u166_20:	
  7869  0C76  0023               	movlb	3	; select bank3
  7870  0C77  131E               	bcf	30,6	;volatile
  7871  0C78                     i1l2966:	
  7872                           
  7873                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  7874  0C78  0020               	movlb	0	; select bank0
  7875  0C79  116B               	bcf	_DMX_Flags+1,2	;volatile
  7876                           
  7877                           ;RDM.c: 44: DMX_Flags.RDMidentify = 0;
  7878  0C7A  11EB               	bcf	_DMX_Flags+1,3	;volatile
  7879  0C7B  3017               	movlw	23
  7880                           
  7881                           ;RDM.c: 59: DMX_Address=1;
  7882  0C7C  01F6               	clrf	_DMX_Address
  7883  0C7D  0AF6               	incf	_DMX_Address,f
  7884  0C7E  01F7               	clrf	_DMX_Address+1
  7885                           
  7886                           ;RDM.c: 64: PDCount = 23;
  7887  0C7F  00FA               	movwf	_PDCount
  7888  0C80                     i1l2978:	
  7889                           ;RDM.c: 65: while (PDCount >= 17) {
  7890                           
  7891  0C80  3011               	movlw	17
  7892  0C81  027A               	subwf	_PDCount,w
  7893  0C82  1C03               	btfss	3,0
  7894  0C83  2C8D               	goto	i1l2980
  7895                           
  7896                           ;RDM.c: 66: DISCOVERY_RDM_Data.value[PDCount] = 0xFE;
  7897  0C84  087A               	movf	_PDCount,w
  7898  0C85  3EBC               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  7899  0C86  0086               	movwf	6
  7900  0C87  3001               	movlw	1	; select bank3/4
  7901  0C88  0087               	movwf	7
  7902  0C89  30FE               	movlw	254
  7903  0C8A  0081               	movwf	1
  7904                           
  7905                           ;RDM.c: 67: PDCount--;
  7906  0C8B  03FA               	decf	_PDCount,f
  7907  0C8C  2C80               	goto	i1l2978
  7908  0C8D                     i1l2980:	
  7909                           
  7910                           ;RDM.c: 68: }
  7911                           ;RDM.c: 69: DISCOVERY_RDM_Data.value[16] = 0xAA;
  7912  0C8D  30AA               	movlw	170
  7913  0C8E  0023               	movlb	3	; select bank3
  7914  0C8F  00CC               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)	;volatile
  7915                           
  7916                           ;RDM.c: 70: PDCount = 0;
  7917  0C90  01FA               	clrf	_PDCount
  7918                           
  7919                           ;RDM.c: 71: checkSum = 0;
  7920  0C91  0021               	movlb	1	; select bank1
  7921  0C92  01C6               	clrf	_checkSum^(0+128)
  7922  0C93  01C7               	clrf	(_checkSum+1)^(0+128)
  7923  0C94                     i1l2994:	
  7924                           ;RDM.c: 72: while (PDCount < 6) {
  7925                           
  7926  0C94  3006               	movlw	6
  7927  0C95  027A               	subwf	_PDCount,w
  7928  0C96  1803               	btfsc	3,0
  7929  0C97  2CBE               	goto	i1l2996
  7930                           
  7931                           ;RDM.c: 73: DISCOVERY_RDM_Data.value[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  7932  0C98  30FE               	movlw	254
  7933  0C99  00F0               	movwf	___bmul@multiplicand
  7934  0C9A  087A               	movf	_PDCount,w
  7935  0C9B  24F2  318B         	fcall	___bmul
  7936  0C9D  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7937  0C9E  24FE  318B         	fcall	PL38	;call to abstracted procedure
  7938  0CA0  38AA               	iorlw	170
  7939                           
  7940                           ;RDM.c: 74: DISCOVERY_RDM_Data.value[14 - PDCount * 2] = UID[PDCount] | 0x55;
  7941  0CA1  2525  318B         	fcall	PL114	;call to abstracted procedure
  7942  0CA3  24F2  318B         	fcall	___bmul
  7943  0CA5  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7944  0CA6  24FE  318B         	fcall	PL38	;call to abstracted procedure
  7945  0CA8  3855               	iorlw	85
  7946                           
  7947                           ;RDM.c: 75: checkSum += DISCOVERY_RDM_Data.value[15 - PDCount * 2];
  7948  0CA9  2525  318B         	fcall	PL114	;call to abstracted procedure
  7949  0CAB  24F2  318B         	fcall	___bmul
  7950  0CAD  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7951  0CAE  2512  318B         	fcall	PL74	;call to abstracted procedure
  7952  0CB0  1803               	skipnc
  7953  0CB1  0AC7               	incf	(_checkSum+1)^(0+128),f
  7954                           
  7955                           ;RDM.c: 76: checkSum += DISCOVERY_RDM_Data.value[14 - PDCount * 2];
  7956  0CB2  30FE               	movlw	254
  7957  0CB3  00F0               	movwf	___bmul@multiplicand
  7958  0CB4  087A               	movf	_PDCount,w
  7959  0CB5  24F2  318B         	fcall	___bmul
  7960  0CB7  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7961  0CB8  2512  318B         	fcall	PL74	;call to abstracted procedure
  7962  0CBA  1803               	skipnc
  7963  0CBB  0AC7               	incf	(_checkSum+1)^(0+128),f
  7964                           
  7965                           ;RDM.c: 77: PDCount++;
  7966  0CBC  0AFA               	incf	_PDCount,f
  7967  0CBD  2C94               	goto	i1l2994
  7968  0CBE                     i1l2996:	
  7969                           
  7970                           ;RDM.c: 78: }
  7971                           ;RDM.c: 79: TX_RDM_Data.CS = checkSum;
  7972  0CBE  0847               	movf	(_checkSum+1)^(0+128),w
  7973  0CBF  0022               	movlb	2	; select bank2
  7974  0CC0  00CF               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7975  0CC1  0021               	movlb	1	; select bank1
  7976  0CC2  0846               	movf	_checkSum^(0+128),w
  7977  0CC3  0022               	movlb	2	; select bank2
  7978  0CC4  00CE               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7979                           
  7980                           ;RDM.c: 80: PDCount = 0;
  7981  0CC5  01FA               	clrf	_PDCount
  7982                           
  7983                           ;RDM.c: 81: DISCOVERY_RDM_Data.value[3] = TX_RDM_Data.CSH | 0xAA;
  7984  0CC6  084F               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7985  0CC7  38AA               	iorlw	170
  7986  0CC8  0023               	movlb	3	; select bank3
  7987  0CC9  00BF               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)	;volatile
  7988                           
  7989                           ;RDM.c: 82: DISCOVERY_RDM_Data.value[2] = TX_RDM_Data.CSH | 0x55;
  7990  0CCA  0022               	movlb	2	; select bank2
  7991  0CCB  084F               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7992  0CCC  3855               	iorlw	85
  7993  0CCD  0023               	movlb	3	; select bank3
  7994  0CCE  00BE               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)	;volatile
  7995                           
  7996                           ;RDM.c: 83: DISCOVERY_RDM_Data.value[1] = TX_RDM_Data.CSL | 0xAA;
  7997  0CCF  0022               	movlb	2	; select bank2
  7998  0CD0  084E               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7999  0CD1  38AA               	iorlw	170
  8000  0CD2  0023               	movlb	3	; select bank3
  8001  0CD3  00BD               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)	;volatile
  8002                           
  8003                           ;RDM.c: 84: DISCOVERY_RDM_Data.value[0] = TX_RDM_Data.CSL | 0x55;
  8004  0CD4  0022               	movlb	2	; select bank2
  8005  0CD5  084E               	movf	_TX_RDM_Data^(0+256),w	;volatile
  8006  0CD6  3855               	iorlw	85
  8007  0CD7  0023               	movlb	3	; select bank3
  8008  0CD8  00BC               	movwf	_DISCOVERY_RDM_Data^(0+384)	;volatile
  8009                           
  8010                           ;RDM.c: 86: PDCount = 16;
  8011  0CD9  3010               	movlw	16
  8012  0CDA  00FA               	movwf	_PDCount
  8013  0CDB                     i1l3006:	
  8014                           ;RDM.c: 87: while (PDCount >= 11) {
  8015                           
  8016  0CDB  300B               	movlw	11
  8017  0CDC  027A               	subwf	_PDCount,w
  8018  0CDD  1C03               	btfss	3,0
  8019  0CDE  0008               	return
  8020                           
  8021                           ;RDM.c: 88: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  8022  0CDF  087A               	movf	_PDCount,w
  8023  0CE0  3E4E               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  8024  0CE1  0086               	movwf	6
  8025  0CE2  3001               	movlw	1	; select bank2/3
  8026  0CE3  0087               	movwf	7
  8027  0CE4  3089               	movlw	high ((_UID| (0+32768)+16))
  8028  0CE5  00F4               	movwf	??_RDM_init+1
  8029  0CE6  087A               	movf	_PDCount,w
  8030  0CE7  3C73               	sublw	low ((_UID| (0+32768)+16))
  8031  0CE8  00F3               	movwf	??_RDM_init
  8032  0CE9  1C03               	skipc
  8033  0CEA  03F4               	decf	??_RDM_init+1,f
  8034  0CEB  0084               	movwf	4
  8035  0CEC  0874               	movf	??_RDM_init+1,w
  8036  0CED  0085               	movwf	5
  8037  0CEE  0800               	movf	0,w	;code access
  8038  0CEF  0081               	movwf	1
  8039                           
  8040                           ;RDM.c: 89: PDCount--;
  8041  0CF0  03FA               	decf	_PDCount,f
  8042  0CF1  2CDB               	goto	i1l3006
  8043  0CF2                     __end_of_RDM_init:	
  8044  0CF2                     __ptext25:	
  8045 ;; *************** function ___bmul *****************
  8046 ;; Defined at:
  8047 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  multiplier      1    wreg     unsigned char 
  8050 ;;  multiplicand    1    0[COMMON] unsigned char 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  multiplier      1    2[COMMON] unsigned char 
  8053 ;;  product         1    1[COMMON] unsigned char 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      unsigned char 
  8056 ;; Registers used:
  8057 ;;		wreg, status,2, status,0
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/1
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8063 ;;      Params:         1       0       0       0       0       0       0       0
  8064 ;;      Locals:         2       0       0       0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0
  8066 ;;      Totals:         3       0       0       0       0       0       0       0
  8067 ;;Total ram usage:        3 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_RDM_init
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function ___bmul
  8078  0CF2                     ___bmul:	
  8079                           
  8080                           ;incstack = 0
  8081                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8082                           ;___bmul@multiplier stored from wreg
  8083  0CF2  00F2               	movwf	___bmul@multiplier
  8084  0CF3  01F1               	clrf	___bmul@product
  8085  0CF4                     i1l2792:	
  8086  0CF4  0870               	movf	___bmul@multiplicand,w
  8087  0CF5  1872               	btfsc	___bmul@multiplier,0
  8088  0CF6  07F1               	addwf	___bmul@product,f
  8089  0CF7  35F0               	lslf	___bmul@multiplicand,f
  8090  0CF8  36F2               	lsrf	___bmul@multiplier,f
  8091  0CF9  0872               	movf	___bmul@multiplier,w
  8092  0CFA  1D03               	btfss	3,2
  8093  0CFB  2CF4               	goto	i1l2792
  8094  0CFC  0871               	movf	___bmul@product,w
  8095  0CFD  0008               	return
  8096  0CFE                     __end_of___bmul:	
  8097  0CFE                     PL38:	
  8098  0CFE  0086               	movwf	6
  8099  0CFF  3001               	movlw	1	; select bank3/4
  8100  0D00  0087               	movwf	7
  8101  0D01  087A               	movf	_PDCount,w
  8102  0D02  3E63               	addlw	low (_UID| (0+32768))
  8103  0D03  0084               	movwf	4
  8104  0D04  3089               	movlw	high (_UID| (0+32768))
  8105  0D05  1803               	skipnc
  8106  0D06  3E01               	addlw	1
  8107  0D07  0085               	movwf	5
  8108  0D08  0800               	movf	0,w	;code access
  8109  0D09  0008               	return
  8110  0D0A                     __end_ofPL38:	
  8111  0D0A                     PL62:	
  8112  0D0A  0086               	movwf	6
  8113  0D0B  0870               	movf	??_DMX_init,w
  8114  0D0C  3FC0               	movwi [0]fsr1
  8115  0D0D  0871               	movf	??_DMX_init+1,w
  8116  0D0E  3FC1               	movwi [1]fsr1
  8117  0D0F  0872               	movf	??_DMX_init+2,w
  8118  0D10  3FC2               	movwi [2]fsr1
  8119  0D11  0008               	return
  8120  0D12                     __end_ofPL62:	
  8121  0D12                     PL74:	
  8122  0D12  0086               	movwf	6
  8123  0D13  3001               	movlw	1	; select bank3/4
  8124  0D14  0087               	movwf	7
  8125  0D15  0801               	movf	1,w
  8126  0D16  0021               	movlb	1	; select bank1
  8127  0D17  07C6               	addwf	_checkSum^(0+128),f
  8128  0D18  0008               	return
  8129  0D19                     __end_ofPL74:	
  8130  0D19                     PL94:	
  8131  0D19  30FE               	movlw	254
  8132  0D1A  0020               	movlb	0	; select bank0
  8133  0D1B  0097               	movwf	23	;volatile
  8134  0D1C  300B               	movlw	11
  8135  0D1D  0096               	movwf	22	;volatile
  8136  0D1E  0008               	return
  8137  0D1F                     __end_ofPL94:	
  8138  0D1F                     PL104:	
  8139  0D1F  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  8140  0D20  0086               	movwf	6
  8141  0D21  3002               	movlw	2
  8142  0D22  0187               	clrf	7
  8143  0D23  0081               	movwf	1
  8144  0D24  0008               	return
  8145  0D25                     __end_ofPL104:	
  8146  0D25                     PL114:	
  8147  0D25  0081               	movwf	1
  8148  0D26  30FE               	movlw	254
  8149  0D27  00F0               	movwf	___bmul@multiplicand
  8150  0D28  087A               	movf	_PDCount,w
  8151  0D29  0008               	return
  8152  0D2A                     __end_ofPL114:	
  8153                           
  8154                           	psect	text29
  8155  0A6E                     __ptext29:	
  8156 ;; *************** function _DMX_interrput *****************
  8157 ;; Defined at:
  8158 ;;		line 177 in file "DMX.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  2  122[None  ] int 
  8165 ;; Registers used:
  8166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8167 ;; Tracked objects:
  8168 ;;		On entry : 1F/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8172 ;;      Params:         0       0       0       0       0       0       0       0
  8173 ;;      Locals:         1       0       0       0       0       0       0       0
  8174 ;;      Temps:          2       0       0       0       0       0       0       0
  8175 ;;      Totals:         3       0       0       0       0       0       0       0
  8176 ;;Total ram usage:        3 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; This function calls:
  8179 ;;		Nothing
  8180 ;; This function is called by:
  8181 ;;		_isr
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           
  8186                           ;psect for function _DMX_interrput
  8187  0A6E                     _DMX_interrput:	
  8188                           
  8189                           ;DMX.c: 178: if (RCIE & RCIF) {
  8190                           
  8191                           ;incstack = 0
  8192                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8193  0A6E  3001               	movlw	1
  8194  0A6F  0021               	movlb	1	; select bank1
  8195  0A70  1E91               	btfss	17,5	;volatile
  8196  0A71  3900               	andlw	0
  8197  0A72  0020               	movlb	0	; select bank0
  8198  0A73  1E91               	btfss	17,5	;volatile
  8199  0A74  3900               	andlw	0
  8200  0A75  1C09               	btfss	9,0
  8201  0A76  0008               	return
  8202                           
  8203                           ;DMX.c: 179: volatile char RxDat;
  8204                           ;DMX.c: 180: if (FERR)
  8205  0A77  0023               	movlb	3	; select bank3
  8206  0A78  1D1D               	btfss	29,2	;volatile
  8207  0A79  2B2D               	goto	i1l3584
  8208                           
  8209                           ;DMX.c: 181: {
  8210                           ;DMX.c: 182: RxDat = RCREG;
  8211  0A7A  0819               	movf	25,w	;volatile
  8212  0A7B  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8213                           
  8214                           ;DMX.c: 183: DMX_Flags.RxBreak = 1;
  8215  0A7C  0020               	movlb	0	; select bank0
  8216  0A7D  14EA               	bsf	_DMX_Flags,1	;volatile
  8217                           
  8218                           ;DMX.c: 184: RxState = WAIT_FOR_START;
  8219  0A7E  3001               	movlw	1
  8220  0A7F  0021               	movlb	1	; select bank1
  8221  0A80  00DE               	movwf	_RxState^(0+128)	;volatile
  8222                           
  8223                           ;DMX.c: 185: RxTimer = 0;
  8224  0A81  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8225  0A82  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8226  0A83  2B2D               	goto	i1l3584
  8227  0A84                     i1l3504:	
  8228                           
  8229                           ;DMX.c: 189: RxDat = RCREG;
  8230  0A84  0023               	movlb	3	; select bank3
  8231  0A85  0819               	movf	25,w	;volatile
  8232  0A86  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8233                           
  8234                           ;DMX.c: 190: break;
  8235  0A87  2B38               	goto	i1l3586
  8236  0A88                     i1l388:	
  8237                           ;DMX.c: 191: case WAIT_FOR_START:
  8238                           
  8239                           
  8240                           ;DMX.c: 192: if (RCIF)
  8241  0A88  0020               	movlb	0	; select bank0
  8242  0A89  1E91               	btfss	17,5	;volatile
  8243  0A8A  2B38               	goto	i1l3586
  8244                           
  8245                           ;DMX.c: 193: {
  8246                           ;DMX.c: 194: RxDat = RCREG;
  8247  0A8B  0023               	movlb	3	; select bank3
  8248  0A8C  0819               	movf	25,w	;volatile
  8249  0A8D  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8250  0A8E  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8251  0A8F  1D03               	btfss	3,2
  8252  0A90  2A9D               	goto	i1l3514
  8253                           
  8254                           ;DMX.c: 197: RxState = RX_DMX_READ_DATA;
  8255  0A91  3002               	movlw	2
  8256  0A92  0021               	movlb	1	; select bank1
  8257  0A93  00DE               	movwf	_RxState^(0+128)	;volatile
  8258                           
  8259                           ;DMX.c: 198: RxDataPtr = &RxData[0];
  8260  0A94  30E0               	movlw	(low (_RxData| 0))& (0+255)
  8261  0A95  00DF               	movwf	_RxDataPtr^(0+128)
  8262                           
  8263                           ;DMX.c: 199: RxAddrCount = 1;
  8264  0A96  3001               	movlw	1
  8265  0A97  00D4               	movwf	_RxAddrCount^(0+128)	;volatile
  8266  0A98  01D5               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8267                           
  8268                           ;DMX.c: 201: DMXPeriod = DMXPeriodConst;
  8269  0A99  085D               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8270  0A9A  00FB               	movwf	_DMXPeriod
  8271                           
  8272                           ;DMX.c: 202: DMXPeriodConst = 0;
  8273  0A9B  01DD               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8274                           
  8275                           ;DMX.c: 203: } else if (RxDat == 0xCC) {
  8276  0A9C  2B38               	goto	i1l3586
  8277  0A9D                     i1l3514:	
  8278  0A9D  30CC               	movlw	204
  8279  0A9E  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8280  0A9F  1D03               	btfss	3,2
  8281  0AA0  2AA5               	goto	i1l3518
  8282                           
  8283                           ;DMX.c: 205: RxState = RX_RDM_READ_SubStartCode;
  8284  0AA1  3003               	movlw	3
  8285  0AA2  0021               	movlb	1	; select bank1
  8286  0AA3  00DE               	movwf	_RxState^(0+128)	;volatile
  8287                           
  8288                           ;DMX.c: 207: } else {
  8289  0AA4  2B38               	goto	i1l3586
  8290  0AA5                     i1l3518:	
  8291                           
  8292                           ;DMX.c: 208: RxState = RX_WAIT_FOR_BREAK;
  8293  0AA5  0021               	movlb	1	; select bank1
  8294  0AA6  01DE               	clrf	_RxState^(0+128)	;volatile
  8295  0AA7  2B38               	goto	i1l3586
  8296  0AA8                     i1l3520:	
  8297                           
  8298                           ;DMX.c: 213: RxDat = RCREG;
  8299  0AA8  0023               	movlb	3	; select bank3
  8300  0AA9  0819               	movf	25,w	;volatile
  8301  0AAA  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8302                           
  8303                           ;DMX.c: 214: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8304  0AAB  0877               	movf	_DMX_Address+1,w
  8305  0AAC  0021               	movlb	1	; select bank1
  8306  0AAD  0255               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8307  0AAE  1D03               	skipz
  8308  0AAF  2AB2               	goto	u235_25
  8309  0AB0  0876               	movf	_DMX_Address,w
  8310  0AB1  0254               	subwf	_RxAddrCount^(0+128),w	;volatile
  8311  0AB2                     u235_25:	
  8312  0AB2  1C03               	skipc
  8313  0AB3  2ABE               	goto	i1l3528
  8314  0AB4  0876               	movf	_DMX_Address,w
  8315  0AB5  0477               	iorwf	_DMX_Address+1,w
  8316  0AB6  1903               	btfsc	3,2
  8317  0AB7  2ABE               	goto	i1l3528
  8318                           
  8319                           ;DMX.c: 215: {
  8320                           ;DMX.c: 216: *RxDataPtr = RxDat;
  8321  0AB8  085F               	movf	_RxDataPtr^(0+128),w
  8322  0AB9  0086               	movwf	6
  8323  0ABA  0187               	clrf	7
  8324  0ABB  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8325  0ABC  0081               	movwf	1
  8326                           
  8327                           ;DMX.c: 217: RxDataPtr++;
  8328  0ABD  0ADF               	incf	_RxDataPtr^(0+128),f
  8329  0ABE                     i1l3528:	
  8330                           
  8331                           ;DMX.c: 218: }
  8332                           ;DMX.c: 219: RxAddrCount++;
  8333  0ABE  0AD4               	incf	_RxAddrCount^(0+128),f	;volatile
  8334  0ABF  1903               	skipnz
  8335  0AC0  0AD5               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8336                           
  8337                           ;DMX.c: 221: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8338  0AC1  0876               	movf	_DMX_Address,w
  8339  0AC2  3E04               	addlw	4
  8340  0AC3  00F0               	movwf	??_DMX_interrput
  8341  0AC4  3000               	movlw	0
  8342  0AC5  3D77               	addwfc	_DMX_Address+1,w
  8343  0AC6  00F1               	movwf	??_DMX_interrput+1
  8344  0AC7  0255               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8345  0AC8  1D03               	skipz
  8346  0AC9  2ACC               	goto	u237_25
  8347  0ACA  0870               	movf	??_DMX_interrput,w
  8348  0ACB  0254               	subwf	_RxAddrCount^(0+128),w	;volatile
  8349  0ACC                     u237_25:	
  8350  0ACC  1C03               	skipc
  8351  0ACD  2B38               	goto	i1l3586
  8352  0ACE  0876               	movf	_DMX_Address,w
  8353  0ACF  0477               	iorwf	_DMX_Address+1,w
  8354  0AD0  1903               	btfsc	3,2
  8355  0AD1  2B38               	goto	i1l3586
  8356                           
  8357                           ;DMX.c: 222: DMX_Flags.RxNew = 1;
  8358  0AD2  0020               	movlb	0	; select bank0
  8359  0AD3  146A               	bsf	_DMX_Flags,0	;volatile
  8360                           
  8361                           ;DMX.c: 223: RxState = RX_WAIT_FOR_BREAK;
  8362                           
  8363                           ;DMX.c: 224: RxTimer = 0;
  8364                           
  8365                           ;DMX.c: 225: DMX_Flags.RxTimeout = 0;
  8366  0AD4  234A  318A         	fcall	PL88	;call to abstracted procedure
  8367  0AD6  2B38               	goto	i1l3586
  8368  0AD7                     i1l3540:	
  8369                           
  8370                           ;DMX.c: 229: RxDat = RCREG;
  8371  0AD7  0023               	movlb	3	; select bank3
  8372  0AD8  0819               	movf	25,w	;volatile
  8373  0AD9  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8374                           
  8375                           ;DMX.c: 230: if (RxDat == 0x01)
  8376  0ADA  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8377  0ADB  2B38               	goto	i1l3586
  8378                           
  8379                           ;DMX.c: 231: {
  8380                           ;DMX.c: 232: RxState = RX_RDM_READ_DATA;
  8381  0ADC  3004               	movlw	4
  8382  0ADD  0021               	movlb	1	; select bank1
  8383  0ADE  00DE               	movwf	_RxState^(0+128)	;volatile
  8384                           
  8385                           ;DMX.c: 233: PackCount = 23;
  8386  0ADF  3017               	movlw	23
  8387  0AE0  00F9               	movwf	_PackCount	;volatile
  8388                           
  8389                           ;DMX.c: 234: PD_Flag = 0;
  8390  0AE1  01CA               	clrf	_PD_Flag^(0+128)	;volatile
  8391  0AE2  2B29               	goto	L5
  8392  0AE3                     i1l3548:	
  8393                           
  8394                           ;DMX.c: 239: RxDat = RCREG;
  8395  0AE3  0023               	movlb	3	; select bank3
  8396  0AE4  0819               	movf	25,w	;volatile
  8397  0AE5  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8398                           
  8399                           ;DMX.c: 240: RX_RDM_Data.value[PackCount] = RxDat;
  8400  0AE6  0879               	movf	_PackCount,w
  8401  0AE7  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8402  0AE8  0086               	movwf	6
  8403  0AE9  3001               	movlw	1	; select bank2/3
  8404  0AEA  0087               	movwf	7
  8405  0AEB  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8406  0AEC  0081               	movwf	1
  8407                           
  8408                           ;DMX.c: 242: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8409  0AED  3002               	movlw	2
  8410  0AEE  0679               	xorwf	_PackCount,w	;volatile
  8411  0AEF  1D03               	btfss	3,2
  8412  0AF0  2B02               	goto	i1l3562
  8413  0AF1  0879               	movf	_PackCount,w
  8414  0AF2  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8415  0AF3  0086               	movwf	6
  8416  0AF4  0801               	movf	1,w
  8417  0AF5  1903               	btfsc	3,2
  8418  0AF6  2B02               	goto	i1l3562
  8419  0AF7  0021               	movlb	1	; select bank1
  8420  0AF8  084A               	movf	_PD_Flag^(0+128),w	;volatile
  8421  0AF9  044B               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8422  0AFA  1D03               	btfss	3,2
  8423  0AFB  2B02               	goto	i1l3562
  8424                           
  8425                           ;DMX.c: 243: RxState = RX_RDM_PD;
  8426  0AFC  3005               	movlw	5
  8427  0AFD  00DE               	movwf	_RxState^(0+128)	;volatile
  8428                           
  8429                           ;DMX.c: 244: PDCount = 100-1;
  8430  0AFE  3063               	movlw	99
  8431  0AFF  00FA               	movwf	_PDCount
  8432  0B00                     i1l3560:	
  8433                           
  8434                           ;DMX.c: 245: PackCount--;
  8435  0B00  03F9               	decf	_PackCount,f	;volatile
  8436                           
  8437                           ;DMX.c: 246: break;
  8438  0B01  2B38               	goto	i1l3586
  8439  0B02                     i1l3562:	
  8440                           
  8441                           ;DMX.c: 247: }
  8442                           ;DMX.c: 248: if (PackCount == 0) {
  8443  0B02  0879               	movf	_PackCount,w	;volatile
  8444  0B03  1D03               	btfss	3,2
  8445  0B04  2B00               	goto	i1l3560
  8446                           
  8447                           ;DMX.c: 249: DMX_Flags.RDMNew = 1;
  8448  0B05  0020               	movlb	0	; select bank0
  8449  0B06  176A               	bsf	_DMX_Flags,6	;volatile
  8450                           
  8451                           ;DMX.c: 250: RxState = RX_WAIT_FOR_BREAK;
  8452                           
  8453                           ;DMX.c: 251: RxTimer = 0;
  8454                           
  8455                           ;DMX.c: 252: DMX_Flags.RxTimeout = 0;
  8456  0B07  234A  318A         	fcall	PL88	;call to abstracted procedure
  8457  0B09  2B00               	goto	i1l3560
  8458  0B0A                     i1l3572:	
  8459                           
  8460                           ;DMX.c: 258: RxDat = RCREG;
  8461  0B0A  0023               	movlb	3	; select bank3
  8462  0B0B  0819               	movf	25,w	;volatile
  8463  0B0C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8464                           
  8465                           ;DMX.c: 259: PD.u8[PDCount] = RxDat;
  8466  0B0D  087A               	movf	_PDCount,w
  8467  0B0E  3E8C               	addlw	140
  8468  0B0F  00F0               	movwf	??_DMX_interrput
  8469  0B10  3021               	movlw	33
  8470  0B11  01F1               	clrf	??_DMX_interrput+1
  8471  0B12  3DF1               	addwfc	??_DMX_interrput+1,f
  8472  0B13  0870               	movf	??_DMX_interrput,w
  8473  0B14  0086               	movwf	6
  8474  0B15  0871               	movf	??_DMX_interrput+1,w
  8475  0B16  0087               	movwf	7
  8476  0B17  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8477  0B18  0081               	movwf	1
  8478                           
  8479                           ;DMX.c: 260: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  8480  0B19  01F1               	clrf	??_DMX_interrput+1
  8481  0B1A  0022               	movlb	2	; select bank2
  8482  0B1B  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8483  0B1C  3C64               	sublw	100
  8484  0B1D  00F0               	movwf	??_DMX_interrput
  8485  0B1E  1C03               	skipc
  8486  0B1F  03F1               	decf	??_DMX_interrput+1,f
  8487  0B20  067A               	xorwf	_PDCount,w
  8488  0B21  0471               	iorwf	??_DMX_interrput+1,w
  8489  0B22  1D03               	skipz
  8490  0B23  2B2B               	goto	i1l3580
  8491                           
  8492                           ;DMX.c: 261: RxState = RX_RDM_READ_DATA;
  8493  0B24  3004               	movlw	4
  8494  0B25  0021               	movlb	1	; select bank1
  8495  0B26  00DE               	movwf	_RxState^(0+128)	;volatile
  8496                           
  8497                           ;DMX.c: 262: PD_Flag = 1;
  8498  0B27  3001               	movlw	1
  8499  0B28  00CA               	movwf	_PD_Flag^(0+128)	;volatile
  8500  0B29                     L5:	
  8501  0B29  01CB               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8502                           
  8503                           ;DMX.c: 263: }else{
  8504  0B2A  2B38               	goto	i1l3586
  8505  0B2B                     i1l3580:	
  8506                           
  8507                           ;DMX.c: 264: PDCount--;
  8508  0B2B  03FA               	decf	_PDCount,f
  8509  0B2C  2B38               	goto	i1l3586
  8510  0B2D                     i1l3584:	
  8511  0B2D  0021               	movlb	1	; select bank1
  8512  0B2E  085E               	movf	_RxState^(0+128),w	;volatile
  8513                           
  8514                           ; Switch size 1, requested type "space"
  8515                           ; Number of cases is 6, Range of values is 0 to 5
  8516                           ; switch strategies available:
  8517                           ; Name         Instructions Cycles
  8518                           ; direct_byte           18     6 (fixed)
  8519                           ; simple_byte           19    10 (average)
  8520                           ; jumptable            260     6 (fixed)
  8521                           ;	Chosen strategy is direct_byte
  8522  0B2F  0084               	movwf	4
  8523  0B30  3006               	movlw	6
  8524  0B31  0204               	subwf	4,w
  8525  0B32  1803               	skipnc
  8526  0B33  2B38               	goto	i1l3586
  8527  0B34  3189               	movlp	high i1S4680
  8528  0B35  3504               	lslf	4,w
  8529  0B36  3E69               	addlw	low i1S4680
  8530  0B37  0082               	movwf	2
  8531  0B38                     i1l3586:	
  8532                           
  8533                           ;DMX.c: 269: if (RxTimer > 2400) {
  8534  0B38  0021               	movlb	1	; select bank1
  8535  0B39  0853               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8536  0B3A  3A80               	xorlw	128
  8537  0B3B  00F0               	movwf	??_DMX_interrput
  8538  0B3C  3089               	movlw	137
  8539  0B3D  0270               	subwf	??_DMX_interrput,w
  8540  0B3E  1D03               	skipz
  8541  0B3F  2B42               	goto	u245_25
  8542  0B40  3061               	movlw	97
  8543  0B41  0252               	subwf	_RxTimer^(0+128),w	;volatile
  8544  0B42                     u245_25:	
  8545  0B42  1C03               	skipc
  8546  0B43  0008               	return
  8547                           
  8548                           ;DMX.c: 270: DMX_Flags.RxTimeout = 1;
  8549  0B44  0020               	movlb	0	; select bank0
  8550  0B45  156A               	bsf	_DMX_Flags,2	;volatile
  8551                           
  8552                           ;DMX.c: 271: RxTimer = 0;
  8553  0B46  0021               	movlb	1	; select bank1
  8554  0B47  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8555  0B48  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8556  0B49  0008               	return
  8557  0B4A                     __end_of_DMX_interrput:	
  8558  0B4A                     PL88:	
  8559  0B4A  0021               	movlb	1	; select bank1
  8560  0B4B  01DE               	clrf	_RxState^(0+128)	;volatile
  8561  0B4C  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8562  0B4D  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8563  0B4E  0020               	movlb	0	; select bank0
  8564  0B4F  116A               	bcf	_DMX_Flags,2	;volatile
  8565  0B50  0008               	return
  8566  0B51                     __end_ofPL88:	
  8567                           
  8568                           	psect	swtext1
  8569  0969                     __pswtext1:	
  8570  0969                     i1S4680:	
  8571  0969  318A  2A84         	ljmp	i1l3504
  8572  096B  318A  2A88         	ljmp	i1l388
  8573  096D  318A  2AA8         	ljmp	i1l3520
  8574  096F  318A  2AD7         	ljmp	i1l3540
  8575  0971  318A  2AE3         	ljmp	i1l3548
  8576  0973  318B  2B0A         	ljmp	i1l3572
  8577                           
  8578                           	psect	text30
  8579  0A58                     __ptext30:	
  8580 ;; *************** function _ADC_interrupt *****************
  8581 ;; Defined at:
  8582 ;;		line 43 in file "ADC.c"
  8583 ;; Parameters:    Size  Location     Type
  8584 ;;		None
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  2  120[None  ] int 
  8589 ;; Registers used:
  8590 ;;		wreg
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 1F/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8596 ;;      Params:         0       0       0       0       0       0       0       0
  8597 ;;      Locals:         0       0       0       0       0       0       0       0
  8598 ;;      Temps:          0       0       0       0       0       0       0       0
  8599 ;;      Totals:         0       0       0       0       0       0       0       0
  8600 ;;Total ram usage:        0 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_isr
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _ADC_interrupt
  8611  0A58                     _ADC_interrupt:	
  8612                           
  8613                           ;ADC.c: 44: if (ADIF == 1) {
  8614                           
  8615                           ;incstack = 0
  8616                           ; Regs used in _ADC_interrupt: [wreg]
  8617  0A58  0020               	movlb	0	; select bank0
  8618  0A59  1F11               	btfss	17,6	;volatile
  8619  0A5A  0008               	return
  8620                           
  8621                           ;ADC.c: 45: ADC_Data=ADRESH;
  8622  0A5B  0021               	movlb	1	; select bank1
  8623  0A5C  081C               	movf	28,w	;volatile
  8624  0A5D  00F8               	movwf	_ADC_Data	;volatile
  8625                           
  8626                           ;ADC.c: 46: ADC_Flags.New=1;
  8627  0A5E  1456               	bsf	_ADC_Flags^(0+128),0	;volatile
  8628                           
  8629                           ;ADC.c: 47: ADIF = 0;
  8630  0A5F  0020               	movlb	0	; select bank0
  8631  0A60  1311               	bcf	17,6	;volatile
  8632  0A61  0008               	return
  8633  0A62                     __end_of_ADC_interrupt:	
  8634  007E                     btemp	set	126	;btemp
  8635  007E                     int$flags	set	126
  8636  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        13
    BSS         198
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      77
    BANK1            80      8      80
    BANK2            80      0      79
    BANK3            80      4      56
    BANK4            76      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    DataPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    RxArPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PD_Manu	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    TxByte	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK1[4]), 

    PWMLDCONptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_timer1_interrupt
    _timer1_interrupt->_RDM_init
    _RDM_init->___bmul

Critical Paths under _main in BANK0

    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_RDM_TXSTART
    _RDM_GET_CC->_RDM_TXSTART
    _RDM_TXSTART->_RDM_get_checkSum
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_DMX_loop

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39496
                           _ADC_loop
                           _DMX_loop
                        _RDM_rx_loop
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    2184
                                             30 BANK0      1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     546
                                             26 BANK0      4     4      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0     546
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     546
                                             26 BANK0      2     2      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     546
                                             25 BANK0      1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     546
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            12    12      0   37312
                                              0 BANK1      8     8      0
                                              0 BANK3      4     4      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     579
                                             61 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7084
                                             55 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5532
                                             43 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             13 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1446
                                             13 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4733
                                             28 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     491
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0     352
                                              5 COMMON     1     1      0
                           _ADC_init
                           _DMX_init
                           _RDM_init
 ---------------------------------------------------------------------------------
 (7) _RDM_init                                             2     2      0     196
                                              3 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (7) _DMX_init                                             4     4      0     156
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_loop
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_SET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt
     _ADC_init
     _DMX_init
     _RDM_init
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     130       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      4      38      12       70.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4C      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     130      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 14 14:53:49 2017

                           _i 014C                             pc 0002                ___bmul@product 0071  
                 __CFG_CP$OFF 0000                            PL2 05A5                            PL4 05BF  
                          PL6 05C5                            PL8 05CC                            _PD 218C  
                ___ftadd@exp1 0056                  ___ftadd@exp2 0055                           PL10 05D6  
                         PL20 0620                           PL12 05E4                           PL30 0655  
                         PL22 0628                           PL14 0601                           PL40 0668  
                         PL32 0F2B                           PL24 0638                           PL16 0F15  
                         PL50 0688                           PL42 0FEE                           PL34 065B  
                         PL26 063E                           PL18 0618                           PL60 06AA  
                         PL52 0691                           PL44 066E                           PL36 0F39  
                         PL28 0646                           PL70 0F55                           PL62 0D0A  
                         PL54 0698                           PL46 0679                           PL38 0CFE  
                         PL80 06C7                           PL72 06BA                           PL64 06B2  
                         PL56 0F46                           PL48 0680                           PL90 06DC  
                         PL82 06CE                           PL74 0D12                           PL66 0F4F  
                         PL58 06A1                           PL92 0F63                           PL84 0FF9  
                         PL76 06C0                           PL68 075C                           PL94 0D19  
                         PL86 06D5                           PL78 0F5C                           PL96 0F69  
                         PL88 0B4A                           PL98 06E2                  ___ftadd@sign 0054  
                         l362 0238                           l348 0245                           l375 033D  
                         l713 0E1E                           l725 0E56                           l718 0E42  
                         _RA2 0062                           _RC0 0070                           _RC1 0071  
                         _RA5 0065                           _RC2 0072                           _PR2 001B  
                         _UID 0963                           _TX9 0CF6                           _PWM 0763  
                         _isr 0004                           wreg 0009                          PL100 06E8  
                        PL110 06FF                          PL102 06EE                          PL112 0703  
                        PL104 0D1F                          PL114 0D25                          PL106 06F4  
                        PL108 06FA                  __CFG_LVP$OFF 0000                  ___ftdiv@cntr 0045  
                ___ftdiv@sign 004A                          l1112 0D6A                          l1116 0D82  
                        l1108 0D2B                          l1117 0D8C                          l1119 0DA0  
                        l1306 055C                          l1330 049D                          l4000 047E  
                        l4010 0495                          l4002 0483                          l1348 03E5  
                        l4012 0499                          l4004 0487                          l4100 0D8F  
                        l1294 0537                          l4110 0E89                          l4024 04B0  
                        l4040 0D2A                          l4210 03F8                          l4018 04A8  
                        l4114 0E99                          l4036 04C1                          l4300 0389  
                        l4108 0E88                          l4142 0EE7                          l4216 040E  
                        l4232 03BB                          l4136 0EDF                          l4144 0EFD  
                        l4306 0710                          l4162 0F09                          l4154 0EFE  
                        l4058 0D4E                          l4180 0577                          l4228 03AC  
                        l4252 04EF                          l4340 0753                          l4324 0731  
                        l4308 0715                          l4420 020D                          l4164 0F14  
                        l4156 0EFF                          l4500 0E19                          l4270 0503  
                        l4334 073C                          l4510 0E54                          l4248 04E1  
                        l4336 0745                          l4328 0738                          l4408 01DB  
                        l4512 0E55                          l4282 0511                          l4274 0507  
                        l4188 03D7                          l4444 0258                          l4428 00E5  
                        l3900 0E72                          l4508 0E53                          l4286 0515  
                        l4470 035B                          l4382 0122                          l3902 0E7F  
                        l4448 0288                          l4456 02AC                          l4472 0370  
                        l4466 0338                          l3906 0DDF                          l3940 054D  
                        l4388 0164                          l4556 00AC                          l3934 053B  
                        l4398 0190                          l3944 055A                          l3936 053F  
                        l4672 0D95                          l4496 0E01                          l3946 0552  
                        l3938 0544                          l3970 0448                          l3954 0DA1  
                        l4674 0F0F                          l3980 045E                          l3892 0E5D  
                        l4676 0EF0                          l3974 044F                          l3894 0E6B  
                        l4678 0EF8                          _ADIE 048E                          l3992 046C  
                        _ADIF 008E                          ?_isr 0070                          l3998 047A  
                        _BRGH 0CF2                          _FERR 0CEA                          u3065 0405  
                        u3500 0E2A                          u3195 0718                          u3515 0E3C  
                        u2750 0DAD                          _PEIE 005E                          _RCIE 048D  
                        _RCIF 008D                          _TMR1 0016              _DMXPeriodDimming 00DC  
                        _SPEN 0CEF                          _TX9D 0CF0                          _TXIE 048C  
                        _TXEN 0CF5                          _TXIF 008C                          _SYNC 0CF4  
                __CFG_WRT$OFF 0000           _TX_RDM_Response_Set 0DC0                          _main 005B  
                ___ftpack@arg 0020                  ___ftpack@exp 0023                          fsr0h 0005  
                        fsr1h 0007                          indf0 0000                          fsr0l 0004  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
                        start 0013                    _TX_PDCount 00D8              __end_of_ADC_init 0BE5  
            __end_of_ADC_loop 00DB                    _TX_PD_Flag 00C8                   ?_RDM_GET_CC 0070  
           ___bmul@multiplier 0072                 __CFG_MCLRE$ON 0000                  ___ftmul@cntr 003A  
                ___ftmul@sign 003B                   ?_RDM_SET_CC 0070                  ___fttol@exp1 0069  
                ___fttol@lval 0065                         ??_isr 0076                 __CFG_PLLEN$ON 0000  
        ?_TX_RDM_Response_Set 0070                   _RX_RDM_Data 0120                         ?_main 0070  
             __end_of___ftadd 04D3                 __CFG_WDTE$OFF 0000              __end_of_DMX_init 0C54  
                       _ANSA2 0C62                         _ANSC0 0C70                         _ANSA4 0C64  
             __end_of___ftdiv 0425                         _ANSC1 0C71                         _ANSC2 0C72  
                       _ANSC3 0C73              __end_of_DMX_loop 0372               __end_of___ftmul 052F  
                       _T1CON 0018               __end_of___ftsub 039D               __end_of___fttol 075C  
                       _T2CON 001C                         _LATC3 0873                         _LATC4 0874  
                       i1l388 0A88                         i1l902 0B5A                         i1l735 0F96  
                       i1l911 0BB3                         i1l744 0FED                         i1l912 0BBD  
                       _RCREG 0199     __size_of_RDM_tx_interrupt 007F                         _RCSTA 019D  
                       _PD_ID 00CC                         _RXPPS 0E15                         _TXREG 019A  
                       _Timer 00B8              __end_of_RDM_init 0CF2                 ___awtoft@sign 002B  
               ___ftpack@sign 0024                __CFG_BOREN$OFF 0000                   _TX_RDM_Data 014E  
                       status 0003                         wtemp0 007E                  __end_ofPL100 06EE  
                __end_ofPL110 0703                  __end_ofPL102 06F4                  __end_ofPL112 0707  
                __end_ofPL104 0D25                  __end_ofPL114 0D2A                  __end_ofPL106 06FA  
                __end_ofPL108 06FF             ?_RDM_get_checkSum 0020            ??_RDM_get_checkSum 0039  
             __initialization 0015                  __end_of_main 00B3                    _CurrentPWM 0140  
           ?_RDM_discovery_CC 0070         ??_TX_RDM_Response_Set 0020                  ?_RDM_TXSTART 0070  
          ??_RDM_discovery_CC 003A                        ??_main 006A                 ___fttol@sign1 0064  
         __size_of_RDM_GET_CC 0076                        _ADCON0 009D                        _ADCON1 009E  
                      i1S4680 0969                        _ADRESH 009C           __size_of_RDM_SET_CC 0017  
            __end_of___awtoft 0588              __end_of___ftpack 056D              __end_of___lbtoft 0382  
                      _RA2PPS 0E92                        _RC0PPS 0EA0                        _RC1PPS 0EA1  
                      _RC2PPS 0EA2                        _RC4PPS 0EA4                        i1l3006 0CDB  
                      i1l3520 0AA8                        i1l3504 0A84                        i1l3514 0A9D  
                      i1l3540 0AD7                        i1l3620 0B71                        i1l3604 0B59  
                      i1l3518 0AA5                        i1l3560 0B00                        i1l3528 0ABE  
                      i1l3632 0B94                        i1l3562 0B02                        i1l3714 0FDC  
                      i1l3580 0B2B                        i1l3572 0B0A                        i1l3548 0AE3  
                      i1l3708 0FBE                        i1l2932 0C2B                        i1l3718 0FDE  
                      i1l3584 0B2D                        i1l3672 0F76                        i1l2792 0CF4  
                      i1l3664 0BC9                        i1l3586 0B38                        i1l3692 0FA0  
                      i1l3684 0F8B                        i1l2980 0C8D                        i1l3678 0F80  
                      i1l2966 0C78                        i1l2994 0C94                        i1l2978 0C80  
                      i1l2996 0CBE                        _INTCON 000B                        u250_20 0B7D  
                      u250_22 0B7E                        u235_25 0AB2                        u245_25 0B42  
                      u237_25 0ACC                        u166_20 0C76                        u264_25 0FD4  
                      u249_20 0B76                        u249_22 0B77              __end_of___lwtoft 0598  
                      _OSCCON 0099        __size_of_DMX_interrput 00DC                        _TMR1IE 0488  
                      _TMR1IF 0088             _DMX_CurrentBright 00AC                        _SPBRGH 019C  
                      _SPBRGL 019B                        _TRISA2 0462                        _TRISC0 0470  
                      _TRISA4 0464                        _TRISC1 0471                        _TRISC2 0472  
                      _TRISC3 0473                        _TRISC4 0474                        _TRISC5 0475  
              __CFG_PWRTE$OFF 0000                        _RxData 00E0              _timer1_interrupt 0B51  
                      _TxByte 00DA                        ___bmul 0CF2                        ___ftge 039D  
                   ??___ftadd 0051                __CFG_STVREN$ON 0000                     ??___ftdiv 0042  
                   ??___ftmul 0033                     ??___ftsub 005D                     ??___fttol 0061  
                ?_timer1_init 0070                  ?_RDM_rx_loop 0070                    _TimerState 016E  
                      _rxdata 006C         ___ftmul@f3_as_product 0037           RDM_get_checkSum@len 0038  
                __pdataCOMMON 007B                     ?_ADC_init 0070                     ?_ADC_loop 0070  
     __end_of__initialization 0058                    ___ftadd@f1 004B                    ___ftadd@f2 004E  
                  ___ftge@ff1 002D                    ___ftge@ff2 0030                    ___ftdiv@f1 003F  
                  ___ftdiv@f2 003C                    ___ftdiv@f3 0046                     ?_DMX_init 0070  
                   ?_DMX_loop 0070                 _DMX_loop$1446 01D4                _DMXPeriodConst 00DD  
                  ___awtoft@c 0028                    ___lbtoft@c 002C           ___bmul@multiplicand 0070  
                  ___ftmul@f1 002D                    ___ftmul@f2 0030                    ___ftsub@f1 005A  
                  ___ftsub@f2 0057                    ___fttol@f1 005D                __pcstackCOMMON 0070  
                __pidataBANK1 0000                  __pidataBANK2 0000              _DMX_TargetBright 00A0  
                   ?_RDM_init 0070                    __end_ofPL2 05BF                    __end_ofPL4 05C5  
                  __end_ofPL6 05CC                    __end_ofPL8 05D6                 _DMX_interrput 0A6E  
                  ___lwtoft@c 0028              _RDM_tx_interrupt 0F6F                    ??_ADC_init 0070  
                  ??_ADC_loop 0020                    __pbssBANK0 006A                    __pbssBANK1 00A0  
                  __pbssBANK2 0120                    __pbssBANK3 01A0                 _DMX_sumRepeat 00EC  
                 _RxAddrCount 00D4        __size_of_ADC_interrupt 000A                    ??_DMX_init 0070  
                  ??_DMX_loop 00E4                  ??_RDM_GET_CC 003A                    __pmaintext 005B  
                ??_RDM_SET_CC 003A                       ?___bmul 0070                       ?___ftge 002D  
                  ??_RDM_init 0073                    __pintentry 0004                ?_DMX_interrput 0070  
                     _BAUDCON 019F                     ?___awtoft 0028                     ?___ftpack 0020  
                   ?___lbtoft 0028             _RDM_tx_TimerBreak 0DDF                     ?___lwtoft 0028  
        __size_of_RDM_TXSTART 001F            ?_RDM_tx_TimerBreak 0070                       _DMXSign 00BF  
                     _PWM1DCH 0D94                       _PWM1DCL 0D93                       _PWM2DCH 0DA4  
                     _PWM2DCL 0DA3                       _OSCTUNE 0098                       _PWM3DCH 0DB4  
                     _PWM3DCL 0DB3                       _PWM4DCH 0DC4                       _PWM1CON 0D9B  
                     _PWM4DCL 0DC3                       _PWM2CON 0DAB                       _PWM3CON 0DBB  
                     _PWM4CON 0DCB                       _PDCount 007A                       _PWM1PHH 0D92  
                     _PWM1PHL 0D91                       _PWM2PHH 0DA2                       _PWM2PHL 0DA1  
                     _PWM3PHH 0DB2                       _PWM3PHL 0DB1                       _PWM1PRH 0D96  
                     _PWM4PHH 0DC2                       _PWM1PRL 0D95                       _PWM4PHL 0DC1  
                     _PWM2PRH 0DA6                       _PWM2PRL 0DA5                       _PWM3PRH 0DB6  
                     _PWM3PRL 0DB5                       _PD_Flag 00CA                       _PWM4PRH 0DC6  
                     _PWM4PRL 0DC5                       _PD_Manu 00CE              _Timer_DelayCount 00D7  
          __end_of_RDM_GET_CC 0EFE           ??_RDM_tx_TimerBreak 0020            __end_of_RDM_SET_CC 0F15  
                   _ADC_Flags 00D6                  DMX_init@Addr 0073                       _TxCount 00D0  
                     _RxTimer 00D2                       _RxState 00DE                       _TxState 00D9  
             __size_of___bmul 000C               __size_of___ftge 002C                       ___ftadd 0425  
                     ___ftdiv 03C9                       ___ftmul 04D3                       ___ftsub 0382  
                     ___fttol 0707     __end_of_RDM_tx_TimerBreak 0DEE                  DMX_loop@Addr 01D7  
                  ??___awtoft 002B                    ??___ftpack 0025                    ??___lbtoft 002C  
        __size_of_timer1_init 000D                       __ptext1 0598                       __ptext2 0DEE  
                     __ptext3 0D2A                       __ptext4 0EFE                       __ptext5 0E88  
                     __ptext6 0DA1                       __ptext7 0DC0                       __ptext8 0DDF  
                     __ptext9 0E57                 _ADC_interrupt 0A58          __size_of_RDM_rx_loop 0069  
                  ??___lwtoft 002B     __size_of_RDM_get_checkSum 0031                  __size_of_isr 000F  
    __end_of_timer1_interrupt 0BD9                       clrloop0 0A63     __size_of_RDM_discovery_CC 0077  
        RDM_get_checkSum@Data 0020          end_of_initialization 0058                     _DMX_Flags 006A  
                   _DMXPeriod 007B                _DMX_difference 00C3   __end_of_TX_RDM_Response_Set 0DDF  
             ??_DMX_interrput 0070                     _PWM1LDCON 0D9F                     _PWM2LDCON 0DAF  
                   _PWM3LDCON 0DBF                     _PWM4LDCON 0DCF                  __pstringtext 0763  
              ?_ADC_interrupt 0070                     _PWMDCHptr 01B4                     _PWMDCLptr 0138  
            __CFG_FOSC$INTOSC 0000             __size_of_ADC_init 000C             __size_of_ADC_loop 0028  
                 ___ftdiv@exp 0049      __end_of_RDM_tx_interrupt 0FEE                   ___ftmul@exp 0036  
           __size_of_DMX_init 006F             __size_of_DMX_loop 0297                __end_of___bmul 0CFE  
              __end_of___ftge 03C9    __size_of_RDM_tx_TimerBreak 000F                 __pidataCOMMON 0000  
           __size_of_RDM_init 009E                     _PackCount 0079                   __end_ofPL10 05E4  
                 __end_ofPL20 0628                   __end_ofPL12 0601                   __end_ofPL30 065B  
                 __end_ofPL22 0638                   __end_ofPL14 0618                   __end_ofPL40 066E  
                 __end_ofPL32 0F39                   __end_ofPL24 063E                   __end_ofPL16 0F2B  
                 __end_ofPL50 0691                   __end_ofPL42 0FF9                   __end_ofPL34 0668  
                 __end_ofPL26 0646                   __end_ofPL18 0620                   __end_ofPL60 06B2  
                 __end_ofPL52 0698                   __end_ofPL44 0679                   __end_ofPL36 0F46  
                 __end_ofPL28 0655                   __end_ofPL70 0F5C                   __end_ofPL62 0D12  
                 __end_ofPL54 06A1                   __end_ofPL46 0680                   __end_ofPL38 0D0A  
                 __end_ofPL80 06CE                   __end_ofPL72 06C0                   __end_ofPL64 06BA  
                 __end_ofPL56 0F4F                   __end_ofPL48 0688                   __end_ofPL90 06E2  
                 __end_ofPL82 06D5                   __end_ofPL74 0D19                   __end_ofPL66 0F55  
                 __end_ofPL58 06AA                   __end_ofPL92 0F69                   __end_ofPL84 1000  
                 __end_ofPL76 06C7                   __end_ofPL68 0763                   __end_ofPL94 0D1F  
                 __end_ofPL86 06DC                   __end_ofPL78 0F63                   __end_ofPL96 0F6F  
                 __end_ofPL88 0B51                   __end_ofPL98 06E8           start_initialization 0015  
                 __end_of_UID 0969                   __end_of_PWM 0963                   __end_of_isr 0013  
                   _RxDataPtr 00DF                  _DMXStepConst 00DB              __CFG_LPBOREN$OFF 0000  
                    ??___bmul 0071                      ??___ftge 0033               ??_ADC_interrupt 0070  
                 __pdataBANK1 00EC                   __pdataBANK2 0166              _RDM_get_checkSum 0E57  
           __size_of___awtoft 001B             __size_of___ftpack 003E             __size_of___lbtoft 0010  
                 __pbssBIGRAM 218C                   __pbssCOMMON 0076                     ___latbits 0001  
           __size_of___lwtoft 0010                 __pcstackBANK0 0020                 __pcstackBANK1 00E4  
               __pcstackBANK3 01D4              _RDM_discovery_CC 0D2A               _DMX_SpaceBright 01A0  
                   __pnvBANK2 016E                      ?___ftadd 004B                      ?___ftdiv 003C  
                    ?___ftmul 002D                      ?___ftsub 0057                      ?___fttol 005D  
            __CFG_PPS1WAY$OFF 0000                 ??_RDM_TXSTART 0039                     __pswtext1 0969  
                    _ADC_Data 0078                      _ADC_init 0BD9                      _ADC_loop 00B3  
           ?_timer1_interrupt 0070            ??_timer1_interrupt 0075                     _preRxData 0148  
                   clear_ram0 0A62                      _DMX_init 0BE5                      _DMX_loop 00DB  
                    _GO_nDONE 04E9            DMX_interrput@RxDat 0072                 ??_timer1_init 0020  
                    _RDM_init 0C54                 ??_RDM_rx_loop 003E           __end_of_RDM_TXSTART 0DC0  
                 _DMX_Address 0076             ?_RDM_tx_interrupt 0070            ??_RDM_tx_interrupt 0070  
            __size_of___ftadd 00AE         __end_of_DMX_interrput 0B4A              __size_of___ftdiv 005C  
            __size_of___ftmul 005C              __size_of___ftsub 001B              __size_of___fttol 0055  
                    ___awtoft 056D                      ___ftpack 052F                      ___lbtoft 0372  
__size_of_TX_RDM_Response_Set 001F                      ___lwtoft 0588           __end_of_timer1_init 05A5  
         __end_of_RDM_rx_loop 0E57                      _checkSum 00C6                      __ptext10 00DB  
                    __ptext11 0588                      __ptext20 052F                      __ptext12 0372  
                    __ptext21 00B3                      __ptext13 0707                      __ptext30 0A58  
                    __ptext14 0382                      __ptext23 0B51                      __ptext15 0425  
                    __ptext24 0C54                      __ptext16 04D3                      __ptext25 0CF2  
                    __ptext17 039D                      __ptext26 0BE5                      __ptext18 03C9  
                    __ptext27 0BD9                      __ptext19 056D                      __ptext28 0F6F  
                    __ptext29 0A6E                 __size_of_main 0058      __end_of_RDM_get_checkSum 0E88  
                    int$flags 007E      __end_of_RDM_discovery_CC 0DA1                   _RDM_TXSTART 0DA1  
                  _DMX_Repeat 0166                      intlevel1 0000             __CFG_CLKOUTEN$OFF 0000  
                  _RDM_GET_CC 0E88                    _RDM_SET_CC 0EFE            _DISCOVERY_RDM_Data 01BC  
                 _timer1_init 0598                    _PWM1CLKCON 0D9E                    _PWM2CLKCON 0DAE  
                 _RDM_rx_loop 0DEE                    _PWM3CLKCON 0DBE                    _PWM4CLKCON 0DCE  
                 _PWMLDCONptr 01AC         __end_of_ADC_interrupt 0A62     __size_of_timer1_interrupt 0088  
