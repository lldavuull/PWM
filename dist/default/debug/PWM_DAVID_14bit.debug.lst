

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 14 09:47:24 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text23,local,class=CODE,merge=1,delta=2
    26                           	psect	text29,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text30,local,class=CODE,merge=1,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x320,16
    31                           	dabs	1,0x2A0,80
    32                           	dabs	1,0x26C,4
    33                           	dabs	1,0x218C,0,_PD
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.41
    37                           ; Generated 25/01/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F1574 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000E                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  008C                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  018C                     	;# 
   125  018E                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0194                     	;# 
   132  0195                     	;# 
   133  0196                     	;# 
   134  0197                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019C                     	;# 
   140  019D                     	;# 
   141  019E                     	;# 
   142  019F                     	;# 
   143  020C                     	;# 
   144  020E                     	;# 
   145  028C                     	;# 
   146  028E                     	;# 
   147  030C                     	;# 
   148  030E                     	;# 
   149  038C                     	;# 
   150  038E                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  0397                     	;# 
   155  0398                     	;# 
   156  0399                     	;# 
   157  0691                     	;# 
   158  0692                     	;# 
   159  0693                     	;# 
   160  0694                     	;# 
   161  0695                     	;# 
   162  0D8E                     	;# 
   163  0D8F                     	;# 
   164  0D90                     	;# 
   165  0D91                     	;# 
   166  0D91                     	;# 
   167  0D92                     	;# 
   168  0D93                     	;# 
   169  0D93                     	;# 
   170  0D94                     	;# 
   171  0D95                     	;# 
   172  0D95                     	;# 
   173  0D96                     	;# 
   174  0D97                     	;# 
   175  0D97                     	;# 
   176  0D98                     	;# 
   177  0D99                     	;# 
   178  0D99                     	;# 
   179  0D9A                     	;# 
   180  0D9B                     	;# 
   181  0D9C                     	;# 
   182  0D9C                     	;# 
   183  0D9D                     	;# 
   184  0D9D                     	;# 
   185  0D9E                     	;# 
   186  0D9F                     	;# 
   187  0DA0                     	;# 
   188  0DA1                     	;# 
   189  0DA1                     	;# 
   190  0DA2                     	;# 
   191  0DA3                     	;# 
   192  0DA3                     	;# 
   193  0DA4                     	;# 
   194  0DA5                     	;# 
   195  0DA5                     	;# 
   196  0DA6                     	;# 
   197  0DA7                     	;# 
   198  0DA7                     	;# 
   199  0DA8                     	;# 
   200  0DA9                     	;# 
   201  0DA9                     	;# 
   202  0DAA                     	;# 
   203  0DAB                     	;# 
   204  0DAC                     	;# 
   205  0DAC                     	;# 
   206  0DAD                     	;# 
   207  0DAD                     	;# 
   208  0DAE                     	;# 
   209  0DAF                     	;# 
   210  0DB0                     	;# 
   211  0DB1                     	;# 
   212  0DB1                     	;# 
   213  0DB2                     	;# 
   214  0DB3                     	;# 
   215  0DB3                     	;# 
   216  0DB4                     	;# 
   217  0DB5                     	;# 
   218  0DB5                     	;# 
   219  0DB6                     	;# 
   220  0DB7                     	;# 
   221  0DB7                     	;# 
   222  0DB8                     	;# 
   223  0DB9                     	;# 
   224  0DB9                     	;# 
   225  0DBA                     	;# 
   226  0DBB                     	;# 
   227  0DBC                     	;# 
   228  0DBC                     	;# 
   229  0DBD                     	;# 
   230  0DBD                     	;# 
   231  0DBE                     	;# 
   232  0DBF                     	;# 
   233  0DC0                     	;# 
   234  0DC1                     	;# 
   235  0DC1                     	;# 
   236  0DC2                     	;# 
   237  0DC3                     	;# 
   238  0DC3                     	;# 
   239  0DC4                     	;# 
   240  0DC5                     	;# 
   241  0DC5                     	;# 
   242  0DC6                     	;# 
   243  0DC7                     	;# 
   244  0DC7                     	;# 
   245  0DC8                     	;# 
   246  0DC9                     	;# 
   247  0DC9                     	;# 
   248  0DCA                     	;# 
   249  0DCB                     	;# 
   250  0DCC                     	;# 
   251  0DCC                     	;# 
   252  0DCD                     	;# 
   253  0DCD                     	;# 
   254  0DCE                     	;# 
   255  0DCF                     	;# 
   256  0DD0                     	;# 
   257  0E0F                     	;# 
   258  0E10                     	;# 
   259  0E11                     	;# 
   260  0E12                     	;# 
   261  0E13                     	;# 
   262  0E14                     	;# 
   263  0E15                     	;# 
   264  0E16                     	;# 
   265  0E17                     	;# 
   266  0E90                     	;# 
   267  0E91                     	;# 
   268  0E92                     	;# 
   269  0E94                     	;# 
   270  0E95                     	;# 
   271  0EA0                     	;# 
   272  0EA1                     	;# 
   273  0EA2                     	;# 
   274  0EA3                     	;# 
   275  0EA4                     	;# 
   276  0EA5                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE8                     	;# 
   283  0FE9                     	;# 
   284  0FEA                     	;# 
   285  0FEA                     	;# 
   286  0FEB                     	;# 
   287  0FED                     	;# 
   288  0FEE                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000E                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  008C                     	;# 
   318  008E                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010E                     	;# 
   336  0111                     	;# 
   337  0112                     	;# 
   338  0113                     	;# 
   339  0114                     	;# 
   340  0115                     	;# 
   341  0116                     	;# 
   342  0117                     	;# 
   343  0118                     	;# 
   344  0119                     	;# 
   345  018C                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0194                     	;# 
   353  0195                     	;# 
   354  0196                     	;# 
   355  0197                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020C                     	;# 
   365  020E                     	;# 
   366  028C                     	;# 
   367  028E                     	;# 
   368  030C                     	;# 
   369  030E                     	;# 
   370  038C                     	;# 
   371  038E                     	;# 
   372  0391                     	;# 
   373  0392                     	;# 
   374  0393                     	;# 
   375  0397                     	;# 
   376  0398                     	;# 
   377  0399                     	;# 
   378  0691                     	;# 
   379  0692                     	;# 
   380  0693                     	;# 
   381  0694                     	;# 
   382  0695                     	;# 
   383  0D8E                     	;# 
   384  0D8F                     	;# 
   385  0D90                     	;# 
   386  0D91                     	;# 
   387  0D91                     	;# 
   388  0D92                     	;# 
   389  0D93                     	;# 
   390  0D93                     	;# 
   391  0D94                     	;# 
   392  0D95                     	;# 
   393  0D95                     	;# 
   394  0D96                     	;# 
   395  0D97                     	;# 
   396  0D97                     	;# 
   397  0D98                     	;# 
   398  0D99                     	;# 
   399  0D99                     	;# 
   400  0D9A                     	;# 
   401  0D9B                     	;# 
   402  0D9C                     	;# 
   403  0D9C                     	;# 
   404  0D9D                     	;# 
   405  0D9D                     	;# 
   406  0D9E                     	;# 
   407  0D9F                     	;# 
   408  0DA0                     	;# 
   409  0DA1                     	;# 
   410  0DA1                     	;# 
   411  0DA2                     	;# 
   412  0DA3                     	;# 
   413  0DA3                     	;# 
   414  0DA4                     	;# 
   415  0DA5                     	;# 
   416  0DA5                     	;# 
   417  0DA6                     	;# 
   418  0DA7                     	;# 
   419  0DA7                     	;# 
   420  0DA8                     	;# 
   421  0DA9                     	;# 
   422  0DA9                     	;# 
   423  0DAA                     	;# 
   424  0DAB                     	;# 
   425  0DAC                     	;# 
   426  0DAC                     	;# 
   427  0DAD                     	;# 
   428  0DAD                     	;# 
   429  0DAE                     	;# 
   430  0DAF                     	;# 
   431  0DB0                     	;# 
   432  0DB1                     	;# 
   433  0DB1                     	;# 
   434  0DB2                     	;# 
   435  0DB3                     	;# 
   436  0DB3                     	;# 
   437  0DB4                     	;# 
   438  0DB5                     	;# 
   439  0DB5                     	;# 
   440  0DB6                     	;# 
   441  0DB7                     	;# 
   442  0DB7                     	;# 
   443  0DB8                     	;# 
   444  0DB9                     	;# 
   445  0DB9                     	;# 
   446  0DBA                     	;# 
   447  0DBB                     	;# 
   448  0DBC                     	;# 
   449  0DBC                     	;# 
   450  0DBD                     	;# 
   451  0DBD                     	;# 
   452  0DBE                     	;# 
   453  0DBF                     	;# 
   454  0DC0                     	;# 
   455  0DC1                     	;# 
   456  0DC1                     	;# 
   457  0DC2                     	;# 
   458  0DC3                     	;# 
   459  0DC3                     	;# 
   460  0DC4                     	;# 
   461  0DC5                     	;# 
   462  0DC5                     	;# 
   463  0DC6                     	;# 
   464  0DC7                     	;# 
   465  0DC7                     	;# 
   466  0DC8                     	;# 
   467  0DC9                     	;# 
   468  0DC9                     	;# 
   469  0DCA                     	;# 
   470  0DCB                     	;# 
   471  0DCC                     	;# 
   472  0DCC                     	;# 
   473  0DCD                     	;# 
   474  0DCD                     	;# 
   475  0DCE                     	;# 
   476  0DCF                     	;# 
   477  0DD0                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E16                     	;# 
   486  0E17                     	;# 
   487  0E90                     	;# 
   488  0E91                     	;# 
   489  0E92                     	;# 
   490  0E94                     	;# 
   491  0E95                     	;# 
   492  0EA0                     	;# 
   493  0EA1                     	;# 
   494  0EA2                     	;# 
   495  0EA3                     	;# 
   496  0EA4                     	;# 
   497  0EA5                     	;# 
   498  0FE4                     	;# 
   499  0FE5                     	;# 
   500  0FE6                     	;# 
   501  0FE7                     	;# 
   502  0FE8                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEA                     	;# 
   507  0FEB                     	;# 
   508  0FED                     	;# 
   509  0FEE                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009A                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  0197                     	;# 
   577  0199                     	;# 
   578  019A                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019C                     	;# 
   582  019D                     	;# 
   583  019E                     	;# 
   584  019F                     	;# 
   585  020C                     	;# 
   586  020E                     	;# 
   587  028C                     	;# 
   588  028E                     	;# 
   589  030C                     	;# 
   590  030E                     	;# 
   591  038C                     	;# 
   592  038E                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  0397                     	;# 
   597  0398                     	;# 
   598  0399                     	;# 
   599  0691                     	;# 
   600  0692                     	;# 
   601  0693                     	;# 
   602  0694                     	;# 
   603  0695                     	;# 
   604  0D8E                     	;# 
   605  0D8F                     	;# 
   606  0D90                     	;# 
   607  0D91                     	;# 
   608  0D91                     	;# 
   609  0D92                     	;# 
   610  0D93                     	;# 
   611  0D93                     	;# 
   612  0D94                     	;# 
   613  0D95                     	;# 
   614  0D95                     	;# 
   615  0D96                     	;# 
   616  0D97                     	;# 
   617  0D97                     	;# 
   618  0D98                     	;# 
   619  0D99                     	;# 
   620  0D99                     	;# 
   621  0D9A                     	;# 
   622  0D9B                     	;# 
   623  0D9C                     	;# 
   624  0D9C                     	;# 
   625  0D9D                     	;# 
   626  0D9D                     	;# 
   627  0D9E                     	;# 
   628  0D9F                     	;# 
   629  0DA0                     	;# 
   630  0DA1                     	;# 
   631  0DA1                     	;# 
   632  0DA2                     	;# 
   633  0DA3                     	;# 
   634  0DA3                     	;# 
   635  0DA4                     	;# 
   636  0DA5                     	;# 
   637  0DA5                     	;# 
   638  0DA6                     	;# 
   639  0DA7                     	;# 
   640  0DA7                     	;# 
   641  0DA8                     	;# 
   642  0DA9                     	;# 
   643  0DA9                     	;# 
   644  0DAA                     	;# 
   645  0DAB                     	;# 
   646  0DAC                     	;# 
   647  0DAC                     	;# 
   648  0DAD                     	;# 
   649  0DAD                     	;# 
   650  0DAE                     	;# 
   651  0DAF                     	;# 
   652  0DB0                     	;# 
   653  0DB1                     	;# 
   654  0DB1                     	;# 
   655  0DB2                     	;# 
   656  0DB3                     	;# 
   657  0DB3                     	;# 
   658  0DB4                     	;# 
   659  0DB5                     	;# 
   660  0DB5                     	;# 
   661  0DB6                     	;# 
   662  0DB7                     	;# 
   663  0DB7                     	;# 
   664  0DB8                     	;# 
   665  0DB9                     	;# 
   666  0DB9                     	;# 
   667  0DBA                     	;# 
   668  0DBB                     	;# 
   669  0DBC                     	;# 
   670  0DBC                     	;# 
   671  0DBD                     	;# 
   672  0DBD                     	;# 
   673  0DBE                     	;# 
   674  0DBF                     	;# 
   675  0DC0                     	;# 
   676  0DC1                     	;# 
   677  0DC1                     	;# 
   678  0DC2                     	;# 
   679  0DC3                     	;# 
   680  0DC3                     	;# 
   681  0DC4                     	;# 
   682  0DC5                     	;# 
   683  0DC5                     	;# 
   684  0DC6                     	;# 
   685  0DC7                     	;# 
   686  0DC7                     	;# 
   687  0DC8                     	;# 
   688  0DC9                     	;# 
   689  0DC9                     	;# 
   690  0DCA                     	;# 
   691  0DCB                     	;# 
   692  0DCC                     	;# 
   693  0DCC                     	;# 
   694  0DCD                     	;# 
   695  0DCD                     	;# 
   696  0DCE                     	;# 
   697  0DCF                     	;# 
   698  0DD0                     	;# 
   699  0E0F                     	;# 
   700  0E10                     	;# 
   701  0E11                     	;# 
   702  0E12                     	;# 
   703  0E13                     	;# 
   704  0E14                     	;# 
   705  0E15                     	;# 
   706  0E16                     	;# 
   707  0E17                     	;# 
   708  0E90                     	;# 
   709  0E91                     	;# 
   710  0E92                     	;# 
   711  0E94                     	;# 
   712  0E95                     	;# 
   713  0EA0                     	;# 
   714  0EA1                     	;# 
   715  0EA2                     	;# 
   716  0EA3                     	;# 
   717  0EA4                     	;# 
   718  0EA5                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008E                     	;# 
   761  0091                     	;# 
   762  0092                     	;# 
   763  0093                     	;# 
   764  0095                     	;# 
   765  0096                     	;# 
   766  0097                     	;# 
   767  0098                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  009F                     	;# 
   776  010C                     	;# 
   777  010E                     	;# 
   778  0111                     	;# 
   779  0112                     	;# 
   780  0113                     	;# 
   781  0114                     	;# 
   782  0115                     	;# 
   783  0116                     	;# 
   784  0117                     	;# 
   785  0118                     	;# 
   786  0119                     	;# 
   787  018C                     	;# 
   788  018E                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0194                     	;# 
   795  0195                     	;# 
   796  0196                     	;# 
   797  0197                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019C                     	;# 
   803  019D                     	;# 
   804  019E                     	;# 
   805  019F                     	;# 
   806  020C                     	;# 
   807  020E                     	;# 
   808  028C                     	;# 
   809  028E                     	;# 
   810  030C                     	;# 
   811  030E                     	;# 
   812  038C                     	;# 
   813  038E                     	;# 
   814  0391                     	;# 
   815  0392                     	;# 
   816  0393                     	;# 
   817  0397                     	;# 
   818  0398                     	;# 
   819  0399                     	;# 
   820  0691                     	;# 
   821  0692                     	;# 
   822  0693                     	;# 
   823  0694                     	;# 
   824  0695                     	;# 
   825  0D8E                     	;# 
   826  0D8F                     	;# 
   827  0D90                     	;# 
   828  0D91                     	;# 
   829  0D91                     	;# 
   830  0D92                     	;# 
   831  0D93                     	;# 
   832  0D93                     	;# 
   833  0D94                     	;# 
   834  0D95                     	;# 
   835  0D95                     	;# 
   836  0D96                     	;# 
   837  0D97                     	;# 
   838  0D97                     	;# 
   839  0D98                     	;# 
   840  0D99                     	;# 
   841  0D99                     	;# 
   842  0D9A                     	;# 
   843  0D9B                     	;# 
   844  0D9C                     	;# 
   845  0D9C                     	;# 
   846  0D9D                     	;# 
   847  0D9D                     	;# 
   848  0D9E                     	;# 
   849  0D9F                     	;# 
   850  0DA0                     	;# 
   851  0DA1                     	;# 
   852  0DA1                     	;# 
   853  0DA2                     	;# 
   854  0DA3                     	;# 
   855  0DA3                     	;# 
   856  0DA4                     	;# 
   857  0DA5                     	;# 
   858  0DA5                     	;# 
   859  0DA6                     	;# 
   860  0DA7                     	;# 
   861  0DA7                     	;# 
   862  0DA8                     	;# 
   863  0DA9                     	;# 
   864  0DA9                     	;# 
   865  0DAA                     	;# 
   866  0DAB                     	;# 
   867  0DAC                     	;# 
   868  0DAC                     	;# 
   869  0DAD                     	;# 
   870  0DAD                     	;# 
   871  0DAE                     	;# 
   872  0DAF                     	;# 
   873  0DB0                     	;# 
   874  0DB1                     	;# 
   875  0DB1                     	;# 
   876  0DB2                     	;# 
   877  0DB3                     	;# 
   878  0DB3                     	;# 
   879  0DB4                     	;# 
   880  0DB5                     	;# 
   881  0DB5                     	;# 
   882  0DB6                     	;# 
   883  0DB7                     	;# 
   884  0DB7                     	;# 
   885  0DB8                     	;# 
   886  0DB9                     	;# 
   887  0DB9                     	;# 
   888  0DBA                     	;# 
   889  0DBB                     	;# 
   890  0DBC                     	;# 
   891  0DBC                     	;# 
   892  0DBD                     	;# 
   893  0DBD                     	;# 
   894  0DBE                     	;# 
   895  0DBF                     	;# 
   896  0DC0                     	;# 
   897  0DC1                     	;# 
   898  0DC1                     	;# 
   899  0DC2                     	;# 
   900  0DC3                     	;# 
   901  0DC3                     	;# 
   902  0DC4                     	;# 
   903  0DC5                     	;# 
   904  0DC5                     	;# 
   905  0DC6                     	;# 
   906  0DC7                     	;# 
   907  0DC7                     	;# 
   908  0DC8                     	;# 
   909  0DC9                     	;# 
   910  0DC9                     	;# 
   911  0DCA                     	;# 
   912  0DCB                     	;# 
   913  0DCC                     	;# 
   914  0DCC                     	;# 
   915  0DCD                     	;# 
   916  0DCD                     	;# 
   917  0DCE                     	;# 
   918  0DCF                     	;# 
   919  0DD0                     	;# 
   920  0E0F                     	;# 
   921  0E10                     	;# 
   922  0E11                     	;# 
   923  0E12                     	;# 
   924  0E13                     	;# 
   925  0E14                     	;# 
   926  0E15                     	;# 
   927  0E16                     	;# 
   928  0E17                     	;# 
   929  0E90                     	;# 
   930  0E91                     	;# 
   931  0E92                     	;# 
   932  0E94                     	;# 
   933  0E95                     	;# 
   934  0EA0                     	;# 
   935  0EA1                     	;# 
   936  0EA2                     	;# 
   937  0EA3                     	;# 
   938  0EA4                     	;# 
   939  0EA5                     	;# 
   940  0FE4                     	;# 
   941  0FE5                     	;# 
   942  0FE6                     	;# 
   943  0FE7                     	;# 
   944  0FE8                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEA                     	;# 
   949  0FEB                     	;# 
   950  0FED                     	;# 
   951  0FEE                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000E                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0013                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  008C                     	;# 
   981  008E                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0093                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0098                     	;# 
   989  0099                     	;# 
   990  009A                     	;# 
   991  009B                     	;# 
   992  009B                     	;# 
   993  009C                     	;# 
   994  009D                     	;# 
   995  009E                     	;# 
   996  009F                     	;# 
   997  010C                     	;# 
   998  010E                     	;# 
   999  0111                     	;# 
  1000  0112                     	;# 
  1001  0113                     	;# 
  1002  0114                     	;# 
  1003  0115                     	;# 
  1004  0116                     	;# 
  1005  0117                     	;# 
  1006  0118                     	;# 
  1007  0119                     	;# 
  1008  018C                     	;# 
  1009  018E                     	;# 
  1010  0191                     	;# 
  1011  0191                     	;# 
  1012  0192                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0194                     	;# 
  1016  0195                     	;# 
  1017  0196                     	;# 
  1018  0197                     	;# 
  1019  0199                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020E                     	;# 
  1029  028C                     	;# 
  1030  028E                     	;# 
  1031  030C                     	;# 
  1032  030E                     	;# 
  1033  038C                     	;# 
  1034  038E                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0397                     	;# 
  1039  0398                     	;# 
  1040  0399                     	;# 
  1041  0691                     	;# 
  1042  0692                     	;# 
  1043  0693                     	;# 
  1044  0694                     	;# 
  1045  0695                     	;# 
  1046  0D8E                     	;# 
  1047  0D8F                     	;# 
  1048  0D90                     	;# 
  1049  0D91                     	;# 
  1050  0D91                     	;# 
  1051  0D92                     	;# 
  1052  0D93                     	;# 
  1053  0D93                     	;# 
  1054  0D94                     	;# 
  1055  0D95                     	;# 
  1056  0D95                     	;# 
  1057  0D96                     	;# 
  1058  0D97                     	;# 
  1059  0D97                     	;# 
  1060  0D98                     	;# 
  1061  0D99                     	;# 
  1062  0D99                     	;# 
  1063  0D9A                     	;# 
  1064  0D9B                     	;# 
  1065  0D9C                     	;# 
  1066  0D9C                     	;# 
  1067  0D9D                     	;# 
  1068  0D9D                     	;# 
  1069  0D9E                     	;# 
  1070  0D9F                     	;# 
  1071  0DA0                     	;# 
  1072  0DA1                     	;# 
  1073  0DA1                     	;# 
  1074  0DA2                     	;# 
  1075  0DA3                     	;# 
  1076  0DA3                     	;# 
  1077  0DA4                     	;# 
  1078  0DA5                     	;# 
  1079  0DA5                     	;# 
  1080  0DA6                     	;# 
  1081  0DA7                     	;# 
  1082  0DA7                     	;# 
  1083  0DA8                     	;# 
  1084  0DA9                     	;# 
  1085  0DA9                     	;# 
  1086  0DAA                     	;# 
  1087  0DAB                     	;# 
  1088  0DAC                     	;# 
  1089  0DAC                     	;# 
  1090  0DAD                     	;# 
  1091  0DAD                     	;# 
  1092  0DAE                     	;# 
  1093  0DAF                     	;# 
  1094  0DB0                     	;# 
  1095  0DB1                     	;# 
  1096  0DB1                     	;# 
  1097  0DB2                     	;# 
  1098  0DB3                     	;# 
  1099  0DB3                     	;# 
  1100  0DB4                     	;# 
  1101  0DB5                     	;# 
  1102  0DB5                     	;# 
  1103  0DB6                     	;# 
  1104  0DB7                     	;# 
  1105  0DB7                     	;# 
  1106  0DB8                     	;# 
  1107  0DB9                     	;# 
  1108  0DB9                     	;# 
  1109  0DBA                     	;# 
  1110  0DBB                     	;# 
  1111  0DBC                     	;# 
  1112  0DBC                     	;# 
  1113  0DBD                     	;# 
  1114  0DBD                     	;# 
  1115  0DBE                     	;# 
  1116  0DBF                     	;# 
  1117  0DC0                     	;# 
  1118  0DC1                     	;# 
  1119  0DC1                     	;# 
  1120  0DC2                     	;# 
  1121  0DC3                     	;# 
  1122  0DC3                     	;# 
  1123  0DC4                     	;# 
  1124  0DC5                     	;# 
  1125  0DC5                     	;# 
  1126  0DC6                     	;# 
  1127  0DC7                     	;# 
  1128  0DC7                     	;# 
  1129  0DC8                     	;# 
  1130  0DC9                     	;# 
  1131  0DC9                     	;# 
  1132  0DCA                     	;# 
  1133  0DCB                     	;# 
  1134  0DCC                     	;# 
  1135  0DCC                     	;# 
  1136  0DCD                     	;# 
  1137  0DCD                     	;# 
  1138  0DCE                     	;# 
  1139  0DCF                     	;# 
  1140  0DD0                     	;# 
  1141  0E0F                     	;# 
  1142  0E10                     	;# 
  1143  0E11                     	;# 
  1144  0E12                     	;# 
  1145  0E13                     	;# 
  1146  0E14                     	;# 
  1147  0E15                     	;# 
  1148  0E16                     	;# 
  1149  0E17                     	;# 
  1150  0E90                     	;# 
  1151  0E91                     	;# 
  1152  0E92                     	;# 
  1153  0E94                     	;# 
  1154  0E95                     	;# 
  1155  0EA0                     	;# 
  1156  0EA1                     	;# 
  1157  0EA2                     	;# 
  1158  0EA3                     	;# 
  1159  0EA4                     	;# 
  1160  0EA5                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE8                     	;# 
  1167  0FE9                     	;# 
  1168  0FEA                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEE                     	;# 
  1174  0FEF                     	;# 
  1175  0000                     	;# 
  1176  0001                     	;# 
  1177  0002                     	;# 
  1178  0003                     	;# 
  1179  0004                     	;# 
  1180  0005                     	;# 
  1181  0006                     	;# 
  1182  0007                     	;# 
  1183  0008                     	;# 
  1184  0009                     	;# 
  1185  000A                     	;# 
  1186  000B                     	;# 
  1187  000C                     	;# 
  1188  000E                     	;# 
  1189  0011                     	;# 
  1190  0012                     	;# 
  1191  0013                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0016                     	;# 
  1195  0017                     	;# 
  1196  0018                     	;# 
  1197  0019                     	;# 
  1198  001A                     	;# 
  1199  001B                     	;# 
  1200  001C                     	;# 
  1201  008C                     	;# 
  1202  008E                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0093                     	;# 
  1206  0095                     	;# 
  1207  0096                     	;# 
  1208  0097                     	;# 
  1209  0098                     	;# 
  1210  0099                     	;# 
  1211  009A                     	;# 
  1212  009B                     	;# 
  1213  009B                     	;# 
  1214  009C                     	;# 
  1215  009D                     	;# 
  1216  009E                     	;# 
  1217  009F                     	;# 
  1218  010C                     	;# 
  1219  010E                     	;# 
  1220  0111                     	;# 
  1221  0112                     	;# 
  1222  0113                     	;# 
  1223  0114                     	;# 
  1224  0115                     	;# 
  1225  0116                     	;# 
  1226  0117                     	;# 
  1227  0118                     	;# 
  1228  0119                     	;# 
  1229  018C                     	;# 
  1230  018E                     	;# 
  1231  0191                     	;# 
  1232  0191                     	;# 
  1233  0192                     	;# 
  1234  0193                     	;# 
  1235  0193                     	;# 
  1236  0194                     	;# 
  1237  0195                     	;# 
  1238  0196                     	;# 
  1239  0197                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020C                     	;# 
  1249  020E                     	;# 
  1250  028C                     	;# 
  1251  028E                     	;# 
  1252  030C                     	;# 
  1253  030E                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  0691                     	;# 
  1263  0692                     	;# 
  1264  0693                     	;# 
  1265  0694                     	;# 
  1266  0695                     	;# 
  1267  0D8E                     	;# 
  1268  0D8F                     	;# 
  1269  0D90                     	;# 
  1270  0D91                     	;# 
  1271  0D91                     	;# 
  1272  0D92                     	;# 
  1273  0D93                     	;# 
  1274  0D93                     	;# 
  1275  0D94                     	;# 
  1276  0D95                     	;# 
  1277  0D95                     	;# 
  1278  0D96                     	;# 
  1279  0D97                     	;# 
  1280  0D97                     	;# 
  1281  0D98                     	;# 
  1282  0D99                     	;# 
  1283  0D99                     	;# 
  1284  0D9A                     	;# 
  1285  0D9B                     	;# 
  1286  0D9C                     	;# 
  1287  0D9C                     	;# 
  1288  0D9D                     	;# 
  1289  0D9D                     	;# 
  1290  0D9E                     	;# 
  1291  0D9F                     	;# 
  1292  0DA0                     	;# 
  1293  0DA1                     	;# 
  1294  0DA1                     	;# 
  1295  0DA2                     	;# 
  1296  0DA3                     	;# 
  1297  0DA3                     	;# 
  1298  0DA4                     	;# 
  1299  0DA5                     	;# 
  1300  0DA5                     	;# 
  1301  0DA6                     	;# 
  1302  0DA7                     	;# 
  1303  0DA7                     	;# 
  1304  0DA8                     	;# 
  1305  0DA9                     	;# 
  1306  0DA9                     	;# 
  1307  0DAA                     	;# 
  1308  0DAB                     	;# 
  1309  0DAC                     	;# 
  1310  0DAC                     	;# 
  1311  0DAD                     	;# 
  1312  0DAD                     	;# 
  1313  0DAE                     	;# 
  1314  0DAF                     	;# 
  1315  0DB0                     	;# 
  1316  0DB1                     	;# 
  1317  0DB1                     	;# 
  1318  0DB2                     	;# 
  1319  0DB3                     	;# 
  1320  0DB3                     	;# 
  1321  0DB4                     	;# 
  1322  0DB5                     	;# 
  1323  0DB5                     	;# 
  1324  0DB6                     	;# 
  1325  0DB7                     	;# 
  1326  0DB7                     	;# 
  1327  0DB8                     	;# 
  1328  0DB9                     	;# 
  1329  0DB9                     	;# 
  1330  0DBA                     	;# 
  1331  0DBB                     	;# 
  1332  0DBC                     	;# 
  1333  0DBC                     	;# 
  1334  0DBD                     	;# 
  1335  0DBD                     	;# 
  1336  0DBE                     	;# 
  1337  0DBF                     	;# 
  1338  0DC0                     	;# 
  1339  0DC1                     	;# 
  1340  0DC1                     	;# 
  1341  0DC2                     	;# 
  1342  0DC3                     	;# 
  1343  0DC3                     	;# 
  1344  0DC4                     	;# 
  1345  0DC5                     	;# 
  1346  0DC5                     	;# 
  1347  0DC6                     	;# 
  1348  0DC7                     	;# 
  1349  0DC7                     	;# 
  1350  0DC8                     	;# 
  1351  0DC9                     	;# 
  1352  0DC9                     	;# 
  1353  0DCA                     	;# 
  1354  0DCB                     	;# 
  1355  0DCC                     	;# 
  1356  0DCC                     	;# 
  1357  0DCD                     	;# 
  1358  0DCD                     	;# 
  1359  0DCE                     	;# 
  1360  0DCF                     	;# 
  1361  0DD0                     	;# 
  1362  0E0F                     	;# 
  1363  0E10                     	;# 
  1364  0E11                     	;# 
  1365  0E12                     	;# 
  1366  0E13                     	;# 
  1367  0E14                     	;# 
  1368  0E15                     	;# 
  1369  0E16                     	;# 
  1370  0E17                     	;# 
  1371  0E90                     	;# 
  1372  0E91                     	;# 
  1373  0E92                     	;# 
  1374  0E94                     	;# 
  1375  0E95                     	;# 
  1376  0EA0                     	;# 
  1377  0EA1                     	;# 
  1378  0EA2                     	;# 
  1379  0EA3                     	;# 
  1380  0EA4                     	;# 
  1381  0EA5                     	;# 
  1382  0FE4                     	;# 
  1383  0FE5                     	;# 
  1384  0FE6                     	;# 
  1385  0FE7                     	;# 
  1386  0FE8                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEA                     	;# 
  1391  0FEB                     	;# 
  1392  0FED                     	;# 
  1393  0FEE                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000E                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0013                     	;# 
  1413  0015                     	;# 
  1414  0016                     	;# 
  1415  0016                     	;# 
  1416  0017                     	;# 
  1417  0018                     	;# 
  1418  0019                     	;# 
  1419  001A                     	;# 
  1420  001B                     	;# 
  1421  001C                     	;# 
  1422  008C                     	;# 
  1423  008E                     	;# 
  1424  0091                     	;# 
  1425  0092                     	;# 
  1426  0093                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0098                     	;# 
  1431  0099                     	;# 
  1432  009A                     	;# 
  1433  009B                     	;# 
  1434  009B                     	;# 
  1435  009C                     	;# 
  1436  009D                     	;# 
  1437  009E                     	;# 
  1438  009F                     	;# 
  1439  010C                     	;# 
  1440  010E                     	;# 
  1441  0111                     	;# 
  1442  0112                     	;# 
  1443  0113                     	;# 
  1444  0114                     	;# 
  1445  0115                     	;# 
  1446  0116                     	;# 
  1447  0117                     	;# 
  1448  0118                     	;# 
  1449  0119                     	;# 
  1450  018C                     	;# 
  1451  018E                     	;# 
  1452  0191                     	;# 
  1453  0191                     	;# 
  1454  0192                     	;# 
  1455  0193                     	;# 
  1456  0193                     	;# 
  1457  0194                     	;# 
  1458  0195                     	;# 
  1459  0196                     	;# 
  1460  0197                     	;# 
  1461  0199                     	;# 
  1462  019A                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019D                     	;# 
  1467  019E                     	;# 
  1468  019F                     	;# 
  1469  020C                     	;# 
  1470  020E                     	;# 
  1471  028C                     	;# 
  1472  028E                     	;# 
  1473  030C                     	;# 
  1474  030E                     	;# 
  1475  038C                     	;# 
  1476  038E                     	;# 
  1477  0391                     	;# 
  1478  0392                     	;# 
  1479  0393                     	;# 
  1480  0397                     	;# 
  1481  0398                     	;# 
  1482  0399                     	;# 
  1483  0691                     	;# 
  1484  0692                     	;# 
  1485  0693                     	;# 
  1486  0694                     	;# 
  1487  0695                     	;# 
  1488  0D8E                     	;# 
  1489  0D8F                     	;# 
  1490  0D90                     	;# 
  1491  0D91                     	;# 
  1492  0D91                     	;# 
  1493  0D92                     	;# 
  1494  0D93                     	;# 
  1495  0D93                     	;# 
  1496  0D94                     	;# 
  1497  0D95                     	;# 
  1498  0D95                     	;# 
  1499  0D96                     	;# 
  1500  0D97                     	;# 
  1501  0D97                     	;# 
  1502  0D98                     	;# 
  1503  0D99                     	;# 
  1504  0D99                     	;# 
  1505  0D9A                     	;# 
  1506  0D9B                     	;# 
  1507  0D9C                     	;# 
  1508  0D9C                     	;# 
  1509  0D9D                     	;# 
  1510  0D9D                     	;# 
  1511  0D9E                     	;# 
  1512  0D9F                     	;# 
  1513  0DA0                     	;# 
  1514  0DA1                     	;# 
  1515  0DA1                     	;# 
  1516  0DA2                     	;# 
  1517  0DA3                     	;# 
  1518  0DA3                     	;# 
  1519  0DA4                     	;# 
  1520  0DA5                     	;# 
  1521  0DA5                     	;# 
  1522  0DA6                     	;# 
  1523  0DA7                     	;# 
  1524  0DA7                     	;# 
  1525  0DA8                     	;# 
  1526  0DA9                     	;# 
  1527  0DA9                     	;# 
  1528  0DAA                     	;# 
  1529  0DAB                     	;# 
  1530  0DAC                     	;# 
  1531  0DAC                     	;# 
  1532  0DAD                     	;# 
  1533  0DAD                     	;# 
  1534  0DAE                     	;# 
  1535  0DAF                     	;# 
  1536  0DB0                     	;# 
  1537  0DB1                     	;# 
  1538  0DB1                     	;# 
  1539  0DB2                     	;# 
  1540  0DB3                     	;# 
  1541  0DB3                     	;# 
  1542  0DB4                     	;# 
  1543  0DB5                     	;# 
  1544  0DB5                     	;# 
  1545  0DB6                     	;# 
  1546  0DB7                     	;# 
  1547  0DB7                     	;# 
  1548  0DB8                     	;# 
  1549  0DB9                     	;# 
  1550  0DB9                     	;# 
  1551  0DBA                     	;# 
  1552  0DBB                     	;# 
  1553  0DBC                     	;# 
  1554  0DBC                     	;# 
  1555  0DBD                     	;# 
  1556  0DBD                     	;# 
  1557  0DBE                     	;# 
  1558  0DBF                     	;# 
  1559  0DC0                     	;# 
  1560  0DC1                     	;# 
  1561  0DC1                     	;# 
  1562  0DC2                     	;# 
  1563  0DC3                     	;# 
  1564  0DC3                     	;# 
  1565  0DC4                     	;# 
  1566  0DC5                     	;# 
  1567  0DC5                     	;# 
  1568  0DC6                     	;# 
  1569  0DC7                     	;# 
  1570  0DC7                     	;# 
  1571  0DC8                     	;# 
  1572  0DC9                     	;# 
  1573  0DC9                     	;# 
  1574  0DCA                     	;# 
  1575  0DCB                     	;# 
  1576  0DCC                     	;# 
  1577  0DCC                     	;# 
  1578  0DCD                     	;# 
  1579  0DCD                     	;# 
  1580  0DCE                     	;# 
  1581  0DCF                     	;# 
  1582  0DD0                     	;# 
  1583  0E0F                     	;# 
  1584  0E10                     	;# 
  1585  0E11                     	;# 
  1586  0E12                     	;# 
  1587  0E13                     	;# 
  1588  0E14                     	;# 
  1589  0E15                     	;# 
  1590  0E16                     	;# 
  1591  0E17                     	;# 
  1592  0E90                     	;# 
  1593  0E91                     	;# 
  1594  0E92                     	;# 
  1595  0E94                     	;# 
  1596  0E95                     	;# 
  1597  0EA0                     	;# 
  1598  0EA1                     	;# 
  1599  0EA2                     	;# 
  1600  0EA3                     	;# 
  1601  0EA4                     	;# 
  1602  0EA5                     	;# 
  1603  0FE4                     	;# 
  1604  0FE5                     	;# 
  1605  0FE6                     	;# 
  1606  0FE7                     	;# 
  1607  0FE8                     	;# 
  1608  0FE8                     	;# 
  1609  0FE9                     	;# 
  1610  0FEA                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEE                     	;# 
  1616  0FEF                     	;# 
  1617  0000                     	;# 
  1618  0001                     	;# 
  1619  0002                     	;# 
  1620  0003                     	;# 
  1621  0004                     	;# 
  1622  0005                     	;# 
  1623  0006                     	;# 
  1624  0007                     	;# 
  1625  0008                     	;# 
  1626  0009                     	;# 
  1627  000A                     	;# 
  1628  000B                     	;# 
  1629  000C                     	;# 
  1630  000E                     	;# 
  1631  0011                     	;# 
  1632  0012                     	;# 
  1633  0013                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008E                     	;# 
  1645  0091                     	;# 
  1646  0092                     	;# 
  1647  0093                     	;# 
  1648  0095                     	;# 
  1649  0096                     	;# 
  1650  0097                     	;# 
  1651  0098                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  009F                     	;# 
  1660  010C                     	;# 
  1661  010E                     	;# 
  1662  0111                     	;# 
  1663  0112                     	;# 
  1664  0113                     	;# 
  1665  0114                     	;# 
  1666  0115                     	;# 
  1667  0116                     	;# 
  1668  0117                     	;# 
  1669  0118                     	;# 
  1670  0119                     	;# 
  1671  018C                     	;# 
  1672  018E                     	;# 
  1673  0191                     	;# 
  1674  0191                     	;# 
  1675  0192                     	;# 
  1676  0193                     	;# 
  1677  0193                     	;# 
  1678  0194                     	;# 
  1679  0195                     	;# 
  1680  0196                     	;# 
  1681  0197                     	;# 
  1682  0199                     	;# 
  1683  019A                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019C                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019F                     	;# 
  1690  020C                     	;# 
  1691  020E                     	;# 
  1692  028C                     	;# 
  1693  028E                     	;# 
  1694  030C                     	;# 
  1695  030E                     	;# 
  1696  038C                     	;# 
  1697  038E                     	;# 
  1698  0391                     	;# 
  1699  0392                     	;# 
  1700  0393                     	;# 
  1701  0397                     	;# 
  1702  0398                     	;# 
  1703  0399                     	;# 
  1704  0691                     	;# 
  1705  0692                     	;# 
  1706  0693                     	;# 
  1707  0694                     	;# 
  1708  0695                     	;# 
  1709  0D8E                     	;# 
  1710  0D8F                     	;# 
  1711  0D90                     	;# 
  1712  0D91                     	;# 
  1713  0D91                     	;# 
  1714  0D92                     	;# 
  1715  0D93                     	;# 
  1716  0D93                     	;# 
  1717  0D94                     	;# 
  1718  0D95                     	;# 
  1719  0D95                     	;# 
  1720  0D96                     	;# 
  1721  0D97                     	;# 
  1722  0D97                     	;# 
  1723  0D98                     	;# 
  1724  0D99                     	;# 
  1725  0D99                     	;# 
  1726  0D9A                     	;# 
  1727  0D9B                     	;# 
  1728  0D9C                     	;# 
  1729  0D9C                     	;# 
  1730  0D9D                     	;# 
  1731  0D9D                     	;# 
  1732  0D9E                     	;# 
  1733  0D9F                     	;# 
  1734  0DA0                     	;# 
  1735  0DA1                     	;# 
  1736  0DA1                     	;# 
  1737  0DA2                     	;# 
  1738  0DA3                     	;# 
  1739  0DA3                     	;# 
  1740  0DA4                     	;# 
  1741  0DA5                     	;# 
  1742  0DA5                     	;# 
  1743  0DA6                     	;# 
  1744  0DA7                     	;# 
  1745  0DA7                     	;# 
  1746  0DA8                     	;# 
  1747  0DA9                     	;# 
  1748  0DA9                     	;# 
  1749  0DAA                     	;# 
  1750  0DAB                     	;# 
  1751  0DAC                     	;# 
  1752  0DAC                     	;# 
  1753  0DAD                     	;# 
  1754  0DAD                     	;# 
  1755  0DAE                     	;# 
  1756  0DAF                     	;# 
  1757  0DB0                     	;# 
  1758  0DB1                     	;# 
  1759  0DB1                     	;# 
  1760  0DB2                     	;# 
  1761  0DB3                     	;# 
  1762  0DB3                     	;# 
  1763  0DB4                     	;# 
  1764  0DB5                     	;# 
  1765  0DB5                     	;# 
  1766  0DB6                     	;# 
  1767  0DB7                     	;# 
  1768  0DB7                     	;# 
  1769  0DB8                     	;# 
  1770  0DB9                     	;# 
  1771  0DB9                     	;# 
  1772  0DBA                     	;# 
  1773  0DBB                     	;# 
  1774  0DBC                     	;# 
  1775  0DBC                     	;# 
  1776  0DBD                     	;# 
  1777  0DBD                     	;# 
  1778  0DBE                     	;# 
  1779  0DBF                     	;# 
  1780  0DC0                     	;# 
  1781  0DC1                     	;# 
  1782  0DC1                     	;# 
  1783  0DC2                     	;# 
  1784  0DC3                     	;# 
  1785  0DC3                     	;# 
  1786  0DC4                     	;# 
  1787  0DC5                     	;# 
  1788  0DC5                     	;# 
  1789  0DC6                     	;# 
  1790  0DC7                     	;# 
  1791  0DC7                     	;# 
  1792  0DC8                     	;# 
  1793  0DC9                     	;# 
  1794  0DC9                     	;# 
  1795  0DCA                     	;# 
  1796  0DCB                     	;# 
  1797  0DCC                     	;# 
  1798  0DCC                     	;# 
  1799  0DCD                     	;# 
  1800  0DCD                     	;# 
  1801  0DCE                     	;# 
  1802  0DCF                     	;# 
  1803  0DD0                     	;# 
  1804  0E0F                     	;# 
  1805  0E10                     	;# 
  1806  0E11                     	;# 
  1807  0E12                     	;# 
  1808  0E13                     	;# 
  1809  0E14                     	;# 
  1810  0E15                     	;# 
  1811  0E16                     	;# 
  1812  0E17                     	;# 
  1813  0E90                     	;# 
  1814  0E91                     	;# 
  1815  0E92                     	;# 
  1816  0E94                     	;# 
  1817  0E95                     	;# 
  1818  0EA0                     	;# 
  1819  0EA1                     	;# 
  1820  0EA2                     	;# 
  1821  0EA3                     	;# 
  1822  0EA4                     	;# 
  1823  0EA5                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEA                     	;# 
  1833  0FEB                     	;# 
  1834  0FED                     	;# 
  1835  0FEE                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;_PD
  1838                           
  1839                           	psect	idataCOMMON
  1840  0000                     __pidataCOMMON:	
  1841                           
  1842                           	psect	idataBANK1
  1843  0000                     __pidataBANK1:	
  1844                           
  1845                           	psect	idataBANK2
  1846  0000                     __pidataBANK2:	
  1847                           
  1848                           	psect	stringtext
  1849  072D                     __pstringtext:	
  1850  072D                     _PWM:	
  1851  072D  3400               	retlw	0
  1852  072E  3400               	retlw	0
  1853  072F  341E               	retlw	30
  1854  0730  3400               	retlw	0
  1855  0731  341E               	retlw	30
  1856  0732  3400               	retlw	0
  1857  0733  341F               	retlw	31
  1858  0734  3400               	retlw	0
  1859  0735  3420               	retlw	32
  1860  0736  3400               	retlw	0
  1861  0737  3421               	retlw	33
  1862  0738  3400               	retlw	0
  1863  0739  3422               	retlw	34
  1864  073A  3400               	retlw	0
  1865  073B  3423               	retlw	35
  1866  073C  3400               	retlw	0
  1867  073D  3423               	retlw	35
  1868  073E  3400               	retlw	0
  1869  073F  3424               	retlw	36
  1870  0740  3400               	retlw	0
  1871  0741  3425               	retlw	37
  1872  0742  3400               	retlw	0
  1873  0743  3426               	retlw	38
  1874  0744  3400               	retlw	0
  1875  0745  3427               	retlw	39
  1876  0746  3400               	retlw	0
  1877  0747  3428               	retlw	40
  1878  0748  3400               	retlw	0
  1879  0749  3429               	retlw	41
  1880  074A  3400               	retlw	0
  1881  074B  342B               	retlw	43
  1882  074C  3400               	retlw	0
  1883  074D  342C               	retlw	44
  1884  074E  3400               	retlw	0
  1885  074F  342D               	retlw	45
  1886  0750  3400               	retlw	0
  1887  0751  342E               	retlw	46
  1888  0752  3400               	retlw	0
  1889  0753  342F               	retlw	47
  1890  0754  3400               	retlw	0
  1891  0755  3431               	retlw	49
  1892  0756  3400               	retlw	0
  1893  0757  3432               	retlw	50
  1894  0758  3400               	retlw	0
  1895  0759  3433               	retlw	51
  1896  075A  3400               	retlw	0
  1897  075B  3434               	retlw	52
  1898  075C  3400               	retlw	0
  1899  075D  3436               	retlw	54
  1900  075E  3400               	retlw	0
  1901  075F  3437               	retlw	55
  1902  0760  3400               	retlw	0
  1903  0761  3439               	retlw	57
  1904  0762  3400               	retlw	0
  1905  0763  343A               	retlw	58
  1906  0764  3400               	retlw	0
  1907  0765  343C               	retlw	60
  1908  0766  3400               	retlw	0
  1909  0767  343D               	retlw	61
  1910  0768  3400               	retlw	0
  1911  0769  343F               	retlw	63
  1912  076A  3400               	retlw	0
  1913  076B  3441               	retlw	65
  1914  076C  3400               	retlw	0
  1915  076D  3442               	retlw	66
  1916  076E  3400               	retlw	0
  1917  076F  3444               	retlw	68
  1918  0770  3400               	retlw	0
  1919  0771  3446               	retlw	70
  1920  0772  3400               	retlw	0
  1921  0773  3448               	retlw	72
  1922  0774  3400               	retlw	0
  1923  0775  344A               	retlw	74
  1924  0776  3400               	retlw	0
  1925  0777  344C               	retlw	76
  1926  0778  3400               	retlw	0
  1927  0779  344E               	retlw	78
  1928  077A  3400               	retlw	0
  1929  077B  3450               	retlw	80
  1930  077C  3400               	retlw	0
  1931  077D  3452               	retlw	82
  1932  077E  3400               	retlw	0
  1933  077F  3454               	retlw	84
  1934  0780  3400               	retlw	0
  1935  0781  3456               	retlw	86
  1936  0782  3400               	retlw	0
  1937  0783  3458               	retlw	88
  1938  0784  3400               	retlw	0
  1939  0785  345B               	retlw	91
  1940  0786  3400               	retlw	0
  1941  0787  345D               	retlw	93
  1942  0788  3400               	retlw	0
  1943  0789  345F               	retlw	95
  1944  078A  3400               	retlw	0
  1945  078B  3462               	retlw	98
  1946  078C  3400               	retlw	0
  1947  078D  3465               	retlw	101
  1948  078E  3400               	retlw	0
  1949  078F  3467               	retlw	103
  1950  0790  3400               	retlw	0
  1951  0791  346A               	retlw	106
  1952  0792  3400               	retlw	0
  1953  0793  346D               	retlw	109
  1954  0794  3400               	retlw	0
  1955  0795  3470               	retlw	112
  1956  0796  3400               	retlw	0
  1957  0797  3472               	retlw	114
  1958  0798  3400               	retlw	0
  1959  0799  3475               	retlw	117
  1960  079A  3400               	retlw	0
  1961  079B  3479               	retlw	121
  1962  079C  3400               	retlw	0
  1963  079D  347C               	retlw	124
  1964  079E  3400               	retlw	0
  1965  079F  347F               	retlw	127
  1966  07A0  3400               	retlw	0
  1967  07A1  3482               	retlw	130
  1968  07A2  3400               	retlw	0
  1969  07A3  3486               	retlw	134
  1970  07A4  3400               	retlw	0
  1971  07A5  3489               	retlw	137
  1972  07A6  3400               	retlw	0
  1973  07A7  348D               	retlw	141
  1974  07A8  3400               	retlw	0
  1975  07A9  3491               	retlw	145
  1976  07AA  3400               	retlw	0
  1977  07AB  3494               	retlw	148
  1978  07AC  3400               	retlw	0
  1979  07AD  3498               	retlw	152
  1980  07AE  3400               	retlw	0
  1981  07AF  349C               	retlw	156
  1982  07B0  3400               	retlw	0
  1983  07B1  34A0               	retlw	160
  1984  07B2  3400               	retlw	0
  1985  07B3  34A5               	retlw	165
  1986  07B4  3400               	retlw	0
  1987  07B5  34A9               	retlw	169
  1988  07B6  3400               	retlw	0
  1989  07B7  34AD               	retlw	173
  1990  07B8  3400               	retlw	0
  1991  07B9  34B2               	retlw	178
  1992  07BA  3400               	retlw	0
  1993  07BB  34B6               	retlw	182
  1994  07BC  3400               	retlw	0
  1995  07BD  34BB               	retlw	187
  1996  07BE  3400               	retlw	0
  1997  07BF  34C0               	retlw	192
  1998  07C0  3400               	retlw	0
  1999  07C1  34C5               	retlw	197
  2000  07C2  3400               	retlw	0
  2001  07C3  34CA               	retlw	202
  2002  07C4  3400               	retlw	0
  2003  07C5  34D0               	retlw	208
  2004  07C6  3400               	retlw	0
  2005  07C7  34D5               	retlw	213
  2006  07C8  3400               	retlw	0
  2007  07C9  34DB               	retlw	219
  2008  07CA  3400               	retlw	0
  2009  07CB  34E0               	retlw	224
  2010  07CC  3400               	retlw	0
  2011  07CD  34E6               	retlw	230
  2012  07CE  3400               	retlw	0
  2013  07CF  34EC               	retlw	236
  2014  07D0  3400               	retlw	0
  2015  07D1  34F3               	retlw	243
  2016  07D2  3400               	retlw	0
  2017  07D3  34F9               	retlw	249
  2018  07D4  3400               	retlw	0
  2019  07D5  3400               	retlw	0
  2020  07D6  3401               	retlw	1
  2021  07D7  3406               	retlw	6
  2022  07D8  3401               	retlw	1
  2023  07D9  340D               	retlw	13
  2024  07DA  3401               	retlw	1
  2025  07DB  3414               	retlw	20
  2026  07DC  3401               	retlw	1
  2027  07DD  341B               	retlw	27
  2028  07DE  3401               	retlw	1
  2029  07DF  3423               	retlw	35
  2030  07E0  3401               	retlw	1
  2031  07E1  342A               	retlw	42
  2032  07E2  3401               	retlw	1
  2033  07E3  3432               	retlw	50
  2034  07E4  3401               	retlw	1
  2035  07E5  343A               	retlw	58
  2036  07E6  3401               	retlw	1
  2037  07E7  3443               	retlw	67
  2038  07E8  3401               	retlw	1
  2039  07E9  344B               	retlw	75
  2040  07EA  3401               	retlw	1
  2041  07EB  3454               	retlw	84
  2042  07EC  3401               	retlw	1
  2043  07ED  345D               	retlw	93
  2044  07EE  3401               	retlw	1
  2045  07EF  3466               	retlw	102
  2046  07F0  3401               	retlw	1
  2047  07F1  346F               	retlw	111
  2048  07F2  3401               	retlw	1
  2049  07F3  3479               	retlw	121
  2050  07F4  3401               	retlw	1
  2051  07F5  3483               	retlw	131
  2052  07F6  3401               	retlw	1
  2053  07F7  348D               	retlw	141
  2054  07F8  3401               	retlw	1
  2055  07F9  3497               	retlw	151
  2056  07FA  3401               	retlw	1
  2057  07FB  34A2               	retlw	162
  2058  07FC  3401               	retlw	1
  2059  07FD  34AD               	retlw	173
  2060  07FE  3401               	retlw	1
  2061  07FF  34B8               	retlw	184
  2062  0800  3401               	retlw	1
  2063  0801  34C3               	retlw	195
  2064  0802  3401               	retlw	1
  2065  0803  34CF               	retlw	207
  2066  0804  3401               	retlw	1
  2067  0805  34DB               	retlw	219
  2068  0806  3401               	retlw	1
  2069  0807  34E8               	retlw	232
  2070  0808  3401               	retlw	1
  2071  0809  34F5               	retlw	245
  2072  080A  3401               	retlw	1
  2073  080B  3402               	retlw	2
  2074  080C  3402               	retlw	2
  2075  080D  340F               	retlw	15
  2076  080E  3402               	retlw	2
  2077  080F  341D               	retlw	29
  2078  0810  3402               	retlw	2
  2079  0811  342B               	retlw	43
  2080  0812  3402               	retlw	2
  2081  0813  343A               	retlw	58
  2082  0814  3402               	retlw	2
  2083  0815  3449               	retlw	73
  2084  0816  3402               	retlw	2
  2085  0817  3458               	retlw	88
  2086  0818  3402               	retlw	2
  2087  0819  3468               	retlw	104
  2088  081A  3402               	retlw	2
  2089  081B  3478               	retlw	120
  2090  081C  3402               	retlw	2
  2091  081D  3488               	retlw	136
  2092  081E  3402               	retlw	2
  2093  081F  3499               	retlw	153
  2094  0820  3402               	retlw	2
  2095  0821  34AB               	retlw	171
  2096  0822  3402               	retlw	2
  2097  0823  34BD               	retlw	189
  2098  0824  3402               	retlw	2
  2099  0825  34CF               	retlw	207
  2100  0826  3402               	retlw	2
  2101  0827  34E2               	retlw	226
  2102  0828  3402               	retlw	2
  2103  0829  34F5               	retlw	245
  2104  082A  3402               	retlw	2
  2105  082B  3409               	retlw	9
  2106  082C  3403               	retlw	3
  2107  082D  341D               	retlw	29
  2108  082E  3403               	retlw	3
  2109  082F  3432               	retlw	50
  2110  0830  3403               	retlw	3
  2111  0831  3448               	retlw	72
  2112  0832  3403               	retlw	3
  2113  0833  345D               	retlw	93
  2114  0834  3403               	retlw	3
  2115  0835  3474               	retlw	116
  2116  0836  3403               	retlw	3
  2117  0837  348B               	retlw	139
  2118  0838  3403               	retlw	3
  2119  0839  34A3               	retlw	163
  2120  083A  3403               	retlw	3
  2121  083B  34BB               	retlw	187
  2122  083C  3403               	retlw	3
  2123  083D  34D4               	retlw	212
  2124  083E  3403               	retlw	3
  2125  083F  34EE               	retlw	238
  2126  0840  3403               	retlw	3
  2127  0841  3408               	retlw	8
  2128  0842  3404               	retlw	4
  2129  0843  3423               	retlw	35
  2130  0844  3404               	retlw	4
  2131  0845  343F               	retlw	63
  2132  0846  3404               	retlw	4
  2133  0847  345C               	retlw	92
  2134  0848  3404               	retlw	4
  2135  0849  3479               	retlw	121
  2136  084A  3404               	retlw	4
  2137  084B  3497               	retlw	151
  2138  084C  3404               	retlw	4
  2139  084D  34B5               	retlw	181
  2140  084E  3404               	retlw	4
  2141  084F  34D5               	retlw	213
  2142  0850  3404               	retlw	4
  2143  0851  34F5               	retlw	245
  2144  0852  3404               	retlw	4
  2145  0853  3417               	retlw	23
  2146  0854  3405               	retlw	5
  2147  0855  3439               	retlw	57
  2148  0856  3405               	retlw	5
  2149  0857  345C               	retlw	92
  2150  0858  3405               	retlw	5
  2151  0859  3480               	retlw	128
  2152  085A  3405               	retlw	5
  2153  085B  34A5               	retlw	165
  2154  085C  3405               	retlw	5
  2155  085D  34CA               	retlw	202
  2156  085E  3405               	retlw	5
  2157  085F  34F1               	retlw	241
  2158  0860  3405               	retlw	5
  2159  0861  3419               	retlw	25
  2160  0862  3406               	retlw	6
  2161  0863  3442               	retlw	66
  2162  0864  3406               	retlw	6
  2163  0865  346C               	retlw	108
  2164  0866  3406               	retlw	6
  2165  0867  3497               	retlw	151
  2166  0868  3406               	retlw	6
  2167  0869  34C3               	retlw	195
  2168  086A  3406               	retlw	6
  2169  086B  34F0               	retlw	240
  2170  086C  3406               	retlw	6
  2171  086D  341F               	retlw	31
  2172  086E  3407               	retlw	7
  2173  086F  344E               	retlw	78
  2174  0870  3407               	retlw	7
  2175  0871  347F               	retlw	127
  2176  0872  3407               	retlw	7
  2177  0873  34B2               	retlw	178
  2178  0874  3407               	retlw	7
  2179  0875  34E5               	retlw	229
  2180  0876  3407               	retlw	7
  2181  0877  341A               	retlw	26
  2182  0878  3408               	retlw	8
  2183  0879  3450               	retlw	80
  2184  087A  3408               	retlw	8
  2185  087B  3488               	retlw	136
  2186  087C  3408               	retlw	8
  2187  087D  34C1               	retlw	193
  2188  087E  3408               	retlw	8
  2189  087F  34FC               	retlw	252
  2190  0880  3408               	retlw	8
  2191  0881  3438               	retlw	56
  2192  0882  3409               	retlw	9
  2193  0883  3476               	retlw	118
  2194  0884  3409               	retlw	9
  2195  0885  34B5               	retlw	181
  2196  0886  3409               	retlw	9
  2197  0887  34F6               	retlw	246
  2198  0888  3409               	retlw	9
  2199  0889  3439               	retlw	57
  2200  088A  340A               	retlw	10
  2201  088B  347E               	retlw	126
  2202  088C  340A               	retlw	10
  2203  088D  34C4               	retlw	196
  2204  088E  340A               	retlw	10
  2205  088F  340C               	retlw	12
  2206  0890  340B               	retlw	11
  2207  0891  3456               	retlw	86
  2208  0892  340B               	retlw	11
  2209  0893  34A2               	retlw	162
  2210  0894  340B               	retlw	11
  2211  0895  34F0               	retlw	240
  2212  0896  340B               	retlw	11
  2213  0897  3440               	retlw	64
  2214  0898  340C               	retlw	12
  2215  0899  3492               	retlw	146
  2216  089A  340C               	retlw	12
  2217  089B  34E6               	retlw	230
  2218  089C  340C               	retlw	12
  2219  089D  343D               	retlw	61
  2220  089E  340D               	retlw	13
  2221  089F  3495               	retlw	149
  2222  08A0  340D               	retlw	13
  2223  08A1  34F0               	retlw	240
  2224  08A2  340D               	retlw	13
  2225  08A3  344E               	retlw	78
  2226  08A4  340E               	retlw	14
  2227  08A5  34AD               	retlw	173
  2228  08A6  340E               	retlw	14
  2229  08A7  3410               	retlw	16
  2230  08A8  340F               	retlw	15
  2231  08A9  3475               	retlw	117
  2232  08AA  340F               	retlw	15
  2233  08AB  34DC               	retlw	220
  2234  08AC  340F               	retlw	15
  2235  08AD  3446               	retlw	70
  2236  08AE  3410               	retlw	16
  2237  08AF  34B4               	retlw	180
  2238  08B0  3410               	retlw	16
  2239  08B1  3423               	retlw	35
  2240  08B2  3411               	retlw	17
  2241  08B3  3496               	retlw	150
  2242  08B4  3411               	retlw	17
  2243  08B5  340C               	retlw	12
  2244  08B6  3412               	retlw	18
  2245  08B7  3485               	retlw	133
  2246  08B8  3412               	retlw	18
  2247  08B9  3401               	retlw	1
  2248  08BA  3413               	retlw	19
  2249  08BB  3480               	retlw	128
  2250  08BC  3413               	retlw	19
  2251  08BD  3403               	retlw	3
  2252  08BE  3414               	retlw	20
  2253  08BF  3489               	retlw	137
  2254  08C0  3414               	retlw	20
  2255  08C1  3413               	retlw	19
  2256  08C2  3415               	retlw	21
  2257  08C3  34A0               	retlw	160
  2258  08C4  3415               	retlw	21
  2259  08C5  3431               	retlw	49
  2260  08C6  3416               	retlw	22
  2261  08C7  34C5               	retlw	197
  2262  08C8  3416               	retlw	22
  2263  08C9  345E               	retlw	94
  2264  08CA  3417               	retlw	23
  2265  08CB  34FA               	retlw	250
  2266  08CC  3417               	retlw	23
  2267  08CD  349B               	retlw	155
  2268  08CE  3418               	retlw	24
  2269  08CF  3440               	retlw	64
  2270  08D0  3419               	retlw	25
  2271  08D1  34E9               	retlw	233
  2272  08D2  3419               	retlw	25
  2273  08D3  3497               	retlw	151
  2274  08D4  341A               	retlw	26
  2275  08D5  3449               	retlw	73
  2276  08D6  341B               	retlw	27
  2277  08D7  3400               	retlw	0
  2278  08D8  341C               	retlw	28
  2279  08D9  34BB               	retlw	187
  2280  08DA  341C               	retlw	28
  2281  08DB  347C               	retlw	124
  2282  08DC  341D               	retlw	29
  2283  08DD  3441               	retlw	65
  2284  08DE  341E               	retlw	30
  2285  08DF  340C               	retlw	12
  2286  08E0  341F               	retlw	31
  2287  08E1  34DC               	retlw	220
  2288  08E2  341F               	retlw	31
  2289  08E3  34B1               	retlw	177
  2290  08E4  3420               	retlw	32
  2291  08E5  348C               	retlw	140
  2292  08E6  3421               	retlw	33
  2293  08E7  346D               	retlw	109
  2294  08E8  3422               	retlw	34
  2295  08E9  3454               	retlw	84
  2296  08EA  3423               	retlw	35
  2297  08EB  3440               	retlw	64
  2298  08EC  3424               	retlw	36
  2299  08ED  3433               	retlw	51
  2300  08EE  3425               	retlw	37
  2301  08EF  342C               	retlw	44
  2302  08F0  3426               	retlw	38
  2303  08F1  342C               	retlw	44
  2304  08F2  3427               	retlw	39
  2305  08F3  3433               	retlw	51
  2306  08F4  3428               	retlw	40
  2307  08F5  3440               	retlw	64
  2308  08F6  3429               	retlw	41
  2309  08F7  3454               	retlw	84
  2310  08F8  342A               	retlw	42
  2311  08F9  3470               	retlw	112
  2312  08FA  342B               	retlw	43
  2313  08FB  3493               	retlw	147
  2314  08FC  342C               	retlw	44
  2315  08FD  34BD               	retlw	189
  2316  08FE  342D               	retlw	45
  2317  08FF  34F0               	retlw	240
  2318  0900  342E               	retlw	46
  2319  0901  342A               	retlw	42
  2320  0902  3430               	retlw	48
  2321  0903  346D               	retlw	109
  2322  0904  3431               	retlw	49
  2323  0905  34B8               	retlw	184
  2324  0906  3432               	retlw	50
  2325  0907  340C               	retlw	12
  2326  0908  3434               	retlw	52
  2327  0909  3469               	retlw	105
  2328  090A  3435               	retlw	53
  2329  090B  34CE               	retlw	206
  2330  090C  3436               	retlw	54
  2331  090D  343D               	retlw	61
  2332  090E  3438               	retlw	56
  2333  090F  34B6               	retlw	182
  2334  0910  3439               	retlw	57
  2335  0911  3439               	retlw	57
  2336  0912  343B               	retlw	59
  2337  0913  34C6               	retlw	198
  2338  0914  343C               	retlw	60
  2339  0915  345D               	retlw	93
  2340  0916  343E               	retlw	62
  2341  0917  34FF               	retlw	255
  2342  0918  343F               	retlw	63
  2343  0919  34FF               	retlw	255
  2344  091A  343F               	retlw	63
  2345  091B  34FF               	retlw	255
  2346  091C  343F               	retlw	63
  2347  091D  34FF               	retlw	255
  2348  091E  343F               	retlw	63
  2349  091F  34FF               	retlw	255
  2350  0920  343F               	retlw	63
  2351  0921  34FF               	retlw	255
  2352  0922  343F               	retlw	63
  2353  0923  34FF               	retlw	255
  2354  0924  343F               	retlw	63
  2355  0925  34FF               	retlw	255
  2356  0926  343F               	retlw	63
  2357  0927  34FF               	retlw	255
  2358  0928  343F               	retlw	63
  2359  0929  34FF               	retlw	255
  2360  092A  343F               	retlw	63
  2361  092B  34FF               	retlw	255
  2362  092C  343F               	retlw	63
  2363  092D                     __end_of_PWM:	
  2364  092D                     _UID:	
  2365  092D  344D               	retlw	77
  2366  092E  3452               	retlw	82
  2367  092F  3417               	retlw	23
  2368  0930  34C3               	retlw	195
  2369  0931  3410               	retlw	16
  2370  0932  3492               	retlw	146
  2371  0933                     __end_of_UID:	
  2372                           
  2373                           	psect	nvBANK2
  2374  016E                     __pnvBANK2:	
  2375  016E                     _TimerState:	
  2376  016E                     	ds	1
  2377  0016                     _TMR1	set	22
  2378  0018                     _T1CON	set	24
  2379  000B                     _INTCON	set	11
  2380  001C                     _T2CON	set	28
  2381  001B                     _PR2	set	27
  2382  0065                     _RA5	set	101
  2383  008C                     _TXIF	set	140
  2384  0088                     _TMR1IF	set	136
  2385  008E                     _ADIF	set	142
  2386  005E                     _PEIE	set	94
  2387  008D                     _RCIF	set	141
  2388  0072                     _RC2	set	114
  2389  0071                     _RC1	set	113
  2390  0070                     _RC0	set	112
  2391  0062                     _RA2	set	98
  2392  009C                     _ADRESH	set	156
  2393  009E                     _ADCON1	set	158
  2394  009D                     _ADCON0	set	157
  2395  0098                     _OSCTUNE	set	152
  2396  0099                     _OSCCON	set	153
  2397  048E                     _ADIE	set	1166
  2398  048C                     _TXIE	set	1164
  2399  0474                     _TRISC4	set	1140
  2400  0488                     _TMR1IE	set	1160
  2401  04E9                     _GO_nDONE	set	1257
  2402  0464                     _TRISA4	set	1124
  2403  048D                     _RCIE	set	1165
  2404  0475                     _TRISC5	set	1141
  2405  0473                     _TRISC3	set	1139
  2406  0472                     _TRISC2	set	1138
  2407  0471                     _TRISC1	set	1137
  2408  0470                     _TRISC0	set	1136
  2409  0462                     _TRISA2	set	1122
  2410  0873                     _LATC3	set	2163
  2411  0874                     _LATC4	set	2164
  2412  019A                     _TXREG	set	410
  2413  0199                     _RCREG	set	409
  2414  019B                     _SPBRGL	set	411
  2415  019C                     _SPBRGH	set	412
  2416  019F                     _BAUDCON	set	415
  2417  019D                     _RCSTA	set	413
  2418  0CF0                     _TX9D	set	3312
  2419  0CF6                     _TX9	set	3318
  2420  0CEF                     _SPEN	set	3311
  2421  0CF5                     _TXEN	set	3317
  2422  0C64                     _ANSA4	set	3172
  2423  0CEA                     _FERR	set	3306
  2424  0CF2                     _BRGH	set	3314
  2425  0CF4                     _SYNC	set	3316
  2426  0C73                     _ANSC3	set	3187
  2427  0C72                     _ANSC2	set	3186
  2428  0C71                     _ANSC1	set	3185
  2429  0C70                     _ANSC0	set	3184
  2430  0C62                     _ANSA2	set	3170
  2431  0DCB                     _PWM4CON	set	3531
  2432  0DBB                     _PWM3CON	set	3515
  2433  0DAB                     _PWM2CON	set	3499
  2434  0D9B                     _PWM1CON	set	3483
  2435  0DCE                     _PWM4CLKCON	set	3534
  2436  0DBE                     _PWM3CLKCON	set	3518
  2437  0DAE                     _PWM2CLKCON	set	3502
  2438  0D9E                     _PWM1CLKCON	set	3486
  2439  0DC5                     _PWM4PRL	set	3525
  2440  0DB5                     _PWM3PRL	set	3509
  2441  0DA5                     _PWM2PRL	set	3493
  2442  0D95                     _PWM1PRL	set	3477
  2443  0DC6                     _PWM4PRH	set	3526
  2444  0DB6                     _PWM3PRH	set	3510
  2445  0DA6                     _PWM2PRH	set	3494
  2446  0D96                     _PWM1PRH	set	3478
  2447  0DC1                     _PWM4PHL	set	3521
  2448  0DB1                     _PWM3PHL	set	3505
  2449  0DA1                     _PWM2PHL	set	3489
  2450  0D91                     _PWM1PHL	set	3473
  2451  0DC2                     _PWM4PHH	set	3522
  2452  0DB2                     _PWM3PHH	set	3506
  2453  0DA2                     _PWM2PHH	set	3490
  2454  0D92                     _PWM1PHH	set	3474
  2455  0DCF                     _PWM4LDCON	set	3535
  2456  0DBF                     _PWM3LDCON	set	3519
  2457  0DAF                     _PWM2LDCON	set	3503
  2458  0D9F                     _PWM1LDCON	set	3487
  2459  0DC3                     _PWM4DCL	set	3523
  2460  0DB3                     _PWM3DCL	set	3507
  2461  0DA3                     _PWM2DCL	set	3491
  2462  0D93                     _PWM1DCL	set	3475
  2463  0DC4                     _PWM4DCH	set	3524
  2464  0DB4                     _PWM3DCH	set	3508
  2465  0DA4                     _PWM2DCH	set	3492
  2466  0D94                     _PWM1DCH	set	3476
  2467  0E15                     _RXPPS	set	3605
  2468  0EA4                     _RC4PPS	set	3748
  2469  0EA2                     _RC2PPS	set	3746
  2470  0EA1                     _RC1PPS	set	3745
  2471  0EA0                     _RC0PPS	set	3744
  2472  0E92                     _RA2PPS	set	3730
  2473                           
  2474                           ; #config settings
  2475  0000                     
  2476                           	psect	cinit
  2477  0015                     start_initialization:	
  2478  0015                     __initialization:		;BIGRAM
  2479                           
  2480                           ;initializer for _DMXPeriod
  2481  0015  3064               	movlw	100
  2482  0016  00FB               	movwf	__pdataCOMMON& (0+127)
  2483                           
  2484                           ; Initialize objects allocated to BANK1
  2485  0017  0021               	movlb	1	; select bank1
  2486                           
  2487                           ;initializer for _DMX_sumRepeat
  2488  0018  3002               	movlw	2
  2489  0019  00EC               	movwf	__pdataBANK1& (0+127)
  2490  001A  01ED               	clrf	(__pdataBANK1+1)& (0+127)
  2491  001B  01EE               	clrf	(__pdataBANK1+2)& (0+127)
  2492  001C  01EF               	clrf	(__pdataBANK1+3)& (0+127)
  2493                           
  2494                           ; Initialize objects allocated to BANK2
  2495  001D  0022               	movlb	2	; select bank2
  2496                           
  2497                           ;initializer for _DMX_Repeat
  2498  001E  3001               	movlw	1
  2499  001F  00E6               	movwf	__pdataBANK2& (0+127)
  2500  0020  308C               	movlw	140
  2501  0021  01E7               	clrf	(__pdataBANK2+1)& (0+127)
  2502  0022  01E8               	clrf	(__pdataBANK2+2)& (0+127)
  2503  0023  01E9               	clrf	(__pdataBANK2+3)& (0+127)
  2504  0024  01EA               	clrf	(__pdataBANK2+4)& (0+127)
  2505  0025  01EB               	clrf	(__pdataBANK2+5)& (0+127)
  2506  0026  01EC               	clrf	(__pdataBANK2+6)& (0+127)
  2507  0027  01ED               	clrf	(__pdataBANK2+7)& (0+127)
  2508                           
  2509                           ; Clear objects allocated to BIGRAM
  2510  0028  0084               	movwf	4
  2511  0029  3021               	movlw	33
  2512  002A  0085               	movwf	5
  2513  002B  3064               	movlw	100
  2514  002C  00FE               	movwf	126
  2515  002D  01FF               	clrf	127
  2516  002E  318A  2262  3180   	fcall	clear_ram0
  2517                           
  2518                           ; Clear objects allocated to COMMON
  2519  0031  01F6               	clrf	__pbssCOMMON& (0+127)
  2520  0032  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2521  0033  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2522  0034  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2523  0035  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2524                           
  2525                           ; Clear objects allocated to BANK0
  2526  0036  0020               	movlb	0	; select bank0
  2527  0037  30A0               	movlw	low __pbssBANK1
  2528  0038  01EA               	clrf	__pbssBANK0& (0+127)
  2529  0039  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2530  003A  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2531                           
  2532                           ; Clear objects allocated to BANK1
  2533  003B  0084               	movwf	4
  2534  003C  3000               	movlw	high __pbssBANK1
  2535  003D  0085               	movwf	5
  2536  003E  3044               	movlw	68
  2537  003F  00FE               	movwf	126
  2538  0040  01FF               	clrf	127
  2539  0041  318A  2262  3180   	fcall	clear_ram0
  2540                           
  2541                           ; Clear objects allocated to BANK2
  2542  0044  3020               	movlw	low __pbssBANK2
  2543  0045  0084               	movwf	4
  2544  0046  3001               	movlw	high __pbssBANK2
  2545  0047  0085               	movwf	5
  2546  0048  3046               	movlw	70
  2547  0049  00FE               	movwf	126
  2548  004A  01FF               	clrf	127
  2549  004B  318A  2262  3180   	fcall	clear_ram0
  2550                           
  2551                           ; Clear objects allocated to BANK3
  2552  004E  30A0               	movlw	low __pbssBANK3
  2553  004F  0084               	movwf	4
  2554  0050  3001               	movlw	high __pbssBANK3
  2555  0051  0085               	movwf	5
  2556  0052  3034               	movlw	52
  2557  0053  00FE               	movwf	126
  2558  0054  01FF               	clrf	127
  2559  0055  318A  2262  3180   	fcall	clear_ram0
  2560  0058                     end_of_initialization:	
  2561                           ;End of C runtime variable initialization code
  2562                           
  2563  0058                     __end_of__initialization:	
  2564  0058  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2565  0059  0020               	movlb	0
  2566  005A  285B               	ljmp	_main	;jump to C main() function
  2567  005B                     __pmaintext:	
  2568                           ; 1 bytes @ 0x4A
  2569 ;;
  2570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2571 ;;
  2572 ;; *************** function _main *****************
  2573 ;; Defined at:
  2574 ;;		line 24 in file "main.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : B1F/0
  2585 ;;		On exit  : 1C/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2588 ;;      Params:         0       0       0       0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels required when called:    8
  2594 ;; This function calls:
  2595 ;;		_ADC_loop
  2596 ;;		_DMX_loop
  2597 ;;		_RDM_rx_loop
  2598 ;;		_timer1_init
  2599 ;; This function is called by:
  2600 ;;		Startup code after reset
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           
  2605                           ;psect for function _main
  2606  005B                     _main:	
  2607                           
  2608                           ;main.c: 25: PWM1DCH = 0x00;
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2612  005B  003B               	movlb	27	; select bank27
  2613  005C  0194               	clrf	20	;volatile
  2614                           
  2615                           ;main.c: 26: PWM2DCH = 0x00;
  2616  005D  01A4               	clrf	36	;volatile
  2617                           
  2618                           ;main.c: 27: PWM3DCH = 0x00;
  2619  005E  01B4               	clrf	52	;volatile
  2620                           
  2621                           ;main.c: 28: PWM4DCH = 0x00;
  2622  005F  01C4               	clrf	68	;volatile
  2623                           
  2624                           ;main.c: 30: PWM1DCL = 0x00;
  2625  0060  0193               	clrf	19	;volatile
  2626                           
  2627                           ;main.c: 31: PWM2DCL = 0x00;
  2628  0061  01A3               	clrf	35	;volatile
  2629                           
  2630                           ;main.c: 32: PWM3DCL = 0x00;
  2631  0062  01B3               	clrf	51	;volatile
  2632                           
  2633                           ;main.c: 33: PWM4DCL = 0x00;
  2634  0063  01C3               	clrf	67	;volatile
  2635                           
  2636                           ;main.c: 34: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  2637  0064  270C  3180         	fcall	PL100	;call to abstracted procedure
  2638                           
  2639                           ;main.c: 36: RA2PPS = 0b0011;
  2640  0066  3003               	movlw	3
  2641  0067  003D               	movlb	29	; select bank29
  2642  0068  0092               	movwf	18	;volatile
  2643                           
  2644                           ;main.c: 37: RC0PPS = 0b0100;
  2645  0069  3004               	movlw	4
  2646  006A  00A0               	movwf	32	;volatile
  2647                           
  2648                           ;main.c: 38: RC1PPS = 0b0101;
  2649  006B  3005               	movlw	5
  2650  006C  00A1               	movwf	33	;volatile
  2651                           
  2652                           ;main.c: 39: RC2PPS = 0b0110;
  2653  006D  3006               	movlw	6
  2654  006E  00A2               	movwf	34	;volatile
  2655                           
  2656                           ;main.c: 41: PR2 = 0xFF;
  2657  006F  30FF               	movlw	255
  2658  0070  0020               	movlb	0	; select bank0
  2659  0071  009B               	movwf	27	;volatile
  2660                           
  2661                           ;main.c: 42: T2CON = 0b00000101;
  2662  0072  3005               	movlw	5
  2663  0073  009C               	movwf	28	;volatile
  2664                           
  2665                           ;main.c: 44: OSCCON = 0b11110000;
  2666  0074  30F0               	movlw	240
  2667  0075  0021               	movlb	1	; select bank1
  2668  0076  0099               	movwf	25	;volatile
  2669                           
  2670                           ;main.c: 45: OSCTUNE = 0b000000;
  2671  0077  0198               	clrf	24	;volatile
  2672                           
  2673                           ;main.c: 47: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2674  0078  110E               	bcf	14,2	;volatile
  2675  0079  108E               	bcf	14,1	;volatile
  2676  007A  100E               	bcf	14,0	;volatile
  2677  007B  110C               	bcf	12,2	;volatile
  2678                           
  2679                           ;main.c: 48: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2680  007C  0023               	movlb	3	; select bank3
  2681  007D  110E               	bcf	14,2	;volatile
  2682  007E  108E               	bcf	14,1	;volatile
  2683  007F  100E               	bcf	14,0	;volatile
  2684  0080  110C               	bcf	12,2	;volatile
  2685                           
  2686                           ;main.c: 50: RA2=RC0=RC1=RC2=0;
  2687  0081  0020               	movlb	0	; select bank0
  2688  0082  110E               	bcf	14,2	;volatile
  2689  0083  108E               	bcf	14,1	;volatile
  2690  0084  100E               	bcf	14,0	;volatile
  2691  0085  110C               	bcf	12,2	;volatile
  2692                           
  2693                           ;main.c: 52: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2694  0086  003B               	movlb	27	; select bank27
  2695  0087  01C2               	clrf	66	;volatile
  2696  0088  01B2               	clrf	50	;volatile
  2697  0089  01A2               	clrf	34	;volatile
  2698  008A  0192               	clrf	18	;volatile
  2699                           
  2700                           ;main.c: 53: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2701  008B  01C1               	clrf	65	;volatile
  2702  008C  01B1               	clrf	49	;volatile
  2703  008D  01A1               	clrf	33	;volatile
  2704  008E  0191               	clrf	17	;volatile
  2705                           
  2706                           ;main.c: 54: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0x3F;
  2707  008F  303F               	movlw	63
  2708  0090  00C6               	movwf	70	;volatile
  2709  0091  00B6               	movwf	54	;volatile
  2710  0092  00A6               	movwf	38	;volatile
  2711  0093  0096               	movwf	22	;volatile
  2712                           
  2713                           ;main.c: 55: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2714  0094  30FF               	movlw	255
  2715  0095  00C5               	movwf	69	;volatile
  2716  0096  00B5               	movwf	53	;volatile
  2717  0097  00A5               	movwf	37	;volatile
  2718  0098  0095               	movwf	21	;volatile
  2719                           
  2720                           ;main.c: 56: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2721  0099  01CE               	clrf	78	;volatile
  2722  009A  01BE               	clrf	62	;volatile
  2723  009B  01AE               	clrf	46	;volatile
  2724  009C  019E               	clrf	30	;volatile
  2725                           
  2726                           ;main.c: 60: TRISC3 = 0;
  2727  009D  0021               	movlb	1	; select bank1
  2728  009E  118E               	bcf	14,3	;volatile
  2729                           
  2730                           ;main.c: 61: ANSC3 = 0;
  2731  009F  0023               	movlb	3	; select bank3
  2732  00A0  118E               	bcf	14,3	;volatile
  2733                           
  2734                           ;main.c: 62: INTCON = 0b11000000;
  2735  00A1  30C0               	movlw	192
  2736  00A2  008B               	movwf	11	;volatile
  2737                           
  2738                           ;main.c: 67: timer1_init();
  2739  00A3  271F  3180         	fcall	_timer1_init
  2740  00A5                     l4536:	
  2741                           
  2742                           ;main.c: 75: DMX_loop();
  2743  00A5  20D4  3180         	fcall	_DMX_loop
  2744                           
  2745                           ;main.c: 76: ADC_loop();
  2746  00A7  20AC               	fcall	_ADC_loop
  2747                           
  2748                           ;main.c: 78: RDM_rx_loop();
  2749  00A8  318D  25EE  3180   	fcall	_RDM_rx_loop
  2750  00AB  28A5               	goto	l4536
  2751  00AC                     __end_of_main:	
  2752  00AC                     __ptext21:	
  2753 ;; *************** function _ADC_loop *****************
  2754 ;; Defined at:
  2755 ;;		line 32 in file "ADC.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  2  116[None  ] int 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2764 ;; Tracked objects:
  2765 ;;		On entry : 1D/1
  2766 ;;		On exit  : 1F/1
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2769 ;;      Params:         0       0       0       0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0       0
  2771 ;;      Temps:          0       2       0       0       0       0       0       0
  2772 ;;      Totals:         0       2       0       0       0       0       0       0
  2773 ;;Total ram usage:        2 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    4
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           
  2784                           ;psect for function _ADC_loop
  2785  00AC                     _ADC_loop:	
  2786                           
  2787                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2788                           
  2789                           ;incstack = 0
  2790                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2791  00AC  0021               	movlb	1	; select bank1
  2792  00AD  1C56               	btfss	_ADC_Flags^(0+128),0	;volatile
  2793  00AE  0008               	return
  2794                           
  2795                           ;ADC.c: 34: RxTimer = 0;
  2796  00AF  01D2               	clrf	_RxTimer^(0+128)	;volatile
  2797  00B0  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2798                           
  2799                           ;ADC.c: 35: ADC_Flags.New = 0;
  2800  00B1  1056               	bcf	_ADC_Flags^(0+128),0	;volatile
  2801                           
  2802                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2803  00B2  0878               	movf	_ADC_Data,w	;volatile
  2804  00B3  0020               	movlb	0	; select bank0
  2805  00B4  00A0               	movwf	??_ADC_loop
  2806  00B5  302E               	movlw	low ((_PWM+1)| (0+32768))
  2807  00B6  2700  3180         	fcall	PL92	;call to abstracted procedure
  2808  00B8  3087               	movlw	high ((_PWM+1)| (0+32768))
  2809  00B9  3D21               	addwfc	??_ADC_loop+1,w
  2810  00BA  0085               	movwf	5
  2811  00BB  0800               	movf	0,w	;code access
  2812  00BC  003B               	movlb	27	; select bank27
  2813  00BD  00C4               	movwf	68	;volatile
  2814  00BE  00B4               	movwf	52	;volatile
  2815  00BF  00A4               	movwf	36	;volatile
  2816  00C0  0094               	movwf	20	;volatile
  2817                           
  2818                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2819  00C1  0878               	movf	_ADC_Data,w	;volatile
  2820  00C2  0020               	movlb	0	; select bank0
  2821  00C3  00A0               	movwf	??_ADC_loop
  2822  00C4  302D               	movlw	low (_PWM| (0+32768))
  2823  00C5  2700  3180         	fcall	PL92	;call to abstracted procedure
  2824  00C7  3087               	movlw	high (_PWM| (0+32768))
  2825  00C8  3D21               	addwfc	??_ADC_loop+1,w
  2826  00C9  0085               	movwf	5
  2827  00CA  0800               	movf	0,w	;code access
  2828  00CB  003B               	movlb	27	; select bank27
  2829  00CC  00C3               	movwf	67	;volatile
  2830  00CD  00B3               	movwf	51	;volatile
  2831  00CE  00A3               	movwf	35	;volatile
  2832  00CF  0093               	movwf	19	;volatile
  2833                           
  2834                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2835  00D0  270C               	fcall	PL100	;call to abstracted procedure
  2836                           
  2837                           ;ADC.c: 39: GO_nDONE = 1;
  2838  00D1  0021               	movlb	1	; select bank1
  2839  00D2  149D               	bsf	29,1	;volatile
  2840  00D3  0008               	return
  2841  00D4                     __end_of_ADC_loop:	
  2842  00D4                     __ptext10:	
  2843 ;; *************** function _DMX_loop *****************
  2844 ;; Defined at:
  2845 ;;		line 59 in file "DMX.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  Addr            1    3[BANK3 ] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 1C/1
  2856 ;;		On exit  : 1D/1
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2859 ;;      Params:         0       0       0       0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       4       0       0       0
  2861 ;;      Temps:          0       0       8       0       0       0       0       0
  2862 ;;      Totals:         0       0       8       0       4       0       0       0
  2863 ;;Total ram usage:       12 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    7
  2866 ;; This function calls:
  2867 ;;		___awtoft
  2868 ;;		___ftadd
  2869 ;;		___ftdiv
  2870 ;;		___ftge
  2871 ;;		___ftmul
  2872 ;;		___ftsub
  2873 ;;		___fttol
  2874 ;;		___lbtoft
  2875 ;;		___lwtoft
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           
  2882                           ;psect for function _DMX_loop
  2883  00D4                     _DMX_loop:	
  2884                           
  2885                           ;DMX.c: 60: char Addr = 0;
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2889  00D4  0023               	movlb	3	; select bank3
  2890  00D5  01D7               	clrf	DMX_loop@Addr^(0+384)
  2891                           
  2892                           ;DMX.c: 62: if (DMX_Flags.RxNew == 1) {
  2893  00D6  0020               	movlb	0	; select bank0
  2894  00D7  1C6A               	btfss	_DMX_Flags,0	;volatile
  2895  00D8  2A46               	goto	l348
  2896                           
  2897                           ;DMX.c: 63: DMX_Flags.RxNew = 0;
  2898  00D9  106A               	bcf	_DMX_Flags,0	;volatile
  2899                           
  2900                           ;DMX.c: 65: DMXPeriodDimming=0;
  2901  00DA  0021               	movlb	1	; select bank1
  2902  00DB  01DC               	clrf	_DMXPeriodDimming^(0+128)	;volatile
  2903                           
  2904                           ;DMX.c: 66: DMXStepConst=3;
  2905  00DC  3003               	movlw	3
  2906  00DD  00DB               	movwf	_DMXStepConst^(0+128)
  2907  00DE                     l4414:	
  2908                           ;DMX.c: 67: while (Addr < 4) {
  2909                           
  2910  00DE  3004               	movlw	4
  2911  00DF  0023               	movlb	3	; select bank3
  2912  00E0  0257               	subwf	DMX_loop@Addr^(0+384),w
  2913  00E1  1803               	btfsc	3,0
  2914  00E2  2A46               	goto	l348
  2915                           
  2916                           ;DMX.c: 68: rxdata=RxData[Addr];
  2917  00E3  0857               	movf	DMX_loop@Addr^(0+384),w
  2918  00E4  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  2919  00E5  0086               	movwf	6
  2920  00E6  0187               	clrf	7
  2921  00E7  0801               	movf	1,w
  2922  00E8  0020               	movlb	0	; select bank0
  2923  00E9  00EC               	movwf	_rxdata
  2924                           
  2925                           ;DMX.c: 69: if (DMX_TargetBright[Addr] < rxdata) {
  2926  00EA  0023               	movlb	3	; select bank3
  2927  00EB  2674  3180         	fcall	PL30	;call to abstracted procedure
  2928  00ED  3F40               	moviw [0]fsr1
  2929  00EE  0020               	movlb	0	; select bank0
  2930  00EF  00AD               	movwf	___ftge@ff1
  2931  00F0  3F41               	moviw [1]fsr1
  2932  00F1  00AE               	movwf	___ftge@ff1+1
  2933  00F2  3F42               	moviw [2]fsr1
  2934  00F3  00AF               	movwf	___ftge@ff1+2
  2935  00F4  086C               	movf	_rxdata,w
  2936  00F5  2349  3180         	fcall	___lbtoft
  2937  00F7  0828               	movf	?___lbtoft,w
  2938  00F8  00B0               	movwf	___ftge@ff2
  2939  00F9  0829               	movf	?___lbtoft+1,w
  2940  00FA  00B1               	movwf	___ftge@ff2+1
  2941  00FB  082A               	movf	?___lbtoft+2,w
  2942  00FC  00B2               	movwf	___ftge@ff2+2
  2943  00FD  23D0  3180         	fcall	___ftge
  2944  00FF  1803               	btfsc	3,0
  2945  0100  2962               	goto	l4374
  2946                           
  2947                           ;DMX.c: 70: DMX_difference=rxdata-DMX_TargetBright[Addr];
  2948  0101  25E4  3180         	fcall	PL6	;call to abstracted procedure
  2949  0103  2657  3180         	fcall	PL24	;call to abstracted procedure
  2950  0105  086C               	movf	_rxdata,w
  2951  0106  2349  3180         	fcall	___lbtoft
  2952  0108  0828               	movf	?___lbtoft,w
  2953  0109  00DA               	movwf	___ftsub@f1
  2954  010A  0829               	movf	?___lbtoft+1,w
  2955  010B  00DB               	movwf	___ftsub@f1+1
  2956  010C  082A               	movf	?___lbtoft+2,w
  2957  010D  00DC               	movwf	___ftsub@f1+2
  2958  010E  2359  3180         	fcall	___ftsub
  2959                           
  2960                           ;DMX.c: 71: if(DMX_difference<0.05){
  2961  0110  2603  3180         	fcall	PL12	;call to abstracted procedure
  2962  0112  23D0  3180         	fcall	___ftge
  2963  0114  1803               	btfsc	3,0
  2964  0115  2920               	goto	l4368
  2965                           
  2966                           ;DMX.c: 72: DMXSign[Addr].SIGN = 0b00;
  2967  0116  0023               	movlb	3	; select bank3
  2968                           
  2969                           ;DMX.c: 73: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  2970  0117  26B7  3180         	fcall	PL54	;call to abstracted procedure
  2971  0119  2349  3180         	fcall	___lbtoft
  2972  011B  0023               	movlb	3	; select bank3
  2973  011C  0857               	movf	DMX_loop@Addr^(0+384),w
  2974  011D  25C4  3180         	fcall	PL2	;call to abstracted procedure
  2975                           
  2976                           ;DMX.c: 74: }else{
  2977  011F  29DC               	goto	l4394
  2978  0120                     l4368:	
  2979                           
  2980                           ;DMX.c: 75: DMXSign[Addr].SIGN = 0b01;
  2981  0120  26C9  3180         	fcall	PL60	;call to abstracted procedure
  2982  0122  3801               	iorlw	1
  2983                           
  2984                           ;DMX.c: 76: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  2985  0123  25F5  3180         	fcall	PL10	;call to abstracted procedure
  2986  0125  25EE  3180         	fcall	PL8	;call to abstracted procedure
  2987                           
  2988                           ;DMX.c: 77: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  2989  0127  26A7  3180         	fcall	PL50	;call to abstracted procedure
  2990  0129  2674  3180         	fcall	PL30	;call to abstracted procedure
  2991  012B  269F  3180         	fcall	PL48	;call to abstracted procedure
  2992  012D  0023               	movlb	3	; select bank3
  2993  012E  2712  3180         	fcall	PL106	;call to abstracted procedure
  2994  0130  2349  3180         	fcall	___lbtoft
  2995  0132  2620  3180         	fcall	PL14	;call to abstracted procedure
  2996  0134  24AA  3180         	fcall	___ftmul
  2997  0136  26DE  3180         	fcall	PL74	;call to abstracted procedure
  2998  0138  2374  3180         	fcall	___ftdiv
  2999  013A  083C               	movf	?___ftdiv,w
  3000  013B  00CE               	movwf	___ftadd@f2
  3001  013C  083D               	movf	?___ftdiv+1,w
  3002  013D  00CF               	movwf	___ftadd@f2+1
  3003  013E  083E               	movf	?___ftdiv+2,w
  3004  013F  00D0               	movwf	___ftadd@f2+2
  3005  0140  23FC  3180         	fcall	___ftadd
  3006  0142  0023               	movlb	3	; select bank3
  3007  0143  0857               	movf	DMX_loop@Addr^(0+384),w
  3008  0144  0757               	addwf	DMX_loop@Addr^(0+384),w
  3009  0145  25DE  3180         	fcall	PL4	;call to abstracted procedure
  3010  0147  26FA  3180         	fcall	PL88	;call to abstracted procedure
  3011                           
  3012                           ;DMX.c: 78: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>2);
  3013  0149  268D  3180         	fcall	PL44	;call to abstracted procedure
  3014  014B  2544  3180         	fcall	___awtoft
  3015  014D  2698  3180         	fcall	PL46	;call to abstracted procedure
  3016  014F  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3017  0151  0187               	clrf	7
  3018  0152  263F  3180         	fcall	PL20	;call to abstracted procedure
  3019  0154  0023               	movlb	3	; select bank3
  3020  0155  2674  3180         	fcall	PL30	;call to abstracted procedure
  3021  0157  2637  3180         	fcall	PL18	;call to abstracted procedure
  3022  0159  2359  3180         	fcall	___ftsub
  3023  015B  26EC  3180         	fcall	PL80	;call to abstracted procedure
  3024  015D  2374  3180         	fcall	___ftdiv
  3025  015F  2647  3180         	fcall	PL22	;call to abstracted procedure
  3026  0161  29DC               	goto	l4394
  3027  0162                     l4374:	
  3028  0162  086C               	movf	_rxdata,w
  3029  0163  2349  3180         	fcall	___lbtoft
  3030  0165  0828               	movf	?___lbtoft,w
  3031  0166  00AD               	movwf	___ftge@ff1
  3032  0167  0829               	movf	?___lbtoft+1,w
  3033  0168  00AE               	movwf	___ftge@ff1+1
  3034  0169  082A               	movf	?___lbtoft+2,w
  3035  016A  00AF               	movwf	___ftge@ff1+2
  3036  016B  25E4  3180         	fcall	PL6	;call to abstracted procedure
  3037  016D  00B0               	movwf	___ftge@ff2
  3038  016E  3F41               	moviw [1]fsr1
  3039  016F  00B1               	movwf	___ftge@ff2+1
  3040  0170  3F42               	moviw [2]fsr1
  3041  0171  00B2               	movwf	___ftge@ff2+2
  3042  0172  23D0  3180         	fcall	___ftge
  3043                           
  3044                           ;DMX.c: 81: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  3045  0174  086C               	movf	_rxdata,w
  3046  0175  1803               	btfsc	3,0
  3047  0176  29D0               	goto	L2
  3048  0177  2349  3180         	fcall	___lbtoft
  3049  0179  26F3  3180         	fcall	PL84	;call to abstracted procedure
  3050  017B  25E4  3180         	fcall	PL6	;call to abstracted procedure
  3051  017D  2687  3180         	fcall	PL40	;call to abstracted procedure
  3052  017F  2359  3180         	fcall	___ftsub
  3053                           
  3054                           ;DMX.c: 82: if(DMX_difference<0.05){
  3055  0181  2603  3180         	fcall	PL12	;call to abstracted procedure
  3056  0183  23D0  3180         	fcall	___ftge
  3057  0185  1803               	btfsc	3,0
  3058  0186  2991               	goto	l4384
  3059                           
  3060                           ;DMX.c: 83: DMXSign[Addr].SIGN = 0b00;
  3061  0187  0023               	movlb	3	; select bank3
  3062                           
  3063                           ;DMX.c: 84: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3064  0188  26B7  3180         	fcall	PL54	;call to abstracted procedure
  3065  018A  2349  3180         	fcall	___lbtoft
  3066  018C  0023               	movlb	3	; select bank3
  3067  018D  0857               	movf	DMX_loop@Addr^(0+384),w
  3068  018E  25C4  3180         	fcall	PL2	;call to abstracted procedure
  3069                           
  3070                           ;DMX.c: 85: }
  3071  0190  29DC               	goto	l4394
  3072  0191                     l4384:	
  3073                           
  3074                           ;DMX.c: 86: else{
  3075                           ;DMX.c: 87: DMXSign[Addr].SIGN = 0b10;
  3076  0191  26C9  3180         	fcall	PL60	;call to abstracted procedure
  3077  0193  3802               	iorlw	2
  3078                           
  3079                           ;DMX.c: 88: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3080  0194  25F5  3180         	fcall	PL10	;call to abstracted procedure
  3081  0196  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3082                           
  3083                           ;DMX.c: 89: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3084  0198  26A7  3180         	fcall	PL50	;call to abstracted procedure
  3085  019A  2712  3180         	fcall	PL106	;call to abstracted procedure
  3086  019C  2349  3180         	fcall	___lbtoft
  3087  019E  2620  3180         	fcall	PL14	;call to abstracted procedure
  3088  01A0  24AA  3180         	fcall	___ftmul
  3089  01A2  26DE  3180         	fcall	PL74	;call to abstracted procedure
  3090  01A4  2374  3180         	fcall	___ftdiv
  3091  01A6  083C               	movf	?___ftdiv,w
  3092  01A7  00D7               	movwf	___ftsub@f2
  3093  01A8  083D               	movf	?___ftdiv+1,w
  3094  01A9  00D8               	movwf	___ftsub@f2+1
  3095  01AA  083E               	movf	?___ftdiv+2,w
  3096  01AB  00D9               	movwf	___ftsub@f2+2
  3097  01AC  25E4  3180         	fcall	PL6	;call to abstracted procedure
  3098  01AE  2687  3180         	fcall	PL40	;call to abstracted procedure
  3099  01B0  2359  3180         	fcall	___ftsub
  3100  01B2  0023               	movlb	3	; select bank3
  3101  01B3  0857               	movf	DMX_loop@Addr^(0+384),w
  3102  01B4  0757               	addwf	DMX_loop@Addr^(0+384),w
  3103  01B5  25DE  3180         	fcall	PL4	;call to abstracted procedure
  3104  01B7  26D8  3180         	fcall	PL70	;call to abstracted procedure
  3105                           
  3106                           ;DMX.c: 90: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMXP
      +                          eriod>>2);
  3107  01B9  268D  3180         	fcall	PL44	;call to abstracted procedure
  3108  01BB  2544  3180         	fcall	___awtoft
  3109  01BD  2698  3180         	fcall	PL46	;call to abstracted procedure
  3110  01BF  25E4  3180         	fcall	PL6	;call to abstracted procedure
  3111  01C1  2657  3180         	fcall	PL24	;call to abstracted procedure
  3112  01C3  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3113  01C5  2637  3180         	fcall	PL18	;call to abstracted procedure
  3114  01C7  2359  3180         	fcall	___ftsub
  3115  01C9  26EC  3180         	fcall	PL80	;call to abstracted procedure
  3116  01CB  2374  3180         	fcall	___ftdiv
  3117  01CD  2647  3180         	fcall	PL22	;call to abstracted procedure
  3118  01CF  29DC               	goto	l4394
  3119  01D0                     L2:	
  3120                           ;DMX.c: 93: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3121                           
  3122  01D0  2349  3180         	fcall	___lbtoft
  3123  01D2  0023               	movlb	3	; select bank3
  3124  01D3  0857               	movf	DMX_loop@Addr^(0+384),w
  3125  01D4  25C4  3180         	fcall	PL2	;call to abstracted procedure
  3126                           
  3127                           ;DMX.c: 94: DMXSign[Addr].SIGN = 0b00;
  3128  01D6  0023               	movlb	3	; select bank3
  3129  01D7  0857               	movf	DMX_loop@Addr^(0+384),w
  3130  01D8  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3131  01D9  0086               	movwf	6
  3132  01DA  30FC               	movlw	-4
  3133  01DB  0581               	andwf	1,f
  3134  01DC                     l4394:	
  3135                           
  3136                           ;DMX.c: 95: }
  3137                           ;DMX.c: 97: if(preRxData[Addr]==RxData[Addr]){
  3138  01DC  0023               	movlb	3	; select bank3
  3139  01DD  0857               	movf	DMX_loop@Addr^(0+384),w
  3140  01DE  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  3141  01DF  0086               	movwf	6
  3142  01E0  0187               	clrf	7
  3143  01E1  0857               	movf	DMX_loop@Addr^(0+384),w
  3144  01E2  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3145  01E3  0084               	movwf	4
  3146  01E4  3001               	movlw	1	; select bank2/3
  3147  01E5  0085               	movwf	5
  3148  01E6  0800               	movf	0,w
  3149  01E7  0601               	xorwf	1,w
  3150  01E8  1D03               	skipz
  3151  01E9  2A0E               	goto	l4406
  3152                           
  3153                           ;DMX.c: 98: if( !DMXSign[Addr].InfiniteLoop){
  3154  01EA  0857               	movf	DMX_loop@Addr^(0+384),w
  3155  01EB  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3156  01EC  0086               	movwf	6
  3157  01ED  1901               	btfsc	1,2
  3158  01EE  2A39               	goto	l362
  3159                           
  3160                           ;DMX.c: 99: DMX_Repeat[Addr][0]++;
  3161  01EF  3557               	lslf	DMX_loop@Addr^(0+384),w
  3162  01F0  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3163  01F1  0086               	movwf	6
  3164  01F2  3001               	movlw	1	; select bank2/3
  3165  01F3  0087               	movwf	7
  3166  01F4  0A81               	incf	1,f
  3167                           
  3168                           ;DMX.c: 100: if(DMX_Repeat[Addr][0]==0x10){
  3169  01F5  3557               	lslf	DMX_loop@Addr^(0+384),w
  3170  01F6  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3171  01F7  0086               	movwf	6
  3172  01F8  3010               	movlw	16
  3173  01F9  0601               	xorwf	1,w
  3174  01FA  1D03               	btfss	3,2
  3175  01FB  2A39               	goto	l362
  3176                           
  3177                           ;DMX.c: 101: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3178  01FC  3557               	lslf	DMX_loop@Addr^(0+384),w
  3179  01FD  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3180  01FE  0086               	movwf	6
  3181  01FF  3557               	lslf	DMX_loop@Addr^(0+384),w
  3182  0200  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3183  0201  0084               	movwf	4
  3184  0202  3001               	movlw	1	; select bank2/3
  3185  0203  3F80               	movwi [0]fsr0
  3186  0204  0081               	movwf	1
  3187                           
  3188                           ;DMX.c: 102: DMX_sumRepeat[Addr]=2;
  3189  0205  0857               	movf	DMX_loop@Addr^(0+384),w
  3190  0206  318D  251F  3180   	fcall	PL102	;call to abstracted procedure
  3191                           
  3192                           ;DMX.c: 103: DMXSign[Addr].InfiniteLoop=1;
  3193  0209  0857               	movf	DMX_loop@Addr^(0+384),w
  3194  020A  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3195  020B  0086               	movwf	6
  3196  020C  1501               	bsf	1,2
  3197  020D  2A39               	goto	l362
  3198  020E                     l4406:	
  3199                           
  3200                           ;DMX.c: 107: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  3201  020E  3557               	lslf	DMX_loop@Addr^(0+384),w
  3202  020F  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3203  0210  0086               	movwf	6
  3204  0211  3001               	movlw	1	; select bank2/3
  3205  0212  0087               	movwf	7
  3206  0213  3557               	lslf	DMX_loop@Addr^(0+384),w
  3207  0214  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3208  0215  0084               	movwf	4
  3209  0216  3001               	movlw	1	; select bank2/3
  3210  0217  0085               	movwf	5
  3211  0218  0800               	movf	0,w
  3212  0219  0081               	movwf	1
  3213                           
  3214                           ;DMX.c: 108: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  3215  021A  0857               	movf	DMX_loop@Addr^(0+384),w
  3216  021B  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  3217  021C  0086               	movwf	6
  3218  021D  0187               	clrf	7
  3219  021E  3557               	lslf	DMX_loop@Addr^(0+384),w
  3220  021F  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3221  0220  0084               	movwf	4
  3222  0221  0800               	movf	0,w
  3223  0222  0021               	movlb	1	; select bank1
  3224  0223  00E4               	movwf	??_DMX_loop^(0+128)
  3225  0224  0023               	movlb	3	; select bank3
  3226  0225  3557               	lslf	DMX_loop@Addr^(0+384),w
  3227  0226  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3228  0227  0084               	movwf	4
  3229  0228  0800               	movf	0,w
  3230  0229  0021               	movlb	1	; select bank1
  3231  022A  0764               	addwf	??_DMX_loop^(0+128),w
  3232  022B  0081               	movwf	1
  3233                           
  3234                           ;DMX.c: 109: DMX_Repeat[Addr][0]=1;
  3235  022C  0023               	movlb	3	; select bank3
  3236  022D  3557               	lslf	DMX_loop@Addr^(0+384),w
  3237  022E  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3238  022F  0086               	movwf	6
  3239  0230  3001               	movlw	1	; select bank2/3
  3240  0231  0087               	movwf	7
  3241  0232  0181               	clrf	1
  3242  0233  0A81               	incf	1,f
  3243                           
  3244                           ;DMX.c: 110: DMXSign[Addr].InfiniteLoop=0;
  3245  0234  0857               	movf	DMX_loop@Addr^(0+384),w
  3246  0235  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3247  0236  0086               	movwf	6
  3248  0237  0187               	clrf	7
  3249  0238  1101               	bcf	1,2
  3250  0239                     l362:	
  3251                           
  3252                           ;DMX.c: 111: }
  3253                           ;DMX.c: 112: preRxData[Addr]=RxData[Addr];
  3254  0239  0857               	movf	DMX_loop@Addr^(0+384),w
  3255  023A  3E48               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3256  023B  0086               	movwf	6
  3257  023C  3001               	movlw	1	; select bank2/3
  3258  023D  0087               	movwf	7
  3259  023E  0857               	movf	DMX_loop@Addr^(0+384),w
  3260  023F  3EE0               	addlw	(low (_RxData| 0))& (0+255)
  3261  0240  0084               	movwf	4
  3262  0241  0185               	clrf	5
  3263  0242  0800               	movf	0,w
  3264  0243  0081               	movwf	1
  3265                           
  3266                           ;DMX.c: 113: Addr++;
  3267  0244  0AD7               	incf	DMX_loop@Addr^(0+384),f
  3268  0245  28DE               	goto	l4414
  3269  0246                     l348:	
  3270                           
  3271                           ;DMX.c: 114: }
  3272                           ;DMX.c: 115: }
  3273                           ;DMX.c: 117: if (Timer.MS) {
  3274  0246  0021               	movlb	1	; select bank1
  3275  0247  1C38               	btfss	_Timer^(0+128),0	;volatile
  3276  0248  0008               	return
  3277                           
  3278                           ;DMX.c: 118: DMXPeriodConst++;
  3279  0249  0ADD               	incf	_DMXPeriodConst^(0+128),f	;volatile
  3280                           
  3281                           ;DMX.c: 119: Timer.MS = 0;
  3282  024A  1038               	bcf	_Timer^(0+128),0	;volatile
  3283                           
  3284                           ;DMX.c: 120: Addr = 0;
  3285  024B  0023               	movlb	3	; select bank3
  3286  024C  01D7               	clrf	DMX_loop@Addr^(0+384)
  3287                           
  3288                           ;DMX.c: 121: DMXPeriodDimming++;
  3289  024D  0021               	movlb	1	; select bank1
  3290  024E  0ADC               	incf	_DMXPeriodDimming^(0+128),f	;volatile
  3291                           
  3292                           ;DMX.c: 122: if(DMXStepConst==0 && DMXPeriodDimming<DMXPeriod){
  3293  024F  085B               	movf	_DMXStepConst^(0+128),w
  3294  0250  1D03               	btfss	3,2
  3295  0251  2B47               	goto	l4454
  3296  0252  087B               	movf	_DMXPeriod,w
  3297  0253  025C               	subwf	_DMXPeriodDimming^(0+128),w	;volatile
  3298  0254  1803               	skipnc
  3299  0255  2B47               	goto	l4454
  3300                           
  3301                           ;DMX.c: 123: DMXStepConst=3;
  3302  0256  3003               	movlw	3
  3303  0257  00DB               	movwf	_DMXStepConst^(0+128)
  3304                           
  3305                           ;DMX.c: 124: while (Addr < 4) {
  3306  0258  2B32               	goto	l4452
  3307  0259                     l4430:	
  3308                           
  3309                           ;DMX.c: 127: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  3310  0259  265D  3180         	fcall	PL26	;call to abstracted procedure
  3311  025B  269F  3180         	fcall	PL48	;call to abstracted procedure
  3312  025D  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3313  025F  0187               	clrf	7
  3314  0260  3F40               	moviw [0]fsr1
  3315  0261  0020               	movlb	0	; select bank0
  3316  0262  00CE               	movwf	___ftadd@f2
  3317  0263  3F41               	moviw [1]fsr1
  3318  0264  00CF               	movwf	___ftadd@f2+1
  3319  0265  3F42               	moviw [2]fsr1
  3320  0266  00D0               	movwf	___ftadd@f2+2
  3321  0267  23FC  3180         	fcall	___ftadd
  3322  0269  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3323  026B  0187               	clrf	7
  3324  026C  0020               	movlb	0	; select bank0
  3325  026D  26FA  3180         	fcall	PL88	;call to abstracted procedure
  3326  026F  3FC2               	movwi [2]fsr1
  3327                           
  3328                           ;DMX.c: 128: break;
  3329  0270  2A83               	goto	l4438
  3330  0271                     l4432:	
  3331                           
  3332                           ;DMX.c: 130: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  3333  0271  265D  3180         	fcall	PL26	;call to abstracted procedure
  3334  0273  263F  3180         	fcall	PL20	;call to abstracted procedure
  3335  0275  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3336  0277  0187               	clrf	7
  3337  0278  2637  3180         	fcall	PL18	;call to abstracted procedure
  3338  027A  2359  3180         	fcall	___ftsub
  3339  027C  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3340  027E  0187               	clrf	7
  3341  027F  0020               	movlb	0	; select bank0
  3342  0280  26D8  3180         	fcall	PL70	;call to abstracted procedure
  3343  0282  3FC2               	movwi [2]fsr1
  3344  0283                     l4438:	
  3345                           ;DMX.c: 131: break;
  3346                           
  3347                           
  3348                           ;DMX.c: 135: rxdata=DMX_CurrentBright[Addr];
  3349  0283  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3350  0285  0187               	clrf	7
  3351  0286  3F40               	moviw [0]fsr1
  3352  0287  0020               	movlb	0	; select bank0
  3353  0288  00DD               	movwf	___fttol@f1
  3354  0289  3F41               	moviw [1]fsr1
  3355  028A  00DE               	movwf	___fttol@f1+1
  3356  028B  3F42               	moviw [2]fsr1
  3357  028C  00DF               	movwf	___fttol@f1+2
  3358  028D  255F  3180         	fcall	___fttol
  3359  028F  085D               	movf	?___fttol,w
  3360  0290  00EC               	movwf	_rxdata
  3361                           
  3362                           ;DMX.c: 136: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3363  0291  267A  3180         	fcall	PL34	;call to abstracted procedure
  3364  0293  00E6               	movwf	(??_DMX_loop+2)^(0+128)
  3365  0294  3F01               	moviw [1]fsr0
  3366  0295  00E7               	movwf	((??_DMX_loop+2)^(0+128)+1)
  3367  0296  0020               	movlb	0	; select bank0
  3368  0297  086C               	movf	_rxdata,w
  3369  0298  0021               	movlb	1	; select bank1
  3370  0299  00E8               	movwf	(??_DMX_loop+4)^(0+128)
  3371  029A  302F               	movlw	low ((_PWM+2)| (0+32768))
  3372  029B  01E9               	clrf	((??_DMX_loop+4)^(0+128)+1)
  3373  029C  35E8               	lslf	(??_DMX_loop+4)^(0+128),f
  3374  029D  0DE9               	rlf	((??_DMX_loop+4)^(0+128)+1),f
  3375  029E  0768               	addwf	(??_DMX_loop+4)^(0+128),w
  3376  029F  0084               	movwf	4
  3377  02A0  3087               	movlw	high ((_PWM+2)| (0+32768))
  3378  02A1  3D69               	addwfc	(??_DMX_loop+5)^(0+128),w
  3379  02A2  0085               	movwf	5
  3380  02A3  3F00               	moviw [0]fsr0
  3381  02A4  00EA               	movwf	(??_DMX_loop+6)^(0+128)
  3382  02A5  3F01               	moviw [1]fsr0
  3383  02A6  00EB               	movwf	((??_DMX_loop+6)^(0+128)+1)
  3384  02A7  0866               	movf	(??_DMX_loop+2)^(0+128),w
  3385  02A8  026A               	subwf	(??_DMX_loop+6)^(0+128),w
  3386  02A9  0020               	movlb	0	; select bank0
  3387  02AA  00A8               	movwf	___lwtoft@c
  3388  02AB  0021               	movlb	1	; select bank1
  3389  02AC  0867               	movf	(??_DMX_loop+3)^(0+128),w
  3390  02AD  3B6B               	subwfb	(??_DMX_loop+7)^(0+128),w
  3391  02AE  0020               	movlb	0	; select bank0
  3392  02AF  00A9               	movwf	___lwtoft@c+1
  3393  02B0  25B4  3180         	fcall	___lwtoft
  3394  02B2  0828               	movf	?___lwtoft,w
  3395  02B3  00B0               	movwf	___ftmul@f2
  3396  02B4  0829               	movf	?___lwtoft+1,w
  3397  02B5  00B1               	movwf	___ftmul@f2+1
  3398  02B6  082A               	movf	?___lwtoft+2,w
  3399  02B7  00B2               	movwf	___ftmul@f2+2
  3400  02B8  25EE  3180         	fcall	PL8	;call to abstracted procedure
  3401  02BA  0187               	clrf	7
  3402  02BB  2637  3180         	fcall	PL18	;call to abstracted procedure
  3403  02BD  086C               	movf	_rxdata,w
  3404  02BE  2349  3180         	fcall	___lbtoft
  3405  02C0  26F3  3180         	fcall	PL84	;call to abstracted procedure
  3406  02C2  2359  3180         	fcall	___ftsub
  3407  02C4  0857               	movf	?___ftsub,w
  3408  02C5  00AD               	movwf	___ftmul@f1
  3409  02C6  0858               	movf	?___ftsub+1,w
  3410  02C7  00AE               	movwf	___ftmul@f1+1
  3411  02C8  0859               	movf	?___ftsub+2,w
  3412  02C9  00AF               	movwf	___ftmul@f1+2
  3413  02CA  24AA  3180         	fcall	___ftmul
  3414  02CC  082D               	movf	?___ftmul,w
  3415  02CD  0023               	movlb	3	; select bank3
  3416  02CE  00D4               	movwf	_DMX_loop$1446^(0+384)
  3417  02CF  0020               	movlb	0	; select bank0
  3418  02D0  082E               	movf	?___ftmul+1,w
  3419  02D1  0023               	movlb	3	; select bank3
  3420  02D2  00D5               	movwf	(_DMX_loop$1446+1)^(0+384)
  3421  02D3  0020               	movlb	0	; select bank0
  3422  02D4  082F               	movf	?___ftmul+2,w
  3423  02D5  0023               	movlb	3	; select bank3
  3424  02D6  00D6               	movwf	(_DMX_loop$1446+2)^(0+384)
  3425                           
  3426                           ;DMX.c: 136: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3427  02D7  0020               	movlb	0	; select bank0
  3428  02D8  086C               	movf	_rxdata,w
  3429  02D9  267A  3180         	fcall	PL34	;call to abstracted procedure
  3430  02DB  0020               	movlb	0	; select bank0
  3431  02DC  00A8               	movwf	___lwtoft@c
  3432  02DD  3F01               	moviw [1]fsr0
  3433  02DE  00A9               	movwf	___lwtoft@c+1
  3434  02DF  25B4  3180         	fcall	___lwtoft
  3435  02E1  0828               	movf	?___lwtoft,w
  3436  02E2  00CE               	movwf	___ftadd@f2
  3437  02E3  0829               	movf	?___lwtoft+1,w
  3438  02E4  00CF               	movwf	___ftadd@f2+1
  3439  02E5  082A               	movf	?___lwtoft+2,w
  3440  02E6  00D0               	movwf	___ftadd@f2+2
  3441  02E7  0023               	movlb	3	; select bank3
  3442  02E8  0854               	movf	_DMX_loop$1446^(0+384),w
  3443  02E9  0020               	movlb	0	; select bank0
  3444  02EA  00CB               	movwf	___ftadd@f1
  3445  02EB  0023               	movlb	3	; select bank3
  3446  02EC  0855               	movf	(_DMX_loop$1446+1)^(0+384),w
  3447  02ED  0020               	movlb	0	; select bank0
  3448  02EE  00CC               	movwf	___ftadd@f1+1
  3449  02EF  0023               	movlb	3	; select bank3
  3450  02F0  0856               	movf	(_DMX_loop$1446+2)^(0+384),w
  3451  02F1  0020               	movlb	0	; select bank0
  3452  02F2  00CD               	movwf	___ftadd@f1+2
  3453  02F3  23FC  3180         	fcall	___ftadd
  3454  02F5  084B               	movf	?___ftadd,w
  3455  02F6  00DD               	movwf	___fttol@f1
  3456  02F7  084C               	movf	?___ftadd+1,w
  3457  02F8  00DE               	movwf	___fttol@f1+1
  3458  02F9  084D               	movf	?___ftadd+2,w
  3459  02FA  00DF               	movwf	___fttol@f1+2
  3460  02FB  255F  3180         	fcall	___fttol
  3461  02FD  26B0  3180         	fcall	PL52	;call to abstracted procedure
  3462  02FF  0020               	movlb	0	; select bank0
  3463  0300  085D               	movf	?___fttol,w
  3464  0301  3FC0               	movwi [0]fsr1
  3465  0302  085E               	movf	?___fttol+1,w
  3466  0303  3FC1               	movwi [1]fsr1
  3467                           
  3468                           ;DMX.c: 137: if(rxdata==0 | CurrentPWM.PWM[Addr].DCH>0x6F){
  3469  0304  086C               	movf	_rxdata,w
  3470  0305  1903               	btfsc	3,2
  3471  0306  2B0F               	goto	l4448
  3472  0307  0023               	movlb	3	; select bank3
  3473  0308  3557               	lslf	DMX_loop@Addr^(0+384),w
  3474  0309  3E41               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3475  030A  0086               	movwf	6
  3476  030B  3070               	movlw	112
  3477  030C  0201               	subwf	1,w
  3478  030D  1C03               	skipc
  3479  030E  2B14               	goto	l373
  3480  030F                     l4448:	
  3481                           
  3482                           ;DMX.c: 138: CurrentPWM.DC[Addr]=0;
  3483  030F  26B0  3180         	fcall	PL52	;call to abstracted procedure
  3484  0311  3000               	movlw	0
  3485  0312  3FC0               	movwi [0]fsr1
  3486  0313  3FC1               	movwi [1]fsr1
  3487  0314                     l373:	
  3488                           
  3489                           ;DMX.c: 139: }
  3490                           ;DMX.c: 140: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  3491  0314  3557               	lslf	DMX_loop@Addr^(0+384),w
  3492  0315  3E41               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3493  0316  26C0  3180         	fcall	PL58	;call to abstracted procedure
  3494  0318  3EB4               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  3495                           
  3496                           ;DMX.c: 141: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  3497  0319  2665  3180         	fcall	PL28	;call to abstracted procedure
  3498  031B  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3499  031C  26C0  3180         	fcall	PL58	;call to abstracted procedure
  3500  031E  3E38               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  3501                           
  3502                           ;DMX.c: 142: *PWMLDCONptr[Addr] = 0b10000000;
  3503  031F  2665  3180         	fcall	PL28	;call to abstracted procedure
  3504  0321  3EAC               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  3505  0322  0086               	movwf	6
  3506  0323  3001               	movlw	1	; select bank3/4
  3507  0324  0087               	movwf	7
  3508  0325  3F40               	moviw [0]fsr1
  3509  0326  0021               	movlb	1	; select bank1
  3510  0327  00E4               	movwf	??_DMX_loop^(0+128)
  3511  0328  3F41               	moviw [1]fsr1
  3512  0329  00E5               	movwf	(??_DMX_loop^(0+128)+1)
  3513  032A  0864               	movf	??_DMX_loop^(0+128),w
  3514  032B  0086               	movwf	6
  3515  032C  0865               	movf	(??_DMX_loop+1)^(0+128),w
  3516  032D  0087               	movwf	7
  3517  032E  3080               	movlw	128
  3518  032F  0081               	movwf	1
  3519                           
  3520                           ;DMX.c: 143: Addr++;
  3521  0330  0023               	movlb	3	; select bank3
  3522  0331  0AD7               	incf	DMX_loop@Addr^(0+384),f
  3523  0332                     l4452:	
  3524  0332  3004               	movlw	4
  3525  0333  0023               	movlb	3	; select bank3
  3526  0334  0257               	subwf	DMX_loop@Addr^(0+384),w
  3527  0335  1803               	btfsc	3,0
  3528  0336  0008               	return
  3529  0337  0857               	movf	DMX_loop@Addr^(0+384),w
  3530  0338  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3531  0339  0086               	movwf	6
  3532  033A  0187               	clrf	7
  3533  033B  0801               	movf	1,w
  3534  033C  3903               	andlw	3
  3535                           
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 3, Range of values is 0 to 2
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte           10     6 (average)
  3541                           ; direct_byte           12     6 (fixed)
  3542                           ; jumptable            260     6 (fixed)
  3543                           ;	Chosen strategy is simple_byte
  3544  033D  1903               	skipnz
  3545  033E  2A83               	goto	l4438
  3546  033F  3A01               	xorlw	1	; case 1
  3547  0340  1903               	skipnz
  3548  0341  2A59               	goto	l4430
  3549  0342  3A03               	xorlw	3	; case 2
  3550  0343  1903               	skipnz
  3551  0344  2A71               	goto	l4432
  3552  0345  2A83               	goto	l4438
  3553  0346  2A83               	goto	l4438
  3554  0347                     l4454:	
  3555                           
  3556                           ;DMX.c: 146: DMXStepConst--;
  3557  0347  03DB               	decf	_DMXStepConst^(0+128),f
  3558  0348  0008               	return
  3559  0349                     __end_of_DMX_loop:	
  3560  0349                     __ptext12:	
  3561 ;; *************** function ___lbtoft *****************
  3562 ;; Defined at:
  3563 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  c               1    wreg     unsigned char 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  c               1   12[BANK0 ] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  3    8[BANK0 ] float 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0, pclath, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 1C/0
  3574 ;;		On exit  : 1F/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3577 ;;      Params:         0       4       0       0       0       0       0       0
  3578 ;;      Locals:         0       1       0       0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0
  3580 ;;      Totals:         0       5       0       0       0       0       0       0
  3581 ;;Total ram usage:        5 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    5
  3584 ;; This function calls:
  3585 ;;		___ftpack
  3586 ;; This function is called by:
  3587 ;;		_DMX_loop
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function ___lbtoft
  3593  0349                     ___lbtoft:	
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3597                           ;___lbtoft@c stored from wreg
  3598  0349  0020               	movlb	0	; select bank0
  3599  034A  00AC               	movwf	___lbtoft@c
  3600  034B  00A0               	movwf	___ftpack@arg
  3601  034C  308E               	movlw	142
  3602  034D  01A1               	clrf	___ftpack@arg+1
  3603  034E  01A2               	clrf	___ftpack@arg+2
  3604  034F  00A3               	movwf	___ftpack@exp
  3605  0350  01A4               	clrf	___ftpack@sign
  3606  0351  2506               	fcall	___ftpack
  3607  0352  0820               	movf	?___ftpack,w
  3608  0353  00A8               	movwf	?___lbtoft
  3609  0354  0821               	movf	?___ftpack+1,w
  3610  0355  00A9               	movwf	?___lbtoft+1
  3611  0356  0822               	movf	?___ftpack+2,w
  3612  0357  00AA               	movwf	?___lbtoft+2
  3613  0358  0008               	return
  3614  0359                     __end_of___lbtoft:	
  3615  0359                     __ptext14:	
  3616 ;; *************** function ___ftsub *****************
  3617 ;; Defined at:
  3618 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;  f2              3   55[BANK0 ] float 
  3621 ;;  f1              3   58[BANK0 ] float 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  3   55[BANK0 ] float 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 1F/0
  3630 ;;		On exit  : 1F/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3633 ;;      Params:         0       6       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0       0
  3636 ;;      Totals:         0       6       0       0       0       0       0       0
  3637 ;;Total ram usage:        6 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    6
  3640 ;; This function calls:
  3641 ;;		___ftadd
  3642 ;; This function is called by:
  3643 ;;		_DMX_loop
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function ___ftsub
  3649  0359                     ___ftsub:	
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3653  0359  0859               	movf	___ftsub@f2+2,w
  3654  035A  0458               	iorwf	___ftsub@f2+1,w
  3655  035B  0457               	iorwf	___ftsub@f2,w
  3656  035C  1903               	skipnz
  3657  035D  2B60               	goto	l4286
  3658  035E  3080               	movlw	128
  3659  035F  06D9               	xorwf	___ftsub@f2+2,f
  3660  0360                     l4286:	
  3661  0360  085A               	movf	___ftsub@f1,w
  3662  0361  00CB               	movwf	___ftadd@f1
  3663  0362  085B               	movf	___ftsub@f1+1,w
  3664  0363  00CC               	movwf	___ftadd@f1+1
  3665  0364  085C               	movf	___ftsub@f1+2,w
  3666  0365  00CD               	movwf	___ftadd@f1+2
  3667  0366  0857               	movf	___ftsub@f2,w
  3668  0367  00CE               	movwf	___ftadd@f2
  3669  0368  0858               	movf	___ftsub@f2+1,w
  3670  0369  00CF               	movwf	___ftadd@f2+1
  3671  036A  0859               	movf	___ftsub@f2+2,w
  3672  036B  00D0               	movwf	___ftadd@f2+2
  3673  036C  23FC               	fcall	___ftadd
  3674  036D  084B               	movf	?___ftadd,w
  3675  036E  00D7               	movwf	?___ftsub
  3676  036F  084C               	movf	?___ftadd+1,w
  3677  0370  00D8               	movwf	?___ftsub+1
  3678  0371  084D               	movf	?___ftadd+2,w
  3679  0372  00D9               	movwf	?___ftsub+2
  3680  0373  0008               	return
  3681  0374                     __end_of___ftsub:	
  3682  0374                     __ptext18:	
  3683 ;; *************** function ___ftdiv *****************
  3684 ;; Defined at:
  3685 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  f2              3   28[BANK0 ] float 
  3688 ;;  f1              3   31[BANK0 ] float 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  f3              3   38[BANK0 ] float 
  3691 ;;  sign            1   42[BANK0 ] unsigned char 
  3692 ;;  exp             1   41[BANK0 ] unsigned char 
  3693 ;;  cntr            1   37[BANK0 ] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  3   28[BANK0 ] float 
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0, pclath, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 1F/0
  3700 ;;		On exit  : 1F/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3703 ;;      Params:         0       6       0       0       0       0       0       0
  3704 ;;      Locals:         0       6       0       0       0       0       0       0
  3705 ;;      Temps:          0       3       0       0       0       0       0       0
  3706 ;;      Totals:         0      15       0       0       0       0       0       0
  3707 ;;Total ram usage:       15 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    5
  3710 ;; This function calls:
  3711 ;;		___ftpack
  3712 ;; This function is called by:
  3713 ;;		_DMX_loop
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           
  3718                           ;psect for function ___ftdiv
  3719  0374                     ___ftdiv:	
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3723  0374  083F               	movf	___ftdiv@f1,w
  3724  0375  00C2               	movwf	??___ftdiv
  3725  0376  0840               	movf	___ftdiv@f1+1,w
  3726  0377  00C3               	movwf	??___ftdiv+1
  3727  0378  0841               	movf	___ftdiv@f1+2,w
  3728  0379  00C4               	movwf	??___ftdiv+2
  3729  037A  1003               	clrc
  3730  037B  0D43               	rlf	??___ftdiv+1,w
  3731  037C  0D44               	rlf	??___ftdiv+2,w
  3732  037D  00C9               	movwf	___ftdiv@exp
  3733  037E  0849               	movf	___ftdiv@exp,w
  3734  037F  1D03               	btfss	3,2
  3735  0380  2B82               	goto	l4174
  3736  0381  2F17               	ljmp	PL108	;call to abstracted procedure
  3737  0382                     l4174:	
  3738  0382  083C               	movf	___ftdiv@f2,w
  3739  0383  00C2               	movwf	??___ftdiv
  3740  0384  083D               	movf	___ftdiv@f2+1,w
  3741  0385  00C3               	movwf	??___ftdiv+1
  3742  0386  083E               	movf	___ftdiv@f2+2,w
  3743  0387  00C4               	movwf	??___ftdiv+2
  3744  0388  1003               	clrc
  3745  0389  0D43               	rlf	??___ftdiv+1,w
  3746  038A  0D44               	rlf	??___ftdiv+2,w
  3747  038B  00CA               	movwf	___ftdiv@sign
  3748  038C  084A               	movf	___ftdiv@sign,w
  3749  038D  1D03               	btfss	3,2
  3750  038E  2B90               	goto	l1346
  3751  038F  2F17               	ljmp	PL108	;call to abstracted procedure
  3752  0390                     l1346:	
  3753  0390  3089               	movlw	137
  3754  0391  01C6               	clrf	___ftdiv@f3
  3755  0392  01C7               	clrf	___ftdiv@f3+1
  3756  0393  01C8               	clrf	___ftdiv@f3+2
  3757  0394  074A               	addwf	___ftdiv@sign,w
  3758  0395  00C2               	movwf	??___ftdiv
  3759  0396  02C9               	subwf	___ftdiv@exp,f
  3760  0397  0841               	movf	___ftdiv@f1+2,w
  3761  0398  00CA               	movwf	___ftdiv@sign
  3762  0399  083E               	movf	___ftdiv@f2+2,w
  3763  039A  06CA               	xorwf	___ftdiv@sign,f
  3764  039B  3080               	movlw	128
  3765  039C  05CA               	andwf	___ftdiv@sign,f
  3766  039D  3018               	movlw	24
  3767  039E  17C0               	bsf	___ftdiv@f1+1,7
  3768  039F  01C1               	clrf	___ftdiv@f1+2
  3769  03A0  17BD               	bsf	___ftdiv@f2+1,7
  3770  03A1  01BE               	clrf	___ftdiv@f2+2
  3771  03A2  00C5               	movwf	___ftdiv@cntr
  3772  03A3                     l4196:	
  3773  03A3  35C6               	lslf	___ftdiv@f3,f
  3774  03A4  0DC7               	rlf	___ftdiv@f3+1,f
  3775  03A5  0DC8               	rlf	___ftdiv@f3+2,f
  3776  03A6  083E               	movf	___ftdiv@f2+2,w
  3777  03A7  0241               	subwf	___ftdiv@f1+2,w
  3778  03A8  1D03               	skipz
  3779  03A9  2BB0               	goto	u3025
  3780  03AA  083D               	movf	___ftdiv@f2+1,w
  3781  03AB  0240               	subwf	___ftdiv@f1+1,w
  3782  03AC  1D03               	skipz
  3783  03AD  2BB0               	goto	u3025
  3784  03AE  083C               	movf	___ftdiv@f2,w
  3785  03AF  023F               	subwf	___ftdiv@f1,w
  3786  03B0                     u3025:	
  3787  03B0  1C03               	skipc
  3788  03B1  2BB9               	goto	l4202
  3789  03B2  083C               	movf	___ftdiv@f2,w
  3790  03B3  02BF               	subwf	___ftdiv@f1,f
  3791  03B4  083D               	movf	___ftdiv@f2+1,w
  3792  03B5  3BC0               	subwfb	___ftdiv@f1+1,f
  3793  03B6  083E               	movf	___ftdiv@f2+2,w
  3794  03B7  3BC1               	subwfb	___ftdiv@f1+2,f
  3795  03B8  1446               	bsf	___ftdiv@f3,0
  3796  03B9                     l4202:	
  3797  03B9  35BF               	lslf	___ftdiv@f1,f
  3798  03BA  0DC0               	rlf	___ftdiv@f1+1,f
  3799  03BB  0DC1               	rlf	___ftdiv@f1+2,f
  3800  03BC  0BC5               	decfsz	___ftdiv@cntr,f
  3801  03BD  2BA3               	goto	l4196
  3802  03BE  0846               	movf	___ftdiv@f3,w
  3803  03BF  00A0               	movwf	___ftpack@arg
  3804  03C0  0847               	movf	___ftdiv@f3+1,w
  3805  03C1  00A1               	movwf	___ftpack@arg+1
  3806  03C2  0848               	movf	___ftdiv@f3+2,w
  3807  03C3  00A2               	movwf	___ftpack@arg+2
  3808  03C4  0849               	movf	___ftdiv@exp,w
  3809  03C5  00A3               	movwf	___ftpack@exp
  3810  03C6  084A               	movf	___ftdiv@sign,w
  3811  03C7  00A4               	movwf	___ftpack@sign
  3812  03C8  2506               	fcall	___ftpack
  3813  03C9  0820               	movf	?___ftpack,w
  3814  03CA  00BC               	movwf	?___ftdiv
  3815  03CB  0821               	movf	?___ftpack+1,w
  3816  03CC  00BD               	movwf	?___ftdiv+1
  3817  03CD  0822               	movf	?___ftpack+2,w
  3818  03CE  00BE               	movwf	?___ftdiv+2
  3819  03CF  0008               	return
  3820  03D0                     __end_of___ftdiv:	
  3821  03D0                     __ptext17:	
  3822 ;; *************** function ___ftge *****************
  3823 ;; Defined at:
  3824 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  ff1             3   13[BANK0 ] float 
  3827 ;;  ff2             3   16[BANK0 ] float 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;		None               void
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0
  3834 ;; Tracked objects:
  3835 ;;		On entry : 1F/0
  3836 ;;		On exit  : 1F/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3839 ;;      Params:         0       6       0       0       0       0       0       0
  3840 ;;      Locals:         0       0       0       0       0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0       0       0       0
  3842 ;;      Totals:         0       6       0       0       0       0       0       0
  3843 ;;Total ram usage:        6 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    4
  3846 ;; This function calls:
  3847 ;;		Nothing
  3848 ;; This function is called by:
  3849 ;;		_DMX_loop
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           
  3854                           ;psect for function ___ftge
  3855  03D0                     ___ftge:	
  3856                           
  3857                           ;incstack = 0
  3858                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3859  03D0  1FAF               	btfss	___ftge@ff1+2,7
  3860  03D1  2BDF               	goto	l4214
  3861  03D2  082D               	movf	___ftge@ff1,w
  3862  03D3  3C00               	sublw	0
  3863  03D4  00AD               	movwf	___ftge@ff1
  3864  03D5  082E               	movf	___ftge@ff1+1,w
  3865  03D6  1C03               	skipc
  3866  03D7  0F2E               	incfsz	___ftge@ff1+1,w
  3867  03D8  3C00               	sublw	0
  3868  03D9  00AE               	movwf	___ftge@ff1+1
  3869  03DA  082F               	movf	___ftge@ff1+2,w
  3870  03DB  1C03               	skipc
  3871  03DC  0F2F               	incfsz	___ftge@ff1+2,w
  3872  03DD  3C80               	sublw	128
  3873  03DE  00AF               	movwf	___ftge@ff1+2
  3874  03DF                     l4214:	
  3875  03DF  1FB2               	btfss	___ftge@ff2+2,7
  3876  03E0  2BEE               	goto	l4218
  3877  03E1  0830               	movf	___ftge@ff2,w
  3878  03E2  3C00               	sublw	0
  3879  03E3  00B0               	movwf	___ftge@ff2
  3880  03E4  0831               	movf	___ftge@ff2+1,w
  3881  03E5  1C03               	skipc
  3882  03E6  0F31               	incfsz	___ftge@ff2+1,w
  3883  03E7  3C00               	sublw	0
  3884  03E8  00B1               	movwf	___ftge@ff2+1
  3885  03E9  0832               	movf	___ftge@ff2+2,w
  3886  03EA  1C03               	skipc
  3887  03EB  0F32               	incfsz	___ftge@ff2+2,w
  3888  03EC  3C80               	sublw	128
  3889  03ED  00B2               	movwf	___ftge@ff2+2
  3890  03EE                     l4218:	
  3891  03EE  3080               	movlw	128
  3892  03EF  06AF               	xorwf	___ftge@ff1+2,f
  3893  03F0  06B2               	xorwf	___ftge@ff2+2,f
  3894  03F1  0832               	movf	___ftge@ff2+2,w
  3895  03F2  022F               	subwf	___ftge@ff1+2,w
  3896  03F3  1D03               	skipz
  3897  03F4  0008               	return
  3898  03F5  0831               	movf	___ftge@ff2+1,w
  3899  03F6  022E               	subwf	___ftge@ff1+1,w
  3900  03F7  1D03               	skipz
  3901  03F8  0008               	return
  3902  03F9  0830               	movf	___ftge@ff2,w
  3903  03FA  022D               	subwf	___ftge@ff1,w
  3904  03FB  0008               	return
  3905  03FC                     __end_of___ftge:	
  3906  03FC                     __ptext15:	
  3907 ;; *************** function ___ftadd *****************
  3908 ;; Defined at:
  3909 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  f1              3   43[BANK0 ] float 
  3912 ;;  f2              3   46[BANK0 ] float 
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  exp1            1   54[BANK0 ] unsigned char 
  3915 ;;  exp2            1   53[BANK0 ] unsigned char 
  3916 ;;  sign            1   52[BANK0 ] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  3   43[BANK0 ] float 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0, pclath, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 1F/0
  3923 ;;		On exit  : 1F/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3926 ;;      Params:         0       6       0       0       0       0       0       0
  3927 ;;      Locals:         0       3       0       0       0       0       0       0
  3928 ;;      Temps:          0       3       0       0       0       0       0       0
  3929 ;;      Totals:         0      12       0       0       0       0       0       0
  3930 ;;Total ram usage:       12 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    5
  3933 ;; This function calls:
  3934 ;;		___ftpack
  3935 ;; This function is called by:
  3936 ;;		_DMX_loop
  3937 ;;		___ftsub
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function ___ftadd
  3943  03FC                     ___ftadd:	
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3947  03FC  084B               	movf	___ftadd@f1,w
  3948  03FD  00D1               	movwf	??___ftadd
  3949  03FE  084C               	movf	___ftadd@f1+1,w
  3950  03FF  00D2               	movwf	??___ftadd+1
  3951  0400  084D               	movf	___ftadd@f1+2,w
  3952  0401  00D3               	movwf	??___ftadd+2
  3953  0402  1003               	clrc
  3954  0403  0D52               	rlf	??___ftadd+1,w
  3955  0404  0D53               	rlf	??___ftadd+2,w
  3956  0405  00D6               	movwf	___ftadd@exp1
  3957  0406  084E               	movf	___ftadd@f2,w
  3958  0407  00D1               	movwf	??___ftadd
  3959  0408  084F               	movf	___ftadd@f2+1,w
  3960  0409  00D2               	movwf	??___ftadd+1
  3961  040A  0850               	movf	___ftadd@f2+2,w
  3962  040B  00D3               	movwf	??___ftadd+2
  3963  040C  1003               	clrc
  3964  040D  0D52               	rlf	??___ftadd+1,w
  3965  040E  0D53               	rlf	??___ftadd+2,w
  3966  040F  00D5               	movwf	___ftadd@exp2
  3967  0410  0856               	movf	___ftadd@exp1,w
  3968  0411  1903               	btfsc	3,2
  3969  0412  2C1F               	goto	l3956
  3970  0413  0855               	movf	___ftadd@exp2,w
  3971  0414  0256               	subwf	___ftadd@exp1,w
  3972  0415  0855               	movf	___ftadd@exp2,w
  3973  0416  1803               	skipnc
  3974  0417  2C27               	goto	L3
  3975  0418  00D1               	movwf	??___ftadd
  3976  0419  0856               	movf	___ftadd@exp1,w
  3977  041A  02D1               	subwf	??___ftadd,f
  3978  041B  3019               	movlw	25
  3979  041C  0251               	subwf	??___ftadd,w
  3980  041D  1C03               	skipc
  3981  041E  2C26               	goto	l3960
  3982  041F                     l3956:	
  3983  041F  084E               	movf	___ftadd@f2,w
  3984  0420  00CB               	movwf	?___ftadd
  3985  0421  084F               	movf	___ftadd@f2+1,w
  3986  0422  00CC               	movwf	?___ftadd+1
  3987  0423  0850               	movf	___ftadd@f2+2,w
  3988  0424  00CD               	movwf	?___ftadd+2
  3989  0425  0008               	return
  3990  0426                     l3960:	
  3991  0426  0855               	movf	___ftadd@exp2,w
  3992  0427                     L3:	
  3993  0427  1903               	btfsc	3,2
  3994  0428  0008               	return
  3995  0429  0856               	movf	___ftadd@exp1,w
  3996  042A  0255               	subwf	___ftadd@exp2,w
  3997  042B  1803               	skipnc
  3998  042C  2C35               	goto	l3966
  3999  042D  0856               	movf	___ftadd@exp1,w
  4000  042E  00D1               	movwf	??___ftadd
  4001  042F  0855               	movf	___ftadd@exp2,w
  4002  0430  02D1               	subwf	??___ftadd,f
  4003  0431  3019               	movlw	25
  4004  0432  0251               	subwf	??___ftadd,w
  4005  0433  1803               	btfsc	3,0
  4006  0434  0008               	return
  4007  0435                     l3966:	
  4008  0435  3006               	movlw	6
  4009  0436  00D4               	movwf	___ftadd@sign
  4010  0437  1BCD               	btfsc	___ftadd@f1+2,7
  4011  0438  17D4               	bsf	___ftadd@sign,7
  4012  0439  1BD0               	btfsc	___ftadd@f2+2,7
  4013  043A  1754               	bsf	___ftadd@sign,6
  4014  043B  17CC               	bsf	___ftadd@f1+1,7
  4015  043C  01CD               	clrf	___ftadd@f1+2
  4016  043D  17CF               	bsf	___ftadd@f2+1,7
  4017  043E  01D0               	clrf	___ftadd@f2+2
  4018  043F  0855               	movf	___ftadd@exp2,w
  4019  0440  0256               	subwf	___ftadd@exp1,w
  4020  0441  1803               	skipnc
  4021  0442  2C5A               	goto	l3988
  4022  0443                     l3978:	
  4023  0443  35CE               	lslf	___ftadd@f2,f
  4024  0444  0DCF               	rlf	___ftadd@f2+1,f
  4025  0445  0DD0               	rlf	___ftadd@f2+2,f
  4026  0446  03D5               	decf	___ftadd@exp2,f
  4027  0447  0855               	movf	___ftadd@exp2,w
  4028  0448  0656               	xorwf	___ftadd@exp1,w
  4029  0449  1903               	skipnz
  4030  044A  2C55               	goto	l3986
  4031  044B  03D4               	decf	___ftadd@sign,f
  4032  044C  0854               	movf	___ftadd@sign,w
  4033  044D  3907               	andlw	7
  4034  044E  1903               	btfsc	3,2
  4035  044F  2C55               	goto	l3986
  4036  0450  2C43               	goto	l3978
  4037  0451                     l3984:	
  4038  0451  36CD               	lsrf	___ftadd@f1+2,f
  4039  0452  0CCC               	rrf	___ftadd@f1+1,f
  4040  0453  0CCB               	rrf	___ftadd@f1,f
  4041  0454  0AD6               	incf	___ftadd@exp1,f
  4042  0455                     l3986:	
  4043  0455  0856               	movf	___ftadd@exp1,w
  4044  0456  0655               	xorwf	___ftadd@exp2,w
  4045  0457  1903               	btfsc	3,2
  4046  0458  2C74               	goto	l1328
  4047  0459  2C51               	goto	l3984
  4048  045A                     l3988:	
  4049  045A  0856               	movf	___ftadd@exp1,w
  4050  045B  0255               	subwf	___ftadd@exp2,w
  4051  045C  1803               	skipnc
  4052  045D  2C74               	goto	l1328
  4053  045E                     l3990:	
  4054  045E  35CB               	lslf	___ftadd@f1,f
  4055  045F  0DCC               	rlf	___ftadd@f1+1,f
  4056  0460  0DCD               	rlf	___ftadd@f1+2,f
  4057  0461  03D6               	decf	___ftadd@exp1,f
  4058  0462  0855               	movf	___ftadd@exp2,w
  4059  0463  0656               	xorwf	___ftadd@exp1,w
  4060  0464  1903               	skipnz
  4061  0465  2C70               	goto	l3998
  4062  0466  03D4               	decf	___ftadd@sign,f
  4063  0467  0854               	movf	___ftadd@sign,w
  4064  0468  3907               	andlw	7
  4065  0469  1903               	btfsc	3,2
  4066  046A  2C70               	goto	l3998
  4067  046B  2C5E               	goto	l3990
  4068  046C                     l3996:	
  4069  046C  36D0               	lsrf	___ftadd@f2+2,f
  4070  046D  0CCF               	rrf	___ftadd@f2+1,f
  4071  046E  0CCE               	rrf	___ftadd@f2,f
  4072  046F  0AD5               	incf	___ftadd@exp2,f
  4073  0470                     l3998:	
  4074  0470  0856               	movf	___ftadd@exp1,w
  4075  0471  0655               	xorwf	___ftadd@exp2,w
  4076  0472  1D03               	skipz
  4077  0473  2C6C               	goto	l3996
  4078  0474                     l1328:	
  4079  0474  1FD4               	btfss	___ftadd@sign,7
  4080  0475  2C7F               	goto	l4004
  4081  0476  30FF               	movlw	255
  4082  0477  06CB               	xorwf	___ftadd@f1,f
  4083  0478  06CC               	xorwf	___ftadd@f1+1,f
  4084  0479  06CD               	xorwf	___ftadd@f1+2,f
  4085  047A  0ACB               	incf	___ftadd@f1,f
  4086  047B  1903               	skipnz
  4087  047C  0ACC               	incf	___ftadd@f1+1,f
  4088  047D  1903               	skipnz
  4089  047E  0ACD               	incf	___ftadd@f1+2,f
  4090  047F                     l4004:	
  4091  047F  1F54               	btfss	___ftadd@sign,6
  4092  0480  2C87               	goto	l4010
  4093  0481  2706  3180         	fcall	PL98	;call to abstracted procedure
  4094  0483  1903               	skipnz
  4095  0484  0ACF               	incf	___ftadd@f2+1,f
  4096  0485  1903               	skipnz
  4097  0486  0AD0               	incf	___ftadd@f2+2,f
  4098  0487                     l4010:	
  4099  0487  01D4               	clrf	___ftadd@sign
  4100  0488  084B               	movf	___ftadd@f1,w
  4101  0489  07CE               	addwf	___ftadd@f2,f
  4102  048A  084C               	movf	___ftadd@f1+1,w
  4103  048B  3DCF               	addwfc	___ftadd@f2+1,f
  4104  048C  084D               	movf	___ftadd@f1+2,w
  4105  048D  3DD0               	addwfc	___ftadd@f2+2,f
  4106  048E  1FD0               	btfss	___ftadd@f2+2,7
  4107  048F  2C98               	goto	l4022
  4108  0490  2706  3180         	fcall	PL98	;call to abstracted procedure
  4109  0492  1903               	skipnz
  4110  0493  0ACF               	incf	___ftadd@f2+1,f
  4111  0494  1903               	skipnz
  4112  0495  0AD0               	incf	___ftadd@f2+2,f
  4113  0496  01D4               	clrf	___ftadd@sign
  4114  0497  0AD4               	incf	___ftadd@sign,f
  4115  0498                     l4022:	
  4116  0498  084E               	movf	___ftadd@f2,w
  4117  0499  00A0               	movwf	___ftpack@arg
  4118  049A  084F               	movf	___ftadd@f2+1,w
  4119  049B  00A1               	movwf	___ftpack@arg+1
  4120  049C  0850               	movf	___ftadd@f2+2,w
  4121  049D  00A2               	movwf	___ftpack@arg+2
  4122  049E  0856               	movf	___ftadd@exp1,w
  4123  049F  00A3               	movwf	___ftpack@exp
  4124  04A0  0854               	movf	___ftadd@sign,w
  4125  04A1  00A4               	movwf	___ftpack@sign
  4126  04A2  2506               	fcall	___ftpack
  4127  04A3  0820               	movf	?___ftpack,w
  4128  04A4  00CB               	movwf	?___ftadd
  4129  04A5  0821               	movf	?___ftpack+1,w
  4130  04A6  00CC               	movwf	?___ftadd+1
  4131  04A7  0822               	movf	?___ftpack+2,w
  4132  04A8  00CD               	movwf	?___ftadd+2
  4133  04A9  0008               	return
  4134  04AA                     __end_of___ftadd:	
  4135  04AA                     __ptext16:	
  4136 ;; *************** function ___ftmul *****************
  4137 ;; Defined at:
  4138 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  f1              3   13[BANK0 ] float 
  4141 ;;  f2              3   16[BANK0 ] float 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  4144 ;;  sign            1   27[BANK0 ] unsigned char 
  4145 ;;  cntr            1   26[BANK0 ] unsigned char 
  4146 ;;  exp             1   22[BANK0 ] unsigned char 
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  3   13[BANK0 ] float 
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 1F/0
  4153 ;;		On exit  : 1F/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4156 ;;      Params:         0       6       0       0       0       0       0       0
  4157 ;;      Locals:         0       6       0       0       0       0       0       0
  4158 ;;      Temps:          0       3       0       0       0       0       0       0
  4159 ;;      Totals:         0      15       0       0       0       0       0       0
  4160 ;;Total ram usage:       15 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    5
  4163 ;; This function calls:
  4164 ;;		___ftpack
  4165 ;; This function is called by:
  4166 ;;		_DMX_loop
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           
  4171                           ;psect for function ___ftmul
  4172  04AA                     ___ftmul:	
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4176  04AA  082D               	movf	___ftmul@f1,w
  4177  04AB  00B3               	movwf	??___ftmul
  4178  04AC  082E               	movf	___ftmul@f1+1,w
  4179  04AD  00B4               	movwf	??___ftmul+1
  4180  04AE  082F               	movf	___ftmul@f1+2,w
  4181  04AF  00B5               	movwf	??___ftmul+2
  4182  04B0  1003               	clrc
  4183  04B1  0D34               	rlf	??___ftmul+1,w
  4184  04B2  0D35               	rlf	??___ftmul+2,w
  4185  04B3  00B6               	movwf	___ftmul@exp
  4186  04B4  0836               	movf	___ftmul@exp,w
  4187  04B5  1D03               	btfss	3,2
  4188  04B6  2CB8               	goto	l4234
  4189  04B7  2F1B               	ljmp	PL110	;call to abstracted procedure
  4190  04B8                     l4234:	
  4191  04B8  0830               	movf	___ftmul@f2,w
  4192  04B9  00B3               	movwf	??___ftmul
  4193  04BA  0831               	movf	___ftmul@f2+1,w
  4194  04BB  00B4               	movwf	??___ftmul+1
  4195  04BC  0832               	movf	___ftmul@f2+2,w
  4196  04BD  00B5               	movwf	??___ftmul+2
  4197  04BE  1003               	clrc
  4198  04BF  0D34               	rlf	??___ftmul+1,w
  4199  04C0  0D35               	rlf	??___ftmul+2,w
  4200  04C1  00BB               	movwf	___ftmul@sign
  4201  04C2  083B               	movf	___ftmul@sign,w
  4202  04C3  1D03               	btfss	3,2
  4203  04C4  2CC6               	goto	l4238
  4204  04C5  2F1B               	ljmp	PL110	;call to abstracted procedure
  4205  04C6                     l4238:	
  4206  04C6  083B               	movf	___ftmul@sign,w
  4207  04C7  3E7B               	addlw	123
  4208  04C8  07B6               	addwf	___ftmul@exp,f
  4209  04C9  082F               	movf	___ftmul@f1+2,w
  4210  04CA  00BB               	movwf	___ftmul@sign
  4211  04CB  0832               	movf	___ftmul@f2+2,w
  4212  04CC  06BB               	xorwf	___ftmul@sign,f
  4213  04CD  3080               	movlw	128
  4214  04CE  05BB               	andwf	___ftmul@sign,f
  4215  04CF  30FF               	movlw	255
  4216  04D0  17AE               	bsf	___ftmul@f1+1,7
  4217  04D1  17B1               	bsf	___ftmul@f2+1,7
  4218  04D2  05B0               	andwf	___ftmul@f2,f
  4219  04D3  05B1               	andwf	___ftmul@f2+1,f
  4220  04D4  3007               	movlw	7
  4221  04D5  01B2               	clrf	___ftmul@f2+2
  4222  04D6  01B7               	clrf	___ftmul@f3_as_product
  4223  04D7  01B8               	clrf	___ftmul@f3_as_product+1
  4224  04D8  01B9               	clrf	___ftmul@f3_as_product+2
  4225  04D9  00BA               	movwf	___ftmul@cntr
  4226  04DA                     l4256:	
  4227  04DA  1C2D               	btfss	___ftmul@f1,0
  4228  04DB  2CDE               	goto	l4260
  4229  04DC  26E5  3180         	fcall	PL78	;call to abstracted procedure
  4230  04DE                     l4260:	
  4231  04DE  36AF               	lsrf	___ftmul@f1+2,f
  4232  04DF  0CAE               	rrf	___ftmul@f1+1,f
  4233  04E0  0CAD               	rrf	___ftmul@f1,f
  4234  04E1  35B0               	lslf	___ftmul@f2,f
  4235  04E2  0DB1               	rlf	___ftmul@f2+1,f
  4236  04E3  0DB2               	rlf	___ftmul@f2+2,f
  4237  04E4  0BBA               	decfsz	___ftmul@cntr,f
  4238  04E5  2CDA               	goto	l4256
  4239  04E6  3009               	movlw	9
  4240  04E7  00BA               	movwf	___ftmul@cntr
  4241  04E8                     l4268:	
  4242  04E8  1C2D               	btfss	___ftmul@f1,0
  4243  04E9  2CEC               	goto	l4272
  4244  04EA  26E5  3180         	fcall	PL78	;call to abstracted procedure
  4245  04EC                     l4272:	
  4246  04EC  36AF               	lsrf	___ftmul@f1+2,f
  4247  04ED  0CAE               	rrf	___ftmul@f1+1,f
  4248  04EE  0CAD               	rrf	___ftmul@f1,f
  4249  04EF  36B9               	lsrf	___ftmul@f3_as_product+2,f
  4250  04F0  0CB8               	rrf	___ftmul@f3_as_product+1,f
  4251  04F1  0CB7               	rrf	___ftmul@f3_as_product,f
  4252  04F2  0BBA               	decfsz	___ftmul@cntr,f
  4253  04F3  2CE8               	goto	l4268
  4254  04F4  0837               	movf	___ftmul@f3_as_product,w
  4255  04F5  00A0               	movwf	___ftpack@arg
  4256  04F6  0838               	movf	___ftmul@f3_as_product+1,w
  4257  04F7  00A1               	movwf	___ftpack@arg+1
  4258  04F8  0839               	movf	___ftmul@f3_as_product+2,w
  4259  04F9  00A2               	movwf	___ftpack@arg+2
  4260  04FA  0836               	movf	___ftmul@exp,w
  4261  04FB  00A3               	movwf	___ftpack@exp
  4262  04FC  083B               	movf	___ftmul@sign,w
  4263  04FD  00A4               	movwf	___ftpack@sign
  4264  04FE  2506               	fcall	___ftpack
  4265  04FF  0820               	movf	?___ftpack,w
  4266  0500  00AD               	movwf	?___ftmul
  4267  0501  0821               	movf	?___ftpack+1,w
  4268  0502  00AE               	movwf	?___ftmul+1
  4269  0503  0822               	movf	?___ftpack+2,w
  4270  0504  00AF               	movwf	?___ftmul+2
  4271  0505  0008               	return
  4272  0506                     __end_of___ftmul:	
  4273  0506                     __ptext20:	
  4274 ;; *************** function ___ftpack *****************
  4275 ;; Defined at:
  4276 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  arg             3    0[BANK0 ] unsigned um
  4279 ;;  exp             1    3[BANK0 ] unsigned char 
  4280 ;;  sign            1    4[BANK0 ] unsigned char 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  3    0[BANK0 ] float 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0
  4287 ;; Tracked objects:
  4288 ;;		On entry : 1F/0
  4289 ;;		On exit  : 1F/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4292 ;;      Params:         0       5       0       0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0
  4294 ;;      Temps:          0       3       0       0       0       0       0       0
  4295 ;;      Totals:         0       8       0       0       0       0       0       0
  4296 ;;Total ram usage:        8 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    4
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		___awtoft
  4303 ;;		___ftadd
  4304 ;;		___ftdiv
  4305 ;;		___ftmul
  4306 ;;		___lbtoft
  4307 ;;		___lwtoft
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function ___ftpack
  4313  0506                     ___ftpack:	
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4317  0506  0823               	movf	___ftpack@exp,w
  4318  0507  1903               	btfsc	3,2
  4319  0508  2D0E               	goto	l1292
  4320  0509  0822               	movf	___ftpack@arg+2,w
  4321  050A  0421               	iorwf	___ftpack@arg+1,w
  4322  050B  0420               	iorwf	___ftpack@arg,w
  4323  050C  1D03               	skipz
  4324  050D  2D16               	goto	l3922
  4325  050E                     l1292:	
  4326  050E  01A0               	clrf	?___ftpack
  4327  050F  01A1               	clrf	?___ftpack+1
  4328  0510  01A2               	clrf	?___ftpack+2
  4329  0511  0008               	return
  4330  0512                     l3920:	
  4331  0512  0AA3               	incf	___ftpack@exp,f
  4332  0513  36A2               	lsrf	___ftpack@arg+2,f
  4333  0514  0CA1               	rrf	___ftpack@arg+1,f
  4334  0515  0CA0               	rrf	___ftpack@arg,f
  4335  0516                     l3922:	
  4336  0516  30FE               	movlw	254
  4337  0517  0522               	andwf	___ftpack@arg+2,w
  4338  0518  1903               	btfsc	3,2
  4339  0519  2D24               	goto	l3926
  4340  051A  2D12               	goto	l3920
  4341  051B                     l3924:	
  4342  051B  0AA3               	incf	___ftpack@exp,f
  4343  051C  0AA0               	incf	___ftpack@arg,f
  4344  051D  1903               	skipnz
  4345  051E  0AA1               	incf	___ftpack@arg+1,f
  4346  051F  1903               	skipnz
  4347  0520  0AA2               	incf	___ftpack@arg+2,f
  4348  0521  36A2               	lsrf	___ftpack@arg+2,f
  4349  0522  0CA1               	rrf	___ftpack@arg+1,f
  4350  0523  0CA0               	rrf	___ftpack@arg,f
  4351  0524                     l3926:	
  4352  0524  30FF               	movlw	255
  4353  0525  0522               	andwf	___ftpack@arg+2,w
  4354  0526  1903               	btfsc	3,2
  4355  0527  2D31               	goto	l3930
  4356  0528  2D1B               	goto	l3924
  4357  0529                     l3932:	
  4358  0529  3002               	movlw	2
  4359  052A  0223               	subwf	___ftpack@exp,w
  4360  052B  1C03               	btfss	3,0
  4361  052C  2D33               	goto	l1304
  4362  052D  03A3               	decf	___ftpack@exp,f
  4363  052E  35A0               	lslf	___ftpack@arg,f
  4364  052F  0DA1               	rlf	___ftpack@arg+1,f
  4365  0530  0DA2               	rlf	___ftpack@arg+2,f
  4366  0531                     l3930:	
  4367  0531  1FA1               	btfss	___ftpack@arg+1,7
  4368  0532  2D29               	goto	l3932
  4369  0533                     l1304:	
  4370  0533  1C23               	btfss	___ftpack@exp,0
  4371  0534  13A1               	bcf	___ftpack@arg+1,7
  4372  0535  36A3               	lsrf	___ftpack@exp,f
  4373  0536  0823               	movf	___ftpack@exp,w
  4374  0537  00A7               	movwf	??___ftpack+2
  4375  0538  01A6               	clrf	??___ftpack+1
  4376  0539  01A5               	clrf	??___ftpack
  4377  053A  0825               	movf	??___ftpack,w
  4378  053B  04A0               	iorwf	___ftpack@arg,f
  4379  053C  0826               	movf	??___ftpack+1,w
  4380  053D  04A1               	iorwf	___ftpack@arg+1,f
  4381  053E  0827               	movf	??___ftpack+2,w
  4382  053F  04A2               	iorwf	___ftpack@arg+2,f
  4383  0540  0824               	movf	___ftpack@sign,w
  4384  0541  1D03               	btfss	3,2
  4385  0542  17A2               	bsf	___ftpack@arg+2,7
  4386  0543  0008               	return
  4387  0544                     __end_of___ftpack:	
  4388  0544                     __ptext19:	
  4389 ;; *************** function ___awtoft *****************
  4390 ;; Defined at:
  4391 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  c               2    8[BANK0 ] int 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  sign            1   11[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  3    8[BANK0 ] float 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 1F/0
  4402 ;;		On exit  : 1F/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4405 ;;      Params:         0       3       0       0       0       0       0       0
  4406 ;;      Locals:         0       1       0       0       0       0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0
  4408 ;;      Totals:         0       4       0       0       0       0       0       0
  4409 ;;Total ram usage:        4 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    5
  4412 ;; This function calls:
  4413 ;;		___ftpack
  4414 ;; This function is called by:
  4415 ;;		_DMX_loop
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function ___awtoft
  4421  0544                     ___awtoft:	
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4425  0544  01AB               	clrf	___awtoft@sign
  4426  0545  1FA9               	btfss	___awtoft@c+1,7
  4427  0546  2D4E               	goto	l4166
  4428  0547  09A8               	comf	___awtoft@c,f
  4429  0548  09A9               	comf	___awtoft@c+1,f
  4430  0549  0AA8               	incf	___awtoft@c,f
  4431  054A  1903               	skipnz
  4432  054B  0AA9               	incf	___awtoft@c+1,f
  4433  054C  01AB               	clrf	___awtoft@sign
  4434  054D  0AAB               	incf	___awtoft@sign,f
  4435  054E                     l4166:	
  4436  054E  0828               	movf	___awtoft@c,w
  4437  054F  00A0               	movwf	___ftpack@arg
  4438  0550  0829               	movf	___awtoft@c+1,w
  4439  0551  00A1               	movwf	___ftpack@arg+1
  4440  0552  308E               	movlw	142
  4441  0553  01A2               	clrf	___ftpack@arg+2
  4442  0554  00A3               	movwf	___ftpack@exp
  4443  0555  082B               	movf	___awtoft@sign,w
  4444  0556  00A4               	movwf	___ftpack@sign
  4445  0557  2506               	fcall	___ftpack
  4446  0558  0820               	movf	?___ftpack,w
  4447  0559  00A8               	movwf	?___awtoft
  4448  055A  0821               	movf	?___ftpack+1,w
  4449  055B  00A9               	movwf	?___awtoft+1
  4450  055C  0822               	movf	?___ftpack+2,w
  4451  055D  00AA               	movwf	?___awtoft+2
  4452  055E  0008               	return
  4453  055F                     __end_of___awtoft:	
  4454  055F                     __ptext13:	
  4455 ;; *************** function ___fttol *****************
  4456 ;; Defined at:
  4457 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  f1              3   61[BANK0 ] float 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  lval            4   69[BANK0 ] unsigned long 
  4462 ;;  exp1            1   73[BANK0 ] unsigned char 
  4463 ;;  sign1           1   68[BANK0 ] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  4   61[BANK0 ] long 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 1F/0
  4470 ;;		On exit  : 1F/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4473 ;;      Params:         0       4       0       0       0       0       0       0
  4474 ;;      Locals:         0       6       0       0       0       0       0       0
  4475 ;;      Temps:          0       3       0       0       0       0       0       0
  4476 ;;      Totals:         0      13       0       0       0       0       0       0
  4477 ;;Total ram usage:       13 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    4
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_DMX_loop
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function ___fttol
  4489  055F                     ___fttol:	
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4493  055F  26D1  3180         	fcall	PL66	;call to abstracted procedure
  4494  0561  1003               	clrc
  4495  0562  0D62               	rlf	??___fttol+1,w
  4496  0563  0D63               	rlf	??___fttol+2,w
  4497  0564  00E9               	movwf	___fttol@exp1
  4498  0565  0869               	movf	___fttol@exp1,w
  4499  0566  1D03               	btfss	3,2
  4500  0567  2D6D               	goto	l4294
  4501  0568                     l4292:	
  4502  0568  01DD               	clrf	?___fttol
  4503  0569  01DE               	clrf	?___fttol+1
  4504  056A  01DF               	clrf	?___fttol+2
  4505  056B  01E0               	clrf	?___fttol+3
  4506  056C  0008               	return
  4507  056D                     l4294:	
  4508  056D  26D1  3180         	fcall	PL66	;call to abstracted procedure
  4509  056F  3017               	movlw	23
  4510  0570                     u3155:	
  4511  0570  36E3               	lsrf	??___fttol+2,f
  4512  0571  0CE2               	rrf	??___fttol+1,f
  4513  0572  0CE1               	rrf	??___fttol,f
  4514  0573  0B89               	decfsz	9,f
  4515  0574  2D70               	goto	u3155
  4516  0575  0861               	movf	??___fttol,w
  4517  0576  00E4               	movwf	___fttol@sign1
  4518  0577  17DE               	bsf	___fttol@f1+1,7
  4519  0578  01DF               	clrf	___fttol@f1+2
  4520  0579  085D               	movf	___fttol@f1,w
  4521  057A  00E5               	movwf	___fttol@lval
  4522  057B  085E               	movf	___fttol@f1+1,w
  4523  057C  00E6               	movwf	___fttol@lval+1
  4524  057D  085F               	movf	___fttol@f1+2,w
  4525  057E  00E7               	movwf	___fttol@lval+2
  4526  057F  308E               	movlw	142
  4527  0580  01E8               	clrf	___fttol@lval+3
  4528  0581  02E9               	subwf	___fttol@exp1,f
  4529  0582  1FE9               	btfss	___fttol@exp1,7
  4530  0583  2D90               	goto	l4314
  4531  0584  0869               	movf	___fttol@exp1,w
  4532  0585  3A80               	xorlw	128
  4533  0586  3E8F               	addlw	143
  4534  0587  1C03               	btfss	3,0
  4535  0588  2D68               	goto	l4292
  4536  0589                     l4310:	
  4537  0589  36E8               	lsrf	___fttol@lval+3,f
  4538  058A  0CE7               	rrf	___fttol@lval+2,f
  4539  058B  0CE6               	rrf	___fttol@lval+1,f
  4540  058C  0CE5               	rrf	___fttol@lval,f
  4541  058D  0FE9               	incfsz	___fttol@exp1,f
  4542  058E  2D89               	goto	l4310
  4543  058F  2D9D               	goto	l4322
  4544  0590                     l4314:	
  4545  0590  3018               	movlw	24
  4546  0591  0269               	subwf	___fttol@exp1,w
  4547  0592  1803               	btfsc	3,0
  4548  0593  2D68               	goto	l4292
  4549  0594                     l4320:	
  4550  0594  0869               	movf	___fttol@exp1,w
  4551  0595  1903               	btfsc	3,2
  4552  0596  2D9D               	goto	l4322
  4553  0597  35E5               	lslf	___fttol@lval,f
  4554  0598  0DE6               	rlf	___fttol@lval+1,f
  4555  0599  0DE7               	rlf	___fttol@lval+2,f
  4556  059A  0DE8               	rlf	___fttol@lval+3,f
  4557  059B  03E9               	decf	___fttol@exp1,f
  4558  059C  2D94               	goto	l4320
  4559  059D                     l4322:	
  4560  059D  0864               	movf	___fttol@sign1,w
  4561  059E  1903               	btfsc	3,2
  4562  059F  2DAB               	goto	l4326
  4563  05A0  09E5               	comf	___fttol@lval,f
  4564  05A1  09E6               	comf	___fttol@lval+1,f
  4565  05A2  09E7               	comf	___fttol@lval+2,f
  4566  05A3  09E8               	comf	___fttol@lval+3,f
  4567  05A4  0AE5               	incf	___fttol@lval,f
  4568  05A5  1903               	skipnz
  4569  05A6  0AE6               	incf	___fttol@lval+1,f
  4570  05A7  1903               	skipnz
  4571  05A8  0AE7               	incf	___fttol@lval+2,f
  4572  05A9  1903               	skipnz
  4573  05AA  0AE8               	incf	___fttol@lval+3,f
  4574  05AB                     l4326:	
  4575  05AB  0868               	movf	___fttol@lval+3,w
  4576  05AC  00E0               	movwf	?___fttol+3
  4577  05AD  0867               	movf	___fttol@lval+2,w
  4578  05AE  00DF               	movwf	?___fttol+2
  4579  05AF  0866               	movf	___fttol@lval+1,w
  4580  05B0  00DE               	movwf	?___fttol+1
  4581  05B1  0865               	movf	___fttol@lval,w
  4582  05B2  00DD               	movwf	?___fttol
  4583  05B3  0008               	return
  4584  05B4                     __end_of___fttol:	
  4585  05B4                     __ptext11:	
  4586 ;; *************** function ___lwtoft *****************
  4587 ;; Defined at:
  4588 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  c               2    8[BANK0 ] unsigned int 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  3    8[BANK0 ] float 
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 1F/0
  4599 ;;		On exit  : 1F/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4602 ;;      Params:         0       3       0       0       0       0       0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0
  4605 ;;      Totals:         0       3       0       0       0       0       0       0
  4606 ;;Total ram usage:        3 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    5
  4609 ;; This function calls:
  4610 ;;		___ftpack
  4611 ;; This function is called by:
  4612 ;;		_DMX_loop
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function ___lwtoft
  4618  05B4                     ___lwtoft:	
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4622  05B4  0828               	movf	___lwtoft@c,w
  4623  05B5  00A0               	movwf	___ftpack@arg
  4624  05B6  0829               	movf	___lwtoft@c+1,w
  4625  05B7  00A1               	movwf	___ftpack@arg+1
  4626  05B8  308E               	movlw	142
  4627  05B9  01A2               	clrf	___ftpack@arg+2
  4628  05BA  00A3               	movwf	___ftpack@exp
  4629  05BB  01A4               	clrf	___ftpack@sign
  4630  05BC  2506               	fcall	___ftpack
  4631  05BD  0820               	movf	?___ftpack,w
  4632  05BE  00A8               	movwf	?___lwtoft
  4633  05BF  0821               	movf	?___ftpack+1,w
  4634  05C0  00A9               	movwf	?___lwtoft+1
  4635  05C1  0822               	movf	?___ftpack+2,w
  4636  05C2  00AA               	movwf	?___lwtoft+2
  4637  05C3  0008               	return
  4638  05C4                     __end_of___lwtoft:	
  4639  05C4                     PL2:	
  4640  05C4  0757               	addwf	DMX_loop@Addr^(0+384),w
  4641  05C5  0757               	addwf	DMX_loop@Addr^(0+384),w
  4642  05C6  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4643  05C7  0086               	movwf	6
  4644  05C8  0187               	clrf	7
  4645  05C9  0020               	movlb	0	; select bank0
  4646  05CA  0828               	movf	?___lbtoft,w
  4647  05CB  3FC0               	movwi [0]fsr1
  4648  05CC  0829               	movf	?___lbtoft+1,w
  4649  05CD  3FC1               	movwi [1]fsr1
  4650  05CE  082A               	movf	?___lbtoft+2,w
  4651  05CF  3FC2               	movwi [2]fsr1
  4652  05D0  0023               	movlb	3	; select bank3
  4653  05D1  0857               	movf	DMX_loop@Addr^(0+384),w
  4654  05D2  0757               	addwf	DMX_loop@Addr^(0+384),w
  4655  05D3  0757               	addwf	DMX_loop@Addr^(0+384),w
  4656  05D4  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4657  05D5  0086               	movwf	6
  4658  05D6  0020               	movlb	0	; select bank0
  4659  05D7  0828               	movf	?___lbtoft,w
  4660  05D8  3FC0               	movwi [0]fsr1
  4661  05D9  0829               	movf	?___lbtoft+1,w
  4662  05DA  3FC1               	movwi [1]fsr1
  4663  05DB  082A               	movf	?___lbtoft+2,w
  4664  05DC  3FC2               	movwi [2]fsr1
  4665  05DD  0008               	return
  4666  05DE                     __end_ofPL2:	
  4667  05DE                     PL4:	
  4668  05DE  0757               	addwf	DMX_loop@Addr^(0+384),w
  4669  05DF  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4670  05E0  0086               	movwf	6
  4671  05E1  0187               	clrf	7
  4672  05E2  0020               	movlb	0	; select bank0
  4673  05E3  0008               	return
  4674  05E4                     __end_ofPL4:	
  4675  05E4                     PL6:	
  4676  05E4  0023               	movlb	3	; select bank3
  4677  05E5  0857               	movf	DMX_loop@Addr^(0+384),w
  4678  05E6  0757               	addwf	DMX_loop@Addr^(0+384),w
  4679  05E7  0757               	addwf	DMX_loop@Addr^(0+384),w
  4680  05E8  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4681  05E9  0086               	movwf	6
  4682  05EA  0187               	clrf	7
  4683  05EB  3F40               	moviw [0]fsr1
  4684  05EC  0020               	movlb	0	; select bank0
  4685  05ED  0008               	return
  4686  05EE                     __end_ofPL6:	
  4687  05EE                     PL8:	
  4688  05EE  0023               	movlb	3	; select bank3
  4689  05EF  0857               	movf	DMX_loop@Addr^(0+384),w
  4690  05F0  0757               	addwf	DMX_loop@Addr^(0+384),w
  4691  05F1  0757               	addwf	DMX_loop@Addr^(0+384),w
  4692  05F2  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4693  05F3  0086               	movwf	6
  4694  05F4  0008               	return
  4695  05F5                     __end_ofPL8:	
  4696  05F5                     PL10:	
  4697  05F5  0081               	movwf	1
  4698  05F6  0857               	movf	DMX_loop@Addr^(0+384),w
  4699  05F7  0757               	addwf	DMX_loop@Addr^(0+384),w
  4700  05F8  0757               	addwf	DMX_loop@Addr^(0+384),w
  4701  05F9  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4702  05FA  0086               	movwf	6
  4703  05FB  3F40               	moviw [0]fsr1
  4704  05FC  0021               	movlb	1	; select bank1
  4705  05FD  00E4               	movwf	??_DMX_loop^(0+128)
  4706  05FE  3F41               	moviw [1]fsr1
  4707  05FF  00E5               	movwf	(??_DMX_loop^(0+128)+1)
  4708  0600  3F42               	moviw [2]fsr1
  4709  0601  00E6               	movwf	(??_DMX_loop^(0+128)+2)
  4710  0602  0008               	return
  4711  0603                     __end_ofPL10:	
  4712  0603                     PL12:	
  4713  0603  0857               	movf	?___ftsub,w
  4714  0604  0021               	movlb	1	; select bank1
  4715  0605  00C3               	movwf	_DMX_difference^(0+128)
  4716  0606  0020               	movlb	0	; select bank0
  4717  0607  0858               	movf	?___ftsub+1,w
  4718  0608  0021               	movlb	1	; select bank1
  4719  0609  00C4               	movwf	(_DMX_difference+1)^(0+128)
  4720  060A  0020               	movlb	0	; select bank0
  4721  060B  0859               	movf	?___ftsub+2,w
  4722  060C  0021               	movlb	1	; select bank1
  4723  060D  00C5               	movwf	(_DMX_difference+2)^(0+128)
  4724  060E  0843               	movf	_DMX_difference^(0+128),w
  4725  060F  0020               	movlb	0	; select bank0
  4726  0610  00AD               	movwf	___ftge@ff1
  4727  0611  0021               	movlb	1	; select bank1
  4728  0612  0844               	movf	(_DMX_difference+1)^(0+128),w
  4729  0613  0020               	movlb	0	; select bank0
  4730  0614  00AE               	movwf	___ftge@ff1+1
  4731  0615  0021               	movlb	1	; select bank1
  4732  0616  0845               	movf	(_DMX_difference+2)^(0+128),w
  4733  0617  0020               	movlb	0	; select bank0
  4734  0618  00AF               	movwf	___ftge@ff1+2
  4735  0619  30CD               	movlw	205
  4736  061A  00B0               	movwf	___ftge@ff2
  4737  061B  304C               	movlw	76
  4738  061C  00B1               	movwf	___ftge@ff2+1
  4739  061D  303D               	movlw	61
  4740  061E  00B2               	movwf	___ftge@ff2+2
  4741  061F  0008               	return
  4742  0620                     __end_ofPL12:	
  4743  0620                     PL14:	
  4744  0620  0828               	movf	?___lbtoft,w
  4745  0621  00BC               	movwf	___ftdiv@f2
  4746  0622  0829               	movf	?___lbtoft+1,w
  4747  0623  00BD               	movwf	___ftdiv@f2+1
  4748  0624  082A               	movf	?___lbtoft+2,w
  4749  0625  00BE               	movwf	___ftdiv@f2+2
  4750  0626  3040               	movlw	64
  4751  0627  01AD               	clrf	___ftmul@f1
  4752  0628  01AE               	clrf	___ftmul@f1+1
  4753  0629  00AF               	movwf	___ftmul@f1+2
  4754  062A  0021               	movlb	1	; select bank1
  4755  062B  0843               	movf	_DMX_difference^(0+128),w
  4756  062C  0020               	movlb	0	; select bank0
  4757  062D  00B0               	movwf	___ftmul@f2
  4758  062E  0021               	movlb	1	; select bank1
  4759  062F  0844               	movf	(_DMX_difference+1)^(0+128),w
  4760  0630  0020               	movlb	0	; select bank0
  4761  0631  00B1               	movwf	___ftmul@f2+1
  4762  0632  0021               	movlb	1	; select bank1
  4763  0633  0845               	movf	(_DMX_difference+2)^(0+128),w
  4764  0634  0020               	movlb	0	; select bank0
  4765  0635  00B2               	movwf	___ftmul@f2+2
  4766  0636  0008               	return
  4767  0637                     __end_ofPL14:	
  4768  0637                     PL18:	
  4769  0637  3F40               	moviw [0]fsr1
  4770  0638  0020               	movlb	0	; select bank0
  4771  0639  00DA               	movwf	___ftsub@f1
  4772  063A  3F41               	moviw [1]fsr1
  4773  063B  00DB               	movwf	___ftsub@f1+1
  4774  063C  3F42               	moviw [2]fsr1
  4775  063D  00DC               	movwf	___ftsub@f1+2
  4776  063E  0008               	return
  4777  063F                     __end_ofPL18:	
  4778  063F                     PL20:	
  4779  063F  3F40               	moviw [0]fsr1
  4780  0640  0020               	movlb	0	; select bank0
  4781  0641  00D7               	movwf	___ftsub@f2
  4782  0642  3F41               	moviw [1]fsr1
  4783  0643  00D8               	movwf	___ftsub@f2+1
  4784  0644  3F42               	moviw [2]fsr1
  4785  0645  00D9               	movwf	___ftsub@f2+2
  4786  0646  0008               	return
  4787  0647                     __end_ofPL20:	
  4788  0647                     PL22:	
  4789  0647  0023               	movlb	3	; select bank3
  4790  0648  0857               	movf	DMX_loop@Addr^(0+384),w
  4791  0649  0757               	addwf	DMX_loop@Addr^(0+384),w
  4792  064A  0757               	addwf	DMX_loop@Addr^(0+384),w
  4793  064B  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4794  064C  0086               	movwf	6
  4795  064D  3001               	movlw	1	; select bank3/4
  4796  064E  0087               	movwf	7
  4797  064F  0020               	movlb	0	; select bank0
  4798  0650  083C               	movf	?___ftdiv,w
  4799  0651  3FC0               	movwi [0]fsr1
  4800  0652  083D               	movf	?___ftdiv+1,w
  4801  0653  3FC1               	movwi [1]fsr1
  4802  0654  083E               	movf	?___ftdiv+2,w
  4803  0655  3FC2               	movwi [2]fsr1
  4804  0656  0008               	return
  4805  0657                     __end_ofPL22:	
  4806  0657                     PL24:	
  4807  0657  00D7               	movwf	___ftsub@f2
  4808  0658  3F41               	moviw [1]fsr1
  4809  0659  00D8               	movwf	___ftsub@f2+1
  4810  065A  3F42               	moviw [2]fsr1
  4811  065B  00D9               	movwf	___ftsub@f2+2
  4812  065C  0008               	return
  4813  065D                     __end_ofPL24:	
  4814  065D                     PL26:	
  4815  065D  0857               	movf	DMX_loop@Addr^(0+384),w
  4816  065E  0757               	addwf	DMX_loop@Addr^(0+384),w
  4817  065F  0757               	addwf	DMX_loop@Addr^(0+384),w
  4818  0660  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4819  0661  0086               	movwf	6
  4820  0662  3001               	movlw	1	; select bank3/4
  4821  0663  0087               	movwf	7
  4822  0664  0008               	return
  4823  0665                     __end_ofPL26:	
  4824  0665                     PL28:	
  4825  0665  0086               	movwf	6
  4826  0666  3F40               	moviw [0]fsr1
  4827  0667  0021               	movlb	1	; select bank1
  4828  0668  00E5               	movwf	(??_DMX_loop+1)^(0+128)
  4829  0669  3F41               	moviw [1]fsr1
  4830  066A  00E6               	movwf	((??_DMX_loop+1)^(0+128)+1)
  4831  066B  0865               	movf	(??_DMX_loop+1)^(0+128),w
  4832  066C  0086               	movwf	6
  4833  066D  0866               	movf	(??_DMX_loop+2)^(0+128),w
  4834  066E  0087               	movwf	7
  4835  066F  0864               	movf	??_DMX_loop^(0+128),w
  4836  0670  0081               	movwf	1
  4837  0671  0023               	movlb	3	; select bank3
  4838  0672  3557               	lslf	DMX_loop@Addr^(0+384),w
  4839  0673  0008               	return
  4840  0674                     __end_ofPL28:	
  4841  0674                     PL30:	
  4842  0674  0857               	movf	DMX_loop@Addr^(0+384),w
  4843  0675  0757               	addwf	DMX_loop@Addr^(0+384),w
  4844  0676  0757               	addwf	DMX_loop@Addr^(0+384),w
  4845  0677  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4846  0678  0086               	movwf	6
  4847  0679  0008               	return
  4848  067A                     __end_ofPL30:	
  4849  067A                     PL34:	
  4850  067A  0021               	movlb	1	; select bank1
  4851  067B  00E4               	movwf	??_DMX_loop^(0+128)
  4852  067C  302D               	movlw	low (_PWM| (0+32768))
  4853  067D  01E5               	clrf	(??_DMX_loop^(0+128)+1)
  4854  067E  35E4               	lslf	??_DMX_loop^(0+128),f
  4855  067F  0DE5               	rlf	(??_DMX_loop^(0+128)+1),f
  4856  0680  0764               	addwf	??_DMX_loop^(0+128),w
  4857  0681  0084               	movwf	4
  4858  0682  3087               	movlw	high (_PWM| (0+32768))
  4859  0683  3D65               	addwfc	(??_DMX_loop+1)^(0+128),w
  4860  0684  0085               	movwf	5
  4861  0685  3F00               	moviw [0]fsr0
  4862  0686  0008               	return
  4863  0687                     __end_ofPL34:	
  4864  0687                     PL40:	
  4865  0687  00DA               	movwf	___ftsub@f1
  4866  0688  3F41               	moviw [1]fsr1
  4867  0689  00DB               	movwf	___ftsub@f1+1
  4868  068A  3F42               	moviw [2]fsr1
  4869  068B  00DC               	movwf	___ftsub@f1+2
  4870  068C  0008               	return
  4871  068D                     __end_ofPL40:	
  4872  068D                     PL44:	
  4873  068D  3FC2               	movwi [2]fsr1
  4874  068E  087B               	movf	_DMXPeriod,w
  4875  068F  0021               	movlb	1	; select bank1
  4876  0690  00E4               	movwf	??_DMX_loop^(0+128)
  4877  0691  36E4               	lsrf	??_DMX_loop^(0+128),f
  4878  0692  36E4               	lsrf	??_DMX_loop^(0+128),f
  4879  0693  0864               	movf	??_DMX_loop^(0+128),w
  4880  0694  0020               	movlb	0	; select bank0
  4881  0695  00A8               	movwf	___awtoft@c
  4882  0696  01A9               	clrf	___awtoft@c+1
  4883  0697  0008               	return
  4884  0698                     __end_ofPL44:	
  4885  0698                     PL46:	
  4886  0698  0828               	movf	?___awtoft,w
  4887  0699  00BC               	movwf	___ftdiv@f2
  4888  069A  0829               	movf	?___awtoft+1,w
  4889  069B  00BD               	movwf	___ftdiv@f2+1
  4890  069C  082A               	movf	?___awtoft+2,w
  4891  069D  00BE               	movwf	___ftdiv@f2+2
  4892  069E  0008               	return
  4893  069F                     __end_ofPL46:	
  4894  069F                     PL48:	
  4895  069F  3F40               	moviw [0]fsr1
  4896  06A0  0020               	movlb	0	; select bank0
  4897  06A1  00CB               	movwf	___ftadd@f1
  4898  06A2  3F41               	moviw [1]fsr1
  4899  06A3  00CC               	movwf	___ftadd@f1+1
  4900  06A4  3F42               	moviw [2]fsr1
  4901  06A5  00CD               	movwf	___ftadd@f1+2
  4902  06A6  0008               	return
  4903  06A7                     __end_ofPL48:	
  4904  06A7                     PL50:	
  4905  06A7  0021               	movlb	1	; select bank1
  4906  06A8  0864               	movf	??_DMX_loop^(0+128),w
  4907  06A9  3FC0               	movwi [0]fsr1
  4908  06AA  0865               	movf	(??_DMX_loop+1)^(0+128),w
  4909  06AB  3FC1               	movwi [1]fsr1
  4910  06AC  0866               	movf	(??_DMX_loop+2)^(0+128),w
  4911  06AD  3FC2               	movwi [2]fsr1
  4912  06AE  0023               	movlb	3	; select bank3
  4913  06AF  0008               	return
  4914  06B0                     __end_ofPL50:	
  4915  06B0                     PL52:	
  4916  06B0  0023               	movlb	3	; select bank3
  4917  06B1  3557               	lslf	DMX_loop@Addr^(0+384),w
  4918  06B2  3E40               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  4919  06B3  0086               	movwf	6
  4920  06B4  3001               	movlw	1	; select bank2/3
  4921  06B5  0087               	movwf	7
  4922  06B6  0008               	return
  4923  06B7                     __end_ofPL52:	
  4924  06B7                     PL54:	
  4925  06B7  0857               	movf	DMX_loop@Addr^(0+384),w
  4926  06B8  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4927  06B9  0086               	movwf	6
  4928  06BA  30FC               	movlw	-4
  4929  06BB  0187               	clrf	7
  4930  06BC  0581               	andwf	1,f
  4931  06BD  0020               	movlb	0	; select bank0
  4932  06BE  086C               	movf	_rxdata,w
  4933  06BF  0008               	return
  4934  06C0                     __end_ofPL54:	
  4935  06C0                     PL58:	
  4936  06C0  0086               	movwf	6
  4937  06C1  3001               	movlw	1	; select bank2/3
  4938  06C2  0087               	movwf	7
  4939  06C3  0801               	movf	1,w
  4940  06C4  0021               	movlb	1	; select bank1
  4941  06C5  00E4               	movwf	??_DMX_loop^(0+128)
  4942  06C6  0023               	movlb	3	; select bank3
  4943  06C7  3557               	lslf	DMX_loop@Addr^(0+384),w
  4944  06C8  0008               	return
  4945  06C9                     __end_ofPL58:	
  4946  06C9                     PL60:	
  4947  06C9  0023               	movlb	3	; select bank3
  4948  06CA  0857               	movf	DMX_loop@Addr^(0+384),w
  4949  06CB  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  4950  06CC  0086               	movwf	6
  4951  06CD  0187               	clrf	7
  4952  06CE  0801               	movf	1,w
  4953  06CF  39FC               	andlw	-4
  4954  06D0  0008               	return
  4955  06D1                     __end_ofPL60:	
  4956  06D1                     PL66:	
  4957  06D1  085D               	movf	___fttol@f1,w
  4958  06D2  00E1               	movwf	??___fttol
  4959  06D3  085E               	movf	___fttol@f1+1,w
  4960  06D4  00E2               	movwf	??___fttol+1
  4961  06D5  085F               	movf	___fttol@f1+2,w
  4962  06D6  00E3               	movwf	??___fttol+2
  4963  06D7  0008               	return
  4964  06D8                     __end_ofPL66:	
  4965  06D8                     PL70:	
  4966  06D8  0857               	movf	?___ftsub,w
  4967  06D9  3FC0               	movwi [0]fsr1
  4968  06DA  0858               	movf	?___ftsub+1,w
  4969  06DB  3FC1               	movwi [1]fsr1
  4970  06DC  0859               	movf	?___ftsub+2,w
  4971  06DD  0008               	return
  4972  06DE                     __end_ofPL70:	
  4973  06DE                     PL74:	
  4974  06DE  082D               	movf	?___ftmul,w
  4975  06DF  00BF               	movwf	___ftdiv@f1
  4976  06E0  082E               	movf	?___ftmul+1,w
  4977  06E1  00C0               	movwf	___ftdiv@f1+1
  4978  06E2  082F               	movf	?___ftmul+2,w
  4979  06E3  00C1               	movwf	___ftdiv@f1+2
  4980  06E4  0008               	return
  4981  06E5                     __end_ofPL74:	
  4982  06E5                     PL78:	
  4983  06E5  0830               	movf	___ftmul@f2,w
  4984  06E6  07B7               	addwf	___ftmul@f3_as_product,f
  4985  06E7  0831               	movf	___ftmul@f2+1,w
  4986  06E8  3DB8               	addwfc	___ftmul@f3_as_product+1,f
  4987  06E9  0832               	movf	___ftmul@f2+2,w
  4988  06EA  3DB9               	addwfc	___ftmul@f3_as_product+2,f
  4989  06EB  0008               	return
  4990  06EC                     __end_ofPL78:	
  4991  06EC                     PL80:	
  4992  06EC  0857               	movf	?___ftsub,w
  4993  06ED  00BF               	movwf	___ftdiv@f1
  4994  06EE  0858               	movf	?___ftsub+1,w
  4995  06EF  00C0               	movwf	___ftdiv@f1+1
  4996  06F0  0859               	movf	?___ftsub+2,w
  4997  06F1  00C1               	movwf	___ftdiv@f1+2
  4998  06F2  0008               	return
  4999  06F3                     __end_ofPL80:	
  5000  06F3                     PL84:	
  5001  06F3  0828               	movf	?___lbtoft,w
  5002  06F4  00D7               	movwf	___ftsub@f2
  5003  06F5  0829               	movf	?___lbtoft+1,w
  5004  06F6  00D8               	movwf	___ftsub@f2+1
  5005  06F7  082A               	movf	?___lbtoft+2,w
  5006  06F8  00D9               	movwf	___ftsub@f2+2
  5007  06F9  0008               	return
  5008  06FA                     __end_ofPL84:	
  5009  06FA                     PL88:	
  5010  06FA  084B               	movf	?___ftadd,w
  5011  06FB  3FC0               	movwi [0]fsr1
  5012  06FC  084C               	movf	?___ftadd+1,w
  5013  06FD  3FC1               	movwi [1]fsr1
  5014  06FE  084D               	movf	?___ftadd+2,w
  5015  06FF  0008               	return
  5016  0700                     __end_ofPL88:	
  5017  0700                     PL92:	
  5018  0700  01A1               	clrf	??_ADC_loop+1
  5019  0701  35A0               	lslf	??_ADC_loop,f
  5020  0702  0DA1               	rlf	??_ADC_loop+1,f
  5021  0703  0720               	addwf	??_ADC_loop,w
  5022  0704  0084               	movwf	4
  5023  0705  0008               	return
  5024  0706                     __end_ofPL92:	
  5025  0706                     PL98:	
  5026  0706  30FF               	movlw	255
  5027  0707  06CE               	xorwf	___ftadd@f2,f
  5028  0708  06CF               	xorwf	___ftadd@f2+1,f
  5029  0709  06D0               	xorwf	___ftadd@f2+2,f
  5030  070A  0ACE               	incf	___ftadd@f2,f
  5031  070B  0008               	return
  5032  070C                     __end_ofPL98:	
  5033  070C                     PL100:	
  5034  070C  3080               	movlw	128
  5035  070D  00CF               	movwf	79	;volatile
  5036  070E  00BF               	movwf	63	;volatile
  5037  070F  00AF               	movwf	47	;volatile
  5038  0710  009F               	movwf	31	;volatile
  5039  0711  0008               	return
  5040  0712                     __end_ofPL100:	
  5041  0712                     PL106:	
  5042  0712  0857               	movf	DMX_loop@Addr^(0+384),w
  5043  0713  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  5044  0714  0086               	movwf	6
  5045  0715  0801               	movf	1,w
  5046  0716  0008               	return
  5047  0717                     __end_ofPL106:	
  5048  0717                     PL108:	
  5049  0717  01BC               	clrf	?___ftdiv
  5050  0718  01BD               	clrf	?___ftdiv+1
  5051  0719  01BE               	clrf	?___ftdiv+2
  5052  071A  0008               	return
  5053  071B                     __end_ofPL108:	
  5054  071B                     PL110:	
  5055  071B  01AD               	clrf	?___ftmul
  5056  071C  01AE               	clrf	?___ftmul+1
  5057  071D  01AF               	clrf	?___ftmul+2
  5058  071E  0008               	return
  5059  071F                     __end_ofPL110:	
  5060  071F                     __ptext1:	
  5061 ;; *************** function _timer1_init *****************
  5062 ;; Defined at:
  5063 ;;		line 15 in file "Timer.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;		None
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  2  112[None  ] int 
  5070 ;; Registers used:
  5071 ;;		wreg, status,2
  5072 ;; Tracked objects:
  5073 ;;		On entry : B1F/3
  5074 ;;		On exit  : B1F/1
  5075 ;;		Unchanged: B00/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5077 ;;      Params:         0       0       0       0       0       0       0       0
  5078 ;;      Locals:         0       0       0       0       0       0       0       0
  5079 ;;      Temps:          0       0       0       0       0       0       0       0
  5080 ;;      Totals:         0       0       0       0       0       0       0       0
  5081 ;;Total ram usage:        0 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    4
  5084 ;; This function calls:
  5085 ;;		Nothing
  5086 ;; This function is called by:
  5087 ;;		_main
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _timer1_init
  5093  071F                     _timer1_init:	
  5094                           
  5095                           ;Timer.c: 16: TMR1IE = 1;
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _timer1_init: [wreg+status,2]
  5099  071F  0021               	movlb	1	; select bank1
  5100  0720  1411               	bsf	17,0	;volatile
  5101                           
  5102                           ;Timer.c: 17: T1CON = 0b00110001;
  5103  0721  3031               	movlw	49
  5104  0722  0020               	movlb	0	; select bank0
  5105  0723  0098               	movwf	24	;volatile
  5106                           
  5107                           ;Timer.c: 18: TimerState = TIMER_StartUpDelay;
  5108  0724  3003               	movlw	3
  5109  0725  0022               	movlb	2	; select bank2
  5110  0726  00EE               	movwf	_TimerState^(0+256)	;volatile
  5111                           
  5112                           ;Timer.c: 19: TMR1=0;
  5113  0727  0020               	movlb	0	; select bank0
  5114  0728  0196               	clrf	22	;volatile
  5115  0729  0197               	clrf	23	;volatile
  5116                           
  5117                           ;Timer.c: 20: Timer_DelayCount=0;
  5118  072A  0021               	movlb	1	; select bank1
  5119  072B  01D7               	clrf	_Timer_DelayCount^(0+128)	;volatile
  5120  072C  0008               	return
  5121  072D                     __end_of_timer1_init:	
  5122                           
  5123                           	psect	bssCOMMON
  5124  0076                     __pbssCOMMON:	
  5125  0076                     _DMX_Address:	
  5126  0076                     	ds	2
  5127  0078                     _ADC_Data:	
  5128  0078                     	ds	1
  5129  0079                     _PackCount:	
  5130  0079                     	ds	1
  5131  007A                     _PDCount:	
  5132  007A                     	ds	1
  5133                           
  5134                           	psect	dataCOMMON
  5135  007B                     __pdataCOMMON:	
  5136  007B                     _DMXPeriod:	
  5137  007B                     	ds	1
  5138                           
  5139                           	psect	bssBANK0
  5140  006A                     __pbssBANK0:	
  5141  006A                     _DMX_Flags:	
  5142  006A                     	ds	2
  5143  006C                     _rxdata:	
  5144  006C                     	ds	1
  5145                           
  5146                           	psect	bssBANK1
  5147  00A0                     __pbssBANK1:	
  5148  00A0                     _DMX_TargetBright:	
  5149  00A0                     	ds	12
  5150  00AC                     _DMX_CurrentBright:	
  5151  00AC                     	ds	12
  5152  00B8                     _Timer:	
  5153  00B8                     	ds	7
  5154  00BF                     _DMXSign:	
  5155  00BF                     	ds	4
  5156  00C3                     _DMX_difference:	
  5157  00C3                     	ds	3
  5158  00C6                     _checkSum:	
  5159  00C6                     	ds	2
  5160  00C8                     _TX_PD_Flag:	
  5161  00C8                     	ds	2
  5162  00CA                     _PD_Flag:	
  5163  00CA                     	ds	2
  5164  00CC                     _PD_ID:	
  5165  00CC                     	ds	2
  5166  00CE                     _PD_Manu:	
  5167  00CE                     	ds	2
  5168  00D0                     _TxCount:	
  5169  00D0                     	ds	2
  5170  00D2                     _RxTimer:	
  5171  00D2                     	ds	2
  5172  00D4                     _RxAddrCount:	
  5173  00D4                     	ds	2
  5174  00D6                     _ADC_Flags:	
  5175  00D6                     	ds	1
  5176  00D7                     _Timer_DelayCount:	
  5177  00D7                     	ds	1
  5178  00D8                     _TX_PDCount:	
  5179  00D8                     	ds	1
  5180  00D9                     _TxState:	
  5181  00D9                     	ds	1
  5182  00DA                     _TxByte:	
  5183  00DA                     	ds	1
  5184  00DB                     _DMXStepConst:	
  5185  00DB                     	ds	1
  5186  00DC                     _DMXPeriodDimming:	
  5187  00DC                     	ds	1
  5188  00DD                     _DMXPeriodConst:	
  5189  00DD                     	ds	1
  5190  00DE                     _RxState:	
  5191  00DE                     	ds	1
  5192  00DF                     _RxDataPtr:	
  5193  00DF                     	ds	1
  5194  00E0                     _RxData:	
  5195  00E0                     	ds	4
  5196                           
  5197                           	psect	dataBANK1
  5198  00EC                     __pdataBANK1:	
  5199  00EC                     _DMX_sumRepeat:	
  5200  00EC                     	ds	4
  5201                           
  5202                           	psect	bssBANK2
  5203  0120                     __pbssBANK2:	
  5204  0120                     _RX_RDM_Data:	
  5205  0120                     	ds	24
  5206  0138                     _PWMDCLptr:	
  5207  0138                     	ds	8
  5208  0140                     _CurrentPWM:	
  5209  0140                     	ds	8
  5210  0148                     _preRxData:	
  5211  0148                     	ds	4
  5212  014C                     _i:	
  5213  014C                     	ds	2
  5214  014E                     _TX_RDM_Data:	
  5215  014E                     	ds	24
  5216                           
  5217                           	psect	dataBANK2
  5218  0166                     __pdataBANK2:	
  5219  0166                     _DMX_Repeat:	
  5220  0166                     	ds	8
  5221                           
  5222                           	psect	bssBANK3
  5223  01A0                     __pbssBANK3:	
  5224  01A0                     _DMX_SpaceBright:	
  5225  01A0                     	ds	12
  5226  01AC                     _PWMLDCONptr:	
  5227  01AC                     	ds	8
  5228  01B4                     _PWMDCHptr:	
  5229  01B4                     	ds	8
  5230  01BC                     _DISCOVERY_RDM_Data:	
  5231  01BC                     	ds	24
  5232                           
  5233                           	psect	clrtext
  5234  0A62                     clear_ram0:	
  5235                           ;	Called with FSR0 containing the base address, and
  5236                           ;	btemp/btemp+1 has the size to clear
  5237                           
  5238  0A62  0064               	clrwdt	;clear the watchdog before getting into this loop
  5239  0A63                     clrloop0:	
  5240  0A63  3001               	movlw	1
  5241  0A64  0180               	clrf	0	;clear RAM location pointed to by FSR
  5242  0A65  3101               	addfsr 0,1
  5243  0A66  02FE               	subwf	126,f
  5244  0A67  3000               	movlw	0
  5245  0A68  3BFF               	subwfb	127,f
  5246  0A69  087F               	movf	127,w
  5247  0A6A  047E               	iorwf	126,w
  5248  0A6B  1903               	btfsc	3,2
  5249  0A6C  3400               	retlw	0	;all done for this memory range, return
  5250  0A6D  2A63               	goto	clrloop0	;have we reached the end yet?
  5251                           
  5252                           	psect	cstackBANK3
  5253  01D4                     __pcstackBANK3:	
  5254  01D4                     _DMX_loop$1446:	
  5255                           
  5256                           ; 3 bytes @ 0x0
  5257  01D4                     	ds	3
  5258  01D7                     DMX_loop@Addr:	
  5259                           
  5260                           ; 1 bytes @ 0x3
  5261  01D7                     	ds	1
  5262                           
  5263                           	psect	cstackBANK1
  5264  00E4                     __pcstackBANK1:	
  5265  00E4                     ??_DMX_loop:	
  5266                           
  5267                           ; 1 bytes @ 0x0
  5268  00E4                     	ds	8
  5269                           
  5270                           	psect	cstackCOMMON
  5271  0070                     __pcstackCOMMON:	
  5272  0070                     ?_DMX_loop:	
  5273  0070                     ??_ADC_interrupt:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0070                     ??_DMX_interrput:	
  5277                           ; 1 bytes @ 0x0
  5278                           
  5279  0070                     ??_RDM_tx_interrupt:	
  5280                           ; 1 bytes @ 0x0
  5281                           
  5282  0070                     ?_RDM_discovery_CC:	
  5283                           ; 1 bytes @ 0x0
  5284                           
  5285  0070                     ?_RDM_GET_CC:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0070                     ?_RDM_SET_CC:	
  5289                           ; 1 bytes @ 0x0
  5290                           
  5291  0070                     ?_RDM_TXSTART:	
  5292                           ; 1 bytes @ 0x0
  5293                           
  5294  0070                     ?_TX_RDM_Response_Set:	
  5295                           ; 1 bytes @ 0x0
  5296                           
  5297  0070                     ?_main:	
  5298                           ; 1 bytes @ 0x0
  5299                           
  5300  0070                     ?_isr:	
  5301                           ; 1 bytes @ 0x0
  5302                           
  5303  0070                     ?_DMX_init:	
  5304                           ; 1 bytes @ 0x0
  5305                           
  5306  0070                     ??_DMX_init:	
  5307                           ; 1 bytes @ 0x0
  5308                           
  5309  0070                     ?_ADC_init:	
  5310                           ; 1 bytes @ 0x0
  5311                           
  5312  0070                     ??_ADC_init:	
  5313                           ; 1 bytes @ 0x0
  5314                           
  5315  0070                     ?_RDM_init:	
  5316                           ; 1 bytes @ 0x0
  5317                           
  5318  0070                     ?_RDM_tx_TimerBreak:	
  5319                           ; 1 bytes @ 0x0
  5320                           
  5321  0070                     ?___bmul:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0070                     ?_timer1_init:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0070                     ?_ADC_loop:	
  5328                           ; 2 bytes @ 0x0
  5329                           
  5330  0070                     ?_RDM_rx_loop:	
  5331                           ; 2 bytes @ 0x0
  5332                           
  5333  0070                     ?_ADC_interrupt:	
  5334                           ; 2 bytes @ 0x0
  5335                           
  5336  0070                     ?_DMX_interrput:	
  5337                           ; 2 bytes @ 0x0
  5338                           
  5339  0070                     ?_timer1_interrupt:	
  5340                           ; 2 bytes @ 0x0
  5341                           
  5342  0070                     ?_RDM_tx_interrupt:	
  5343                           ; 2 bytes @ 0x0
  5344                           
  5345  0070                     ___bmul@multiplicand:	
  5346                           ; 2 bytes @ 0x0
  5347                           
  5348                           
  5349                           ; 1 bytes @ 0x0
  5350  0070                     	ds	1
  5351  0071                     ??___bmul:	
  5352  0071                     ___bmul@product:	
  5353                           ; 1 bytes @ 0x1
  5354                           
  5355                           
  5356                           ; 1 bytes @ 0x1
  5357  0071                     	ds	1
  5358  0072                     DMX_interrput@RxDat:	
  5359  0072                     ___bmul@multiplier:	
  5360                           ; 1 bytes @ 0x2
  5361                           
  5362                           
  5363                           ; 1 bytes @ 0x2
  5364  0072                     	ds	1
  5365  0073                     ??_RDM_init:	
  5366  0073                     DMX_init@Addr:	
  5367                           ; 1 bytes @ 0x3
  5368                           
  5369                           
  5370                           ; 1 bytes @ 0x3
  5371  0073                     	ds	2
  5372  0075                     ??_timer1_interrupt:	
  5373                           
  5374                           ; 1 bytes @ 0x5
  5375  0075                     	ds	1
  5376  0076                     ??_isr:	
  5377                           
  5378                           	psect	cstackBANK0
  5379  0020                     __pcstackBANK0:	
  5380                           ; 1 bytes @ 0x6
  5381                           
  5382  0020                     ??_timer1_init:	
  5383  0020                     ??_ADC_loop:	
  5384                           ; 1 bytes @ 0x0
  5385                           
  5386  0020                     ??_TX_RDM_Response_Set:	
  5387                           ; 1 bytes @ 0x0
  5388                           
  5389  0020                     ??_RDM_tx_TimerBreak:	
  5390                           ; 1 bytes @ 0x0
  5391                           
  5392  0020                     ?_RDM_get_checkSum:	
  5393                           ; 1 bytes @ 0x0
  5394                           
  5395  0020                     ?___ftpack:	
  5396                           ; 2 bytes @ 0x0
  5397                           
  5398  0020                     ___ftpack@arg:	
  5399                           ; 3 bytes @ 0x0
  5400                           
  5401  0020                     RDM_get_checkSum@Data:	
  5402                           ; 3 bytes @ 0x0
  5403                           
  5404                           
  5405                           ; 24 bytes @ 0x0
  5406  0020                     	ds	3
  5407  0023                     ___ftpack@exp:	
  5408                           
  5409                           ; 1 bytes @ 0x3
  5410  0023                     	ds	1
  5411  0024                     ___ftpack@sign:	
  5412                           
  5413                           ; 1 bytes @ 0x4
  5414  0024                     	ds	1
  5415  0025                     ??___ftpack:	
  5416                           
  5417                           ; 1 bytes @ 0x5
  5418  0025                     	ds	3
  5419  0028                     ?___awtoft:	
  5420  0028                     ?___lbtoft:	
  5421                           ; 3 bytes @ 0x8
  5422                           
  5423  0028                     ?___lwtoft:	
  5424                           ; 3 bytes @ 0x8
  5425                           
  5426  0028                     ___awtoft@c:	
  5427                           ; 3 bytes @ 0x8
  5428                           
  5429  0028                     ___lwtoft@c:	
  5430                           ; 2 bytes @ 0x8
  5431                           
  5432                           
  5433                           ; 2 bytes @ 0x8
  5434  0028                     	ds	3
  5435  002B                     ??___awtoft:	
  5436  002B                     ??___lwtoft:	
  5437                           ; 1 bytes @ 0xB
  5438                           
  5439  002B                     ___awtoft@sign:	
  5440                           ; 1 bytes @ 0xB
  5441                           
  5442                           
  5443                           ; 1 bytes @ 0xB
  5444  002B                     	ds	1
  5445  002C                     ??___lbtoft:	
  5446  002C                     ___lbtoft@c:	
  5447                           ; 1 bytes @ 0xC
  5448                           
  5449                           
  5450                           ; 1 bytes @ 0xC
  5451  002C                     	ds	1
  5452  002D                     ?___ftge:	
  5453  002D                     ?___ftmul:	
  5454                           ; 1 bit 
  5455                           
  5456  002D                     ___ftge@ff1:	
  5457                           ; 3 bytes @ 0xD
  5458                           
  5459  002D                     ___ftmul@f1:	
  5460                           ; 3 bytes @ 0xD
  5461                           
  5462                           
  5463                           ; 3 bytes @ 0xD
  5464  002D                     	ds	3
  5465  0030                     ___ftge@ff2:	
  5466  0030                     ___ftmul@f2:	
  5467                           ; 3 bytes @ 0x10
  5468                           
  5469                           
  5470                           ; 3 bytes @ 0x10
  5471  0030                     	ds	3
  5472  0033                     ??___ftge:	
  5473  0033                     ??___ftmul:	
  5474                           ; 1 bytes @ 0x13
  5475                           
  5476                           
  5477                           ; 1 bytes @ 0x13
  5478  0033                     	ds	3
  5479  0036                     ___ftmul@exp:	
  5480                           
  5481                           ; 1 bytes @ 0x16
  5482  0036                     	ds	1
  5483  0037                     ___ftmul@f3_as_product:	
  5484                           
  5485                           ; 3 bytes @ 0x17
  5486  0037                     	ds	1
  5487  0038                     RDM_get_checkSum@len:	
  5488                           
  5489                           ; 1 bytes @ 0x18
  5490  0038                     	ds	1
  5491  0039                     ??_RDM_get_checkSum:	
  5492  0039                     ??_RDM_TXSTART:	
  5493                           ; 1 bytes @ 0x19
  5494                           
  5495                           
  5496                           ; 1 bytes @ 0x19
  5497  0039                     	ds	1
  5498  003A                     ??_RDM_discovery_CC:	
  5499  003A                     ??_RDM_GET_CC:	
  5500                           ; 1 bytes @ 0x1A
  5501                           
  5502  003A                     ??_RDM_SET_CC:	
  5503                           ; 1 bytes @ 0x1A
  5504                           
  5505  003A                     ___ftmul@cntr:	
  5506                           ; 1 bytes @ 0x1A
  5507                           
  5508                           
  5509                           ; 1 bytes @ 0x1A
  5510  003A                     	ds	1
  5511  003B                     ___ftmul@sign:	
  5512                           
  5513                           ; 1 bytes @ 0x1B
  5514  003B                     	ds	1
  5515  003C                     ?___ftdiv:	
  5516  003C                     ___ftdiv@f2:	
  5517                           ; 3 bytes @ 0x1C
  5518                           
  5519                           
  5520                           ; 3 bytes @ 0x1C
  5521  003C                     	ds	2
  5522  003E                     ??_RDM_rx_loop:	
  5523                           
  5524                           ; 1 bytes @ 0x1E
  5525  003E                     	ds	1
  5526  003F                     ___ftdiv@f1:	
  5527                           
  5528                           ; 3 bytes @ 0x1F
  5529  003F                     	ds	3
  5530  0042                     ??___ftdiv:	
  5531                           
  5532                           ; 1 bytes @ 0x22
  5533  0042                     	ds	3
  5534  0045                     ___ftdiv@cntr:	
  5535                           
  5536                           ; 1 bytes @ 0x25
  5537  0045                     	ds	1
  5538  0046                     ___ftdiv@f3:	
  5539                           
  5540                           ; 3 bytes @ 0x26
  5541  0046                     	ds	3
  5542  0049                     ___ftdiv@exp:	
  5543                           
  5544                           ; 1 bytes @ 0x29
  5545  0049                     	ds	1
  5546  004A                     ___ftdiv@sign:	
  5547                           
  5548                           ; 1 bytes @ 0x2A
  5549  004A                     	ds	1
  5550  004B                     ?___ftadd:	
  5551  004B                     ___ftadd@f1:	
  5552                           ; 3 bytes @ 0x2B
  5553                           
  5554                           
  5555                           ; 3 bytes @ 0x2B
  5556  004B                     	ds	3
  5557  004E                     ___ftadd@f2:	
  5558                           
  5559                           ; 3 bytes @ 0x2E
  5560  004E                     	ds	3
  5561  0051                     ??___ftadd:	
  5562                           
  5563                           ; 1 bytes @ 0x31
  5564  0051                     	ds	3
  5565  0054                     ___ftadd@sign:	
  5566                           
  5567                           ; 1 bytes @ 0x34
  5568  0054                     	ds	1
  5569  0055                     ___ftadd@exp2:	
  5570                           
  5571                           ; 1 bytes @ 0x35
  5572  0055                     	ds	1
  5573  0056                     ___ftadd@exp1:	
  5574                           
  5575                           ; 1 bytes @ 0x36
  5576  0056                     	ds	1
  5577  0057                     ?___ftsub:	
  5578  0057                     ___ftsub@f2:	
  5579                           ; 3 bytes @ 0x37
  5580                           
  5581                           
  5582                           ; 3 bytes @ 0x37
  5583  0057                     	ds	3
  5584  005A                     ___ftsub@f1:	
  5585                           
  5586                           ; 3 bytes @ 0x3A
  5587  005A                     	ds	3
  5588  005D                     ??___ftsub:	
  5589  005D                     ?___fttol:	
  5590                           ; 1 bytes @ 0x3D
  5591                           
  5592  005D                     ___fttol@f1:	
  5593                           ; 4 bytes @ 0x3D
  5594                           
  5595                           
  5596                           ; 3 bytes @ 0x3D
  5597  005D                     	ds	4
  5598  0061                     ??___fttol:	
  5599                           
  5600                           ; 1 bytes @ 0x41
  5601  0061                     	ds	3
  5602  0064                     ___fttol@sign1:	
  5603                           
  5604                           ; 1 bytes @ 0x44
  5605  0064                     	ds	1
  5606  0065                     ___fttol@lval:	
  5607                           
  5608                           ; 4 bytes @ 0x45
  5609  0065                     	ds	4
  5610  0069                     ___fttol@exp1:	
  5611                           
  5612                           ; 1 bytes @ 0x49
  5613  0069                     	ds	1
  5614  006A                     ??_main:	
  5615                           
  5616                           	psect	text3
  5617  0D2A                     __ptext3:	
  5618 ;; *************** function _RDM_discovery_CC *****************
  5619 ;; Defined at:
  5620 ;;		line 56 in file "RDM_Read.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 1C/2
  5631 ;;		On exit  : 1C/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5634 ;;      Params:         0       0       0       0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0       0
  5636 ;;      Temps:          0       4       0       0       0       0       0       0
  5637 ;;      Totals:         0       4       0       0       0       0       0       0
  5638 ;;Total ram usage:        4 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    6
  5641 ;; This function calls:
  5642 ;;		_RDM_TXSTART
  5643 ;; This function is called by:
  5644 ;;		_RDM_rx_loop
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _RDM_discovery_CC
  5650  0D2A                     _RDM_discovery_CC:	
  5651  0D2A                     l4026:	
  5652                           ;incstack = 0
  5653                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5654                           
  5655                           
  5656                           ;RDM_Read.c: 57: switch (RX_RDM_Data.PID) {
  5657  0D2A  2D8F               	goto	l4086
  5658  0D2B                     l1106:	
  5659                           ;RDM_Read.c: 58: case 0x0001:
  5660                           
  5661                           
  5662                           ;RDM_Read.c: 59: if (!DMX_Flags.RDMmute) {
  5663  0D2B  0020               	movlb	0	; select bank0
  5664  0D2C  196B               	btfsc	_DMX_Flags+1,2	;volatile
  5665  0D2D  0008               	return
  5666                           
  5667                           ;RDM_Read.c: 60: DMX_Flags.RDMcheck = 1;
  5668  0D2E  086B               	movf	_DMX_Flags+1,w	;volatile
  5669  0D2F  39FC               	andlw	-4
  5670  0D30  3801               	iorlw	1
  5671  0D31  00EB               	movwf	_DMX_Flags+1	;volatile
  5672                           
  5673                           ;RDM_Read.c: 61: PD_Manu = &PD.u8[100-2];
  5674  0D32  3021               	movlw	33
  5675  0D33  0021               	movlb	1	; select bank1
  5676  0D34  00CF               	movwf	(_PD_Manu+1)^(0+128)
  5677  0D35  30EE               	movlw	238
  5678  0D36  00CE               	movwf	_PD_Manu^(0+128)
  5679                           
  5680                           ;RDM_Read.c: 62: PD_ID = &PD.u8[100-6];
  5681  0D37  3021               	movlw	33
  5682  0D38  00CD               	movwf	(_PD_ID+1)^(0+128)
  5683  0D39  30EA               	movlw	234
  5684                           
  5685                           ;RDM_Read.c: 63: if (*PD_Manu <= 0x4D52) {
  5686  0D3A  2739  318D         	fcall	PL36	;call to abstracted procedure
  5687  0D3C  3053               	movlw	83
  5688  0D3D  1903               	skipnz
  5689  0D3E  023A               	subwf	??_RDM_discovery_CC,w
  5690  0D3F  1803               	skipnc
  5691  0D40  2D4E               	goto	l4044
  5692                           
  5693                           ;RDM_Read.c: 64: DMX_Flags.RDMcheck++;
  5694                           
  5695                           ;RDM_Read.c: 65: if (*PD_Manu == 0x4D52 && *PD_ID > 0x17C31092) {
  5696  0D41  2715  318D         	fcall	PL16	;call to abstracted procedure
  5697  0D43  1D03               	btfss	3,2
  5698  0D44  2D4E               	goto	l4044
  5699  0D45  2746  318D         	fcall	PL56	;call to abstracted procedure
  5700  0D47  3093               	movlw	147
  5701  0D48  272B  318D         	fcall	PL32	;call to abstracted procedure
  5702  0D4A  1C03               	btfss	3,0
  5703  0D4B  2D4E               	goto	l4044
  5704                           
  5705                           ;RDM_Read.c: 66: DMX_Flags.RDMcheck = 0;
  5706  0D4C  30FC               	movlw	-4
  5707  0D4D  05EB               	andwf	_DMX_Flags+1,f	;volatile
  5708  0D4E                     l4044:	
  5709                           
  5710                           ;RDM_Read.c: 67: }
  5711                           ;RDM_Read.c: 68: }
  5712                           ;RDM_Read.c: 69: PD_Manu = &PD.u8[100-8];
  5713  0D4E  3021               	movlw	33
  5714  0D4F  0021               	movlb	1	; select bank1
  5715  0D50  00CF               	movwf	(_PD_Manu+1)^(0+128)
  5716  0D51  30E8               	movlw	232
  5717  0D52  00CE               	movwf	_PD_Manu^(0+128)
  5718                           
  5719                           ;RDM_Read.c: 70: PD_ID = &PD.u8[100-12];
  5720  0D53  3021               	movlw	33
  5721  0D54  00CD               	movwf	(_PD_ID+1)^(0+128)
  5722  0D55  30E4               	movlw	228
  5723                           
  5724                           ;RDM_Read.c: 71: if (*PD_Manu >= 0x4D52) {
  5725  0D56  2739  318D         	fcall	PL36	;call to abstracted procedure
  5726  0D58  3052               	movlw	82
  5727  0D59  1903               	skipnz
  5728  0D5A  023A               	subwf	??_RDM_discovery_CC,w
  5729  0D5B  1C03               	skipc
  5730  0D5C  2D6A               	goto	l1110
  5731                           
  5732                           ;RDM_Read.c: 72: DMX_Flags.RDMcheck++;
  5733                           
  5734                           ;RDM_Read.c: 73: if (*PD_Manu == 0x4D52 && *PD_ID < 0x17C31092) {
  5735  0D5D  2715  318D         	fcall	PL16	;call to abstracted procedure
  5736  0D5F  1D03               	btfss	3,2
  5737  0D60  2D6A               	goto	l1110
  5738  0D61  2746  318D         	fcall	PL56	;call to abstracted procedure
  5739  0D63  3092               	movlw	146
  5740  0D64  272B  318D         	fcall	PL32	;call to abstracted procedure
  5741  0D66  1803               	btfsc	3,0
  5742  0D67  2D6A               	goto	l1110
  5743                           
  5744                           ;RDM_Read.c: 74: DMX_Flags.RDMcheck = 0;
  5745  0D68  30FC               	movlw	-4
  5746  0D69  05EB               	andwf	_DMX_Flags+1,f	;volatile
  5747  0D6A                     l1110:	
  5748                           
  5749                           ;RDM_Read.c: 75: }
  5750                           ;RDM_Read.c: 76: }
  5751                           ;RDM_Read.c: 77: if (DMX_Flags.RDMcheck == 3) {
  5752  0D6A  086B               	movf	_DMX_Flags+1,w	;volatile
  5753  0D6B  3903               	andlw	3
  5754  0D6C  3A03               	xorlw	3
  5755  0D6D  1D03               	skipz
  5756  0D6E  0008               	return
  5757                           
  5758                           ;RDM_Read.c: 78: TxState = TX_DISCOVERY;
  5759  0D6F  0021               	movlb	1	; select bank1
  5760  0D70  01D9               	clrf	_TxState^(0+128)	;volatile
  5761                           
  5762                           ;RDM_Read.c: 79: TXREG = 0xFE;
  5763  0D71  30FE               	movlw	254
  5764  0D72  0023               	movlb	3	; select bank3
  5765  0D73  009A               	movwf	26	;volatile
  5766                           
  5767                           ;RDM_Read.c: 80: TxByte= &DISCOVERY_RDM_Data.value[23];
  5768  0D74  30D3               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  5769  0D75  0021               	movlb	1	; select bank1
  5770  0D76  00DA               	movwf	_TxByte^(0+128)
  5771                           
  5772                           ;RDM_Read.c: 81: TxCount = 0;
  5773  0D77  01D0               	clrf	_TxCount^(0+128)
  5774  0D78  01D1               	clrf	(_TxCount+1)^(0+128)
  5775                           
  5776                           ;RDM_Read.c: 82: LATC3 = 1;
  5777  0D79  0022               	movlb	2	; select bank2
  5778  0D7A  158E               	bsf	14,3	;volatile
  5779                           
  5780                           ;RDM_Read.c: 83: RCIE = 0;
  5781  0D7B  0021               	movlb	1	; select bank1
  5782  0D7C  1291               	bcf	17,5	;volatile
  5783                           
  5784                           ;RDM_Read.c: 84: TXEN = 1;
  5785  0D7D  0023               	movlb	3	; select bank3
  5786  0D7E  169E               	bsf	30,5	;volatile
  5787                           
  5788                           ;RDM_Read.c: 85: TXIE = 1;
  5789  0D7F  0021               	movlb	1	; select bank1
  5790  0D80  1611               	bsf	17,4	;volatile
  5791  0D81  0008               	return
  5792  0D82                     l1114:	
  5793                           ;RDM_Read.c: 90: case 0x0002:
  5794                           
  5795                           
  5796                           ;RDM_Read.c: 91: DMX_Flags.RDMmute = 1;
  5797  0D82  0020               	movlb	0	; select bank0
  5798  0D83  156B               	bsf	_DMX_Flags+1,2	;volatile
  5799  0D84                     L1:	
  5800                           
  5801                           ;RDM_Read.c: 92: TX_RDM_Data.PDL=2;
  5802  0D84  3002               	movlw	2
  5803  0D85  0022               	movlb	2	; select bank2
  5804                           
  5805                           ;RDM_Read.c: 93: PD.u16[20-1] = 0;
  5806  0D86  2769  318D         	fcall	PL96	;call to abstracted procedure
  5807  0D88  3000               	movlw	0
  5808  0D89  3FC0               	movwi [0]fsr1
  5809  0D8A  3FC1               	movwi [1]fsr1
  5810                           
  5811                           ;RDM_Read.c: 94: RDM_TXSTART();
  5812  0D8B  2DA1               	ljmp	l3940
  5813  0D8C                     l1115:	
  5814                           ;RDM_Read.c: 96: case 0x0003:
  5815                           
  5816                           ;RDM_Read.c: 95: break;
  5817                           
  5818                           
  5819                           ;RDM_Read.c: 97: DMX_Flags.RDMmute = 0;
  5820  0D8C  0020               	movlb	0	; select bank0
  5821  0D8D  116B               	bcf	_DMX_Flags+1,2	;volatile
  5822  0D8E  2D84               	goto	L1
  5823  0D8F                     l4086:	
  5824                           ;RDM_Read.c: 98: TX_RDM_Data.PDL=2;
  5825                           
  5826                           
  5827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5828                           ; Switch size 1, requested type "space"
  5829                           ; Number of cases is 1, Range of values is 0 to 0
  5830                           ; switch strategies available:
  5831                           ; Name         Instructions Cycles
  5832                           ; simple_byte            4     3 (average)
  5833                           ; direct_byte            8     6 (fixed)
  5834                           ; jumptable            260     6 (fixed)
  5835                           ;	Chosen strategy is simple_byte
  5836  0D8F  0022               	movlb	2	; select bank2
  5837  0D90  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  5838  0D91  3A00               	xorlw	0	; case 0
  5839  0D92  1903               	skipnz
  5840  0D93  2D95               	goto	l4652
  5841  0D94  2DA0               	goto	l1117
  5842  0D95                     l4652:	
  5843                           
  5844                           ; Switch size 1, requested type "space"
  5845                           ; Number of cases is 3, Range of values is 1 to 3
  5846                           ; switch strategies available:
  5847                           ; Name         Instructions Cycles
  5848                           ; simple_byte           10     6 (average)
  5849                           ; direct_byte           15     9 (fixed)
  5850                           ; jumptable            263     9 (fixed)
  5851                           ;	Chosen strategy is simple_byte
  5852  0D95  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  5853  0D96  3A01               	xorlw	1	; case 1
  5854  0D97  1903               	skipnz
  5855  0D98  2D2B               	goto	l1106
  5856  0D99  3A03               	xorlw	3	; case 2
  5857  0D9A  1903               	skipnz
  5858  0D9B  2D82               	goto	l1114
  5859  0D9C  3A01               	xorlw	1	; case 3
  5860  0D9D  1903               	skipnz
  5861  0D9E  2D8C               	goto	l1115
  5862  0D9F  2DA0               	goto	l1117
  5863  0DA0                     l1117:	
  5864  0DA0  0008               	return
  5865  0DA1                     __end_of_RDM_discovery_CC:	
  5866  0DA1                     __ptext6:	
  5867 ;; *************** function _RDM_TXSTART *****************
  5868 ;; Defined at:
  5869 ;;		line 107 in file "RDM_Read.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;		None
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 1D/2
  5880 ;;		On exit  : 1F/1
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5883 ;;      Params:         0       0       0       0       0       0       0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0       0
  5885 ;;      Temps:          0       1       0       0       0       0       0       0
  5886 ;;      Totals:         0       1       0       0       0       0       0       0
  5887 ;;Total ram usage:        1 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    5
  5890 ;; This function calls:
  5891 ;;		_RDM_get_checkSum
  5892 ;;		_RDM_tx_TimerBreak
  5893 ;;		_TX_RDM_Response_Set
  5894 ;; This function is called by:
  5895 ;;		_RDM_GET_CC
  5896 ;;		_RDM_SET_CC
  5897 ;;		_RDM_discovery_CC
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           
  5902                           ;psect for function _RDM_TXSTART
  5903  0DA1                     _RDM_TXSTART:	
  5904  0DA1                     l3940:	
  5905                           ;incstack = 0
  5906                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5907                           
  5908                           
  5909                           ;RDM_Read.c: 108: TXREG = 0xCC;
  5910  0DA1  30CC               	movlw	204
  5911  0DA2  0023               	movlb	3	; select bank3
  5912  0DA3  009A               	movwf	26	;volatile
  5913                           
  5914                           ;RDM_Read.c: 109: TX_RDM_Response_Set();
  5915  0DA4  25C0  318D         	fcall	_TX_RDM_Response_Set
  5916                           
  5917                           ;RDM_Read.c: 110: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  5918  0DA6  304E               	movlw	low _TX_RDM_Data
  5919  0DA7  0086               	movwf	6
  5920  0DA8  3001               	movlw	high _TX_RDM_Data
  5921  0DA9  2763  318D         	fcall	PL90	;call to abstracted procedure
  5922  0DAB  0020               	movlb	0	; select bank0
  5923  0DAC  00B9               	movwf	??_RDM_TXSTART
  5924  0DAD                     u2710:	
  5925  0DAD  0016               	moviw fsr1++
  5926  0DAE  001A               	movwi fsr0++
  5927  0DAF  0BB9               	decfsz	??_RDM_TXSTART,f
  5928  0DB0  2DAD               	goto	u2710
  5929  0DB1  3028               	movlw	40
  5930  0DB2  00B8               	movwf	RDM_get_checkSum@len
  5931  0DB3  2657  318D         	fcall	_RDM_get_checkSum
  5932  0DB5  0821               	movf	?_RDM_get_checkSum+1,w
  5933  0DB6  0022               	movlb	2	; select bank2
  5934  0DB7  00CF               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  5935  0DB8  0020               	movlb	0	; select bank0
  5936  0DB9  0820               	movf	?_RDM_get_checkSum,w
  5937  0DBA  0022               	movlb	2	; select bank2
  5938  0DBB  00CE               	movwf	_TX_RDM_Data^(0+256)	;volatile
  5939                           
  5940                           ;RDM_Read.c: 111: TxState = TX_START;
  5941  0DBC  3001               	movlw	1
  5942  0DBD  0021               	movlb	1	; select bank1
  5943  0DBE  00D9               	movwf	_TxState^(0+128)	;volatile
  5944                           
  5945                           ;RDM_Read.c: 112: RDM_tx_TimerBreak();
  5946  0DBF  2DDF               	ljmp	l3892
  5947  0DC0                     __end_of_RDM_TXSTART:	
  5948  0DC0                     __ptext7:	
  5949 ;; *************** function _TX_RDM_Response_Set *****************
  5950 ;; Defined at:
  5951 ;;		line 115 in file "RDM_Read.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 1F/3
  5962 ;;		On exit  : 1F/2
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5965 ;;      Params:         0       0       0       0       0       0       0       0
  5966 ;;      Locals:         0       0       0       0       0       0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0
  5968 ;;      Totals:         0       0       0       0       0       0       0       0
  5969 ;;Total ram usage:        0 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    4
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_RDM_TXSTART
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _TX_RDM_Response_Set
  5981  0DC0                     _TX_RDM_Response_Set:	
  5982                           
  5983                           ;RDM_Read.c: 116: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  5987  0DC0  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  5988  0DC1  0086               	movwf	6
  5989  0DC2  3001               	movlw	1	; select bank2/3
  5990  0DC3  0087               	movwf	7
  5991  0DC4  3F40               	moviw [0]fsr1
  5992  0DC5  0022               	movlb	2	; select bank2
  5993  0DC6  00DF               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
  5994  0DC7  3F41               	moviw [1]fsr1
  5995  0DC8  00E0               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
  5996  0DC9  3F42               	moviw [2]fsr1
  5997  0DCA  00E1               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
  5998  0DCB  3F43               	moviw [3]fsr1
  5999  0DCC  00E2               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
  6000                           
  6001                           ;RDM_Read.c: 117: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  6002  0DCD  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  6003  0DCE  00E4               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
  6004  0DCF  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  6005  0DD0  00E3               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
  6006                           
  6007                           ;RDM_Read.c: 118: TX_RDM_Data.TN=RX_RDM_Data.TN;
  6008  0DD1  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  6009  0DD2  00D8               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
  6010                           
  6011                           ;RDM_Read.c: 119: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  6012  0DD3  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6013  0DD4  3E01               	addlw	1
  6014  0DD5  00D3               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
  6015                           
  6016                           ;RDM_Read.c: 120: TX_RDM_Data.PID=RX_RDM_Data.PID;
  6017  0DD6  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6018  0DD7  00D2               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
  6019  0DD8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6020  0DD9  00D1               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
  6021                           
  6022                           ;RDM_Read.c: 121: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  6023  0DDA  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  6024  0DDB  3E18               	addlw	24
  6025  0DDC  00E5               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
  6026                           
  6027                           ;RDM_Read.c: 122: TX_RDM_Data.PORT=0x00;
  6028  0DDD  01D7               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
  6029  0DDE  0008               	return
  6030  0DDF                     __end_of_TX_RDM_Response_Set:	
  6031  0DDF                     __ptext8:	
  6032 ;; *************** function _RDM_tx_TimerBreak *****************
  6033 ;; Defined at:
  6034 ;;		line 188 in file "RDM.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg
  6043 ;; Tracked objects:
  6044 ;;		On entry : 1F/1
  6045 ;;		On exit  : 1F/1
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6048 ;;      Params:         0       0       0       0       0       0       0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0
  6051 ;;      Totals:         0       0       0       0       0       0       0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    4
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_RDM_TXSTART
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _RDM_tx_TimerBreak
  6064  0DDF                     _RDM_tx_TimerBreak:	
  6065  0DDF                     l3892:	
  6066                           ;incstack = 0
  6067                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  6068                           
  6069                           
  6070                           ;RDM.c: 189: TMR1 = 0xFFA5;
  6071  0DDF  30FF               	movlw	255
  6072  0DE0  0020               	movlb	0	; select bank0
  6073  0DE1  0097               	movwf	23	;volatile
  6074  0DE2  30A5               	movlw	165
  6075  0DE3  0096               	movwf	22	;volatile
  6076                           
  6077                           ;RDM.c: 190: TimerState = TIMER_BREAK;
  6078  0DE4  3001               	movlw	1
  6079  0DE5  0022               	movlb	2	; select bank2
  6080  0DE6  00EE               	movwf	_TimerState^(0+256)	;volatile
  6081                           
  6082                           ;RDM.c: 191: LATC4 = 0;
  6083  0DE7  120E               	bcf	14,4	;volatile
  6084                           
  6085                           ;RDM.c: 192: LATC3 = 1;
  6086  0DE8  158E               	bsf	14,3	;volatile
  6087                           
  6088                           ;RDM.c: 193: TX_PD_Flag=1;
  6089  0DE9  0021               	movlb	1	; select bank1
  6090  0DEA  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  6091  0DEB  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6092                           
  6093                           ;RDM.c: 194: RCIE = 0;
  6094  0DEC  1291               	bcf	17,5	;volatile
  6095  0DED  0008               	return
  6096  0DEE                     __end_of_RDM_tx_TimerBreak:	
  6097  0DEE                     __ptext2:	
  6098 ;; *************** function _RDM_rx_loop *****************
  6099 ;; Defined at:
  6100 ;;		line 96 in file "RDM.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;		None
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  2  118[None  ] int 
  6107 ;; Registers used:
  6108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 1F/1
  6111 ;;		On exit  : 1C/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6114 ;;      Params:         0       0       0       0       0       0       0       0
  6115 ;;      Locals:         0       0       0       0       0       0       0       0
  6116 ;;      Temps:          0       1       0       0       0       0       0       0
  6117 ;;      Totals:         0       1       0       0       0       0       0       0
  6118 ;;Total ram usage:        1 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    7
  6121 ;; This function calls:
  6122 ;;		_RDM_GET_CC
  6123 ;;		_RDM_SET_CC
  6124 ;;		_RDM_discovery_CC
  6125 ;;		_RDM_get_checkSum
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function _RDM_rx_loop
  6133  0DEE                     _RDM_rx_loop:	
  6134                           
  6135                           ;RDM.c: 97: if (DMX_Flags.RDMNew == 1) {
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6139  0DEE  0020               	movlb	0	; select bank0
  6140  0DEF  1F6A               	btfss	_DMX_Flags,6	;volatile
  6141  0DF0  0008               	return
  6142                           
  6143                           ;RDM.c: 98: DMX_Flags.RDMNew = 0;
  6144  0DF1  136A               	bcf	_DMX_Flags,6	;volatile
  6145                           
  6146                           ;RDM.c: 99: DMX_Flags.RDMcheck = 0;
  6147  0DF2  30FC               	movlw	-4
  6148  0DF3  05EB               	andwf	_DMX_Flags+1,f	;volatile
  6149                           
  6150                           ;RDM.c: 101: if ((RX_RDM_Data.DUID.M == 0x4D52 || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RD
      +                          M_Data.DUID.ID == 0x17C31092 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  6151  0DF4  3052               	movlw	82
  6152  0DF5  0022               	movlb	2	; select bank2
  6153  0DF6  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6154  0DF7  304D               	movlw	77
  6155  0DF8  1903               	skipnz
  6156  0DF9  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6157  0DFA  1903               	btfsc	3,2
  6158  0DFB  2E01               	goto	l4478
  6159  0DFC  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6160  0DFD  2E1E               	goto	l711
  6161  0DFE  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6162  0DFF  1D03               	btfss	3,2
  6163  0E00  2E1E               	goto	l711
  6164  0E01                     l4478:	
  6165  0E01  3092               	movlw	146
  6166  0E02  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6167  0E03  3010               	movlw	16
  6168  0E04  1903               	skipnz
  6169  0E05  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6170  0E06  30C3               	movlw	195
  6171  0E07  1903               	skipnz
  6172  0E08  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6173  0E09  3017               	movlw	23
  6174  0E0A  1903               	skipnz
  6175  0E0B  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6176  0E0C  1903               	btfsc	3,2
  6177  0E0D  2E19               	goto	l4482
  6178  0E0E  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6179  0E0F  2E1E               	goto	l711
  6180  0E10  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6181  0E11  1D03               	skipz
  6182  0E12  2E1E               	goto	l711
  6183  0E13  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6184  0E14  1D03               	skipz
  6185  0E15  2E1E               	goto	l711
  6186  0E16  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6187  0E17  1D03               	btfss	3,2
  6188  0E18  2E1E               	goto	l711
  6189  0E19                     l4482:	
  6190                           
  6191                           ;RDM.c: 102: DMX_Flags.RDMcheck = 1;
  6192  0E19  0020               	movlb	0	; select bank0
  6193  0E1A  086B               	movf	_DMX_Flags+1,w	;volatile
  6194  0E1B  39FC               	andlw	-4
  6195  0E1C  3801               	iorlw	1
  6196  0E1D  00EB               	movwf	_DMX_Flags+1	;volatile
  6197  0E1E                     l711:	
  6198                           
  6199                           ;RDM.c: 103: }
  6200                           ;RDM.c: 105: if (DMX_Flags.RDMcheck == 1 && RDM_get_checkSum(RX_RDM_Data,100) == RX_RDM_
      +                          Data.CS) {
  6201  0E1E  0020               	movlb	0	; select bank0
  6202  0E1F  086B               	movf	_DMX_Flags+1,w	;volatile
  6203  0E20  3903               	andlw	3
  6204  0E21  3A01               	xorlw	1
  6205  0E22  1D03               	skipz
  6206  0E23  2E42               	goto	l716
  6207  0E24  3020               	movlw	low _RX_RDM_Data
  6208  0E25  0086               	movwf	6
  6209  0E26  3001               	movlw	high _RX_RDM_Data
  6210  0E27  2763  318D         	fcall	PL90	;call to abstracted procedure
  6211  0E29  00BE               	movwf	??_RDM_rx_loop
  6212  0E2A                     u3440:	
  6213  0E2A  0016               	moviw fsr1++
  6214  0E2B  001A               	movwi fsr0++
  6215  0E2C  0BBE               	decfsz	??_RDM_rx_loop,f
  6216  0E2D  2E2A               	goto	u3440
  6217  0E2E  3064               	movlw	100
  6218  0E2F  00B8               	movwf	RDM_get_checkSum@len
  6219  0E30  2657  318D         	fcall	_RDM_get_checkSum
  6220  0E32  0022               	movlb	2	; select bank2
  6221  0E33  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  6222  0E34  0020               	movlb	0	; select bank0
  6223  0E35  0621               	xorwf	?_RDM_get_checkSum+1,w
  6224  0E36  1D03               	skipz
  6225  0E37  2E3C               	goto	u3455
  6226  0E38  0022               	movlb	2	; select bank2
  6227  0E39  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  6228  0E3A  0020               	movlb	0	; select bank0
  6229  0E3B  0620               	xorwf	?_RDM_get_checkSum,w
  6230  0E3C                     u3455:	
  6231  0E3C  1D03               	skipz
  6232  0E3D  2E42               	goto	l716
  6233                           
  6234                           ;RDM.c: 106: DMX_Flags.RDMcheck = 2;
  6235  0E3E  086B               	movf	_DMX_Flags+1,w	;volatile
  6236  0E3F  39FC               	andlw	-4
  6237  0E40  3802               	iorlw	2
  6238  0E41  00EB               	movwf	_DMX_Flags+1	;volatile
  6239  0E42                     l716:	
  6240                           
  6241                           ;RDM.c: 107: }
  6242                           ;RDM.c: 109: if (DMX_Flags.RDMcheck == 2) {
  6243  0E42  086B               	movf	_DMX_Flags+1,w	;volatile
  6244  0E43  3903               	andlw	3
  6245  0E44  3A02               	xorlw	2
  6246  0E45  1D03               	skipz
  6247  0E46  0008               	return
  6248                           
  6249                           ;RDM.c: 119: break;
  6250  0E47  0022               	movlb	2	; select bank2
  6251  0E48  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6252                           
  6253                           ; Switch size 1, requested type "space"
  6254                           ; Number of cases is 3, Range of values is 16 to 48
  6255                           ; switch strategies available:
  6256                           ; Name         Instructions Cycles
  6257                           ; simple_byte           10     6 (average)
  6258                           ; direct_byte           75     9 (fixed)
  6259                           ; jumptable            263     9 (fixed)
  6260                           ;	Chosen strategy is simple_byte
  6261  0E49  3A10               	xorlw	16	; case 16
  6262  0E4A  1903               	skipnz
  6263  0E4B  2E53               	goto	l4490
  6264  0E4C  3A30               	xorlw	48	; case 32
  6265  0E4D  1903               	skipnz
  6266  0E4E  2E54               	goto	l4492
  6267  0E4F  3A10               	xorlw	16	; case 48
  6268  0E50  1903               	skipnz
  6269  0E51  2E55               	goto	l4494
  6270  0E52  2E56               	goto	l723
  6271  0E53                     l4490:	
  6272                           
  6273                           ;RDM.c: 112: RDM_discovery_CC();
  6274  0E53  2D2A               	ljmp	l4026
  6275  0E54                     l4492:	
  6276                           ;RDM.c: 113: break;
  6277                           
  6278                           
  6279                           ;RDM.c: 115: RDM_GET_CC();
  6280  0E54  2E88               	ljmp	l4094
  6281  0E55                     l4494:	
  6282                           ;RDM.c: 116: break;
  6283                           
  6284                           
  6285                           ;RDM.c: 118: RDM_SET_CC();
  6286  0E55  2EFE               	ljmp	l4140
  6287  0E56                     l723:	
  6288  0E56  0008               	return
  6289  0E57                     __end_of_RDM_rx_loop:	
  6290  0E57                     __ptext9:	
  6291 ;; *************** function _RDM_get_checkSum *****************
  6292 ;; Defined at:
  6293 ;;		line 126 in file "RDM_Read.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  Data           24    0[BANK0 ] struct .
  6296 ;;  len             1   24[BANK0 ] unsigned char 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  2    0[BANK0 ] unsigned int 
  6301 ;; Registers used:
  6302 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6303 ;; Tracked objects:
  6304 ;;		On entry : 1F/0
  6305 ;;		On exit  : 1F/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6308 ;;      Params:         0      25       0       0       0       0       0       0
  6309 ;;      Locals:         0       0       0       0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0       0       0       0
  6311 ;;      Totals:         0      25       0       0       0       0       0       0
  6312 ;;Total ram usage:       25 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    4
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_RDM_rx_loop
  6319 ;;		_RDM_TXSTART
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           
  6324                           ;psect for function _RDM_get_checkSum
  6325  0E57                     _RDM_get_checkSum:	
  6326                           
  6327                           ;RDM_Read.c: 127: checkSum = 0x00CD;
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  6331  0E57  30CD               	movlw	205
  6332  0E58  0021               	movlb	1	; select bank1
  6333  0E59  00C6               	movwf	_checkSum^(0+128)
  6334  0E5A  3017               	movlw	23
  6335  0E5B  01C7               	clrf	(_checkSum+1)^(0+128)
  6336                           
  6337                           ;RDM_Read.c: 128: PackCount = 23;
  6338  0E5C  00F9               	movwf	_PackCount	;volatile
  6339  0E5D                     l3878:	
  6340                           ;RDM_Read.c: 129: while (PackCount > 1) {
  6341                           
  6342  0E5D  3002               	movlw	2
  6343  0E5E  0279               	subwf	_PackCount,w	;volatile
  6344  0E5F  1C03               	btfss	3,0
  6345  0E60  2E6B               	goto	l3880
  6346                           
  6347                           ;RDM_Read.c: 130: checkSum += Data.value[PackCount];
  6348  0E61  0879               	movf	_PackCount,w
  6349  0E62  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  6350  0E63  0086               	movwf	6
  6351  0E64  0187               	clrf	7
  6352  0E65  0801               	movf	1,w
  6353  0E66  07C6               	addwf	_checkSum^(0+128),f
  6354  0E67  1803               	skipnc
  6355  0E68  0AC7               	incf	(_checkSum+1)^(0+128),f
  6356                           
  6357                           ;RDM_Read.c: 131: PackCount--;
  6358  0E69  03F9               	decf	_PackCount,f	;volatile
  6359  0E6A  2E5D               	goto	l3878
  6360  0E6B                     l3880:	
  6361                           
  6362                           ;RDM_Read.c: 132: }
  6363                           ;RDM_Read.c: 133: PackCount = len-1;
  6364  0E6B  0020               	movlb	0	; select bank0
  6365  0E6C  0838               	movf	RDM_get_checkSum@len,w
  6366  0E6D  3EFF               	addlw	255
  6367  0E6E  00F9               	movwf	_PackCount	;volatile
  6368                           
  6369                           ;RDM_Read.c: 134: PDCount = len - Data.PDL;
  6370  0E6F  0822               	movf	RDM_get_checkSum@Data+2,w
  6371  0E70  0238               	subwf	RDM_get_checkSum@len,w
  6372  0E71  00FA               	movwf	_PDCount
  6373  0E72                     l3886:	
  6374                           ;RDM_Read.c: 135: while (PackCount >= PDCount) {
  6375                           
  6376  0E72  087A               	movf	_PDCount,w
  6377  0E73  0279               	subwf	_PackCount,w	;volatile
  6378  0E74  1C03               	btfss	3,0
  6379  0E75  2E7F               	goto	l3888
  6380                           
  6381                           ;RDM_Read.c: 136: checkSum += PD.u8[PDCount];
  6382  0E76  087A               	movf	_PDCount,w
  6383  0E77  27F9  318D         	fcall	PL82	;call to abstracted procedure
  6384  0E79  0021               	movlb	1	; select bank1
  6385  0E7A  07C6               	addwf	_checkSum^(0+128),f
  6386  0E7B  1803               	skipnc
  6387  0E7C  0AC7               	incf	(_checkSum+1)^(0+128),f
  6388                           
  6389                           ;RDM_Read.c: 137: PDCount++;
  6390  0E7D  0AFA               	incf	_PDCount,f
  6391  0E7E  2E72               	goto	l3886
  6392  0E7F                     l3888:	
  6393                           
  6394                           ;RDM_Read.c: 138: }
  6395                           ;RDM_Read.c: 139: return checkSum;
  6396  0E7F  0021               	movlb	1	; select bank1
  6397  0E80  0847               	movf	(_checkSum+1)^(0+128),w
  6398  0E81  0020               	movlb	0	; select bank0
  6399  0E82  00A1               	movwf	?_RDM_get_checkSum+1
  6400  0E83  0021               	movlb	1	; select bank1
  6401  0E84  0846               	movf	_checkSum^(0+128),w
  6402  0E85  0020               	movlb	0	; select bank0
  6403  0E86  00A0               	movwf	?_RDM_get_checkSum
  6404  0E87  0008               	return
  6405  0E88                     __end_of_RDM_get_checkSum:	
  6406  0E88                     __ptext5:	
  6407 ;; *************** function _RDM_GET_CC *****************
  6408 ;; Defined at:
  6409 ;;		line 15 in file "RDM_Read.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      void 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 1C/2
  6420 ;;		On exit  : 1F/1
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6423 ;;      Params:         0       0       0       0       0       0       0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0
  6425 ;;      Temps:          0       2       0       0       0       0       0       0
  6426 ;;      Totals:         0       2       0       0       0       0       0       0
  6427 ;;Total ram usage:        2 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    6
  6430 ;; This function calls:
  6431 ;;		_RDM_TXSTART
  6432 ;; This function is called by:
  6433 ;;		_RDM_rx_loop
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           
  6438                           ;psect for function _RDM_GET_CC
  6439  0E88                     _RDM_GET_CC:	
  6440  0E88                     l4094:	
  6441                           ;incstack = 0
  6442                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6443                           
  6444                           
  6445                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  6446  0E88  2EE7               	goto	l4128
  6447  0E89                     l4096:	
  6448                           
  6449                           ;RDM_Read.c: 18: TX_RDM_Data.PDL=1;
  6450  0E89  3001               	movlw	1
  6451  0E8A  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6452                           
  6453                           ;RDM_Read.c: 19: PD.u8[40-1] =DMX_Flags.RDMidentify;
  6454  0E8B  0020               	movlb	0	; select bank0
  6455  0E8C  0C6B               	rrf	_DMX_Flags+1,w	;volatile
  6456  0E8D  00BA               	movwf	??_RDM_GET_CC
  6457  0E8E  0CBA               	rrf	??_RDM_GET_CC,f
  6458  0E8F  0C3A               	rrf	??_RDM_GET_CC,w
  6459  0E90  3901               	andlw	1
  6460  0E91  00BB               	movwf	??_RDM_GET_CC+1
  6461  0E92  30B3               	movlw	179
  6462  0E93  0086               	movwf	6
  6463  0E94  3021               	movlw	33
  6464  0E95  0087               	movwf	7
  6465  0E96  083B               	movf	??_RDM_GET_CC+1,w
  6466  0E97  0081               	movwf	1
  6467                           
  6468                           ;RDM_Read.c: 20: break;
  6469  0E98  2EFD               	goto	l4130
  6470  0E99                     l4100:	
  6471                           
  6472                           ;RDM_Read.c: 22: TX_RDM_Data.PDL=0x13;
  6473  0E99  3013               	movlw	19
  6474  0E9A  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6475                           
  6476                           ;RDM_Read.c: 23: PD.u16[20-1]=0x0100;
  6477  0E9B  0020               	movlb	0	; select bank0
  6478  0E9C  3001               	movlw	1
  6479  0E9D  01BA               	clrf	??_RDM_GET_CC
  6480  0E9E  00BB               	movwf	??_RDM_GET_CC+1
  6481  0E9F  30B2               	movlw	178
  6482  0EA0  0086               	movwf	6
  6483  0EA1  3021               	movlw	33
  6484  0EA2  0087               	movwf	7
  6485  0EA3  083A               	movf	??_RDM_GET_CC,w
  6486  0EA4  3FC0               	movwi [0]fsr1
  6487  0EA5  083B               	movf	??_RDM_GET_CC+1,w
  6488  0EA6  3FC1               	movwi [1]fsr1
  6489                           
  6490                           ;RDM_Read.c: 24: PD.u16[20-2]=0x0080;
  6491  0EA7  3080               	movlw	128
  6492  0EA8  00BA               	movwf	??_RDM_GET_CC
  6493  0EA9  30B0               	movlw	176
  6494  0EAA  275C  318D         	fcall	PL76	;call to abstracted procedure
  6495                           
  6496                           ;RDM_Read.c: 25: PD.u16[20-3]=0x0004;
  6497  0EAC  3004               	movlw	4
  6498  0EAD  00BA               	movwf	??_RDM_GET_CC
  6499  0EAE  30AE               	movlw	174
  6500  0EAF  275C  318D         	fcall	PL76	;call to abstracted procedure
  6501                           
  6502                           ;RDM_Read.c: 26: PD_ID=&PD.u8[40-10];
  6503  0EB1  3021               	movlw	33
  6504  0EB2  0021               	movlb	1	; select bank1
  6505  0EB3  00CD               	movwf	(_PD_ID+1)^(0+128)
  6506  0EB4  30AA               	movlw	170
  6507  0EB5  00CC               	movwf	_PD_ID^(0+128)
  6508                           
  6509                           ;RDM_Read.c: 27: *PD_ID=1;
  6510  0EB6  0086               	movwf	6
  6511  0EB7  084D               	movf	(_PD_ID+1)^(0+128),w
  6512  0EB8  0087               	movwf	7
  6513  0EB9  3001               	movlw	1
  6514  0EBA  3FC0               	movwi [0]fsr1
  6515  0EBB  3000               	movlw	0
  6516  0EBC  3FC1               	movwi [1]fsr1
  6517  0EBD  3FC2               	movwi [2]fsr1
  6518  0EBE  3FC3               	movwi [3]fsr1
  6519                           
  6520                           ;RDM_Read.c: 28: PD.u16[20-6]=0x04;
  6521  0EBF  3004               	movlw	4
  6522  0EC0  0020               	movlb	0	; select bank0
  6523  0EC1  2755  318D         	fcall	PL68	;call to abstracted procedure
  6524  0EC3  315C               	addfsr 1,28
  6525  0EC4  083A               	movf	??_RDM_GET_CC,w
  6526  0EC5  3FC0               	movwi [0]fsr1
  6527  0EC6  083B               	movf	??_RDM_GET_CC+1,w
  6528  0EC7  3FC1               	movwi [1]fsr1
  6529                           
  6530                           ;RDM_Read.c: 29: PD.u16[20-7]=0x01;
  6531  0EC8  3001               	movlw	1
  6532  0EC9  2755  318D         	fcall	PL68	;call to abstracted procedure
  6533  0ECB  315A               	addfsr 1,26
  6534  0ECC  083A               	movf	??_RDM_GET_CC,w
  6535  0ECD  3FC0               	movwi [0]fsr1
  6536  0ECE  083B               	movf	??_RDM_GET_CC+1,w
  6537                           
  6538                           ;RDM_Read.c: 30: PD.u16[20-8]=DMX_Address;
  6539  0ECF  274F  318D         	fcall	PL64	;call to abstracted procedure
  6540  0ED1  3158               	addfsr 1,24
  6541  0ED2  0876               	movf	_DMX_Address,w
  6542  0ED3  3FC0               	movwi [0]fsr1
  6543  0ED4  0877               	movf	_DMX_Address+1,w
  6544                           
  6545                           ;RDM_Read.c: 31: PD.u16[20-9]=0;
  6546  0ED5  274F  318D         	fcall	PL64	;call to abstracted procedure
  6547  0ED7  3000               	movlw	0
  6548  0ED8  3156               	addfsr 1,22
  6549  0ED9  3FC0               	movwi [0]fsr1
  6550                           
  6551                           ;RDM_Read.c: 32: PD.u8[40-19]=0;
  6552  0EDA  274F  318D         	fcall	PL64	;call to abstracted procedure
  6553  0EDC  3155               	addfsr 1,21
  6554  0EDD  0181               	clrf	1
  6555                           
  6556                           ;RDM_Read.c: 33: break;
  6557  0EDE  2EFD               	goto	l4130
  6558  0EDF                     l4122:	
  6559                           
  6560                           ;RDM_Read.c: 35: TX_RDM_Data.PDL=2;
  6561  0EDF  3002               	movlw	2
  6562                           
  6563                           ;RDM_Read.c: 37: PD.u16[20-1]=DMX_Address;
  6564  0EE0  2769  318D         	fcall	PL96	;call to abstracted procedure
  6565  0EE2  0876               	movf	_DMX_Address,w
  6566  0EE3  3FC0               	movwi [0]fsr1
  6567  0EE4  0877               	movf	_DMX_Address+1,w
  6568  0EE5  3FC1               	movwi [1]fsr1
  6569                           
  6570                           ;RDM_Read.c: 38: break;
  6571  0EE6  2EFD               	goto	l4130
  6572  0EE7                     l4128:	
  6573                           
  6574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6575                           ; Switch size 1, requested type "space"
  6576                           ; Number of cases is 2, Range of values is 0 to 16
  6577                           ; switch strategies available:
  6578                           ; Name         Instructions Cycles
  6579                           ; simple_byte            7     4 (average)
  6580                           ; direct_byte           40     6 (fixed)
  6581                           ; jumptable            260     6 (fixed)
  6582                           ;	Chosen strategy is simple_byte
  6583  0EE7  0022               	movlb	2	; select bank2
  6584  0EE8  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6585  0EE9  3A00               	xorlw	0	; case 0
  6586  0EEA  1903               	skipnz
  6587  0EEB  2EF0               	goto	l4656
  6588  0EEC  3A10               	xorlw	16	; case 16
  6589  0EED  1903               	skipnz
  6590  0EEE  2EF8               	goto	l4658
  6591  0EEF  2EFD               	goto	l4130
  6592  0EF0                     l4656:	
  6593                           
  6594                           ; Switch size 1, requested type "space"
  6595                           ; Number of cases is 2, Range of values is 96 to 240
  6596                           ; switch strategies available:
  6597                           ; Name         Instructions Cycles
  6598                           ; simple_byte            7     4 (average)
  6599                           ; jumptable            263     9 (fixed)
  6600                           ;	Chosen strategy is simple_byte
  6601  0EF0  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6602  0EF1  3A60               	xorlw	96	; case 96
  6603  0EF2  1903               	skipnz
  6604  0EF3  2E99               	goto	l4100
  6605  0EF4  3A90               	xorlw	144	; case 240
  6606  0EF5  1903               	skipnz
  6607  0EF6  2EDF               	goto	l4122
  6608  0EF7  2EFD               	goto	l4130
  6609  0EF8                     l4658:	
  6610                           
  6611                           ; Switch size 1, requested type "space"
  6612                           ; Number of cases is 1, Range of values is 0 to 0
  6613                           ; switch strategies available:
  6614                           ; Name         Instructions Cycles
  6615                           ; simple_byte            4     3 (average)
  6616                           ; direct_byte            8     6 (fixed)
  6617                           ; jumptable            260     6 (fixed)
  6618                           ;	Chosen strategy is simple_byte
  6619  0EF8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6620  0EF9  3A00               	xorlw	0	; case 0
  6621  0EFA  1903               	skipnz
  6622  0EFB  2E89               	goto	l4096
  6623  0EFC  2EFD               	goto	l4130
  6624  0EFD                     l4130:	
  6625                           
  6626                           ;RDM_Read.c: 40: RDM_TXSTART();
  6627  0EFD  2DA1               	ljmp	l3940
  6628  0EFE                     __end_of_RDM_GET_CC:	
  6629  0EFE                     __ptext4:	
  6630 ;; *************** function _RDM_SET_CC *****************
  6631 ;; Defined at:
  6632 ;;		line 43 in file "RDM_Read.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 1C/2
  6643 ;;		On exit  : 1F/1
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6646 ;;      Params:         0       0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    6
  6653 ;; This function calls:
  6654 ;;		_RDM_TXSTART
  6655 ;; This function is called by:
  6656 ;;		_RDM_rx_loop
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _RDM_SET_CC
  6662  0EFE                     _RDM_SET_CC:	
  6663  0EFE                     l4140:	
  6664                           ;incstack = 0
  6665                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6666                           
  6667                           
  6668                           ;RDM_Read.c: 44: switch (RX_RDM_Data.PID){
  6669  0EFE  2F09               	goto	l4148
  6670  0EFF                     l4142:	
  6671                           
  6672                           ;RDM_Read.c: 47: DMX_Address=PD.u16[50-1];
  6673  0EFF  30EE               	movlw	238
  6674  0F00  0086               	movwf	6
  6675  0F01  3021               	movlw	33
  6676  0F02  0087               	movwf	7
  6677  0F03  3F40               	moviw [0]fsr1
  6678  0F04  00F6               	movwf	_DMX_Address
  6679  0F05  3F41               	moviw [1]fsr1
  6680  0F06  00F7               	movwf	_DMX_Address+1
  6681                           
  6682                           ;RDM_Read.c: 49: TX_RDM_Data.PDL=0;
  6683  0F07  01D0               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6684                           
  6685                           ;RDM_Read.c: 51: break;
  6686  0F08  2F14               	goto	l4150
  6687  0F09                     l4148:	
  6688                           
  6689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6690                           ; Switch size 1, requested type "space"
  6691                           ; Number of cases is 1, Range of values is 0 to 0
  6692                           ; switch strategies available:
  6693                           ; Name         Instructions Cycles
  6694                           ; simple_byte            4     3 (average)
  6695                           ; direct_byte            8     6 (fixed)
  6696                           ; jumptable            260     6 (fixed)
  6697                           ;	Chosen strategy is simple_byte
  6698  0F09  0022               	movlb	2	; select bank2
  6699  0F0A  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6700  0F0B  3A00               	xorlw	0	; case 0
  6701  0F0C  1903               	skipnz
  6702  0F0D  2F0F               	goto	l4654
  6703  0F0E  2F14               	goto	l4150
  6704  0F0F                     l4654:	
  6705                           
  6706                           ; Switch size 1, requested type "space"
  6707                           ; Number of cases is 1, Range of values is 240 to 240
  6708                           ; switch strategies available:
  6709                           ; Name         Instructions Cycles
  6710                           ; simple_byte            4     3 (average)
  6711                           ; direct_byte           11     9 (fixed)
  6712                           ; jumptable            263     9 (fixed)
  6713                           ;	Chosen strategy is simple_byte
  6714  0F0F  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6715  0F10  3AF0               	xorlw	240	; case 240
  6716  0F11  1903               	skipnz
  6717  0F12  2EFF               	goto	l4142
  6718  0F13  2F14               	goto	l4150
  6719  0F14                     l4150:	
  6720                           
  6721                           ;RDM_Read.c: 53: RDM_TXSTART();
  6722  0F14  2DA1               	ljmp	l3940
  6723  0F15                     __end_of_RDM_SET_CC:	
  6724  0F15                     PL16:	
  6725  0F15  086B               	movf	_DMX_Flags+1,w	;volatile
  6726  0F16  3903               	andlw	3
  6727  0F17  00BA               	movwf	??_RDM_discovery_CC
  6728  0F18  0ABA               	incf	??_RDM_discovery_CC,f
  6729  0F19  086B               	movf	_DMX_Flags+1,w	;volatile
  6730  0F1A  063A               	xorwf	??_RDM_discovery_CC,w
  6731  0F1B  39FC               	andlw	-4
  6732  0F1C  063A               	xorwf	??_RDM_discovery_CC,w
  6733  0F1D  00EB               	movwf	_DMX_Flags+1	;volatile
  6734  0F1E  0021               	movlb	1	; select bank1
  6735  0F1F  084E               	movf	_PD_Manu^(0+128),w
  6736  0F20  0086               	movwf	6
  6737  0F21  084F               	movf	(_PD_Manu+1)^(0+128),w
  6738  0F22  0087               	movwf	7
  6739  0F23  0016               	moviw fsr1++
  6740  0F24  3A52               	xorlw	82
  6741  0F25  0020               	movlb	0	; select bank0
  6742  0F26  00BA               	movwf	??_RDM_discovery_CC
  6743  0F27  0016               	moviw fsr1++
  6744  0F28  3A4D               	xorlw	77
  6745  0F29  04BA               	iorwf	??_RDM_discovery_CC,f
  6746  0F2A  0008               	return
  6747  0F2B                     __end_ofPL16:	
  6748  0F2B                     PL32:	
  6749  0F2B  023A               	subwf	??_RDM_discovery_CC,w
  6750  0F2C  3F41               	moviw [1]fsr1
  6751  0F2D  00BA               	movwf	??_RDM_discovery_CC
  6752  0F2E  3010               	movlw	16
  6753  0F2F  3B3A               	subwfb	??_RDM_discovery_CC,w
  6754  0F30  3F42               	moviw [2]fsr1
  6755  0F31  00BA               	movwf	??_RDM_discovery_CC
  6756  0F32  30C3               	movlw	195
  6757  0F33  3B3A               	subwfb	??_RDM_discovery_CC,w
  6758  0F34  3F43               	moviw [3]fsr1
  6759  0F35  00BA               	movwf	??_RDM_discovery_CC
  6760  0F36  3017               	movlw	23
  6761  0F37  3B3A               	subwfb	??_RDM_discovery_CC,w
  6762  0F38  0008               	return
  6763  0F39                     __end_ofPL32:	
  6764  0F39                     PL36:	
  6765  0F39  00CC               	movwf	_PD_ID^(0+128)
  6766  0F3A  084E               	movf	_PD_Manu^(0+128),w
  6767  0F3B  0086               	movwf	6
  6768  0F3C  084F               	movf	(_PD_Manu+1)^(0+128),w
  6769  0F3D  0087               	movwf	7
  6770  0F3E  3F40               	moviw [0]fsr1
  6771  0F3F  0020               	movlb	0	; select bank0
  6772  0F40  00BA               	movwf	??_RDM_discovery_CC
  6773  0F41  3F41               	moviw [1]fsr1
  6774  0F42  00BB               	movwf	??_RDM_discovery_CC+1
  6775  0F43  304D               	movlw	77
  6776  0F44  023B               	subwf	??_RDM_discovery_CC+1,w
  6777  0F45  0008               	return
  6778  0F46                     __end_ofPL36:	
  6779  0F46                     PL56:	
  6780  0F46  0021               	movlb	1	; select bank1
  6781  0F47  084C               	movf	_PD_ID^(0+128),w
  6782  0F48  0086               	movwf	6
  6783  0F49  084D               	movf	(_PD_ID+1)^(0+128),w
  6784  0F4A  0087               	movwf	7
  6785  0F4B  3F40               	moviw [0]fsr1
  6786  0F4C  0020               	movlb	0	; select bank0
  6787  0F4D  00BA               	movwf	??_RDM_discovery_CC
  6788  0F4E  0008               	return
  6789  0F4F                     __end_ofPL56:	
  6790  0F4F                     PL64:	
  6791  0F4F  3FC1               	movwi [1]fsr1
  6792  0F50  308C               	movlw	140
  6793  0F51  0086               	movwf	6
  6794  0F52  3021               	movlw	33
  6795  0F53  0087               	movwf	7
  6796  0F54  0008               	return
  6797  0F55                     __end_ofPL64:	
  6798  0F55                     PL68:	
  6799  0F55  00BA               	movwf	??_RDM_GET_CC
  6800  0F56  308C               	movlw	140
  6801  0F57  01BB               	clrf	??_RDM_GET_CC+1
  6802  0F58  0086               	movwf	6
  6803  0F59  3021               	movlw	33
  6804  0F5A  0087               	movwf	7
  6805  0F5B  0008               	return
  6806  0F5C                     __end_ofPL68:	
  6807  0F5C                     PL76:	
  6808  0F5C  01BB               	clrf	??_RDM_GET_CC+1
  6809  0F5D  0086               	movwf	6
  6810  0F5E  083A               	movf	??_RDM_GET_CC,w
  6811  0F5F  3FC0               	movwi [0]fsr1
  6812  0F60  083B               	movf	??_RDM_GET_CC+1,w
  6813  0F61  3FC1               	movwi [1]fsr1
  6814  0F62  0008               	return
  6815  0F63                     __end_ofPL76:	
  6816  0F63                     PL90:	
  6817  0F63  0087               	movwf	7
  6818  0F64  3020               	movlw	low RDM_get_checkSum@Data
  6819  0F65  0084               	movwf	4
  6820  0F66  3000               	movlw	high RDM_get_checkSum@Data
  6821  0F67  0085               	movwf	5
  6822  0F68  3418               	retlw	24
  6823  0F69                     __end_ofPL90:	
  6824  0F69                     PL96:	
  6825  0F69  00D0               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6826  0F6A  30B2               	movlw	178
  6827  0F6B  0086               	movwf	6
  6828  0F6C  3021               	movlw	33
  6829  0F6D  0087               	movwf	7
  6830  0F6E  0008               	return
  6831  0F6F                     __end_ofPL96:	
  6832  0F6F                     __ptext28:	
  6833 ;; *************** function _RDM_tx_interrupt *****************
  6834 ;; Defined at:
  6835 ;;		line 125 in file "RDM.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  2  126[None  ] int 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6844 ;; Tracked objects:
  6845 ;;		On entry : 4/0
  6846 ;;		On exit  : 1C/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6849 ;;      Params:         0       0       0       0       0       0       0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0
  6851 ;;      Temps:          4       0       0       0       0       0       0       0
  6852 ;;      Totals:         4       0       0       0       0       0       0       0
  6853 ;;Total ram usage:        4 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; This function calls:
  6856 ;;		Nothing
  6857 ;; This function is called by:
  6858 ;;		_isr
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _RDM_tx_interrupt
  6864  0F6F                     _RDM_tx_interrupt:	
  6865                           
  6866                           ;RDM.c: 126: if (TXIE && TXIF) {
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  6870  0F6F  0021               	movlb	1	; select bank1
  6871  0F70  1E11               	btfss	17,4	;volatile
  6872  0F71  0008               	return
  6873  0F72  0020               	movlb	0	; select bank0
  6874  0F73  1E11               	btfss	17,4	;volatile
  6875  0F74  0008               	return
  6876  0F75  2FDE               	goto	i1l3706
  6877  0F76                     i1l3660:	
  6878                           
  6879                           ;RDM.c: 129: if(TX_PD_Flag==1){
  6880  0F76  0348               	decf	_TX_PD_Flag^(0+128),w	;volatile
  6881  0F77  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  6882  0F78  1D03               	btfss	3,2
  6883  0F79  2F80               	goto	i1l3666
  6884                           
  6885                           ;RDM.c: 130: TX_PD_Flag=0;
  6886  0F7A  01C8               	clrf	_TX_PD_Flag^(0+128)	;volatile
  6887  0F7B  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6888                           
  6889                           ;RDM.c: 131: TXREG = 0xCC;
  6890  0F7C  30CC               	movlw	204
  6891  0F7D  0023               	movlb	3	; select bank3
  6892  0F7E  009A               	movwf	26	;volatile
  6893                           
  6894                           ;RDM.c: 132: }else{
  6895  0F7F  0008               	return
  6896  0F80                     i1l3666:	
  6897                           
  6898                           ;RDM.c: 133: TXREG = 0x01;
  6899  0F80  3001               	movlw	1
  6900  0F81  0023               	movlb	3	; select bank3
  6901  0F82  009A               	movwf	26	;volatile
  6902                           
  6903                           ;RDM.c: 134: TxByte = &TX_RDM_Data.value[23];
  6904  0F83  3065               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
  6905  0F84  0021               	movlb	1	; select bank1
  6906  0F85  00DA               	movwf	_TxByte^(0+128)
  6907  0F86  3002               	movlw	2
  6908                           
  6909                           ;RDM.c: 135: TxCount = 0;
  6910  0F87  01D0               	clrf	_TxCount^(0+128)
  6911  0F88  01D1               	clrf	(_TxCount+1)^(0+128)
  6912                           
  6913                           ;RDM.c: 136: TxState = TX_DATA;
  6914  0F89  00D9               	movwf	_TxState^(0+128)	;volatile
  6915  0F8A  0008               	return
  6916  0F8B                     i1l3672:	
  6917                           
  6918                           ;RDM.c: 144: if (TxCount <= 24) {
  6919  0F8B  3000               	movlw	0
  6920  0F8C  0251               	subwf	(_TxCount+1)^(0+128),w
  6921  0F8D  3019               	movlw	25
  6922  0F8E  1903               	skipnz
  6923  0F8F  0250               	subwf	_TxCount^(0+128),w
  6924  0F90  1803               	skipnc
  6925  0F91  2F96               	goto	i1l733
  6926                           
  6927                           ;RDM.c: 146: TXREG = *TxByte;
  6928                           
  6929                           ;RDM.c: 147: TxByte--;
  6930                           
  6931                           ;RDM.c: 148: TxCount++;
  6932  0F92  27EE               	fcall	PL42	;call to abstracted procedure
  6933  0F93  1903               	skipnz
  6934  0F94  0AD1               	incf	(_TxCount+1)^(0+128),f
  6935                           
  6936                           ;RDM.c: 149: }else{
  6937  0F95  0008               	return
  6938  0F96                     i1l733:	
  6939                           
  6940                           ;RDM.c: 150: RCIE = 1;
  6941  0F96  1691               	bsf	17,5	;volatile
  6942                           
  6943                           ;RDM.c: 151: LATC4 = 1;
  6944  0F97  0022               	movlb	2	; select bank2
  6945  0F98  160E               	bsf	14,4	;volatile
  6946                           
  6947                           ;RDM.c: 152: TXEN = 0;
  6948  0F99  0023               	movlb	3	; select bank3
  6949  0F9A  129E               	bcf	30,5	;volatile
  6950                           
  6951                           ;RDM.c: 153: TXIE = 0;
  6952  0F9B  0021               	movlb	1	; select bank1
  6953  0F9C  1211               	bcf	17,4	;volatile
  6954                           
  6955                           ;RDM.c: 154: LATC3=0;
  6956  0F9D  0022               	movlb	2	; select bank2
  6957  0F9E  118E               	bcf	14,3	;volatile
  6958  0F9F  0008               	return
  6959  0FA0                     i1l3680:	
  6960                           
  6961                           ;RDM.c: 158: if (TxCount <= 24) {
  6962  0FA0  3000               	movlw	0
  6963  0FA1  0251               	subwf	(_TxCount+1)^(0+128),w
  6964  0FA2  3019               	movlw	25
  6965  0FA3  1903               	skipnz
  6966  0FA4  0250               	subwf	_TxCount^(0+128),w
  6967  0FA5  1803               	skipnc
  6968  0FA6  2F96               	goto	i1l733
  6969                           
  6970                           ;RDM.c: 160: TXREG = *TxByte;
  6971                           
  6972                           ;RDM.c: 161: TxByte--;
  6973                           
  6974                           ;RDM.c: 162: TxCount++;
  6975  0FA7  27EE  318D         	fcall	PL42	;call to abstracted procedure
  6976  0FA9  1903               	skipnz
  6977  0FAA  0AD1               	incf	(_TxCount+1)^(0+128),f
  6978                           
  6979                           ;RDM.c: 163: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  6980  0FAB  3016               	movlw	22
  6981  0FAC  0650               	xorwf	_TxCount^(0+128),w
  6982  0FAD  0451               	iorwf	(_TxCount+1)^(0+128),w
  6983  0FAE  1D03               	btfss	3,2
  6984  0FAF  0008               	return
  6985  0FB0  0022               	movlb	2	; select bank2
  6986  0FB1  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  6987  0FB2  1903               	btfsc	3,2
  6988  0FB3  0008               	return
  6989  0FB4  0021               	movlb	1	; select bank1
  6990  0FB5  0848               	movf	_TX_PD_Flag^(0+128),w	;volatile
  6991  0FB6  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  6992  0FB7  1D03               	btfss	3,2
  6993  0FB8  0008               	return
  6994                           
  6995                           ;RDM.c: 164: TxState = TX_RDM_PD;
  6996  0FB9  3003               	movlw	3
  6997  0FBA  00D9               	movwf	_TxState^(0+128)	;volatile
  6998                           
  6999                           ;RDM.c: 165: TX_PDCount = 40-1;
  7000  0FBB  3027               	movlw	39
  7001  0FBC  00D8               	movwf	_TX_PDCount^(0+128)
  7002  0FBD  0008               	return
  7003  0FBE                     i1l3696:	
  7004                           
  7005                           ;RDM.c: 176: TXREG = PD.u8[TX_PDCount];
  7006  0FBE  0858               	movf	_TX_PDCount^(0+128),w
  7007  0FBF  27F9  318D         	fcall	PL82	;call to abstracted procedure
  7008  0FC1  0023               	movlb	3	; select bank3
  7009  0FC2  009A               	movwf	26	;volatile
  7010                           
  7011                           ;RDM.c: 177: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  7012  0FC3  01F1               	clrf	??_RDM_tx_interrupt+1
  7013  0FC4  0022               	movlb	2	; select bank2
  7014  0FC5  0850               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7015  0FC6  3C28               	sublw	40
  7016  0FC7  00F0               	movwf	??_RDM_tx_interrupt
  7017  0FC8  1C03               	skipc
  7018  0FC9  03F1               	decf	??_RDM_tx_interrupt+1,f
  7019  0FCA  0021               	movlb	1	; select bank1
  7020  0FCB  0858               	movf	_TX_PDCount^(0+128),w
  7021  0FCC  00F2               	movwf	??_RDM_tx_interrupt+2
  7022  0FCD  01F3               	clrf	??_RDM_tx_interrupt+3
  7023  0FCE  0871               	movf	??_RDM_tx_interrupt+1,w
  7024  0FCF  0673               	xorwf	??_RDM_tx_interrupt+3,w
  7025  0FD0  1D03               	skipz
  7026  0FD1  2FD4               	goto	u260_25
  7027  0FD2  0870               	movf	??_RDM_tx_interrupt,w
  7028  0FD3  0672               	xorwf	??_RDM_tx_interrupt+2,w
  7029  0FD4                     u260_25:	
  7030  0FD4  1D03               	skipz
  7031  0FD5  2FDC               	goto	i1l3702
  7032                           
  7033                           ;RDM.c: 178: TxState = TX_DATA;
  7034  0FD6  3002               	movlw	2
  7035  0FD7  00D9               	movwf	_TxState^(0+128)	;volatile
  7036                           
  7037                           ;RDM.c: 179: TX_PD_Flag = 1;
  7038  0FD8  3001               	movlw	1
  7039  0FD9  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  7040  0FDA  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7041                           
  7042                           ;RDM.c: 180: }else{
  7043  0FDB  0008               	return
  7044  0FDC                     i1l3702:	
  7045                           
  7046                           ;RDM.c: 181: TX_PDCount--;
  7047  0FDC  03D8               	decf	_TX_PDCount^(0+128),f
  7048  0FDD  0008               	return
  7049  0FDE                     i1l3706:	
  7050  0FDE  0021               	movlb	1	; select bank1
  7051  0FDF  0859               	movf	_TxState^(0+128),w	;volatile
  7052                           
  7053                           ; Switch size 1, requested type "space"
  7054                           ; Number of cases is 4, Range of values is 0 to 3
  7055                           ; switch strategies available:
  7056                           ; Name         Instructions Cycles
  7057                           ; simple_byte           13     7 (average)
  7058                           ; direct_byte           14     6 (fixed)
  7059                           ; jumptable            260     6 (fixed)
  7060                           ;	Chosen strategy is simple_byte
  7061  0FE0  3A00               	xorlw	0	; case 0
  7062  0FE1  1903               	skipnz
  7063  0FE2  2F8B               	goto	i1l3672
  7064  0FE3  3A01               	xorlw	1	; case 1
  7065  0FE4  1903               	skipnz
  7066  0FE5  2F76               	goto	i1l3660
  7067  0FE6  3A03               	xorlw	3	; case 2
  7068  0FE7  1903               	skipnz
  7069  0FE8  2FA0               	goto	i1l3680
  7070  0FE9  3A01               	xorlw	1	; case 3
  7071  0FEA  1903               	skipnz
  7072  0FEB  2FBE               	goto	i1l3696
  7073  0FEC  2FED               	goto	i1l742
  7074  0FED                     i1l742:	
  7075  0FED  0008               	return
  7076  0FEE                     __end_of_RDM_tx_interrupt:	
  7077  0FEE                     PL42:	
  7078  0FEE  085A               	movf	_TxByte^(0+128),w
  7079  0FEF  0086               	movwf	6
  7080  0FF0  3001               	movlw	1	; select bank2/3
  7081  0FF1  0087               	movwf	7
  7082  0FF2  0801               	movf	1,w
  7083  0FF3  0023               	movlb	3	; select bank3
  7084  0FF4  009A               	movwf	26	;volatile
  7085  0FF5  0021               	movlb	1	; select bank1
  7086  0FF6  03DA               	decf	_TxByte^(0+128),f
  7087  0FF7  0AD0               	incf	_TxCount^(0+128),f
  7088  0FF8  0008               	return
  7089  0FF9                     __end_ofPL42:	
  7090  0FF9                     PL82:	
  7091  0FF9  3E8C               	addlw	140
  7092  0FFA  0086               	movwf	6
  7093  0FFB  3021               	movlw	33
  7094  0FFC  0187               	clrf	7
  7095  0FFD  3D87               	addwfc	7,f
  7096  0FFE  0801               	movf	1,w
  7097  0FFF  0008               	return
  7098  1000                     __end_ofPL82:	
  7099                           
  7100                           	psect	intentry
  7101  0004                     __pintentry:	
  7102 ;; *************** function _isr *****************
  7103 ;; Defined at:
  7104 ;;		line 82 in file "main.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;		None
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 1C/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7118 ;;      Params:         0       0       0       0       0       0       0       0
  7119 ;;      Locals:         0       0       0       0       0       0       0       0
  7120 ;;      Temps:          0       0       0       0       0       0       0       0
  7121 ;;      Totals:         0       0       0       0       0       0       0       0
  7122 ;;Total ram usage:        0 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    3
  7125 ;; This function calls:
  7126 ;;		_ADC_interrupt
  7127 ;;		_DMX_interrput
  7128 ;;		_RDM_tx_interrupt
  7129 ;;		_timer1_interrupt
  7130 ;; This function is called by:
  7131 ;;		Interrupt level 1
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135  0004                     _isr:	
  7136                           
  7137                           ;incstack = 0
  7138  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7139                           
  7140                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7141  0005  3180               	pagesel	$
  7142                           
  7143                           ;main.c: 83: ADC_interrupt();
  7144  0006  318A  2258  3180   	fcall	_ADC_interrupt
  7145                           
  7146                           ;main.c: 85: DMX_interrput();
  7147  0009  318A  226E  3180   	fcall	_DMX_interrput
  7148                           
  7149                           ;main.c: 86: timer1_interrupt();
  7150  000C  318B  2351  3180   	fcall	_timer1_interrupt
  7151                           
  7152                           ;main.c: 87: RDM_tx_interrupt();
  7153  000F  318F  276F         	fcall	_RDM_tx_interrupt
  7154  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7155  0012  0009               	retfie
  7156  0013                     __end_of_isr:	
  7157                           
  7158                           	psect	text23
  7159  0B51                     __ptext23:	
  7160 ;; *************** function _timer1_interrupt *****************
  7161 ;; Defined at:
  7162 ;;		line 24 in file "Timer.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;		None
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;		None
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  2  124[None  ] int 
  7169 ;; Registers used:
  7170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 4/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7176 ;;      Params:         0       0       0       0       0       0       0       0
  7177 ;;      Locals:         0       0       0       0       0       0       0       0
  7178 ;;      Temps:          1       0       0       0       0       0       0       0
  7179 ;;      Totals:         1       0       0       0       0       0       0       0
  7180 ;;Total ram usage:        1 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    2
  7183 ;; This function calls:
  7184 ;;		_ADC_init
  7185 ;;		_DMX_init
  7186 ;;		_RDM_init
  7187 ;; This function is called by:
  7188 ;;		_isr
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function _timer1_interrupt
  7194  0B51                     _timer1_interrupt:	
  7195                           
  7196                           ;Timer.c: 25: if (TMR1IE && TMR1IF) {
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _timer1_interrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7200  0B51  0021               	movlb	1	; select bank1
  7201  0B52  1C11               	btfss	17,0	;volatile
  7202  0B53  0008               	return
  7203  0B54  0020               	movlb	0	; select bank0
  7204  0B55  1C11               	btfss	17,0	;volatile
  7205  0B56  0008               	return
  7206                           
  7207                           ;Timer.c: 26: TMR1IF = 0;
  7208  0B57  1011               	bcf	17,0	;volatile
  7209                           
  7210                           ;Timer.c: 27: switch (TimerState) {
  7211  0B58  2BC9               	goto	i1l3652
  7212  0B59                     i1l3592:	
  7213                           
  7214                           ;Timer.c: 29: TimerState = TIMER_500US;
  7215  0B59  01EE               	clrf	_TimerState^(0+256)	;volatile
  7216  0B5A                     i1l900:	
  7217                           ;Timer.c: 30: case TIMER_StartUpDelay:
  7218                           
  7219                           
  7220                           ;Timer.c: 31: TMR1=0;
  7221  0B5A  0020               	movlb	0	; select bank0
  7222  0B5B  0196               	clrf	22	;volatile
  7223  0B5C  0197               	clrf	23	;volatile
  7224                           
  7225                           ;Timer.c: 32: Timer_DelayCount++;
  7226  0B5D  0021               	movlb	1	; select bank1
  7227  0B5E  0AD7               	incf	_Timer_DelayCount^(0+128),f	;volatile
  7228                           
  7229                           ;Timer.c: 33: if(Timer_DelayCount>=0x10){
  7230  0B5F  3010               	movlw	16
  7231  0B60  0257               	subwf	_Timer_DelayCount^(0+128),w	;volatile
  7232  0B61  1C03               	skipc
  7233  0B62  0008               	return
  7234                           
  7235                           ;Timer.c: 34: TimerState = TIMER_500US;
  7236  0B63  0022               	movlb	2	; select bank2
  7237  0B64  01EE               	clrf	_TimerState^(0+256)	;volatile
  7238                           
  7239                           ;Timer.c: 35: ADC_init();
  7240  0B65  23D9  318B         	fcall	_ADC_init
  7241                           
  7242                           ;Timer.c: 36: DMX_init();
  7243  0B67  23E5  318B         	fcall	_DMX_init
  7244                           
  7245                           ;Timer.c: 37: RDM_init();
  7246  0B69  2454               	fcall	_RDM_init
  7247                           
  7248                           ;Timer.c: 38: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  7249  0B6A  3080               	movlw	128
  7250  0B6B  003B               	movlb	27	; select bank27
  7251  0B6C  00CB               	movwf	75	;volatile
  7252  0B6D  00BB               	movwf	59	;volatile
  7253  0B6E  00AB               	movwf	43	;volatile
  7254  0B6F  009B               	movwf	27	;volatile
  7255  0B70  0008               	return
  7256  0B71                     i1l3608:	
  7257                           
  7258                           ;Timer.c: 50: if(ADIE==RA5){
  7259  0B71  0020               	movlb	0	; select bank0
  7260  0B72  1E8C               	btfss	12,5	;volatile
  7261  0B73  2B76               	goto	u245_20
  7262  0B74  3001               	movlw	1
  7263  0B75  2B77               	goto	u245_22
  7264  0B76                     u245_20:	
  7265  0B76  3000               	movlw	0
  7266  0B77                     u245_22:	
  7267  0B77  00F5               	movwf	??_timer1_interrupt
  7268  0B78  0021               	movlb	1	; select bank1
  7269  0B79  1F11               	btfss	17,6	;volatile
  7270  0B7A  2B7D               	goto	u246_20
  7271  0B7B  3001               	movlw	1
  7272  0B7C  2B7E               	goto	u246_22
  7273  0B7D                     u246_20:	
  7274  0B7D  3000               	movlw	0
  7275  0B7E                     u246_22:	
  7276  0B7E  0675               	xorwf	??_timer1_interrupt,w
  7277  0B7F  1903               	btfsc	3,2
  7278                           
  7279                           ;Timer.c: 51: Timer.Switch=1;
  7280  0B80  143E               	bsf	(_Timer^(0+128)+6),0	;volatile
  7281                           
  7282                           ;Timer.c: 52: }
  7283                           ;Timer.c: 53: TMR1 = 0xFE0B;
  7284  0B81  2519  318B         	fcall	PL94	;call to abstracted procedure
  7285                           
  7286                           ;Timer.c: 54: RxTimer++;
  7287  0B83  0021               	movlb	1	; select bank1
  7288  0B84  0AD2               	incf	_RxTimer^(0+128),f	;volatile
  7289  0B85  1903               	skipnz
  7290  0B86  0AD3               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7291                           
  7292                           ;Timer.c: 55: if (RxTimer == 2400) {
  7293  0B87  3060               	movlw	96
  7294  0B88  0652               	xorwf	_RxTimer^(0+128),w	;volatile
  7295  0B89  3009               	movlw	9
  7296  0B8A  1903               	skipnz
  7297  0B8B  0653               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7298  0B8C  1D03               	btfss	3,2
  7299  0B8D  2B94               	goto	i1l3620
  7300                           
  7301                           ;Timer.c: 56: RxTimer = 2400 + 1;
  7302  0B8E  3061               	movlw	97
  7303  0B8F  00D2               	movwf	_RxTimer^(0+128)	;volatile
  7304  0B90  3009               	movlw	9
  7305  0B91  00D3               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7306                           
  7307                           ;Timer.c: 57: DMX_Flags.RxTimeout = 1;
  7308  0B92  0020               	movlb	0	; select bank0
  7309  0B93  156A               	bsf	_DMX_Flags,2	;volatile
  7310  0B94                     i1l3620:	
  7311                           
  7312                           ;Timer.c: 58: }
  7313                           ;Timer.c: 60: Timer.MS_Count++;
  7314  0B94  0021               	movlb	1	; select bank1
  7315  0B95  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
  7316  0B96  1903               	skipnz
  7317  0B97  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7318                           
  7319                           ;Timer.c: 61: Timer.MS = 1;
  7320  0B98  1438               	bsf	_Timer^(0+128),0	;volatile
  7321                           
  7322                           ;Timer.c: 62: if (Timer.MS_Count == 1000)
  7323  0B99  30E8               	movlw	232
  7324  0B9A  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7325  0B9B  3003               	movlw	3
  7326  0B9C  1903               	skipnz
  7327  0B9D  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7328  0B9E  1D03               	btfss	3,2
  7329  0B9F  0008               	return
  7330                           
  7331                           ;Timer.c: 63: {
  7332                           ;Timer.c: 64: Timer.MS_Count = 0;
  7333  0BA0  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
  7334  0BA1  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7335                           
  7336                           ;Timer.c: 65: Timer.SEC_Count++;
  7337  0BA2  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
  7338                           
  7339                           ;Timer.c: 66: Timer.SEC = 1;
  7340  0BA3  14B8               	bsf	_Timer^(0+128),1	;volatile
  7341                           
  7342                           ;Timer.c: 67: if (Timer.SEC_Count == 60)
  7343  0BA4  303C               	movlw	60
  7344  0BA5  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7345  0BA6  1D03               	btfss	3,2
  7346  0BA7  0008               	return
  7347                           
  7348                           ;Timer.c: 68: {
  7349                           ;Timer.c: 69: Timer.SEC_Count = 0;
  7350  0BA8  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7351                           
  7352                           ;Timer.c: 70: Timer.MIN_Count++;
  7353  0BA9  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
  7354                           
  7355                           ;Timer.c: 71: Timer.MIN = 1;
  7356  0BAA  1538               	bsf	_Timer^(0+128),2	;volatile
  7357                           
  7358                           ;Timer.c: 73: if (Timer.MIN_Count == 60)
  7359  0BAB  303C               	movlw	60
  7360  0BAC  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
  7361  0BAD  1D03               	btfss	3,2
  7362  0BAE  0008               	return
  7363                           
  7364                           ;Timer.c: 74: {
  7365                           ;Timer.c: 75: Timer.MIN_Count = 0;
  7366  0BAF  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7367                           
  7368                           ;Timer.c: 76: Timer.HR_Count++;
  7369  0BB0  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
  7370                           
  7371                           ;Timer.c: 77: Timer.HR = 1;
  7372  0BB1  15B8               	bsf	_Timer^(0+128),3	;volatile
  7373  0BB2  0008               	return
  7374  0BB3                     i1l909:	
  7375                           ;Timer.c: 89: case TIMER_BREAK:
  7376                           
  7377                           
  7378                           ;Timer.c: 90: LATC4 = 1;
  7379  0BB3  160E               	bsf	14,4	;volatile
  7380                           
  7381                           ;Timer.c: 91: TMR1 = 0xFFF5;
  7382  0BB4  30FF               	movlw	255
  7383  0BB5  0020               	movlb	0	; select bank0
  7384  0BB6  0097               	movwf	23	;volatile
  7385  0BB7  30F5               	movlw	245
  7386  0BB8  0096               	movwf	22	;volatile
  7387                           
  7388                           ;Timer.c: 92: TimerState = TX_TIMER_MAB;
  7389  0BB9  3002               	movlw	2
  7390  0BBA  0022               	movlb	2	; select bank2
  7391  0BBB  00EE               	movwf	_TimerState^(0+256)	;volatile
  7392                           
  7393                           ;Timer.c: 93: break;
  7394  0BBC  0008               	return
  7395  0BBD                     i1l910:	
  7396                           ;Timer.c: 95: case TX_TIMER_MAB:
  7397                           
  7398                           
  7399                           ;Timer.c: 96: TXEN = 1;
  7400  0BBD  0023               	movlb	3	; select bank3
  7401  0BBE  169E               	bsf	30,5	;volatile
  7402                           
  7403                           ;Timer.c: 97: TXIE = 1;
  7404  0BBF  0021               	movlb	1	; select bank1
  7405  0BC0  1611               	bsf	17,4	;volatile
  7406                           
  7407                           ;Timer.c: 98: TMR1 = 0xFCDF;
  7408  0BC1  30FC               	movlw	252
  7409  0BC2  0020               	movlb	0	; select bank0
  7410  0BC3  0097               	movwf	23	;volatile
  7411  0BC4  30DF               	movlw	223
  7412  0BC5  0096               	movwf	22	;volatile
  7413                           
  7414                           ;Timer.c: 99: TimerState = TIMER_500US;
  7415  0BC6  0022               	movlb	2	; select bank2
  7416  0BC7  01EE               	clrf	_TimerState^(0+256)	;volatile
  7417                           
  7418                           ;Timer.c: 100: break;
  7419  0BC8  0008               	return
  7420  0BC9                     i1l3652:	
  7421  0BC9  0022               	movlb	2	; select bank2
  7422  0BCA  086E               	movf	_TimerState^(0+256),w	;volatile
  7423                           
  7424                           ; Switch size 1, requested type "space"
  7425                           ; Number of cases is 4, Range of values is 0 to 3
  7426                           ; switch strategies available:
  7427                           ; Name         Instructions Cycles
  7428                           ; simple_byte           13     7 (average)
  7429                           ; direct_byte           14     6 (fixed)
  7430                           ; jumptable            260     6 (fixed)
  7431                           ;	Chosen strategy is simple_byte
  7432  0BCB  3A00               	xorlw	0	; case 0
  7433  0BCC  1903               	skipnz
  7434  0BCD  2B71               	goto	i1l3608
  7435  0BCE  3A01               	xorlw	1	; case 1
  7436  0BCF  1903               	skipnz
  7437  0BD0  2BB3               	goto	i1l909
  7438  0BD1  3A03               	xorlw	3	; case 2
  7439  0BD2  1903               	skipnz
  7440  0BD3  2BBD               	goto	i1l910
  7441  0BD4  3A01               	xorlw	1	; case 3
  7442  0BD5  1903               	skipnz
  7443  0BD6  2B5A               	goto	i1l900
  7444  0BD7  2B59               	goto	i1l3592
  7445  0BD8  0008               	return
  7446  0BD9                     __end_of_timer1_interrupt:	
  7447  0BD9                     __ptext27:	
  7448 ;; *************** function _ADC_init *****************
  7449 ;; Defined at:
  7450 ;;		line 14 in file "ADC.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;		None
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;		None
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg
  7459 ;; Tracked objects:
  7460 ;;		On entry : 1F/2
  7461 ;;		On exit  : 1F/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7464 ;;      Params:         0       0       0       0       0       0       0       0
  7465 ;;      Locals:         0       0       0       0       0       0       0       0
  7466 ;;      Temps:          0       0       0       0       0       0       0       0
  7467 ;;      Totals:         0       0       0       0       0       0       0       0
  7468 ;;Total ram usage:        0 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_timer1_interrupt
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           
  7478                           ;psect for function _ADC_init
  7479  0BD9                     _ADC_init:	
  7480                           
  7481                           ;ADC.c: 19: TRISA4 = 1;
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in _ADC_init: [wreg]
  7485  0BD9  0021               	movlb	1	; select bank1
  7486  0BDA  160C               	bsf	12,4	;volatile
  7487                           
  7488                           ;ADC.c: 20: ANSA4 = 1;
  7489  0BDB  0023               	movlb	3	; select bank3
  7490  0BDC  160C               	bsf	12,4	;volatile
  7491                           
  7492                           ;ADC.c: 21: ADCON0 = 0b00001101;
  7493  0BDD  300D               	movlw	13
  7494  0BDE  0021               	movlb	1	; select bank1
  7495  0BDF  009D               	movwf	29	;volatile
  7496                           
  7497                           ;ADC.c: 22: ADCON1 = 0b01110000;
  7498  0BE0  3070               	movlw	112
  7499  0BE1  009E               	movwf	30	;volatile
  7500                           
  7501                           ;ADC.c: 25: ADIF = 0;
  7502  0BE2  0020               	movlb	0	; select bank0
  7503  0BE3  1311               	bcf	17,6	;volatile
  7504  0BE4  0008               	return
  7505  0BE5                     __end_of_ADC_init:	
  7506  0BE5                     __ptext26:	
  7507 ;; *************** function _DMX_init *****************
  7508 ;; Defined at:
  7509 ;;		line 17 in file "DMX.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  Addr            1    3[COMMON] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      void 
  7516 ;; Registers used:
  7517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7518 ;; Tracked objects:
  7519 ;;		On entry : 1F/0
  7520 ;;		On exit  : 1C/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7523 ;;      Params:         0       0       0       0       0       0       0       0
  7524 ;;      Locals:         1       0       0       0       0       0       0       0
  7525 ;;      Temps:          3       0       0       0       0       0       0       0
  7526 ;;      Totals:         4       0       0       0       0       0       0       0
  7527 ;;Total ram usage:        4 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_timer1_interrupt
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           
  7537                           ;psect for function _DMX_init
  7538  0BE5                     _DMX_init:	
  7539                           
  7540                           ;DMX.c: 19: RXPPS = 0b10101;
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  7544  0BE5  3015               	movlw	21
  7545  0BE6  003C               	movlb	28	; select bank28
  7546  0BE7  0095               	movwf	21	;volatile
  7547                           
  7548                           ;DMX.c: 20: TRISC5 = 1;
  7549  0BE8  0021               	movlb	1	; select bank1
  7550  0BE9  168E               	bsf	14,5	;volatile
  7551                           
  7552                           ;DMX.c: 22: RCSTA = 0b10010000;
  7553  0BEA  3090               	movlw	144
  7554  0BEB  0023               	movlb	3	; select bank3
  7555  0BEC  009D               	movwf	29	;volatile
  7556                           
  7557                           ;DMX.c: 23: SYNC = 0;
  7558  0BED  121E               	bcf	30,4	;volatile
  7559                           
  7560                           ;DMX.c: 24: BAUDCON = 0b00000000;
  7561  0BEE  019F               	clrf	31	;volatile
  7562                           
  7563                           ;DMX.c: 25: BRGH = 1;
  7564  0BEF  151E               	bsf	30,2	;volatile
  7565                           
  7566                           ;DMX.c: 26: SPBRGH = 0x00;
  7567  0BF0  019C               	clrf	28	;volatile
  7568                           
  7569                           ;DMX.c: 27: SPBRGL = 0x7;
  7570  0BF1  3007               	movlw	7
  7571  0BF2  009B               	movwf	27	;volatile
  7572                           
  7573                           ;DMX.c: 28: RCIE = 1;
  7574  0BF3  0021               	movlb	1	; select bank1
  7575  0BF4  1691               	bsf	17,5	;volatile
  7576  0BF5  300D               	movlw	13
  7577                           
  7578                           ;DMX.c: 34: DMX_Address = 1;
  7579  0BF6  01F6               	clrf	_DMX_Address
  7580  0BF7  0AF6               	incf	_DMX_Address,f
  7581  0BF8  01F7               	clrf	_DMX_Address+1
  7582                           
  7583                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  7584  0BF9  0022               	movlb	2	; select bank2
  7585  0BFA  00B9               	movwf	(_PWMDCLptr+1)^(0+256)
  7586  0BFB  3093               	movlw	147
  7587  0BFC  00B8               	movwf	_PWMDCLptr^(0+256)
  7588                           
  7589                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  7590  0BFD  300D               	movlw	13
  7591  0BFE  00BB               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^0
  7592  0BFF  30A3               	movlw	163
  7593  0C00  00BA               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^0
  7594                           
  7595                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  7596  0C01  300D               	movlw	13
  7597  0C02  00BD               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^0
  7598  0C03  30B3               	movlw	179
  7599  0C04  00BC               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^0
  7600                           
  7601                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  7602  0C05  300D               	movlw	13
  7603  0C06  00BF               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^0
  7604  0C07  30C3               	movlw	195
  7605  0C08  00BE               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^0
  7606                           
  7607                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  7608  0C09  300D               	movlw	13
  7609  0C0A  0023               	movlb	3	; select bank3
  7610  0C0B  00B5               	movwf	(_PWMDCHptr+1)^(0+384)
  7611  0C0C  3094               	movlw	148
  7612  0C0D  00B4               	movwf	_PWMDCHptr^(0+384)
  7613                           
  7614                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  7615  0C0E  300D               	movlw	13
  7616  0C0F  00B7               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  7617  0C10  30A4               	movlw	164
  7618  0C11  00B6               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  7619                           
  7620                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  7621  0C12  300D               	movlw	13
  7622  0C13  00B9               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  7623  0C14  30B4               	movlw	180
  7624  0C15  00B8               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  7625                           
  7626                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  7627  0C16  300D               	movlw	13
  7628  0C17  00BB               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  7629  0C18  30C4               	movlw	196
  7630  0C19  00BA               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  7631                           
  7632                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  7633  0C1A  300D               	movlw	13
  7634  0C1B  00AD               	movwf	(_PWMLDCONptr+1)^(0+384)
  7635  0C1C  309F               	movlw	159
  7636  0C1D  00AC               	movwf	_PWMLDCONptr^(0+384)
  7637                           
  7638                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  7639  0C1E  300D               	movlw	13
  7640  0C1F  00AF               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  7641  0C20  30AF               	movlw	175
  7642  0C21  00AE               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  7643                           
  7644                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  7645  0C22  300D               	movlw	13
  7646  0C23  00B1               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  7647  0C24  30BF               	movlw	191
  7648  0C25  00B0               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  7649                           
  7650                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  7651  0C26  300D               	movlw	13
  7652  0C27  00B3               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  7653  0C28  30CF               	movlw	207
  7654  0C29  00B2               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  7655                           
  7656                           ;DMX.c: 50: char Addr=0;
  7657  0C2A  01F3               	clrf	DMX_init@Addr
  7658  0C2B                     i1l2924:	
  7659                           ;DMX.c: 51: while(Addr<4){
  7660                           
  7661  0C2B  3004               	movlw	4
  7662  0C2C  0273               	subwf	DMX_init@Addr,w
  7663  0C2D  1803               	btfsc	3,0
  7664  0C2E  0008               	return
  7665                           
  7666                           ;DMX.c: 52: DMX_sumRepeat[Addr]=2;
  7667  0C2F  0873               	movf	DMX_init@Addr,w
  7668  0C30  251F  318B         	fcall	PL102	;call to abstracted procedure
  7669                           
  7670                           ;DMX.c: 53: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  7671  0C32  3573               	lslf	DMX_init@Addr,w
  7672  0C33  3E66               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  7673  0C34  0086               	movwf	6
  7674  0C35  3001               	movlw	1	; select bank2/3
  7675  0C36  0087               	movwf	7
  7676  0C37  3573               	lslf	DMX_init@Addr,w
  7677  0C38  3E67               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  7678  0C39  0084               	movwf	4
  7679  0C3A  3001               	movlw	1	; select bank2/3
  7680  0C3B  0085               	movwf	5
  7681  0C3C  3F80               	movwi [0]fsr0
  7682  0C3D  0081               	movwf	1
  7683                           
  7684                           ;DMX.c: 54: DMXSign[Addr].InfiniteLoop=0;
  7685  0C3E  0873               	movf	DMX_init@Addr,w
  7686  0C3F  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  7687  0C40  0086               	movwf	6
  7688  0C41  0187               	clrf	7
  7689  0C42  1101               	bcf	1,2
  7690                           
  7691                           ;DMX.c: 55: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  7692  0C43  01F0               	clrf	??_DMX_init
  7693  0C44  01F1               	clrf	??_DMX_init+1
  7694  0C45  01F2               	clrf	??_DMX_init+2
  7695  0C46  0873               	movf	DMX_init@Addr,w
  7696  0C47  0773               	addwf	DMX_init@Addr,w
  7697  0C48  0773               	addwf	DMX_init@Addr,w
  7698  0C49  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  7699  0C4A  250A  318B         	fcall	PL62	;call to abstracted procedure
  7700  0C4C  0873               	movf	DMX_init@Addr,w
  7701  0C4D  0773               	addwf	DMX_init@Addr,w
  7702  0C4E  0773               	addwf	DMX_init@Addr,w
  7703  0C4F  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  7704  0C50  250A  318B         	fcall	PL62	;call to abstracted procedure
  7705                           
  7706                           ;DMX.c: 56: Addr++;
  7707  0C52  0AF3               	incf	DMX_init@Addr,f
  7708  0C53  2C2B               	goto	i1l2924
  7709  0C54                     __end_of_DMX_init:	
  7710  0C54                     __ptext24:	
  7711 ;; *************** function _RDM_init *****************
  7712 ;; Defined at:
  7713 ;;		line 16 in file "RDM.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  1    wreg      void 
  7720 ;; Registers used:
  7721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 1C/0
  7724 ;;		On exit  : 1C/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7727 ;;      Params:         0       0       0       0       0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0       0
  7729 ;;      Temps:          2       0       0       0       0       0       0       0
  7730 ;;      Totals:         2       0       0       0       0       0       0       0
  7731 ;;Total ram usage:        2 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    1
  7734 ;; This function calls:
  7735 ;;		___bmul
  7736 ;; This function is called by:
  7737 ;;		_timer1_interrupt
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _RDM_init
  7743  0C54                     _RDM_init:	
  7744                           
  7745                           ;RDM.c: 17: TimerState = 0;
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7749  0C54  0022               	movlb	2	; select bank2
  7750  0C55  01EE               	clrf	_TimerState^(0+256)	;volatile
  7751                           
  7752                           ;RDM.c: 19: Timer.HR_Count = 0;
  7753  0C56  0021               	movlb	1	; select bank1
  7754  0C57  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  7755                           
  7756                           ;RDM.c: 20: Timer.MIN_Count = 0;
  7757  0C58  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7758                           
  7759                           ;RDM.c: 21: Timer.SEC_Count = 0;
  7760  0C59  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7761                           
  7762                           ;RDM.c: 22: Timer.flags = 0;
  7763  0C5A  01B8               	clrf	_Timer^(0+128)	;volatile
  7764                           
  7765                           ;RDM.c: 25: TMR1 = 0xFE0B;
  7766  0C5B  2519  318B         	fcall	PL94	;call to abstracted procedure
  7767                           
  7768                           ;RDM.c: 26: TMR1IF = 0;
  7769  0C5D  1011               	bcf	17,0	;volatile
  7770                           
  7771                           ;RDM.c: 27: TMR1IE = 1;
  7772  0C5E  0021               	movlb	1	; select bank1
  7773  0C5F  1411               	bsf	17,0	;volatile
  7774                           
  7775                           ;RDM.c: 28: PEIE = 1;
  7776  0C60  170B               	bsf	11,6	;volatile
  7777                           
  7778                           ;RDM.c: 31: LATC4 = 1;
  7779  0C61  0022               	movlb	2	; select bank2
  7780  0C62  160E               	bsf	14,4	;volatile
  7781                           
  7782                           ;RDM.c: 32: TRISC4 = 0;
  7783  0C63  0021               	movlb	1	; select bank1
  7784  0C64  120E               	bcf	14,4	;volatile
  7785                           
  7786                           ;RDM.c: 33: TXEN = 1;
  7787  0C65  0023               	movlb	3	; select bank3
  7788  0C66  169E               	bsf	30,5	;volatile
  7789                           
  7790                           ;RDM.c: 34: SPEN = 1;
  7791  0C67  179D               	bsf	29,7	;volatile
  7792                           
  7793                           ;RDM.c: 35: SYNC = 0;
  7794  0C68  121E               	bcf	30,4	;volatile
  7795                           
  7796                           ;RDM.c: 36: RC4PPS = 0b1001;
  7797  0C69  3009               	movlw	9
  7798  0C6A  003D               	movlb	29	; select bank29
  7799  0C6B  00A4               	movwf	36	;volatile
  7800                           
  7801                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  7802  0C6C  304E               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7803  0C6D  0021               	movlb	1	; select bank1
  7804  0C6E  00DA               	movwf	_TxByte^(0+128)
  7805                           
  7806                           ;RDM.c: 39: TX9 = TX9D = 1;
  7807  0C6F  0023               	movlb	3	; select bank3
  7808  0C70  141E               	bsf	30,0	;volatile
  7809  0C71  1C1E               	btfss	30,0	;volatile
  7810  0C72  2C76               	goto	u164_20
  7811  0C73  0023               	movlb	3	; select bank3
  7812  0C74  171E               	bsf	30,6	;volatile
  7813  0C75  2C78               	goto	i1l2958
  7814  0C76                     u164_20:	
  7815  0C76  0023               	movlb	3	; select bank3
  7816  0C77  131E               	bcf	30,6	;volatile
  7817  0C78                     i1l2958:	
  7818                           
  7819                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  7820  0C78  0020               	movlb	0	; select bank0
  7821  0C79  116B               	bcf	_DMX_Flags+1,2	;volatile
  7822                           
  7823                           ;RDM.c: 44: DMX_Flags.RDMidentify = 0;
  7824  0C7A  11EB               	bcf	_DMX_Flags+1,3	;volatile
  7825  0C7B  3017               	movlw	23
  7826                           
  7827                           ;RDM.c: 59: DMX_Address=1;
  7828  0C7C  01F6               	clrf	_DMX_Address
  7829  0C7D  0AF6               	incf	_DMX_Address,f
  7830  0C7E  01F7               	clrf	_DMX_Address+1
  7831                           
  7832                           ;RDM.c: 64: PDCount = 23;
  7833  0C7F  00FA               	movwf	_PDCount
  7834  0C80                     i1l2970:	
  7835                           ;RDM.c: 65: while (PDCount >= 17) {
  7836                           
  7837  0C80  3011               	movlw	17
  7838  0C81  027A               	subwf	_PDCount,w
  7839  0C82  1C03               	btfss	3,0
  7840  0C83  2C8D               	goto	i1l2972
  7841                           
  7842                           ;RDM.c: 66: DISCOVERY_RDM_Data.value[PDCount] = 0xFE;
  7843  0C84  087A               	movf	_PDCount,w
  7844  0C85  3EBC               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  7845  0C86  0086               	movwf	6
  7846  0C87  3001               	movlw	1	; select bank3/4
  7847  0C88  0087               	movwf	7
  7848  0C89  30FE               	movlw	254
  7849  0C8A  0081               	movwf	1
  7850                           
  7851                           ;RDM.c: 67: PDCount--;
  7852  0C8B  03FA               	decf	_PDCount,f
  7853  0C8C  2C80               	goto	i1l2970
  7854  0C8D                     i1l2972:	
  7855                           
  7856                           ;RDM.c: 68: }
  7857                           ;RDM.c: 69: DISCOVERY_RDM_Data.value[16] = 0xAA;
  7858  0C8D  30AA               	movlw	170
  7859  0C8E  0023               	movlb	3	; select bank3
  7860  0C8F  00CC               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)	;volatile
  7861                           
  7862                           ;RDM.c: 70: PDCount = 0;
  7863  0C90  01FA               	clrf	_PDCount
  7864                           
  7865                           ;RDM.c: 71: checkSum = 0;
  7866  0C91  0021               	movlb	1	; select bank1
  7867  0C92  01C6               	clrf	_checkSum^(0+128)
  7868  0C93  01C7               	clrf	(_checkSum+1)^(0+128)
  7869  0C94                     i1l2986:	
  7870                           ;RDM.c: 72: while (PDCount < 6) {
  7871                           
  7872  0C94  3006               	movlw	6
  7873  0C95  027A               	subwf	_PDCount,w
  7874  0C96  1803               	btfsc	3,0
  7875  0C97  2CBE               	goto	i1l2988
  7876                           
  7877                           ;RDM.c: 73: DISCOVERY_RDM_Data.value[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  7878  0C98  30FE               	movlw	254
  7879  0C99  00F0               	movwf	___bmul@multiplicand
  7880  0C9A  087A               	movf	_PDCount,w
  7881  0C9B  24F2  318B         	fcall	___bmul
  7882  0C9D  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7883  0C9E  24FE  318B         	fcall	PL38	;call to abstracted procedure
  7884  0CA0  38AA               	iorlw	170
  7885                           
  7886                           ;RDM.c: 74: DISCOVERY_RDM_Data.value[14 - PDCount * 2] = UID[PDCount] | 0x55;
  7887  0CA1  2525  318B         	fcall	PL104	;call to abstracted procedure
  7888  0CA3  24F2  318B         	fcall	___bmul
  7889  0CA5  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7890  0CA6  24FE  318B         	fcall	PL38	;call to abstracted procedure
  7891  0CA8  3855               	iorlw	85
  7892                           
  7893                           ;RDM.c: 75: checkSum += DISCOVERY_RDM_Data.value[15 - PDCount * 2];
  7894  0CA9  2525  318B         	fcall	PL104	;call to abstracted procedure
  7895  0CAB  24F2  318B         	fcall	___bmul
  7896  0CAD  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7897  0CAE  2512  318B         	fcall	PL72	;call to abstracted procedure
  7898  0CB0  1803               	skipnc
  7899  0CB1  0AC7               	incf	(_checkSum+1)^(0+128),f
  7900                           
  7901                           ;RDM.c: 76: checkSum += DISCOVERY_RDM_Data.value[14 - PDCount * 2];
  7902  0CB2  30FE               	movlw	254
  7903  0CB3  00F0               	movwf	___bmul@multiplicand
  7904  0CB4  087A               	movf	_PDCount,w
  7905  0CB5  24F2  318B         	fcall	___bmul
  7906  0CB7  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7907  0CB8  2512  318B         	fcall	PL72	;call to abstracted procedure
  7908  0CBA  1803               	skipnc
  7909  0CBB  0AC7               	incf	(_checkSum+1)^(0+128),f
  7910                           
  7911                           ;RDM.c: 77: PDCount++;
  7912  0CBC  0AFA               	incf	_PDCount,f
  7913  0CBD  2C94               	goto	i1l2986
  7914  0CBE                     i1l2988:	
  7915                           
  7916                           ;RDM.c: 78: }
  7917                           ;RDM.c: 79: TX_RDM_Data.CS = checkSum;
  7918  0CBE  0847               	movf	(_checkSum+1)^(0+128),w
  7919  0CBF  0022               	movlb	2	; select bank2
  7920  0CC0  00CF               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7921  0CC1  0021               	movlb	1	; select bank1
  7922  0CC2  0846               	movf	_checkSum^(0+128),w
  7923  0CC3  0022               	movlb	2	; select bank2
  7924  0CC4  00CE               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7925                           
  7926                           ;RDM.c: 80: PDCount = 0;
  7927  0CC5  01FA               	clrf	_PDCount
  7928                           
  7929                           ;RDM.c: 81: DISCOVERY_RDM_Data.value[3] = TX_RDM_Data.CSH | 0xAA;
  7930  0CC6  084F               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7931  0CC7  38AA               	iorlw	170
  7932  0CC8  0023               	movlb	3	; select bank3
  7933  0CC9  00BF               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)	;volatile
  7934                           
  7935                           ;RDM.c: 82: DISCOVERY_RDM_Data.value[2] = TX_RDM_Data.CSH | 0x55;
  7936  0CCA  0022               	movlb	2	; select bank2
  7937  0CCB  084F               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7938  0CCC  3855               	iorlw	85
  7939  0CCD  0023               	movlb	3	; select bank3
  7940  0CCE  00BE               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)	;volatile
  7941                           
  7942                           ;RDM.c: 83: DISCOVERY_RDM_Data.value[1] = TX_RDM_Data.CSL | 0xAA;
  7943  0CCF  0022               	movlb	2	; select bank2
  7944  0CD0  084E               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7945  0CD1  38AA               	iorlw	170
  7946  0CD2  0023               	movlb	3	; select bank3
  7947  0CD3  00BD               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)	;volatile
  7948                           
  7949                           ;RDM.c: 84: DISCOVERY_RDM_Data.value[0] = TX_RDM_Data.CSL | 0x55;
  7950  0CD4  0022               	movlb	2	; select bank2
  7951  0CD5  084E               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7952  0CD6  3855               	iorlw	85
  7953  0CD7  0023               	movlb	3	; select bank3
  7954  0CD8  00BC               	movwf	_DISCOVERY_RDM_Data^(0+384)	;volatile
  7955                           
  7956                           ;RDM.c: 86: PDCount = 16;
  7957  0CD9  3010               	movlw	16
  7958  0CDA  00FA               	movwf	_PDCount
  7959  0CDB                     i1l2998:	
  7960                           ;RDM.c: 87: while (PDCount >= 11) {
  7961                           
  7962  0CDB  300B               	movlw	11
  7963  0CDC  027A               	subwf	_PDCount,w
  7964  0CDD  1C03               	btfss	3,0
  7965  0CDE  0008               	return
  7966                           
  7967                           ;RDM.c: 88: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  7968  0CDF  087A               	movf	_PDCount,w
  7969  0CE0  3E4E               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7970  0CE1  0086               	movwf	6
  7971  0CE2  3001               	movlw	1	; select bank2/3
  7972  0CE3  0087               	movwf	7
  7973  0CE4  3089               	movlw	high ((_UID| (0+32768)+16))
  7974  0CE5  00F4               	movwf	??_RDM_init+1
  7975  0CE6  087A               	movf	_PDCount,w
  7976  0CE7  3C3D               	sublw	low ((_UID| (0+32768)+16))
  7977  0CE8  00F3               	movwf	??_RDM_init
  7978  0CE9  1C03               	skipc
  7979  0CEA  03F4               	decf	??_RDM_init+1,f
  7980  0CEB  0084               	movwf	4
  7981  0CEC  0874               	movf	??_RDM_init+1,w
  7982  0CED  0085               	movwf	5
  7983  0CEE  0800               	movf	0,w	;code access
  7984  0CEF  0081               	movwf	1
  7985                           
  7986                           ;RDM.c: 89: PDCount--;
  7987  0CF0  03FA               	decf	_PDCount,f
  7988  0CF1  2CDB               	goto	i1l2998
  7989  0CF2                     __end_of_RDM_init:	
  7990  0CF2                     __ptext25:	
  7991 ;; *************** function ___bmul *****************
  7992 ;; Defined at:
  7993 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  multiplier      1    wreg     unsigned char 
  7996 ;;  multiplicand    1    0[COMMON] unsigned char 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;  multiplier      1    2[COMMON] unsigned char 
  7999 ;;  product         1    1[COMMON] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  1    wreg      unsigned char 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/1
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8009 ;;      Params:         1       0       0       0       0       0       0       0
  8010 ;;      Locals:         2       0       0       0       0       0       0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0
  8012 ;;      Totals:         3       0       0       0       0       0       0       0
  8013 ;;Total ram usage:        3 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_RDM_init
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function ___bmul
  8024  0CF2                     ___bmul:	
  8025                           
  8026                           ;incstack = 0
  8027                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8028                           ;___bmul@multiplier stored from wreg
  8029  0CF2  00F2               	movwf	___bmul@multiplier
  8030  0CF3  01F1               	clrf	___bmul@product
  8031  0CF4                     i1l2784:	
  8032  0CF4  0870               	movf	___bmul@multiplicand,w
  8033  0CF5  1872               	btfsc	___bmul@multiplier,0
  8034  0CF6  07F1               	addwf	___bmul@product,f
  8035  0CF7  35F0               	lslf	___bmul@multiplicand,f
  8036  0CF8  36F2               	lsrf	___bmul@multiplier,f
  8037  0CF9  0872               	movf	___bmul@multiplier,w
  8038  0CFA  1D03               	btfss	3,2
  8039  0CFB  2CF4               	goto	i1l2784
  8040  0CFC  0871               	movf	___bmul@product,w
  8041  0CFD  0008               	return
  8042  0CFE                     __end_of___bmul:	
  8043  0CFE                     PL38:	
  8044  0CFE  0086               	movwf	6
  8045  0CFF  3001               	movlw	1	; select bank3/4
  8046  0D00  0087               	movwf	7
  8047  0D01  087A               	movf	_PDCount,w
  8048  0D02  3E2D               	addlw	low (_UID| (0+32768))
  8049  0D03  0084               	movwf	4
  8050  0D04  3089               	movlw	high (_UID| (0+32768))
  8051  0D05  1803               	skipnc
  8052  0D06  3E01               	addlw	1
  8053  0D07  0085               	movwf	5
  8054  0D08  0800               	movf	0,w	;code access
  8055  0D09  0008               	return
  8056  0D0A                     __end_ofPL38:	
  8057  0D0A                     PL62:	
  8058  0D0A  0086               	movwf	6
  8059  0D0B  0870               	movf	??_DMX_init,w
  8060  0D0C  3FC0               	movwi [0]fsr1
  8061  0D0D  0871               	movf	??_DMX_init+1,w
  8062  0D0E  3FC1               	movwi [1]fsr1
  8063  0D0F  0872               	movf	??_DMX_init+2,w
  8064  0D10  3FC2               	movwi [2]fsr1
  8065  0D11  0008               	return
  8066  0D12                     __end_ofPL62:	
  8067  0D12                     PL72:	
  8068  0D12  0086               	movwf	6
  8069  0D13  3001               	movlw	1	; select bank3/4
  8070  0D14  0087               	movwf	7
  8071  0D15  0801               	movf	1,w
  8072  0D16  0021               	movlb	1	; select bank1
  8073  0D17  07C6               	addwf	_checkSum^(0+128),f
  8074  0D18  0008               	return
  8075  0D19                     __end_ofPL72:	
  8076  0D19                     PL94:	
  8077  0D19  30FE               	movlw	254
  8078  0D1A  0020               	movlb	0	; select bank0
  8079  0D1B  0097               	movwf	23	;volatile
  8080  0D1C  300B               	movlw	11
  8081  0D1D  0096               	movwf	22	;volatile
  8082  0D1E  0008               	return
  8083  0D1F                     __end_ofPL94:	
  8084  0D1F                     PL102:	
  8085  0D1F  3EEC               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  8086  0D20  0086               	movwf	6
  8087  0D21  3002               	movlw	2
  8088  0D22  0187               	clrf	7
  8089  0D23  0081               	movwf	1
  8090  0D24  0008               	return
  8091  0D25                     __end_ofPL102:	
  8092  0D25                     PL104:	
  8093  0D25  0081               	movwf	1
  8094  0D26  30FE               	movlw	254
  8095  0D27  00F0               	movwf	___bmul@multiplicand
  8096  0D28  087A               	movf	_PDCount,w
  8097  0D29  0008               	return
  8098  0D2A                     __end_ofPL104:	
  8099                           
  8100                           	psect	text29
  8101  0A6E                     __ptext29:	
  8102 ;; *************** function _DMX_interrput *****************
  8103 ;; Defined at:
  8104 ;;		line 167 in file "DMX.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;		None
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  2  122[None  ] int 
  8111 ;; Registers used:
  8112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8113 ;; Tracked objects:
  8114 ;;		On entry : 1F/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8118 ;;      Params:         0       0       0       0       0       0       0       0
  8119 ;;      Locals:         1       0       0       0       0       0       0       0
  8120 ;;      Temps:          2       0       0       0       0       0       0       0
  8121 ;;      Totals:         3       0       0       0       0       0       0       0
  8122 ;;Total ram usage:        3 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_isr
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _DMX_interrput
  8133  0A6E                     _DMX_interrput:	
  8134                           
  8135                           ;DMX.c: 168: if (RCIE & RCIF) {
  8136                           
  8137                           ;incstack = 0
  8138                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8139  0A6E  3001               	movlw	1
  8140  0A6F  0021               	movlb	1	; select bank1
  8141  0A70  1E91               	btfss	17,5	;volatile
  8142  0A71  3900               	andlw	0
  8143  0A72  0020               	movlb	0	; select bank0
  8144  0A73  1E91               	btfss	17,5	;volatile
  8145  0A74  3900               	andlw	0
  8146  0A75  1C09               	btfss	9,0
  8147  0A76  0008               	return
  8148                           
  8149                           ;DMX.c: 169: volatile char RxDat;
  8150                           ;DMX.c: 170: if (FERR)
  8151  0A77  0023               	movlb	3	; select bank3
  8152  0A78  1D1D               	btfss	29,2	;volatile
  8153  0A79  2B2D               	goto	i1l3572
  8154                           
  8155                           ;DMX.c: 171: {
  8156                           ;DMX.c: 172: RxDat = RCREG;
  8157  0A7A  0819               	movf	25,w	;volatile
  8158  0A7B  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8159                           
  8160                           ;DMX.c: 173: DMX_Flags.RxBreak = 1;
  8161  0A7C  0020               	movlb	0	; select bank0
  8162  0A7D  14EA               	bsf	_DMX_Flags,1	;volatile
  8163                           
  8164                           ;DMX.c: 174: RxState = WAIT_FOR_START;
  8165  0A7E  3001               	movlw	1
  8166  0A7F  0021               	movlb	1	; select bank1
  8167  0A80  00DE               	movwf	_RxState^(0+128)	;volatile
  8168                           
  8169                           ;DMX.c: 175: RxTimer = 0;
  8170  0A81  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8171  0A82  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8172  0A83  2B2D               	goto	i1l3572
  8173  0A84                     i1l3492:	
  8174                           
  8175                           ;DMX.c: 179: RxDat = RCREG;
  8176  0A84  0023               	movlb	3	; select bank3
  8177  0A85  0819               	movf	25,w	;volatile
  8178  0A86  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8179                           
  8180                           ;DMX.c: 180: break;
  8181  0A87  2B38               	goto	i1l3574
  8182  0A88                     i1l386:	
  8183                           ;DMX.c: 181: case WAIT_FOR_START:
  8184                           
  8185                           
  8186                           ;DMX.c: 182: if (RCIF)
  8187  0A88  0020               	movlb	0	; select bank0
  8188  0A89  1E91               	btfss	17,5	;volatile
  8189  0A8A  2B38               	goto	i1l3574
  8190                           
  8191                           ;DMX.c: 183: {
  8192                           ;DMX.c: 184: RxDat = RCREG;
  8193  0A8B  0023               	movlb	3	; select bank3
  8194  0A8C  0819               	movf	25,w	;volatile
  8195  0A8D  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8196  0A8E  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8197  0A8F  1D03               	btfss	3,2
  8198  0A90  2A9D               	goto	i1l3502
  8199                           
  8200                           ;DMX.c: 187: RxState = RX_DMX_READ_DATA;
  8201  0A91  3002               	movlw	2
  8202  0A92  0021               	movlb	1	; select bank1
  8203  0A93  00DE               	movwf	_RxState^(0+128)	;volatile
  8204                           
  8205                           ;DMX.c: 188: RxDataPtr = &RxData[0];
  8206  0A94  30E0               	movlw	(low (_RxData| 0))& (0+255)
  8207  0A95  00DF               	movwf	_RxDataPtr^(0+128)
  8208                           
  8209                           ;DMX.c: 189: RxAddrCount = 1;
  8210  0A96  3001               	movlw	1
  8211  0A97  00D4               	movwf	_RxAddrCount^(0+128)	;volatile
  8212  0A98  01D5               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8213                           
  8214                           ;DMX.c: 191: DMXPeriod = DMXPeriodConst;
  8215  0A99  085D               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8216  0A9A  00FB               	movwf	_DMXPeriod
  8217                           
  8218                           ;DMX.c: 192: DMXPeriodConst = 0;
  8219  0A9B  01DD               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8220                           
  8221                           ;DMX.c: 193: } else if (RxDat == 0xCC) {
  8222  0A9C  2B38               	goto	i1l3574
  8223  0A9D                     i1l3502:	
  8224  0A9D  30CC               	movlw	204
  8225  0A9E  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8226  0A9F  1D03               	btfss	3,2
  8227  0AA0  2AA5               	goto	i1l3506
  8228                           
  8229                           ;DMX.c: 195: RxState = RX_RDM_READ_SubStartCode;
  8230  0AA1  3003               	movlw	3
  8231  0AA2  0021               	movlb	1	; select bank1
  8232  0AA3  00DE               	movwf	_RxState^(0+128)	;volatile
  8233                           
  8234                           ;DMX.c: 197: } else {
  8235  0AA4  2B38               	goto	i1l3574
  8236  0AA5                     i1l3506:	
  8237                           
  8238                           ;DMX.c: 198: RxState = RX_WAIT_FOR_BREAK;
  8239  0AA5  0021               	movlb	1	; select bank1
  8240  0AA6  01DE               	clrf	_RxState^(0+128)	;volatile
  8241  0AA7  2B38               	goto	i1l3574
  8242  0AA8                     i1l3508:	
  8243                           
  8244                           ;DMX.c: 203: RxDat = RCREG;
  8245  0AA8  0023               	movlb	3	; select bank3
  8246  0AA9  0819               	movf	25,w	;volatile
  8247  0AAA  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8248                           
  8249                           ;DMX.c: 204: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8250  0AAB  0877               	movf	_DMX_Address+1,w
  8251  0AAC  0021               	movlb	1	; select bank1
  8252  0AAD  0255               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8253  0AAE  1D03               	skipz
  8254  0AAF  2AB2               	goto	u231_25
  8255  0AB0  0876               	movf	_DMX_Address,w
  8256  0AB1  0254               	subwf	_RxAddrCount^(0+128),w	;volatile
  8257  0AB2                     u231_25:	
  8258  0AB2  1C03               	skipc
  8259  0AB3  2ABE               	goto	i1l3516
  8260  0AB4  0876               	movf	_DMX_Address,w
  8261  0AB5  0477               	iorwf	_DMX_Address+1,w
  8262  0AB6  1903               	btfsc	3,2
  8263  0AB7  2ABE               	goto	i1l3516
  8264                           
  8265                           ;DMX.c: 205: {
  8266                           ;DMX.c: 206: *RxDataPtr = RxDat;
  8267  0AB8  085F               	movf	_RxDataPtr^(0+128),w
  8268  0AB9  0086               	movwf	6
  8269  0ABA  0187               	clrf	7
  8270  0ABB  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8271  0ABC  0081               	movwf	1
  8272                           
  8273                           ;DMX.c: 207: RxDataPtr++;
  8274  0ABD  0ADF               	incf	_RxDataPtr^(0+128),f
  8275  0ABE                     i1l3516:	
  8276                           
  8277                           ;DMX.c: 208: }
  8278                           ;DMX.c: 209: RxAddrCount++;
  8279  0ABE  0AD4               	incf	_RxAddrCount^(0+128),f	;volatile
  8280  0ABF  1903               	skipnz
  8281  0AC0  0AD5               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8282                           
  8283                           ;DMX.c: 211: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8284  0AC1  0876               	movf	_DMX_Address,w
  8285  0AC2  3E04               	addlw	4
  8286  0AC3  00F0               	movwf	??_DMX_interrput
  8287  0AC4  3000               	movlw	0
  8288  0AC5  3D77               	addwfc	_DMX_Address+1,w
  8289  0AC6  00F1               	movwf	??_DMX_interrput+1
  8290  0AC7  0255               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8291  0AC8  1D03               	skipz
  8292  0AC9  2ACC               	goto	u233_25
  8293  0ACA  0870               	movf	??_DMX_interrput,w
  8294  0ACB  0254               	subwf	_RxAddrCount^(0+128),w	;volatile
  8295  0ACC                     u233_25:	
  8296  0ACC  1C03               	skipc
  8297  0ACD  2B38               	goto	i1l3574
  8298  0ACE  0876               	movf	_DMX_Address,w
  8299  0ACF  0477               	iorwf	_DMX_Address+1,w
  8300  0AD0  1903               	btfsc	3,2
  8301  0AD1  2B38               	goto	i1l3574
  8302                           
  8303                           ;DMX.c: 212: DMX_Flags.RxNew = 1;
  8304  0AD2  0020               	movlb	0	; select bank0
  8305  0AD3  146A               	bsf	_DMX_Flags,0	;volatile
  8306                           
  8307                           ;DMX.c: 213: RxState = RX_WAIT_FOR_BREAK;
  8308                           
  8309                           ;DMX.c: 214: RxTimer = 0;
  8310                           
  8311                           ;DMX.c: 215: DMX_Flags.RxTimeout = 0;
  8312  0AD4  234A  318A         	fcall	PL86	;call to abstracted procedure
  8313  0AD6  2B38               	goto	i1l3574
  8314  0AD7                     i1l3528:	
  8315                           
  8316                           ;DMX.c: 219: RxDat = RCREG;
  8317  0AD7  0023               	movlb	3	; select bank3
  8318  0AD8  0819               	movf	25,w	;volatile
  8319  0AD9  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8320                           
  8321                           ;DMX.c: 220: if (RxDat == 0x01)
  8322  0ADA  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8323  0ADB  2B38               	goto	i1l3574
  8324                           
  8325                           ;DMX.c: 221: {
  8326                           ;DMX.c: 222: RxState = RX_RDM_READ_DATA;
  8327  0ADC  3004               	movlw	4
  8328  0ADD  0021               	movlb	1	; select bank1
  8329  0ADE  00DE               	movwf	_RxState^(0+128)	;volatile
  8330                           
  8331                           ;DMX.c: 223: PackCount = 23;
  8332  0ADF  3017               	movlw	23
  8333  0AE0  00F9               	movwf	_PackCount	;volatile
  8334                           
  8335                           ;DMX.c: 224: PD_Flag = 0;
  8336  0AE1  01CA               	clrf	_PD_Flag^(0+128)	;volatile
  8337  0AE2  2B29               	goto	L5
  8338  0AE3                     i1l3536:	
  8339                           
  8340                           ;DMX.c: 229: RxDat = RCREG;
  8341  0AE3  0023               	movlb	3	; select bank3
  8342  0AE4  0819               	movf	25,w	;volatile
  8343  0AE5  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8344                           
  8345                           ;DMX.c: 230: RX_RDM_Data.value[PackCount] = RxDat;
  8346  0AE6  0879               	movf	_PackCount,w
  8347  0AE7  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8348  0AE8  0086               	movwf	6
  8349  0AE9  3001               	movlw	1	; select bank2/3
  8350  0AEA  0087               	movwf	7
  8351  0AEB  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8352  0AEC  0081               	movwf	1
  8353                           
  8354                           ;DMX.c: 232: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8355  0AED  3002               	movlw	2
  8356  0AEE  0679               	xorwf	_PackCount,w	;volatile
  8357  0AEF  1D03               	btfss	3,2
  8358  0AF0  2B02               	goto	i1l3550
  8359  0AF1  0879               	movf	_PackCount,w
  8360  0AF2  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8361  0AF3  0086               	movwf	6
  8362  0AF4  0801               	movf	1,w
  8363  0AF5  1903               	btfsc	3,2
  8364  0AF6  2B02               	goto	i1l3550
  8365  0AF7  0021               	movlb	1	; select bank1
  8366  0AF8  084A               	movf	_PD_Flag^(0+128),w	;volatile
  8367  0AF9  044B               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8368  0AFA  1D03               	btfss	3,2
  8369  0AFB  2B02               	goto	i1l3550
  8370                           
  8371                           ;DMX.c: 233: RxState = RX_RDM_PD;
  8372  0AFC  3005               	movlw	5
  8373  0AFD  00DE               	movwf	_RxState^(0+128)	;volatile
  8374                           
  8375                           ;DMX.c: 234: PDCount = 100-1;
  8376  0AFE  3063               	movlw	99
  8377  0AFF  00FA               	movwf	_PDCount
  8378  0B00                     i1l3548:	
  8379                           
  8380                           ;DMX.c: 235: PackCount--;
  8381  0B00  03F9               	decf	_PackCount,f	;volatile
  8382                           
  8383                           ;DMX.c: 236: break;
  8384  0B01  2B38               	goto	i1l3574
  8385  0B02                     i1l3550:	
  8386                           
  8387                           ;DMX.c: 237: }
  8388                           ;DMX.c: 238: if (PackCount == 0) {
  8389  0B02  0879               	movf	_PackCount,w	;volatile
  8390  0B03  1D03               	btfss	3,2
  8391  0B04  2B00               	goto	i1l3548
  8392                           
  8393                           ;DMX.c: 239: DMX_Flags.RDMNew = 1;
  8394  0B05  0020               	movlb	0	; select bank0
  8395  0B06  176A               	bsf	_DMX_Flags,6	;volatile
  8396                           
  8397                           ;DMX.c: 240: RxState = RX_WAIT_FOR_BREAK;
  8398                           
  8399                           ;DMX.c: 241: RxTimer = 0;
  8400                           
  8401                           ;DMX.c: 242: DMX_Flags.RxTimeout = 0;
  8402  0B07  234A  318A         	fcall	PL86	;call to abstracted procedure
  8403  0B09  2B00               	goto	i1l3548
  8404  0B0A                     i1l3560:	
  8405                           
  8406                           ;DMX.c: 248: RxDat = RCREG;
  8407  0B0A  0023               	movlb	3	; select bank3
  8408  0B0B  0819               	movf	25,w	;volatile
  8409  0B0C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8410                           
  8411                           ;DMX.c: 249: PD.u8[PDCount] = RxDat;
  8412  0B0D  087A               	movf	_PDCount,w
  8413  0B0E  3E8C               	addlw	140
  8414  0B0F  00F0               	movwf	??_DMX_interrput
  8415  0B10  3021               	movlw	33
  8416  0B11  01F1               	clrf	??_DMX_interrput+1
  8417  0B12  3DF1               	addwfc	??_DMX_interrput+1,f
  8418  0B13  0870               	movf	??_DMX_interrput,w
  8419  0B14  0086               	movwf	6
  8420  0B15  0871               	movf	??_DMX_interrput+1,w
  8421  0B16  0087               	movwf	7
  8422  0B17  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8423  0B18  0081               	movwf	1
  8424                           
  8425                           ;DMX.c: 250: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  8426  0B19  01F1               	clrf	??_DMX_interrput+1
  8427  0B1A  0022               	movlb	2	; select bank2
  8428  0B1B  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8429  0B1C  3C64               	sublw	100
  8430  0B1D  00F0               	movwf	??_DMX_interrput
  8431  0B1E  1C03               	skipc
  8432  0B1F  03F1               	decf	??_DMX_interrput+1,f
  8433  0B20  067A               	xorwf	_PDCount,w
  8434  0B21  0471               	iorwf	??_DMX_interrput+1,w
  8435  0B22  1D03               	skipz
  8436  0B23  2B2B               	goto	i1l3568
  8437                           
  8438                           ;DMX.c: 251: RxState = RX_RDM_READ_DATA;
  8439  0B24  3004               	movlw	4
  8440  0B25  0021               	movlb	1	; select bank1
  8441  0B26  00DE               	movwf	_RxState^(0+128)	;volatile
  8442                           
  8443                           ;DMX.c: 252: PD_Flag = 1;
  8444  0B27  3001               	movlw	1
  8445  0B28  00CA               	movwf	_PD_Flag^(0+128)	;volatile
  8446  0B29                     L5:	
  8447  0B29  01CB               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8448                           
  8449                           ;DMX.c: 253: }else{
  8450  0B2A  2B38               	goto	i1l3574
  8451  0B2B                     i1l3568:	
  8452                           
  8453                           ;DMX.c: 254: PDCount--;
  8454  0B2B  03FA               	decf	_PDCount,f
  8455  0B2C  2B38               	goto	i1l3574
  8456  0B2D                     i1l3572:	
  8457  0B2D  0021               	movlb	1	; select bank1
  8458  0B2E  085E               	movf	_RxState^(0+128),w	;volatile
  8459                           
  8460                           ; Switch size 1, requested type "space"
  8461                           ; Number of cases is 6, Range of values is 0 to 5
  8462                           ; switch strategies available:
  8463                           ; Name         Instructions Cycles
  8464                           ; direct_byte           18     6 (fixed)
  8465                           ; simple_byte           19    10 (average)
  8466                           ; jumptable            260     6 (fixed)
  8467                           ;	Chosen strategy is direct_byte
  8468  0B2F  0084               	movwf	4
  8469  0B30  3006               	movlw	6
  8470  0B31  0204               	subwf	4,w
  8471  0B32  1803               	skipnc
  8472  0B33  2B38               	goto	i1l3574
  8473  0B34  3189               	movlp	high i1S4660
  8474  0B35  3504               	lslf	4,w
  8475  0B36  3E33               	addlw	low i1S4660
  8476  0B37  0082               	movwf	2
  8477  0B38                     i1l3574:	
  8478                           
  8479                           ;DMX.c: 259: if (RxTimer > 2400) {
  8480  0B38  0021               	movlb	1	; select bank1
  8481  0B39  0853               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8482  0B3A  3A80               	xorlw	128
  8483  0B3B  00F0               	movwf	??_DMX_interrput
  8484  0B3C  3089               	movlw	137
  8485  0B3D  0270               	subwf	??_DMX_interrput,w
  8486  0B3E  1D03               	skipz
  8487  0B3F  2B42               	goto	u241_25
  8488  0B40  3061               	movlw	97
  8489  0B41  0252               	subwf	_RxTimer^(0+128),w	;volatile
  8490  0B42                     u241_25:	
  8491  0B42  1C03               	skipc
  8492  0B43  0008               	return
  8493                           
  8494                           ;DMX.c: 260: DMX_Flags.RxTimeout = 1;
  8495  0B44  0020               	movlb	0	; select bank0
  8496  0B45  156A               	bsf	_DMX_Flags,2	;volatile
  8497                           
  8498                           ;DMX.c: 261: RxTimer = 0;
  8499  0B46  0021               	movlb	1	; select bank1
  8500  0B47  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8501  0B48  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8502  0B49  0008               	return
  8503  0B4A                     __end_of_DMX_interrput:	
  8504  0B4A                     PL86:	
  8505  0B4A  0021               	movlb	1	; select bank1
  8506  0B4B  01DE               	clrf	_RxState^(0+128)	;volatile
  8507  0B4C  01D2               	clrf	_RxTimer^(0+128)	;volatile
  8508  0B4D  01D3               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8509  0B4E  0020               	movlb	0	; select bank0
  8510  0B4F  116A               	bcf	_DMX_Flags,2	;volatile
  8511  0B50  0008               	return
  8512  0B51                     __end_ofPL86:	
  8513                           
  8514                           	psect	swtext1
  8515  0933                     __pswtext1:	
  8516  0933                     i1S4660:	
  8517  0933  318A  2A84         	ljmp	i1l3492
  8518  0935  318A  2A88         	ljmp	i1l386
  8519  0937  318A  2AA8         	ljmp	i1l3508
  8520  0939  318A  2AD7         	ljmp	i1l3528
  8521  093B  318A  2AE3         	ljmp	i1l3536
  8522  093D  318B  2B0A         	ljmp	i1l3560
  8523                           
  8524                           	psect	text30
  8525  0A58                     __ptext30:	
  8526 ;; *************** function _ADC_interrupt *****************
  8527 ;; Defined at:
  8528 ;;		line 43 in file "ADC.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;		None
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  2  120[None  ] int 
  8535 ;; Registers used:
  8536 ;;		wreg
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 1F/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8542 ;;      Params:         0       0       0       0       0       0       0       0
  8543 ;;      Locals:         0       0       0       0       0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0
  8545 ;;      Totals:         0       0       0       0       0       0       0       0
  8546 ;;Total ram usage:        0 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; This function calls:
  8549 ;;		Nothing
  8550 ;; This function is called by:
  8551 ;;		_isr
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           
  8556                           ;psect for function _ADC_interrupt
  8557  0A58                     _ADC_interrupt:	
  8558                           
  8559                           ;ADC.c: 44: if (ADIF == 1) {
  8560                           
  8561                           ;incstack = 0
  8562                           ; Regs used in _ADC_interrupt: [wreg]
  8563  0A58  0020               	movlb	0	; select bank0
  8564  0A59  1F11               	btfss	17,6	;volatile
  8565  0A5A  0008               	return
  8566                           
  8567                           ;ADC.c: 45: ADC_Data=ADRESH;
  8568  0A5B  0021               	movlb	1	; select bank1
  8569  0A5C  081C               	movf	28,w	;volatile
  8570  0A5D  00F8               	movwf	_ADC_Data	;volatile
  8571                           
  8572                           ;ADC.c: 46: ADC_Flags.New=1;
  8573  0A5E  1456               	bsf	_ADC_Flags^(0+128),0	;volatile
  8574                           
  8575                           ;ADC.c: 47: ADIF = 0;
  8576  0A5F  0020               	movlb	0	; select bank0
  8577  0A60  1311               	bcf	17,6	;volatile
  8578  0A61  0008               	return
  8579  0A62                     __end_of_ADC_interrupt:	
  8580  007E                     btemp	set	126	;btemp
  8581  007E                     int$flags	set	126
  8582  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        13
    BSS         198
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      77
    BANK1            80      8      80
    BANK2            80      0      79
    BANK3            80      4      56
    BANK4            76      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    DataPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    RxArPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PD_Manu	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    TxByte	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK1[4]), 

    PWMLDCONptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_timer1_interrupt
    _timer1_interrupt->_RDM_init
    _RDM_init->___bmul

Critical Paths under _main in BANK0

    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_RDM_TXSTART
    _RDM_GET_CC->_RDM_TXSTART
    _RDM_TXSTART->_RDM_get_checkSum
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_DMX_loop

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38956
                           _ADC_loop
                           _DMX_loop
                        _RDM_rx_loop
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    2184
                                             30 BANK0      1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     546
                                             26 BANK0      4     4      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0     546
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     546
                                             26 BANK0      2     2      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     546
                                             25 BANK0      1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     546
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            12    12      0   36772
                                              0 BANK1      8     8      0
                                              0 BANK3      4     4      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     579
                                             61 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7084
                                             55 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5532
                                             43 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             13 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1030
                                             13 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4733
                                             28 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     491
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0     352
                                              5 COMMON     1     1      0
                           _ADC_init
                           _DMX_init
                           _RDM_init
 ---------------------------------------------------------------------------------
 (7) _RDM_init                                             2     2      0     196
                                              3 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (7) _DMX_init                                             4     4      0     156
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_loop
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_SET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt
     _ADC_init
     _DMX_init
     _RDM_init
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     130       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      8      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      4      38      12       70.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4C      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     130      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 14 09:47:24 2017

                           _i 014C                             pc 0002                ___bmul@product 0071  
                 __CFG_CP$OFF 0000                            PL2 05C4                            PL4 05DE  
                          PL6 05E4                            PL8 05EE                            _PD 218C  
                ___ftadd@exp1 0056                  ___ftadd@exp2 0055                           PL10 05F5  
                         PL20 063F                           PL12 0603                           PL30 0674  
                         PL22 0647                           PL14 0620                           PL40 0687  
                         PL32 0F2B                           PL24 0657                           PL16 0F15  
                         PL50 06A7                           PL42 0FEE                           PL34 067A  
                         PL26 065D                           PL18 0637                           PL60 06C9  
                         PL52 06B0                           PL44 068D                           PL36 0F39  
                         PL28 0665                           PL70 06D8                           PL62 0D0A  
                         PL54 06B7                           PL46 0698                           PL38 0CFE  
                         PL80 06EC                           PL72 0D12                           PL64 0F4F  
                         PL56 0F46                           PL48 069F                           PL90 0F63  
                         PL82 0FF9                           PL74 06DE                           PL66 06D1  
                         PL58 06C0                           PL92 0700                           PL84 06F3  
                         PL76 0F5C                           PL68 0F55                           PL94 0D19  
                         PL86 0B4A                           PL78 06E5                           PL96 0F69  
                         PL88 06FA                           PL98 0706                  ___ftadd@sign 0054  
                         l362 0239                           l348 0246                           l373 0314  
                         l711 0E1E                           l723 0E56                           l716 0E42  
                         _RA2 0062                           _RC0 0070                           _RC1 0071  
                         _RA5 0065                           _RC2 0072                           _PR2 001B  
                         _UID 092D                           _TX9 0CF6                           _PWM 072D  
                         _isr 0004                           wreg 0009                          PL100 070C  
                        PL110 071B                          PL102 0D1F                          PL104 0D25  
                        PL106 0712                          PL108 0717                  __CFG_LVP$OFF 0000  
                ___ftdiv@cntr 0045                  ___ftdiv@sign 004A                          l1110 0D6A  
                        l1114 0D82                          l1106 0D2B                          l1115 0D8C  
                        l1117 0DA0                          l1304 0533                          l1328 0474  
                        l1346 0390                          l4010 0487                          l1292 050E  
                        l4004 047F                          l4100 0E99                          l4022 0498  
                        l4202 03B9                          l4122 0EDF                          l4130 0EFD  
                        l4026 0D2A                          l4140 0EFE                          l4044 0D4E  
                        l4214 03DF                          l4310 0589                          l4150 0F14  
                        l4142 0EFF                          l4320 0594                          l4128 0EE7  
                        l4218 03EE                          l4234 04B8                          l4322 059D  
                        l4314 0590                          l4260 04DE                          l4148 0F09  
                        l4166 054E                          l4174 0382                          l4238 04C6  
                        l4326 05AB                          l4430 0259                          l4406 020E  
                        l4414 00DE                          l4094 0E88                          l4086 0D8F  
                        l4272 04EC                          l4256 04DA                          l4432 0271  
                        l4096 0E89                          l4196 03A3                          l4268 04E8  
                        l4292 0568                          l4452 0332                          l4286 0360  
                        l4294 056D                          l4438 0283                          l4454 0347  
                        l4374 0162                          l3920 0512                          l4448 030F  
                        l4384 0191                          l4368 0120                          l4536 00A5  
                        l3930 0531                          l3922 0516                          l4394 01DC  
                        l4490 0E53                          l4482 0E19                          l3932 0529  
                        l3924 051B                          l3940 0DA1                          l4652 0D95  
                        l4492 0E54                          l3926 0524                          l4654 0F0F  
                        l4494 0E55                          l4478 0E01                          l3960 0426  
                        l3880 0E6B                          l4656 0EF0                          l4658 0EF8  
                        l3956 041F                          l3892 0DDF                          l3990 045E  
                        l3966 0435                          l3886 0E72                          l3878 0E5D  
                        _ADIE 048E                          l3984 0451                          l3888 0E7F  
                        _ADIF 008E                          l3986 0455                          l3978 0443  
                        l3996 046C                          l3988 045A                          ?_isr 0070  
                        l3998 0470                          _BRGH 0CF2                          _FERR 0CEA  
                        u3025 03B0                          u3155 0570                          u2710 0DAD  
                        u3440 0E2A                          u3455 0E3C                          _PEIE 005E  
                        _RCIE 048D                          _RCIF 008D                          _TMR1 0016  
            _DMXPeriodDimming 00DC                          _SPEN 0CEF                          _TX9D 0CF0  
                        _TXIE 048C                          _TXEN 0CF5                          _TXIF 008C  
                        _SYNC 0CF4                  __CFG_WRT$OFF 0000           _TX_RDM_Response_Set 0DC0  
                        _main 005B                  ___ftpack@arg 0020                  ___ftpack@exp 0023  
                        fsr0h 0005                          fsr1h 0007                          indf0 0000  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E                          start 0013                    _TX_PDCount 00D8  
            __end_of_ADC_init 0BE5              __end_of_ADC_loop 00D4                    _TX_PD_Flag 00C8  
                 ?_RDM_GET_CC 0070             ___bmul@multiplier 0072                 __CFG_MCLRE$ON 0000  
                ___ftmul@cntr 003A                  ___ftmul@sign 003B                   ?_RDM_SET_CC 0070  
                ___fttol@exp1 0069                  ___fttol@lval 0065                         ??_isr 0076  
               __CFG_PLLEN$ON 0000          ?_TX_RDM_Response_Set 0070                   _RX_RDM_Data 0120  
                       ?_main 0070               __end_of___ftadd 04AA                 __CFG_WDTE$OFF 0000  
            __end_of_DMX_init 0C54                         _ANSA2 0C62                         _ANSC0 0C70  
                       _ANSA4 0C64               __end_of___ftdiv 03D0                         _ANSC1 0C71  
                       _ANSC2 0C72                         _ANSC3 0C73              __end_of_DMX_loop 0349  
             __end_of___ftmul 0506                         _T1CON 0018               __end_of___ftsub 0374  
             __end_of___fttol 05B4                         _T2CON 001C                         _LATC3 0873  
                       _LATC4 0874                         i1l386 0A88                         i1l900 0B5A  
                       i1l733 0F96                         i1l742 0FED                         i1l910 0BBD  
                       i1l909 0BB3                         _RCREG 0199     __size_of_RDM_tx_interrupt 007F  
                       _RCSTA 019D                         _PD_ID 00CC                         _RXPPS 0E15  
                       _TXREG 019A                         _Timer 00B8              __end_of_RDM_init 0CF2  
               ___awtoft@sign 002B                 ___ftpack@sign 0024                __CFG_BOREN$OFF 0000  
                 _TX_RDM_Data 014E                         status 0003                         wtemp0 007E  
                __end_ofPL100 0712                  __end_ofPL110 071F                  __end_ofPL102 0D25  
                __end_ofPL104 0D2A                  __end_ofPL106 0717                  __end_ofPL108 071B  
           ?_RDM_get_checkSum 0020            ??_RDM_get_checkSum 0039               __initialization 0015  
                __end_of_main 00AC                    _CurrentPWM 0140             ?_RDM_discovery_CC 0070  
       ??_TX_RDM_Response_Set 0020                  ?_RDM_TXSTART 0070            ??_RDM_discovery_CC 003A  
                      ??_main 006A                 ___fttol@sign1 0064           __size_of_RDM_GET_CC 0076  
                      _ADCON0 009D                        _ADCON1 009E                        i1S4660 0933  
                      _ADRESH 009C           __size_of_RDM_SET_CC 0017              __end_of___awtoft 055F  
            __end_of___ftpack 0544              __end_of___lbtoft 0359                        _RA2PPS 0E92  
                      _RC0PPS 0EA0                        _RC1PPS 0EA1                        _RC2PPS 0EA2  
                      _RC4PPS 0EA4                        i1l3502 0A9D                        i1l3506 0AA5  
                      i1l3516 0ABE                        i1l3508 0AA8                        i1l3620 0B94  
                      i1l3550 0B02                        i1l3702 0FDC                        i1l3560 0B0A  
                      i1l3536 0AE3                        i1l3528 0AD7                        i1l3608 0B71  
                      i1l3706 0FDE                        i1l3548 0B00                        i1l3492 0A84  
                      i1l3572 0B2D                        i1l3660 0F76                        i1l2924 0C2B  
                      i1l3652 0BC9                        i1l3574 0B38                        i1l3568 0B2B  
                      i1l3680 0FA0                        i1l3672 0F8B                        i1l2784 0CF4  
                      i1l3592 0B59                        i1l3666 0F80                        i1l2970 0C80  
                      i1l2972 0C8D                        i1l2958 0C78                        i1l3696 0FBE  
                      i1l2986 0C94                        i1l2988 0CBE                        i1l2998 0CDB  
                      u231_25 0AB2                        _INTCON 000B                        u241_25 0B42  
                      u233_25 0ACC                        u164_20 0C76                        u260_25 0FD4  
                      u245_20 0B76                        u245_22 0B77                        u246_20 0B7D  
                      u246_22 0B7E              __end_of___lwtoft 05C4                        _OSCCON 0099  
      __size_of_DMX_interrput 00DC                        _TMR1IE 0488                        _TMR1IF 0088  
           _DMX_CurrentBright 00AC                        _SPBRGH 019C                        _SPBRGL 019B  
                      _TRISA2 0462                        _TRISC0 0470                        _TRISA4 0464  
                      _TRISC1 0471                        _TRISC2 0472                        _TRISC3 0473  
                      _TRISC4 0474                        _TRISC5 0475                __CFG_PWRTE$OFF 0000  
                      _RxData 00E0              _timer1_interrupt 0B51                        _TxByte 00DA  
                      ___bmul 0CF2                        ___ftge 03D0                     ??___ftadd 0051  
              __CFG_STVREN$ON 0000                     ??___ftdiv 0042                     ??___ftmul 0033  
                   ??___ftsub 005D                     ??___fttol 0061                  ?_timer1_init 0070  
                ?_RDM_rx_loop 0070                    _TimerState 016E                        _rxdata 006C  
       ___ftmul@f3_as_product 0037           RDM_get_checkSum@len 0038                  __pdataCOMMON 007B  
                   ?_ADC_init 0070                     ?_ADC_loop 0070       __end_of__initialization 0058  
                  ___ftadd@f1 004B                    ___ftadd@f2 004E                    ___ftge@ff1 002D  
                  ___ftge@ff2 0030                    ___ftdiv@f1 003F                    ___ftdiv@f2 003C  
                  ___ftdiv@f3 0046                     ?_DMX_init 0070                     ?_DMX_loop 0070  
               _DMX_loop$1446 01D4                _DMXPeriodConst 00DD                    ___awtoft@c 0028  
                  ___lbtoft@c 002C           ___bmul@multiplicand 0070                    ___ftmul@f1 002D  
                  ___ftmul@f2 0030                    ___ftsub@f1 005A                    ___ftsub@f2 0057  
                  ___fttol@f1 005D                __pcstackCOMMON 0070                  __pidataBANK1 0000  
                __pidataBANK2 0000              _DMX_TargetBright 00A0                     ?_RDM_init 0070  
                  __end_ofPL2 05DE                    __end_ofPL4 05E4                    __end_ofPL6 05EE  
                  __end_ofPL8 05F5                 _DMX_interrput 0A6E                    ___lwtoft@c 0028  
            _RDM_tx_interrupt 0F6F                    ??_ADC_init 0070                    ??_ADC_loop 0020  
                  __pbssBANK0 006A                    __pbssBANK1 00A0                    __pbssBANK2 0120  
                  __pbssBANK3 01A0                 _DMX_sumRepeat 00EC                   _RxAddrCount 00D4  
      __size_of_ADC_interrupt 000A                    ??_DMX_init 0070                    ??_DMX_loop 00E4  
                ??_RDM_GET_CC 003A                    __pmaintext 005B                  ??_RDM_SET_CC 003A  
                     ?___bmul 0070                       ?___ftge 002D                    ??_RDM_init 0073  
                  __pintentry 0004                ?_DMX_interrput 0070                       _BAUDCON 019F  
                   ?___awtoft 0028                     ?___ftpack 0020                     ?___lbtoft 0028  
           _RDM_tx_TimerBreak 0DDF                     ?___lwtoft 0028          __size_of_RDM_TXSTART 001F  
          ?_RDM_tx_TimerBreak 0070                       _DMXSign 00BF                       _PWM1DCH 0D94  
                     _PWM1DCL 0D93                       _PWM2DCH 0DA4                       _PWM2DCL 0DA3  
                     _OSCTUNE 0098                       _PWM3DCH 0DB4                       _PWM3DCL 0DB3  
                     _PWM4DCH 0DC4                       _PWM1CON 0D9B                       _PWM4DCL 0DC3  
                     _PWM2CON 0DAB                       _PWM3CON 0DBB                       _PWM4CON 0DCB  
                     _PDCount 007A                       _PWM1PHH 0D92                       _PWM1PHL 0D91  
                     _PWM2PHH 0DA2                       _PWM2PHL 0DA1                       _PWM3PHH 0DB2  
                     _PWM3PHL 0DB1                       _PWM1PRH 0D96                       _PWM4PHH 0DC2  
                     _PWM1PRL 0D95                       _PWM4PHL 0DC1                       _PWM2PRH 0DA6  
                     _PWM2PRL 0DA5                       _PWM3PRH 0DB6                       _PWM3PRL 0DB5  
                     _PD_Flag 00CA                       _PWM4PRH 0DC6                       _PWM4PRL 0DC5  
                     _PD_Manu 00CE              _Timer_DelayCount 00D7            __end_of_RDM_GET_CC 0EFE  
         ??_RDM_tx_TimerBreak 0020            __end_of_RDM_SET_CC 0F15                     _ADC_Flags 00D6  
                DMX_init@Addr 0073                       _TxCount 00D0                       _RxTimer 00D2  
                     _RxState 00DE                       _TxState 00D9               __size_of___bmul 000C  
             __size_of___ftge 002C                       ___ftadd 03FC                       ___ftdiv 0374  
                     ___ftmul 04AA                       ___ftsub 0359                       ___fttol 055F  
   __end_of_RDM_tx_TimerBreak 0DEE                  DMX_loop@Addr 01D7                    ??___awtoft 002B  
                  ??___ftpack 0025                    ??___lbtoft 002C          __size_of_timer1_init 000E  
                     __ptext1 071F                       __ptext2 0DEE                       __ptext3 0D2A  
                     __ptext4 0EFE                       __ptext5 0E88                       __ptext6 0DA1  
                     __ptext7 0DC0                       __ptext8 0DDF                       __ptext9 0E57  
               _ADC_interrupt 0A58          __size_of_RDM_rx_loop 0069                    ??___lwtoft 002B  
   __size_of_RDM_get_checkSum 0031                  __size_of_isr 000F      __end_of_timer1_interrupt 0BD9  
                     clrloop0 0A63     __size_of_RDM_discovery_CC 0077          RDM_get_checkSum@Data 0020  
        end_of_initialization 0058                     _DMX_Flags 006A                     _DMXPeriod 007B  
              _DMX_difference 00C3   __end_of_TX_RDM_Response_Set 0DDF               ??_DMX_interrput 0070  
                   _PWM1LDCON 0D9F                     _PWM2LDCON 0DAF                     _PWM3LDCON 0DBF  
                   _PWM4LDCON 0DCF                  __pstringtext 072D                ?_ADC_interrupt 0070  
                   _PWMDCHptr 01B4                     _PWMDCLptr 0138              __CFG_FOSC$INTOSC 0000  
           __size_of_ADC_init 000C             __size_of_ADC_loop 0028                   ___ftdiv@exp 0049  
    __end_of_RDM_tx_interrupt 0FEE                   ___ftmul@exp 0036             __size_of_DMX_init 006F  
           __size_of_DMX_loop 0275                __end_of___bmul 0CFE                __end_of___ftge 03FC  
  __size_of_RDM_tx_TimerBreak 000F                 __pidataCOMMON 0000             __size_of_RDM_init 009E  
                   _PackCount 0079                   __end_ofPL10 0603                   __end_ofPL20 0647  
                 __end_ofPL12 0620                   __end_ofPL30 067A                   __end_ofPL22 0657  
                 __end_ofPL14 0637                   __end_ofPL40 068D                   __end_ofPL32 0F39  
                 __end_ofPL24 065D                   __end_ofPL16 0F2B                   __end_ofPL50 06B0  
                 __end_ofPL42 0FF9                   __end_ofPL34 0687                   __end_ofPL26 0665  
                 __end_ofPL18 063F                   __end_ofPL60 06D1                   __end_ofPL52 06B7  
                 __end_ofPL44 0698                   __end_ofPL36 0F46                   __end_ofPL28 0674  
                 __end_ofPL70 06DE                   __end_ofPL62 0D12                   __end_ofPL54 06C0  
                 __end_ofPL46 069F                   __end_ofPL38 0D0A                   __end_ofPL80 06F3  
                 __end_ofPL72 0D19                   __end_ofPL64 0F55                   __end_ofPL56 0F4F  
                 __end_ofPL48 06A7                   __end_ofPL90 0F69                   __end_ofPL82 1000  
                 __end_ofPL74 06E5                   __end_ofPL66 06D8                   __end_ofPL58 06C9  
                 __end_ofPL92 0706                   __end_ofPL84 06FA                   __end_ofPL76 0F63  
                 __end_ofPL68 0F5C                   __end_ofPL94 0D1F                   __end_ofPL86 0B51  
                 __end_ofPL78 06EC                   __end_ofPL96 0F6F                   __end_ofPL88 0700  
                 __end_ofPL98 070C           start_initialization 0015                   __end_of_UID 0933  
                 __end_of_PWM 092D                   __end_of_isr 0013                     _RxDataPtr 00DF  
                _DMXStepConst 00DB              __CFG_LPBOREN$OFF 0000                      ??___bmul 0071  
                    ??___ftge 0033               ??_ADC_interrupt 0070                   __pdataBANK1 00EC  
                 __pdataBANK2 0166              _RDM_get_checkSum 0E57             __size_of___awtoft 001B  
           __size_of___ftpack 003E             __size_of___lbtoft 0010                   __pbssBIGRAM 218C  
                 __pbssCOMMON 0076                     ___latbits 0001             __size_of___lwtoft 0010  
               __pcstackBANK0 0020                 __pcstackBANK1 00E4                 __pcstackBANK3 01D4  
            _RDM_discovery_CC 0D2A               _DMX_SpaceBright 01A0                     __pnvBANK2 016E  
                    ?___ftadd 004B                      ?___ftdiv 003C                      ?___ftmul 002D  
                    ?___ftsub 0057                      ?___fttol 005D              __CFG_PPS1WAY$OFF 0000  
               ??_RDM_TXSTART 0039                     __pswtext1 0933                      _ADC_Data 0078  
                    _ADC_init 0BD9                      _ADC_loop 00AC             ?_timer1_interrupt 0070  
          ??_timer1_interrupt 0075                     _preRxData 0148                     clear_ram0 0A62  
                    _DMX_init 0BE5                      _DMX_loop 00D4                      _GO_nDONE 04E9  
          DMX_interrput@RxDat 0072                 ??_timer1_init 0020                      _RDM_init 0C54  
               ??_RDM_rx_loop 003E           __end_of_RDM_TXSTART 0DC0                   _DMX_Address 0076  
           ?_RDM_tx_interrupt 0070            ??_RDM_tx_interrupt 0070              __size_of___ftadd 00AE  
       __end_of_DMX_interrput 0B4A              __size_of___ftdiv 005C              __size_of___ftmul 005C  
            __size_of___ftsub 001B              __size_of___fttol 0055                      ___awtoft 0544  
                    ___ftpack 0506                      ___lbtoft 0349  __size_of_TX_RDM_Response_Set 001F  
                    ___lwtoft 05B4           __end_of_timer1_init 072D           __end_of_RDM_rx_loop 0E57  
                    _checkSum 00C6                      __ptext10 00D4                      __ptext11 05B4  
                    __ptext20 0506                      __ptext12 0349                      __ptext21 00AC  
                    __ptext13 055F                      __ptext30 0A58                      __ptext14 0359  
                    __ptext23 0B51                      __ptext15 03FC                      __ptext24 0C54  
                    __ptext16 04AA                      __ptext25 0CF2                      __ptext17 03D0  
                    __ptext26 0BE5                      __ptext18 0374                      __ptext27 0BD9  
                    __ptext19 0544                      __ptext28 0F6F                      __ptext29 0A6E  
               __size_of_main 0051      __end_of_RDM_get_checkSum 0E88                      int$flags 007E  
    __end_of_RDM_discovery_CC 0DA1                   _RDM_TXSTART 0DA1                    _DMX_Repeat 0166  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                    _RDM_GET_CC 0E88  
                  _RDM_SET_CC 0EFE            _DISCOVERY_RDM_Data 01BC                   _timer1_init 071F  
                  _PWM1CLKCON 0D9E                    _PWM2CLKCON 0DAE                   _RDM_rx_loop 0DEE  
                  _PWM3CLKCON 0DBE                    _PWM4CLKCON 0DCE                   _PWMLDCONptr 01AC  
       __end_of_ADC_interrupt 0A62     __size_of_timer1_interrupt 0088  
