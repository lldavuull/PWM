

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Aug 01 09:13:07 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text26,local,class=CODE,merge=1,delta=2
    23                           	psect	text27,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext1,local,class=CONST,delta=2
    25                           	psect	text28,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext2,local,class=CONST,delta=2
    27                           	psect	text29,local,class=CODE,merge=1,delta=2
    28                           	psect	pa_nodes0,global,class=CODE,delta=2
    29                           	dabs	1,0x320,16
    30                           	dabs	1,0x2A0,80
    31                           	dabs	1,0x26B,5
    32                           	dabs	1,0x218B,0,_PD
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.41
    36                           ; Generated 25/01/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F1574 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000E                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  008C                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010E                     	;# 
   114  0111                     	;# 
   115  0112                     	;# 
   116  0113                     	;# 
   117  0114                     	;# 
   118  0115                     	;# 
   119  0116                     	;# 
   120  0117                     	;# 
   121  0118                     	;# 
   122  0119                     	;# 
   123  018C                     	;# 
   124  018E                     	;# 
   125  0191                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0194                     	;# 
   131  0195                     	;# 
   132  0196                     	;# 
   133  0197                     	;# 
   134  0199                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020E                     	;# 
   144  028C                     	;# 
   145  028E                     	;# 
   146  030C                     	;# 
   147  030E                     	;# 
   148  038C                     	;# 
   149  038E                     	;# 
   150  0391                     	;# 
   151  0392                     	;# 
   152  0393                     	;# 
   153  0397                     	;# 
   154  0398                     	;# 
   155  0399                     	;# 
   156  0691                     	;# 
   157  0692                     	;# 
   158  0693                     	;# 
   159  0694                     	;# 
   160  0695                     	;# 
   161  0D8E                     	;# 
   162  0D8F                     	;# 
   163  0D90                     	;# 
   164  0D91                     	;# 
   165  0D91                     	;# 
   166  0D92                     	;# 
   167  0D93                     	;# 
   168  0D93                     	;# 
   169  0D94                     	;# 
   170  0D95                     	;# 
   171  0D95                     	;# 
   172  0D96                     	;# 
   173  0D97                     	;# 
   174  0D97                     	;# 
   175  0D98                     	;# 
   176  0D99                     	;# 
   177  0D99                     	;# 
   178  0D9A                     	;# 
   179  0D9B                     	;# 
   180  0D9C                     	;# 
   181  0D9C                     	;# 
   182  0D9D                     	;# 
   183  0D9D                     	;# 
   184  0D9E                     	;# 
   185  0D9F                     	;# 
   186  0DA0                     	;# 
   187  0DA1                     	;# 
   188  0DA1                     	;# 
   189  0DA2                     	;# 
   190  0DA3                     	;# 
   191  0DA3                     	;# 
   192  0DA4                     	;# 
   193  0DA5                     	;# 
   194  0DA5                     	;# 
   195  0DA6                     	;# 
   196  0DA7                     	;# 
   197  0DA7                     	;# 
   198  0DA8                     	;# 
   199  0DA9                     	;# 
   200  0DA9                     	;# 
   201  0DAA                     	;# 
   202  0DAB                     	;# 
   203  0DAC                     	;# 
   204  0DAC                     	;# 
   205  0DAD                     	;# 
   206  0DAD                     	;# 
   207  0DAE                     	;# 
   208  0DAF                     	;# 
   209  0DB0                     	;# 
   210  0DB1                     	;# 
   211  0DB1                     	;# 
   212  0DB2                     	;# 
   213  0DB3                     	;# 
   214  0DB3                     	;# 
   215  0DB4                     	;# 
   216  0DB5                     	;# 
   217  0DB5                     	;# 
   218  0DB6                     	;# 
   219  0DB7                     	;# 
   220  0DB7                     	;# 
   221  0DB8                     	;# 
   222  0DB9                     	;# 
   223  0DB9                     	;# 
   224  0DBA                     	;# 
   225  0DBB                     	;# 
   226  0DBC                     	;# 
   227  0DBC                     	;# 
   228  0DBD                     	;# 
   229  0DBD                     	;# 
   230  0DBE                     	;# 
   231  0DBF                     	;# 
   232  0DC0                     	;# 
   233  0DC1                     	;# 
   234  0DC1                     	;# 
   235  0DC2                     	;# 
   236  0DC3                     	;# 
   237  0DC3                     	;# 
   238  0DC4                     	;# 
   239  0DC5                     	;# 
   240  0DC5                     	;# 
   241  0DC6                     	;# 
   242  0DC7                     	;# 
   243  0DC7                     	;# 
   244  0DC8                     	;# 
   245  0DC9                     	;# 
   246  0DC9                     	;# 
   247  0DCA                     	;# 
   248  0DCB                     	;# 
   249  0DCC                     	;# 
   250  0DCC                     	;# 
   251  0DCD                     	;# 
   252  0DCD                     	;# 
   253  0DCE                     	;# 
   254  0DCF                     	;# 
   255  0DD0                     	;# 
   256  0E0F                     	;# 
   257  0E10                     	;# 
   258  0E11                     	;# 
   259  0E12                     	;# 
   260  0E13                     	;# 
   261  0E14                     	;# 
   262  0E15                     	;# 
   263  0E16                     	;# 
   264  0E17                     	;# 
   265  0E90                     	;# 
   266  0E91                     	;# 
   267  0E92                     	;# 
   268  0E94                     	;# 
   269  0E95                     	;# 
   270  0EA0                     	;# 
   271  0EA1                     	;# 
   272  0EA2                     	;# 
   273  0EA3                     	;# 
   274  0EA4                     	;# 
   275  0EA5                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEA                     	;# 
   285  0FEB                     	;# 
   286  0FED                     	;# 
   287  0FEE                     	;# 
   288  0FEE                     	;# 
   289  0FEF                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000E                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  008C                     	;# 
   317  008E                     	;# 
   318  0091                     	;# 
   319  0092                     	;# 
   320  0093                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0098                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  009F                     	;# 
   333  010C                     	;# 
   334  010E                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0113                     	;# 
   338  0114                     	;# 
   339  0115                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  0118                     	;# 
   343  0119                     	;# 
   344  018C                     	;# 
   345  018E                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0194                     	;# 
   352  0195                     	;# 
   353  0196                     	;# 
   354  0197                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019C                     	;# 
   360  019D                     	;# 
   361  019E                     	;# 
   362  019F                     	;# 
   363  020C                     	;# 
   364  020E                     	;# 
   365  028C                     	;# 
   366  028E                     	;# 
   367  030C                     	;# 
   368  030E                     	;# 
   369  038C                     	;# 
   370  038E                     	;# 
   371  0391                     	;# 
   372  0392                     	;# 
   373  0393                     	;# 
   374  0397                     	;# 
   375  0398                     	;# 
   376  0399                     	;# 
   377  0691                     	;# 
   378  0692                     	;# 
   379  0693                     	;# 
   380  0694                     	;# 
   381  0695                     	;# 
   382  0D8E                     	;# 
   383  0D8F                     	;# 
   384  0D90                     	;# 
   385  0D91                     	;# 
   386  0D91                     	;# 
   387  0D92                     	;# 
   388  0D93                     	;# 
   389  0D93                     	;# 
   390  0D94                     	;# 
   391  0D95                     	;# 
   392  0D95                     	;# 
   393  0D96                     	;# 
   394  0D97                     	;# 
   395  0D97                     	;# 
   396  0D98                     	;# 
   397  0D99                     	;# 
   398  0D99                     	;# 
   399  0D9A                     	;# 
   400  0D9B                     	;# 
   401  0D9C                     	;# 
   402  0D9C                     	;# 
   403  0D9D                     	;# 
   404  0D9D                     	;# 
   405  0D9E                     	;# 
   406  0D9F                     	;# 
   407  0DA0                     	;# 
   408  0DA1                     	;# 
   409  0DA1                     	;# 
   410  0DA2                     	;# 
   411  0DA3                     	;# 
   412  0DA3                     	;# 
   413  0DA4                     	;# 
   414  0DA5                     	;# 
   415  0DA5                     	;# 
   416  0DA6                     	;# 
   417  0DA7                     	;# 
   418  0DA7                     	;# 
   419  0DA8                     	;# 
   420  0DA9                     	;# 
   421  0DA9                     	;# 
   422  0DAA                     	;# 
   423  0DAB                     	;# 
   424  0DAC                     	;# 
   425  0DAC                     	;# 
   426  0DAD                     	;# 
   427  0DAD                     	;# 
   428  0DAE                     	;# 
   429  0DAF                     	;# 
   430  0DB0                     	;# 
   431  0DB1                     	;# 
   432  0DB1                     	;# 
   433  0DB2                     	;# 
   434  0DB3                     	;# 
   435  0DB3                     	;# 
   436  0DB4                     	;# 
   437  0DB5                     	;# 
   438  0DB5                     	;# 
   439  0DB6                     	;# 
   440  0DB7                     	;# 
   441  0DB7                     	;# 
   442  0DB8                     	;# 
   443  0DB9                     	;# 
   444  0DB9                     	;# 
   445  0DBA                     	;# 
   446  0DBB                     	;# 
   447  0DBC                     	;# 
   448  0DBC                     	;# 
   449  0DBD                     	;# 
   450  0DBD                     	;# 
   451  0DBE                     	;# 
   452  0DBF                     	;# 
   453  0DC0                     	;# 
   454  0DC1                     	;# 
   455  0DC1                     	;# 
   456  0DC2                     	;# 
   457  0DC3                     	;# 
   458  0DC3                     	;# 
   459  0DC4                     	;# 
   460  0DC5                     	;# 
   461  0DC5                     	;# 
   462  0DC6                     	;# 
   463  0DC7                     	;# 
   464  0DC7                     	;# 
   465  0DC8                     	;# 
   466  0DC9                     	;# 
   467  0DC9                     	;# 
   468  0DCA                     	;# 
   469  0DCB                     	;# 
   470  0DCC                     	;# 
   471  0DCC                     	;# 
   472  0DCD                     	;# 
   473  0DCD                     	;# 
   474  0DCE                     	;# 
   475  0DCF                     	;# 
   476  0DD0                     	;# 
   477  0E0F                     	;# 
   478  0E10                     	;# 
   479  0E11                     	;# 
   480  0E12                     	;# 
   481  0E13                     	;# 
   482  0E14                     	;# 
   483  0E15                     	;# 
   484  0E16                     	;# 
   485  0E17                     	;# 
   486  0E90                     	;# 
   487  0E91                     	;# 
   488  0E92                     	;# 
   489  0E94                     	;# 
   490  0E95                     	;# 
   491  0EA0                     	;# 
   492  0EA1                     	;# 
   493  0EA2                     	;# 
   494  0EA3                     	;# 
   495  0EA4                     	;# 
   496  0EA5                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE8                     	;# 
   503  0FE9                     	;# 
   504  0FEA                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEE                     	;# 
   510  0FEF                     	;# 
   511  0000                     	;# 
   512  0001                     	;# 
   513  0002                     	;# 
   514  0003                     	;# 
   515  0004                     	;# 
   516  0005                     	;# 
   517  0006                     	;# 
   518  0007                     	;# 
   519  0008                     	;# 
   520  0009                     	;# 
   521  000A                     	;# 
   522  000B                     	;# 
   523  000C                     	;# 
   524  000E                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008E                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0097                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  018C                     	;# 
   566  018E                     	;# 
   567  0191                     	;# 
   568  0191                     	;# 
   569  0192                     	;# 
   570  0193                     	;# 
   571  0193                     	;# 
   572  0194                     	;# 
   573  0195                     	;# 
   574  0196                     	;# 
   575  0197                     	;# 
   576  0199                     	;# 
   577  019A                     	;# 
   578  019B                     	;# 
   579  019B                     	;# 
   580  019C                     	;# 
   581  019D                     	;# 
   582  019E                     	;# 
   583  019F                     	;# 
   584  020C                     	;# 
   585  020E                     	;# 
   586  028C                     	;# 
   587  028E                     	;# 
   588  030C                     	;# 
   589  030E                     	;# 
   590  038C                     	;# 
   591  038E                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0397                     	;# 
   596  0398                     	;# 
   597  0399                     	;# 
   598  0691                     	;# 
   599  0692                     	;# 
   600  0693                     	;# 
   601  0694                     	;# 
   602  0695                     	;# 
   603  0D8E                     	;# 
   604  0D8F                     	;# 
   605  0D90                     	;# 
   606  0D91                     	;# 
   607  0D91                     	;# 
   608  0D92                     	;# 
   609  0D93                     	;# 
   610  0D93                     	;# 
   611  0D94                     	;# 
   612  0D95                     	;# 
   613  0D95                     	;# 
   614  0D96                     	;# 
   615  0D97                     	;# 
   616  0D97                     	;# 
   617  0D98                     	;# 
   618  0D99                     	;# 
   619  0D99                     	;# 
   620  0D9A                     	;# 
   621  0D9B                     	;# 
   622  0D9C                     	;# 
   623  0D9C                     	;# 
   624  0D9D                     	;# 
   625  0D9D                     	;# 
   626  0D9E                     	;# 
   627  0D9F                     	;# 
   628  0DA0                     	;# 
   629  0DA1                     	;# 
   630  0DA1                     	;# 
   631  0DA2                     	;# 
   632  0DA3                     	;# 
   633  0DA3                     	;# 
   634  0DA4                     	;# 
   635  0DA5                     	;# 
   636  0DA5                     	;# 
   637  0DA6                     	;# 
   638  0DA7                     	;# 
   639  0DA7                     	;# 
   640  0DA8                     	;# 
   641  0DA9                     	;# 
   642  0DA9                     	;# 
   643  0DAA                     	;# 
   644  0DAB                     	;# 
   645  0DAC                     	;# 
   646  0DAC                     	;# 
   647  0DAD                     	;# 
   648  0DAD                     	;# 
   649  0DAE                     	;# 
   650  0DAF                     	;# 
   651  0DB0                     	;# 
   652  0DB1                     	;# 
   653  0DB1                     	;# 
   654  0DB2                     	;# 
   655  0DB3                     	;# 
   656  0DB3                     	;# 
   657  0DB4                     	;# 
   658  0DB5                     	;# 
   659  0DB5                     	;# 
   660  0DB6                     	;# 
   661  0DB7                     	;# 
   662  0DB7                     	;# 
   663  0DB8                     	;# 
   664  0DB9                     	;# 
   665  0DB9                     	;# 
   666  0DBA                     	;# 
   667  0DBB                     	;# 
   668  0DBC                     	;# 
   669  0DBC                     	;# 
   670  0DBD                     	;# 
   671  0DBD                     	;# 
   672  0DBE                     	;# 
   673  0DBF                     	;# 
   674  0DC0                     	;# 
   675  0DC1                     	;# 
   676  0DC1                     	;# 
   677  0DC2                     	;# 
   678  0DC3                     	;# 
   679  0DC3                     	;# 
   680  0DC4                     	;# 
   681  0DC5                     	;# 
   682  0DC5                     	;# 
   683  0DC6                     	;# 
   684  0DC7                     	;# 
   685  0DC7                     	;# 
   686  0DC8                     	;# 
   687  0DC9                     	;# 
   688  0DC9                     	;# 
   689  0DCA                     	;# 
   690  0DCB                     	;# 
   691  0DCC                     	;# 
   692  0DCC                     	;# 
   693  0DCD                     	;# 
   694  0DCD                     	;# 
   695  0DCE                     	;# 
   696  0DCF                     	;# 
   697  0DD0                     	;# 
   698  0E0F                     	;# 
   699  0E10                     	;# 
   700  0E11                     	;# 
   701  0E12                     	;# 
   702  0E13                     	;# 
   703  0E14                     	;# 
   704  0E15                     	;# 
   705  0E16                     	;# 
   706  0E17                     	;# 
   707  0E90                     	;# 
   708  0E91                     	;# 
   709  0E92                     	;# 
   710  0E94                     	;# 
   711  0E95                     	;# 
   712  0EA0                     	;# 
   713  0EA1                     	;# 
   714  0EA2                     	;# 
   715  0EA3                     	;# 
   716  0EA4                     	;# 
   717  0EA5                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000E                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0015                     	;# 
   750  0016                     	;# 
   751  0016                     	;# 
   752  0017                     	;# 
   753  0018                     	;# 
   754  0019                     	;# 
   755  001A                     	;# 
   756  001B                     	;# 
   757  001C                     	;# 
   758  008C                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009B                     	;# 
   771  009C                     	;# 
   772  009D                     	;# 
   773  009E                     	;# 
   774  009F                     	;# 
   775  010C                     	;# 
   776  010E                     	;# 
   777  0111                     	;# 
   778  0112                     	;# 
   779  0113                     	;# 
   780  0114                     	;# 
   781  0115                     	;# 
   782  0116                     	;# 
   783  0117                     	;# 
   784  0118                     	;# 
   785  0119                     	;# 
   786  018C                     	;# 
   787  018E                     	;# 
   788  0191                     	;# 
   789  0191                     	;# 
   790  0192                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0194                     	;# 
   794  0195                     	;# 
   795  0196                     	;# 
   796  0197                     	;# 
   797  0199                     	;# 
   798  019A                     	;# 
   799  019B                     	;# 
   800  019B                     	;# 
   801  019C                     	;# 
   802  019D                     	;# 
   803  019E                     	;# 
   804  019F                     	;# 
   805  020C                     	;# 
   806  020E                     	;# 
   807  028C                     	;# 
   808  028E                     	;# 
   809  030C                     	;# 
   810  030E                     	;# 
   811  038C                     	;# 
   812  038E                     	;# 
   813  0391                     	;# 
   814  0392                     	;# 
   815  0393                     	;# 
   816  0397                     	;# 
   817  0398                     	;# 
   818  0399                     	;# 
   819  0691                     	;# 
   820  0692                     	;# 
   821  0693                     	;# 
   822  0694                     	;# 
   823  0695                     	;# 
   824  0D8E                     	;# 
   825  0D8F                     	;# 
   826  0D90                     	;# 
   827  0D91                     	;# 
   828  0D91                     	;# 
   829  0D92                     	;# 
   830  0D93                     	;# 
   831  0D93                     	;# 
   832  0D94                     	;# 
   833  0D95                     	;# 
   834  0D95                     	;# 
   835  0D96                     	;# 
   836  0D97                     	;# 
   837  0D97                     	;# 
   838  0D98                     	;# 
   839  0D99                     	;# 
   840  0D99                     	;# 
   841  0D9A                     	;# 
   842  0D9B                     	;# 
   843  0D9C                     	;# 
   844  0D9C                     	;# 
   845  0D9D                     	;# 
   846  0D9D                     	;# 
   847  0D9E                     	;# 
   848  0D9F                     	;# 
   849  0DA0                     	;# 
   850  0DA1                     	;# 
   851  0DA1                     	;# 
   852  0DA2                     	;# 
   853  0DA3                     	;# 
   854  0DA3                     	;# 
   855  0DA4                     	;# 
   856  0DA5                     	;# 
   857  0DA5                     	;# 
   858  0DA6                     	;# 
   859  0DA7                     	;# 
   860  0DA7                     	;# 
   861  0DA8                     	;# 
   862  0DA9                     	;# 
   863  0DA9                     	;# 
   864  0DAA                     	;# 
   865  0DAB                     	;# 
   866  0DAC                     	;# 
   867  0DAC                     	;# 
   868  0DAD                     	;# 
   869  0DAD                     	;# 
   870  0DAE                     	;# 
   871  0DAF                     	;# 
   872  0DB0                     	;# 
   873  0DB1                     	;# 
   874  0DB1                     	;# 
   875  0DB2                     	;# 
   876  0DB3                     	;# 
   877  0DB3                     	;# 
   878  0DB4                     	;# 
   879  0DB5                     	;# 
   880  0DB5                     	;# 
   881  0DB6                     	;# 
   882  0DB7                     	;# 
   883  0DB7                     	;# 
   884  0DB8                     	;# 
   885  0DB9                     	;# 
   886  0DB9                     	;# 
   887  0DBA                     	;# 
   888  0DBB                     	;# 
   889  0DBC                     	;# 
   890  0DBC                     	;# 
   891  0DBD                     	;# 
   892  0DBD                     	;# 
   893  0DBE                     	;# 
   894  0DBF                     	;# 
   895  0DC0                     	;# 
   896  0DC1                     	;# 
   897  0DC1                     	;# 
   898  0DC2                     	;# 
   899  0DC3                     	;# 
   900  0DC3                     	;# 
   901  0DC4                     	;# 
   902  0DC5                     	;# 
   903  0DC5                     	;# 
   904  0DC6                     	;# 
   905  0DC7                     	;# 
   906  0DC7                     	;# 
   907  0DC8                     	;# 
   908  0DC9                     	;# 
   909  0DC9                     	;# 
   910  0DCA                     	;# 
   911  0DCB                     	;# 
   912  0DCC                     	;# 
   913  0DCC                     	;# 
   914  0DCD                     	;# 
   915  0DCD                     	;# 
   916  0DCE                     	;# 
   917  0DCF                     	;# 
   918  0DD0                     	;# 
   919  0E0F                     	;# 
   920  0E10                     	;# 
   921  0E11                     	;# 
   922  0E12                     	;# 
   923  0E13                     	;# 
   924  0E14                     	;# 
   925  0E15                     	;# 
   926  0E16                     	;# 
   927  0E17                     	;# 
   928  0E90                     	;# 
   929  0E91                     	;# 
   930  0E92                     	;# 
   931  0E94                     	;# 
   932  0E95                     	;# 
   933  0EA0                     	;# 
   934  0EA1                     	;# 
   935  0EA2                     	;# 
   936  0EA3                     	;# 
   937  0EA4                     	;# 
   938  0EA5                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE8                     	;# 
   945  0FE9                     	;# 
   946  0FEA                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEE                     	;# 
   952  0FEF                     	;# 
   953  0000                     	;# 
   954  0001                     	;# 
   955  0002                     	;# 
   956  0003                     	;# 
   957  0004                     	;# 
   958  0005                     	;# 
   959  0006                     	;# 
   960  0007                     	;# 
   961  0008                     	;# 
   962  0009                     	;# 
   963  000A                     	;# 
   964  000B                     	;# 
   965  000C                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008E                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0093                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  009F                     	;# 
   996  010C                     	;# 
   997  010E                     	;# 
   998  0111                     	;# 
   999  0112                     	;# 
  1000  0113                     	;# 
  1001  0114                     	;# 
  1002  0115                     	;# 
  1003  0116                     	;# 
  1004  0117                     	;# 
  1005  0118                     	;# 
  1006  0119                     	;# 
  1007  018C                     	;# 
  1008  018E                     	;# 
  1009  0191                     	;# 
  1010  0191                     	;# 
  1011  0192                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0194                     	;# 
  1015  0195                     	;# 
  1016  0196                     	;# 
  1017  0197                     	;# 
  1018  0199                     	;# 
  1019  019A                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020C                     	;# 
  1027  020E                     	;# 
  1028  028C                     	;# 
  1029  028E                     	;# 
  1030  030C                     	;# 
  1031  030E                     	;# 
  1032  038C                     	;# 
  1033  038E                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  0397                     	;# 
  1038  0398                     	;# 
  1039  0399                     	;# 
  1040  0691                     	;# 
  1041  0692                     	;# 
  1042  0693                     	;# 
  1043  0694                     	;# 
  1044  0695                     	;# 
  1045  0D8E                     	;# 
  1046  0D8F                     	;# 
  1047  0D90                     	;# 
  1048  0D91                     	;# 
  1049  0D91                     	;# 
  1050  0D92                     	;# 
  1051  0D93                     	;# 
  1052  0D93                     	;# 
  1053  0D94                     	;# 
  1054  0D95                     	;# 
  1055  0D95                     	;# 
  1056  0D96                     	;# 
  1057  0D97                     	;# 
  1058  0D97                     	;# 
  1059  0D98                     	;# 
  1060  0D99                     	;# 
  1061  0D99                     	;# 
  1062  0D9A                     	;# 
  1063  0D9B                     	;# 
  1064  0D9C                     	;# 
  1065  0D9C                     	;# 
  1066  0D9D                     	;# 
  1067  0D9D                     	;# 
  1068  0D9E                     	;# 
  1069  0D9F                     	;# 
  1070  0DA0                     	;# 
  1071  0DA1                     	;# 
  1072  0DA1                     	;# 
  1073  0DA2                     	;# 
  1074  0DA3                     	;# 
  1075  0DA3                     	;# 
  1076  0DA4                     	;# 
  1077  0DA5                     	;# 
  1078  0DA5                     	;# 
  1079  0DA6                     	;# 
  1080  0DA7                     	;# 
  1081  0DA7                     	;# 
  1082  0DA8                     	;# 
  1083  0DA9                     	;# 
  1084  0DA9                     	;# 
  1085  0DAA                     	;# 
  1086  0DAB                     	;# 
  1087  0DAC                     	;# 
  1088  0DAC                     	;# 
  1089  0DAD                     	;# 
  1090  0DAD                     	;# 
  1091  0DAE                     	;# 
  1092  0DAF                     	;# 
  1093  0DB0                     	;# 
  1094  0DB1                     	;# 
  1095  0DB1                     	;# 
  1096  0DB2                     	;# 
  1097  0DB3                     	;# 
  1098  0DB3                     	;# 
  1099  0DB4                     	;# 
  1100  0DB5                     	;# 
  1101  0DB5                     	;# 
  1102  0DB6                     	;# 
  1103  0DB7                     	;# 
  1104  0DB7                     	;# 
  1105  0DB8                     	;# 
  1106  0DB9                     	;# 
  1107  0DB9                     	;# 
  1108  0DBA                     	;# 
  1109  0DBB                     	;# 
  1110  0DBC                     	;# 
  1111  0DBC                     	;# 
  1112  0DBD                     	;# 
  1113  0DBD                     	;# 
  1114  0DBE                     	;# 
  1115  0DBF                     	;# 
  1116  0DC0                     	;# 
  1117  0DC1                     	;# 
  1118  0DC1                     	;# 
  1119  0DC2                     	;# 
  1120  0DC3                     	;# 
  1121  0DC3                     	;# 
  1122  0DC4                     	;# 
  1123  0DC5                     	;# 
  1124  0DC5                     	;# 
  1125  0DC6                     	;# 
  1126  0DC7                     	;# 
  1127  0DC7                     	;# 
  1128  0DC8                     	;# 
  1129  0DC9                     	;# 
  1130  0DC9                     	;# 
  1131  0DCA                     	;# 
  1132  0DCB                     	;# 
  1133  0DCC                     	;# 
  1134  0DCC                     	;# 
  1135  0DCD                     	;# 
  1136  0DCD                     	;# 
  1137  0DCE                     	;# 
  1138  0DCF                     	;# 
  1139  0DD0                     	;# 
  1140  0E0F                     	;# 
  1141  0E10                     	;# 
  1142  0E11                     	;# 
  1143  0E12                     	;# 
  1144  0E13                     	;# 
  1145  0E14                     	;# 
  1146  0E15                     	;# 
  1147  0E16                     	;# 
  1148  0E17                     	;# 
  1149  0E90                     	;# 
  1150  0E91                     	;# 
  1151  0E92                     	;# 
  1152  0E94                     	;# 
  1153  0E95                     	;# 
  1154  0EA0                     	;# 
  1155  0EA1                     	;# 
  1156  0EA2                     	;# 
  1157  0EA3                     	;# 
  1158  0EA4                     	;# 
  1159  0EA5                     	;# 
  1160  0FE4                     	;# 
  1161  0FE5                     	;# 
  1162  0FE6                     	;# 
  1163  0FE7                     	;# 
  1164  0FE8                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEA                     	;# 
  1169  0FEB                     	;# 
  1170  0FED                     	;# 
  1171  0FEE                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000E                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0013                     	;# 
  1191  0015                     	;# 
  1192  0016                     	;# 
  1193  0016                     	;# 
  1194  0017                     	;# 
  1195  0018                     	;# 
  1196  0019                     	;# 
  1197  001A                     	;# 
  1198  001B                     	;# 
  1199  001C                     	;# 
  1200  008C                     	;# 
  1201  008E                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0098                     	;# 
  1209  0099                     	;# 
  1210  009A                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  009F                     	;# 
  1217  010C                     	;# 
  1218  010E                     	;# 
  1219  0111                     	;# 
  1220  0112                     	;# 
  1221  0113                     	;# 
  1222  0114                     	;# 
  1223  0115                     	;# 
  1224  0116                     	;# 
  1225  0117                     	;# 
  1226  0118                     	;# 
  1227  0119                     	;# 
  1228  018C                     	;# 
  1229  018E                     	;# 
  1230  0191                     	;# 
  1231  0191                     	;# 
  1232  0192                     	;# 
  1233  0193                     	;# 
  1234  0193                     	;# 
  1235  0194                     	;# 
  1236  0195                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0199                     	;# 
  1240  019A                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020C                     	;# 
  1248  020E                     	;# 
  1249  028C                     	;# 
  1250  028E                     	;# 
  1251  030C                     	;# 
  1252  030E                     	;# 
  1253  038C                     	;# 
  1254  038E                     	;# 
  1255  0391                     	;# 
  1256  0392                     	;# 
  1257  0393                     	;# 
  1258  0397                     	;# 
  1259  0398                     	;# 
  1260  0399                     	;# 
  1261  0691                     	;# 
  1262  0692                     	;# 
  1263  0693                     	;# 
  1264  0694                     	;# 
  1265  0695                     	;# 
  1266  0D8E                     	;# 
  1267  0D8F                     	;# 
  1268  0D90                     	;# 
  1269  0D91                     	;# 
  1270  0D91                     	;# 
  1271  0D92                     	;# 
  1272  0D93                     	;# 
  1273  0D93                     	;# 
  1274  0D94                     	;# 
  1275  0D95                     	;# 
  1276  0D95                     	;# 
  1277  0D96                     	;# 
  1278  0D97                     	;# 
  1279  0D97                     	;# 
  1280  0D98                     	;# 
  1281  0D99                     	;# 
  1282  0D99                     	;# 
  1283  0D9A                     	;# 
  1284  0D9B                     	;# 
  1285  0D9C                     	;# 
  1286  0D9C                     	;# 
  1287  0D9D                     	;# 
  1288  0D9D                     	;# 
  1289  0D9E                     	;# 
  1290  0D9F                     	;# 
  1291  0DA0                     	;# 
  1292  0DA1                     	;# 
  1293  0DA1                     	;# 
  1294  0DA2                     	;# 
  1295  0DA3                     	;# 
  1296  0DA3                     	;# 
  1297  0DA4                     	;# 
  1298  0DA5                     	;# 
  1299  0DA5                     	;# 
  1300  0DA6                     	;# 
  1301  0DA7                     	;# 
  1302  0DA7                     	;# 
  1303  0DA8                     	;# 
  1304  0DA9                     	;# 
  1305  0DA9                     	;# 
  1306  0DAA                     	;# 
  1307  0DAB                     	;# 
  1308  0DAC                     	;# 
  1309  0DAC                     	;# 
  1310  0DAD                     	;# 
  1311  0DAD                     	;# 
  1312  0DAE                     	;# 
  1313  0DAF                     	;# 
  1314  0DB0                     	;# 
  1315  0DB1                     	;# 
  1316  0DB1                     	;# 
  1317  0DB2                     	;# 
  1318  0DB3                     	;# 
  1319  0DB3                     	;# 
  1320  0DB4                     	;# 
  1321  0DB5                     	;# 
  1322  0DB5                     	;# 
  1323  0DB6                     	;# 
  1324  0DB7                     	;# 
  1325  0DB7                     	;# 
  1326  0DB8                     	;# 
  1327  0DB9                     	;# 
  1328  0DB9                     	;# 
  1329  0DBA                     	;# 
  1330  0DBB                     	;# 
  1331  0DBC                     	;# 
  1332  0DBC                     	;# 
  1333  0DBD                     	;# 
  1334  0DBD                     	;# 
  1335  0DBE                     	;# 
  1336  0DBF                     	;# 
  1337  0DC0                     	;# 
  1338  0DC1                     	;# 
  1339  0DC1                     	;# 
  1340  0DC2                     	;# 
  1341  0DC3                     	;# 
  1342  0DC3                     	;# 
  1343  0DC4                     	;# 
  1344  0DC5                     	;# 
  1345  0DC5                     	;# 
  1346  0DC6                     	;# 
  1347  0DC7                     	;# 
  1348  0DC7                     	;# 
  1349  0DC8                     	;# 
  1350  0DC9                     	;# 
  1351  0DC9                     	;# 
  1352  0DCA                     	;# 
  1353  0DCB                     	;# 
  1354  0DCC                     	;# 
  1355  0DCC                     	;# 
  1356  0DCD                     	;# 
  1357  0DCD                     	;# 
  1358  0DCE                     	;# 
  1359  0DCF                     	;# 
  1360  0DD0                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E90                     	;# 
  1371  0E91                     	;# 
  1372  0E92                     	;# 
  1373  0E94                     	;# 
  1374  0E95                     	;# 
  1375  0EA0                     	;# 
  1376  0EA1                     	;# 
  1377  0EA2                     	;# 
  1378  0EA3                     	;# 
  1379  0EA4                     	;# 
  1380  0EA5                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE8                     	;# 
  1387  0FE9                     	;# 
  1388  0FEA                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEE                     	;# 
  1394  0FEF                     	;# 
  1395  0000                     	;# 
  1396  0001                     	;# 
  1397  0002                     	;# 
  1398  0003                     	;# 
  1399  0004                     	;# 
  1400  0005                     	;# 
  1401  0006                     	;# 
  1402  0007                     	;# 
  1403  0008                     	;# 
  1404  0009                     	;# 
  1405  000A                     	;# 
  1406  000B                     	;# 
  1407  000C                     	;# 
  1408  000E                     	;# 
  1409  0011                     	;# 
  1410  0012                     	;# 
  1411  0013                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008E                     	;# 
  1423  0091                     	;# 
  1424  0092                     	;# 
  1425  0093                     	;# 
  1426  0095                     	;# 
  1427  0096                     	;# 
  1428  0097                     	;# 
  1429  0098                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  009F                     	;# 
  1438  010C                     	;# 
  1439  010E                     	;# 
  1440  0111                     	;# 
  1441  0112                     	;# 
  1442  0113                     	;# 
  1443  0114                     	;# 
  1444  0115                     	;# 
  1445  0116                     	;# 
  1446  0117                     	;# 
  1447  0118                     	;# 
  1448  0119                     	;# 
  1449  018C                     	;# 
  1450  018E                     	;# 
  1451  0191                     	;# 
  1452  0191                     	;# 
  1453  0192                     	;# 
  1454  0193                     	;# 
  1455  0193                     	;# 
  1456  0194                     	;# 
  1457  0195                     	;# 
  1458  0196                     	;# 
  1459  0197                     	;# 
  1460  0199                     	;# 
  1461  019A                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019C                     	;# 
  1465  019D                     	;# 
  1466  019E                     	;# 
  1467  019F                     	;# 
  1468  020C                     	;# 
  1469  020E                     	;# 
  1470  028C                     	;# 
  1471  028E                     	;# 
  1472  030C                     	;# 
  1473  030E                     	;# 
  1474  038C                     	;# 
  1475  038E                     	;# 
  1476  0391                     	;# 
  1477  0392                     	;# 
  1478  0393                     	;# 
  1479  0397                     	;# 
  1480  0398                     	;# 
  1481  0399                     	;# 
  1482  0691                     	;# 
  1483  0692                     	;# 
  1484  0693                     	;# 
  1485  0694                     	;# 
  1486  0695                     	;# 
  1487  0D8E                     	;# 
  1488  0D8F                     	;# 
  1489  0D90                     	;# 
  1490  0D91                     	;# 
  1491  0D91                     	;# 
  1492  0D92                     	;# 
  1493  0D93                     	;# 
  1494  0D93                     	;# 
  1495  0D94                     	;# 
  1496  0D95                     	;# 
  1497  0D95                     	;# 
  1498  0D96                     	;# 
  1499  0D97                     	;# 
  1500  0D97                     	;# 
  1501  0D98                     	;# 
  1502  0D99                     	;# 
  1503  0D99                     	;# 
  1504  0D9A                     	;# 
  1505  0D9B                     	;# 
  1506  0D9C                     	;# 
  1507  0D9C                     	;# 
  1508  0D9D                     	;# 
  1509  0D9D                     	;# 
  1510  0D9E                     	;# 
  1511  0D9F                     	;# 
  1512  0DA0                     	;# 
  1513  0DA1                     	;# 
  1514  0DA1                     	;# 
  1515  0DA2                     	;# 
  1516  0DA3                     	;# 
  1517  0DA3                     	;# 
  1518  0DA4                     	;# 
  1519  0DA5                     	;# 
  1520  0DA5                     	;# 
  1521  0DA6                     	;# 
  1522  0DA7                     	;# 
  1523  0DA7                     	;# 
  1524  0DA8                     	;# 
  1525  0DA9                     	;# 
  1526  0DA9                     	;# 
  1527  0DAA                     	;# 
  1528  0DAB                     	;# 
  1529  0DAC                     	;# 
  1530  0DAC                     	;# 
  1531  0DAD                     	;# 
  1532  0DAD                     	;# 
  1533  0DAE                     	;# 
  1534  0DAF                     	;# 
  1535  0DB0                     	;# 
  1536  0DB1                     	;# 
  1537  0DB1                     	;# 
  1538  0DB2                     	;# 
  1539  0DB3                     	;# 
  1540  0DB3                     	;# 
  1541  0DB4                     	;# 
  1542  0DB5                     	;# 
  1543  0DB5                     	;# 
  1544  0DB6                     	;# 
  1545  0DB7                     	;# 
  1546  0DB7                     	;# 
  1547  0DB8                     	;# 
  1548  0DB9                     	;# 
  1549  0DB9                     	;# 
  1550  0DBA                     	;# 
  1551  0DBB                     	;# 
  1552  0DBC                     	;# 
  1553  0DBC                     	;# 
  1554  0DBD                     	;# 
  1555  0DBD                     	;# 
  1556  0DBE                     	;# 
  1557  0DBF                     	;# 
  1558  0DC0                     	;# 
  1559  0DC1                     	;# 
  1560  0DC1                     	;# 
  1561  0DC2                     	;# 
  1562  0DC3                     	;# 
  1563  0DC3                     	;# 
  1564  0DC4                     	;# 
  1565  0DC5                     	;# 
  1566  0DC5                     	;# 
  1567  0DC6                     	;# 
  1568  0DC7                     	;# 
  1569  0DC7                     	;# 
  1570  0DC8                     	;# 
  1571  0DC9                     	;# 
  1572  0DC9                     	;# 
  1573  0DCA                     	;# 
  1574  0DCB                     	;# 
  1575  0DCC                     	;# 
  1576  0DCC                     	;# 
  1577  0DCD                     	;# 
  1578  0DCD                     	;# 
  1579  0DCE                     	;# 
  1580  0DCF                     	;# 
  1581  0DD0                     	;# 
  1582  0E0F                     	;# 
  1583  0E10                     	;# 
  1584  0E11                     	;# 
  1585  0E12                     	;# 
  1586  0E13                     	;# 
  1587  0E14                     	;# 
  1588  0E15                     	;# 
  1589  0E16                     	;# 
  1590  0E17                     	;# 
  1591  0E90                     	;# 
  1592  0E91                     	;# 
  1593  0E92                     	;# 
  1594  0E94                     	;# 
  1595  0E95                     	;# 
  1596  0EA0                     	;# 
  1597  0EA1                     	;# 
  1598  0EA2                     	;# 
  1599  0EA3                     	;# 
  1600  0EA4                     	;# 
  1601  0EA5                     	;# 
  1602  0FE4                     	;# 
  1603  0FE5                     	;# 
  1604  0FE6                     	;# 
  1605  0FE7                     	;# 
  1606  0FE8                     	;# 
  1607  0FE8                     	;# 
  1608  0FE9                     	;# 
  1609  0FEA                     	;# 
  1610  0FEA                     	;# 
  1611  0FEB                     	;# 
  1612  0FED                     	;# 
  1613  0FEE                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000E                     	;# 
  1630  0011                     	;# 
  1631  0012                     	;# 
  1632  0013                     	;# 
  1633  0015                     	;# 
  1634  0016                     	;# 
  1635  0016                     	;# 
  1636  0017                     	;# 
  1637  0018                     	;# 
  1638  0019                     	;# 
  1639  001A                     	;# 
  1640  001B                     	;# 
  1641  001C                     	;# 
  1642  008C                     	;# 
  1643  008E                     	;# 
  1644  0091                     	;# 
  1645  0092                     	;# 
  1646  0093                     	;# 
  1647  0095                     	;# 
  1648  0096                     	;# 
  1649  0097                     	;# 
  1650  0098                     	;# 
  1651  0099                     	;# 
  1652  009A                     	;# 
  1653  009B                     	;# 
  1654  009B                     	;# 
  1655  009C                     	;# 
  1656  009D                     	;# 
  1657  009E                     	;# 
  1658  009F                     	;# 
  1659  010C                     	;# 
  1660  010E                     	;# 
  1661  0111                     	;# 
  1662  0112                     	;# 
  1663  0113                     	;# 
  1664  0114                     	;# 
  1665  0115                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  0118                     	;# 
  1669  0119                     	;# 
  1670  018C                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019D                     	;# 
  1687  019E                     	;# 
  1688  019F                     	;# 
  1689  020C                     	;# 
  1690  020E                     	;# 
  1691  028C                     	;# 
  1692  028E                     	;# 
  1693  030C                     	;# 
  1694  030E                     	;# 
  1695  038C                     	;# 
  1696  038E                     	;# 
  1697  0391                     	;# 
  1698  0392                     	;# 
  1699  0393                     	;# 
  1700  0397                     	;# 
  1701  0398                     	;# 
  1702  0399                     	;# 
  1703  0691                     	;# 
  1704  0692                     	;# 
  1705  0693                     	;# 
  1706  0694                     	;# 
  1707  0695                     	;# 
  1708  0D8E                     	;# 
  1709  0D8F                     	;# 
  1710  0D90                     	;# 
  1711  0D91                     	;# 
  1712  0D91                     	;# 
  1713  0D92                     	;# 
  1714  0D93                     	;# 
  1715  0D93                     	;# 
  1716  0D94                     	;# 
  1717  0D95                     	;# 
  1718  0D95                     	;# 
  1719  0D96                     	;# 
  1720  0D97                     	;# 
  1721  0D97                     	;# 
  1722  0D98                     	;# 
  1723  0D99                     	;# 
  1724  0D99                     	;# 
  1725  0D9A                     	;# 
  1726  0D9B                     	;# 
  1727  0D9C                     	;# 
  1728  0D9C                     	;# 
  1729  0D9D                     	;# 
  1730  0D9D                     	;# 
  1731  0D9E                     	;# 
  1732  0D9F                     	;# 
  1733  0DA0                     	;# 
  1734  0DA1                     	;# 
  1735  0DA1                     	;# 
  1736  0DA2                     	;# 
  1737  0DA3                     	;# 
  1738  0DA3                     	;# 
  1739  0DA4                     	;# 
  1740  0DA5                     	;# 
  1741  0DA5                     	;# 
  1742  0DA6                     	;# 
  1743  0DA7                     	;# 
  1744  0DA7                     	;# 
  1745  0DA8                     	;# 
  1746  0DA9                     	;# 
  1747  0DA9                     	;# 
  1748  0DAA                     	;# 
  1749  0DAB                     	;# 
  1750  0DAC                     	;# 
  1751  0DAC                     	;# 
  1752  0DAD                     	;# 
  1753  0DAD                     	;# 
  1754  0DAE                     	;# 
  1755  0DAF                     	;# 
  1756  0DB0                     	;# 
  1757  0DB1                     	;# 
  1758  0DB1                     	;# 
  1759  0DB2                     	;# 
  1760  0DB3                     	;# 
  1761  0DB3                     	;# 
  1762  0DB4                     	;# 
  1763  0DB5                     	;# 
  1764  0DB5                     	;# 
  1765  0DB6                     	;# 
  1766  0DB7                     	;# 
  1767  0DB7                     	;# 
  1768  0DB8                     	;# 
  1769  0DB9                     	;# 
  1770  0DB9                     	;# 
  1771  0DBA                     	;# 
  1772  0DBB                     	;# 
  1773  0DBC                     	;# 
  1774  0DBC                     	;# 
  1775  0DBD                     	;# 
  1776  0DBD                     	;# 
  1777  0DBE                     	;# 
  1778  0DBF                     	;# 
  1779  0DC0                     	;# 
  1780  0DC1                     	;# 
  1781  0DC1                     	;# 
  1782  0DC2                     	;# 
  1783  0DC3                     	;# 
  1784  0DC3                     	;# 
  1785  0DC4                     	;# 
  1786  0DC5                     	;# 
  1787  0DC5                     	;# 
  1788  0DC6                     	;# 
  1789  0DC7                     	;# 
  1790  0DC7                     	;# 
  1791  0DC8                     	;# 
  1792  0DC9                     	;# 
  1793  0DC9                     	;# 
  1794  0DCA                     	;# 
  1795  0DCB                     	;# 
  1796  0DCC                     	;# 
  1797  0DCC                     	;# 
  1798  0DCD                     	;# 
  1799  0DCD                     	;# 
  1800  0DCE                     	;# 
  1801  0DCF                     	;# 
  1802  0DD0                     	;# 
  1803  0E0F                     	;# 
  1804  0E10                     	;# 
  1805  0E11                     	;# 
  1806  0E12                     	;# 
  1807  0E13                     	;# 
  1808  0E14                     	;# 
  1809  0E15                     	;# 
  1810  0E16                     	;# 
  1811  0E17                     	;# 
  1812  0E90                     	;# 
  1813  0E91                     	;# 
  1814  0E92                     	;# 
  1815  0E94                     	;# 
  1816  0E95                     	;# 
  1817  0EA0                     	;# 
  1818  0EA1                     	;# 
  1819  0EA2                     	;# 
  1820  0EA3                     	;# 
  1821  0EA4                     	;# 
  1822  0EA5                     	;# 
  1823  0FE4                     	;# 
  1824  0FE5                     	;# 
  1825  0FE6                     	;# 
  1826  0FE7                     	;# 
  1827  0FE8                     	;# 
  1828  0FE8                     	;# 
  1829  0FE9                     	;# 
  1830  0FEA                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEE                     	;# 
  1836  0FEF                     	;_PD
  1837                           
  1838                           	psect	idataBANK1
  1839  0000                     __pidataBANK1:	
  1840                           
  1841                           	psect	idataBANK2
  1842  0000                     __pidataBANK2:	
  1843                           
  1844                           	psect	stringtext
  1845  0403                     __pstringtext:	
  1846  0403                     _PWM:	
  1847  0403  3400               	retlw	0
  1848  0404  3400               	retlw	0
  1849  0405  348C               	retlw	140
  1850  0406  3400               	retlw	0
  1851  0407  348E               	retlw	142
  1852  0408  3400               	retlw	0
  1853  0409  3491               	retlw	145
  1854  040A  3400               	retlw	0
  1855  040B  3494               	retlw	148
  1856  040C  3400               	retlw	0
  1857  040D  3496               	retlw	150
  1858  040E  3400               	retlw	0
  1859  040F  3499               	retlw	153
  1860  0410  3400               	retlw	0
  1861  0411  349C               	retlw	156
  1862  0412  3400               	retlw	0
  1863  0413  349F               	retlw	159
  1864  0414  3400               	retlw	0
  1865  0415  34A2               	retlw	162
  1866  0416  3400               	retlw	0
  1867  0417  34A5               	retlw	165
  1868  0418  3400               	retlw	0
  1869  0419  34A8               	retlw	168
  1870  041A  3400               	retlw	0
  1871  041B  34AC               	retlw	172
  1872  041C  3400               	retlw	0
  1873  041D  34AF               	retlw	175
  1874  041E  3400               	retlw	0
  1875  041F  34B2               	retlw	178
  1876  0420  3400               	retlw	0
  1877  0421  34B6               	retlw	182
  1878  0422  3400               	retlw	0
  1879  0423  34B9               	retlw	185
  1880  0424  3400               	retlw	0
  1881  0425  34BC               	retlw	188
  1882  0426  3400               	retlw	0
  1883  0427  34C0               	retlw	192
  1884  0428  3400               	retlw	0
  1885  0429  34C4               	retlw	196
  1886  042A  3400               	retlw	0
  1887  042B  34C7               	retlw	199
  1888  042C  3400               	retlw	0
  1889  042D  34CB               	retlw	203
  1890  042E  3400               	retlw	0
  1891  042F  34CF               	retlw	207
  1892  0430  3400               	retlw	0
  1893  0431  34D3               	retlw	211
  1894  0432  3400               	retlw	0
  1895  0433  34D7               	retlw	215
  1896  0434  3400               	retlw	0
  1897  0435  34DB               	retlw	219
  1898  0436  3400               	retlw	0
  1899  0437  34DF               	retlw	223
  1900  0438  3400               	retlw	0
  1901  0439  34E3               	retlw	227
  1902  043A  3400               	retlw	0
  1903  043B  34E8               	retlw	232
  1904  043C  3400               	retlw	0
  1905  043D  34EC               	retlw	236
  1906  043E  3400               	retlw	0
  1907  043F  34F1               	retlw	241
  1908  0440  3400               	retlw	0
  1909  0441  34F5               	retlw	245
  1910  0442  3400               	retlw	0
  1911  0443  34FA               	retlw	250
  1912  0444  3400               	retlw	0
  1913  0445  34FF               	retlw	255
  1914  0446  3400               	retlw	0
  1915  0447  3403               	retlw	3
  1916  0448  3401               	retlw	1
  1917  0449  3408               	retlw	8
  1918  044A  3401               	retlw	1
  1919  044B  340D               	retlw	13
  1920  044C  3401               	retlw	1
  1921  044D  3412               	retlw	18
  1922  044E  3401               	retlw	1
  1923  044F  3418               	retlw	24
  1924  0450  3401               	retlw	1
  1925  0451  341D               	retlw	29
  1926  0452  3401               	retlw	1
  1927  0453  3422               	retlw	34
  1928  0454  3401               	retlw	1
  1929  0455  3428               	retlw	40
  1930  0456  3401               	retlw	1
  1931  0457  342D               	retlw	45
  1932  0458  3401               	retlw	1
  1933  0459  3433               	retlw	51
  1934  045A  3401               	retlw	1
  1935  045B  3439               	retlw	57
  1936  045C  3401               	retlw	1
  1937  045D  343F               	retlw	63
  1938  045E  3401               	retlw	1
  1939  045F  3445               	retlw	69
  1940  0460  3401               	retlw	1
  1941  0461  344B               	retlw	75
  1942  0462  3401               	retlw	1
  1943  0463  3451               	retlw	81
  1944  0464  3401               	retlw	1
  1945  0465  3458               	retlw	88
  1946  0466  3401               	retlw	1
  1947  0467  345E               	retlw	94
  1948  0468  3401               	retlw	1
  1949  0469  3465               	retlw	101
  1950  046A  3401               	retlw	1
  1951  046B  346C               	retlw	108
  1952  046C  3401               	retlw	1
  1953  046D  3473               	retlw	115
  1954  046E  3401               	retlw	1
  1955  046F  347A               	retlw	122
  1956  0470  3401               	retlw	1
  1957  0471  3481               	retlw	129
  1958  0472  3401               	retlw	1
  1959  0473  3488               	retlw	136
  1960  0474  3401               	retlw	1
  1961  0475  3490               	retlw	144
  1962  0476  3401               	retlw	1
  1963  0477  3497               	retlw	151
  1964  0478  3401               	retlw	1
  1965  0479  349F               	retlw	159
  1966  047A  3401               	retlw	1
  1967  047B  34A7               	retlw	167
  1968  047C  3401               	retlw	1
  1969  047D  34AF               	retlw	175
  1970  047E  3401               	retlw	1
  1971  047F  34B7               	retlw	183
  1972  0480  3401               	retlw	1
  1973  0481  34BF               	retlw	191
  1974  0482  3401               	retlw	1
  1975  0483  34C8               	retlw	200
  1976  0484  3401               	retlw	1
  1977  0485  34D0               	retlw	208
  1978  0486  3401               	retlw	1
  1979  0487  34D9               	retlw	217
  1980  0488  3401               	retlw	1
  1981  0489  34E2               	retlw	226
  1982  048A  3401               	retlw	1
  1983  048B  34EB               	retlw	235
  1984  048C  3401               	retlw	1
  1985  048D  34F4               	retlw	244
  1986  048E  3401               	retlw	1
  1987  048F  34FE               	retlw	254
  1988  0490  3401               	retlw	1
  1989  0491  3408               	retlw	8
  1990  0492  3402               	retlw	2
  1991  0493  3411               	retlw	17
  1992  0494  3402               	retlw	2
  1993  0495  341C               	retlw	28
  1994  0496  3402               	retlw	2
  1995  0497  3426               	retlw	38
  1996  0498  3402               	retlw	2
  1997  0499  3430               	retlw	48
  1998  049A  3402               	retlw	2
  1999  049B  343B               	retlw	59
  2000  049C  3402               	retlw	2
  2001  049D  3446               	retlw	70
  2002  049E  3402               	retlw	2
  2003  049F  3451               	retlw	81
  2004  04A0  3402               	retlw	2
  2005  04A1  345C               	retlw	92
  2006  04A2  3402               	retlw	2
  2007  04A3  3467               	retlw	103
  2008  04A4  3402               	retlw	2
  2009  04A5  3473               	retlw	115
  2010  04A6  3402               	retlw	2
  2011  04A7  347F               	retlw	127
  2012  04A8  3402               	retlw	2
  2013  04A9  348B               	retlw	139
  2014  04AA  3402               	retlw	2
  2015  04AB  3497               	retlw	151
  2016  04AC  3402               	retlw	2
  2017  04AD  34A4               	retlw	164
  2018  04AE  3402               	retlw	2
  2019  04AF  34B1               	retlw	177
  2020  04B0  3402               	retlw	2
  2021  04B1  34BE               	retlw	190
  2022  04B2  3402               	retlw	2
  2023  04B3  34CB               	retlw	203
  2024  04B4  3402               	retlw	2
  2025  04B5  34D8               	retlw	216
  2026  04B6  3402               	retlw	2
  2027  04B7  34E6               	retlw	230
  2028  04B8  3402               	retlw	2
  2029  04B9  34F4               	retlw	244
  2030  04BA  3402               	retlw	2
  2031  04BB  3403               	retlw	3
  2032  04BC  3403               	retlw	3
  2033  04BD  3411               	retlw	17
  2034  04BE  3403               	retlw	3
  2035  04BF  3420               	retlw	32
  2036  04C0  3403               	retlw	3
  2037  04C1  342F               	retlw	47
  2038  04C2  3403               	retlw	3
  2039  04C3  343F               	retlw	63
  2040  04C4  3403               	retlw	3
  2041  04C5  344E               	retlw	78
  2042  04C6  3403               	retlw	3
  2043  04C7  345E               	retlw	94
  2044  04C8  3403               	retlw	3
  2045  04C9  346F               	retlw	111
  2046  04CA  3403               	retlw	3
  2047  04CB  347F               	retlw	127
  2048  04CC  3403               	retlw	3
  2049  04CD  3490               	retlw	144
  2050  04CE  3403               	retlw	3
  2051  04CF  34A2               	retlw	162
  2052  04D0  3403               	retlw	3
  2053  04D1  34B3               	retlw	179
  2054  04D2  3403               	retlw	3
  2055  04D3  34C5               	retlw	197
  2056  04D4  3403               	retlw	3
  2057  04D5  34D7               	retlw	215
  2058  04D6  3403               	retlw	3
  2059  04D7  34EA               	retlw	234
  2060  04D8  3403               	retlw	3
  2061  04D9  34FD               	retlw	253
  2062  04DA  3403               	retlw	3
  2063  04DB  3410               	retlw	16
  2064  04DC  3404               	retlw	4
  2065  04DD  3424               	retlw	36
  2066  04DE  3404               	retlw	4
  2067  04DF  3438               	retlw	56
  2068  04E0  3404               	retlw	4
  2069  04E1  344D               	retlw	77
  2070  04E2  3404               	retlw	4
  2071  04E3  3461               	retlw	97
  2072  04E4  3404               	retlw	4
  2073  04E5  3477               	retlw	119
  2074  04E6  3404               	retlw	4
  2075  04E7  348C               	retlw	140
  2076  04E8  3404               	retlw	4
  2077  04E9  34A2               	retlw	162
  2078  04EA  3404               	retlw	4
  2079  04EB  34B9               	retlw	185
  2080  04EC  3404               	retlw	4
  2081  04ED  34D0               	retlw	208
  2082  04EE  3404               	retlw	4
  2083  04EF  34E7               	retlw	231
  2084  04F0  3404               	retlw	4
  2085  04F1  34FF               	retlw	255
  2086  04F2  3404               	retlw	4
  2087  04F3  3417               	retlw	23
  2088  04F4  3405               	retlw	5
  2089  04F5  3430               	retlw	48
  2090  04F6  3405               	retlw	5
  2091  04F7  3449               	retlw	73
  2092  04F8  3405               	retlw	5
  2093  04F9  3462               	retlw	98
  2094  04FA  3405               	retlw	5
  2095  04FB  347D               	retlw	125
  2096  04FC  3405               	retlw	5
  2097  04FD  3497               	retlw	151
  2098  04FE  3405               	retlw	5
  2099  04FF  34B2               	retlw	178
  2100  0500  3405               	retlw	5
  2101  0501  34CE               	retlw	206
  2102  0502  3405               	retlw	5
  2103  0503  34EA               	retlw	234
  2104  0504  3405               	retlw	5
  2105  0505  3407               	retlw	7
  2106  0506  3406               	retlw	6
  2107  0507  3424               	retlw	36
  2108  0508  3406               	retlw	6
  2109  0509  3442               	retlw	66
  2110  050A  3406               	retlw	6
  2111  050B  3460               	retlw	96
  2112  050C  3406               	retlw	6
  2113  050D  347F               	retlw	127
  2114  050E  3406               	retlw	6
  2115  050F  349E               	retlw	158
  2116  0510  3406               	retlw	6
  2117  0511  34BE               	retlw	190
  2118  0512  3406               	retlw	6
  2119  0513  34DF               	retlw	223
  2120  0514  3406               	retlw	6
  2121  0515  3400               	retlw	0
  2122  0516  3407               	retlw	7
  2123  0517  3422               	retlw	34
  2124  0518  3407               	retlw	7
  2125  0519  3445               	retlw	69
  2126  051A  3407               	retlw	7
  2127  051B  3468               	retlw	104
  2128  051C  3407               	retlw	7
  2129  051D  348C               	retlw	140
  2130  051E  3407               	retlw	7
  2131  051F  34B1               	retlw	177
  2132  0520  3407               	retlw	7
  2133  0521  34D6               	retlw	214
  2134  0522  3407               	retlw	7
  2135  0523  34FC               	retlw	252
  2136  0524  3407               	retlw	7
  2137  0525  3422               	retlw	34
  2138  0526  3408               	retlw	8
  2139  0527  344A               	retlw	74
  2140  0528  3408               	retlw	8
  2141  0529  3472               	retlw	114
  2142  052A  3408               	retlw	8
  2143  052B  349B               	retlw	155
  2144  052C  3408               	retlw	8
  2145  052D  34C5               	retlw	197
  2146  052E  3408               	retlw	8
  2147  052F  34EF               	retlw	239
  2148  0530  3408               	retlw	8
  2149  0531  341B               	retlw	27
  2150  0532  3409               	retlw	9
  2151  0533  3447               	retlw	71
  2152  0534  3409               	retlw	9
  2153  0535  3474               	retlw	116
  2154  0536  3409               	retlw	9
  2155  0537  34A1               	retlw	161
  2156  0538  3409               	retlw	9
  2157  0539  34D0               	retlw	208
  2158  053A  3409               	retlw	9
  2159  053B  3400               	retlw	0
  2160  053C  340A               	retlw	10
  2161  053D  3430               	retlw	48
  2162  053E  340A               	retlw	10
  2163  053F  3461               	retlw	97
  2164  0540  340A               	retlw	10
  2165  0541  3494               	retlw	148
  2166  0542  340A               	retlw	10
  2167  0543  34C7               	retlw	199
  2168  0544  340A               	retlw	10
  2169  0545  34FB               	retlw	251
  2170  0546  340A               	retlw	10
  2171  0547  3430               	retlw	48
  2172  0548  340B               	retlw	11
  2173  0549  3467               	retlw	103
  2174  054A  340B               	retlw	11
  2175  054B  349E               	retlw	158
  2176  054C  340B               	retlw	11
  2177  054D  34D6               	retlw	214
  2178  054E  340B               	retlw	11
  2179  054F  3410               	retlw	16
  2180  0550  340C               	retlw	12
  2181  0551  344A               	retlw	74
  2182  0552  340C               	retlw	12
  2183  0553  3486               	retlw	134
  2184  0554  340C               	retlw	12
  2185  0555  34C2               	retlw	194
  2186  0556  340C               	retlw	12
  2187  0557  3400               	retlw	0
  2188  0558  340D               	retlw	13
  2189  0559  343F               	retlw	63
  2190  055A  340D               	retlw	13
  2191  055B  347F               	retlw	127
  2192  055C  340D               	retlw	13
  2193  055D  34C1               	retlw	193
  2194  055E  340D               	retlw	13
  2195  055F  3403               	retlw	3
  2196  0560  340E               	retlw	14
  2197  0561  3447               	retlw	71
  2198  0562  340E               	retlw	14
  2199  0563  348C               	retlw	140
  2200  0564  340E               	retlw	14
  2201  0565  34D3               	retlw	211
  2202  0566  340E               	retlw	14
  2203  0567  341B               	retlw	27
  2204  0568  340F               	retlw	15
  2205  0569  3464               	retlw	100
  2206  056A  340F               	retlw	15
  2207  056B  34AE               	retlw	174
  2208  056C  340F               	retlw	15
  2209  056D  34FA               	retlw	250
  2210  056E  340F               	retlw	15
  2211  056F  3448               	retlw	72
  2212  0570  3410               	retlw	16
  2213  0571  3497               	retlw	151
  2214  0572  3410               	retlw	16
  2215  0573  34E7               	retlw	231
  2216  0574  3410               	retlw	16
  2217  0575  3439               	retlw	57
  2218  0576  3411               	retlw	17
  2219  0577  348D               	retlw	141
  2220  0578  3411               	retlw	17
  2221  0579  34E2               	retlw	226
  2222  057A  3411               	retlw	17
  2223  057B  3438               	retlw	56
  2224  057C  3412               	retlw	18
  2225  057D  3491               	retlw	145
  2226  057E  3412               	retlw	18
  2227  057F  34EA               	retlw	234
  2228  0580  3412               	retlw	18
  2229  0581  3446               	retlw	70
  2230  0582  3413               	retlw	19
  2231  0583  34A4               	retlw	164
  2232  0584  3413               	retlw	19
  2233  0585  3403               	retlw	3
  2234  0586  3414               	retlw	20
  2235  0587  3464               	retlw	100
  2236  0588  3414               	retlw	20
  2237  0589  34C6               	retlw	198
  2238  058A  3414               	retlw	20
  2239  058B  342B               	retlw	43
  2240  058C  3415               	retlw	21
  2241  058D  3492               	retlw	146
  2242  058E  3415               	retlw	21
  2243  058F  34FA               	retlw	250
  2244  0590  3415               	retlw	21
  2245  0591  3465               	retlw	101
  2246  0592  3416               	retlw	22
  2247  0593  34D1               	retlw	209
  2248  0594  3416               	retlw	22
  2249  0595  3440               	retlw	64
  2250  0596  3417               	retlw	23
  2251  0597  34B0               	retlw	176
  2252  0598  3417               	retlw	23
  2253  0599  3423               	retlw	35
  2254  059A  3418               	retlw	24
  2255  059B  3498               	retlw	152
  2256  059C  3418               	retlw	24
  2257  059D  340F               	retlw	15
  2258  059E  3419               	retlw	25
  2259  059F  3489               	retlw	137
  2260  05A0  3419               	retlw	25
  2261  05A1  3405               	retlw	5
  2262  05A2  341A               	retlw	26
  2263  05A3  3483               	retlw	131
  2264  05A4  341A               	retlw	26
  2265  05A5  3403               	retlw	3
  2266  05A6  341B               	retlw	27
  2267  05A7  3486               	retlw	134
  2268  05A8  341B               	retlw	27
  2269  05A9  340B               	retlw	11
  2270  05AA  341C               	retlw	28
  2271  05AB  3493               	retlw	147
  2272  05AC  341C               	retlw	28
  2273  05AD  341E               	retlw	30
  2274  05AE  341D               	retlw	29
  2275  05AF  34AB               	retlw	171
  2276  05B0  341D               	retlw	29
  2277  05B1  343A               	retlw	58
  2278  05B2  341E               	retlw	30
  2279  05B3  34CD               	retlw	205
  2280  05B4  341E               	retlw	30
  2281  05B5  3462               	retlw	98
  2282  05B6  341F               	retlw	31
  2283  05B7  34FA               	retlw	250
  2284  05B8  341F               	retlw	31
  2285  05B9  3495               	retlw	149
  2286  05BA  3420               	retlw	32
  2287  05BB  3433               	retlw	51
  2288  05BC  3421               	retlw	33
  2289  05BD  34D4               	retlw	212
  2290  05BE  3421               	retlw	33
  2291  05BF  3478               	retlw	120
  2292  05C0  3422               	retlw	34
  2293  05C1  341F               	retlw	31
  2294  05C2  3423               	retlw	35
  2295  05C3  34C9               	retlw	201
  2296  05C4  3423               	retlw	35
  2297  05C5  3476               	retlw	118
  2298  05C6  3424               	retlw	36
  2299  05C7  3427               	retlw	39
  2300  05C8  3425               	retlw	37
  2301  05C9  34DB               	retlw	219
  2302  05CA  3425               	retlw	37
  2303  05CB  3493               	retlw	147
  2304  05CC  3426               	retlw	38
  2305  05CD  344D               	retlw	77
  2306  05CE  3427               	retlw	39
  2307  05CF  340C               	retlw	12
  2308  05D0  3428               	retlw	40
  2309  05D1  34CE               	retlw	206
  2310  05D2  3428               	retlw	40
  2311  05D3  3494               	retlw	148
  2312  05D4  3429               	retlw	41
  2313  05D5  345D               	retlw	93
  2314  05D6  342A               	retlw	42
  2315  05D7  342A               	retlw	42
  2316  05D8  342B               	retlw	43
  2317  05D9  34FB               	retlw	251
  2318  05DA  342B               	retlw	43
  2319  05DB  34D1               	retlw	209
  2320  05DC  342C               	retlw	44
  2321  05DD  34AA               	retlw	170
  2322  05DE  342D               	retlw	45
  2323  05DF  3487               	retlw	135
  2324  05E0  342E               	retlw	46
  2325  05E1  3468               	retlw	104
  2326  05E2  342F               	retlw	47
  2327  05E3  344E               	retlw	78
  2328  05E4  3430               	retlw	48
  2329  05E5  3438               	retlw	56
  2330  05E6  3431               	retlw	49
  2331  05E7  3427               	retlw	39
  2332  05E8  3432               	retlw	50
  2333  05E9  341A               	retlw	26
  2334  05EA  3433               	retlw	51
  2335  05EB  3411               	retlw	17
  2336  05EC  3434               	retlw	52
  2337  05ED  340E               	retlw	14
  2338  05EE  3435               	retlw	53
  2339  05EF  340F               	retlw	15
  2340  05F0  3436               	retlw	54
  2341  05F1  3415               	retlw	21
  2342  05F2  3437               	retlw	55
  2343  05F3  341F               	retlw	31
  2344  05F4  3438               	retlw	56
  2345  05F5  342F               	retlw	47
  2346  05F6  3439               	retlw	57
  2347  05F7  3444               	retlw	68
  2348  05F8  343A               	retlw	58
  2349  05F9  345F               	retlw	95
  2350  05FA  343B               	retlw	59
  2351  05FB  347E               	retlw	126
  2352  05FC  343C               	retlw	60
  2353  05FD  34A4               	retlw	164
  2354  05FE  343D               	retlw	61
  2355  05FF  34CE               	retlw	206
  2356  0600  343E               	retlw	62
  2357  0601  34FF               	retlw	255
  2358  0602  343F               	retlw	63
  2359  0603                     __end_of_PWM:	
  2360  0603                     _UID:	
  2361  0603  344D               	retlw	77
  2362  0604  3452               	retlw	82
  2363  0605  3417               	retlw	23
  2364  0606  34C3               	retlw	195
  2365  0607  3410               	retlw	16
  2366  0608  3492               	retlw	146
  2367  0609                     __end_of_UID:	
  2368                           
  2369                           	psect	nvBANK1
  2370  00EC                     __pnvBANK1:	
  2371  00EC                     _DMX_Address:	
  2372  00EC                     	ds	2
  2373  0016                     _TMR1	set	22
  2374  0018                     _T1CON	set	24
  2375  000B                     _INTCON	set	11
  2376  001C                     _T2CON	set	28
  2377  001B                     _PR2	set	27
  2378  0065                     _RA5	set	101
  2379  008C                     _TXIF	set	140
  2380  0088                     _TMR1IF	set	136
  2381  008E                     _ADIF	set	142
  2382  005E                     _PEIE	set	94
  2383  008D                     _RCIF	set	141
  2384  009C                     _ADRESH	set	156
  2385  009E                     _ADCON1	set	158
  2386  009D                     _ADCON0	set	157
  2387  0098                     _OSCTUNE	set	152
  2388  0099                     _OSCCON	set	153
  2389  048E                     _ADIE	set	1166
  2390  048C                     _TXIE	set	1164
  2391  0474                     _TRISC4	set	1140
  2392  0488                     _TMR1IE	set	1160
  2393  04E9                     _GO_nDONE	set	1257
  2394  0464                     _TRISA4	set	1124
  2395  048D                     _RCIE	set	1165
  2396  0475                     _TRISC5	set	1141
  2397  0473                     _TRISC3	set	1139
  2398  0472                     _TRISC2	set	1138
  2399  0471                     _TRISC1	set	1137
  2400  0470                     _TRISC0	set	1136
  2401  0462                     _TRISA2	set	1122
  2402  0873                     _LATC3	set	2163
  2403  0874                     _LATC4	set	2164
  2404  019A                     _TXREG	set	410
  2405  0199                     _RCREG	set	409
  2406  019B                     _SPBRGL	set	411
  2407  019C                     _SPBRGH	set	412
  2408  019F                     _BAUDCON	set	415
  2409  019D                     _RCSTA	set	413
  2410  0CF0                     _TX9D	set	3312
  2411  0CF6                     _TX9	set	3318
  2412  0CEF                     _SPEN	set	3311
  2413  0CF5                     _TXEN	set	3317
  2414  0C64                     _ANSA4	set	3172
  2415  0CEA                     _FERR	set	3306
  2416  0CF2                     _BRGH	set	3314
  2417  0CF4                     _SYNC	set	3316
  2418  0C73                     _ANSC3	set	3187
  2419  0C72                     _ANSC2	set	3186
  2420  0C71                     _ANSC1	set	3185
  2421  0C70                     _ANSC0	set	3184
  2422  0C62                     _ANSA2	set	3170
  2423  0DC3                     _PWM4DC	set	3523
  2424  0DB3                     _PWM3DC	set	3507
  2425  0DA3                     _PWM2DC	set	3491
  2426  0D93                     _PWM1DC	set	3475
  2427  0DCE                     _PWM4CLKCON	set	3534
  2428  0DBE                     _PWM3CLKCON	set	3518
  2429  0DAE                     _PWM2CLKCON	set	3502
  2430  0D9E                     _PWM1CLKCON	set	3486
  2431  0DC5                     _PWM4PRL	set	3525
  2432  0DB5                     _PWM3PRL	set	3509
  2433  0DA5                     _PWM2PRL	set	3493
  2434  0D95                     _PWM1PRL	set	3477
  2435  0DC6                     _PWM4PRH	set	3526
  2436  0DB6                     _PWM3PRH	set	3510
  2437  0DA6                     _PWM2PRH	set	3494
  2438  0D96                     _PWM1PRH	set	3478
  2439  0DC1                     _PWM4PHL	set	3521
  2440  0DB1                     _PWM3PHL	set	3505
  2441  0DA1                     _PWM2PHL	set	3489
  2442  0D91                     _PWM1PHL	set	3473
  2443  0DC2                     _PWM4PHH	set	3522
  2444  0DB2                     _PWM3PHH	set	3506
  2445  0DA2                     _PWM2PHH	set	3490
  2446  0D92                     _PWM1PHH	set	3474
  2447  0DCB                     _PWM4CON	set	3531
  2448  0DBB                     _PWM3CON	set	3515
  2449  0DAB                     _PWM2CON	set	3499
  2450  0D9B                     _PWM1CON	set	3483
  2451  0DCF                     _PWM4LDCON	set	3535
  2452  0DBF                     _PWM3LDCON	set	3519
  2453  0DAF                     _PWM2LDCON	set	3503
  2454  0D9F                     _PWM1LDCON	set	3487
  2455  0DC3                     _PWM4DCL	set	3523
  2456  0DB3                     _PWM3DCL	set	3507
  2457  0DA3                     _PWM2DCL	set	3491
  2458  0D93                     _PWM1DCL	set	3475
  2459  0DC4                     _PWM4DCH	set	3524
  2460  0DB4                     _PWM3DCH	set	3508
  2461  0DA4                     _PWM2DCH	set	3492
  2462  0D94                     _PWM1DCH	set	3476
  2463  0E15                     _RXPPS	set	3605
  2464  0EA4                     _RC4PPS	set	3748
  2465  0EA2                     _RC2PPS	set	3746
  2466  0EA1                     _RC1PPS	set	3745
  2467  0EA0                     _RC0PPS	set	3744
  2468  0E92                     _RA2PPS	set	3730
  2469                           
  2470                           ; #config settings
  2471  0000                     
  2472                           	psect	cinit
  2473  0015                     start_initialization:	
  2474  0015                     __initialization:		;BIGRAM
  2475                           
  2476                           ; Initialize objects allocated to BANK1
  2477  0015  0021               	movlb	1	; select bank1
  2478                           
  2479                           ;initializer for _DMXPeriod
  2480  0016  3064               	movlw	100
  2481  0017  00EE               	movwf	__pdataBANK1& (0+127)
  2482                           
  2483                           ; Initialize objects allocated to BANK2
  2484  0018  0022               	movlb	2	; select bank2
  2485                           
  2486                           ;initializer for _DMX_Repeat
  2487  0019  3001               	movlw	1
  2488  001A  00DE               	movwf	__pdataBANK2& (0+127)
  2489  001B  3002               	movlw	2
  2490  001C  01DF               	clrf	(__pdataBANK2+1)& (0+127)
  2491  001D  01E0               	clrf	(__pdataBANK2+2)& (0+127)
  2492  001E  01E1               	clrf	(__pdataBANK2+3)& (0+127)
  2493  001F  01E2               	clrf	(__pdataBANK2+4)& (0+127)
  2494  0020  01E3               	clrf	(__pdataBANK2+5)& (0+127)
  2495  0021  01E4               	clrf	(__pdataBANK2+6)& (0+127)
  2496  0022  01E5               	clrf	(__pdataBANK2+7)& (0+127)
  2497                           
  2498                           ;initializer for _DMX_sumRepeat
  2499  0023  00E6               	movwf	(__pdataBANK2+8)& (0+127)
  2500  0024  308B               	movlw	139
  2501  0025  01E7               	clrf	(__pdataBANK2+9)& (0+127)
  2502  0026  01E8               	clrf	(__pdataBANK2+10)& (0+127)
  2503  0027  01E9               	clrf	(__pdataBANK2+11)& (0+127)
  2504                           
  2505                           ; Clear objects allocated to BIGRAM
  2506  0028  0084               	movwf	4
  2507  0029  3021               	movlw	33
  2508  002A  0085               	movwf	5
  2509  002B  3065               	movlw	101
  2510  002C  00FE               	movwf	126
  2511  002D  01FF               	clrf	127
  2512  002E  3187  27AA  3180   	fcall	clear_ram0
  2513  0031  30A0               	movlw	low __pbssBANK1
  2514                           
  2515                           ; Clear objects allocated to COMMON
  2516  0032  01F6               	clrf	__pbssCOMMON& (0+127)
  2517  0033  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2518  0034  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2519  0035  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2520                           
  2521                           ; Clear objects allocated to BANK1
  2522  0036  0084               	movwf	4
  2523  0037  3000               	movlw	high __pbssBANK1
  2524  0038  0085               	movwf	5
  2525  0039  304C               	movlw	76
  2526  003A  00FE               	movwf	126
  2527  003B  01FF               	clrf	127
  2528  003C  3187  27AA  3180   	fcall	clear_ram0
  2529                           
  2530                           ; Clear objects allocated to BANK2
  2531  003F  3020               	movlw	low __pbssBANK2
  2532  0040  0084               	movwf	4
  2533  0041  3001               	movlw	high __pbssBANK2
  2534  0042  0085               	movwf	5
  2535  0043  303E               	movlw	62
  2536  0044  00FE               	movwf	126
  2537  0045  01FF               	clrf	127
  2538  0046  3187  27AA  3180   	fcall	clear_ram0
  2539                           
  2540                           ; Clear objects allocated to BANK3
  2541  0049  30A0               	movlw	low __pbssBANK3
  2542  004A  0084               	movwf	4
  2543  004B  3001               	movlw	high __pbssBANK3
  2544  004C  0085               	movwf	5
  2545  004D  3038               	movlw	56
  2546  004E  00FE               	movwf	126
  2547  004F  01FF               	clrf	127
  2548  0050  3187  27AA  3180   	fcall	clear_ram0
  2549  0053                     end_of_initialization:	
  2550                           ;End of C runtime variable initialization code
  2551                           
  2552  0053                     __end_of__initialization:	
  2553  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2554  0054  0020               	movlb	0
  2555  0055  2856               	ljmp	_main	;jump to C main() function
  2556  0056                     __pmaintext:	
  2557 ;;
  2558 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2559 ;;
  2560 ;; *************** function _main *****************
  2561 ;; Defined at:
  2562 ;;		line 24 in file "main.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : B1F/0
  2573 ;;		On exit  : 1C/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2576 ;;      Params:         0       0       0       0       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0       0       0       0
  2579 ;;      Totals:         0       0       0       0       0       0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels required when called:    6
  2582 ;; This function calls:
  2583 ;;		_ADC_init
  2584 ;;		_ADC_loop
  2585 ;;		_DMX_init
  2586 ;;		_DMX_loop
  2587 ;;		_RDM_init
  2588 ;;		_RDM_rx_loop
  2589 ;;		_timer1_init
  2590 ;; This function is called by:
  2591 ;;		Startup code after reset
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function _main
  2597  0056                     _main:	
  2598                           
  2599                           ;main.c: 25: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  2600                           
  2601                           ;incstack = 0
  2602                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2603  0056  3080               	movlw	128
  2604  0057  003B               	movlb	27	; select bank27
  2605  0058  00CB               	movwf	75	;volatile
  2606  0059  00BB               	movwf	59	;volatile
  2607  005A  00AB               	movwf	43	;volatile
  2608  005B  009B               	movwf	27	;volatile
  2609                           
  2610                           ;main.c: 26: PR2 = 0xFF;
  2611  005C  30FF               	movlw	255
  2612  005D  0020               	movlb	0	; select bank0
  2613  005E  009B               	movwf	27	;volatile
  2614                           
  2615                           ;main.c: 27: T2CON = 0b00000101;
  2616  005F  3005               	movlw	5
  2617  0060  009C               	movwf	28	;volatile
  2618                           
  2619                           ;main.c: 29: OSCCON = 0b11110000;
  2620  0061  30F0               	movlw	240
  2621  0062  0021               	movlb	1	; select bank1
  2622  0063  0099               	movwf	25	;volatile
  2623                           
  2624                           ;main.c: 30: OSCTUNE = 0b000000;
  2625  0064  0198               	clrf	24	;volatile
  2626                           
  2627                           ;main.c: 32: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2628  0065  110E               	bcf	14,2	;volatile
  2629  0066  108E               	bcf	14,1	;volatile
  2630  0067  100E               	bcf	14,0	;volatile
  2631  0068  110C               	bcf	12,2	;volatile
  2632                           
  2633                           ;main.c: 33: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2634  0069  0023               	movlb	3	; select bank3
  2635  006A  110E               	bcf	14,2	;volatile
  2636  006B  108E               	bcf	14,1	;volatile
  2637  006C  100E               	bcf	14,0	;volatile
  2638  006D  110C               	bcf	12,2	;volatile
  2639                           
  2640                           ;main.c: 35: RA2PPS = 0b0011;
  2641  006E  3003               	movlw	3
  2642  006F  003D               	movlb	29	; select bank29
  2643  0070  0092               	movwf	18	;volatile
  2644                           
  2645                           ;main.c: 36: RC0PPS = 0b0100;
  2646  0071  3004               	movlw	4
  2647  0072  00A0               	movwf	32	;volatile
  2648                           
  2649                           ;main.c: 37: RC1PPS = 0b0101;
  2650  0073  3005               	movlw	5
  2651  0074  00A1               	movwf	33	;volatile
  2652                           
  2653                           ;main.c: 38: RC2PPS = 0b0110;
  2654  0075  3006               	movlw	6
  2655  0076  00A2               	movwf	34	;volatile
  2656                           
  2657                           ;main.c: 40: PWM1DCH = 0x00;
  2658  0077  003B               	movlb	27	; select bank27
  2659  0078  0194               	clrf	20	;volatile
  2660                           
  2661                           ;main.c: 41: PWM2DCH = 0x00;
  2662  0079  01A4               	clrf	36	;volatile
  2663                           
  2664                           ;main.c: 42: PWM3DCH = 0x00;
  2665  007A  01B4               	clrf	52	;volatile
  2666                           
  2667                           ;main.c: 43: PWM4DCH = 0x00;
  2668  007B  01C4               	clrf	68	;volatile
  2669                           
  2670                           ;main.c: 45: PWM1DCL = 0x00;
  2671  007C  0193               	clrf	19	;volatile
  2672                           
  2673                           ;main.c: 46: PWM2DCL = 0x00;
  2674  007D  01A3               	clrf	35	;volatile
  2675                           
  2676                           ;main.c: 47: PWM3DCL = 0x00;
  2677  007E  01B3               	clrf	51	;volatile
  2678                           
  2679                           ;main.c: 48: PWM4DCL = 0x00;
  2680  007F  01C3               	clrf	67	;volatile
  2681                           
  2682                           ;main.c: 50: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2683  0080  01C2               	clrf	66	;volatile
  2684  0081  01B2               	clrf	50	;volatile
  2685  0082  01A2               	clrf	34	;volatile
  2686  0083  0192               	clrf	18	;volatile
  2687                           
  2688                           ;main.c: 51: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2689  0084  01C1               	clrf	65	;volatile
  2690  0085  01B1               	clrf	49	;volatile
  2691  0086  01A1               	clrf	33	;volatile
  2692  0087  0191               	clrf	17	;volatile
  2693                           
  2694                           ;main.c: 52: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0x3F;
  2695  0088  303F               	movlw	63
  2696  0089  00C6               	movwf	70	;volatile
  2697  008A  00B6               	movwf	54	;volatile
  2698  008B  00A6               	movwf	38	;volatile
  2699  008C  0096               	movwf	22	;volatile
  2700                           
  2701                           ;main.c: 53: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2702  008D  30FF               	movlw	255
  2703  008E  00C5               	movwf	69	;volatile
  2704  008F  00B5               	movwf	53	;volatile
  2705  0090  00A5               	movwf	37	;volatile
  2706  0091  0095               	movwf	21	;volatile
  2707                           
  2708                           ;main.c: 54: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2709  0092  01CE               	clrf	78	;volatile
  2710  0093  01BE               	clrf	62	;volatile
  2711  0094  01AE               	clrf	46	;volatile
  2712  0095  019E               	clrf	30	;volatile
  2713                           
  2714                           ;main.c: 58: TRISC3 = 0;
  2715  0096  0021               	movlb	1	; select bank1
  2716  0097  118E               	bcf	14,3	;volatile
  2717                           
  2718                           ;main.c: 59: ANSC3 = 0;
  2719  0098  0023               	movlb	3	; select bank3
  2720  0099  118E               	bcf	14,3	;volatile
  2721                           
  2722                           ;main.c: 60: INTCON = 0b11000000;
  2723  009A  30C0               	movlw	192
  2724  009B  008B               	movwf	11	;volatile
  2725                           
  2726                           ;main.c: 62: DMX_init();
  2727  009C  20DE  3180         	fcall	_DMX_init
  2728                           
  2729                           ;main.c: 64: ADC_init();
  2730  009E  20AB  3180         	fcall	_ADC_init
  2731                           
  2732                           ;main.c: 65: timer1_init();
  2733  00A0  22A9  3180         	fcall	_timer1_init
  2734                           
  2735                           ;main.c: 66: RDM_init();
  2736  00A2  2154               	fcall	_RDM_init
  2737  00A3                     l4835:	
  2738                           
  2739                           ;main.c: 73: DMX_loop();
  2740  00A3  3189  2166  3180   	fcall	_DMX_loop
  2741                           
  2742                           ;main.c: 74: ADC_loop();
  2743  00A6  20B7  3180         	fcall	_ADC_loop
  2744                           
  2745                           ;main.c: 76: RDM_rx_loop();
  2746  00A8  2205  3180         	fcall	_RDM_rx_loop
  2747  00AA  28A3               	goto	l4835
  2748  00AB                     __end_of_main:	
  2749  00AB                     __ptext24:	
  2750 ;; *************** function _ADC_init *****************
  2751 ;; Defined at:
  2752 ;;		line 14 in file "ADC.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  2  106[None  ] int 
  2759 ;; Registers used:
  2760 ;;		wreg
  2761 ;; Tracked objects:
  2762 ;;		On entry : B1C/3
  2763 ;;		On exit  : B1F/0
  2764 ;;		Unchanged: B00/0
  2765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2766 ;;      Params:         0       0       0       0       0       0       0       0
  2767 ;;      Locals:         0       0       0       0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0
  2769 ;;      Totals:         0       0       0       0       0       0       0       0
  2770 ;;Total ram usage:        0 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    2
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_main
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           
  2781                           ;psect for function _ADC_init
  2782  00AB                     _ADC_init:	
  2783                           
  2784                           ;ADC.c: 19: TRISA4 = 1;
  2785                           
  2786                           ;incstack = 0
  2787                           ; Regs used in _ADC_init: [wreg]
  2788  00AB  0021               	movlb	1	; select bank1
  2789  00AC  160C               	bsf	12,4	;volatile
  2790                           
  2791                           ;ADC.c: 20: ANSA4 = 1;
  2792  00AD  0023               	movlb	3	; select bank3
  2793  00AE  160C               	bsf	12,4	;volatile
  2794                           
  2795                           ;ADC.c: 21: ADCON0 = 0b00001101;
  2796  00AF  300D               	movlw	13
  2797  00B0  0021               	movlb	1	; select bank1
  2798  00B1  009D               	movwf	29	;volatile
  2799                           
  2800                           ;ADC.c: 22: ADCON1 = 0b01110000;
  2801  00B2  3070               	movlw	112
  2802  00B3  009E               	movwf	30	;volatile
  2803                           
  2804                           ;ADC.c: 25: ADIF = 0;
  2805  00B4  0020               	movlb	0	; select bank0
  2806  00B5  1311               	bcf	17,6	;volatile
  2807  00B6  0008               	return
  2808  00B7                     __end_of_ADC_init:	
  2809  00B7                     __ptext23:	
  2810 ;; *************** function _ADC_loop *****************
  2811 ;; Defined at:
  2812 ;;		line 32 in file "ADC.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2  114[None  ] int 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2821 ;; Tracked objects:
  2822 ;;		On entry : 1E/0
  2823 ;;		On exit  : 1F/1
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2826 ;;      Params:         0       0       0       0       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0
  2828 ;;      Temps:          2       0       0       0       0       0       0       0
  2829 ;;      Totals:         2       0       0       0       0       0       0       0
  2830 ;;Total ram usage:        2 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    2
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _ADC_loop
  2842  00B7                     _ADC_loop:	
  2843                           
  2844                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2845                           
  2846                           ;incstack = 0
  2847                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2848  00B7  0021               	movlb	1	; select bank1
  2849  00B8  1C4A               	btfss	_ADC_Flags^(0+128),0	;volatile
  2850  00B9  0008               	return
  2851                           
  2852                           ;ADC.c: 34: RxTimer = 0;
  2853  00BA  01C6               	clrf	_RxTimer^(0+128)	;volatile
  2854  00BB  01C7               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2855                           
  2856                           ;ADC.c: 35: ADC_Flags.New = 0;
  2857  00BC  104A               	bcf	_ADC_Flags^(0+128),0	;volatile
  2858                           
  2859                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2860  00BD  084B               	movf	_ADC_Data^(0+128),w	;volatile
  2861  00BE  00F4               	movwf	??_ADC_loop
  2862  00BF  3004               	movlw	low ((_PWM+1)| (0+32768))
  2863  00C0  23A8  3180         	fcall	PL102	;call to abstracted procedure
  2864  00C2  3084               	movlw	high ((_PWM+1)| (0+32768))
  2865  00C3  3D75               	addwfc	??_ADC_loop+1,w
  2866  00C4  0085               	movwf	5
  2867  00C5  0800               	movf	0,w	;code access
  2868  00C6  003B               	movlb	27	; select bank27
  2869  00C7  00C4               	movwf	68	;volatile
  2870  00C8  00B4               	movwf	52	;volatile
  2871  00C9  00A4               	movwf	36	;volatile
  2872  00CA  0094               	movwf	20	;volatile
  2873                           
  2874                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2875  00CB  0021               	movlb	1	; select bank1
  2876  00CC  084B               	movf	_ADC_Data^(0+128),w	;volatile
  2877  00CD  00F4               	movwf	??_ADC_loop
  2878  00CE  3003               	movlw	low (_PWM| (0+32768))
  2879  00CF  23A8  3180         	fcall	PL102	;call to abstracted procedure
  2880  00D1  3084               	movlw	high (_PWM| (0+32768))
  2881  00D2  3D75               	addwfc	??_ADC_loop+1,w
  2882  00D3  0085               	movwf	5
  2883  00D4  0800               	movf	0,w	;code access
  2884  00D5  003B               	movlb	27	; select bank27
  2885  00D6  00C3               	movwf	67	;volatile
  2886  00D7  00B3               	movwf	51	;volatile
  2887  00D8  00A3               	movwf	35	;volatile
  2888  00D9  0093               	movwf	19	;volatile
  2889                           
  2890                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2891  00DA  23B4               	fcall	PL118	;call to abstracted procedure
  2892                           
  2893                           ;ADC.c: 39: GO_nDONE = 1;
  2894  00DB  0021               	movlb	1	; select bank1
  2895  00DC  149D               	bsf	29,1	;volatile
  2896  00DD  0008               	return
  2897  00DE                     __end_of_ADC_loop:	
  2898  00DE                     __ptext22:	
  2899 ;; *************** function _DMX_init *****************
  2900 ;; Defined at:
  2901 ;;		line 17 in file "DMX.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  Addr            1    4[COMMON] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2910 ;; Tracked objects:
  2911 ;;		On entry : B1F/3
  2912 ;;		On exit  : B1C/0
  2913 ;;		Unchanged: B00/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2915 ;;      Params:         0       0       0       0       0       0       0       0
  2916 ;;      Locals:         1       0       0       0       0       0       0       0
  2917 ;;      Temps:          0       3       0       0       0       0       0       0
  2918 ;;      Totals:         1       3       0       0       0       0       0       0
  2919 ;;Total ram usage:        4 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    2
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _DMX_init
  2931  00DE                     _DMX_init:	
  2932                           
  2933                           ;DMX.c: 19: RXPPS = 0b10101;
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  2937  00DE  3015               	movlw	21
  2938  00DF  003C               	movlb	28	; select bank28
  2939  00E0  0095               	movwf	21	;volatile
  2940                           
  2941                           ;DMX.c: 20: TRISC5 = 1;
  2942  00E1  0021               	movlb	1	; select bank1
  2943  00E2  168E               	bsf	14,5	;volatile
  2944                           
  2945                           ;DMX.c: 22: RCSTA = 0b10010000;
  2946  00E3  3090               	movlw	144
  2947  00E4  0023               	movlb	3	; select bank3
  2948  00E5  009D               	movwf	29	;volatile
  2949                           
  2950                           ;DMX.c: 23: SYNC = 0;
  2951  00E6  121E               	bcf	30,4	;volatile
  2952                           
  2953                           ;DMX.c: 24: BAUDCON = 0b00000000;
  2954  00E7  019F               	clrf	31	;volatile
  2955                           
  2956                           ;DMX.c: 25: BRGH = 1;
  2957  00E8  151E               	bsf	30,2	;volatile
  2958                           
  2959                           ;DMX.c: 26: SPBRGH = 0x00;
  2960  00E9  019C               	clrf	28	;volatile
  2961                           
  2962                           ;DMX.c: 27: SPBRGL = 0x7;
  2963  00EA  3007               	movlw	7
  2964  00EB  009B               	movwf	27	;volatile
  2965                           
  2966                           ;DMX.c: 28: RCIE = 1;
  2967  00EC  0021               	movlb	1	; select bank1
  2968  00ED  1691               	bsf	17,5	;volatile
  2969  00EE  300D               	movlw	13
  2970                           
  2971                           ;DMX.c: 34: DMX_Address = 1;
  2972  00EF  01EC               	clrf	_DMX_Address^(0+128)
  2973  00F0  0AEC               	incf	_DMX_Address^(0+128),f
  2974  00F1  01ED               	clrf	(_DMX_Address+1)^(0+128)
  2975                           
  2976                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  2977  00F2  0022               	movlb	2	; select bank2
  2978  00F3  00C5               	movwf	(_PWMDCLptr+1)^(0+256)
  2979  00F4  3093               	movlw	147
  2980  00F5  00C4               	movwf	_PWMDCLptr^(0+256)
  2981                           
  2982                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  2983  00F6  300D               	movlw	13
  2984  00F7  00C7               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^0
  2985  00F8  30A3               	movlw	163
  2986  00F9  00C6               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^0
  2987                           
  2988                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  2989  00FA  300D               	movlw	13
  2990  00FB  00C9               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^0
  2991  00FC  30B3               	movlw	179
  2992  00FD  00C8               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^0
  2993                           
  2994                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  2995  00FE  300D               	movlw	13
  2996  00FF  00CB               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^0
  2997  0100  30C3               	movlw	195
  2998  0101  00CA               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^0
  2999                           
  3000                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  3001  0102  300D               	movlw	13
  3002  0103  0023               	movlb	3	; select bank3
  3003  0104  00B5               	movwf	(_PWMDCHptr+1)^(0+384)
  3004  0105  3094               	movlw	148
  3005  0106  00B4               	movwf	_PWMDCHptr^(0+384)
  3006                           
  3007                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  3008  0107  300D               	movlw	13
  3009  0108  00B7               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  3010  0109  30A4               	movlw	164
  3011  010A  00B6               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  3012                           
  3013                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  3014  010B  300D               	movlw	13
  3015  010C  00B9               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  3016  010D  30B4               	movlw	180
  3017  010E  00B8               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  3018                           
  3019                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  3020  010F  300D               	movlw	13
  3021  0110  00BB               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  3022  0111  30C4               	movlw	196
  3023  0112  00BA               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  3024                           
  3025                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  3026  0113  300D               	movlw	13
  3027  0114  00AD               	movwf	(_PWMLDCONptr+1)^(0+384)
  3028  0115  309F               	movlw	159
  3029  0116  00AC               	movwf	_PWMLDCONptr^(0+384)
  3030                           
  3031                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  3032  0117  300D               	movlw	13
  3033  0118  00AF               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  3034  0119  30AF               	movlw	175
  3035  011A  00AE               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  3036                           
  3037                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  3038  011B  300D               	movlw	13
  3039  011C  00B1               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  3040  011D  30BF               	movlw	191
  3041  011E  00B0               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  3042                           
  3043                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  3044  011F  300D               	movlw	13
  3045  0120  00B3               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  3046  0121  30CF               	movlw	207
  3047  0122  00B2               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  3048                           
  3049                           ;DMX.c: 50: char Addr=0;
  3050  0123  01F4               	clrf	DMX_init@Addr
  3051  0124                     l4537:	
  3052                           ;DMX.c: 51: while(Addr<4){
  3053                           
  3054  0124  3004               	movlw	4
  3055  0125  0274               	subwf	DMX_init@Addr,w
  3056  0126  1803               	btfsc	3,0
  3057  0127  0008               	return
  3058                           
  3059                           ;DMX.c: 52: DMX_sumRepeat[Addr]=2;
  3060  0128  0874               	movf	DMX_init@Addr,w
  3061  0129  3E66               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3062  012A  0086               	movwf	6
  3063  012B  3001               	movlw	1	; select bank2/3
  3064  012C  0087               	movwf	7
  3065  012D  3002               	movlw	2
  3066  012E  0081               	movwf	1
  3067                           
  3068                           ;DMX.c: 53: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3069  012F  3574               	lslf	DMX_init@Addr,w
  3070  0130  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3071  0131  0086               	movwf	6
  3072  0132  3574               	lslf	DMX_init@Addr,w
  3073  0133  3E5F               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3074  0134  0084               	movwf	4
  3075  0135  3001               	movlw	1	; select bank2/3
  3076  0136  0085               	movwf	5
  3077  0137  3F80               	movwi [0]fsr0
  3078  0138  0081               	movwf	1
  3079                           
  3080                           ;DMX.c: 54: DMXSign[Addr].InfiniteLoop=0;
  3081  0139  0874               	movf	DMX_init@Addr,w
  3082  013A  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  3083  013B  0086               	movwf	6
  3084  013C  0187               	clrf	7
  3085  013D  1101               	bcf	1,2
  3086                           
  3087                           ;DMX.c: 55: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3088  013E  0020               	movlb	0	; select bank0
  3089  013F  01A0               	clrf	??_DMX_init
  3090  0140  01A1               	clrf	??_DMX_init+1
  3091  0141  01A2               	clrf	??_DMX_init+2
  3092  0142  0874               	movf	DMX_init@Addr,w
  3093  0143  0774               	addwf	DMX_init@Addr,w
  3094  0144  0774               	addwf	DMX_init@Addr,w
  3095  0145  3EA0               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3096  0146  0086               	movwf	6
  3097  0147  239A  3180         	fcall	PL94	;call to abstracted procedure
  3098  0149  0874               	movf	DMX_init@Addr,w
  3099  014A  0774               	addwf	DMX_init@Addr,w
  3100  014B  0774               	addwf	DMX_init@Addr,w
  3101  014C  3E38               	addlw	(low (_DMX_TargetBright| (0+256)))& (0+255)
  3102  014D  0086               	movwf	6
  3103  014E  3001               	movlw	1	; select bank2/3
  3104  014F  0087               	movwf	7
  3105  0150  239A  3180         	fcall	PL94	;call to abstracted procedure
  3106                           
  3107                           ;DMX.c: 56: Addr++;
  3108  0152  0AF4               	incf	DMX_init@Addr,f
  3109  0153  2924               	goto	l4537
  3110  0154                     __end_of_DMX_init:	
  3111  0154                     __ptext9:	
  3112 ;; *************** function _RDM_init *****************
  3113 ;; Defined at:
  3114 ;;		line 16 in file "RDM.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  2  110[None  ] int 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : B1F/0
  3125 ;;		On exit  : 1C/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3128 ;;      Params:         0       0       0       0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0       0       0       0
  3130 ;;      Temps:          0       2       0       0       0       0       0       0
  3131 ;;      Totals:         0       2       0       0       0       0       0       0
  3132 ;;Total ram usage:        2 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    3
  3135 ;; This function calls:
  3136 ;;		___bmul
  3137 ;; This function is called by:
  3138 ;;		_main
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _RDM_init
  3144  0154                     _RDM_init:	
  3145                           
  3146                           ;RDM.c: 17: TimerState = 0;
  3147                           
  3148                           ;incstack = 0
  3149                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3150  0154  0021               	movlb	1	; select bank1
  3151  0155  01CC               	clrf	_TimerState^(0+128)	;volatile
  3152                           
  3153                           ;RDM.c: 19: Timer.HR_Count = 0;
  3154  0156  01B1               	clrf	(_Timer^(0+128)+5)	;volatile
  3155                           
  3156                           ;RDM.c: 20: Timer.MIN_Count = 0;
  3157  0157  01B0               	clrf	(_Timer^(0+128)+4)	;volatile
  3158                           
  3159                           ;RDM.c: 21: Timer.SEC_Count = 0;
  3160  0158  01AF               	clrf	(_Timer^(0+128)+3)	;volatile
  3161                           
  3162                           ;RDM.c: 22: Timer.flags = 0;
  3163  0159  01AC               	clrf	_Timer^(0+128)	;volatile
  3164                           
  3165                           ;RDM.c: 25: TMR1 = 0xFE0B;
  3166  015A  3188  20D0  3180   	fcall	PL104	;call to abstracted procedure
  3167                           
  3168                           ;RDM.c: 26: TMR1IF = 0;
  3169  015D  1011               	bcf	17,0	;volatile
  3170                           
  3171                           ;RDM.c: 27: TMR1IE = 1;
  3172  015E  0021               	movlb	1	; select bank1
  3173  015F  1411               	bsf	17,0	;volatile
  3174                           
  3175                           ;RDM.c: 28: PEIE = 1;
  3176  0160  170B               	bsf	11,6	;volatile
  3177                           
  3178                           ;RDM.c: 31: LATC4 = 1;
  3179  0161  0022               	movlb	2	; select bank2
  3180  0162  160E               	bsf	14,4	;volatile
  3181                           
  3182                           ;RDM.c: 32: TRISC4 = 0;
  3183  0163  0021               	movlb	1	; select bank1
  3184  0164  120E               	bcf	14,4	;volatile
  3185                           
  3186                           ;RDM.c: 33: TXEN = 1;
  3187  0165  0023               	movlb	3	; select bank3
  3188  0166  169E               	bsf	30,5	;volatile
  3189                           
  3190                           ;RDM.c: 34: SPEN = 1;
  3191  0167  179D               	bsf	29,7	;volatile
  3192                           
  3193                           ;RDM.c: 35: SYNC = 0;
  3194  0168  121E               	bcf	30,4	;volatile
  3195                           
  3196                           ;RDM.c: 36: RC4PPS = 0b1001;
  3197  0169  3009               	movlw	9
  3198  016A  003D               	movlb	29	; select bank29
  3199  016B  00A4               	movwf	36	;volatile
  3200                           
  3201                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  3202  016C  30D4               	movlw	low _TX_RDM_Data
  3203  016D  0021               	movlb	1	; select bank1
  3204  016E  00C2               	movwf	_TxByte^(0+128)
  3205  016F  3000               	movlw	high _TX_RDM_Data
  3206  0170  00C3               	movwf	(_TxByte+1)^(0+128)
  3207                           
  3208                           ;RDM.c: 39: TX9 = TX9D = 1;
  3209  0171  0023               	movlb	3	; select bank3
  3210  0172  141E               	bsf	30,0	;volatile
  3211  0173  1C1E               	btfss	30,0	;volatile
  3212  0174  2978               	goto	u3270
  3213  0175  0023               	movlb	3	; select bank3
  3214  0176  171E               	bsf	30,6	;volatile
  3215  0177  297A               	goto	l4565
  3216  0178                     u3270:	
  3217  0178  0023               	movlb	3	; select bank3
  3218  0179  131E               	bcf	30,6	;volatile
  3219  017A                     l4565:	
  3220                           
  3221                           ;RDM.c: 41: TxCount = 0;
  3222  017A  0021               	movlb	1	; select bank1
  3223  017B  01C4               	clrf	_TxCount^(0+128)
  3224  017C  01C5               	clrf	(_TxCount+1)^(0+128)
  3225                           
  3226                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  3227  017D  1177               	bcf	_DMX_Flags+1,2	;volatile
  3228                           
  3229                           ;RDM.c: 44: DMX_Flags.RDMidentify = 0;
  3230  017E  11F7               	bcf	_DMX_Flags+1,3	;volatile
  3231                           
  3232                           ;RDM.c: 45: DataPtr = &PD[0];
  3233  017F  3021               	movlw	33
  3234  0180  0022               	movlb	2	; select bank2
  3235  0181  00D7               	movwf	(_DataPtr+1)^(0+256)
  3236  0182  308B               	movlw	139
  3237  0183  00D6               	movwf	_DataPtr^(0+256)
  3238                           
  3239                           ;RDM.c: 56: PDCount = 23;
  3240  0184  3017               	movlw	23
  3241  0185  00F8               	movwf	_PDCount
  3242  0186                     l4579:	
  3243                           ;RDM.c: 57: while (PDCount >= 17) {
  3244                           
  3245  0186  3011               	movlw	17
  3246  0187  0278               	subwf	_PDCount,w
  3247  0188  1C03               	btfss	3,0
  3248  0189  2993               	goto	l4581
  3249                           
  3250                           ;RDM.c: 58: DISCOVERY_RDM_Data.value[PDCount] = 0xFE;
  3251  018A  0878               	movf	_PDCount,w
  3252  018B  3EC0               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  3253  018C  0086               	movwf	6
  3254  018D  3001               	movlw	1	; select bank3/4
  3255  018E  0087               	movwf	7
  3256  018F  30FE               	movlw	254
  3257  0190  0081               	movwf	1
  3258                           
  3259                           ;RDM.c: 59: PDCount--;
  3260  0191  03F8               	decf	_PDCount,f
  3261  0192  2986               	goto	l4579
  3262  0193                     l4581:	
  3263                           
  3264                           ;RDM.c: 60: }
  3265                           ;RDM.c: 61: DISCOVERY_RDM_Data.value[16] = 0xAA;
  3266  0193  30AA               	movlw	170
  3267  0194  0023               	movlb	3	; select bank3
  3268  0195  00D0               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)	;volatile
  3269                           
  3270                           ;RDM.c: 62: PDCount = 0;
  3271  0196  01F8               	clrf	_PDCount
  3272                           
  3273                           ;RDM.c: 63: checkSum = 0;
  3274  0197  0022               	movlb	2	; select bank2
  3275  0198  01D4               	clrf	_checkSum^(0+256)
  3276  0199  01D5               	clrf	(_checkSum+1)^(0+256)
  3277  019A                     l4595:	
  3278                           ;RDM.c: 64: while (PDCount < 6) {
  3279                           
  3280  019A  3006               	movlw	6
  3281  019B  0278               	subwf	_PDCount,w
  3282  019C  1803               	btfsc	3,0
  3283  019D  29C4               	goto	l4597
  3284                           
  3285                           ;RDM.c: 65: DISCOVERY_RDM_Data.value[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  3286  019E  30FE               	movlw	254
  3287  019F  00F4               	movwf	___bmul@multiplicand
  3288  01A0  0878               	movf	_PDCount,w
  3289  01A1  21F8  3180         	fcall	___bmul
  3290  01A3  3ECF               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  3291  01A4  236F  3180         	fcall	PL54	;call to abstracted procedure
  3292  01A6  38AA               	iorlw	170
  3293                           
  3294                           ;RDM.c: 66: DISCOVERY_RDM_Data.value[14 - PDCount * 2] = UID[PDCount] | 0x55;
  3295  01A7  23BA  3180         	fcall	PL120	;call to abstracted procedure
  3296  01A9  21F8  3180         	fcall	___bmul
  3297  01AB  3ECE               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  3298  01AC  236F  3180         	fcall	PL54	;call to abstracted procedure
  3299  01AE  3855               	iorlw	85
  3300                           
  3301                           ;RDM.c: 67: checkSum += DISCOVERY_RDM_Data.value[15 - PDCount * 2];
  3302  01AF  23BA  3180         	fcall	PL120	;call to abstracted procedure
  3303  01B1  21F8  3180         	fcall	___bmul
  3304  01B3  3ECF               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  3305  01B4  2393  3180         	fcall	PL92	;call to abstracted procedure
  3306  01B6  1803               	skipnc
  3307  01B7  0AD5               	incf	(_checkSum+1)^(0+256),f
  3308                           
  3309                           ;RDM.c: 68: checkSum += DISCOVERY_RDM_Data.value[14 - PDCount * 2];
  3310  01B8  30FE               	movlw	254
  3311  01B9  00F4               	movwf	___bmul@multiplicand
  3312  01BA  0878               	movf	_PDCount,w
  3313  01BB  21F8  3180         	fcall	___bmul
  3314  01BD  3ECE               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  3315  01BE  2393  3180         	fcall	PL92	;call to abstracted procedure
  3316  01C0  1803               	skipnc
  3317  01C1  0AD5               	incf	(_checkSum+1)^(0+256),f
  3318                           
  3319                           ;RDM.c: 69: PDCount++;
  3320  01C2  0AF8               	incf	_PDCount,f
  3321  01C3  299A               	goto	l4595
  3322  01C4                     l4597:	
  3323                           
  3324                           ;RDM.c: 70: }
  3325                           ;RDM.c: 71: TX_RDM_Data.CS = checkSum;
  3326  01C4  0855               	movf	(_checkSum+1)^(0+256),w
  3327  01C5  0021               	movlb	1	; select bank1
  3328  01C6  00D5               	movwf	(_TX_RDM_Data+1)^(0+128)	;volatile
  3329  01C7  0022               	movlb	2	; select bank2
  3330  01C8  0854               	movf	_checkSum^(0+256),w
  3331  01C9  0021               	movlb	1	; select bank1
  3332  01CA  00D4               	movwf	_TX_RDM_Data^(0+128)	;volatile
  3333                           
  3334                           ;RDM.c: 72: PDCount = 0;
  3335  01CB  01F8               	clrf	_PDCount
  3336                           
  3337                           ;RDM.c: 73: DISCOVERY_RDM_Data.value[3] = TX_RDM_Data.CSH | 0xAA;
  3338  01CC  0855               	movf	(_TX_RDM_Data^(0+128)+1),w	;volatile
  3339  01CD  38AA               	iorlw	170
  3340  01CE  0023               	movlb	3	; select bank3
  3341  01CF  00C3               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)	;volatile
  3342                           
  3343                           ;RDM.c: 74: DISCOVERY_RDM_Data.value[2] = TX_RDM_Data.CSH | 0x55;
  3344  01D0  0021               	movlb	1	; select bank1
  3345  01D1  0855               	movf	(_TX_RDM_Data^(0+128)+1),w	;volatile
  3346  01D2  3855               	iorlw	85
  3347  01D3  0023               	movlb	3	; select bank3
  3348  01D4  00C2               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)	;volatile
  3349                           
  3350                           ;RDM.c: 75: DISCOVERY_RDM_Data.value[1] = TX_RDM_Data.CSL | 0xAA;
  3351  01D5  0021               	movlb	1	; select bank1
  3352  01D6  0854               	movf	_TX_RDM_Data^(0+128),w	;volatile
  3353  01D7  38AA               	iorlw	170
  3354  01D8  0023               	movlb	3	; select bank3
  3355  01D9  00C1               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)	;volatile
  3356                           
  3357                           ;RDM.c: 76: DISCOVERY_RDM_Data.value[0] = TX_RDM_Data.CSL | 0x55;
  3358  01DA  0021               	movlb	1	; select bank1
  3359  01DB  0854               	movf	_TX_RDM_Data^(0+128),w	;volatile
  3360  01DC  3855               	iorlw	85
  3361  01DD  0023               	movlb	3	; select bank3
  3362  01DE  00C0               	movwf	_DISCOVERY_RDM_Data^(0+384)	;volatile
  3363                           
  3364                           ;RDM.c: 78: PDCount = 16;
  3365  01DF  3010               	movlw	16
  3366  01E0  00F8               	movwf	_PDCount
  3367  01E1                     l4607:	
  3368                           ;RDM.c: 79: while (PDCount >= 11) {
  3369                           
  3370  01E1  300B               	movlw	11
  3371  01E2  0278               	subwf	_PDCount,w
  3372  01E3  1C03               	btfss	3,0
  3373  01E4  0008               	return
  3374                           
  3375                           ;RDM.c: 80: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  3376  01E5  0878               	movf	_PDCount,w
  3377  01E6  3ED4               	addlw	(low (_TX_RDM_Data| 0))& (0+255)
  3378  01E7  0086               	movwf	6
  3379  01E8  3086               	movlw	high ((_UID| (0+32768)+16))
  3380  01E9  0187               	clrf	7
  3381  01EA  0020               	movlb	0	; select bank0
  3382  01EB  00A3               	movwf	??_RDM_init+1
  3383  01EC  0878               	movf	_PDCount,w
  3384  01ED  3C13               	sublw	low ((_UID| (0+32768)+16))
  3385  01EE  00A2               	movwf	??_RDM_init
  3386  01EF  1C03               	skipc
  3387  01F0  03A3               	decf	??_RDM_init+1,f
  3388  01F1  0084               	movwf	4
  3389  01F2  0823               	movf	??_RDM_init+1,w
  3390  01F3  0085               	movwf	5
  3391  01F4  0800               	movf	0,w	;code access
  3392  01F5  0081               	movwf	1
  3393                           
  3394                           ;RDM.c: 81: PDCount--;
  3395  01F6  03F8               	decf	_PDCount,f
  3396  01F7  29E1               	goto	l4607
  3397  01F8                     __end_of_RDM_init:	
  3398  01F8                     __ptext10:	
  3399 ;; *************** function ___bmul *****************
  3400 ;; Defined at:
  3401 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  multiplier      1    wreg     unsigned char 
  3404 ;;  multiplicand    1    4[COMMON] unsigned char 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  multiplier      1    1[BANK0 ] unsigned char 
  3407 ;;  product         1    0[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      unsigned char 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0
  3412 ;; Tracked objects:
  3413 ;;		On entry : 1D/2
  3414 ;;		On exit  : 1F/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3417 ;;      Params:         1       0       0       0       0       0       0       0
  3418 ;;      Locals:         0       2       0       0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0
  3420 ;;      Totals:         1       2       0       0       0       0       0       0
  3421 ;;Total ram usage:        3 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    2
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_RDM_init
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function ___bmul
  3433  01F8                     ___bmul:	
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3437                           ;___bmul@multiplier stored from wreg
  3438  01F8  0020               	movlb	0	; select bank0
  3439  01F9  00A1               	movwf	___bmul@multiplier
  3440  01FA  01A0               	clrf	___bmul@product
  3441  01FB                     l4293:	
  3442  01FB  0874               	movf	___bmul@multiplicand,w
  3443  01FC  1821               	btfsc	___bmul@multiplier,0
  3444  01FD  07A0               	addwf	___bmul@product,f
  3445  01FE  35F4               	lslf	___bmul@multiplicand,f
  3446  01FF  36A1               	lsrf	___bmul@multiplier,f
  3447  0200  0821               	movf	___bmul@multiplier,w
  3448  0201  1D03               	btfss	3,2
  3449  0202  29FB               	goto	l4293
  3450  0203  0820               	movf	___bmul@product,w
  3451  0204  0008               	return
  3452  0205                     __end_of___bmul:	
  3453  0205                     __ptext2:	
  3454 ;; *************** function _RDM_rx_loop *****************
  3455 ;; Defined at:
  3456 ;;		line 88 in file "RDM.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;		None
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  2  116[None  ] int 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 1F/1
  3467 ;;		On exit  : 1C/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3470 ;;      Params:         0       0       0       0       0       0       0       0
  3471 ;;      Locals:         0       0       0       0       0       0       0       0
  3472 ;;      Temps:          0       1       0       0       0       0       0       0
  3473 ;;      Totals:         0       1       0       0       0       0       0       0
  3474 ;;Total ram usage:        1 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    4
  3477 ;; This function calls:
  3478 ;;		_RDM_GET_CC
  3479 ;;		_RDM_SET_CC
  3480 ;;		_RDM_discovery_CC
  3481 ;;		_RDM_get_checkSum
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _RDM_rx_loop
  3489  0205                     _RDM_rx_loop:	
  3490                           
  3491                           ;RDM.c: 89: if (DMX_Flags.RDMNew == 1) {
  3492                           
  3493                           ;incstack = 0
  3494                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3495  0205  1F76               	btfss	_DMX_Flags,6	;volatile
  3496  0206  0008               	return
  3497                           
  3498                           ;RDM.c: 90: DMX_Flags.RDMNew = 0;
  3499  0207  1376               	bcf	_DMX_Flags,6	;volatile
  3500                           
  3501                           ;RDM.c: 91: DMX_Flags.RDMcheck = 0;
  3502  0208  30FC               	movlw	-4
  3503  0209  05F7               	andwf	_DMX_Flags+1,f	;volatile
  3504                           
  3505                           ;RDM.c: 94: if ((RX_RDM_Data.DUID.M == 0x4D52 || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RDM
      +                          _Data.DUID.ID == 0x17C31092 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  3506  020A  3052               	movlw	82
  3507  020B  0022               	movlb	2	; select bank2
  3508  020C  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  3509  020D  304D               	movlw	77
  3510  020E  1903               	skipnz
  3511  020F  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  3512  0210  1903               	btfsc	3,2
  3513  0211  2A17               	goto	l4759
  3514  0212  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  3515  0213  2A33               	goto	l696
  3516  0214  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  3517  0215  1D03               	btfss	3,2
  3518  0216  2A33               	goto	l696
  3519  0217                     l4759:	
  3520  0217  3092               	movlw	146
  3521  0218  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  3522  0219  3010               	movlw	16
  3523  021A  1903               	skipnz
  3524  021B  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  3525  021C  30C3               	movlw	195
  3526  021D  1903               	skipnz
  3527  021E  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  3528  021F  3017               	movlw	23
  3529  0220  1903               	skipnz
  3530  0221  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  3531  0222  1903               	btfsc	3,2
  3532  0223  2A2F               	goto	l4763
  3533  0224  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  3534  0225  2A33               	goto	l696
  3535  0226  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  3536  0227  1D03               	skipz
  3537  0228  2A33               	goto	l696
  3538  0229  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  3539  022A  1D03               	skipz
  3540  022B  2A33               	goto	l696
  3541  022C  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  3542  022D  1D03               	btfss	3,2
  3543  022E  2A33               	goto	l696
  3544  022F                     l4763:	
  3545                           
  3546                           ;RDM.c: 95: DMX_Flags.RDMcheck = 1;
  3547  022F  0877               	movf	_DMX_Flags+1,w	;volatile
  3548  0230  39FC               	andlw	-4
  3549  0231  3801               	iorlw	1
  3550  0232  00F7               	movwf	_DMX_Flags+1	;volatile
  3551  0233                     l696:	
  3552                           
  3553                           ;RDM.c: 96: }
  3554                           ;RDM.c: 99: if (DMX_Flags.RDMcheck == 1 && RDM_get_checkSum(RX_RDM_Data,101) == RX_RDM_D
      +                          ata.CS) {
  3555  0233  0877               	movf	_DMX_Flags+1,w	;volatile
  3556  0234  3903               	andlw	3
  3557  0235  3A01               	xorlw	1
  3558  0236  1D03               	skipz
  3559  0237  2A5B               	goto	l701
  3560  0238  3020               	movlw	low _RX_RDM_Data
  3561  0239  0086               	movwf	6
  3562  023A  3001               	movlw	high _RX_RDM_Data
  3563  023B  0087               	movwf	7
  3564  023C  3020               	movlw	low RDM_get_checkSum@Data
  3565  023D  0084               	movwf	4
  3566  023E  3000               	movlw	high RDM_get_checkSum@Data
  3567  023F  0085               	movwf	5
  3568  0240  3018               	movlw	24
  3569  0241  0020               	movlb	0	; select bank0
  3570  0242  00BD               	movwf	??_RDM_rx_loop
  3571  0243                     u3520:	
  3572  0243  0016               	moviw fsr1++
  3573  0244  001A               	movwi fsr0++
  3574  0245  0BBD               	decfsz	??_RDM_rx_loop,f
  3575  0246  2A43               	goto	u3520
  3576  0247  3065               	movlw	101
  3577  0248  00B8               	movwf	RDM_get_checkSum@len
  3578  0249  2271  3180         	fcall	_RDM_get_checkSum
  3579  024B  0022               	movlb	2	; select bank2
  3580  024C  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  3581  024D  0020               	movlb	0	; select bank0
  3582  024E  0621               	xorwf	?_RDM_get_checkSum+1,w
  3583  024F  1D03               	skipz
  3584  0250  2A55               	goto	u3535
  3585  0251  0022               	movlb	2	; select bank2
  3586  0252  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  3587  0253  0020               	movlb	0	; select bank0
  3588  0254  0620               	xorwf	?_RDM_get_checkSum,w
  3589  0255                     u3535:	
  3590  0255  1D03               	skipz
  3591  0256  2A5B               	goto	l701
  3592                           
  3593                           ;RDM.c: 100: DMX_Flags.RDMcheck = 2;
  3594  0257  0877               	movf	_DMX_Flags+1,w	;volatile
  3595  0258  39FC               	andlw	-4
  3596  0259  3802               	iorlw	2
  3597  025A  00F7               	movwf	_DMX_Flags+1	;volatile
  3598  025B                     l701:	
  3599                           
  3600                           ;RDM.c: 101: }
  3601                           ;RDM.c: 104: if (DMX_Flags.RDMcheck == 2) {
  3602  025B  0877               	movf	_DMX_Flags+1,w	;volatile
  3603  025C  3903               	andlw	3
  3604  025D  3A02               	xorlw	2
  3605  025E  1D03               	skipz
  3606  025F  0008               	return
  3607                           
  3608                           ;RDM.c: 114: break;
  3609  0260  0022               	movlb	2	; select bank2
  3610  0261  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  3611                           
  3612                           ; Switch size 1, requested type "space"
  3613                           ; Number of cases is 3, Range of values is 16 to 48
  3614                           ; switch strategies available:
  3615                           ; Name         Instructions Cycles
  3616                           ; simple_byte           10     6 (average)
  3617                           ; direct_byte           75     9 (fixed)
  3618                           ; jumptable            263     9 (fixed)
  3619                           ;	Chosen strategy is simple_byte
  3620  0262  3A10               	xorlw	16	; case 16
  3621  0263  1903               	skipnz
  3622  0264  2A6C               	goto	l4771
  3623  0265  3A30               	xorlw	48	; case 32
  3624  0266  1903               	skipnz
  3625  0267  2A6E               	goto	l4773
  3626  0268  3A10               	xorlw	16	; case 48
  3627  0269  1903               	skipnz
  3628  026A  2A6F               	goto	l4775
  3629  026B  2A70               	goto	l708
  3630  026C                     l4771:	
  3631                           
  3632                           ;RDM.c: 107: RDM_discovery_CC();
  3633  026C  3186  2EE7         	ljmp	l4113
  3634  026E                     l4773:	
  3635                           ;RDM.c: 108: break;
  3636                           
  3637                           
  3638                           ;RDM.c: 110: RDM_GET_CC();
  3639  026E  2AAF               	ljmp	l4181
  3640  026F                     l4775:	
  3641                           ;RDM.c: 111: break;
  3642                           
  3643                           
  3644                           ;RDM.c: 113: RDM_SET_CC();
  3645  026F  2BBF               	ljmp	l4263
  3646  0270                     l708:	
  3647  0270  0008               	return
  3648  0271                     __end_of_RDM_rx_loop:	
  3649  0271                     __ptext8:	
  3650 ;; *************** function _RDM_get_checkSum *****************
  3651 ;; Defined at:
  3652 ;;		line 144 in file "RDM_Read.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  Data           24    0[BANK0 ] struct .
  3655 ;;  len             1   24[BANK0 ] unsigned char 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  2    0[BANK0 ] unsigned int 
  3660 ;; Registers used:
  3661 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3662 ;; Tracked objects:
  3663 ;;		On entry : 1F/0
  3664 ;;		On exit  : 1F/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3667 ;;      Params:         0      25       0       0       0       0       0       0
  3668 ;;      Locals:         0       0       0       0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0
  3670 ;;      Totals:         0      25       0       0       0       0       0       0
  3671 ;;Total ram usage:       25 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    2
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_RDM_rx_loop
  3678 ;;		_RDM_GET_CC
  3679 ;;		_RDM_SET_CC
  3680 ;;		_RDM_discovery_CC
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function _RDM_get_checkSum
  3686  0271                     _RDM_get_checkSum:	
  3687                           
  3688                           ;RDM_Read.c: 145: checkSum = 0x00CD;
  3689                           
  3690                           ;incstack = 0
  3691                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3692  0271  30CD               	movlw	205
  3693  0272  0022               	movlb	2	; select bank2
  3694  0273  00D4               	movwf	_checkSum^(0+256)
  3695  0274  3017               	movlw	23
  3696  0275  01D5               	clrf	(_checkSum+1)^(0+256)
  3697                           
  3698                           ;RDM_Read.c: 146: PackCount = 23;
  3699  0276  0021               	movlb	1	; select bank1
  3700  0277  00CD               	movwf	_PackCount^(0+128)	;volatile
  3701  0278                     l4023:	
  3702                           ;RDM_Read.c: 147: while (PackCount > 1) {
  3703                           
  3704  0278  3002               	movlw	2
  3705  0279  024D               	subwf	_PackCount^(0+128),w	;volatile
  3706  027A  1C03               	btfss	3,0
  3707  027B  2A88               	goto	l4025
  3708                           
  3709                           ;RDM_Read.c: 148: checkSum += Data.value[PackCount];
  3710  027C  084D               	movf	_PackCount^(0+128),w
  3711  027D  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  3712  027E  0086               	movwf	6
  3713  027F  0187               	clrf	7
  3714  0280  0801               	movf	1,w
  3715  0281  0022               	movlb	2	; select bank2
  3716  0282  07D4               	addwf	_checkSum^(0+256),f
  3717  0283  1803               	skipnc
  3718  0284  0AD5               	incf	(_checkSum+1)^(0+256),f
  3719                           
  3720                           ;RDM_Read.c: 149: PackCount--;
  3721  0285  0021               	movlb	1	; select bank1
  3722  0286  03CD               	decf	_PackCount^(0+128),f	;volatile
  3723  0287  2A78               	goto	l4023
  3724  0288                     l4025:	
  3725                           
  3726                           ;RDM_Read.c: 150: }
  3727                           ;RDM_Read.c: 151: PackCount = len-1;
  3728  0288  0020               	movlb	0	; select bank0
  3729  0289  0838               	movf	RDM_get_checkSum@len,w
  3730  028A  3EFF               	addlw	255
  3731  028B  0021               	movlb	1	; select bank1
  3732  028C  00CD               	movwf	_PackCount^(0+128)	;volatile
  3733                           
  3734                           ;RDM_Read.c: 152: PDCount = len - Data.PDL;
  3735  028D  0020               	movlb	0	; select bank0
  3736  028E  0822               	movf	RDM_get_checkSum@Data+2,w
  3737  028F  0238               	subwf	RDM_get_checkSum@len,w
  3738  0290  00F8               	movwf	_PDCount
  3739  0291                     l4031:	
  3740                           ;RDM_Read.c: 153: while (PackCount >= PDCount) {
  3741                           
  3742  0291  0878               	movf	_PDCount,w
  3743  0292  0021               	movlb	1	; select bank1
  3744  0293  024D               	subwf	_PackCount^(0+128),w	;volatile
  3745  0294  1C03               	btfss	3,0
  3746  0295  2AA0               	goto	l4033
  3747                           
  3748                           ;RDM_Read.c: 154: checkSum += PD[PDCount];
  3749  0296  0878               	movf	_PDCount,w
  3750  0297  3189  215F  3180   	fcall	PL76	;call to abstracted procedure
  3751  029A  0022               	movlb	2	; select bank2
  3752  029B  07D4               	addwf	_checkSum^(0+256),f
  3753  029C  1803               	skipnc
  3754  029D  0AD5               	incf	(_checkSum+1)^(0+256),f
  3755                           
  3756                           ;RDM_Read.c: 155: PDCount++;
  3757  029E  0AF8               	incf	_PDCount,f
  3758  029F  2A91               	goto	l4031
  3759  02A0                     l4033:	
  3760                           
  3761                           ;RDM_Read.c: 156: }
  3762                           ;RDM_Read.c: 157: return checkSum;
  3763  02A0  0022               	movlb	2	; select bank2
  3764  02A1  0855               	movf	(_checkSum+1)^(0+256),w
  3765  02A2  0020               	movlb	0	; select bank0
  3766  02A3  00A1               	movwf	?_RDM_get_checkSum+1
  3767  02A4  0022               	movlb	2	; select bank2
  3768  02A5  0854               	movf	_checkSum^(0+256),w
  3769  02A6  0020               	movlb	0	; select bank0
  3770  02A7  00A0               	movwf	?_RDM_get_checkSum
  3771  02A8  0008               	return
  3772  02A9                     __end_of_RDM_get_checkSum:	
  3773  02A9                     __ptext1:	
  3774 ;; *************** function _timer1_init *****************
  3775 ;; Defined at:
  3776 ;;		line 15 in file "Timer.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  2  108[None  ] int 
  3783 ;; Registers used:
  3784 ;;		wreg
  3785 ;; Tracked objects:
  3786 ;;		On entry : B1F/0
  3787 ;;		On exit  : B1F/0
  3788 ;;		Unchanged: B00/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3790 ;;      Params:         0       0       0       0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    2
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _timer1_init
  3806  02A9                     _timer1_init:	
  3807                           
  3808                           ;Timer.c: 16: TMR1IE = 1;
  3809                           
  3810                           ;incstack = 0
  3811                           ; Regs used in _timer1_init: [wreg]
  3812  02A9  0021               	movlb	1	; select bank1
  3813  02AA  1411               	bsf	17,0	;volatile
  3814                           
  3815                           ;Timer.c: 17: T1CON = 0b00110001;
  3816  02AB  3031               	movlw	49
  3817  02AC  0020               	movlb	0	; select bank0
  3818  02AD  0098               	movwf	24	;volatile
  3819  02AE  0008               	return
  3820  02AF                     __end_of_timer1_init:	
  3821  02AF                     __ptext5:	
  3822 ;; *************** function _RDM_GET_CC *****************
  3823 ;; Defined at:
  3824 ;;		line 15 in file "RDM_Read.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 1C/2
  3835 ;;		On exit  : 1F/1
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3838 ;;      Params:         0       0       0       0       0       0       0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0       0
  3840 ;;      Temps:          2       0       0       0       0       0       0       0
  3841 ;;      Totals:         2       0       0       0       0       0       0       0
  3842 ;;Total ram usage:        2 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    3
  3845 ;; This function calls:
  3846 ;;		_RDM_get_checkSum
  3847 ;;		_RDM_tx_TimerBreak
  3848 ;;		_TX_RDM_Response_Set
  3849 ;; This function is called by:
  3850 ;;		_RDM_rx_loop
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           
  3855                           ;psect for function _RDM_GET_CC
  3856  02AF                     _RDM_GET_CC:	
  3857  02AF                     l4181:	
  3858                           ;incstack = 0
  3859                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3860                           
  3861                           
  3862                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  3863  02AF  2B13               	goto	l4245
  3864  02B0                     l4183:	
  3865                           
  3866                           ;RDM_Read.c: 18: TX_RDM_Response_Set();
  3867  02B0  2339  3180         	fcall	_TX_RDM_Response_Set
  3868                           
  3869                           ;RDM_Read.c: 19: TX_RDM_Data.ML=26;
  3870  02B2  301A               	movlw	26
  3871  02B3  00EB               	movwf	(_TX_RDM_Data^(0+128)+23)	;volatile
  3872                           
  3873                           ;RDM_Read.c: 20: TX_RDM_Data.PORT=0x00;
  3874  02B4  01DD               	clrf	(_TX_RDM_Data^(0+128)+9)	;volatile
  3875                           
  3876                           ;RDM_Read.c: 21: TX_RDM_Data.PDL=1;
  3877  02B5  3001               	movlw	1
  3878  02B6  00D6               	movwf	(_TX_RDM_Data^(0+128)+2)	;volatile
  3879                           
  3880                           ;RDM_Read.c: 22: PD[40-1] =DMX_Flags.RDMidentify;
  3881  02B7  0C77               	rrf	_DMX_Flags+1,w	;volatile
  3882  02B8  00F4               	movwf	??_RDM_GET_CC
  3883  02B9  0CF4               	rrf	??_RDM_GET_CC,f
  3884  02BA  0C74               	rrf	??_RDM_GET_CC,w
  3885  02BB  3901               	andlw	1
  3886  02BC  00F5               	movwf	??_RDM_GET_CC+1
  3887  02BD  30B2               	movlw	178
  3888  02BE  0086               	movwf	6
  3889  02BF  3021               	movlw	33
  3890  02C0  0087               	movwf	7
  3891  02C1  0875               	movf	??_RDM_GET_CC+1,w
  3892  02C2  0081               	movwf	1
  3893                           
  3894                           ;RDM_Read.c: 23: break;
  3895  02C3  2B29               	goto	l4247
  3896  02C4                     l4193:	
  3897                           
  3898                           ;RDM_Read.c: 26: TX_RDM_Data.PDL=0x13;
  3899  02C4  3013               	movlw	19
  3900  02C5  0021               	movlb	1	; select bank1
  3901  02C6  00D6               	movwf	(_TX_RDM_Data^(0+128)+2)	;volatile
  3902                           
  3903                           ;RDM_Read.c: 27: TX_RDM_Response_Set();
  3904  02C7  2339  3180         	fcall	_TX_RDM_Response_Set
  3905                           
  3906                           ;RDM_Read.c: 28: TX_RDM_Data.PORT=0x00;
  3907  02C9  01DD               	clrf	(_TX_RDM_Data^(0+128)+9)	;volatile
  3908                           
  3909                           ;RDM_Read.c: 29: PD_Manu=&PD[40-2];
  3910  02CA  3021               	movlw	33
  3911  02CB  00C1               	movwf	(_PD_Manu+1)^(0+128)
  3912  02CC  30B1               	movlw	177
  3913                           
  3914                           ;RDM_Read.c: 30: *PD_Manu=0x0100;
  3915  02CD  23A1  3180         	fcall	PL96	;call to abstracted procedure
  3916  02CF  3001               	movlw	1
  3917  02D0  3FC1               	movwi [1]fsr1
  3918                           
  3919                           ;RDM_Read.c: 31: PD_Manu=&PD[40-4];
  3920  02D1  3021               	movlw	33
  3921  02D2  00C1               	movwf	(_PD_Manu+1)^(0+128)
  3922  02D3  30AF               	movlw	175
  3923  02D4  00C0               	movwf	_PD_Manu^(0+128)
  3924                           
  3925                           ;RDM_Read.c: 32: *PD_Manu=0x0080;
  3926  02D5  0086               	movwf	6
  3927  02D6  0841               	movf	(_PD_Manu+1)^(0+128),w
  3928  02D7  0087               	movwf	7
  3929  02D8  3080               	movlw	128
  3930                           
  3931                           ;RDM_Read.c: 33: PD_Manu=&PD[40-6];
  3932  02D9  238D  3180         	fcall	PL72	;call to abstracted procedure
  3933  02DB  30AD               	movlw	173
  3934                           
  3935                           ;RDM_Read.c: 34: *PD_Manu=0x0004;
  3936                           
  3937                           ;RDM_Read.c: 35: PD_ID=&PD[40-10];
  3938  02DC  237B  3180         	fcall	PL56	;call to abstracted procedure
  3939  02DE  00BF               	movwf	(_PD_ID+1)^(0+128)
  3940  02DF  30A9               	movlw	169
  3941  02E0  00BE               	movwf	_PD_ID^(0+128)
  3942                           
  3943                           ;RDM_Read.c: 36: *PD_ID=1;
  3944  02E1  0086               	movwf	6
  3945  02E2  083F               	movf	(_PD_ID+1)^(0+128),w
  3946  02E3  0087               	movwf	7
  3947  02E4  3001               	movlw	1
  3948  02E5  3FC0               	movwi [0]fsr1
  3949  02E6  3000               	movlw	0
  3950  02E7  3FC1               	movwi [1]fsr1
  3951  02E8  3FC2               	movwi [2]fsr1
  3952  02E9  3FC3               	movwi [3]fsr1
  3953                           
  3954                           ;RDM_Read.c: 37: PD_Manu=&PD[40-12];
  3955  02EA  3021               	movlw	33
  3956  02EB  00C1               	movwf	(_PD_Manu+1)^(0+128)
  3957  02EC  30A7               	movlw	167
  3958                           
  3959                           ;RDM_Read.c: 38: *PD_Manu=0x04;
  3960                           
  3961                           ;RDM_Read.c: 39: PD_Manu=&PD[40-14];
  3962  02ED  237B  3180         	fcall	PL56	;call to abstracted procedure
  3963  02EF  00C1               	movwf	(_PD_Manu+1)^(0+128)
  3964  02F0  30A5               	movlw	165
  3965  02F1  00C0               	movwf	_PD_Manu^(0+128)
  3966                           
  3967                           ;RDM_Read.c: 40: *PD_Manu=0x01;
  3968  02F2  0086               	movwf	6
  3969  02F3  0841               	movf	(_PD_Manu+1)^(0+128),w
  3970  02F4  0087               	movwf	7
  3971  02F5  3001               	movlw	1
  3972                           
  3973                           ;RDM_Read.c: 41: PD_Manu=&PD[40-16];
  3974  02F6  238D  3180         	fcall	PL72	;call to abstracted procedure
  3975  02F8  30A3               	movlw	163
  3976                           
  3977                           ;RDM_Read.c: 42: *PD_Manu=DMX_Address;
  3978  02F9  2384  3180         	fcall	PL64	;call to abstracted procedure
  3979                           
  3980                           ;RDM_Read.c: 43: PD_Manu=&PD[40-18];
  3981  02FB  3021               	movlw	33
  3982  02FC  00C1               	movwf	(_PD_Manu+1)^(0+128)
  3983  02FD  30A1               	movlw	161
  3984                           
  3985                           ;RDM_Read.c: 44: *PD_Manu=0;
  3986  02FE  23A1  3180         	fcall	PL96	;call to abstracted procedure
  3987  0300  3FC1               	movwi [1]fsr1
  3988                           
  3989                           ;RDM_Read.c: 45: PD[40-19]=0;
  3990  0301  308B               	movlw	139
  3991  0302  0086               	movwf	6
  3992  0303  3021               	movlw	33
  3993  0304  0087               	movwf	7
  3994  0305  3155               	addfsr 1,21
  3995  0306  0181               	clrf	1
  3996                           
  3997                           ;RDM_Read.c: 49: break;
  3998  0307  2B29               	goto	l4247
  3999  0308                     l1041:	
  4000                           ;RDM_Read.c: 50: case 0x00F0:
  4001                           
  4002                           
  4003                           ;RDM_Read.c: 51: PD_Manu=&PD[40-2];
  4004  0308  3021               	movlw	33
  4005  0309  0021               	movlb	1	; select bank1
  4006  030A  00C1               	movwf	(_PD_Manu+1)^(0+128)
  4007  030B  30B1               	movlw	177
  4008                           
  4009                           ;RDM_Read.c: 52: *PD_Manu=DMX_Address;
  4010  030C  2384  3180         	fcall	PL64	;call to abstracted procedure
  4011                           
  4012                           ;RDM_Read.c: 53: TX_RDM_Response_Set();
  4013  030E  2339  3180         	fcall	_TX_RDM_Response_Set
  4014                           
  4015                           ;RDM_Read.c: 54: TX_RDM_Data.ML=26;
  4016                           
  4017                           ;RDM_Read.c: 55: TX_RDM_Data.PORT=0x00;
  4018                           
  4019                           ;RDM_Read.c: 56: TX_RDM_Data.PDL=2;
  4020  0310  23AE  3180         	fcall	PL112	;call to abstracted procedure
  4021                           
  4022                           ;RDM_Read.c: 57: break;
  4023  0312  2B29               	goto	l4247
  4024  0313                     l4245:	
  4025                           
  4026                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4027                           ; Switch size 1, requested type "space"
  4028                           ; Number of cases is 2, Range of values is 0 to 16
  4029                           ; switch strategies available:
  4030                           ; Name         Instructions Cycles
  4031                           ; simple_byte            7     4 (average)
  4032                           ; direct_byte           40     6 (fixed)
  4033                           ; jumptable            260     6 (fixed)
  4034                           ;	Chosen strategy is simple_byte
  4035  0313  0022               	movlb	2	; select bank2
  4036  0314  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  4037  0315  3A00               	xorlw	0	; case 0
  4038  0316  1903               	skipnz
  4039  0317  2B1C               	goto	l4965
  4040  0318  3A10               	xorlw	16	; case 16
  4041  0319  1903               	skipnz
  4042  031A  2B24               	goto	l4967
  4043  031B  2B29               	goto	l4247
  4044  031C                     l4965:	
  4045                           
  4046                           ; Switch size 1, requested type "space"
  4047                           ; Number of cases is 2, Range of values is 96 to 240
  4048                           ; switch strategies available:
  4049                           ; Name         Instructions Cycles
  4050                           ; simple_byte            7     4 (average)
  4051                           ; jumptable            263     9 (fixed)
  4052                           ;	Chosen strategy is simple_byte
  4053  031C  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4054  031D  3A60               	xorlw	96	; case 96
  4055  031E  1903               	skipnz
  4056  031F  2AC4               	goto	l4193
  4057  0320  3A90               	xorlw	144	; case 240
  4058  0321  1903               	skipnz
  4059  0322  2B08               	goto	l1041
  4060  0323  2B29               	goto	l4247
  4061  0324                     l4967:	
  4062                           
  4063                           ; Switch size 1, requested type "space"
  4064                           ; Number of cases is 1, Range of values is 0 to 0
  4065                           ; switch strategies available:
  4066                           ; Name         Instructions Cycles
  4067                           ; simple_byte            4     3 (average)
  4068                           ; direct_byte            8     6 (fixed)
  4069                           ; jumptable            260     6 (fixed)
  4070                           ;	Chosen strategy is simple_byte
  4071  0324  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4072  0325  3A00               	xorlw	0	; case 0
  4073  0326  1903               	skipnz
  4074  0327  2AB0               	goto	l4183
  4075  0328  2B29               	goto	l4247
  4076  0329                     l4247:	
  4077                           
  4078                           ;RDM_Read.c: 59: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  4079  0329  30D4               	movlw	low _TX_RDM_Data
  4080  032A  23FB  3180         	fcall	PL44	;call to abstracted procedure
  4081  032C  00F4               	movwf	??_RDM_GET_CC
  4082  032D                     u2990:	
  4083  032D  0016               	moviw fsr1++
  4084  032E  001A               	movwi fsr0++
  4085  032F  0BF4               	decfsz	??_RDM_GET_CC,f
  4086  0330  2B2D               	goto	u2990
  4087  0331  3028               	movlw	40
  4088  0332  0020               	movlb	0	; select bank0
  4089  0333  00B8               	movwf	RDM_get_checkSum@len
  4090  0334  2271  3180         	fcall	_RDM_get_checkSum
  4091                           
  4092                           ;RDM_Read.c: 60: TxState = TX_START;
  4093                           
  4094                           ;RDM_Read.c: 61: TXREG = 0xCC;
  4095  0336  23EE  3180         	fcall	PL28	;call to abstracted procedure
  4096                           
  4097                           ;RDM_Read.c: 62: RDM_tx_TimerBreak();
  4098  0338  2B60               	ljmp	l2797
  4099  0339                     __end_of_RDM_GET_CC:	
  4100  0339                     __ptext6:	
  4101 ;; *************** function _TX_RDM_Response_Set *****************
  4102 ;; Defined at:
  4103 ;;		line 135 in file "RDM_Read.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;		None
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 1C/2
  4114 ;;		On exit  : 1F/1
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4117 ;;      Params:         0       0       0       0       0       0       0       0
  4118 ;;      Locals:         0       0       0       0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0
  4120 ;;      Totals:         0       0       0       0       0       0       0       0
  4121 ;;Total ram usage:        0 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    2
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_RDM_GET_CC
  4128 ;;		_RDM_SET_CC
  4129 ;;		_RDM_discovery_CC
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _TX_RDM_Response_Set
  4135  0339                     _TX_RDM_Response_Set:	
  4136                           
  4137                           ;RDM_Read.c: 136: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  4141  0339  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  4142  033A  0086               	movwf	6
  4143  033B  3001               	movlw	1	; select bank2/3
  4144  033C  0087               	movwf	7
  4145  033D  3F40               	moviw [0]fsr1
  4146  033E  0021               	movlb	1	; select bank1
  4147  033F  00E5               	movwf	(_TX_RDM_Data^(0+128)+17)	;volatile
  4148  0340  3F41               	moviw [1]fsr1
  4149  0341  00E6               	movwf	((_TX_RDM_Data+1)^(0+128)+17)	;volatile
  4150  0342  3F42               	moviw [2]fsr1
  4151  0343  00E7               	movwf	((_TX_RDM_Data+2)^(0+128)+17)	;volatile
  4152  0344  3F43               	moviw [3]fsr1
  4153  0345  00E8               	movwf	((_TX_RDM_Data+3)^(0+128)+17)	;volatile
  4154                           
  4155                           ;RDM_Read.c: 137: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  4156  0346  0022               	movlb	2	; select bank2
  4157  0347  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  4158  0348  0021               	movlb	1	; select bank1
  4159  0349  00EA               	movwf	((_TX_RDM_Data+1)^(0+128)+21)	;volatile
  4160  034A  0022               	movlb	2	; select bank2
  4161  034B  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  4162  034C  0021               	movlb	1	; select bank1
  4163  034D  00E9               	movwf	(_TX_RDM_Data^(0+128)+21)	;volatile
  4164                           
  4165                           ;RDM_Read.c: 138: TX_RDM_Data.TN=RX_RDM_Data.TN;
  4166  034E  0022               	movlb	2	; select bank2
  4167  034F  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  4168  0350  0021               	movlb	1	; select bank1
  4169  0351  00DE               	movwf	(_TX_RDM_Data^(0+128)+10)	;volatile
  4170                           
  4171                           ;RDM_Read.c: 139: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  4172  0352  0022               	movlb	2	; select bank2
  4173  0353  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  4174  0354  3E01               	addlw	1
  4175  0355  0021               	movlb	1	; select bank1
  4176  0356  00D9               	movwf	(_TX_RDM_Data^(0+128)+5)	;volatile
  4177                           
  4178                           ;RDM_Read.c: 140: TX_RDM_Data.PID=RX_RDM_Data.PID;
  4179  0357  0022               	movlb	2	; select bank2
  4180  0358  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  4181  0359  0021               	movlb	1	; select bank1
  4182  035A  00D8               	movwf	((_TX_RDM_Data+1)^(0+128)+3)	;volatile
  4183  035B  0022               	movlb	2	; select bank2
  4184  035C  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4185  035D  0021               	movlb	1	; select bank1
  4186  035E  00D7               	movwf	(_TX_RDM_Data^(0+128)+3)	;volatile
  4187  035F  0008               	return
  4188  0360                     __end_of_TX_RDM_Response_Set:	
  4189  0360                     __ptext7:	
  4190 ;; *************** function _RDM_tx_TimerBreak *****************
  4191 ;; Defined at:
  4192 ;;		line 181 in file "RDM.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg
  4201 ;; Tracked objects:
  4202 ;;		On entry : 1C/1
  4203 ;;		On exit  : 1F/1
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4206 ;;      Params:         0       0       0       0       0       0       0       0
  4207 ;;      Locals:         0       0       0       0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0
  4209 ;;      Totals:         0       0       0       0       0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    2
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_RDM_GET_CC
  4217 ;;		_RDM_SET_CC
  4218 ;;		_RDM_discovery_CC
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           
  4223                           ;psect for function _RDM_tx_TimerBreak
  4224  0360                     _RDM_tx_TimerBreak:	
  4225  0360                     l2797:	
  4226                           ;incstack = 0
  4227                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  4228                           
  4229                           
  4230                           ;RDM.c: 182: TMR1 = 0xFF4B;
  4231  0360  30FF               	movlw	255
  4232  0361  0020               	movlb	0	; select bank0
  4233  0362  0097               	movwf	23	;volatile
  4234  0363  304B               	movlw	75
  4235  0364  0096               	movwf	22	;volatile
  4236                           
  4237                           ;RDM.c: 183: TimerState = TIMER_BREAK;
  4238  0365  3001               	movlw	1
  4239  0366  0021               	movlb	1	; select bank1
  4240  0367  00CC               	movwf	_TimerState^(0+128)	;volatile
  4241                           
  4242                           ;RDM.c: 184: LATC4 = 0;
  4243  0368  0022               	movlb	2	; select bank2
  4244  0369  120E               	bcf	14,4	;volatile
  4245                           
  4246                           ;RDM.c: 185: LATC3 = 1;
  4247  036A  158E               	bsf	14,3	;volatile
  4248                           
  4249                           ;RDM.c: 186: TX_PD_Flag=1;
  4250  036B  0021               	movlb	1	; select bank1
  4251  036C  00BA               	movwf	_TX_PD_Flag^(0+128)	;volatile
  4252  036D  01BB               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  4253  036E  0008               	return
  4254  036F                     __end_of_RDM_tx_TimerBreak:	
  4255  036F                     PL54:	
  4256  036F  0086               	movwf	6
  4257  0370  3001               	movlw	1	; select bank3/4
  4258  0371  0087               	movwf	7
  4259  0372  0878               	movf	_PDCount,w
  4260  0373  3E03               	addlw	low (_UID| (0+32768))
  4261  0374  0084               	movwf	4
  4262  0375  3086               	movlw	high (_UID| (0+32768))
  4263  0376  1803               	skipnc
  4264  0377  3E01               	addlw	1
  4265  0378  0085               	movwf	5
  4266  0379  0800               	movf	0,w	;code access
  4267  037A  0008               	return
  4268  037B                     __end_ofPL54:	
  4269  037B                     PL56:	
  4270  037B  00C0               	movwf	_PD_Manu^(0+128)
  4271  037C  0086               	movwf	6
  4272  037D  0841               	movf	(_PD_Manu+1)^(0+128),w
  4273  037E  0087               	movwf	7
  4274  037F  3004               	movlw	4
  4275  0380  3FC0               	movwi [0]fsr1
  4276  0381  3000               	movlw	0
  4277  0382  3FC1               	movwi [1]fsr1
  4278  0383  3421               	retlw	33
  4279  0384                     __end_ofPL56:	
  4280  0384                     PL64:	
  4281  0384  00C0               	movwf	_PD_Manu^(0+128)
  4282  0385  0086               	movwf	6
  4283  0386  0841               	movf	(_PD_Manu+1)^(0+128),w
  4284  0387  0087               	movwf	7
  4285  0388  086C               	movf	_DMX_Address^(0+128),w
  4286  0389  3FC0               	movwi [0]fsr1
  4287  038A  086D               	movf	(_DMX_Address+1)^(0+128),w
  4288  038B  3FC1               	movwi [1]fsr1
  4289  038C  0008               	return
  4290  038D                     __end_ofPL64:	
  4291  038D                     PL72:	
  4292  038D  3FC0               	movwi [0]fsr1
  4293  038E  3000               	movlw	0
  4294  038F  3FC1               	movwi [1]fsr1
  4295  0390  3021               	movlw	33
  4296  0391  00C1               	movwf	(_PD_Manu+1)^(0+128)
  4297  0392  0008               	return
  4298  0393                     __end_ofPL72:	
  4299  0393                     PL92:	
  4300  0393  0086               	movwf	6
  4301  0394  3001               	movlw	1	; select bank3/4
  4302  0395  0087               	movwf	7
  4303  0396  0801               	movf	1,w
  4304  0397  0022               	movlb	2	; select bank2
  4305  0398  07D4               	addwf	_checkSum^(0+256),f
  4306  0399  0008               	return
  4307  039A                     __end_ofPL92:	
  4308  039A                     PL94:	
  4309  039A  0820               	movf	??_DMX_init,w
  4310  039B  3FC0               	movwi [0]fsr1
  4311  039C  0821               	movf	??_DMX_init+1,w
  4312  039D  3FC1               	movwi [1]fsr1
  4313  039E  0822               	movf	??_DMX_init+2,w
  4314  039F  3FC2               	movwi [2]fsr1
  4315  03A0  0008               	return
  4316  03A1                     __end_ofPL94:	
  4317  03A1                     PL96:	
  4318  03A1  00C0               	movwf	_PD_Manu^(0+128)
  4319  03A2  0086               	movwf	6
  4320  03A3  0841               	movf	(_PD_Manu+1)^(0+128),w
  4321  03A4  0087               	movwf	7
  4322  03A5  3000               	movlw	0
  4323  03A6  3FC0               	movwi [0]fsr1
  4324  03A7  0008               	return
  4325  03A8                     __end_ofPL96:	
  4326  03A8                     PL102:	
  4327  03A8  01F5               	clrf	??_ADC_loop+1
  4328  03A9  35F4               	lslf	??_ADC_loop,f
  4329  03AA  0DF5               	rlf	??_ADC_loop+1,f
  4330  03AB  0774               	addwf	??_ADC_loop,w
  4331  03AC  0084               	movwf	4
  4332  03AD  0008               	return
  4333  03AE                     __end_ofPL102:	
  4334  03AE                     PL112:	
  4335  03AE  301A               	movlw	26
  4336  03AF  00EB               	movwf	(_TX_RDM_Data^(0+128)+23)	;volatile
  4337  03B0  01DD               	clrf	(_TX_RDM_Data^(0+128)+9)	;volatile
  4338  03B1  3002               	movlw	2
  4339  03B2  00D6               	movwf	(_TX_RDM_Data^(0+128)+2)	;volatile
  4340  03B3  0008               	return
  4341  03B4                     __end_ofPL112:	
  4342  03B4                     PL118:	
  4343  03B4  3080               	movlw	128
  4344  03B5  00CF               	movwf	79	;volatile
  4345  03B6  00BF               	movwf	63	;volatile
  4346  03B7  00AF               	movwf	47	;volatile
  4347  03B8  009F               	movwf	31	;volatile
  4348  03B9  0008               	return
  4349  03BA                     __end_ofPL118:	
  4350  03BA                     PL120:	
  4351  03BA  0081               	movwf	1
  4352  03BB  30FE               	movlw	254
  4353  03BC  00F4               	movwf	___bmul@multiplicand
  4354  03BD  0878               	movf	_PDCount,w
  4355  03BE  0008               	return
  4356  03BF                     __end_ofPL120:	
  4357  03BF                     __ptext4:	
  4358 ;; *************** function _RDM_SET_CC *****************
  4359 ;; Defined at:
  4360 ;;		line 66 in file "RDM_Read.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 1C/2
  4371 ;;		On exit  : 1F/1
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4374 ;;      Params:         0       0       0       0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0
  4376 ;;      Temps:          1       0       0       0       0       0       0       0
  4377 ;;      Totals:         1       0       0       0       0       0       0       0
  4378 ;;Total ram usage:        1 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    3
  4381 ;; This function calls:
  4382 ;;		_RDM_get_checkSum
  4383 ;;		_RDM_tx_TimerBreak
  4384 ;;		_TX_RDM_Response_Set
  4385 ;; This function is called by:
  4386 ;;		_RDM_rx_loop
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _RDM_SET_CC
  4392  03BF                     _RDM_SET_CC:	
  4393  03BF                     l4263:	
  4394                           ;incstack = 0
  4395                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4396                           
  4397                           
  4398                           ;RDM_Read.c: 67: switch (RX_RDM_Data.PID){
  4399  03BF  2BD3               	goto	l4277
  4400  03C0                     l1046:	
  4401                           ;RDM_Read.c: 68: case 0x00F0:
  4402                           
  4403                           
  4404                           ;RDM_Read.c: 69: PD_Manu=&PD[101-2];
  4405  03C0  3021               	movlw	33
  4406  03C1  0021               	movlb	1	; select bank1
  4407  03C2  00C1               	movwf	(_PD_Manu+1)^(0+128)
  4408  03C3  30EE               	movlw	238
  4409  03C4  00C0               	movwf	_PD_Manu^(0+128)
  4410                           
  4411                           ;RDM_Read.c: 70: DMX_Address=*PD_Manu;
  4412  03C5  0086               	movwf	6
  4413  03C6  0841               	movf	(_PD_Manu+1)^(0+128),w
  4414  03C7  0087               	movwf	7
  4415  03C8  3F40               	moviw [0]fsr1
  4416  03C9  00EC               	movwf	_DMX_Address^(0+128)
  4417  03CA  3F41               	moviw [1]fsr1
  4418  03CB  00ED               	movwf	(_DMX_Address+1)^(0+128)
  4419                           
  4420                           ;RDM_Read.c: 71: TX_RDM_Response_Set();
  4421  03CC  2339  3180         	fcall	_TX_RDM_Response_Set
  4422                           
  4423                           ;RDM_Read.c: 72: TX_RDM_Data.ML=24;
  4424  03CE  3018               	movlw	24
  4425  03CF  00EB               	movwf	(_TX_RDM_Data^(0+128)+23)	;volatile
  4426                           
  4427                           ;RDM_Read.c: 73: TX_RDM_Data.PORT=0x00;
  4428  03D0  01DD               	clrf	(_TX_RDM_Data^(0+128)+9)	;volatile
  4429                           
  4430                           ;RDM_Read.c: 74: TX_RDM_Data.PDL=0;
  4431  03D1  01D6               	clrf	(_TX_RDM_Data^(0+128)+2)	;volatile
  4432                           
  4433                           ;RDM_Read.c: 75: break;
  4434  03D2  2BDE               	goto	l4279
  4435  03D3                     l4277:	
  4436                           
  4437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4438                           ; Switch size 1, requested type "space"
  4439                           ; Number of cases is 1, Range of values is 0 to 0
  4440                           ; switch strategies available:
  4441                           ; Name         Instructions Cycles
  4442                           ; simple_byte            4     3 (average)
  4443                           ; direct_byte            8     6 (fixed)
  4444                           ; jumptable            260     6 (fixed)
  4445                           ;	Chosen strategy is simple_byte
  4446  03D3  0022               	movlb	2	; select bank2
  4447  03D4  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  4448  03D5  3A00               	xorlw	0	; case 0
  4449  03D6  1903               	skipnz
  4450  03D7  2BD9               	goto	l4963
  4451  03D8  2BDE               	goto	l4279
  4452  03D9                     l4963:	
  4453                           
  4454                           ; Switch size 1, requested type "space"
  4455                           ; Number of cases is 1, Range of values is 240 to 240
  4456                           ; switch strategies available:
  4457                           ; Name         Instructions Cycles
  4458                           ; simple_byte            4     3 (average)
  4459                           ; direct_byte           11     9 (fixed)
  4460                           ; jumptable            263     9 (fixed)
  4461                           ;	Chosen strategy is simple_byte
  4462  03D9  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4463  03DA  3AF0               	xorlw	240	; case 240
  4464  03DB  1903               	skipnz
  4465  03DC  2BC0               	goto	l1046
  4466  03DD  2BDE               	goto	l4279
  4467  03DE                     l4279:	
  4468                           
  4469                           ;RDM_Read.c: 77: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  4470  03DE  30D4               	movlw	low _TX_RDM_Data
  4471  03DF  23FB  3180         	fcall	PL44	;call to abstracted procedure
  4472  03E1  00F4               	movwf	??_RDM_SET_CC
  4473  03E2                     u3000:	
  4474  03E2  0016               	moviw fsr1++
  4475  03E3  001A               	movwi fsr0++
  4476  03E4  0BF4               	decfsz	??_RDM_SET_CC,f
  4477  03E5  2BE2               	goto	u3000
  4478  03E6  3028               	movlw	40
  4479  03E7  0020               	movlb	0	; select bank0
  4480  03E8  00B8               	movwf	RDM_get_checkSum@len
  4481  03E9  2271  3180         	fcall	_RDM_get_checkSum
  4482                           
  4483                           ;RDM_Read.c: 78: TxState = TX_START;
  4484                           
  4485                           ;RDM_Read.c: 79: TXREG = 0xCC;
  4486  03EB  23EE  3180         	fcall	PL28	;call to abstracted procedure
  4487                           
  4488                           ;RDM_Read.c: 80: RDM_tx_TimerBreak();
  4489  03ED  2B60               	ljmp	l2797
  4490  03EE                     __end_of_RDM_SET_CC:	
  4491  03EE                     PL28:	
  4492  03EE  0821               	movf	?_RDM_get_checkSum+1,w
  4493  03EF  0021               	movlb	1	; select bank1
  4494  03F0  00D5               	movwf	(_TX_RDM_Data+1)^(0+128)	;volatile
  4495  03F1  0020               	movlb	0	; select bank0
  4496  03F2  0820               	movf	?_RDM_get_checkSum,w
  4497  03F3  0021               	movlb	1	; select bank1
  4498  03F4  00D4               	movwf	_TX_RDM_Data^(0+128)	;volatile
  4499  03F5  3001               	movlw	1
  4500  03F6  00CF               	movwf	_TxState^(0+128)	;volatile
  4501  03F7  30CC               	movlw	204
  4502  03F8  0023               	movlb	3	; select bank3
  4503  03F9  009A               	movwf	26	;volatile
  4504  03FA  0008               	return
  4505  03FB                     __end_ofPL28:	
  4506  03FB                     PL44:	
  4507  03FB  0086               	movwf	6
  4508  03FC  3000               	movlw	high _TX_RDM_Data
  4509  03FD  0087               	movwf	7
  4510  03FE  3020               	movlw	low RDM_get_checkSum@Data
  4511  03FF  0084               	movwf	4
  4512  0400  3000               	movlw	high RDM_get_checkSum@Data
  4513  0401  0085               	movwf	5
  4514  0402  3418               	retlw	24
  4515  0403                     __end_ofPL44:	
  4516                           
  4517                           	psect	bssCOMMON
  4518  0076                     __pbssCOMMON:	
  4519  0076                     _DMX_Flags:	
  4520  0076                     	ds	2
  4521  0078                     _PDCount:	
  4522  0078                     	ds	1
  4523  0079                     _rxdata:	
  4524  0079                     	ds	1
  4525                           
  4526                           	psect	bssBANK1
  4527  00A0                     __pbssBANK1:	
  4528  00A0                     _DMX_CurrentBright:	
  4529  00A0                     	ds	12
  4530  00AC                     _Timer:	
  4531  00AC                     	ds	7
  4532  00B3                     _DMXSign:	
  4533  00B3                     	ds	4
  4534  00B7                     _DMX_difference:	
  4535  00B7                     	ds	3
  4536  00BA                     _TX_PD_Flag:	
  4537  00BA                     	ds	2
  4538  00BC                     _PD_Flag:	
  4539  00BC                     	ds	2
  4540  00BE                     _PD_ID:	
  4541  00BE                     	ds	2
  4542  00C0                     _PD_Manu:	
  4543  00C0                     	ds	2
  4544  00C2                     _TxByte:	
  4545  00C2                     	ds	2
  4546  00C4                     _TxCount:	
  4547  00C4                     	ds	2
  4548  00C6                     _RxTimer:	
  4549  00C6                     	ds	2
  4550  00C8                     _RxAddrCount:	
  4551  00C8                     	ds	2
  4552  00CA                     _ADC_Flags:	
  4553  00CA                     	ds	1
  4554  00CB                     _ADC_Data:	
  4555  00CB                     	ds	1
  4556  00CC                     _TimerState:	
  4557  00CC                     	ds	1
  4558  00CD                     _PackCount:	
  4559  00CD                     	ds	1
  4560  00CE                     _TX_PDCount:	
  4561  00CE                     	ds	1
  4562  00CF                     _TxState:	
  4563  00CF                     	ds	1
  4564  00D0                     _DMXStepConst:	
  4565  00D0                     	ds	1
  4566  00D1                     _DMXPeriodConst:	
  4567  00D1                     	ds	1
  4568  00D2                     _RxState:	
  4569  00D2                     	ds	1
  4570  00D3                     _RxDataPtr:	
  4571  00D3                     	ds	1
  4572  00D4                     _TX_RDM_Data:	
  4573  00D4                     	ds	24
  4574                           
  4575                           	psect	dataBANK1
  4576  00EE                     __pdataBANK1:	
  4577  00EE                     _DMXPeriod:	
  4578  00EE                     	ds	1
  4579                           
  4580                           	psect	bssBANK2
  4581  0120                     __pbssBANK2:	
  4582  0120                     _RX_RDM_Data:	
  4583  0120                     	ds	24
  4584  0138                     _DMX_TargetBright:	
  4585  0138                     	ds	12
  4586  0144                     _PWMDCLptr:	
  4587  0144                     	ds	8
  4588  014C                     _CurrentPWM:	
  4589  014C                     	ds	8
  4590  0154                     _checkSum:	
  4591  0154                     	ds	2
  4592  0156                     _DataPtr:	
  4593  0156                     	ds	2
  4594  0158                     _i:	
  4595  0158                     	ds	2
  4596  015A                     _RxData:	
  4597  015A                     	ds	4
  4598                           
  4599                           	psect	dataBANK2
  4600  015E                     __pdataBANK2:	
  4601  015E                     _DMX_Repeat:	
  4602  015E                     	ds	8
  4603  0166                     _DMX_sumRepeat:	
  4604  0166                     	ds	4
  4605                           
  4606                           	psect	bssBANK3
  4607  01A0                     __pbssBANK3:	
  4608  01A0                     _DMX_SpaceBright:	
  4609  01A0                     	ds	12
  4610  01AC                     _PWMLDCONptr:	
  4611  01AC                     	ds	8
  4612  01B4                     _PWMDCHptr:	
  4613  01B4                     	ds	8
  4614  01BC                     _preRxData:	
  4615  01BC                     	ds	4
  4616  01C0                     _DISCOVERY_RDM_Data:	
  4617  01C0                     	ds	24
  4618                           
  4619                           	psect	clrtext
  4620  07AA                     clear_ram0:	
  4621                           ;	Called with FSR0 containing the base address, and
  4622                           ;	btemp/btemp+1 has the size to clear
  4623                           
  4624  07AA  0064               	clrwdt	;clear the watchdog before getting into this loop
  4625  07AB                     clrloop0:	
  4626  07AB  3001               	movlw	1
  4627  07AC  0180               	clrf	0	;clear RAM location pointed to by FSR
  4628  07AD  3101               	addfsr 0,1
  4629  07AE  02FE               	subwf	126,f
  4630  07AF  3000               	movlw	0
  4631  07B0  3BFF               	subwfb	127,f
  4632  07B1  087F               	movf	127,w
  4633  07B2  047E               	iorwf	126,w
  4634  07B3  1903               	btfsc	3,2
  4635  07B4  3400               	retlw	0	;all done for this memory range, return
  4636  07B5  2FAB               	goto	clrloop0	;have we reached the end yet?
  4637                           
  4638                           	psect	cstackBANK3
  4639  01D8                     __pcstackBANK3:	
  4640  01D8                     ??_DMX_loop:	
  4641                           
  4642                           ; 1 bytes @ 0x0
  4643  01D8                     	ds	8
  4644                           
  4645                           	psect	cstackCOMMON
  4646  0070                     __pcstackCOMMON:	
  4647  0070                     ?_DMX_init:	
  4648  0070                     ?_DMX_loop:	
  4649                           ; 1 bytes @ 0x0
  4650                           
  4651  0070                     ??_ADC_interrupt:	
  4652                           ; 1 bytes @ 0x0
  4653                           
  4654  0070                     ??_DMX_interrput:	
  4655                           ; 1 bytes @ 0x0
  4656                           
  4657  0070                     ??_timer1_interrupt:	
  4658                           ; 1 bytes @ 0x0
  4659                           
  4660  0070                     ??_RDM_tx_interrupt:	
  4661                           ; 1 bytes @ 0x0
  4662                           
  4663  0070                     ?_RDM_discovery_CC:	
  4664                           ; 1 bytes @ 0x0
  4665                           
  4666  0070                     ?_RDM_GET_CC:	
  4667                           ; 1 bytes @ 0x0
  4668                           
  4669  0070                     ?_RDM_SET_CC:	
  4670                           ; 1 bytes @ 0x0
  4671                           
  4672  0070                     ?_TX_RDM_Response_Set:	
  4673                           ; 1 bytes @ 0x0
  4674                           
  4675  0070                     ?_main:	
  4676                           ; 1 bytes @ 0x0
  4677                           
  4678  0070                     ?_isr:	
  4679                           ; 1 bytes @ 0x0
  4680                           
  4681  0070                     ?_RDM_tx_TimerBreak:	
  4682                           ; 1 bytes @ 0x0
  4683                           
  4684  0070                     ?_ADC_init:	
  4685                           ; 1 bytes @ 0x0
  4686                           
  4687  0070                     ?_timer1_init:	
  4688                           ; 2 bytes @ 0x0
  4689                           
  4690  0070                     ?_RDM_init:	
  4691                           ; 2 bytes @ 0x0
  4692                           
  4693  0070                     ?_ADC_loop:	
  4694                           ; 2 bytes @ 0x0
  4695                           
  4696  0070                     ?_RDM_rx_loop:	
  4697                           ; 2 bytes @ 0x0
  4698                           
  4699  0070                     ?_ADC_interrupt:	
  4700                           ; 2 bytes @ 0x0
  4701                           
  4702  0070                     ?_DMX_interrput:	
  4703                           ; 2 bytes @ 0x0
  4704                           
  4705  0070                     ?_timer1_interrupt:	
  4706                           ; 2 bytes @ 0x0
  4707                           
  4708  0070                     ?_RDM_tx_interrupt:	
  4709                           ; 2 bytes @ 0x0
  4710                           
  4711                           
  4712                           ; 2 bytes @ 0x0
  4713  0070                     	ds	2
  4714  0072                     DMX_interrput@RxDat:	
  4715                           
  4716                           ; 1 bytes @ 0x2
  4717  0072                     	ds	2
  4718  0074                     ??_ADC_init:	
  4719  0074                     ??_timer1_init:	
  4720                           ; 1 bytes @ 0x4
  4721                           
  4722  0074                     ??_ADC_loop:	
  4723                           ; 1 bytes @ 0x4
  4724                           
  4725  0074                     ??_RDM_get_checkSum:	
  4726                           ; 1 bytes @ 0x4
  4727                           
  4728  0074                     ??_RDM_GET_CC:	
  4729                           ; 1 bytes @ 0x4
  4730                           
  4731  0074                     ??_RDM_SET_CC:	
  4732                           ; 1 bytes @ 0x4
  4733                           
  4734  0074                     ??_TX_RDM_Response_Set:	
  4735                           ; 1 bytes @ 0x4
  4736                           
  4737  0074                     ??_isr:	
  4738                           ; 1 bytes @ 0x4
  4739                           
  4740  0074                     ??_RDM_tx_TimerBreak:	
  4741                           ; 1 bytes @ 0x4
  4742                           
  4743  0074                     ?___bmul:	
  4744                           ; 1 bytes @ 0x4
  4745                           
  4746  0074                     ??___awtoft:	
  4747                           ; 1 bytes @ 0x4
  4748                           
  4749  0074                     ??___lbtoft:	
  4750                           ; 1 bytes @ 0x4
  4751                           
  4752  0074                     ??___lwtoft:	
  4753                           ; 1 bytes @ 0x4
  4754                           
  4755  0074                     DMX_init@Addr:	
  4756                           ; 1 bytes @ 0x4
  4757                           
  4758  0074                     ___bmul@multiplicand:	
  4759                           ; 1 bytes @ 0x4
  4760                           
  4761  0074                     ___awtoft@sign:	
  4762                           ; 1 bytes @ 0x4
  4763                           
  4764  0074                     ___lbtoft@c:	
  4765                           ; 1 bytes @ 0x4
  4766                           
  4767                           
  4768                           ; 1 bytes @ 0x4
  4769  0074                     	ds	1
  4770  0075                     ??___bmul:	
  4771  0075                     ??___ftge:	
  4772                           ; 1 bytes @ 0x5
  4773                           
  4774  0075                     ??___ftsub:	
  4775                           ; 1 bytes @ 0x5
  4776                           
  4777                           
  4778                           ; 1 bytes @ 0x5
  4779  0075                     	ds	1
  4780  0076                     ??_main:	
  4781                           
  4782                           	psect	cstackBANK0
  4783  0020                     __pcstackBANK0:	
  4784                           ; 1 bytes @ 0x6
  4785                           
  4786  0020                     ??_DMX_init:	
  4787  0020                     ?_RDM_get_checkSum:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  0020                     ?___ftpack:	
  4791                           ; 2 bytes @ 0x0
  4792                           
  4793  0020                     ___bmul@product:	
  4794                           ; 3 bytes @ 0x0
  4795                           
  4796  0020                     ___ftpack@arg:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0020                     RDM_get_checkSum@Data:	
  4800                           ; 3 bytes @ 0x0
  4801                           
  4802                           
  4803                           ; 24 bytes @ 0x0
  4804  0020                     	ds	1
  4805  0021                     ___bmul@multiplier:	
  4806                           
  4807                           ; 1 bytes @ 0x1
  4808  0021                     	ds	1
  4809  0022                     ??_RDM_init:	
  4810                           
  4811                           ; 1 bytes @ 0x2
  4812  0022                     	ds	1
  4813  0023                     ___ftpack@exp:	
  4814                           
  4815                           ; 1 bytes @ 0x3
  4816  0023                     	ds	1
  4817  0024                     ___ftpack@sign:	
  4818                           
  4819                           ; 1 bytes @ 0x4
  4820  0024                     	ds	1
  4821  0025                     ??___ftpack:	
  4822                           
  4823                           ; 1 bytes @ 0x5
  4824  0025                     	ds	3
  4825  0028                     ?___awtoft:	
  4826  0028                     ?___lbtoft:	
  4827                           ; 3 bytes @ 0x8
  4828                           
  4829  0028                     ?___lwtoft:	
  4830                           ; 3 bytes @ 0x8
  4831                           
  4832  0028                     ___awtoft@c:	
  4833                           ; 3 bytes @ 0x8
  4834                           
  4835  0028                     ___lwtoft@c:	
  4836                           ; 2 bytes @ 0x8
  4837                           
  4838                           
  4839                           ; 2 bytes @ 0x8
  4840  0028                     	ds	4
  4841  002C                     ?___ftge:	
  4842  002C                     ?___ftmul:	
  4843                           ; 1 bit 
  4844                           
  4845  002C                     ___ftge@ff1:	
  4846                           ; 3 bytes @ 0xC
  4847                           
  4848  002C                     ___ftmul@f1:	
  4849                           ; 3 bytes @ 0xC
  4850                           
  4851                           
  4852                           ; 3 bytes @ 0xC
  4853  002C                     	ds	3
  4854  002F                     ___ftge@ff2:	
  4855  002F                     ___ftmul@f2:	
  4856                           ; 3 bytes @ 0xF
  4857                           
  4858                           
  4859                           ; 3 bytes @ 0xF
  4860  002F                     	ds	3
  4861  0032                     ??___ftmul:	
  4862                           
  4863                           ; 1 bytes @ 0x12
  4864  0032                     	ds	3
  4865  0035                     ___ftmul@exp:	
  4866                           
  4867                           ; 1 bytes @ 0x15
  4868  0035                     	ds	1
  4869  0036                     ___ftmul@f3_as_product:	
  4870                           
  4871                           ; 3 bytes @ 0x16
  4872  0036                     	ds	2
  4873  0038                     RDM_get_checkSum@len:	
  4874                           
  4875                           ; 1 bytes @ 0x18
  4876  0038                     	ds	1
  4877  0039                     ??_RDM_discovery_CC:	
  4878  0039                     ___ftmul@cntr:	
  4879                           ; 1 bytes @ 0x19
  4880                           
  4881                           
  4882                           ; 1 bytes @ 0x19
  4883  0039                     	ds	1
  4884  003A                     ___ftmul@sign:	
  4885                           
  4886                           ; 1 bytes @ 0x1A
  4887  003A                     	ds	1
  4888  003B                     ?___ftdiv:	
  4889  003B                     ___ftdiv@f2:	
  4890                           ; 3 bytes @ 0x1B
  4891                           
  4892                           
  4893                           ; 3 bytes @ 0x1B
  4894  003B                     	ds	2
  4895  003D                     ??_RDM_rx_loop:	
  4896                           
  4897                           ; 1 bytes @ 0x1D
  4898  003D                     	ds	1
  4899  003E                     ___ftdiv@f1:	
  4900                           
  4901                           ; 3 bytes @ 0x1E
  4902  003E                     	ds	3
  4903  0041                     ??___ftdiv:	
  4904                           
  4905                           ; 1 bytes @ 0x21
  4906  0041                     	ds	3
  4907  0044                     ___ftdiv@cntr:	
  4908                           
  4909                           ; 1 bytes @ 0x24
  4910  0044                     	ds	1
  4911  0045                     ___ftdiv@f3:	
  4912                           
  4913                           ; 3 bytes @ 0x25
  4914  0045                     	ds	3
  4915  0048                     ___ftdiv@exp:	
  4916                           
  4917                           ; 1 bytes @ 0x28
  4918  0048                     	ds	1
  4919  0049                     ___ftdiv@sign:	
  4920                           
  4921                           ; 1 bytes @ 0x29
  4922  0049                     	ds	1
  4923  004A                     ?___ftadd:	
  4924  004A                     ___ftadd@f1:	
  4925                           ; 3 bytes @ 0x2A
  4926                           
  4927                           
  4928                           ; 3 bytes @ 0x2A
  4929  004A                     	ds	3
  4930  004D                     ___ftadd@f2:	
  4931                           
  4932                           ; 3 bytes @ 0x2D
  4933  004D                     	ds	3
  4934  0050                     ??___ftadd:	
  4935                           
  4936                           ; 1 bytes @ 0x30
  4937  0050                     	ds	3
  4938  0053                     ___ftadd@sign:	
  4939                           
  4940                           ; 1 bytes @ 0x33
  4941  0053                     	ds	1
  4942  0054                     ___ftadd@exp2:	
  4943                           
  4944                           ; 1 bytes @ 0x34
  4945  0054                     	ds	1
  4946  0055                     ___ftadd@exp1:	
  4947                           
  4948                           ; 1 bytes @ 0x35
  4949  0055                     	ds	1
  4950  0056                     ?___ftsub:	
  4951  0056                     ___ftsub@f2:	
  4952                           ; 3 bytes @ 0x36
  4953                           
  4954                           
  4955                           ; 3 bytes @ 0x36
  4956  0056                     	ds	3
  4957  0059                     ___ftsub@f1:	
  4958                           
  4959                           ; 3 bytes @ 0x39
  4960  0059                     	ds	3
  4961  005C                     ?___fttol:	
  4962  005C                     ___fttol@f1:	
  4963                           ; 4 bytes @ 0x3C
  4964                           
  4965                           
  4966                           ; 3 bytes @ 0x3C
  4967  005C                     	ds	4
  4968  0060                     ??___fttol:	
  4969                           
  4970                           ; 1 bytes @ 0x40
  4971  0060                     	ds	3
  4972  0063                     ___fttol@sign1:	
  4973                           
  4974                           ; 1 bytes @ 0x43
  4975  0063                     	ds	1
  4976  0064                     ___fttol@lval:	
  4977                           
  4978                           ; 4 bytes @ 0x44
  4979  0064                     	ds	4
  4980  0068                     ___fttol@exp1:	
  4981                           
  4982                           ; 1 bytes @ 0x48
  4983  0068                     	ds	1
  4984  0069                     _DMX_loop$1388:	
  4985                           
  4986                           ; 3 bytes @ 0x49
  4987  0069                     	ds	3
  4988  006C                     DMX_loop@Addr:	
  4989                           
  4990                           ; 1 bytes @ 0x4C
  4991  006C                     	ds	1
  4992                           
  4993                           	psect	text3
  4994  06E7                     __ptext3:	
  4995 ;; *************** function _RDM_discovery_CC *****************
  4996 ;; Defined at:
  4997 ;;		line 83 in file "RDM_Read.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 1C/2
  5008 ;;		On exit  : 1C/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5011 ;;      Params:         0       0       0       0       0       0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0
  5013 ;;      Temps:          0       4       0       0       0       0       0       0
  5014 ;;      Totals:         0       4       0       0       0       0       0       0
  5015 ;;Total ram usage:        4 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    3
  5018 ;; This function calls:
  5019 ;;		_RDM_get_checkSum
  5020 ;;		_RDM_tx_TimerBreak
  5021 ;;		_TX_RDM_Response_Set
  5022 ;; This function is called by:
  5023 ;;		_RDM_rx_loop
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _RDM_discovery_CC
  5029  06E7                     _RDM_discovery_CC:	
  5030  06E7                     l4113:	
  5031                           ;incstack = 0
  5032                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5033                           
  5034                           
  5035                           ;RDM_Read.c: 84: switch (RX_RDM_Data.PID) {
  5036  06E7  2F5E               	goto	l4173
  5037  06E8                     l1052:	
  5038                           ;RDM_Read.c: 85: case 0x0001:
  5039                           
  5040                           
  5041                           ;RDM_Read.c: 86: if (!DMX_Flags.RDMmute) {
  5042  06E8  1977               	btfsc	_DMX_Flags+1,2	;volatile
  5043  06E9  0008               	return
  5044                           
  5045                           ;RDM_Read.c: 87: DMX_Flags.RDMcheck = 1;
  5046  06EA  0877               	movf	_DMX_Flags+1,w	;volatile
  5047  06EB  39FC               	andlw	-4
  5048  06EC  3801               	iorlw	1
  5049  06ED  00F7               	movwf	_DMX_Flags+1	;volatile
  5050                           
  5051                           ;RDM_Read.c: 88: PD_Manu = &PD[101-2];
  5052  06EE  3021               	movlw	33
  5053  06EF  0021               	movlb	1	; select bank1
  5054  06F0  00C1               	movwf	(_PD_Manu+1)^(0+128)
  5055  06F1  30EE               	movlw	238
  5056  06F2  00C0               	movwf	_PD_Manu^(0+128)
  5057                           
  5058                           ;RDM_Read.c: 89: PD_ID = &PD[101-6];
  5059  06F3  3021               	movlw	33
  5060  06F4  00BF               	movwf	(_PD_ID+1)^(0+128)
  5061  06F5  30EA               	movlw	234
  5062                           
  5063                           ;RDM_Read.c: 90: if (*PD_Manu <= 0x4D52) {
  5064  06F6  2794  3186         	fcall	PL50	;call to abstracted procedure
  5065  06F8  3053               	movlw	83
  5066  06F9  1903               	skipnz
  5067  06FA  0239               	subwf	??_RDM_discovery_CC,w
  5068  06FB  1803               	skipnc
  5069  06FC  2F0A               	goto	l4131
  5070                           
  5071                           ;RDM_Read.c: 91: DMX_Flags.RDMcheck++;
  5072                           
  5073                           ;RDM_Read.c: 92: if (*PD_Manu == 0x4D52 && *PD_ID > 0x17C31092) {
  5074  06FD  2770  3186         	fcall	PL26	;call to abstracted procedure
  5075  06FF  1D03               	btfss	3,2
  5076  0700  2F0A               	goto	l4131
  5077  0701  27A1  3186         	fcall	PL66	;call to abstracted procedure
  5078  0703  3093               	movlw	147
  5079  0704  2786  3186         	fcall	PL40	;call to abstracted procedure
  5080  0706  1C03               	btfss	3,0
  5081  0707  2F0A               	goto	l4131
  5082                           
  5083                           ;RDM_Read.c: 93: DMX_Flags.RDMcheck = 0;
  5084  0708  30FC               	movlw	-4
  5085  0709  05F7               	andwf	_DMX_Flags+1,f	;volatile
  5086  070A                     l4131:	
  5087                           
  5088                           ;RDM_Read.c: 94: }
  5089                           ;RDM_Read.c: 95: }
  5090                           ;RDM_Read.c: 96: PD_Manu = &PD[101-8];
  5091  070A  3021               	movlw	33
  5092  070B  0021               	movlb	1	; select bank1
  5093  070C  00C1               	movwf	(_PD_Manu+1)^(0+128)
  5094  070D  30E8               	movlw	232
  5095  070E  00C0               	movwf	_PD_Manu^(0+128)
  5096                           
  5097                           ;RDM_Read.c: 97: PD_ID = &PD[101-12];
  5098  070F  3021               	movlw	33
  5099  0710  00BF               	movwf	(_PD_ID+1)^(0+128)
  5100  0711  30E4               	movlw	228
  5101                           
  5102                           ;RDM_Read.c: 98: if (*PD_Manu >= 0x4D52) {
  5103  0712  2794  3186         	fcall	PL50	;call to abstracted procedure
  5104  0714  3052               	movlw	82
  5105  0715  1903               	skipnz
  5106  0716  0239               	subwf	??_RDM_discovery_CC,w
  5107  0717  1C03               	skipc
  5108  0718  2F26               	goto	l1056
  5109                           
  5110                           ;RDM_Read.c: 99: DMX_Flags.RDMcheck++;
  5111                           
  5112                           ;RDM_Read.c: 100: if (*PD_Manu == 0x4D52 && *PD_ID < 0x17C31092) {
  5113  0719  2770  3186         	fcall	PL26	;call to abstracted procedure
  5114  071B  1D03               	btfss	3,2
  5115  071C  2F26               	goto	l1056
  5116  071D  27A1  3186         	fcall	PL66	;call to abstracted procedure
  5117  071F  3092               	movlw	146
  5118  0720  2786  3186         	fcall	PL40	;call to abstracted procedure
  5119  0722  1803               	btfsc	3,0
  5120  0723  2F26               	goto	l1056
  5121                           
  5122                           ;RDM_Read.c: 101: DMX_Flags.RDMcheck = 0;
  5123  0724  30FC               	movlw	-4
  5124  0725  05F7               	andwf	_DMX_Flags+1,f	;volatile
  5125  0726                     l1056:	
  5126                           
  5127                           ;RDM_Read.c: 102: }
  5128                           ;RDM_Read.c: 103: }
  5129                           ;RDM_Read.c: 104: if (DMX_Flags.RDMcheck == 3) {
  5130  0726  0877               	movf	_DMX_Flags+1,w	;volatile
  5131  0727  3903               	andlw	3
  5132  0728  3A03               	xorlw	3
  5133  0729  1D03               	skipz
  5134  072A  0008               	return
  5135                           
  5136                           ;RDM_Read.c: 105: TxState = TX_SART_DISCOVERY;
  5137  072B  3002               	movlw	2
  5138  072C  0021               	movlb	1	; select bank1
  5139  072D  00CF               	movwf	_TxState^(0+128)	;volatile
  5140                           
  5141                           ;RDM_Read.c: 106: TXREG = 0xCC;
  5142  072E  30CC               	movlw	204
  5143  072F  0023               	movlb	3	; select bank3
  5144  0730  009A               	movwf	26	;volatile
  5145                           
  5146                           ;RDM_Read.c: 107: TxByte= &DISCOVERY_RDM_Data.value[23];
  5147  0731  30D7               	movlw	low (_DISCOVERY_RDM_Data+23)
  5148  0732  0021               	movlb	1	; select bank1
  5149  0733  00C2               	movwf	_TxByte^(0+128)
  5150  0734  3001               	movlw	high (_DISCOVERY_RDM_Data+23)
  5151  0735  00C3               	movwf	(_TxByte+1)^(0+128)
  5152                           
  5153                           ;RDM_Read.c: 108: TxCount = 0;
  5154  0736  01C4               	clrf	_TxCount^(0+128)
  5155  0737  01C5               	clrf	(_TxCount+1)^(0+128)
  5156  0738                     l4151:	
  5157                           
  5158                           ;RDM_Read.c: 109: RDM_tx_TimerBreak();
  5159  0738  3183  2B60         	ljmp	l2797
  5160  073A                     l1060:	
  5161                           ;RDM_Read.c: 114: case 0x0002:
  5162                           
  5163                           
  5164                           ;RDM_Read.c: 115: DMX_Flags.RDMmute = 1;
  5165  073A  1577               	bsf	_DMX_Flags+1,2	;volatile
  5166                           
  5167                           ;RDM_Read.c: 116: TX_RDM_Response_Set();
  5168  073B  3183  2339  3186   	fcall	_TX_RDM_Response_Set
  5169                           
  5170                           ;RDM_Read.c: 117: TX_RDM_Data.ML=26;
  5171                           
  5172                           ;RDM_Read.c: 118: TX_RDM_Data.PORT=0x00;
  5173                           
  5174                           ;RDM_Read.c: 119: TX_RDM_Data.PDL=2;
  5175  073E  3183  23AE  3186   	fcall	PL112	;call to abstracted procedure
  5176                           
  5177                           ;RDM_Read.c: 120: PD[40-1] = PD[40-2] = 0;
  5178  0741  30B1               	movlw	177
  5179  0742  0086               	movwf	6
  5180  0743  3021               	movlw	33
  5181  0744  0087               	movwf	7
  5182  0745  30B2               	movlw	178
  5183  0746  0181               	clrf	1
  5184  0747  0086               	movwf	6
  5185  0748  30D4               	movlw	low _TX_RDM_Data
  5186  0749  0181               	clrf	1
  5187                           
  5188                           ;RDM_Read.c: 121: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  5189  074A  3183  23FB  3186   	fcall	PL44	;call to abstracted procedure
  5190  074D  0020               	movlb	0	; select bank0
  5191  074E  00B9               	movwf	??_RDM_discovery_CC
  5192  074F                     u2980:	
  5193  074F  0016               	moviw fsr1++
  5194  0750  001A               	movwi fsr0++
  5195  0751  0BB9               	decfsz	??_RDM_discovery_CC,f
  5196  0752  2F4F               	goto	u2980
  5197  0753  3028               	movlw	40
  5198  0754  00B8               	movwf	RDM_get_checkSum@len
  5199  0755  3182  2271  3186   	fcall	_RDM_get_checkSum
  5200                           
  5201                           ;RDM_Read.c: 122: TxState = TX_START;
  5202                           
  5203                           ;RDM_Read.c: 123: TXREG = 0xCC;
  5204  0758  3183  23EE  3186   	fcall	PL28	;call to abstracted procedure
  5205  075B  2F38               	goto	l4151
  5206  075C                     l1061:	
  5207                           ;RDM_Read.c: 126: case 0x0003:
  5208                           
  5209                           
  5210                           ;RDM_Read.c: 127: DMX_Flags.RDMmute = 0;
  5211  075C  1177               	bcf	_DMX_Flags+1,2	;volatile
  5212                           
  5213                           ;RDM_Read.c: 128: break;
  5214  075D  0008               	return
  5215  075E                     l4173:	
  5216                           
  5217                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5218                           ; Switch size 1, requested type "space"
  5219                           ; Number of cases is 1, Range of values is 0 to 0
  5220                           ; switch strategies available:
  5221                           ; Name         Instructions Cycles
  5222                           ; simple_byte            4     3 (average)
  5223                           ; direct_byte            8     6 (fixed)
  5224                           ; jumptable            260     6 (fixed)
  5225                           ;	Chosen strategy is simple_byte
  5226  075E  0022               	movlb	2	; select bank2
  5227  075F  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  5228  0760  3A00               	xorlw	0	; case 0
  5229  0761  1903               	skipnz
  5230  0762  2F64               	goto	l4961
  5231  0763  2F6F               	goto	l1063
  5232  0764                     l4961:	
  5233                           
  5234                           ; Switch size 1, requested type "space"
  5235                           ; Number of cases is 3, Range of values is 1 to 3
  5236                           ; switch strategies available:
  5237                           ; Name         Instructions Cycles
  5238                           ; simple_byte           10     6 (average)
  5239                           ; direct_byte           15     9 (fixed)
  5240                           ; jumptable            263     9 (fixed)
  5241                           ;	Chosen strategy is simple_byte
  5242  0764  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  5243  0765  3A01               	xorlw	1	; case 1
  5244  0766  1903               	skipnz
  5245  0767  2EE8               	goto	l1052
  5246  0768  3A03               	xorlw	3	; case 2
  5247  0769  1903               	skipnz
  5248  076A  2F3A               	goto	l1060
  5249  076B  3A01               	xorlw	1	; case 3
  5250  076C  1903               	skipnz
  5251  076D  2F5C               	goto	l1061
  5252  076E  2F6F               	goto	l1063
  5253  076F                     l1063:	
  5254  076F  0008               	return
  5255  0770                     __end_of_RDM_discovery_CC:	
  5256  0770                     PL26:	
  5257  0770  0877               	movf	_DMX_Flags+1,w	;volatile
  5258  0771  3903               	andlw	3
  5259  0772  00B9               	movwf	??_RDM_discovery_CC
  5260  0773  0AB9               	incf	??_RDM_discovery_CC,f
  5261  0774  0877               	movf	_DMX_Flags+1,w	;volatile
  5262  0775  0639               	xorwf	??_RDM_discovery_CC,w
  5263  0776  39FC               	andlw	-4
  5264  0777  0639               	xorwf	??_RDM_discovery_CC,w
  5265  0778  00F7               	movwf	_DMX_Flags+1	;volatile
  5266  0779  0021               	movlb	1	; select bank1
  5267  077A  0840               	movf	_PD_Manu^(0+128),w
  5268  077B  0086               	movwf	6
  5269  077C  0841               	movf	(_PD_Manu+1)^(0+128),w
  5270  077D  0087               	movwf	7
  5271  077E  0016               	moviw fsr1++
  5272  077F  3A52               	xorlw	82
  5273  0780  0020               	movlb	0	; select bank0
  5274  0781  00B9               	movwf	??_RDM_discovery_CC
  5275  0782  0016               	moviw fsr1++
  5276  0783  3A4D               	xorlw	77
  5277  0784  04B9               	iorwf	??_RDM_discovery_CC,f
  5278  0785  0008               	return
  5279  0786                     __end_ofPL26:	
  5280  0786                     PL40:	
  5281  0786  0239               	subwf	??_RDM_discovery_CC,w
  5282  0787  3F41               	moviw [1]fsr1
  5283  0788  00B9               	movwf	??_RDM_discovery_CC
  5284  0789  3010               	movlw	16
  5285  078A  3B39               	subwfb	??_RDM_discovery_CC,w
  5286  078B  3F42               	moviw [2]fsr1
  5287  078C  00B9               	movwf	??_RDM_discovery_CC
  5288  078D  30C3               	movlw	195
  5289  078E  3B39               	subwfb	??_RDM_discovery_CC,w
  5290  078F  3F43               	moviw [3]fsr1
  5291  0790  00B9               	movwf	??_RDM_discovery_CC
  5292  0791  3017               	movlw	23
  5293  0792  3B39               	subwfb	??_RDM_discovery_CC,w
  5294  0793  0008               	return
  5295  0794                     __end_ofPL40:	
  5296  0794                     PL50:	
  5297  0794  00BE               	movwf	_PD_ID^(0+128)
  5298  0795  0840               	movf	_PD_Manu^(0+128),w
  5299  0796  0086               	movwf	6
  5300  0797  0841               	movf	(_PD_Manu+1)^(0+128),w
  5301  0798  0087               	movwf	7
  5302  0799  3F40               	moviw [0]fsr1
  5303  079A  0020               	movlb	0	; select bank0
  5304  079B  00B9               	movwf	??_RDM_discovery_CC
  5305  079C  3F41               	moviw [1]fsr1
  5306  079D  00BA               	movwf	??_RDM_discovery_CC+1
  5307  079E  304D               	movlw	77
  5308  079F  023A               	subwf	??_RDM_discovery_CC+1,w
  5309  07A0  0008               	return
  5310  07A1                     __end_ofPL50:	
  5311  07A1                     PL66:	
  5312  07A1  0021               	movlb	1	; select bank1
  5313  07A2  083E               	movf	_PD_ID^(0+128),w
  5314  07A3  0086               	movwf	6
  5315  07A4  083F               	movf	(_PD_ID+1)^(0+128),w
  5316  07A5  0087               	movwf	7
  5317  07A6  3F40               	moviw [0]fsr1
  5318  07A7  0020               	movlb	0	; select bank0
  5319  07A8  00B9               	movwf	??_RDM_discovery_CC
  5320  07A9  0008               	return
  5321  07AA                     __end_ofPL66:	
  5322                           
  5323                           	psect	text11
  5324  0966                     __ptext11:	
  5325 ;; *************** function _DMX_loop *****************
  5326 ;; Defined at:
  5327 ;;		line 61 in file "DMX.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  Addr            1   76[BANK0 ] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 1C/0
  5338 ;;		On exit  : 1E/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5341 ;;      Params:         0       0       0       0       0       0       0       0
  5342 ;;      Locals:         0       4       0       0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       8       0       0       0
  5344 ;;      Totals:         0       4       0       0       8       0       0       0
  5345 ;;Total ram usage:       12 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    5
  5348 ;; This function calls:
  5349 ;;		___awtoft
  5350 ;;		___ftadd
  5351 ;;		___ftdiv
  5352 ;;		___ftge
  5353 ;;		___ftmul
  5354 ;;		___ftsub
  5355 ;;		___fttol
  5356 ;;		___lbtoft
  5357 ;;		___lwtoft
  5358 ;; This function is called by:
  5359 ;;		_main
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _DMX_loop
  5365  0966                     _DMX_loop:	
  5366                           
  5367                           ;DMX.c: 62: char Addr = 0;
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5371  0966  0020               	movlb	0	; select bank0
  5372  0967  01EC               	clrf	DMX_loop@Addr
  5373                           
  5374                           ;DMX.c: 64: if (DMX_Flags.RxNew == 1) {
  5375  0968  1C76               	btfss	_DMX_Flags,0	;volatile
  5376  0969  2AD2               	goto	l344
  5377                           
  5378                           ;DMX.c: 65: DMX_Flags.RxNew = 0;
  5379  096A  1076               	bcf	_DMX_Flags,0	;volatile
  5380                           
  5381                           ;DMX.c: 67: DMXStepConst=4;
  5382  096B  3004               	movlw	4
  5383  096C  0021               	movlb	1	; select bank1
  5384  096D  00D0               	movwf	_DMXStepConst^(0+128)
  5385  096E                     l4675:	
  5386                           ;DMX.c: 68: while (Addr < 4) {
  5387                           
  5388  096E  3004               	movlw	4
  5389  096F  0020               	movlb	0	; select bank0
  5390  0970  026C               	subwf	DMX_loop@Addr,w
  5391  0971  1803               	btfsc	3,0
  5392  0972  2AD2               	goto	l344
  5393                           
  5394                           ;DMX.c: 69: rxdata=RxData[Addr];
  5395  0973  2789  3189         	fcall	PL116	;call to abstracted procedure
  5396  0975  0801               	movf	1,w
  5397  0976  00F9               	movwf	_rxdata
  5398                           
  5399                           ;DMX.c: 70: if (DMX_TargetBright[Addr] < rxdata) {
  5400  0977  086C               	movf	DMX_loop@Addr,w
  5401  0978  076C               	addwf	DMX_loop@Addr,w
  5402  0979  076C               	addwf	DMX_loop@Addr,w
  5403  097A  3E38               	addlw	(low (_DMX_TargetBright| (0+256)))& (0+255)
  5404  097B  0086               	movwf	6
  5405  097C  3F40               	moviw [0]fsr1
  5406  097D  00AC               	movwf	___ftge@ff1
  5407  097E  3F41               	moviw [1]fsr1
  5408  097F  00AD               	movwf	___ftge@ff1+1
  5409  0980  3F42               	moviw [2]fsr1
  5410  0981  00AE               	movwf	___ftge@ff1+2
  5411  0982  0879               	movf	_rxdata,w
  5412  0983  23E0  3189         	fcall	___lbtoft
  5413  0985  0828               	movf	?___lbtoft,w
  5414  0986  00AF               	movwf	___ftge@ff2
  5415  0987  0829               	movf	?___lbtoft+1,w
  5416  0988  00B0               	movwf	___ftge@ff2+1
  5417  0989  082A               	movf	?___lbtoft+2,w
  5418  098A  00B1               	movwf	___ftge@ff2+2
  5419  098B  2569  3189         	fcall	___ftge
  5420  098D  1803               	btfsc	3,0
  5421  098E  29F6               	goto	l4635
  5422                           
  5423                           ;DMX.c: 71: DMX_difference=rxdata-DMX_TargetBright[Addr];
  5424  098F  2632  3189         	fcall	PL6	;call to abstracted procedure
  5425  0991  26DA  3189         	fcall	PL36	;call to abstracted procedure
  5426  0993  0879               	movf	_rxdata,w
  5427  0994  23E0  3189         	fcall	___lbtoft
  5428  0996  0828               	movf	?___lbtoft,w
  5429  0997  00D9               	movwf	___ftsub@f1
  5430  0998  0829               	movf	?___lbtoft+1,w
  5431  0999  00DA               	movwf	___ftsub@f1+1
  5432  099A  082A               	movf	?___lbtoft+2,w
  5433  099B  00DB               	movwf	___ftsub@f1+2
  5434  099C  23EF  3189         	fcall	___ftsub
  5435                           
  5436                           ;DMX.c: 72: if(DMX_difference<0.05){
  5437  099E  2671  3189         	fcall	PL16	;call to abstracted procedure
  5438  09A0  2569  3189         	fcall	___ftge
  5439                           
  5440                           ;DMX.c: 73: DMXSign[Addr].SIGN = 0b00;
  5441  09A2  086C               	movf	DMX_loop@Addr,w
  5442  09A3  1803               	btfsc	3,0
  5443  09A4  29B3               	goto	L3
  5444  09A5  2734  3189         	fcall	PL74	;call to abstracted procedure
  5445                           
  5446                           ;DMX.c: 74: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  5447  09A7  0879               	movf	_rxdata,w
  5448  09A8  23E0  3189         	fcall	___lbtoft
  5449  09AA  2632  3189         	fcall	PL6	;call to abstracted procedure
  5450  09AC  2641  3189         	fcall	PL10	;call to abstracted procedure
  5451  09AE  263A  3189         	fcall	PL8	;call to abstracted procedure
  5452  09B0  2641  3189         	fcall	PL10	;call to abstracted procedure
  5453                           
  5454                           ;DMX.c: 76: }else{
  5455  09B2  2A7F               	goto	l4655
  5456  09B3                     L3:	
  5457                           ;DMX.c: 77: DMXSign[Addr].SIGN = 0b01;
  5458                           
  5459  09B3  277D  3189         	fcall	PL110	;call to abstracted procedure
  5460  09B5  3801               	iorlw	1
  5461  09B6  0081               	movwf	1
  5462                           
  5463                           ;DMX.c: 78: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  5464  09B7  2632  3189         	fcall	PL6	;call to abstracted procedure
  5465  09B9  2696  3189         	fcall	PL20	;call to abstracted procedure
  5466  09BB  263A  3189         	fcall	PL8	;call to abstracted procedure
  5467                           
  5468                           ;DMX.c: 79: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  5469  09BD  26D1  3189         	fcall	PL34	;call to abstracted procedure
  5470  09BF  2632  3189         	fcall	PL6	;call to abstracted procedure
  5471  09C1  272D  3189         	fcall	PL70	;call to abstracted procedure
  5472  09C3  086C               	movf	DMX_loop@Addr,w
  5473  09C4  3E66               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  5474  09C5  0086               	movwf	6
  5475  09C6  0801               	movf	1,w
  5476  09C7  23E0  3189         	fcall	___lbtoft
  5477  09C9  26AC  3189         	fcall	PL24	;call to abstracted procedure
  5478  09CB  2595  3189         	fcall	___ftmul
  5479  09CD  274E  3189         	fcall	PL84	;call to abstracted procedure
  5480  09CF  250D  3189         	fcall	___ftdiv
  5481  09D1  083B               	movf	?___ftdiv,w
  5482  09D2  00CD               	movwf	___ftadd@f2
  5483  09D3  083C               	movf	?___ftdiv+1,w
  5484  09D4  00CE               	movwf	___ftadd@f2+1
  5485  09D5  083D               	movf	?___ftdiv+2,w
  5486  09D6  00CF               	movwf	___ftadd@f2+2
  5487  09D7  245F  3189         	fcall	___ftadd
  5488  09D9  2632  3189         	fcall	PL6	;call to abstracted procedure
  5489  09DB  2771  3189         	fcall	PL100	;call to abstracted procedure
  5490                           
  5491                           ;DMX.c: 80: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>2);
  5492  09DD  2703  3189         	fcall	PL52	;call to abstracted procedure
  5493  09DF  27A7  3189         	fcall	___awtoft
  5494  09E1  270F  3189         	fcall	PL58	;call to abstracted procedure
  5495  09E3  263A  3189         	fcall	PL8	;call to abstracted procedure
  5496  09E5  26DA  3189         	fcall	PL36	;call to abstracted procedure
  5497  09E7  2632  3189         	fcall	PL6	;call to abstracted procedure
  5498  09E9  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5499  09EB  23EF  3189         	fcall	___ftsub
  5500  09ED  2763  3189         	fcall	PL90	;call to abstracted procedure
  5501  09EF  250D  3189         	fcall	___ftdiv
  5502  09F1  26E1  3189         	fcall	PL38	;call to abstracted procedure
  5503  09F3  2755  3189         	fcall	PL86	;call to abstracted procedure
  5504  09F5  2A7F               	goto	l4655
  5505  09F6                     l4635:	
  5506  09F6  0879               	movf	_rxdata,w
  5507  09F7  23E0  3189         	fcall	___lbtoft
  5508  09F9  0828               	movf	?___lbtoft,w
  5509  09FA  00AC               	movwf	___ftge@ff1
  5510  09FB  0829               	movf	?___lbtoft+1,w
  5511  09FC  00AD               	movwf	___ftge@ff1+1
  5512  09FD  082A               	movf	?___lbtoft+2,w
  5513  09FE  00AE               	movwf	___ftge@ff1+2
  5514  09FF  2632  3189         	fcall	PL6	;call to abstracted procedure
  5515  0A01  3F40               	moviw [0]fsr1
  5516  0A02  00AF               	movwf	___ftge@ff2
  5517  0A03  3F41               	moviw [1]fsr1
  5518  0A04  00B0               	movwf	___ftge@ff2+1
  5519  0A05  3F42               	moviw [2]fsr1
  5520  0A06  00B1               	movwf	___ftge@ff2+2
  5521  0A07  2569  3189         	fcall	___ftge
  5522                           
  5523                           ;DMX.c: 83: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  5524  0A09  0879               	movf	_rxdata,w
  5525  0A0A  1803               	btfsc	3,0
  5526  0A0B  2A70               	goto	L4
  5527  0A0C  23E0  3189         	fcall	___lbtoft
  5528  0A0E  2716  3189         	fcall	PL60	;call to abstracted procedure
  5529  0A10  2632  3189         	fcall	PL6	;call to abstracted procedure
  5530  0A12  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5531  0A14  23EF  3189         	fcall	___ftsub
  5532                           
  5533                           ;DMX.c: 84: if(DMX_difference<0.05){
  5534  0A16  2671  3189         	fcall	PL16	;call to abstracted procedure
  5535  0A18  2569  3189         	fcall	___ftge
  5536                           
  5537                           ;DMX.c: 85: DMXSign[Addr].SIGN = 0b00;
  5538  0A1A  086C               	movf	DMX_loop@Addr,w
  5539  0A1B  1803               	btfsc	3,0
  5540  0A1C  2A2B               	goto	L5
  5541  0A1D  2734  3189         	fcall	PL74	;call to abstracted procedure
  5542                           
  5543                           ;DMX.c: 86: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  5544  0A1F  0879               	movf	_rxdata,w
  5545  0A20  23E0  3189         	fcall	___lbtoft
  5546  0A22  2632  3189         	fcall	PL6	;call to abstracted procedure
  5547  0A24  2641  3189         	fcall	PL10	;call to abstracted procedure
  5548  0A26  263A  3189         	fcall	PL8	;call to abstracted procedure
  5549  0A28  2641  3189         	fcall	PL10	;call to abstracted procedure
  5550                           
  5551                           ;DMX.c: 88: }
  5552  0A2A  2A7F               	goto	l4655
  5553  0A2B                     L5:	
  5554                           ;DMX.c: 89: else{
  5555                           ;DMX.c: 90: DMXSign[Addr].SIGN = 0b10;
  5556                           
  5557  0A2B  277D  3189         	fcall	PL110	;call to abstracted procedure
  5558  0A2D  3802               	iorlw	2
  5559  0A2E  0081               	movwf	1
  5560                           
  5561                           ;DMX.c: 91: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  5562  0A2F  2632  3189         	fcall	PL6	;call to abstracted procedure
  5563  0A31  2696  3189         	fcall	PL20	;call to abstracted procedure
  5564  0A33  263A  3189         	fcall	PL8	;call to abstracted procedure
  5565                           
  5566                           ;DMX.c: 92: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  5567  0A35  26D1  3189         	fcall	PL34	;call to abstracted procedure
  5568  0A37  086C               	movf	DMX_loop@Addr,w
  5569  0A38  3E66               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  5570  0A39  0086               	movwf	6
  5571  0A3A  3001               	movlw	1	; select bank2/3
  5572  0A3B  0087               	movwf	7
  5573  0A3C  0801               	movf	1,w
  5574  0A3D  23E0  3189         	fcall	___lbtoft
  5575  0A3F  26AC  3189         	fcall	PL24	;call to abstracted procedure
  5576  0A41  2595  3189         	fcall	___ftmul
  5577  0A43  274E  3189         	fcall	PL84	;call to abstracted procedure
  5578  0A45  250D  3189         	fcall	___ftdiv
  5579  0A47  083B               	movf	?___ftdiv,w
  5580  0A48  00D6               	movwf	___ftsub@f2
  5581  0A49  083C               	movf	?___ftdiv+1,w
  5582  0A4A  00D7               	movwf	___ftsub@f2+1
  5583  0A4B  083D               	movf	?___ftdiv+2,w
  5584  0A4C  00D8               	movwf	___ftsub@f2+2
  5585  0A4D  2632  3189         	fcall	PL6	;call to abstracted procedure
  5586  0A4F  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5587  0A51  23EF  3189         	fcall	___ftsub
  5588  0A53  2632  3189         	fcall	PL6	;call to abstracted procedure
  5589  0A55  2741  3189         	fcall	PL80	;call to abstracted procedure
  5590                           
  5591                           ;DMX.c: 93: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMXP
      +                          eriod>>2);
  5592  0A57  2703  3189         	fcall	PL52	;call to abstracted procedure
  5593  0A59  27A7  3189         	fcall	___awtoft
  5594  0A5B  270F  3189         	fcall	PL58	;call to abstracted procedure
  5595  0A5D  2632  3189         	fcall	PL6	;call to abstracted procedure
  5596  0A5F  26DA  3189         	fcall	PL36	;call to abstracted procedure
  5597  0A61  263A  3189         	fcall	PL8	;call to abstracted procedure
  5598  0A63  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5599  0A65  23EF  3189         	fcall	___ftsub
  5600  0A67  2763  3189         	fcall	PL90	;call to abstracted procedure
  5601  0A69  250D  3189         	fcall	___ftdiv
  5602  0A6B  26E1  3189         	fcall	PL38	;call to abstracted procedure
  5603  0A6D  2755  3189         	fcall	PL86	;call to abstracted procedure
  5604  0A6F  2A7F               	goto	l4655
  5605  0A70                     L4:	
  5606                           ;DMX.c: 97: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  5607                           
  5608  0A70  23E0  3189         	fcall	___lbtoft
  5609  0A72  2632  3189         	fcall	PL6	;call to abstracted procedure
  5610  0A74  2641  3189         	fcall	PL10	;call to abstracted procedure
  5611  0A76  263A  3189         	fcall	PL8	;call to abstracted procedure
  5612  0A78  2641  3189         	fcall	PL10	;call to abstracted procedure
  5613                           
  5614                           ;DMX.c: 98: DMXSign[Addr].SIGN = 0b00;
  5615  0A7A  086C               	movf	DMX_loop@Addr,w
  5616  0A7B  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  5617  0A7C  0086               	movwf	6
  5618  0A7D  30FC               	movlw	-4
  5619  0A7E  0581               	andwf	1,f
  5620  0A7F                     l4655:	
  5621                           
  5622                           ;DMX.c: 99: }
  5623                           ;DMX.c: 101: if(preRxData[Addr]==RxData[Addr]){
  5624  0A7F  2789  3189         	fcall	PL116	;call to abstracted procedure
  5625  0A81  086C               	movf	DMX_loop@Addr,w
  5626  0A82  3EBC               	addlw	(low (_preRxData| (0+256)))& (0+255)
  5627  0A83  0084               	movwf	4
  5628  0A84  3001               	movlw	1	; select bank3/4
  5629  0A85  0085               	movwf	5
  5630  0A86  0800               	movf	0,w
  5631  0A87  0601               	xorwf	1,w
  5632  0A88  1D03               	skipz
  5633  0A89  2AA2               	goto	l4667
  5634                           
  5635                           ;DMX.c: 102: if( !DMXSign[Addr].InfiniteLoop){
  5636  0A8A  086C               	movf	DMX_loop@Addr,w
  5637  0A8B  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  5638  0A8C  0086               	movwf	6
  5639  0A8D  0187               	clrf	7
  5640  0A8E  1901               	btfsc	1,2
  5641  0A8F  2AC7               	goto	l358
  5642                           
  5643                           ;DMX.c: 103: DMX_Repeat[Addr][0]++;
  5644  0A90  356C               	lslf	DMX_loop@Addr,w
  5645  0A91  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5646  0A92  0086               	movwf	6
  5647  0A93  3001               	movlw	1	; select bank2/3
  5648  0A94  0087               	movwf	7
  5649  0A95  0A81               	incf	1,f
  5650                           
  5651                           ;DMX.c: 104: if(DMX_Repeat[Addr][0]==0x10){
  5652  0A96  356C               	lslf	DMX_loop@Addr,w
  5653  0A97  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5654  0A98  0086               	movwf	6
  5655  0A99  3010               	movlw	16
  5656  0A9A  0601               	xorwf	1,w
  5657  0A9B  1D03               	btfss	3,2
  5658  0A9C  2AC7               	goto	l358
  5659                           
  5660                           ;DMX.c: 105: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  5661  0A9D  2726  3189         	fcall	PL68	;call to abstracted procedure
  5662                           
  5663                           ;DMX.c: 106: DMX_sumRepeat[Addr]=2;
  5664                           
  5665                           ;DMX.c: 107: DMXSign[Addr].InfiniteLoop=1;
  5666  0A9F  26E9  3189         	fcall	PL46	;call to abstracted procedure
  5667  0AA1  2AC7               	goto	l358
  5668  0AA2                     l4667:	
  5669                           
  5670                           ;DMX.c: 111: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  5671  0AA2  356C               	lslf	DMX_loop@Addr,w
  5672  0AA3  3E5F               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5673  0AA4  0086               	movwf	6
  5674  0AA5  3001               	movlw	1	; select bank2/3
  5675  0AA6  0087               	movwf	7
  5676  0AA7  356C               	lslf	DMX_loop@Addr,w
  5677  0AA8  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5678  0AA9  2783  3189         	fcall	PL114	;call to abstracted procedure
  5679                           
  5680                           ;DMX.c: 112: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  5681  0AAB  086C               	movf	DMX_loop@Addr,w
  5682  0AAC  3E66               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  5683  0AAD  0086               	movwf	6
  5684  0AAE  356C               	lslf	DMX_loop@Addr,w
  5685  0AAF  3E5F               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5686  0AB0  0084               	movwf	4
  5687  0AB1  0800               	movf	0,w
  5688  0AB2  0023               	movlb	3	; select bank3
  5689  0AB3  00D8               	movwf	??_DMX_loop^(0+384)
  5690  0AB4  0020               	movlb	0	; select bank0
  5691  0AB5  356C               	lslf	DMX_loop@Addr,w
  5692  0AB6  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5693  0AB7  0084               	movwf	4
  5694  0AB8  0800               	movf	0,w
  5695  0AB9  0023               	movlb	3	; select bank3
  5696  0ABA  0758               	addwf	??_DMX_loop^(0+384),w
  5697  0ABB  0081               	movwf	1
  5698                           
  5699                           ;DMX.c: 113: DMX_Repeat[Addr][0]=1;
  5700  0ABC  0020               	movlb	0	; select bank0
  5701  0ABD  356C               	lslf	DMX_loop@Addr,w
  5702  0ABE  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5703  0ABF  0086               	movwf	6
  5704  0AC0  0181               	clrf	1
  5705  0AC1  0A81               	incf	1,f
  5706                           
  5707                           ;DMX.c: 114: DMXSign[Addr].InfiniteLoop=0;
  5708  0AC2  086C               	movf	DMX_loop@Addr,w
  5709  0AC3  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  5710  0AC4  0086               	movwf	6
  5711  0AC5  0187               	clrf	7
  5712  0AC6  1101               	bcf	1,2
  5713  0AC7                     l358:	
  5714                           
  5715                           ;DMX.c: 115: }
  5716                           ;DMX.c: 116: preRxData[Addr]=RxData[Addr];
  5717  0AC7  086C               	movf	DMX_loop@Addr,w
  5718  0AC8  3EBC               	addlw	(low (_preRxData| (0+256)))& (0+255)
  5719  0AC9  0086               	movwf	6
  5720  0ACA  3001               	movlw	1	; select bank3/4
  5721  0ACB  0087               	movwf	7
  5722  0ACC  086C               	movf	DMX_loop@Addr,w
  5723  0ACD  3E5A               	addlw	(low (_RxData| (0+256)))& (0+255)
  5724  0ACE  2783  3189         	fcall	PL114	;call to abstracted procedure
  5725                           
  5726                           ;DMX.c: 117: Addr++;
  5727  0AD0  0AEC               	incf	DMX_loop@Addr,f
  5728  0AD1  296E               	goto	l4675
  5729  0AD2                     l344:	
  5730                           
  5731                           ;DMX.c: 118: }
  5732                           ;DMX.c: 119: }
  5733                           ;DMX.c: 121: if (Timer.MS) {
  5734  0AD2  0021               	movlb	1	; select bank1
  5735  0AD3  1C2C               	btfss	_Timer^(0+128),0	;volatile
  5736  0AD4  0008               	return
  5737                           
  5738                           ;DMX.c: 122: DMXPeriodConst++;
  5739  0AD5  0AD1               	incf	_DMXPeriodConst^(0+128),f	;volatile
  5740                           
  5741                           ;DMX.c: 123: Timer.MS = 0;
  5742  0AD6  102C               	bcf	_Timer^(0+128),0	;volatile
  5743                           
  5744                           ;DMX.c: 124: Addr = 0;
  5745  0AD7  0020               	movlb	0	; select bank0
  5746  0AD8  01EC               	clrf	DMX_loop@Addr
  5747                           
  5748                           ;DMX.c: 125: if(DMXStepConst==0){
  5749  0AD9  0021               	movlb	1	; select bank1
  5750  0ADA  0850               	movf	_DMXStepConst^(0+128),w
  5751  0ADB  1D03               	btfss	3,2
  5752  0ADC  2BAC               	goto	l4729
  5753                           
  5754                           ;DMX.c: 126: DMXStepConst=3;
  5755  0ADD  3003               	movlw	3
  5756  0ADE  00D0               	movwf	_DMXStepConst^(0+128)
  5757                           
  5758                           ;DMX.c: 127: while (Addr < 4) {
  5759  0ADF  2B97               	goto	l4727
  5760  0AE0                     l4687:	
  5761                           
  5762                           ;DMX.c: 130: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  5763  0AE0  26E1  3189         	fcall	PL38	;call to abstracted procedure
  5764  0AE2  272D  3189         	fcall	PL70	;call to abstracted procedure
  5765  0AE4  263A  3189         	fcall	PL8	;call to abstracted procedure
  5766  0AE6  3F40               	moviw [0]fsr1
  5767  0AE7  00CD               	movwf	___ftadd@f2
  5768  0AE8  3F41               	moviw [1]fsr1
  5769  0AE9  00CE               	movwf	___ftadd@f2+1
  5770  0AEA  3F42               	moviw [2]fsr1
  5771  0AEB  00CF               	movwf	___ftadd@f2+2
  5772  0AEC  245F  3189         	fcall	___ftadd
  5773  0AEE  263A  3189         	fcall	PL8	;call to abstracted procedure
  5774  0AF0  2771  3189         	fcall	PL100	;call to abstracted procedure
  5775                           
  5776                           ;DMX.c: 131: rxdata=DMX_CurrentBright[Addr];
  5777  0AF2  269F  3189         	fcall	PL22	;call to abstracted procedure
  5778  0AF4  240A  3189         	fcall	___fttol
  5779  0AF6  085C               	movf	?___fttol,w
  5780  0AF7  00F9               	movwf	_rxdata
  5781                           
  5782                           ;DMX.c: 132: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5783  0AF8  2668  3189         	fcall	PL14	;call to abstracted procedure
  5784  0AFA  2648  3189         	fcall	PL12	;call to abstracted procedure
  5785  0AFC  2797  3189         	fcall	___lwtoft
  5786  0AFE  26C3  3189         	fcall	PL30	;call to abstracted procedure
  5787  0B00  263A  3189         	fcall	PL8	;call to abstracted procedure
  5788  0B02  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5789  0B04  0879               	movf	_rxdata,w
  5790  0B05  23E0  3189         	fcall	___lbtoft
  5791  0B07  2716  3189         	fcall	PL60	;call to abstracted procedure
  5792  0B09  23EF  3189         	fcall	___ftsub
  5793  0B0B  276A  3189         	fcall	PL98	;call to abstracted procedure
  5794  0B0D  2595  3189         	fcall	___ftmul
  5795                           
  5796                           ;DMX.c: 132: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5797  0B0F  268E  3189         	fcall	PL18	;call to abstracted procedure
  5798  0B11  2668  3189         	fcall	PL14	;call to abstracted procedure
  5799  0B13  271D  3189         	fcall	PL62	;call to abstracted procedure
  5800  0B15  2797  3189         	fcall	___lwtoft
  5801  0B17  26F6  3189         	fcall	PL48	;call to abstracted procedure
  5802  0B19  245F  3189         	fcall	___ftadd
  5803  0B1B  2747  3189         	fcall	PL82	;call to abstracted procedure
  5804  0B1D  240A  3189         	fcall	___fttol
  5805  0B1F  356C               	lslf	DMX_loop@Addr,w
  5806                           
  5807                           ;DMX.c: 136: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  5808  0B20  2626  3189         	fcall	PL4	;call to abstracted procedure
  5809  0B22  2B8C               	goto	L9
  5810  0B23                     l4699:	
  5811                           ;DMX.c: 139: break;
  5812                           
  5813                           ;DMX.c: 137: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  5814                           
  5815                           ;DMX.c: 138: *PWMLDCONptr[Addr] = 0b10000000;
  5816                           
  5817                           
  5818                           ;DMX.c: 141: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  5819  0B23  26E1  3189         	fcall	PL38	;call to abstracted procedure
  5820  0B25  26DA  3189         	fcall	PL36	;call to abstracted procedure
  5821  0B27  263A  3189         	fcall	PL8	;call to abstracted procedure
  5822  0B29  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5823  0B2B  23EF  3189         	fcall	___ftsub
  5824  0B2D  263A  3189         	fcall	PL8	;call to abstracted procedure
  5825  0B2F  2741  3189         	fcall	PL80	;call to abstracted procedure
  5826                           
  5827                           ;DMX.c: 142: rxdata=DMX_CurrentBright[Addr];
  5828  0B31  269F  3189         	fcall	PL22	;call to abstracted procedure
  5829  0B33  240A  3189         	fcall	___fttol
  5830  0B35  085C               	movf	?___fttol,w
  5831  0B36  00F9               	movwf	_rxdata
  5832                           
  5833                           ;DMX.c: 143: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5834  0B37  2668  3189         	fcall	PL14	;call to abstracted procedure
  5835  0B39  2648  3189         	fcall	PL12	;call to abstracted procedure
  5836  0B3B  2797  3189         	fcall	___lwtoft
  5837  0B3D  26C3  3189         	fcall	PL30	;call to abstracted procedure
  5838  0B3F  263A  3189         	fcall	PL8	;call to abstracted procedure
  5839  0B41  26CA  3189         	fcall	PL32	;call to abstracted procedure
  5840  0B43  0879               	movf	_rxdata,w
  5841  0B44  23E0  3189         	fcall	___lbtoft
  5842  0B46  2716  3189         	fcall	PL60	;call to abstracted procedure
  5843  0B48  23EF  3189         	fcall	___ftsub
  5844  0B4A  276A  3189         	fcall	PL98	;call to abstracted procedure
  5845  0B4C  2595  3189         	fcall	___ftmul
  5846                           
  5847                           ;DMX.c: 143: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5848  0B4E  268E  3189         	fcall	PL18	;call to abstracted procedure
  5849  0B50  2668  3189         	fcall	PL14	;call to abstracted procedure
  5850  0B52  271D  3189         	fcall	PL62	;call to abstracted procedure
  5851  0B54  2797  3189         	fcall	___lwtoft
  5852  0B56  26F6  3189         	fcall	PL48	;call to abstracted procedure
  5853  0B58  245F  3189         	fcall	___ftadd
  5854  0B5A  2747  3189         	fcall	PL82	;call to abstracted procedure
  5855  0B5C  240A  3189         	fcall	___fttol
  5856  0B5E  356C               	lslf	DMX_loop@Addr,w
  5857                           
  5858                           ;DMX.c: 147: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  5859  0B5F  2626  3189         	fcall	PL4	;call to abstracted procedure
  5860  0B61  2B8C               	goto	L9
  5861  0B62                     l4711:	
  5862                           ;DMX.c: 150: break;
  5863                           
  5864                           ;DMX.c: 148: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  5865                           
  5866                           ;DMX.c: 149: *PWMLDCONptr[Addr] = 0b10000000;
  5867                           
  5868                           
  5869                           ;DMX.c: 152: rxdata=DMX_CurrentBright[Addr];
  5870  0B62  263A  3189         	fcall	PL8	;call to abstracted procedure
  5871  0B64  3F40               	moviw [0]fsr1
  5872  0B65  00DC               	movwf	___fttol@f1
  5873  0B66  3F41               	moviw [1]fsr1
  5874  0B67  00DD               	movwf	___fttol@f1+1
  5875  0B68  3F42               	moviw [2]fsr1
  5876  0B69  00DE               	movwf	___fttol@f1+2
  5877  0B6A  240A  3189         	fcall	___fttol
  5878  0B6C  085C               	movf	?___fttol,w
  5879  0B6D  00F9               	movwf	_rxdata
  5880                           
  5881                           ;DMX.c: 153: CurrentPWM.DC[Addr]=PWM.DC[rxdata];
  5882  0B6E  0023               	movlb	3	; select bank3
  5883  0B6F  00D8               	movwf	??_DMX_loop^(0+384)
  5884  0B70  3003               	movlw	low (_PWM| (0+32768))
  5885  0B71  01D9               	clrf	(??_DMX_loop^(0+384)+1)
  5886  0B72  35D8               	lslf	??_DMX_loop^(0+384),f
  5887  0B73  0DD9               	rlf	(??_DMX_loop^(0+384)+1),f
  5888  0B74  00DA               	movwf	(??_DMX_loop+2)^(0+384)
  5889  0B75  3084               	movlw	high (_PWM| (0+32768))
  5890  0B76  00DB               	movwf	((??_DMX_loop+2)^(0+384)+1)
  5891  0B77  0858               	movf	??_DMX_loop^(0+384),w
  5892  0B78  075A               	addwf	(??_DMX_loop+2)^(0+384),w
  5893  0B79  0086               	movwf	6
  5894  0B7A  0859               	movf	(??_DMX_loop+1)^(0+384),w
  5895  0B7B  3D5B               	addwfc	(??_DMX_loop+3)^(0+384),w
  5896  0B7C  0087               	movwf	7
  5897  0B7D  0020               	movlb	0	; select bank0
  5898  0B7E  356C               	lslf	DMX_loop@Addr,w
  5899  0B7F  3E4C               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  5900  0B80  0084               	movwf	4
  5901  0B81  3001               	movlw	1	; select bank2/3
  5902  0B82  0085               	movwf	5
  5903  0B83  3F40               	moviw [0]fsr1
  5904  0B84  3F80               	movwi [0]fsr0
  5905  0B85  3F41               	moviw [1]fsr1
  5906  0B86  3F81               	movwi [1]fsr0
  5907                           
  5908                           ;DMX.c: 154: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  5909  0B87  356C               	lslf	DMX_loop@Addr,w
  5910  0B88  3E4D               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  5911  0B89  0086               	movwf	6
  5912  0B8A  3001               	movlw	1	; select bank2/3
  5913  0B8B  0087               	movwf	7
  5914  0B8C                     L9:	
  5915                           
  5916                           ;DMX.c: 155: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  5917                           
  5918                           ;DMX.c: 156: *PWMLDCONptr[Addr] = 0b10000000;
  5919  0B8C  25F1  3189         	fcall	PL2	;call to abstracted procedure
  5920  0B8E  00D9               	movwf	(??_DMX_loop^(0+384)+1)
  5921  0B8F  0858               	movf	??_DMX_loop^(0+384),w
  5922  0B90  0086               	movwf	6
  5923  0B91  0859               	movf	(??_DMX_loop+1)^(0+384),w
  5924  0B92  0087               	movwf	7
  5925  0B93  3080               	movlw	128
  5926  0B94  0081               	movwf	1
  5927  0B95                     l4725:	
  5928                           ;DMX.c: 158: break;
  5929                           
  5930                           
  5931                           ;DMX.c: 160: Addr++;
  5932  0B95  0020               	movlb	0	; select bank0
  5933  0B96  0AEC               	incf	DMX_loop@Addr,f
  5934  0B97                     l4727:	
  5935  0B97  3004               	movlw	4
  5936  0B98  0020               	movlb	0	; select bank0
  5937  0B99  026C               	subwf	DMX_loop@Addr,w
  5938  0B9A  1803               	btfsc	3,0
  5939  0B9B  2BAD               	goto	l4731
  5940  0B9C  086C               	movf	DMX_loop@Addr,w
  5941  0B9D  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  5942  0B9E  0086               	movwf	6
  5943  0B9F  0187               	clrf	7
  5944  0BA0  0801               	movf	1,w
  5945  0BA1  3903               	andlw	3
  5946                           
  5947                           ; Switch size 1, requested type "space"
  5948                           ; Number of cases is 3, Range of values is 0 to 2
  5949                           ; switch strategies available:
  5950                           ; Name         Instructions Cycles
  5951                           ; simple_byte           10     6 (average)
  5952                           ; direct_byte           12     6 (fixed)
  5953                           ; jumptable            260     6 (fixed)
  5954                           ;	Chosen strategy is simple_byte
  5955  0BA2  1903               	skipnz
  5956  0BA3  2B62               	goto	l4711
  5957  0BA4  3A01               	xorlw	1	; case 1
  5958  0BA5  1903               	skipnz
  5959  0BA6  2AE0               	goto	l4687
  5960  0BA7  3A03               	xorlw	3	; case 2
  5961  0BA8  1903               	skipnz
  5962  0BA9  2B23               	goto	l4699
  5963  0BAA  2B95               	goto	l4725
  5964  0BAB  2B95               	goto	l4725
  5965  0BAC                     l4729:	
  5966                           
  5967                           ;DMX.c: 163: DMXStepConst--;
  5968  0BAC  03D0               	decf	_DMXStepConst^(0+128),f
  5969  0BAD                     l4731:	
  5970                           
  5971                           ;DMX.c: 164: }
  5972                           ;DMX.c: 167: if (DMX_Flags.RxTimeout == 1) {
  5973  0BAD  1D76               	btfss	_DMX_Flags,2	;volatile
  5974  0BAE  0008               	return
  5975                           
  5976                           ;DMX.c: 168: PWM1DC = PWM2DC = PWM3DC = PWM4DC = 0;
  5977  0BAF  003B               	movlb	27	; select bank27
  5978  0BB0  01C3               	clrf	67	;volatile
  5979  0BB1  01C4               	clrf	68	;volatile
  5980  0BB2  01B3               	clrf	51	;volatile
  5981  0BB3  01B4               	clrf	52	;volatile
  5982  0BB4  01A3               	clrf	35	;volatile
  5983  0BB5  01A4               	clrf	36	;volatile
  5984  0BB6  0193               	clrf	19	;volatile
  5985  0BB7  0194               	clrf	20	;volatile
  5986                           
  5987                           ;DMX.c: 169: PWM1LDCON = PWM2LDCON = PWM3LDCON = PWM4LDCON = 0b10000000;
  5988  0BB8  3183  23B4  3189   	fcall	PL118	;call to abstracted procedure
  5989                           
  5990                           ;DMX.c: 170: Addr = 0;
  5991  0BBB  0020               	movlb	0	; select bank0
  5992  0BBC  01EC               	clrf	DMX_loop@Addr
  5993  0BBD                     l4749:	
  5994                           ;DMX.c: 171: while (Addr < 4) {
  5995                           
  5996  0BBD  3004               	movlw	4
  5997  0BBE  026C               	subwf	DMX_loop@Addr,w
  5998  0BBF  1803               	btfsc	3,0
  5999  0BC0  0008               	return
  6000                           
  6001                           ;DMX.c: 172: DMXSign[Addr].SIGN = 0b00;
  6002  0BC1  086C               	movf	DMX_loop@Addr,w
  6003  0BC2  2734  3189         	fcall	PL74	;call to abstracted procedure
  6004                           
  6005                           ;DMX.c: 173: CurrentPWM.DC[Addr]=0;
  6006  0BC4  356C               	lslf	DMX_loop@Addr,w
  6007  0BC5  3E4C               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  6008  0BC6  0086               	movwf	6
  6009  0BC7  3001               	movlw	1	; select bank2/3
  6010  0BC8  0087               	movwf	7
  6011  0BC9  3000               	movlw	0
  6012  0BCA  3FC0               	movwi [0]fsr1
  6013  0BCB  3FC1               	movwi [1]fsr1
  6014                           
  6015                           ;DMX.c: 174: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  6016  0BCC  0023               	movlb	3	; select bank3
  6017  0BCD  01D8               	clrf	??_DMX_loop^(0+384)
  6018  0BCE  01D9               	clrf	(??_DMX_loop^(0+384)+1)
  6019  0BCF  01DA               	clrf	(??_DMX_loop^(0+384)+2)
  6020  0BD0  0020               	movlb	0	; select bank0
  6021  0BD1  263A  3189         	fcall	PL8	;call to abstracted procedure
  6022  0BD3  26D1  3189         	fcall	PL34	;call to abstracted procedure
  6023  0BD5  2632  3189         	fcall	PL6	;call to abstracted procedure
  6024                           
  6025                           ;DMX.c: 175: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  6026  0BD7  26D1  3189         	fcall	PL34	;call to abstracted procedure
  6027  0BD9  2726  3189         	fcall	PL68	;call to abstracted procedure
  6028  0BDB  0085               	movwf	5
  6029                           
  6030                           ;DMX.c: 176: DMX_sumRepeat[Addr]=2;
  6031                           
  6032                           ;DMX.c: 177: DMXSign[Addr].InfiniteLoop=1;
  6033  0BDC  26E9  3189         	fcall	PL46	;call to abstracted procedure
  6034                           
  6035                           ;DMX.c: 178: Addr++;
  6036  0BDE  0AEC               	incf	DMX_loop@Addr,f
  6037  0BDF  2BBD               	goto	l4749
  6038  0BE0                     __end_of_DMX_loop:	
  6039  0BE0                     __ptext13:	
  6040 ;; *************** function ___lbtoft *****************
  6041 ;; Defined at:
  6042 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  c               1    wreg     unsigned char 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  c               1    4[COMMON] unsigned char 
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  3    8[BANK0 ] float 
  6049 ;; Registers used:
  6050 ;;		wreg, status,2, status,0, pclath, cstack
  6051 ;; Tracked objects:
  6052 ;;		On entry : 1F/0
  6053 ;;		On exit  : 1F/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6056 ;;      Params:         0       4       0       0       0       0       0       0
  6057 ;;      Locals:         1       0       0       0       0       0       0       0
  6058 ;;      Temps:          0       0       0       0       0       0       0       0
  6059 ;;      Totals:         1       4       0       0       0       0       0       0
  6060 ;;Total ram usage:        5 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    3
  6063 ;; This function calls:
  6064 ;;		___ftpack
  6065 ;; This function is called by:
  6066 ;;		_DMX_loop
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function ___lbtoft
  6072  0BE0                     ___lbtoft:	
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  6076                           ;___lbtoft@c stored from wreg
  6077  0BE0  00F4               	movwf	___lbtoft@c
  6078  0BE1  00A0               	movwf	___ftpack@arg
  6079  0BE2  308E               	movlw	142
  6080  0BE3  01A1               	clrf	___ftpack@arg+1
  6081  0BE4  01A2               	clrf	___ftpack@arg+2
  6082  0BE5  00A3               	movwf	___ftpack@exp
  6083  0BE6  01A4               	clrf	___ftpack@sign
  6084  0BE7  27C2               	fcall	___ftpack
  6085  0BE8  0820               	movf	?___ftpack,w
  6086  0BE9  00A8               	movwf	?___lbtoft
  6087  0BEA  0821               	movf	?___ftpack+1,w
  6088  0BEB  00A9               	movwf	?___lbtoft+1
  6089  0BEC  0822               	movf	?___ftpack+2,w
  6090  0BED  00AA               	movwf	?___lbtoft+2
  6091  0BEE  0008               	return
  6092  0BEF                     __end_of___lbtoft:	
  6093  0BEF                     __ptext15:	
  6094 ;; *************** function ___ftsub *****************
  6095 ;; Defined at:
  6096 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  f2              3   54[BANK0 ] float 
  6099 ;;  f1              3   57[BANK0 ] float 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  3   54[BANK0 ] float 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0, pclath, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 1F/0
  6108 ;;		On exit  : 1F/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6111 ;;      Params:         0       6       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0       0
  6114 ;;      Totals:         0       6       0       0       0       0       0       0
  6115 ;;Total ram usage:        6 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    4
  6118 ;; This function calls:
  6119 ;;		___ftadd
  6120 ;; This function is called by:
  6121 ;;		_DMX_loop
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           
  6126                           ;psect for function ___ftsub
  6127  0BEF                     ___ftsub:	
  6128                           
  6129                           ;incstack = 0
  6130                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6131  0BEF  0858               	movf	___ftsub@f2+2,w
  6132  0BF0  0457               	iorwf	___ftsub@f2+1,w
  6133  0BF1  0456               	iorwf	___ftsub@f2,w
  6134  0BF2  1903               	skipnz
  6135  0BF3  2BF6               	goto	l4433
  6136  0BF4  3080               	movlw	128
  6137  0BF5  06D8               	xorwf	___ftsub@f2+2,f
  6138  0BF6                     l4433:	
  6139  0BF6  0859               	movf	___ftsub@f1,w
  6140  0BF7  00CA               	movwf	___ftadd@f1
  6141  0BF8  085A               	movf	___ftsub@f1+1,w
  6142  0BF9  00CB               	movwf	___ftadd@f1+1
  6143  0BFA  085B               	movf	___ftsub@f1+2,w
  6144  0BFB  00CC               	movwf	___ftadd@f1+2
  6145  0BFC  0856               	movf	___ftsub@f2,w
  6146  0BFD  00CD               	movwf	___ftadd@f2
  6147  0BFE  0857               	movf	___ftsub@f2+1,w
  6148  0BFF  00CE               	movwf	___ftadd@f2+1
  6149  0C00  0858               	movf	___ftsub@f2+2,w
  6150  0C01  00CF               	movwf	___ftadd@f2+2
  6151  0C02  245F               	fcall	___ftadd
  6152  0C03  084A               	movf	?___ftadd,w
  6153  0C04  00D6               	movwf	?___ftsub
  6154  0C05  084B               	movf	?___ftadd+1,w
  6155  0C06  00D7               	movwf	?___ftsub+1
  6156  0C07  084C               	movf	?___ftadd+2,w
  6157  0C08  00D8               	movwf	?___ftsub+2
  6158  0C09  0008               	return
  6159  0C0A                     __end_of___ftsub:	
  6160  0C0A                     __ptext14:	
  6161 ;; *************** function ___fttol *****************
  6162 ;; Defined at:
  6163 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  f1              3   60[BANK0 ] float 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  lval            4   68[BANK0 ] unsigned long 
  6168 ;;  exp1            1   72[BANK0 ] unsigned char 
  6169 ;;  sign1           1   67[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  4   60[BANK0 ] long 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0
  6174 ;; Tracked objects:
  6175 ;;		On entry : 1F/0
  6176 ;;		On exit  : 1F/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6179 ;;      Params:         0       4       0       0       0       0       0       0
  6180 ;;      Locals:         0       6       0       0       0       0       0       0
  6181 ;;      Temps:          0       3       0       0       0       0       0       0
  6182 ;;      Totals:         0      13       0       0       0       0       0       0
  6183 ;;Total ram usage:       13 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    2
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_DMX_loop
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function ___fttol
  6195  0C0A                     ___fttol:	
  6196                           
  6197                           ;incstack = 0
  6198                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6199  0C0A  273A  3189         	fcall	PL78	;call to abstracted procedure
  6200  0C0C  1003               	clrc
  6201  0C0D  0D61               	rlf	??___fttol+1,w
  6202  0C0E  0D62               	rlf	??___fttol+2,w
  6203  0C0F  00E8               	movwf	___fttol@exp1
  6204  0C10  0868               	movf	___fttol@exp1,w
  6205  0C11  1D03               	btfss	3,2
  6206  0C12  2C18               	goto	l4441
  6207  0C13                     l4439:	
  6208  0C13  01DC               	clrf	?___fttol
  6209  0C14  01DD               	clrf	?___fttol+1
  6210  0C15  01DE               	clrf	?___fttol+2
  6211  0C16  01DF               	clrf	?___fttol+3
  6212  0C17  0008               	return
  6213  0C18                     l4441:	
  6214  0C18  273A  3189         	fcall	PL78	;call to abstracted procedure
  6215  0C1A  3017               	movlw	23
  6216  0C1B                     u3195:	
  6217  0C1B  36E2               	lsrf	??___fttol+2,f
  6218  0C1C  0CE1               	rrf	??___fttol+1,f
  6219  0C1D  0CE0               	rrf	??___fttol,f
  6220  0C1E  0B89               	decfsz	9,f
  6221  0C1F  2C1B               	goto	u3195
  6222  0C20  0860               	movf	??___fttol,w
  6223  0C21  00E3               	movwf	___fttol@sign1
  6224  0C22  17DD               	bsf	___fttol@f1+1,7
  6225  0C23  01DE               	clrf	___fttol@f1+2
  6226  0C24  085C               	movf	___fttol@f1,w
  6227  0C25  00E4               	movwf	___fttol@lval
  6228  0C26  085D               	movf	___fttol@f1+1,w
  6229  0C27  00E5               	movwf	___fttol@lval+1
  6230  0C28  085E               	movf	___fttol@f1+2,w
  6231  0C29  00E6               	movwf	___fttol@lval+2
  6232  0C2A  308E               	movlw	142
  6233  0C2B  01E7               	clrf	___fttol@lval+3
  6234  0C2C  02E8               	subwf	___fttol@exp1,f
  6235  0C2D  1FE8               	btfss	___fttol@exp1,7
  6236  0C2E  2C3B               	goto	l4461
  6237  0C2F  0868               	movf	___fttol@exp1,w
  6238  0C30  3A80               	xorlw	128
  6239  0C31  3E8F               	addlw	143
  6240  0C32  1C03               	btfss	3,0
  6241  0C33  2C13               	goto	l4439
  6242  0C34                     l4457:	
  6243  0C34  36E7               	lsrf	___fttol@lval+3,f
  6244  0C35  0CE6               	rrf	___fttol@lval+2,f
  6245  0C36  0CE5               	rrf	___fttol@lval+1,f
  6246  0C37  0CE4               	rrf	___fttol@lval,f
  6247  0C38  0FE8               	incfsz	___fttol@exp1,f
  6248  0C39  2C34               	goto	l4457
  6249  0C3A  2C48               	goto	l4469
  6250  0C3B                     l4461:	
  6251  0C3B  3018               	movlw	24
  6252  0C3C  0268               	subwf	___fttol@exp1,w
  6253  0C3D  1803               	btfsc	3,0
  6254  0C3E  2C13               	goto	l4439
  6255  0C3F                     l4467:	
  6256  0C3F  0868               	movf	___fttol@exp1,w
  6257  0C40  1903               	btfsc	3,2
  6258  0C41  2C48               	goto	l4469
  6259  0C42  35E4               	lslf	___fttol@lval,f
  6260  0C43  0DE5               	rlf	___fttol@lval+1,f
  6261  0C44  0DE6               	rlf	___fttol@lval+2,f
  6262  0C45  0DE7               	rlf	___fttol@lval+3,f
  6263  0C46  03E8               	decf	___fttol@exp1,f
  6264  0C47  2C3F               	goto	l4467
  6265  0C48                     l4469:	
  6266  0C48  0863               	movf	___fttol@sign1,w
  6267  0C49  1903               	btfsc	3,2
  6268  0C4A  2C56               	goto	l4473
  6269  0C4B  09E4               	comf	___fttol@lval,f
  6270  0C4C  09E5               	comf	___fttol@lval+1,f
  6271  0C4D  09E6               	comf	___fttol@lval+2,f
  6272  0C4E  09E7               	comf	___fttol@lval+3,f
  6273  0C4F  0AE4               	incf	___fttol@lval,f
  6274  0C50  1903               	skipnz
  6275  0C51  0AE5               	incf	___fttol@lval+1,f
  6276  0C52  1903               	skipnz
  6277  0C53  0AE6               	incf	___fttol@lval+2,f
  6278  0C54  1903               	skipnz
  6279  0C55  0AE7               	incf	___fttol@lval+3,f
  6280  0C56                     l4473:	
  6281  0C56  0867               	movf	___fttol@lval+3,w
  6282  0C57  00DF               	movwf	?___fttol+3
  6283  0C58  0866               	movf	___fttol@lval+2,w
  6284  0C59  00DE               	movwf	?___fttol+2
  6285  0C5A  0865               	movf	___fttol@lval+1,w
  6286  0C5B  00DD               	movwf	?___fttol+1
  6287  0C5C  0864               	movf	___fttol@lval,w
  6288  0C5D  00DC               	movwf	?___fttol
  6289  0C5E  0008               	return
  6290  0C5F                     __end_of___fttol:	
  6291  0C5F                     __ptext16:	
  6292 ;; *************** function ___ftadd *****************
  6293 ;; Defined at:
  6294 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  f1              3   42[BANK0 ] float 
  6297 ;;  f2              3   45[BANK0 ] float 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  exp1            1   53[BANK0 ] unsigned char 
  6300 ;;  exp2            1   52[BANK0 ] unsigned char 
  6301 ;;  sign            1   51[BANK0 ] unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  3   42[BANK0 ] float 
  6304 ;; Registers used:
  6305 ;;		wreg, status,2, status,0, pclath, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 1F/0
  6308 ;;		On exit  : 1F/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6311 ;;      Params:         0       6       0       0       0       0       0       0
  6312 ;;      Locals:         0       3       0       0       0       0       0       0
  6313 ;;      Temps:          0       3       0       0       0       0       0       0
  6314 ;;      Totals:         0      12       0       0       0       0       0       0
  6315 ;;Total ram usage:       12 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    3
  6318 ;; This function calls:
  6319 ;;		___ftpack
  6320 ;; This function is called by:
  6321 ;;		_DMX_loop
  6322 ;;		___ftsub
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function ___ftadd
  6328  0C5F                     ___ftadd:	
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6332  0C5F  084A               	movf	___ftadd@f1,w
  6333  0C60  00D0               	movwf	??___ftadd
  6334  0C61  084B               	movf	___ftadd@f1+1,w
  6335  0C62  00D1               	movwf	??___ftadd+1
  6336  0C63  084C               	movf	___ftadd@f1+2,w
  6337  0C64  00D2               	movwf	??___ftadd+2
  6338  0C65  1003               	clrc
  6339  0C66  0D51               	rlf	??___ftadd+1,w
  6340  0C67  0D52               	rlf	??___ftadd+2,w
  6341  0C68  00D5               	movwf	___ftadd@exp1
  6342  0C69  084D               	movf	___ftadd@f2,w
  6343  0C6A  00D0               	movwf	??___ftadd
  6344  0C6B  084E               	movf	___ftadd@f2+1,w
  6345  0C6C  00D1               	movwf	??___ftadd+1
  6346  0C6D  084F               	movf	___ftadd@f2+2,w
  6347  0C6E  00D2               	movwf	??___ftadd+2
  6348  0C6F  1003               	clrc
  6349  0C70  0D51               	rlf	??___ftadd+1,w
  6350  0C71  0D52               	rlf	??___ftadd+2,w
  6351  0C72  00D4               	movwf	___ftadd@exp2
  6352  0C73  0855               	movf	___ftadd@exp1,w
  6353  0C74  1903               	btfsc	3,2
  6354  0C75  2C82               	goto	l4043
  6355  0C76  0854               	movf	___ftadd@exp2,w
  6356  0C77  0255               	subwf	___ftadd@exp1,w
  6357  0C78  0854               	movf	___ftadd@exp2,w
  6358  0C79  1803               	skipnc
  6359  0C7A  2C8A               	goto	L6
  6360  0C7B  00D0               	movwf	??___ftadd
  6361  0C7C  0855               	movf	___ftadd@exp1,w
  6362  0C7D  02D0               	subwf	??___ftadd,f
  6363  0C7E  3019               	movlw	25
  6364  0C7F  0250               	subwf	??___ftadd,w
  6365  0C80  1C03               	skipc
  6366  0C81  2C89               	goto	l4047
  6367  0C82                     l4043:	
  6368  0C82  084D               	movf	___ftadd@f2,w
  6369  0C83  00CA               	movwf	?___ftadd
  6370  0C84  084E               	movf	___ftadd@f2+1,w
  6371  0C85  00CB               	movwf	?___ftadd+1
  6372  0C86  084F               	movf	___ftadd@f2+2,w
  6373  0C87  00CC               	movwf	?___ftadd+2
  6374  0C88  0008               	return
  6375  0C89                     l4047:	
  6376  0C89  0854               	movf	___ftadd@exp2,w
  6377  0C8A                     L6:	
  6378  0C8A  1903               	btfsc	3,2
  6379  0C8B  0008               	return
  6380  0C8C  0855               	movf	___ftadd@exp1,w
  6381  0C8D  0254               	subwf	___ftadd@exp2,w
  6382  0C8E  1803               	skipnc
  6383  0C8F  2C98               	goto	l4053
  6384  0C90  0855               	movf	___ftadd@exp1,w
  6385  0C91  00D0               	movwf	??___ftadd
  6386  0C92  0854               	movf	___ftadd@exp2,w
  6387  0C93  02D0               	subwf	??___ftadd,f
  6388  0C94  3019               	movlw	25
  6389  0C95  0250               	subwf	??___ftadd,w
  6390  0C96  1803               	btfsc	3,0
  6391  0C97  0008               	return
  6392  0C98                     l4053:	
  6393  0C98  3006               	movlw	6
  6394  0C99  00D3               	movwf	___ftadd@sign
  6395  0C9A  1BCC               	btfsc	___ftadd@f1+2,7
  6396  0C9B  17D3               	bsf	___ftadd@sign,7
  6397  0C9C  1BCF               	btfsc	___ftadd@f2+2,7
  6398  0C9D  1753               	bsf	___ftadd@sign,6
  6399  0C9E  17CB               	bsf	___ftadd@f1+1,7
  6400  0C9F  01CC               	clrf	___ftadd@f1+2
  6401  0CA0  17CE               	bsf	___ftadd@f2+1,7
  6402  0CA1  01CF               	clrf	___ftadd@f2+2
  6403  0CA2  0854               	movf	___ftadd@exp2,w
  6404  0CA3  0255               	subwf	___ftadd@exp1,w
  6405  0CA4  1803               	skipnc
  6406  0CA5  2CBD               	goto	l4075
  6407  0CA6                     l4065:	
  6408  0CA6  35CD               	lslf	___ftadd@f2,f
  6409  0CA7  0DCE               	rlf	___ftadd@f2+1,f
  6410  0CA8  0DCF               	rlf	___ftadd@f2+2,f
  6411  0CA9  03D4               	decf	___ftadd@exp2,f
  6412  0CAA  0854               	movf	___ftadd@exp2,w
  6413  0CAB  0655               	xorwf	___ftadd@exp1,w
  6414  0CAC  1903               	skipnz
  6415  0CAD  2CB8               	goto	l4073
  6416  0CAE  03D3               	decf	___ftadd@sign,f
  6417  0CAF  0853               	movf	___ftadd@sign,w
  6418  0CB0  3907               	andlw	7
  6419  0CB1  1903               	btfsc	3,2
  6420  0CB2  2CB8               	goto	l4073
  6421  0CB3  2CA6               	goto	l4065
  6422  0CB4                     l4071:	
  6423  0CB4  36CC               	lsrf	___ftadd@f1+2,f
  6424  0CB5  0CCB               	rrf	___ftadd@f1+1,f
  6425  0CB6  0CCA               	rrf	___ftadd@f1,f
  6426  0CB7  0AD5               	incf	___ftadd@exp1,f
  6427  0CB8                     l4073:	
  6428  0CB8  0855               	movf	___ftadd@exp1,w
  6429  0CB9  0654               	xorwf	___ftadd@exp2,w
  6430  0CBA  1903               	btfsc	3,2
  6431  0CBB  2CD7               	goto	l1271
  6432  0CBC  2CB4               	goto	l4071
  6433  0CBD                     l4075:	
  6434  0CBD  0855               	movf	___ftadd@exp1,w
  6435  0CBE  0254               	subwf	___ftadd@exp2,w
  6436  0CBF  1803               	skipnc
  6437  0CC0  2CD7               	goto	l1271
  6438  0CC1                     l4077:	
  6439  0CC1  35CA               	lslf	___ftadd@f1,f
  6440  0CC2  0DCB               	rlf	___ftadd@f1+1,f
  6441  0CC3  0DCC               	rlf	___ftadd@f1+2,f
  6442  0CC4  03D5               	decf	___ftadd@exp1,f
  6443  0CC5  0854               	movf	___ftadd@exp2,w
  6444  0CC6  0655               	xorwf	___ftadd@exp1,w
  6445  0CC7  1903               	skipnz
  6446  0CC8  2CD3               	goto	l4085
  6447  0CC9  03D3               	decf	___ftadd@sign,f
  6448  0CCA  0853               	movf	___ftadd@sign,w
  6449  0CCB  3907               	andlw	7
  6450  0CCC  1903               	btfsc	3,2
  6451  0CCD  2CD3               	goto	l4085
  6452  0CCE  2CC1               	goto	l4077
  6453  0CCF                     l4083:	
  6454  0CCF  36CF               	lsrf	___ftadd@f2+2,f
  6455  0CD0  0CCE               	rrf	___ftadd@f2+1,f
  6456  0CD1  0CCD               	rrf	___ftadd@f2,f
  6457  0CD2  0AD4               	incf	___ftadd@exp2,f
  6458  0CD3                     l4085:	
  6459  0CD3  0855               	movf	___ftadd@exp1,w
  6460  0CD4  0654               	xorwf	___ftadd@exp2,w
  6461  0CD5  1D03               	skipz
  6462  0CD6  2CCF               	goto	l4083
  6463  0CD7                     l1271:	
  6464  0CD7  1FD3               	btfss	___ftadd@sign,7
  6465  0CD8  2CE2               	goto	l4091
  6466  0CD9  30FF               	movlw	255
  6467  0CDA  06CA               	xorwf	___ftadd@f1,f
  6468  0CDB  06CB               	xorwf	___ftadd@f1+1,f
  6469  0CDC  06CC               	xorwf	___ftadd@f1+2,f
  6470  0CDD  0ACA               	incf	___ftadd@f1,f
  6471  0CDE  1903               	skipnz
  6472  0CDF  0ACB               	incf	___ftadd@f1+1,f
  6473  0CE0  1903               	skipnz
  6474  0CE1  0ACC               	incf	___ftadd@f1+2,f
  6475  0CE2                     l4091:	
  6476  0CE2  1F53               	btfss	___ftadd@sign,6
  6477  0CE3  2CEA               	goto	l4097
  6478  0CE4  2777  3189         	fcall	PL108	;call to abstracted procedure
  6479  0CE6  1903               	skipnz
  6480  0CE7  0ACE               	incf	___ftadd@f2+1,f
  6481  0CE8  1903               	skipnz
  6482  0CE9  0ACF               	incf	___ftadd@f2+2,f
  6483  0CEA                     l4097:	
  6484  0CEA  01D3               	clrf	___ftadd@sign
  6485  0CEB  084A               	movf	___ftadd@f1,w
  6486  0CEC  07CD               	addwf	___ftadd@f2,f
  6487  0CED  084B               	movf	___ftadd@f1+1,w
  6488  0CEE  3DCE               	addwfc	___ftadd@f2+1,f
  6489  0CEF  084C               	movf	___ftadd@f1+2,w
  6490  0CF0  3DCF               	addwfc	___ftadd@f2+2,f
  6491  0CF1  1FCF               	btfss	___ftadd@f2+2,7
  6492  0CF2  2CFB               	goto	l4109
  6493  0CF3  2777  3189         	fcall	PL108	;call to abstracted procedure
  6494  0CF5  1903               	skipnz
  6495  0CF6  0ACE               	incf	___ftadd@f2+1,f
  6496  0CF7  1903               	skipnz
  6497  0CF8  0ACF               	incf	___ftadd@f2+2,f
  6498  0CF9  01D3               	clrf	___ftadd@sign
  6499  0CFA  0AD3               	incf	___ftadd@sign,f
  6500  0CFB                     l4109:	
  6501  0CFB  084D               	movf	___ftadd@f2,w
  6502  0CFC  00A0               	movwf	___ftpack@arg
  6503  0CFD  084E               	movf	___ftadd@f2+1,w
  6504  0CFE  00A1               	movwf	___ftpack@arg+1
  6505  0CFF  084F               	movf	___ftadd@f2+2,w
  6506  0D00  00A2               	movwf	___ftpack@arg+2
  6507  0D01  0855               	movf	___ftadd@exp1,w
  6508  0D02  00A3               	movwf	___ftpack@exp
  6509  0D03  0853               	movf	___ftadd@sign,w
  6510  0D04  00A4               	movwf	___ftpack@sign
  6511  0D05  27C2               	fcall	___ftpack
  6512  0D06  0820               	movf	?___ftpack,w
  6513  0D07  00CA               	movwf	?___ftadd
  6514  0D08  0821               	movf	?___ftpack+1,w
  6515  0D09  00CB               	movwf	?___ftadd+1
  6516  0D0A  0822               	movf	?___ftpack+2,w
  6517  0D0B  00CC               	movwf	?___ftadd+2
  6518  0D0C  0008               	return
  6519  0D0D                     __end_of___ftadd:	
  6520  0D0D                     __ptext19:	
  6521 ;; *************** function ___ftdiv *****************
  6522 ;; Defined at:
  6523 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  f2              3   27[BANK0 ] float 
  6526 ;;  f1              3   30[BANK0 ] float 
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  f3              3   37[BANK0 ] float 
  6529 ;;  sign            1   41[BANK0 ] unsigned char 
  6530 ;;  exp             1   40[BANK0 ] unsigned char 
  6531 ;;  cntr            1   36[BANK0 ] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  3   27[BANK0 ] float 
  6534 ;; Registers used:
  6535 ;;		wreg, status,2, status,0, pclath, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 1F/0
  6538 ;;		On exit  : 1F/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6541 ;;      Params:         0       6       0       0       0       0       0       0
  6542 ;;      Locals:         0       6       0       0       0       0       0       0
  6543 ;;      Temps:          0       3       0       0       0       0       0       0
  6544 ;;      Totals:         0      15       0       0       0       0       0       0
  6545 ;;Total ram usage:       15 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    3
  6548 ;; This function calls:
  6549 ;;		___ftpack
  6550 ;; This function is called by:
  6551 ;;		_DMX_loop
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           
  6556                           ;psect for function ___ftdiv
  6557  0D0D                     ___ftdiv:	
  6558                           
  6559                           ;incstack = 0
  6560                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6561  0D0D  083E               	movf	___ftdiv@f1,w
  6562  0D0E  00C1               	movwf	??___ftdiv
  6563  0D0F  083F               	movf	___ftdiv@f1+1,w
  6564  0D10  00C2               	movwf	??___ftdiv+1
  6565  0D11  0840               	movf	___ftdiv@f1+2,w
  6566  0D12  00C3               	movwf	??___ftdiv+2
  6567  0D13  1003               	clrc
  6568  0D14  0D42               	rlf	??___ftdiv+1,w
  6569  0D15  0D43               	rlf	??___ftdiv+2,w
  6570  0D16  00C8               	movwf	___ftdiv@exp
  6571  0D17  0848               	movf	___ftdiv@exp,w
  6572  0D18  1D03               	btfss	3,2
  6573  0D19  2D1B               	goto	l4321
  6574  0D1A  2F8F               	ljmp	PL122	;call to abstracted procedure
  6575  0D1B                     l4321:	
  6576  0D1B  083B               	movf	___ftdiv@f2,w
  6577  0D1C  00C1               	movwf	??___ftdiv
  6578  0D1D  083C               	movf	___ftdiv@f2+1,w
  6579  0D1E  00C2               	movwf	??___ftdiv+1
  6580  0D1F  083D               	movf	___ftdiv@f2+2,w
  6581  0D20  00C3               	movwf	??___ftdiv+2
  6582  0D21  1003               	clrc
  6583  0D22  0D42               	rlf	??___ftdiv+1,w
  6584  0D23  0D43               	rlf	??___ftdiv+2,w
  6585  0D24  00C9               	movwf	___ftdiv@sign
  6586  0D25  0849               	movf	___ftdiv@sign,w
  6587  0D26  1D03               	btfss	3,2
  6588  0D27  2D29               	goto	l1289
  6589  0D28  2F8F               	ljmp	PL122	;call to abstracted procedure
  6590  0D29                     l1289:	
  6591  0D29  3089               	movlw	137
  6592  0D2A  01C5               	clrf	___ftdiv@f3
  6593  0D2B  01C6               	clrf	___ftdiv@f3+1
  6594  0D2C  01C7               	clrf	___ftdiv@f3+2
  6595  0D2D  0749               	addwf	___ftdiv@sign,w
  6596  0D2E  00C1               	movwf	??___ftdiv
  6597  0D2F  02C8               	subwf	___ftdiv@exp,f
  6598  0D30  0840               	movf	___ftdiv@f1+2,w
  6599  0D31  00C9               	movwf	___ftdiv@sign
  6600  0D32  083D               	movf	___ftdiv@f2+2,w
  6601  0D33  06C9               	xorwf	___ftdiv@sign,f
  6602  0D34  3080               	movlw	128
  6603  0D35  05C9               	andwf	___ftdiv@sign,f
  6604  0D36  3018               	movlw	24
  6605  0D37  17BF               	bsf	___ftdiv@f1+1,7
  6606  0D38  01C0               	clrf	___ftdiv@f1+2
  6607  0D39  17BC               	bsf	___ftdiv@f2+1,7
  6608  0D3A  01BD               	clrf	___ftdiv@f2+2
  6609  0D3B  00C4               	movwf	___ftdiv@cntr
  6610  0D3C                     l4343:	
  6611  0D3C  35C5               	lslf	___ftdiv@f3,f
  6612  0D3D  0DC6               	rlf	___ftdiv@f3+1,f
  6613  0D3E  0DC7               	rlf	___ftdiv@f3+2,f
  6614  0D3F  083D               	movf	___ftdiv@f2+2,w
  6615  0D40  0240               	subwf	___ftdiv@f1+2,w
  6616  0D41  1D03               	skipz
  6617  0D42  2D49               	goto	u3065
  6618  0D43  083C               	movf	___ftdiv@f2+1,w
  6619  0D44  023F               	subwf	___ftdiv@f1+1,w
  6620  0D45  1D03               	skipz
  6621  0D46  2D49               	goto	u3065
  6622  0D47  083B               	movf	___ftdiv@f2,w
  6623  0D48  023E               	subwf	___ftdiv@f1,w
  6624  0D49                     u3065:	
  6625  0D49  1C03               	skipc
  6626  0D4A  2D52               	goto	l4349
  6627  0D4B  083B               	movf	___ftdiv@f2,w
  6628  0D4C  02BE               	subwf	___ftdiv@f1,f
  6629  0D4D  083C               	movf	___ftdiv@f2+1,w
  6630  0D4E  3BBF               	subwfb	___ftdiv@f1+1,f
  6631  0D4F  083D               	movf	___ftdiv@f2+2,w
  6632  0D50  3BC0               	subwfb	___ftdiv@f1+2,f
  6633  0D51  1445               	bsf	___ftdiv@f3,0
  6634  0D52                     l4349:	
  6635  0D52  35BE               	lslf	___ftdiv@f1,f
  6636  0D53  0DBF               	rlf	___ftdiv@f1+1,f
  6637  0D54  0DC0               	rlf	___ftdiv@f1+2,f
  6638  0D55  0BC4               	decfsz	___ftdiv@cntr,f
  6639  0D56  2D3C               	goto	l4343
  6640  0D57  0845               	movf	___ftdiv@f3,w
  6641  0D58  00A0               	movwf	___ftpack@arg
  6642  0D59  0846               	movf	___ftdiv@f3+1,w
  6643  0D5A  00A1               	movwf	___ftpack@arg+1
  6644  0D5B  0847               	movf	___ftdiv@f3+2,w
  6645  0D5C  00A2               	movwf	___ftpack@arg+2
  6646  0D5D  0848               	movf	___ftdiv@exp,w
  6647  0D5E  00A3               	movwf	___ftpack@exp
  6648  0D5F  0849               	movf	___ftdiv@sign,w
  6649  0D60  00A4               	movwf	___ftpack@sign
  6650  0D61  27C2               	fcall	___ftpack
  6651  0D62  0820               	movf	?___ftpack,w
  6652  0D63  00BB               	movwf	?___ftdiv
  6653  0D64  0821               	movf	?___ftpack+1,w
  6654  0D65  00BC               	movwf	?___ftdiv+1
  6655  0D66  0822               	movf	?___ftpack+2,w
  6656  0D67  00BD               	movwf	?___ftdiv+2
  6657  0D68  0008               	return
  6658  0D69                     __end_of___ftdiv:	
  6659  0D69                     __ptext18:	
  6660 ;; *************** function ___ftge *****************
  6661 ;; Defined at:
  6662 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  ff1             3   12[BANK0 ] float 
  6665 ;;  ff2             3   15[BANK0 ] float 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0
  6672 ;; Tracked objects:
  6673 ;;		On entry : 1F/0
  6674 ;;		On exit  : 1F/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6677 ;;      Params:         0       6       0       0       0       0       0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0
  6680 ;;      Totals:         0       6       0       0       0       0       0       0
  6681 ;;Total ram usage:        6 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    2
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_DMX_loop
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function ___ftge
  6693  0D69                     ___ftge:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6697  0D69  1FAE               	btfss	___ftge@ff1+2,7
  6698  0D6A  2D78               	goto	l4361
  6699  0D6B  082C               	movf	___ftge@ff1,w
  6700  0D6C  3C00               	sublw	0
  6701  0D6D  00AC               	movwf	___ftge@ff1
  6702  0D6E  082D               	movf	___ftge@ff1+1,w
  6703  0D6F  1C03               	skipc
  6704  0D70  0F2D               	incfsz	___ftge@ff1+1,w
  6705  0D71  3C00               	sublw	0
  6706  0D72  00AD               	movwf	___ftge@ff1+1
  6707  0D73  082E               	movf	___ftge@ff1+2,w
  6708  0D74  1C03               	skipc
  6709  0D75  0F2E               	incfsz	___ftge@ff1+2,w
  6710  0D76  3C80               	sublw	128
  6711  0D77  00AE               	movwf	___ftge@ff1+2
  6712  0D78                     l4361:	
  6713  0D78  1FB1               	btfss	___ftge@ff2+2,7
  6714  0D79  2D87               	goto	l4365
  6715  0D7A  082F               	movf	___ftge@ff2,w
  6716  0D7B  3C00               	sublw	0
  6717  0D7C  00AF               	movwf	___ftge@ff2
  6718  0D7D  0830               	movf	___ftge@ff2+1,w
  6719  0D7E  1C03               	skipc
  6720  0D7F  0F30               	incfsz	___ftge@ff2+1,w
  6721  0D80  3C00               	sublw	0
  6722  0D81  00B0               	movwf	___ftge@ff2+1
  6723  0D82  0831               	movf	___ftge@ff2+2,w
  6724  0D83  1C03               	skipc
  6725  0D84  0F31               	incfsz	___ftge@ff2+2,w
  6726  0D85  3C80               	sublw	128
  6727  0D86  00B1               	movwf	___ftge@ff2+2
  6728  0D87                     l4365:	
  6729  0D87  3080               	movlw	128
  6730  0D88  06AE               	xorwf	___ftge@ff1+2,f
  6731  0D89  06B1               	xorwf	___ftge@ff2+2,f
  6732  0D8A  0831               	movf	___ftge@ff2+2,w
  6733  0D8B  022E               	subwf	___ftge@ff1+2,w
  6734  0D8C  1D03               	skipz
  6735  0D8D  0008               	return
  6736  0D8E  0830               	movf	___ftge@ff2+1,w
  6737  0D8F  022D               	subwf	___ftge@ff1+1,w
  6738  0D90  1D03               	skipz
  6739  0D91  0008               	return
  6740  0D92  082F               	movf	___ftge@ff2,w
  6741  0D93  022C               	subwf	___ftge@ff1,w
  6742  0D94  0008               	return
  6743  0D95                     __end_of___ftge:	
  6744  0D95                     __ptext17:	
  6745 ;; *************** function ___ftmul *****************
  6746 ;; Defined at:
  6747 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  f1              3   12[BANK0 ] float 
  6750 ;;  f2              3   15[BANK0 ] float 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  6753 ;;  sign            1   26[BANK0 ] unsigned char 
  6754 ;;  cntr            1   25[BANK0 ] unsigned char 
  6755 ;;  exp             1   21[BANK0 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  3   12[BANK0 ] float 
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 1F/0
  6762 ;;		On exit  : 1F/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6765 ;;      Params:         0       6       0       0       0       0       0       0
  6766 ;;      Locals:         0       6       0       0       0       0       0       0
  6767 ;;      Temps:          0       3       0       0       0       0       0       0
  6768 ;;      Totals:         0      15       0       0       0       0       0       0
  6769 ;;Total ram usage:       15 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    3
  6772 ;; This function calls:
  6773 ;;		___ftpack
  6774 ;; This function is called by:
  6775 ;;		_DMX_loop
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function ___ftmul
  6781  0D95                     ___ftmul:	
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6785  0D95  082C               	movf	___ftmul@f1,w
  6786  0D96  00B2               	movwf	??___ftmul
  6787  0D97  082D               	movf	___ftmul@f1+1,w
  6788  0D98  00B3               	movwf	??___ftmul+1
  6789  0D99  082E               	movf	___ftmul@f1+2,w
  6790  0D9A  00B4               	movwf	??___ftmul+2
  6791  0D9B  1003               	clrc
  6792  0D9C  0D33               	rlf	??___ftmul+1,w
  6793  0D9D  0D34               	rlf	??___ftmul+2,w
  6794  0D9E  00B5               	movwf	___ftmul@exp
  6795  0D9F  0835               	movf	___ftmul@exp,w
  6796  0DA0  1D03               	btfss	3,2
  6797  0DA1  2DA3               	goto	l4381
  6798  0DA2  2F93               	ljmp	PL126	;call to abstracted procedure
  6799  0DA3                     l4381:	
  6800  0DA3  082F               	movf	___ftmul@f2,w
  6801  0DA4  00B2               	movwf	??___ftmul
  6802  0DA5  0830               	movf	___ftmul@f2+1,w
  6803  0DA6  00B3               	movwf	??___ftmul+1
  6804  0DA7  0831               	movf	___ftmul@f2+2,w
  6805  0DA8  00B4               	movwf	??___ftmul+2
  6806  0DA9  1003               	clrc
  6807  0DAA  0D33               	rlf	??___ftmul+1,w
  6808  0DAB  0D34               	rlf	??___ftmul+2,w
  6809  0DAC  00BA               	movwf	___ftmul@sign
  6810  0DAD  083A               	movf	___ftmul@sign,w
  6811  0DAE  1D03               	btfss	3,2
  6812  0DAF  2DB1               	goto	l4385
  6813  0DB0  2F93               	ljmp	PL126	;call to abstracted procedure
  6814  0DB1                     l4385:	
  6815  0DB1  083A               	movf	___ftmul@sign,w
  6816  0DB2  3E7B               	addlw	123
  6817  0DB3  07B5               	addwf	___ftmul@exp,f
  6818  0DB4  082E               	movf	___ftmul@f1+2,w
  6819  0DB5  00BA               	movwf	___ftmul@sign
  6820  0DB6  0831               	movf	___ftmul@f2+2,w
  6821  0DB7  06BA               	xorwf	___ftmul@sign,f
  6822  0DB8  3080               	movlw	128
  6823  0DB9  05BA               	andwf	___ftmul@sign,f
  6824  0DBA  30FF               	movlw	255
  6825  0DBB  17AD               	bsf	___ftmul@f1+1,7
  6826  0DBC  17B0               	bsf	___ftmul@f2+1,7
  6827  0DBD  05AF               	andwf	___ftmul@f2,f
  6828  0DBE  05B0               	andwf	___ftmul@f2+1,f
  6829  0DBF  3007               	movlw	7
  6830  0DC0  01B1               	clrf	___ftmul@f2+2
  6831  0DC1  01B6               	clrf	___ftmul@f3_as_product
  6832  0DC2  01B7               	clrf	___ftmul@f3_as_product+1
  6833  0DC3  01B8               	clrf	___ftmul@f3_as_product+2
  6834  0DC4  00B9               	movwf	___ftmul@cntr
  6835  0DC5                     l4403:	
  6836  0DC5  1C2C               	btfss	___ftmul@f1,0
  6837  0DC6  2DC9               	goto	l4407
  6838  0DC7  275C  3189         	fcall	PL88	;call to abstracted procedure
  6839  0DC9                     l4407:	
  6840  0DC9  36AE               	lsrf	___ftmul@f1+2,f
  6841  0DCA  0CAD               	rrf	___ftmul@f1+1,f
  6842  0DCB  0CAC               	rrf	___ftmul@f1,f
  6843  0DCC  35AF               	lslf	___ftmul@f2,f
  6844  0DCD  0DB0               	rlf	___ftmul@f2+1,f
  6845  0DCE  0DB1               	rlf	___ftmul@f2+2,f
  6846  0DCF  0BB9               	decfsz	___ftmul@cntr,f
  6847  0DD0  2DC5               	goto	l4403
  6848  0DD1  3009               	movlw	9
  6849  0DD2  00B9               	movwf	___ftmul@cntr
  6850  0DD3                     l4415:	
  6851  0DD3  1C2C               	btfss	___ftmul@f1,0
  6852  0DD4  2DD7               	goto	l4419
  6853  0DD5  275C  3189         	fcall	PL88	;call to abstracted procedure
  6854  0DD7                     l4419:	
  6855  0DD7  36AE               	lsrf	___ftmul@f1+2,f
  6856  0DD8  0CAD               	rrf	___ftmul@f1+1,f
  6857  0DD9  0CAC               	rrf	___ftmul@f1,f
  6858  0DDA  36B8               	lsrf	___ftmul@f3_as_product+2,f
  6859  0DDB  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6860  0DDC  0CB6               	rrf	___ftmul@f3_as_product,f
  6861  0DDD  0BB9               	decfsz	___ftmul@cntr,f
  6862  0DDE  2DD3               	goto	l4415
  6863  0DDF  0836               	movf	___ftmul@f3_as_product,w
  6864  0DE0  00A0               	movwf	___ftpack@arg
  6865  0DE1  0837               	movf	___ftmul@f3_as_product+1,w
  6866  0DE2  00A1               	movwf	___ftpack@arg+1
  6867  0DE3  0838               	movf	___ftmul@f3_as_product+2,w
  6868  0DE4  00A2               	movwf	___ftpack@arg+2
  6869  0DE5  0835               	movf	___ftmul@exp,w
  6870  0DE6  00A3               	movwf	___ftpack@exp
  6871  0DE7  083A               	movf	___ftmul@sign,w
  6872  0DE8  00A4               	movwf	___ftpack@sign
  6873  0DE9  27C2               	fcall	___ftpack
  6874  0DEA  0820               	movf	?___ftpack,w
  6875  0DEB  00AC               	movwf	?___ftmul
  6876  0DEC  0821               	movf	?___ftpack+1,w
  6877  0DED  00AD               	movwf	?___ftmul+1
  6878  0DEE  0822               	movf	?___ftpack+2,w
  6879  0DEF  00AE               	movwf	?___ftmul+2
  6880  0DF0  0008               	return
  6881  0DF1                     __end_of___ftmul:	
  6882  0DF1                     PL2:	
  6883  0DF1  0801               	movf	1,w
  6884  0DF2  0023               	movlb	3	; select bank3
  6885  0DF3  00D8               	movwf	??_DMX_loop^(0+384)
  6886  0DF4  0020               	movlb	0	; select bank0
  6887  0DF5  356C               	lslf	DMX_loop@Addr,w
  6888  0DF6  3EB4               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  6889  0DF7  0086               	movwf	6
  6890  0DF8  3F40               	moviw [0]fsr1
  6891  0DF9  0023               	movlb	3	; select bank3
  6892  0DFA  00D9               	movwf	(??_DMX_loop+1)^(0+384)
  6893  0DFB  3F41               	moviw [1]fsr1
  6894  0DFC  00DA               	movwf	((??_DMX_loop+1)^(0+384)+1)
  6895  0DFD  0859               	movf	(??_DMX_loop+1)^(0+384),w
  6896  0DFE  0086               	movwf	6
  6897  0DFF  085A               	movf	(??_DMX_loop+2)^(0+384),w
  6898  0E00  0087               	movwf	7
  6899  0E01  0858               	movf	??_DMX_loop^(0+384),w
  6900  0E02  0081               	movwf	1
  6901  0E03  0020               	movlb	0	; select bank0
  6902  0E04  356C               	lslf	DMX_loop@Addr,w
  6903  0E05  3E4C               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  6904  0E06  0086               	movwf	6
  6905  0E07  3001               	movlw	1	; select bank2/3
  6906  0E08  0087               	movwf	7
  6907  0E09  0801               	movf	1,w
  6908  0E0A  0023               	movlb	3	; select bank3
  6909  0E0B  00D8               	movwf	??_DMX_loop^(0+384)
  6910  0E0C  0020               	movlb	0	; select bank0
  6911  0E0D  356C               	lslf	DMX_loop@Addr,w
  6912  0E0E  3E44               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  6913  0E0F  0086               	movwf	6
  6914  0E10  3F40               	moviw [0]fsr1
  6915  0E11  0023               	movlb	3	; select bank3
  6916  0E12  00D9               	movwf	(??_DMX_loop+1)^(0+384)
  6917  0E13  3F41               	moviw [1]fsr1
  6918  0E14  00DA               	movwf	((??_DMX_loop+1)^(0+384)+1)
  6919  0E15  0859               	movf	(??_DMX_loop+1)^(0+384),w
  6920  0E16  0086               	movwf	6
  6921  0E17  085A               	movf	(??_DMX_loop+2)^(0+384),w
  6922  0E18  0087               	movwf	7
  6923  0E19  0858               	movf	??_DMX_loop^(0+384),w
  6924  0E1A  0081               	movwf	1
  6925  0E1B  0020               	movlb	0	; select bank0
  6926  0E1C  356C               	lslf	DMX_loop@Addr,w
  6927  0E1D  3EAC               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  6928  0E1E  0086               	movwf	6
  6929  0E1F  3001               	movlw	1	; select bank3/4
  6930  0E20  0087               	movwf	7
  6931  0E21  3F40               	moviw [0]fsr1
  6932  0E22  0023               	movlb	3	; select bank3
  6933  0E23  00D8               	movwf	??_DMX_loop^(0+384)
  6934  0E24  3F41               	moviw [1]fsr1
  6935  0E25  0008               	return
  6936  0E26                     __end_ofPL2:	
  6937  0E26                     PL4:	
  6938  0E26  3E4C               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  6939  0E27  0086               	movwf	6
  6940  0E28  3001               	movlw	1	; select bank2/3
  6941  0E29  0087               	movwf	7
  6942  0E2A  085C               	movf	?___fttol,w
  6943  0E2B  3FC0               	movwi [0]fsr1
  6944  0E2C  085D               	movf	?___fttol+1,w
  6945  0E2D  3FC1               	movwi [1]fsr1
  6946  0E2E  356C               	lslf	DMX_loop@Addr,w
  6947  0E2F  3E4D               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  6948  0E30  0086               	movwf	6
  6949  0E31  0008               	return
  6950  0E32                     __end_ofPL4:	
  6951  0E32                     PL6:	
  6952  0E32  086C               	movf	DMX_loop@Addr,w
  6953  0E33  076C               	addwf	DMX_loop@Addr,w
  6954  0E34  076C               	addwf	DMX_loop@Addr,w
  6955  0E35  3E38               	addlw	(low (_DMX_TargetBright| (0+256)))& (0+255)
  6956  0E36  0086               	movwf	6
  6957  0E37  3001               	movlw	1	; select bank2/3
  6958  0E38  0087               	movwf	7
  6959  0E39  0008               	return
  6960  0E3A                     __end_ofPL6:	
  6961  0E3A                     PL8:	
  6962  0E3A  086C               	movf	DMX_loop@Addr,w
  6963  0E3B  076C               	addwf	DMX_loop@Addr,w
  6964  0E3C  076C               	addwf	DMX_loop@Addr,w
  6965  0E3D  3EA0               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  6966  0E3E  0086               	movwf	6
  6967  0E3F  0187               	clrf	7
  6968  0E40  0008               	return
  6969  0E41                     __end_ofPL8:	
  6970  0E41                     PL10:	
  6971  0E41  0828               	movf	?___lbtoft,w
  6972  0E42  3FC0               	movwi [0]fsr1
  6973  0E43  0829               	movf	?___lbtoft+1,w
  6974  0E44  3FC1               	movwi [1]fsr1
  6975  0E45  082A               	movf	?___lbtoft+2,w
  6976  0E46  3FC2               	movwi [2]fsr1
  6977  0E47  0008               	return
  6978  0E48                     __end_ofPL10:	
  6979  0E48                     PL12:	
  6980  0E48  3084               	movlw	high (_PWM| (0+32768))
  6981  0E49  3D59               	addwfc	(??_DMX_loop+1)^(0+384),w
  6982  0E4A  0085               	movwf	5
  6983  0E4B  3F00               	moviw [0]fsr0
  6984  0E4C  00DA               	movwf	(??_DMX_loop+2)^(0+384)
  6985  0E4D  3F01               	moviw [1]fsr0
  6986  0E4E  00DB               	movwf	((??_DMX_loop+2)^(0+384)+1)
  6987  0E4F  0879               	movf	_rxdata,w
  6988  0E50  00DC               	movwf	(??_DMX_loop+4)^(0+384)
  6989  0E51  3005               	movlw	low ((_PWM+2)| (0+32768))
  6990  0E52  01DD               	clrf	((??_DMX_loop+4)^(0+384)+1)
  6991  0E53  35DC               	lslf	(??_DMX_loop+4)^(0+384),f
  6992  0E54  0DDD               	rlf	((??_DMX_loop+4)^(0+384)+1),f
  6993  0E55  075C               	addwf	(??_DMX_loop+4)^(0+384),w
  6994  0E56  0084               	movwf	4
  6995  0E57  3084               	movlw	high ((_PWM+2)| (0+32768))
  6996  0E58  3D5D               	addwfc	(??_DMX_loop+5)^(0+384),w
  6997  0E59  0085               	movwf	5
  6998  0E5A  3F00               	moviw [0]fsr0
  6999  0E5B  00DE               	movwf	(??_DMX_loop+6)^(0+384)
  7000  0E5C  3F01               	moviw [1]fsr0
  7001  0E5D  00DF               	movwf	((??_DMX_loop+6)^(0+384)+1)
  7002  0E5E  085A               	movf	(??_DMX_loop+2)^(0+384),w
  7003  0E5F  025E               	subwf	(??_DMX_loop+6)^(0+384),w
  7004  0E60  0020               	movlb	0	; select bank0
  7005  0E61  00A8               	movwf	___lwtoft@c
  7006  0E62  0023               	movlb	3	; select bank3
  7007  0E63  085B               	movf	(??_DMX_loop+3)^(0+384),w
  7008  0E64  3B5F               	subwfb	(??_DMX_loop+7)^(0+384),w
  7009  0E65  0020               	movlb	0	; select bank0
  7010  0E66  00A9               	movwf	___lwtoft@c+1
  7011  0E67  0008               	return
  7012  0E68                     __end_ofPL12:	
  7013  0E68                     PL14:	
  7014  0E68  0023               	movlb	3	; select bank3
  7015  0E69  00D8               	movwf	??_DMX_loop^(0+384)
  7016  0E6A  3003               	movlw	low (_PWM| (0+32768))
  7017  0E6B  01D9               	clrf	(??_DMX_loop^(0+384)+1)
  7018  0E6C  35D8               	lslf	??_DMX_loop^(0+384),f
  7019  0E6D  0DD9               	rlf	(??_DMX_loop^(0+384)+1),f
  7020  0E6E  0758               	addwf	??_DMX_loop^(0+384),w
  7021  0E6F  0084               	movwf	4
  7022  0E70  0008               	return
  7023  0E71                     __end_ofPL14:	
  7024  0E71                     PL16:	
  7025  0E71  0856               	movf	?___ftsub,w
  7026  0E72  0021               	movlb	1	; select bank1
  7027  0E73  00B7               	movwf	_DMX_difference^(0+128)
  7028  0E74  0020               	movlb	0	; select bank0
  7029  0E75  0857               	movf	?___ftsub+1,w
  7030  0E76  0021               	movlb	1	; select bank1
  7031  0E77  00B8               	movwf	(_DMX_difference+1)^(0+128)
  7032  0E78  0020               	movlb	0	; select bank0
  7033  0E79  0858               	movf	?___ftsub+2,w
  7034  0E7A  0021               	movlb	1	; select bank1
  7035  0E7B  00B9               	movwf	(_DMX_difference+2)^(0+128)
  7036  0E7C  0837               	movf	_DMX_difference^(0+128),w
  7037  0E7D  0020               	movlb	0	; select bank0
  7038  0E7E  00AC               	movwf	___ftge@ff1
  7039  0E7F  0021               	movlb	1	; select bank1
  7040  0E80  0838               	movf	(_DMX_difference+1)^(0+128),w
  7041  0E81  0020               	movlb	0	; select bank0
  7042  0E82  00AD               	movwf	___ftge@ff1+1
  7043  0E83  0021               	movlb	1	; select bank1
  7044  0E84  0839               	movf	(_DMX_difference+2)^(0+128),w
  7045  0E85  0020               	movlb	0	; select bank0
  7046  0E86  00AE               	movwf	___ftge@ff1+2
  7047  0E87  30CD               	movlw	205
  7048  0E88  00AF               	movwf	___ftge@ff2
  7049  0E89  304C               	movlw	76
  7050  0E8A  00B0               	movwf	___ftge@ff2+1
  7051  0E8B  303D               	movlw	61
  7052  0E8C  00B1               	movwf	___ftge@ff2+2
  7053  0E8D  0008               	return
  7054  0E8E                     __end_ofPL16:	
  7055  0E8E                     PL18:	
  7056  0E8E  082C               	movf	?___ftmul,w
  7057  0E8F  00E9               	movwf	_DMX_loop$1388
  7058  0E90  082D               	movf	?___ftmul+1,w
  7059  0E91  00EA               	movwf	_DMX_loop$1388+1
  7060  0E92  082E               	movf	?___ftmul+2,w
  7061  0E93  00EB               	movwf	_DMX_loop$1388+2
  7062  0E94  0879               	movf	_rxdata,w
  7063  0E95  0008               	return
  7064  0E96                     __end_ofPL18:	
  7065  0E96                     PL20:	
  7066  0E96  3F40               	moviw [0]fsr1
  7067  0E97  0023               	movlb	3	; select bank3
  7068  0E98  00D8               	movwf	??_DMX_loop^(0+384)
  7069  0E99  3F41               	moviw [1]fsr1
  7070  0E9A  00D9               	movwf	(??_DMX_loop^(0+384)+1)
  7071  0E9B  3F42               	moviw [2]fsr1
  7072  0E9C  00DA               	movwf	(??_DMX_loop^(0+384)+2)
  7073  0E9D  0020               	movlb	0	; select bank0
  7074  0E9E  0008               	return
  7075  0E9F                     __end_ofPL20:	
  7076  0E9F                     PL22:	
  7077  0E9F  3FC2               	movwi [2]fsr1
  7078  0EA0  086C               	movf	DMX_loop@Addr,w
  7079  0EA1  076C               	addwf	DMX_loop@Addr,w
  7080  0EA2  076C               	addwf	DMX_loop@Addr,w
  7081  0EA3  3EA0               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  7082  0EA4  0086               	movwf	6
  7083  0EA5  3F40               	moviw [0]fsr1
  7084  0EA6  00DC               	movwf	___fttol@f1
  7085  0EA7  3F41               	moviw [1]fsr1
  7086  0EA8  00DD               	movwf	___fttol@f1+1
  7087  0EA9  3F42               	moviw [2]fsr1
  7088  0EAA  00DE               	movwf	___fttol@f1+2
  7089  0EAB  0008               	return
  7090  0EAC                     __end_ofPL22:	
  7091  0EAC                     PL24:	
  7092  0EAC  0828               	movf	?___lbtoft,w
  7093  0EAD  00BB               	movwf	___ftdiv@f2
  7094  0EAE  0829               	movf	?___lbtoft+1,w
  7095  0EAF  00BC               	movwf	___ftdiv@f2+1
  7096  0EB0  082A               	movf	?___lbtoft+2,w
  7097  0EB1  00BD               	movwf	___ftdiv@f2+2
  7098  0EB2  3040               	movlw	64
  7099  0EB3  01AC               	clrf	___ftmul@f1
  7100  0EB4  01AD               	clrf	___ftmul@f1+1
  7101  0EB5  00AE               	movwf	___ftmul@f1+2
  7102  0EB6  0021               	movlb	1	; select bank1
  7103  0EB7  0837               	movf	_DMX_difference^(0+128),w
  7104  0EB8  0020               	movlb	0	; select bank0
  7105  0EB9  00AF               	movwf	___ftmul@f2
  7106  0EBA  0021               	movlb	1	; select bank1
  7107  0EBB  0838               	movf	(_DMX_difference+1)^(0+128),w
  7108  0EBC  0020               	movlb	0	; select bank0
  7109  0EBD  00B0               	movwf	___ftmul@f2+1
  7110  0EBE  0021               	movlb	1	; select bank1
  7111  0EBF  0839               	movf	(_DMX_difference+2)^(0+128),w
  7112  0EC0  0020               	movlb	0	; select bank0
  7113  0EC1  00B1               	movwf	___ftmul@f2+2
  7114  0EC2  0008               	return
  7115  0EC3                     __end_ofPL24:	
  7116  0EC3                     PL30:	
  7117  0EC3  0828               	movf	?___lwtoft,w
  7118  0EC4  00AF               	movwf	___ftmul@f2
  7119  0EC5  0829               	movf	?___lwtoft+1,w
  7120  0EC6  00B0               	movwf	___ftmul@f2+1
  7121  0EC7  082A               	movf	?___lwtoft+2,w
  7122  0EC8  00B1               	movwf	___ftmul@f2+2
  7123  0EC9  0008               	return
  7124  0ECA                     __end_ofPL30:	
  7125  0ECA                     PL32:	
  7126  0ECA  3F40               	moviw [0]fsr1
  7127  0ECB  00D9               	movwf	___ftsub@f1
  7128  0ECC  3F41               	moviw [1]fsr1
  7129  0ECD  00DA               	movwf	___ftsub@f1+1
  7130  0ECE  3F42               	moviw [2]fsr1
  7131  0ECF  00DB               	movwf	___ftsub@f1+2
  7132  0ED0  0008               	return
  7133  0ED1                     __end_ofPL32:	
  7134  0ED1                     PL34:	
  7135  0ED1  0023               	movlb	3	; select bank3
  7136  0ED2  0858               	movf	??_DMX_loop^(0+384),w
  7137  0ED3  3FC0               	movwi [0]fsr1
  7138  0ED4  0859               	movf	(??_DMX_loop+1)^(0+384),w
  7139  0ED5  3FC1               	movwi [1]fsr1
  7140  0ED6  085A               	movf	(??_DMX_loop+2)^(0+384),w
  7141  0ED7  3FC2               	movwi [2]fsr1
  7142  0ED8  0020               	movlb	0	; select bank0
  7143  0ED9  0008               	return
  7144  0EDA                     __end_ofPL34:	
  7145  0EDA                     PL36:	
  7146  0EDA  3F40               	moviw [0]fsr1
  7147  0EDB  00D6               	movwf	___ftsub@f2
  7148  0EDC  3F41               	moviw [1]fsr1
  7149  0EDD  00D7               	movwf	___ftsub@f2+1
  7150  0EDE  3F42               	moviw [2]fsr1
  7151  0EDF  00D8               	movwf	___ftsub@f2+2
  7152  0EE0  0008               	return
  7153  0EE1                     __end_ofPL36:	
  7154  0EE1                     PL38:	
  7155  0EE1  086C               	movf	DMX_loop@Addr,w
  7156  0EE2  076C               	addwf	DMX_loop@Addr,w
  7157  0EE3  076C               	addwf	DMX_loop@Addr,w
  7158  0EE4  3EA0               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  7159  0EE5  0086               	movwf	6
  7160  0EE6  3001               	movlw	1	; select bank3/4
  7161  0EE7  0087               	movwf	7
  7162  0EE8  0008               	return
  7163  0EE9                     __end_ofPL38:	
  7164  0EE9                     PL46:	
  7165  0EE9  3F80               	movwi [0]fsr0
  7166  0EEA  0081               	movwf	1
  7167  0EEB  086C               	movf	DMX_loop@Addr,w
  7168  0EEC  3E66               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  7169  0EED  0086               	movwf	6
  7170  0EEE  3002               	movlw	2
  7171  0EEF  0081               	movwf	1
  7172  0EF0  086C               	movf	DMX_loop@Addr,w
  7173  0EF1  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  7174  0EF2  0086               	movwf	6
  7175  0EF3  0187               	clrf	7
  7176  0EF4  1501               	bsf	1,2
  7177  0EF5  0008               	return
  7178  0EF6                     __end_ofPL46:	
  7179  0EF6                     PL48:	
  7180  0EF6  0828               	movf	?___lwtoft,w
  7181  0EF7  00CD               	movwf	___ftadd@f2
  7182  0EF8  0829               	movf	?___lwtoft+1,w
  7183  0EF9  00CE               	movwf	___ftadd@f2+1
  7184  0EFA  082A               	movf	?___lwtoft+2,w
  7185  0EFB  00CF               	movwf	___ftadd@f2+2
  7186  0EFC  0869               	movf	_DMX_loop$1388,w
  7187  0EFD  00CA               	movwf	___ftadd@f1
  7188  0EFE  086A               	movf	_DMX_loop$1388+1,w
  7189  0EFF  00CB               	movwf	___ftadd@f1+1
  7190  0F00  086B               	movf	_DMX_loop$1388+2,w
  7191  0F01  00CC               	movwf	___ftadd@f1+2
  7192  0F02  0008               	return
  7193  0F03                     __end_ofPL48:	
  7194  0F03                     PL52:	
  7195  0F03  3FC2               	movwi [2]fsr1
  7196  0F04  0021               	movlb	1	; select bank1
  7197  0F05  086E               	movf	_DMXPeriod^(0+128),w
  7198  0F06  0023               	movlb	3	; select bank3
  7199  0F07  00D8               	movwf	??_DMX_loop^(0+384)
  7200  0F08  36D8               	lsrf	??_DMX_loop^(0+384),f
  7201  0F09  36D8               	lsrf	??_DMX_loop^(0+384),f
  7202  0F0A  0858               	movf	??_DMX_loop^(0+384),w
  7203  0F0B  0020               	movlb	0	; select bank0
  7204  0F0C  00A8               	movwf	___awtoft@c
  7205  0F0D  01A9               	clrf	___awtoft@c+1
  7206  0F0E  0008               	return
  7207  0F0F                     __end_ofPL52:	
  7208  0F0F                     PL58:	
  7209  0F0F  0828               	movf	?___awtoft,w
  7210  0F10  00BB               	movwf	___ftdiv@f2
  7211  0F11  0829               	movf	?___awtoft+1,w
  7212  0F12  00BC               	movwf	___ftdiv@f2+1
  7213  0F13  082A               	movf	?___awtoft+2,w
  7214  0F14  00BD               	movwf	___ftdiv@f2+2
  7215  0F15  0008               	return
  7216  0F16                     __end_ofPL58:	
  7217  0F16                     PL60:	
  7218  0F16  0828               	movf	?___lbtoft,w
  7219  0F17  00D6               	movwf	___ftsub@f2
  7220  0F18  0829               	movf	?___lbtoft+1,w
  7221  0F19  00D7               	movwf	___ftsub@f2+1
  7222  0F1A  082A               	movf	?___lbtoft+2,w
  7223  0F1B  00D8               	movwf	___ftsub@f2+2
  7224  0F1C  0008               	return
  7225  0F1D                     __end_ofPL60:	
  7226  0F1D                     PL62:	
  7227  0F1D  3084               	movlw	high (_PWM| (0+32768))
  7228  0F1E  3D59               	addwfc	(??_DMX_loop+1)^(0+384),w
  7229  0F1F  0085               	movwf	5
  7230  0F20  3F00               	moviw [0]fsr0
  7231  0F21  0020               	movlb	0	; select bank0
  7232  0F22  00A8               	movwf	___lwtoft@c
  7233  0F23  3F01               	moviw [1]fsr0
  7234  0F24  00A9               	movwf	___lwtoft@c+1
  7235  0F25  0008               	return
  7236  0F26                     __end_ofPL62:	
  7237  0F26                     PL68:	
  7238  0F26  356C               	lslf	DMX_loop@Addr,w
  7239  0F27  3E5E               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  7240  0F28  0086               	movwf	6
  7241  0F29  356C               	lslf	DMX_loop@Addr,w
  7242  0F2A  3E5F               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  7243  0F2B  0084               	movwf	4
  7244  0F2C  3401               	retlw	1	; select bank2/3
  7245  0F2D                     __end_ofPL68:	
  7246  0F2D                     PL70:	
  7247  0F2D  3F40               	moviw [0]fsr1
  7248  0F2E  00CA               	movwf	___ftadd@f1
  7249  0F2F  3F41               	moviw [1]fsr1
  7250  0F30  00CB               	movwf	___ftadd@f1+1
  7251  0F31  3F42               	moviw [2]fsr1
  7252  0F32  00CC               	movwf	___ftadd@f1+2
  7253  0F33  0008               	return
  7254  0F34                     __end_ofPL70:	
  7255  0F34                     PL74:	
  7256  0F34  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  7257  0F35  0086               	movwf	6
  7258  0F36  30FC               	movlw	-4
  7259  0F37  0187               	clrf	7
  7260  0F38  0581               	andwf	1,f
  7261  0F39  0008               	return
  7262  0F3A                     __end_ofPL74:	
  7263  0F3A                     PL78:	
  7264  0F3A  085C               	movf	___fttol@f1,w
  7265  0F3B  00E0               	movwf	??___fttol
  7266  0F3C  085D               	movf	___fttol@f1+1,w
  7267  0F3D  00E1               	movwf	??___fttol+1
  7268  0F3E  085E               	movf	___fttol@f1+2,w
  7269  0F3F  00E2               	movwf	??___fttol+2
  7270  0F40  0008               	return
  7271  0F41                     __end_ofPL78:	
  7272  0F41                     PL80:	
  7273  0F41  0856               	movf	?___ftsub,w
  7274  0F42  3FC0               	movwi [0]fsr1
  7275  0F43  0857               	movf	?___ftsub+1,w
  7276  0F44  3FC1               	movwi [1]fsr1
  7277  0F45  0858               	movf	?___ftsub+2,w
  7278  0F46  0008               	return
  7279  0F47                     __end_ofPL80:	
  7280  0F47                     PL82:	
  7281  0F47  084A               	movf	?___ftadd,w
  7282  0F48  00DC               	movwf	___fttol@f1
  7283  0F49  084B               	movf	?___ftadd+1,w
  7284  0F4A  00DD               	movwf	___fttol@f1+1
  7285  0F4B  084C               	movf	?___ftadd+2,w
  7286  0F4C  00DE               	movwf	___fttol@f1+2
  7287  0F4D  0008               	return
  7288  0F4E                     __end_ofPL82:	
  7289  0F4E                     PL84:	
  7290  0F4E  082C               	movf	?___ftmul,w
  7291  0F4F  00BE               	movwf	___ftdiv@f1
  7292  0F50  082D               	movf	?___ftmul+1,w
  7293  0F51  00BF               	movwf	___ftdiv@f1+1
  7294  0F52  082E               	movf	?___ftmul+2,w
  7295  0F53  00C0               	movwf	___ftdiv@f1+2
  7296  0F54  0008               	return
  7297  0F55                     __end_ofPL84:	
  7298  0F55                     PL86:	
  7299  0F55  083B               	movf	?___ftdiv,w
  7300  0F56  3FC0               	movwi [0]fsr1
  7301  0F57  083C               	movf	?___ftdiv+1,w
  7302  0F58  3FC1               	movwi [1]fsr1
  7303  0F59  083D               	movf	?___ftdiv+2,w
  7304  0F5A  3FC2               	movwi [2]fsr1
  7305  0F5B  0008               	return
  7306  0F5C                     __end_ofPL86:	
  7307  0F5C                     PL88:	
  7308  0F5C  082F               	movf	___ftmul@f2,w
  7309  0F5D  07B6               	addwf	___ftmul@f3_as_product,f
  7310  0F5E  0830               	movf	___ftmul@f2+1,w
  7311  0F5F  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  7312  0F60  0831               	movf	___ftmul@f2+2,w
  7313  0F61  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  7314  0F62  0008               	return
  7315  0F63                     __end_ofPL88:	
  7316  0F63                     PL90:	
  7317  0F63  0856               	movf	?___ftsub,w
  7318  0F64  00BE               	movwf	___ftdiv@f1
  7319  0F65  0857               	movf	?___ftsub+1,w
  7320  0F66  00BF               	movwf	___ftdiv@f1+1
  7321  0F67  0858               	movf	?___ftsub+2,w
  7322  0F68  00C0               	movwf	___ftdiv@f1+2
  7323  0F69  0008               	return
  7324  0F6A                     __end_ofPL90:	
  7325  0F6A                     PL98:	
  7326  0F6A  0856               	movf	?___ftsub,w
  7327  0F6B  00AC               	movwf	___ftmul@f1
  7328  0F6C  0857               	movf	?___ftsub+1,w
  7329  0F6D  00AD               	movwf	___ftmul@f1+1
  7330  0F6E  0858               	movf	?___ftsub+2,w
  7331  0F6F  00AE               	movwf	___ftmul@f1+2
  7332  0F70  0008               	return
  7333  0F71                     __end_ofPL98:	
  7334  0F71                     PL100:	
  7335  0F71  084A               	movf	?___ftadd,w
  7336  0F72  3FC0               	movwi [0]fsr1
  7337  0F73  084B               	movf	?___ftadd+1,w
  7338  0F74  3FC1               	movwi [1]fsr1
  7339  0F75  084C               	movf	?___ftadd+2,w
  7340  0F76  0008               	return
  7341  0F77                     __end_ofPL100:	
  7342  0F77                     PL108:	
  7343  0F77  30FF               	movlw	255
  7344  0F78  06CD               	xorwf	___ftadd@f2,f
  7345  0F79  06CE               	xorwf	___ftadd@f2+1,f
  7346  0F7A  06CF               	xorwf	___ftadd@f2+2,f
  7347  0F7B  0ACD               	incf	___ftadd@f2,f
  7348  0F7C  0008               	return
  7349  0F7D                     __end_ofPL108:	
  7350  0F7D                     PL110:	
  7351  0F7D  3EB3               	addlw	(low (_DMXSign| 0))& (0+255)
  7352  0F7E  0086               	movwf	6
  7353  0F7F  0187               	clrf	7
  7354  0F80  0801               	movf	1,w
  7355  0F81  39FC               	andlw	-4
  7356  0F82  0008               	return
  7357  0F83                     __end_ofPL110:	
  7358  0F83                     PL114:	
  7359  0F83  0084               	movwf	4
  7360  0F84  3001               	movlw	1	; select bank2/3
  7361  0F85  0085               	movwf	5
  7362  0F86  0800               	movf	0,w
  7363  0F87  0081               	movwf	1
  7364  0F88  0008               	return
  7365  0F89                     __end_ofPL114:	
  7366  0F89                     PL116:	
  7367  0F89  086C               	movf	DMX_loop@Addr,w
  7368  0F8A  3E5A               	addlw	(low (_RxData| (0+256)))& (0+255)
  7369  0F8B  0086               	movwf	6
  7370  0F8C  3001               	movlw	1	; select bank2/3
  7371  0F8D  0087               	movwf	7
  7372  0F8E  0008               	return
  7373  0F8F                     __end_ofPL116:	
  7374  0F8F                     PL122:	
  7375  0F8F  01BB               	clrf	?___ftdiv
  7376  0F90  01BC               	clrf	?___ftdiv+1
  7377  0F91  01BD               	clrf	?___ftdiv+2
  7378  0F92  0008               	return
  7379  0F93                     __end_ofPL122:	
  7380  0F93                     PL126:	
  7381  0F93  01AC               	clrf	?___ftmul
  7382  0F94  01AD               	clrf	?___ftmul+1
  7383  0F95  01AE               	clrf	?___ftmul+2
  7384  0F96  0008               	return
  7385  0F97                     __end_ofPL126:	
  7386  0F97                     __ptext12:	
  7387 ;; *************** function ___lwtoft *****************
  7388 ;; Defined at:
  7389 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  c               2    8[BANK0 ] unsigned int 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  3    8[BANK0 ] float 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, pclath, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 1F/0
  7400 ;;		On exit  : 1F/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7403 ;;      Params:         0       3       0       0       0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0
  7406 ;;      Totals:         0       3       0       0       0       0       0       0
  7407 ;;Total ram usage:        3 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    3
  7410 ;; This function calls:
  7411 ;;		___ftpack
  7412 ;; This function is called by:
  7413 ;;		_DMX_loop
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           
  7418                           ;psect for function ___lwtoft
  7419  0F97                     ___lwtoft:	
  7420                           
  7421                           ;incstack = 0
  7422                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7423  0F97  0828               	movf	___lwtoft@c,w
  7424  0F98  00A0               	movwf	___ftpack@arg
  7425  0F99  0829               	movf	___lwtoft@c+1,w
  7426  0F9A  00A1               	movwf	___ftpack@arg+1
  7427  0F9B  308E               	movlw	142
  7428  0F9C  01A2               	clrf	___ftpack@arg+2
  7429  0F9D  00A3               	movwf	___ftpack@exp
  7430  0F9E  01A4               	clrf	___ftpack@sign
  7431  0F9F  27C2               	fcall	___ftpack
  7432  0FA0  0820               	movf	?___ftpack,w
  7433  0FA1  00A8               	movwf	?___lwtoft
  7434  0FA2  0821               	movf	?___ftpack+1,w
  7435  0FA3  00A9               	movwf	?___lwtoft+1
  7436  0FA4  0822               	movf	?___ftpack+2,w
  7437  0FA5  00AA               	movwf	?___lwtoft+2
  7438  0FA6  0008               	return
  7439  0FA7                     __end_of___lwtoft:	
  7440  0FA7                     __ptext20:	
  7441 ;; *************** function ___awtoft *****************
  7442 ;; Defined at:
  7443 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  c               2    8[BANK0 ] int 
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;  sign            1    4[COMMON] unsigned char 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  3    8[BANK0 ] float 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, pclath, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 1F/0
  7454 ;;		On exit  : 1F/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7457 ;;      Params:         0       3       0       0       0       0       0       0
  7458 ;;      Locals:         1       0       0       0       0       0       0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0
  7460 ;;      Totals:         1       3       0       0       0       0       0       0
  7461 ;;Total ram usage:        4 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    3
  7464 ;; This function calls:
  7465 ;;		___ftpack
  7466 ;; This function is called by:
  7467 ;;		_DMX_loop
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           
  7472                           ;psect for function ___awtoft
  7473  0FA7                     ___awtoft:	
  7474                           
  7475                           ;incstack = 0
  7476                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7477  0FA7  01F4               	clrf	___awtoft@sign
  7478  0FA8  1FA9               	btfss	___awtoft@c+1,7
  7479  0FA9  2FB1               	goto	l4313
  7480  0FAA  09A8               	comf	___awtoft@c,f
  7481  0FAB  09A9               	comf	___awtoft@c+1,f
  7482  0FAC  0AA8               	incf	___awtoft@c,f
  7483  0FAD  1903               	skipnz
  7484  0FAE  0AA9               	incf	___awtoft@c+1,f
  7485  0FAF  01F4               	clrf	___awtoft@sign
  7486  0FB0  0AF4               	incf	___awtoft@sign,f
  7487  0FB1                     l4313:	
  7488  0FB1  0828               	movf	___awtoft@c,w
  7489  0FB2  00A0               	movwf	___ftpack@arg
  7490  0FB3  0829               	movf	___awtoft@c+1,w
  7491  0FB4  00A1               	movwf	___ftpack@arg+1
  7492  0FB5  308E               	movlw	142
  7493  0FB6  01A2               	clrf	___ftpack@arg+2
  7494  0FB7  00A3               	movwf	___ftpack@exp
  7495  0FB8  0874               	movf	___awtoft@sign,w
  7496  0FB9  00A4               	movwf	___ftpack@sign
  7497  0FBA  27C2               	fcall	___ftpack
  7498  0FBB  0820               	movf	?___ftpack,w
  7499  0FBC  00A8               	movwf	?___awtoft
  7500  0FBD  0821               	movf	?___ftpack+1,w
  7501  0FBE  00A9               	movwf	?___awtoft+1
  7502  0FBF  0822               	movf	?___ftpack+2,w
  7503  0FC0  00AA               	movwf	?___awtoft+2
  7504  0FC1  0008               	return
  7505  0FC2                     __end_of___awtoft:	
  7506  0FC2                     __ptext21:	
  7507 ;; *************** function ___ftpack *****************
  7508 ;; Defined at:
  7509 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  arg             3    0[BANK0 ] unsigned um
  7512 ;;  exp             1    3[BANK0 ] unsigned char 
  7513 ;;  sign            1    4[BANK0 ] unsigned char 
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  3    0[BANK0 ] float 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 1F/0
  7522 ;;		On exit  : 1F/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7525 ;;      Params:         0       5       0       0       0       0       0       0
  7526 ;;      Locals:         0       0       0       0       0       0       0       0
  7527 ;;      Temps:          0       3       0       0       0       0       0       0
  7528 ;;      Totals:         0       8       0       0       0       0       0       0
  7529 ;;Total ram usage:        8 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    2
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		___awtoft
  7536 ;;		___ftadd
  7537 ;;		___ftdiv
  7538 ;;		___ftmul
  7539 ;;		___lbtoft
  7540 ;;		___lwtoft
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function ___ftpack
  7546  0FC2                     ___ftpack:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7550  0FC2  0823               	movf	___ftpack@exp,w
  7551  0FC3  1903               	btfsc	3,2
  7552  0FC4  2FCA               	goto	l1235
  7553  0FC5  0822               	movf	___ftpack@arg+2,w
  7554  0FC6  0421               	iorwf	___ftpack@arg+1,w
  7555  0FC7  0420               	iorwf	___ftpack@arg,w
  7556  0FC8  1D03               	skipz
  7557  0FC9  2FD2               	goto	l3999
  7558  0FCA                     l1235:	
  7559  0FCA  01A0               	clrf	?___ftpack
  7560  0FCB  01A1               	clrf	?___ftpack+1
  7561  0FCC  01A2               	clrf	?___ftpack+2
  7562  0FCD  0008               	return
  7563  0FCE                     l3997:	
  7564  0FCE  0AA3               	incf	___ftpack@exp,f
  7565  0FCF  36A2               	lsrf	___ftpack@arg+2,f
  7566  0FD0  0CA1               	rrf	___ftpack@arg+1,f
  7567  0FD1  0CA0               	rrf	___ftpack@arg,f
  7568  0FD2                     l3999:	
  7569  0FD2  30FE               	movlw	254
  7570  0FD3  0522               	andwf	___ftpack@arg+2,w
  7571  0FD4  1903               	btfsc	3,2
  7572  0FD5  2FE0               	goto	l4003
  7573  0FD6  2FCE               	goto	l3997
  7574  0FD7                     l4001:	
  7575  0FD7  0AA3               	incf	___ftpack@exp,f
  7576  0FD8  0AA0               	incf	___ftpack@arg,f
  7577  0FD9  1903               	skipnz
  7578  0FDA  0AA1               	incf	___ftpack@arg+1,f
  7579  0FDB  1903               	skipnz
  7580  0FDC  0AA2               	incf	___ftpack@arg+2,f
  7581  0FDD  36A2               	lsrf	___ftpack@arg+2,f
  7582  0FDE  0CA1               	rrf	___ftpack@arg+1,f
  7583  0FDF  0CA0               	rrf	___ftpack@arg,f
  7584  0FE0                     l4003:	
  7585  0FE0  30FF               	movlw	255
  7586  0FE1  0522               	andwf	___ftpack@arg+2,w
  7587  0FE2  1903               	btfsc	3,2
  7588  0FE3  2FED               	goto	l4007
  7589  0FE4  2FD7               	goto	l4001
  7590  0FE5                     l4009:	
  7591  0FE5  3002               	movlw	2
  7592  0FE6  0223               	subwf	___ftpack@exp,w
  7593  0FE7  1C03               	btfss	3,0
  7594  0FE8  2FEF               	goto	l1247
  7595  0FE9  03A3               	decf	___ftpack@exp,f
  7596  0FEA  35A0               	lslf	___ftpack@arg,f
  7597  0FEB  0DA1               	rlf	___ftpack@arg+1,f
  7598  0FEC  0DA2               	rlf	___ftpack@arg+2,f
  7599  0FED                     l4007:	
  7600  0FED  1FA1               	btfss	___ftpack@arg+1,7
  7601  0FEE  2FE5               	goto	l4009
  7602  0FEF                     l1247:	
  7603  0FEF  1C23               	btfss	___ftpack@exp,0
  7604  0FF0  13A1               	bcf	___ftpack@arg+1,7
  7605  0FF1  36A3               	lsrf	___ftpack@exp,f
  7606  0FF2  0823               	movf	___ftpack@exp,w
  7607  0FF3  00A7               	movwf	??___ftpack+2
  7608  0FF4  01A6               	clrf	??___ftpack+1
  7609  0FF5  01A5               	clrf	??___ftpack
  7610  0FF6  0825               	movf	??___ftpack,w
  7611  0FF7  04A0               	iorwf	___ftpack@arg,f
  7612  0FF8  0826               	movf	??___ftpack+1,w
  7613  0FF9  04A1               	iorwf	___ftpack@arg+1,f
  7614  0FFA  0827               	movf	??___ftpack+2,w
  7615  0FFB  04A2               	iorwf	___ftpack@arg+2,f
  7616  0FFC  0824               	movf	___ftpack@sign,w
  7617  0FFD  1D03               	btfss	3,2
  7618  0FFE  17A2               	bsf	___ftpack@arg+2,7
  7619  0FFF  0008               	return
  7620  1000                     __end_of___ftpack:	
  7621                           
  7622                           	psect	intentry
  7623  0004                     __pintentry:	
  7624 ;; *************** function _isr *****************
  7625 ;; Defined at:
  7626 ;;		line 80 in file "main.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 1C/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7640 ;;      Params:         0       0       0       0       0       0       0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0
  7643 ;;      Totals:         0       0       0       0       0       0       0       0
  7644 ;;Total ram usage:        0 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    1
  7647 ;; This function calls:
  7648 ;;		_ADC_interrupt
  7649 ;;		_DMX_interrput
  7650 ;;		_RDM_tx_interrupt
  7651 ;;		_timer1_interrupt
  7652 ;; This function is called by:
  7653 ;;		Interrupt level 1
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657  0004                     _isr:	
  7658                           
  7659                           ;incstack = 0
  7660  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7661                           
  7662                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7663  0005  3180               	pagesel	$
  7664                           
  7665                           ;main.c: 81: ADC_interrupt();
  7666  0006  3187  27CC  3180   	fcall	_ADC_interrupt
  7667                           
  7668                           ;main.c: 83: DMX_interrput();
  7669  0009  3186  2609  3180   	fcall	_DMX_interrput
  7670                           
  7671                           ;main.c: 84: timer1_interrupt();
  7672  000C  3188  2063  3180   	fcall	_timer1_interrupt
  7673                           
  7674                           ;main.c: 85: RDM_tx_interrupt();
  7675  000F  3188  20D6         	fcall	_RDM_tx_interrupt
  7676  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7677  0012  0009               	retfie
  7678  0013                     __end_of_isr:	
  7679                           
  7680                           	psect	text26
  7681  0863                     __ptext26:	
  7682 ;; *************** function _timer1_interrupt *****************
  7683 ;; Defined at:
  7684 ;;		line 21 in file "Timer.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  2  122[None  ] int 
  7691 ;; Registers used:
  7692 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 1E/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7698 ;;      Params:         0       0       0       0       0       0       0       0
  7699 ;;      Locals:         0       0       0       0       0       0       0       0
  7700 ;;      Temps:          1       0       0       0       0       0       0       0
  7701 ;;      Totals:         1       0       0       0       0       0       0       0
  7702 ;;Total ram usage:        1 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_isr
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           
  7712                           ;psect for function _timer1_interrupt
  7713  0863                     _timer1_interrupt:	
  7714                           
  7715                           ;Timer.c: 22: if (TMR1IE && TMR1IF) {
  7716                           
  7717                           ;incstack = 0
  7718                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
  7719  0863  0021               	movlb	1	; select bank1
  7720  0864  1C11               	btfss	17,0	;volatile
  7721  0865  0008               	return
  7722  0866  0020               	movlb	0	; select bank0
  7723  0867  1C11               	btfss	17,0	;volatile
  7724  0868  0008               	return
  7725                           
  7726                           ;Timer.c: 23: TMR1IF = 0;
  7727  0869  1011               	bcf	17,0	;volatile
  7728                           
  7729                           ;Timer.c: 24: switch (TimerState) {
  7730  086A  28C3               	goto	i1l3735
  7731  086B                     i1l3689:	
  7732                           
  7733                           ;Timer.c: 26: TimerState = TIMER_500US;
  7734  086B  01CC               	clrf	_TimerState^(0+128)	;volatile
  7735  086C                     i1l3691:	
  7736                           
  7737                           ;Timer.c: 36: if(ADIE==RA5){
  7738  086C  0020               	movlb	0	; select bank0
  7739  086D  1E8C               	btfss	12,5	;volatile
  7740  086E  2871               	goto	u245_20
  7741  086F  3001               	movlw	1
  7742  0870  2872               	goto	u245_22
  7743  0871                     u245_20:	
  7744  0871  3000               	movlw	0
  7745  0872                     u245_22:	
  7746  0872  00F0               	movwf	??_timer1_interrupt
  7747  0873  0021               	movlb	1	; select bank1
  7748  0874  1F11               	btfss	17,6	;volatile
  7749  0875  2878               	goto	u246_20
  7750  0876  3001               	movlw	1
  7751  0877  2879               	goto	u246_22
  7752  0878                     u246_20:	
  7753  0878  3000               	movlw	0
  7754  0879                     u246_22:	
  7755  0879  0670               	xorwf	??_timer1_interrupt,w
  7756  087A  1903               	btfsc	3,2
  7757                           
  7758                           ;Timer.c: 37: Timer.Switch=1;
  7759  087B  1432               	bsf	(_Timer^(0+128)+6),0	;volatile
  7760                           
  7761                           ;Timer.c: 38: }
  7762                           ;Timer.c: 39: TMR1 = 0xFE0B;
  7763  087C  20D0  3188         	fcall	PL104	;call to abstracted procedure
  7764                           
  7765                           ;Timer.c: 40: RxTimer++;
  7766  087E  0021               	movlb	1	; select bank1
  7767  087F  0AC6               	incf	_RxTimer^(0+128),f	;volatile
  7768  0880  1903               	skipnz
  7769  0881  0AC7               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7770                           
  7771                           ;Timer.c: 41: if (RxTimer == 2400) {
  7772  0882  3060               	movlw	96
  7773  0883  0646               	xorwf	_RxTimer^(0+128),w	;volatile
  7774  0884  3009               	movlw	9
  7775  0885  1903               	skipnz
  7776  0886  0647               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7777  0887  1D03               	btfss	3,2
  7778  0888  288E               	goto	i1l3703
  7779                           
  7780                           ;Timer.c: 42: RxTimer = 2400 + 1;
  7781  0889  3061               	movlw	97
  7782  088A  00C6               	movwf	_RxTimer^(0+128)	;volatile
  7783  088B  3009               	movlw	9
  7784  088C  00C7               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7785                           
  7786                           ;Timer.c: 43: DMX_Flags.RxTimeout = 1;
  7787  088D  1576               	bsf	_DMX_Flags,2	;volatile
  7788  088E                     i1l3703:	
  7789                           
  7790                           ;Timer.c: 44: }
  7791                           ;Timer.c: 46: Timer.MS_Count++;
  7792  088E  0AAD               	incf	(_Timer^(0+128)+1),f	;volatile
  7793  088F  1903               	skipnz
  7794  0890  0AAE               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7795                           
  7796                           ;Timer.c: 47: Timer.MS = 1;
  7797  0891  142C               	bsf	_Timer^(0+128),0	;volatile
  7798                           
  7799                           ;Timer.c: 48: if (Timer.MS_Count == 1000)
  7800  0892  30E8               	movlw	232
  7801  0893  062D               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7802  0894  3003               	movlw	3
  7803  0895  1903               	skipnz
  7804  0896  062E               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7805  0897  1D03               	btfss	3,2
  7806  0898  0008               	return
  7807                           
  7808                           ;Timer.c: 49: {
  7809                           ;Timer.c: 50: Timer.MS_Count = 0;
  7810  0899  01AD               	clrf	(_Timer^(0+128)+1)	;volatile
  7811  089A  01AE               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7812                           
  7813                           ;Timer.c: 51: Timer.SEC_Count++;
  7814  089B  0AAF               	incf	(_Timer^(0+128)+3),f	;volatile
  7815                           
  7816                           ;Timer.c: 52: Timer.SEC = 1;
  7817  089C  14AC               	bsf	_Timer^(0+128),1	;volatile
  7818                           
  7819                           ;Timer.c: 53: if (Timer.SEC_Count == 60)
  7820  089D  303C               	movlw	60
  7821  089E  062F               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7822  089F  1D03               	btfss	3,2
  7823  08A0  0008               	return
  7824                           
  7825                           ;Timer.c: 54: {
  7826                           ;Timer.c: 55: Timer.SEC_Count = 0;
  7827  08A1  01AF               	clrf	(_Timer^(0+128)+3)	;volatile
  7828                           
  7829                           ;Timer.c: 56: Timer.MIN_Count++;
  7830  08A2  0AB0               	incf	(_Timer^(0+128)+4),f	;volatile
  7831                           
  7832                           ;Timer.c: 57: Timer.MIN = 1;
  7833  08A3  152C               	bsf	_Timer^(0+128),2	;volatile
  7834                           
  7835                           ;Timer.c: 59: if (Timer.MIN_Count == 60)
  7836  08A4  303C               	movlw	60
  7837  08A5  0630               	xorwf	(_Timer^(0+128)+4),w	;volatile
  7838  08A6  1D03               	btfss	3,2
  7839  08A7  0008               	return
  7840                           
  7841                           ;Timer.c: 60: {
  7842                           ;Timer.c: 61: Timer.MIN_Count = 0;
  7843  08A8  01B0               	clrf	(_Timer^(0+128)+4)	;volatile
  7844                           
  7845                           ;Timer.c: 62: Timer.HR_Count++;
  7846  08A9  0AB1               	incf	(_Timer^(0+128)+5),f	;volatile
  7847                           
  7848                           ;Timer.c: 63: Timer.HR = 1;
  7849  08AA  15AC               	bsf	_Timer^(0+128),3	;volatile
  7850  08AB  0008               	return
  7851  08AC                     i1l873:	
  7852                           ;Timer.c: 70: case TIMER_BREAK:
  7853                           
  7854                           
  7855                           ;Timer.c: 71: LATC4 = 1;
  7856  08AC  0022               	movlb	2	; select bank2
  7857  08AD  160E               	bsf	14,4	;volatile
  7858                           
  7859                           ;Timer.c: 72: TMR1 = 0xFFEB;
  7860  08AE  30FF               	movlw	255
  7861  08AF  0020               	movlb	0	; select bank0
  7862  08B0  0097               	movwf	23	;volatile
  7863  08B1  30EB               	movlw	235
  7864  08B2  0096               	movwf	22	;volatile
  7865                           
  7866                           ;Timer.c: 73: TimerState = TX_TIMER_MAB;
  7867  08B3  3002               	movlw	2
  7868  08B4  0021               	movlb	1	; select bank1
  7869  08B5  00CC               	movwf	_TimerState^(0+128)	;volatile
  7870                           
  7871                           ;Timer.c: 74: break;
  7872  08B6  0008               	return
  7873  08B7                     i1l874:	
  7874                           ;Timer.c: 76: case TX_TIMER_MAB:
  7875                           
  7876                           
  7877                           ;Timer.c: 77: TXEN = 1;
  7878  08B7  0023               	movlb	3	; select bank3
  7879  08B8  169E               	bsf	30,5	;volatile
  7880                           
  7881                           ;Timer.c: 78: TXIE = 1;
  7882  08B9  0021               	movlb	1	; select bank1
  7883  08BA  1611               	bsf	17,4	;volatile
  7884                           
  7885                           ;Timer.c: 79: TMR1 = 0xFCDF;
  7886  08BB  30FC               	movlw	252
  7887  08BC  0020               	movlb	0	; select bank0
  7888  08BD  0097               	movwf	23	;volatile
  7889  08BE  30DF               	movlw	223
  7890  08BF  0096               	movwf	22	;volatile
  7891                           
  7892                           ;Timer.c: 80: TimerState = TIMER_500US;
  7893  08C0  0021               	movlb	1	; select bank1
  7894  08C1  01CC               	clrf	_TimerState^(0+128)	;volatile
  7895                           
  7896                           ;Timer.c: 81: break;
  7897  08C2  0008               	return
  7898  08C3                     i1l3735:	
  7899  08C3  0021               	movlb	1	; select bank1
  7900  08C4  084C               	movf	_TimerState^(0+128),w	;volatile
  7901                           
  7902                           ; Switch size 1, requested type "space"
  7903                           ; Number of cases is 3, Range of values is 0 to 2
  7904                           ; switch strategies available:
  7905                           ; Name         Instructions Cycles
  7906                           ; simple_byte           10     6 (average)
  7907                           ; direct_byte           12     6 (fixed)
  7908                           ; jumptable            260     6 (fixed)
  7909                           ;	Chosen strategy is simple_byte
  7910  08C5  3A00               	xorlw	0	; case 0
  7911  08C6  1903               	skipnz
  7912  08C7  286C               	goto	i1l3691
  7913  08C8  3A01               	xorlw	1	; case 1
  7914  08C9  1903               	skipnz
  7915  08CA  28AC               	goto	i1l873
  7916  08CB  3A03               	xorlw	3	; case 2
  7917  08CC  1903               	skipnz
  7918  08CD  28B7               	goto	i1l874
  7919  08CE  286B               	goto	i1l3689
  7920  08CF  0008               	return
  7921  08D0                     __end_of_timer1_interrupt:	
  7922  08D0                     PL104:	
  7923  08D0  30FE               	movlw	254
  7924  08D1  0020               	movlb	0	; select bank0
  7925  08D2  0097               	movwf	23	;volatile
  7926  08D3  300B               	movlw	11
  7927  08D4  0096               	movwf	22	;volatile
  7928  08D5  0008               	return
  7929  08D6                     __end_ofPL104:	
  7930                           
  7931                           	psect	text27
  7932  08D6                     __ptext27:	
  7933 ;; *************** function _RDM_tx_interrupt *****************
  7934 ;; Defined at:
  7935 ;;		line 120 in file "RDM.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;		None
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;		None
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  2  124[None  ] int 
  7942 ;; Registers used:
  7943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7944 ;; Tracked objects:
  7945 ;;		On entry : 1E/0
  7946 ;;		On exit  : 1C/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7949 ;;      Params:         0       0       0       0       0       0       0       0
  7950 ;;      Locals:         0       0       0       0       0       0       0       0
  7951 ;;      Temps:          4       0       0       0       0       0       0       0
  7952 ;;      Totals:         4       0       0       0       0       0       0       0
  7953 ;;Total ram usage:        4 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; This function calls:
  7956 ;;		Nothing
  7957 ;; This function is called by:
  7958 ;;		_isr
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _RDM_tx_interrupt
  7964  08D6                     _RDM_tx_interrupt:	
  7965                           
  7966                           ;RDM.c: 121: if (TXIE && TXIF) {
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  7970  08D6  0021               	movlb	1	; select bank1
  7971  08D7  1E11               	btfss	17,4	;volatile
  7972  08D8  0008               	return
  7973  08D9  0020               	movlb	0	; select bank0
  7974  08DA  1E11               	btfss	17,4	;volatile
  7975  08DB  0008               	return
  7976  08DC  2945               	goto	i1l3795
  7977  08DD                     i1l3743:	
  7978                           
  7979                           ;RDM.c: 124: if(TX_PD_Flag==1){
  7980  08DD  033A               	decf	_TX_PD_Flag^(0+128),w	;volatile
  7981  08DE  043B               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7982  08DF  1D03               	btfss	3,2
  7983  08E0  28E7               	goto	i1l3749
  7984                           
  7985                           ;RDM.c: 125: TX_PD_Flag=0;
  7986  08E1  01BA               	clrf	_TX_PD_Flag^(0+128)	;volatile
  7987  08E2  01BB               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7988  08E3                     i1l3747:	
  7989                           
  7990                           ;RDM.c: 126: TXREG = 0xCC;
  7991  08E3  30CC               	movlw	204
  7992  08E4  0023               	movlb	3	; select bank3
  7993  08E5  009A               	movwf	26	;volatile
  7994                           
  7995                           ;RDM.c: 127: }else{
  7996  08E6  0008               	return
  7997  08E7                     i1l3749:	
  7998                           
  7999                           ;RDM.c: 128: TXREG = 0x01;
  8000  08E7  3001               	movlw	1
  8001  08E8  0023               	movlb	3	; select bank3
  8002  08E9  009A               	movwf	26	;volatile
  8003                           
  8004                           ;RDM.c: 129: TxByte = &TX_RDM_Data.value[23];
  8005  08EA  30EB               	movlw	low (_TX_RDM_Data+23)
  8006  08EB  0021               	movlb	1	; select bank1
  8007  08EC  00C2               	movwf	_TxByte^(0+128)
  8008  08ED  3000               	movlw	high (_TX_RDM_Data+23)
  8009  08EE  00C3               	movwf	(_TxByte+1)^(0+128)
  8010  08EF  3003               	movlw	3
  8011                           
  8012                           ;RDM.c: 130: TxCount = 0;
  8013  08F0  01C4               	clrf	_TxCount^(0+128)
  8014  08F1  01C5               	clrf	(_TxCount+1)^(0+128)
  8015                           
  8016                           ;RDM.c: 131: TxState = TX_DATA;
  8017  08F2  00CF               	movwf	_TxState^(0+128)	;volatile
  8018  08F3  0008               	return
  8019  08F4                     i1l3757:	
  8020                           
  8021                           ;RDM.c: 135: TxState = TX_DISCOVERY;
  8022  08F4  01CF               	clrf	_TxState^(0+128)	;volatile
  8023  08F5  28E3               	goto	i1l3747
  8024  08F6                     i1l3761:	
  8025                           
  8026                           ;RDM.c: 139: if (TxCount <= 24) {
  8027  08F6  3000               	movlw	0
  8028  08F7  0245               	subwf	(_TxCount+1)^(0+128),w
  8029  08F8  3019               	movlw	25
  8030  08F9  1903               	skipnz
  8031  08FA  0244               	subwf	_TxCount^(0+128),w
  8032  08FB  1803               	skipnc
  8033  08FC  2901               	goto	i1l719
  8034                           
  8035                           ;RDM.c: 141: TXREG = *TxByte;
  8036                           
  8037                           ;RDM.c: 142: TxByte--;
  8038                           
  8039                           ;RDM.c: 143: TxCount++;
  8040  08FD  2151               	fcall	PL42	;call to abstracted procedure
  8041  08FE  1903               	skipnz
  8042  08FF  0AC5               	incf	(_TxCount+1)^(0+128),f
  8043                           
  8044                           ;RDM.c: 144: }else{
  8045  0900  0008               	return
  8046  0901                     i1l719:	
  8047                           
  8048                           ;RDM.c: 145: LATC4 = 1;
  8049  0901  0022               	movlb	2	; select bank2
  8050  0902  160E               	bsf	14,4	;volatile
  8051                           
  8052                           ;RDM.c: 146: TXEN = 0;
  8053  0903  0023               	movlb	3	; select bank3
  8054  0904  129E               	bcf	30,5	;volatile
  8055                           
  8056                           ;RDM.c: 147: TXIE = 0;
  8057  0905  0021               	movlb	1	; select bank1
  8058  0906  1211               	bcf	17,4	;volatile
  8059                           
  8060                           ;RDM.c: 148: LATC3=0;
  8061  0907  0022               	movlb	2	; select bank2
  8062  0908  118E               	bcf	14,3	;volatile
  8063  0909  0008               	return
  8064  090A                     i1l3769:	
  8065                           
  8066                           ;RDM.c: 152: if (TxCount <= 24) {
  8067  090A  3000               	movlw	0
  8068  090B  0245               	subwf	(_TxCount+1)^(0+128),w
  8069  090C  3019               	movlw	25
  8070  090D  1903               	skipnz
  8071  090E  0244               	subwf	_TxCount^(0+128),w
  8072  090F  1803               	skipnc
  8073  0910  2901               	goto	i1l719
  8074                           
  8075                           ;RDM.c: 154: TXREG = *TxByte;
  8076                           
  8077                           ;RDM.c: 155: TxByte--;
  8078                           
  8079                           ;RDM.c: 156: TxCount++;
  8080  0911  2151  3188         	fcall	PL42	;call to abstracted procedure
  8081  0913  1903               	skipnz
  8082  0914  0AC5               	incf	(_TxCount+1)^(0+128),f
  8083                           
  8084                           ;RDM.c: 157: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  8085  0915  3016               	movlw	22
  8086  0916  0644               	xorwf	_TxCount^(0+128),w
  8087  0917  0445               	iorwf	(_TxCount+1)^(0+128),w
  8088  0918  1D03               	btfss	3,2
  8089  0919  0008               	return
  8090  091A  0856               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  8091  091B  1903               	btfsc	3,2
  8092  091C  0008               	return
  8093  091D  083A               	movf	_TX_PD_Flag^(0+128),w	;volatile
  8094  091E  043B               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  8095  091F  1D03               	btfss	3,2
  8096  0920  0008               	return
  8097                           
  8098                           ;RDM.c: 158: TxState = TX_RDM_PD;
  8099  0921  3004               	movlw	4
  8100  0922  00CF               	movwf	_TxState^(0+128)	;volatile
  8101                           
  8102                           ;RDM.c: 159: TX_PDCount = 40-1;
  8103  0923  3027               	movlw	39
  8104  0924  00CE               	movwf	_TX_PDCount^(0+128)
  8105  0925  0008               	return
  8106  0926                     i1l3785:	
  8107                           
  8108                           ;RDM.c: 169: TXREG = PD[TX_PDCount];
  8109  0926  084E               	movf	_TX_PDCount^(0+128),w
  8110  0927  215F  3188         	fcall	PL76	;call to abstracted procedure
  8111  0929  0023               	movlb	3	; select bank3
  8112  092A  009A               	movwf	26	;volatile
  8113                           
  8114                           ;RDM.c: 170: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  8115  092B  01F1               	clrf	??_RDM_tx_interrupt+1
  8116  092C  0021               	movlb	1	; select bank1
  8117  092D  0856               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  8118  092E  3C28               	sublw	40
  8119  092F  00F0               	movwf	??_RDM_tx_interrupt
  8120  0930  1C03               	skipc
  8121  0931  03F1               	decf	??_RDM_tx_interrupt+1,f
  8122  0932  084E               	movf	_TX_PDCount^(0+128),w
  8123  0933  00F2               	movwf	??_RDM_tx_interrupt+2
  8124  0934  01F3               	clrf	??_RDM_tx_interrupt+3
  8125  0935  0871               	movf	??_RDM_tx_interrupt+1,w
  8126  0936  0673               	xorwf	??_RDM_tx_interrupt+3,w
  8127  0937  1D03               	skipz
  8128  0938  293B               	goto	u260_25
  8129  0939  0870               	movf	??_RDM_tx_interrupt,w
  8130  093A  0672               	xorwf	??_RDM_tx_interrupt+2,w
  8131  093B                     u260_25:	
  8132  093B  1D03               	skipz
  8133  093C  2943               	goto	i1l3791
  8134                           
  8135                           ;RDM.c: 171: TxState = TX_DATA;
  8136  093D  3003               	movlw	3
  8137  093E  00CF               	movwf	_TxState^(0+128)	;volatile
  8138                           
  8139                           ;RDM.c: 172: TX_PD_Flag = 1;
  8140  093F  3001               	movlw	1
  8141  0940  00BA               	movwf	_TX_PD_Flag^(0+128)	;volatile
  8142  0941  01BB               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  8143                           
  8144                           ;RDM.c: 173: }else{
  8145  0942  0008               	return
  8146  0943                     i1l3791:	
  8147                           
  8148                           ;RDM.c: 174: TX_PDCount--;
  8149  0943  03CE               	decf	_TX_PDCount^(0+128),f
  8150  0944  0008               	return
  8151  0945                     i1l3795:	
  8152  0945  0021               	movlb	1	; select bank1
  8153  0946  084F               	movf	_TxState^(0+128),w	;volatile
  8154                           
  8155                           ; Switch size 1, requested type "space"
  8156                           ; Number of cases is 5, Range of values is 0 to 4
  8157                           ; switch strategies available:
  8158                           ; Name         Instructions Cycles
  8159                           ; direct_byte           16     6 (fixed)
  8160                           ; simple_byte           16     9 (average)
  8161                           ; jumptable            260     6 (fixed)
  8162                           ;	Chosen strategy is direct_byte
  8163  0947  0084               	movwf	4
  8164  0948  3005               	movlw	5
  8165  0949  0204               	subwf	4,w
  8166  094A  1803               	skipnc
  8167  094B  0008               	return
  8168  094C  3187               	movlp	high i1S4969
  8169  094D  3504               	lslf	4,w
  8170  094E  3EC2               	addlw	low i1S4969
  8171  094F  0082               	movwf	2
  8172  0950  0008               	return
  8173  0951                     __end_of_RDM_tx_interrupt:	
  8174  0951                     PL42:	
  8175  0951  0842               	movf	_TxByte^(0+128),w
  8176  0952  0086               	movwf	6
  8177  0953  0843               	movf	(_TxByte+1)^(0+128),w
  8178  0954  0087               	movwf	7
  8179  0955  0801               	movf	1,w
  8180  0956  0023               	movlb	3	; select bank3
  8181  0957  009A               	movwf	26	;volatile
  8182  0958  3001               	movlw	1
  8183  0959  0021               	movlb	1	; select bank1
  8184  095A  02C2               	subwf	_TxByte^(0+128),f
  8185  095B  3000               	movlw	0
  8186  095C  3BC3               	subwfb	(_TxByte+1)^(0+128),f
  8187  095D  0AC4               	incf	_TxCount^(0+128),f
  8188  095E  0008               	return
  8189  095F                     __end_ofPL42:	
  8190  095F                     PL76:	
  8191  095F  3E8B               	addlw	139
  8192  0960  0086               	movwf	6
  8193  0961  3021               	movlw	33
  8194  0962  0187               	clrf	7
  8195  0963  3D87               	addwfc	7,f
  8196  0964  0801               	movf	1,w
  8197  0965  0008               	return
  8198  0966                     __end_ofPL76:	
  8199                           
  8200                           	psect	swtext1
  8201  07C2                     __pswtext1:	
  8202  07C2                     i1S4969:	
  8203  07C2  3188  28F6         	ljmp	i1l3761
  8204  07C4  3188  28DD         	ljmp	i1l3743
  8205  07C6  3188  28F4         	ljmp	i1l3757
  8206  07C8  3189  290A         	ljmp	i1l3769
  8207  07CA  3189  2926         	ljmp	i1l3785
  8208                           
  8209                           	psect	text28
  8210  0609                     __ptext28:	
  8211 ;; *************** function _DMX_interrput *****************
  8212 ;; Defined at:
  8213 ;;		line 184 in file "DMX.c"
  8214 ;; Parameters:    Size  Location     Type
  8215 ;;		None
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;                  2  120[None  ] int 
  8220 ;; Registers used:
  8221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8222 ;; Tracked objects:
  8223 ;;		On entry : 1F/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8227 ;;      Params:         0       0       0       0       0       0       0       0
  8228 ;;      Locals:         1       0       0       0       0       0       0       0
  8229 ;;      Temps:          2       0       0       0       0       0       0       0
  8230 ;;      Totals:         3       0       0       0       0       0       0       0
  8231 ;;Total ram usage:        3 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_isr
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           
  8241                           ;psect for function _DMX_interrput
  8242  0609                     _DMX_interrput:	
  8243                           
  8244                           ;DMX.c: 185: if (RCIE & RCIF) {
  8245                           
  8246                           ;incstack = 0
  8247                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8248  0609  3001               	movlw	1
  8249  060A  0021               	movlb	1	; select bank1
  8250  060B  1E91               	btfss	17,5	;volatile
  8251  060C  3900               	andlw	0
  8252  060D  0020               	movlb	0	; select bank0
  8253  060E  1E91               	btfss	17,5	;volatile
  8254  060F  3900               	andlw	0
  8255  0610  1C09               	btfss	9,0
  8256  0611  0008               	return
  8257                           
  8258                           ;DMX.c: 186: volatile char RxDat;
  8259                           ;DMX.c: 187: if (FERR)
  8260  0612  0023               	movlb	3	; select bank3
  8261  0613  1D1D               	btfss	29,2	;volatile
  8262  0614  2EC0               	goto	i1l3671
  8263                           
  8264                           ;DMX.c: 188: {
  8265                           ;DMX.c: 189: RxDat = RCREG;
  8266  0615  0819               	movf	25,w	;volatile
  8267  0616  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8268                           
  8269                           ;DMX.c: 190: DMX_Flags.RxBreak = 1;
  8270  0617  14F6               	bsf	_DMX_Flags,1	;volatile
  8271                           
  8272                           ;DMX.c: 191: RxState = WAIT_FOR_START;
  8273  0618  3001               	movlw	1
  8274  0619  0021               	movlb	1	; select bank1
  8275  061A  00D2               	movwf	_RxState^(0+128)	;volatile
  8276                           
  8277                           ;DMX.c: 192: RxTimer = 0;
  8278  061B  01C6               	clrf	_RxTimer^(0+128)	;volatile
  8279  061C  01C7               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8280  061D  2EC0               	goto	i1l3671
  8281  061E                     i1l3591:	
  8282                           
  8283                           ;DMX.c: 196: RxDat = RCREG;
  8284  061E  0023               	movlb	3	; select bank3
  8285  061F  0819               	movf	25,w	;volatile
  8286  0620  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8287                           
  8288                           ;DMX.c: 197: break;
  8289  0621  2ECB               	goto	i1l3673
  8290  0622                     i1l383:	
  8291                           ;DMX.c: 198: case WAIT_FOR_START:
  8292                           
  8293                           
  8294                           ;DMX.c: 199: if (RCIF)
  8295  0622  0020               	movlb	0	; select bank0
  8296  0623  1E91               	btfss	17,5	;volatile
  8297  0624  2ECB               	goto	i1l3673
  8298                           
  8299                           ;DMX.c: 200: {
  8300                           ;DMX.c: 201: RxDat = RCREG;
  8301  0625  0023               	movlb	3	; select bank3
  8302  0626  0819               	movf	25,w	;volatile
  8303  0627  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8304  0628  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8305  0629  1D03               	btfss	3,2
  8306  062A  2E37               	goto	i1l3601
  8307                           
  8308                           ;DMX.c: 204: RxState = RX_DMX_READ_DATA;
  8309  062B  3002               	movlw	2
  8310  062C  0021               	movlb	1	; select bank1
  8311  062D  00D2               	movwf	_RxState^(0+128)	;volatile
  8312                           
  8313                           ;DMX.c: 205: RxDataPtr = &RxData[0];
  8314  062E  305A               	movlw	(low (_RxData| (0+256)))& (0+255)
  8315  062F  00D3               	movwf	_RxDataPtr^(0+128)
  8316                           
  8317                           ;DMX.c: 206: RxAddrCount = 1;
  8318  0630  3001               	movlw	1
  8319  0631  00C8               	movwf	_RxAddrCount^(0+128)	;volatile
  8320  0632  01C9               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8321                           
  8322                           ;DMX.c: 208: DMXPeriod = DMXPeriodConst;
  8323  0633  0851               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8324  0634  00EE               	movwf	_DMXPeriod^(0+128)
  8325                           
  8326                           ;DMX.c: 209: DMXPeriodConst = 0;
  8327  0635  01D1               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8328                           
  8329                           ;DMX.c: 210: } else if (RxDat == 0xCC) {
  8330  0636  2ECB               	goto	i1l3673
  8331  0637                     i1l3601:	
  8332  0637  30CC               	movlw	204
  8333  0638  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8334  0639  1D03               	btfss	3,2
  8335  063A  2E3F               	goto	i1l3605
  8336                           
  8337                           ;DMX.c: 212: RxState = RX_RDM_READ_SubStartCode;
  8338  063B  3003               	movlw	3
  8339  063C  0021               	movlb	1	; select bank1
  8340  063D  00D2               	movwf	_RxState^(0+128)	;volatile
  8341                           
  8342                           ;DMX.c: 214: } else {
  8343  063E  2ECB               	goto	i1l3673
  8344  063F                     i1l3605:	
  8345                           
  8346                           ;DMX.c: 215: RxState = RX_WAIT_FOR_BREAK;
  8347  063F  0021               	movlb	1	; select bank1
  8348  0640  01D2               	clrf	_RxState^(0+128)	;volatile
  8349  0641  2ECB               	goto	i1l3673
  8350  0642                     i1l3607:	
  8351                           
  8352                           ;DMX.c: 220: RxDat = RCREG;
  8353  0642  0023               	movlb	3	; select bank3
  8354  0643  0819               	movf	25,w	;volatile
  8355  0644  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8356                           
  8357                           ;DMX.c: 221: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8358  0645  0021               	movlb	1	; select bank1
  8359  0646  086D               	movf	(_DMX_Address+1)^(0+128),w
  8360  0647  0249               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8361  0648  1D03               	skipz
  8362  0649  2E4C               	goto	u232_25
  8363  064A  086C               	movf	_DMX_Address^(0+128),w
  8364  064B  0248               	subwf	_RxAddrCount^(0+128),w	;volatile
  8365  064C                     u232_25:	
  8366  064C  1C03               	skipc
  8367  064D  2E56               	goto	i1l3615
  8368  064E  086C               	movf	_DMX_Address^(0+128),w
  8369  064F  046D               	iorwf	(_DMX_Address+1)^(0+128),w
  8370  0650  1903               	btfsc	3,2
  8371  0651  2E56               	goto	i1l3615
  8372                           
  8373                           ;DMX.c: 222: {
  8374                           ;DMX.c: 223: *RxDataPtr = RxDat;
  8375  0652  0853               	movf	_RxDataPtr^(0+128),w
  8376  0653  26DC  3186         	fcall	PL106	;call to abstracted procedure
  8377                           
  8378                           ;DMX.c: 224: RxDataPtr++;
  8379  0655  0AD3               	incf	_RxDataPtr^(0+128),f
  8380  0656                     i1l3615:	
  8381                           
  8382                           ;DMX.c: 225: }
  8383                           ;DMX.c: 226: RxAddrCount++;
  8384  0656  0AC8               	incf	_RxAddrCount^(0+128),f	;volatile
  8385  0657  1903               	skipnz
  8386  0658  0AC9               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8387                           
  8388                           ;DMX.c: 228: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8389  0659  086C               	movf	_DMX_Address^(0+128),w
  8390  065A  3E04               	addlw	4
  8391  065B  00F0               	movwf	??_DMX_interrput
  8392  065C  3000               	movlw	0
  8393  065D  3D6D               	addwfc	(_DMX_Address+1)^(0+128),w
  8394  065E  00F1               	movwf	??_DMX_interrput+1
  8395  065F  0249               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8396  0660  1D03               	skipz
  8397  0661  2E64               	goto	u234_25
  8398  0662  0870               	movf	??_DMX_interrput,w
  8399  0663  0248               	subwf	_RxAddrCount^(0+128),w	;volatile
  8400  0664                     u234_25:	
  8401  0664  1C03               	skipc
  8402  0665  2ECB               	goto	i1l3673
  8403  0666  086C               	movf	_DMX_Address^(0+128),w
  8404  0667  046D               	iorwf	(_DMX_Address+1)^(0+128),w
  8405  0668  1903               	btfsc	3,2
  8406  0669  2ECB               	goto	i1l3673
  8407                           
  8408                           ;DMX.c: 229: DMX_Flags.RxNew = 1;
  8409  066A  1476               	bsf	_DMX_Flags,0	;volatile
  8410                           
  8411                           ;DMX.c: 230: RxState = RX_WAIT_FOR_BREAK;
  8412                           
  8413                           ;DMX.c: 231: RxTimer = 0;
  8414                           
  8415                           ;DMX.c: 232: DMX_Flags.RxTimeout = 0;
  8416  066B  26E2  3186         	fcall	PL124	;call to abstracted procedure
  8417  066D  2ECB               	goto	i1l3673
  8418  066E                     i1l3627:	
  8419                           
  8420                           ;DMX.c: 236: RxDat = RCREG;
  8421  066E  0023               	movlb	3	; select bank3
  8422  066F  0819               	movf	25,w	;volatile
  8423  0670  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8424                           
  8425                           ;DMX.c: 237: if (RxDat == 0x01)
  8426  0671  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8427  0672  2ECB               	goto	i1l3673
  8428                           
  8429                           ;DMX.c: 238: {
  8430                           ;DMX.c: 239: RxState = RX_RDM_READ_DATA;
  8431  0673  3004               	movlw	4
  8432  0674  0021               	movlb	1	; select bank1
  8433  0675  00D2               	movwf	_RxState^(0+128)	;volatile
  8434                           
  8435                           ;DMX.c: 240: PackCount = 23;
  8436  0676  3017               	movlw	23
  8437  0677  00CD               	movwf	_PackCount^(0+128)	;volatile
  8438                           
  8439                           ;DMX.c: 241: PD_Flag = 0;
  8440  0678  01BC               	clrf	_PD_Flag^(0+128)	;volatile
  8441  0679  2EBC               	goto	L8
  8442  067A                     i1l3635:	
  8443                           
  8444                           ;DMX.c: 246: RxDat = RCREG;
  8445  067A  0023               	movlb	3	; select bank3
  8446  067B  0819               	movf	25,w	;volatile
  8447  067C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8448                           
  8449                           ;DMX.c: 247: RX_RDM_Data.value[PackCount] = RxDat;
  8450  067D  0021               	movlb	1	; select bank1
  8451  067E  084D               	movf	_PackCount^(0+128),w
  8452  067F  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8453  0680  26DC  3186         	fcall	PL106	;call to abstracted procedure
  8454                           
  8455                           ;DMX.c: 249: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8456  0682  3002               	movlw	2
  8457  0683  064D               	xorwf	_PackCount^(0+128),w	;volatile
  8458  0684  1D03               	btfss	3,2
  8459  0685  2E96               	goto	i1l3649
  8460  0686  084D               	movf	_PackCount^(0+128),w
  8461  0687  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8462  0688  0086               	movwf	6
  8463  0689  0801               	movf	1,w
  8464  068A  1903               	btfsc	3,2
  8465  068B  2E96               	goto	i1l3649
  8466  068C  083C               	movf	_PD_Flag^(0+128),w	;volatile
  8467  068D  043D               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8468  068E  1D03               	btfss	3,2
  8469  068F  2E96               	goto	i1l3649
  8470                           
  8471                           ;DMX.c: 250: RxState = RX_RDM_PD;
  8472  0690  3005               	movlw	5
  8473  0691  00D2               	movwf	_RxState^(0+128)	;volatile
  8474                           
  8475                           ;DMX.c: 251: PDCount = 101-1;
  8476  0692  3064               	movlw	100
  8477  0693  00F8               	movwf	_PDCount
  8478  0694                     i1l3647:	
  8479                           
  8480                           ;DMX.c: 252: PackCount--;
  8481  0694  03CD               	decf	_PackCount^(0+128),f	;volatile
  8482                           
  8483                           ;DMX.c: 253: break;
  8484  0695  2ECB               	goto	i1l3673
  8485  0696                     i1l3649:	
  8486                           
  8487                           ;DMX.c: 254: }
  8488                           ;DMX.c: 255: if (PackCount == 0) {
  8489  0696  084D               	movf	_PackCount^(0+128),w	;volatile
  8490  0697  1D03               	btfss	3,2
  8491  0698  2E94               	goto	i1l3647
  8492                           
  8493                           ;DMX.c: 256: DMX_Flags.RDMNew = 1;
  8494  0699  1776               	bsf	_DMX_Flags,6	;volatile
  8495                           
  8496                           ;DMX.c: 257: RxState = RX_WAIT_FOR_BREAK;
  8497                           
  8498                           ;DMX.c: 258: RxTimer = 0;
  8499                           
  8500                           ;DMX.c: 259: DMX_Flags.RxTimeout = 0;
  8501  069A  26E2  3186         	fcall	PL124	;call to abstracted procedure
  8502  069C  2E94               	goto	i1l3647
  8503  069D                     i1l3659:	
  8504                           
  8505                           ;DMX.c: 265: RxDat = RCREG;
  8506  069D  0023               	movlb	3	; select bank3
  8507  069E  0819               	movf	25,w	;volatile
  8508  069F  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8509                           
  8510                           ;DMX.c: 266: PD[PDCount] = RxDat;
  8511  06A0  0878               	movf	_PDCount,w
  8512  06A1  3E8B               	addlw	139
  8513  06A2  00F0               	movwf	??_DMX_interrput
  8514  06A3  3021               	movlw	33
  8515  06A4  01F1               	clrf	??_DMX_interrput+1
  8516  06A5  3DF1               	addwfc	??_DMX_interrput+1,f
  8517  06A6  0870               	movf	??_DMX_interrput,w
  8518  06A7  0086               	movwf	6
  8519  06A8  0871               	movf	??_DMX_interrput+1,w
  8520  06A9  0087               	movwf	7
  8521  06AA  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8522  06AB  0081               	movwf	1
  8523                           
  8524                           ;DMX.c: 267: if ((101 - RX_RDM_Data.PDL) == PDCount) {
  8525  06AC  01F1               	clrf	??_DMX_interrput+1
  8526  06AD  0022               	movlb	2	; select bank2
  8527  06AE  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8528  06AF  3C65               	sublw	101
  8529  06B0  00F0               	movwf	??_DMX_interrput
  8530  06B1  1C03               	skipc
  8531  06B2  03F1               	decf	??_DMX_interrput+1,f
  8532  06B3  0678               	xorwf	_PDCount,w
  8533  06B4  0471               	iorwf	??_DMX_interrput+1,w
  8534  06B5  1D03               	skipz
  8535  06B6  2EBE               	goto	i1l3667
  8536                           
  8537                           ;DMX.c: 268: RxState = RX_RDM_READ_DATA;
  8538  06B7  3004               	movlw	4
  8539  06B8  0021               	movlb	1	; select bank1
  8540  06B9  00D2               	movwf	_RxState^(0+128)	;volatile
  8541                           
  8542                           ;DMX.c: 269: PD_Flag = 1;
  8543  06BA  3001               	movlw	1
  8544  06BB  00BC               	movwf	_PD_Flag^(0+128)	;volatile
  8545  06BC                     L8:	
  8546  06BC  01BD               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8547                           
  8548                           ;DMX.c: 270: }else{
  8549  06BD  2ECB               	goto	i1l3673
  8550  06BE                     i1l3667:	
  8551                           
  8552                           ;DMX.c: 271: PDCount--;
  8553  06BE  03F8               	decf	_PDCount,f
  8554  06BF  2ECB               	goto	i1l3673
  8555  06C0                     i1l3671:	
  8556  06C0  0021               	movlb	1	; select bank1
  8557  06C1  0852               	movf	_RxState^(0+128),w	;volatile
  8558                           
  8559                           ; Switch size 1, requested type "space"
  8560                           ; Number of cases is 6, Range of values is 0 to 5
  8561                           ; switch strategies available:
  8562                           ; Name         Instructions Cycles
  8563                           ; direct_byte           18     6 (fixed)
  8564                           ; simple_byte           19    10 (average)
  8565                           ; jumptable            260     6 (fixed)
  8566                           ;	Chosen strategy is direct_byte
  8567  06C2  0084               	movwf	4
  8568  06C3  3006               	movlw	6
  8569  06C4  0204               	subwf	4,w
  8570  06C5  1803               	skipnc
  8571  06C6  2ECB               	goto	i1l3673
  8572  06C7  3187               	movlp	high i1S4971
  8573  06C8  3504               	lslf	4,w
  8574  06C9  3EB6               	addlw	low i1S4971
  8575  06CA  0082               	movwf	2
  8576  06CB                     i1l3673:	
  8577                           
  8578                           ;DMX.c: 275: if (RxTimer > 2400) {
  8579  06CB  0021               	movlb	1	; select bank1
  8580  06CC  0847               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8581  06CD  3A80               	xorlw	128
  8582  06CE  00F0               	movwf	??_DMX_interrput
  8583  06CF  3089               	movlw	137
  8584  06D0  0270               	subwf	??_DMX_interrput,w
  8585  06D1  1D03               	skipz
  8586  06D2  2ED5               	goto	u242_25
  8587  06D3  3061               	movlw	97
  8588  06D4  0246               	subwf	_RxTimer^(0+128),w	;volatile
  8589  06D5                     u242_25:	
  8590  06D5  1C03               	skipc
  8591  06D6  0008               	return
  8592                           
  8593                           ;DMX.c: 276: DMX_Flags.RxTimeout = 1;
  8594  06D7  1576               	bsf	_DMX_Flags,2	;volatile
  8595                           
  8596                           ;DMX.c: 277: RxTimer = 0;
  8597  06D8  0021               	movlb	1	; select bank1
  8598  06D9  01C6               	clrf	_RxTimer^(0+128)	;volatile
  8599  06DA  01C7               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8600  06DB  0008               	return
  8601  06DC                     __end_of_DMX_interrput:	
  8602  06DC                     PL106:	
  8603  06DC  0086               	movwf	6
  8604  06DD  3001               	movlw	1	; select bank2/3
  8605  06DE  0087               	movwf	7
  8606  06DF  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8607  06E0  0081               	movwf	1
  8608  06E1  0008               	return
  8609  06E2                     __end_ofPL106:	
  8610  06E2                     PL124:	
  8611  06E2  01D2               	clrf	_RxState^(0+128)	;volatile
  8612  06E3  01C6               	clrf	_RxTimer^(0+128)	;volatile
  8613  06E4  01C7               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8614  06E5  1176               	bcf	_DMX_Flags,2	;volatile
  8615  06E6  0008               	return
  8616  06E7                     __end_ofPL124:	
  8617                           
  8618                           	psect	swtext2
  8619  07B6                     __pswtext2:	
  8620  07B6                     i1S4971:	
  8621  07B6  3186  2E1E         	ljmp	i1l3591
  8622  07B8  3186  2E22         	ljmp	i1l383
  8623  07BA  3186  2E42         	ljmp	i1l3607
  8624  07BC  3186  2E6E         	ljmp	i1l3627
  8625  07BE  3186  2E7A         	ljmp	i1l3635
  8626  07C0  3186  2E9D         	ljmp	i1l3659
  8627                           
  8628                           	psect	text29
  8629  07CC                     __ptext29:	
  8630 ;; *************** function _ADC_interrupt *****************
  8631 ;; Defined at:
  8632 ;;		line 43 in file "ADC.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  2  118[None  ] int 
  8639 ;; Registers used:
  8640 ;;		wreg
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 1F/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8646 ;;      Params:         0       0       0       0       0       0       0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		_isr
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function _ADC_interrupt
  8661  07CC                     _ADC_interrupt:	
  8662                           
  8663                           ;ADC.c: 44: if (ADIF == 1) {
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _ADC_interrupt: [wreg]
  8667  07CC  0020               	movlb	0	; select bank0
  8668  07CD  1F11               	btfss	17,6	;volatile
  8669  07CE  0008               	return
  8670                           
  8671                           ;ADC.c: 45: ADC_Data=ADRESH;
  8672  07CF  0021               	movlb	1	; select bank1
  8673  07D0  081C               	movf	28,w	;volatile
  8674  07D1  00CB               	movwf	_ADC_Data^(0+128)	;volatile
  8675                           
  8676                           ;ADC.c: 46: ADC_Flags.New=1;
  8677  07D2  144A               	bsf	_ADC_Flags^(0+128),0	;volatile
  8678                           
  8679                           ;ADC.c: 47: ADIF = 0;
  8680  07D3  0020               	movlb	0	; select bank0
  8681  07D4  1311               	bcf	17,6	;volatile
  8682  07D5  0008               	return
  8683  07D6                     __end_of_ADC_interrupt:	
  8684  007E                     btemp	set	126	;btemp
  8685  007E                     int$flags	set	126
  8686  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        13
    BSS         198
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     77      77
    BANK1            80      0      79
    BANK2            80      0      74
    BANK3            80      8      64
    BANK4            75      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    RxArPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 101
		 -> NULL(NULL[0]), PD(BIGRAM[101]), 

    PD_Manu	PTR unsigned int  size(2) Largest target is 101
		 -> NULL(NULL[0]), PD(BIGRAM[101]), 

    DataPtr	PTR volatile unsigned char  size(2) Largest target is 101
		 -> NULL(NULL[0]), PD(BIGRAM[101]), 

    TxByte	PTR volatile unsigned char  size(2) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK1[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK2[4]), 

    PWMLDCONptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    _main->_ADC_loop
    _RDM_rx_loop->_RDM_GET_CC
    _RDM_init->___bmul
    _DMX_loop->___awtoft
    _DMX_loop->___lbtoft
    ___fttol->___lbtoft
    ___ftsub->___lbtoft
    ___ftadd->___lbtoft
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_DMX_loop
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_discovery_CC->_RDM_get_checkSum
    _RDM_SET_CC->_RDM_get_checkSum
    _RDM_GET_CC->_RDM_get_checkSum
    _RDM_init->___bmul
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43261
                           _ADC_init
                           _ADC_loop
                           _DMX_init
                           _DMX_loop
                           _RDM_init
                        _RDM_rx_loop
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    3848
                                             29 BANK0      1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     962
                                             25 BANK0      4     4      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           1     1      0     962
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     962
                                              4 COMMON     2     2      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (3) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     962
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             2     2      0     276
                                              2 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            15    15      0   38914
                                             73 BANK0      4     4      0
                                              0 BANK3      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3922
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              4 COMMON     1     1      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     891
                                             60 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7500
                                             54 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5740
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4801
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1030
                                             12 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4733
                                             27 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             4     4      0     223
                                              4 COMMON     1     1      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_loop
   _DMX_init
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_init
     ___bmul
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_get_checkSum
       _RDM_tx_TimerBreak
       _TX_RDM_Response_Set
     _RDM_SET_CC
       _RDM_get_checkSum
       _RDM_tx_TimerBreak
       _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_get_checkSum
       _RDM_tx_TimerBreak
       _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     130       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4D      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4A      10       92.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      8      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4B      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     130      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Aug 01 09:13:07 2017

                           _i 0158                             pc 0002                ___bmul@product 0020  
                 __CFG_CP$OFF 0000                            PL2 0DF1                            PL4 0E26  
                          PL6 0E32                            PL8 0E3A                            _PD 218B  
                ___ftadd@exp1 0055                  ___ftadd@exp2 0054                           PL10 0E41  
                         PL20 0E96                           PL12 0E48                           PL30 0EC3  
                         PL22 0E9F                           PL14 0E68                           PL40 0786  
                         PL32 0ECA                           PL24 0EAC                           PL16 0E71  
                         PL50 0794                           PL42 0951                           PL34 0ED1  
                         PL26 0770                           PL18 0E8E                           PL60 0F16  
                         PL52 0F03                           PL44 03FB                           PL36 0EDA  
                         PL28 03EE                           PL70 0F2D                           PL62 0F1D  
                         PL54 036F                           PL46 0EE9                           PL38 0EE1  
                         PL80 0F41                           PL72 038D                           PL64 0384  
                         PL56 037B                           PL48 0EF6                           PL90 0F63  
                         PL82 0F47                           PL74 0F34                           PL66 07A1  
                         PL58 0F0F                           PL92 0393                           PL84 0F4E  
                         PL76 095F                           PL68 0F26                           PL94 039A  
                         PL86 0F55                           PL78 0F3A                           PL96 03A1  
                         PL88 0F5C                           PL98 0F6A                  ___ftadd@sign 0053  
                         l344 0AD2                           l701 025B                           l358 0AC7  
                         l708 0270                           l696 0233                           _RA5 0065  
                         _PR2 001B                           _UID 0603                           _TX9 0CF6  
                         _PWM 0403                           _isr 0004                           wreg 0009  
                        PL100 0F71                          PL110 0F7D                          PL102 03A8  
                        PL120 03BA                          PL112 03AE                          PL104 08D0  
                        PL122 0F8F                          PL114 0F83                          PL106 06DC  
                        PL124 06E2                          PL116 0F89                          PL108 0F77  
                        PL126 0F93                          PL118 03B4                  __CFG_LVP$OFF 0000  
                ___ftdiv@cntr 0044                  ___ftdiv@sign 0049                          l1041 0308  
                        l1060 073A                          l1052 06E8                          l1061 075C  
                        l1046 03C0                          l1063 076F                          l1056 0726  
                        l1235 0FCA                          l1247 0FEF                          l1271 0CD7  
                        l4001 0FD7                          l4003 0FE0                          l4007 0FED  
                        l4031 0291                          l4023 0278                          l4009 0FE5  
                        l1289 0D29                          l4033 02A0                          l4025 0288  
                        l4113 06E7                          l4043 0C82                          l4131 070A  
                        l4109 0CFB                          l4053 0C98                          l4071 0CB4  
                        l4047 0C89                          l4151 0738                          l4313 0FB1  
                        l4321 0D1B                          l4073 0CB8                          l4065 0CA6  
                        l4403 0DC5                          l4091 0CE2                          l4083 0CCF  
                        l4075 0CBD                          l4085 0CD3                          l4077 0CC1  
                        l4245 0313                          l4181 02AF                          l4173 075E  
                        l4343 0D3C                          l4415 0DD3                          l4407 0DC9  
                        l4247 0329                          l4183 02B0                          l4263 03BF  
                        l4361 0D78                          l4097 0CEA                          l4433 0BF6  
                        l4441 0C18                          l4193 02C4                          l4419 0DD7  
                        l4349 0D52                          l4365 0D87                          l4381 0DA3  
                        l4461 0C3B                          l4293 01FB                          l4277 03D3  
                        l4439 0C13                          l4711 0B62                          l4607 01E1  
                        l4279 03DE                          l4537 0124                          l4385 0DB1  
                        l4473 0C56                          l4457 0C34                          l4467 0C3F  
                        l4731 0BAD                          l4635 09F6                          l4469 0C48  
                        l4725 0B95                          l4581 0193                          l4565 017A  
                        l2797 0360                          l4727 0B97                          l4655 0A7F  
                        l4729 0BAC                          l4667 0AA2                          l4675 096E  
                        l4595 019A                          l4579 0186                          l4771 026C  
                        l4763 022F                          l4835 00A3                          l4749 0BBD  
                        l4597 01C4                          l4773 026E                          l4687 0AE0  
                        l4775 026F                          l4759 0217                          _ADIE 048E  
                        _ADIF 008E                          l4961 0764                          l4699 0B23  
                        l4963 03D9                          ?_isr 0070                          l3997 0FCE  
                        l4965 031C                          l3999 0FD2                          l4967 0324  
                        _BRGH 0CF2                          _FERR 0CEA                          u3000 03E2  
                        u3065 0D49                          u3270 0178                          u3520 0243  
                        u3195 0C1B                          u3535 0255                          _PEIE 005E  
                        _RCIE 048D                          u2980 074F                          _RCIF 008D  
                        u2990 032D                          _TMR1 0016                          _SPEN 0CEF  
                        _TX9D 0CF0                          _TXIE 048C                          _TXEN 0CF5  
                        _TXIF 008C                          _SYNC 0CF4                  __CFG_WRT$OFF 0000  
         _TX_RDM_Response_Set 0339                          _main 0056                  ___ftpack@arg 0020  
                ___ftpack@exp 0023                          fsr0h 0005                          fsr1h 0007  
                        indf0 0000                          fsr0l 0004                          indf1 0001  
                        fsr1l 0006                          btemp 007E                          start 0013  
                  _TX_PDCount 00CE              __end_of_ADC_init 00B7              __end_of_ADC_loop 00DE  
                  _TX_PD_Flag 00BA                   ?_RDM_GET_CC 0070             ___bmul@multiplier 0021  
               __CFG_MCLRE$ON 0000                  ___ftmul@cntr 0039                  ___ftmul@sign 003A  
                 ?_RDM_SET_CC 0070                  ___fttol@exp1 0068                  ___fttol@lval 0064  
                       ??_isr 0074                 __CFG_PLLEN$ON 0000          ?_TX_RDM_Response_Set 0070  
                 _RX_RDM_Data 0120                         ?_main 0070               __end_of___ftadd 0D0D  
               __CFG_WDTE$OFF 0000              __end_of_DMX_init 0154                         _ANSA2 0C62  
                       _ANSC0 0C70                         _ANSA4 0C64               __end_of___ftdiv 0D69  
                       _ANSC1 0C71                         _ANSC2 0C72                         _ANSC3 0C73  
            __end_of_DMX_loop 0BE0               __end_of___ftmul 0DF1                         _T1CON 0018  
             __end_of___ftsub 0C0A               __end_of___fttol 0C5F                         _T2CON 001C  
                       _LATC3 0873                         _LATC4 0874                         i1l383 0622  
                       i1l719 0901                         i1l873 08AC                         i1l874 08B7  
                       _RCREG 0199     __size_of_RDM_tx_interrupt 007B                         _RCSTA 019D  
                       _PD_ID 00BE                         _RXPPS 0E15                         _TXREG 019A  
                       _Timer 00AC              __end_of_RDM_init 01F8                 ___awtoft@sign 0074  
               ___ftpack@sign 0024                __CFG_BOREN$OFF 0000                   _TX_RDM_Data 00D4  
                       status 0003                         wtemp0 007E                  __end_ofPL100 0F77  
                __end_ofPL110 0F83                  __end_ofPL102 03AE                  __end_ofPL120 03BF  
                __end_ofPL112 03B4                  __end_ofPL104 08D6                  __end_ofPL122 0F93  
                __end_ofPL114 0F89                  __end_ofPL106 06E2                  __end_ofPL124 06E7  
                __end_ofPL116 0F8F                  __end_ofPL108 0F7D                  __end_ofPL126 0F97  
                __end_ofPL118 03BA             ?_RDM_get_checkSum 0020            ??_RDM_get_checkSum 0074  
             __initialization 0015                  __end_of_main 00AB                    _CurrentPWM 014C  
           ?_RDM_discovery_CC 0070         ??_TX_RDM_Response_Set 0074            ??_RDM_discovery_CC 0039  
                      ??_main 0076                 ___fttol@sign1 0063           __size_of_RDM_GET_CC 008A  
                      _ADCON0 009D                        _ADCON1 009E                        _ADRESH 009C  
                      i1S4971 07B6                        i1S4969 07C2           __size_of_RDM_SET_CC 002F  
            __end_of___awtoft 0FC2              __end_of___ftpack 1000              __end_of___lbtoft 0BEF  
                      _RA2PPS 0E92                        _RC0PPS 0EA0                        _RC1PPS 0EA1  
                      _RC2PPS 0EA2                        _RC4PPS 0EA4                        i1l3601 0637  
                      i1l3605 063F                        i1l3615 0656                        i1l3607 0642  
                      i1l3703 088E                        i1l3635 067A                        i1l3627 066E  
                      i1l3647 0694                        i1l3591 061E                        i1l3671 06C0  
                      i1l3743 08DD                        i1l3735 08C3                        i1l3649 0696  
                      i1l3673 06CB                        i1l3761 08F6                        i1l3667 06BE  
                      i1l3659 069D                        i1l3747 08E3                        i1l3691 086C  
                      i1l3757 08F4                        i1l3749 08E7                        i1l3791 0943  
                      i1l3785 0926                        i1l3769 090A                        i1l3689 086B  
                      i1l3795 0945                        u232_25 064C                        _INTCON 000B  
                      u242_25 06D5                        u234_25 0664                        u260_25 093B  
                      u245_20 0871                        u245_22 0872                        u246_20 0878  
                      u246_22 0879              __end_of___lwtoft 0FA7                        _OSCCON 0099  
                      _PWM1DC 0D93                        _PWM2DC 0DA3                        _PWM3DC 0DB3  
      __size_of_DMX_interrput 00D3                        _PWM4DC 0DC3                        _TMR1IE 0488  
                      _TMR1IF 0088             _DMX_CurrentBright 00A0                        _SPBRGH 019C  
                      _SPBRGL 019B                        _TRISA2 0462                        _TRISC0 0470  
                      _TRISA4 0464                        _TRISC1 0471                        _TRISC2 0472  
                      _TRISC3 0473                        _TRISC4 0474                        _TRISC5 0475  
              __CFG_PWRTE$OFF 0000                        _RxData 015A              _timer1_interrupt 0863  
                      _TxByte 00C2                        ___bmul 01F8                        ___ftge 0D69  
                   ??___ftadd 0050                __CFG_STVREN$ON 0000                     ??___ftdiv 0041  
                   ??___ftmul 0032                     ??___ftsub 0075                     ??___fttol 0060  
                ?_timer1_init 0070                  ?_RDM_rx_loop 0070                    _TimerState 00CC  
                      _rxdata 0079         ___ftmul@f3_as_product 0036           RDM_get_checkSum@len 0038  
                   ?_ADC_init 0070                     ?_ADC_loop 0070       __end_of__initialization 0053  
                  ___ftadd@f1 004A                    ___ftadd@f2 004D                    ___ftge@ff1 002C  
                  ___ftge@ff2 002F                    ___ftdiv@f1 003E                    ___ftdiv@f2 003B  
                  ___ftdiv@f3 0045                     ?_DMX_init 0070                     ?_DMX_loop 0070  
               _DMX_loop$1388 0069                _DMXPeriodConst 00D1                    ___awtoft@c 0028  
                  ___lbtoft@c 0074           ___bmul@multiplicand 0074                    ___ftmul@f1 002C  
                  ___ftmul@f2 002F                    ___ftsub@f1 0059                    ___ftsub@f2 0056  
                  ___fttol@f1 005C                __pcstackCOMMON 0070                  __pidataBANK1 0000  
                __pidataBANK2 0000              _DMX_TargetBright 0138                     ?_RDM_init 0070  
                  __end_ofPL2 0E26                    __end_ofPL4 0E32                    __end_ofPL6 0E3A  
                  __end_ofPL8 0E41                 _DMX_interrput 0609                    ___lwtoft@c 0028  
            _RDM_tx_interrupt 08D6                    ??_ADC_init 0074                    ??_ADC_loop 0074  
                  __pbssBANK1 00A0                    __pbssBANK2 0120                    __pbssBANK3 01A0  
               _DMX_sumRepeat 0166                   _RxAddrCount 00C8        __size_of_ADC_interrupt 000A  
                  ??_DMX_init 0020                    ??_DMX_loop 01D8                  ??_RDM_GET_CC 0074  
                  __pmaintext 0056                  ??_RDM_SET_CC 0074                       ?___bmul 0074  
                     ?___ftge 002C                    ??_RDM_init 0022                    __pintentry 0004  
              ?_DMX_interrput 0070                       _BAUDCON 019F                     ?___awtoft 0028  
                   ?___ftpack 0020                     ?___lbtoft 0028             _RDM_tx_TimerBreak 0360  
                   ?___lwtoft 0028            ?_RDM_tx_TimerBreak 0070                       _DMXSign 00B3  
                     _PWM1DCH 0D94                       _PWM1DCL 0D93                       _PWM2DCH 0DA4  
                     _PWM2DCL 0DA3                       _OSCTUNE 0098                       _PWM3DCH 0DB4  
                     _PWM3DCL 0DB3                       _PWM4DCH 0DC4                       _PWM1CON 0D9B  
                     _PWM4DCL 0DC3                       _PWM2CON 0DAB                       _PWM3CON 0DBB  
                     _PWM4CON 0DCB                       _PDCount 0078                       _PWM1PHH 0D92  
                     _PWM1PHL 0D91                       _PWM2PHH 0DA2                       _PWM2PHL 0DA1  
                     _PWM3PHH 0DB2                       _PWM3PHL 0DB1                       _PWM1PRH 0D96  
                     _PWM4PHH 0DC2                       _PWM1PRL 0D95                       _PWM4PHL 0DC1  
                     _PWM2PRH 0DA6                       _PWM2PRL 0DA5                       _PWM3PRH 0DB6  
                     _PWM3PRL 0DB5                       _PD_Flag 00BC                       _PWM4PRH 0DC6  
                     _PWM4PRL 0DC5                       _PD_Manu 00C0            __end_of_RDM_GET_CC 0339  
         ??_RDM_tx_TimerBreak 0074            __end_of_RDM_SET_CC 03EE                       _DataPtr 0156  
                   _ADC_Flags 00CA                  DMX_init@Addr 0074                       _TxCount 00C4  
                     _RxTimer 00C6                       _RxState 00D2                       _TxState 00CF  
             __size_of___bmul 000D               __size_of___ftge 002C                       ___ftadd 0C5F  
                     ___ftdiv 0D0D                       ___ftmul 0D95                       ___ftsub 0BEF  
                     ___fttol 0C0A     __end_of_RDM_tx_TimerBreak 036F                  DMX_loop@Addr 006C  
                  ??___awtoft 0074                    ??___ftpack 0025                    ??___lbtoft 0074  
        __size_of_timer1_init 0006                       __ptext1 02A9                       __ptext2 0205  
                     __ptext3 06E7                       __ptext4 03BF                       __ptext5 02AF  
                     __ptext6 0339                       __ptext7 0360                       __ptext8 0271  
                     __ptext9 0154                 _ADC_interrupt 07CC          __size_of_RDM_rx_loop 006C  
                  ??___lwtoft 0074     __size_of_RDM_get_checkSum 0038                  __size_of_isr 000F  
    __end_of_timer1_interrupt 08D0                       clrloop0 07AB     __size_of_RDM_discovery_CC 0089  
        RDM_get_checkSum@Data 0020          end_of_initialization 0053                     _DMX_Flags 0076  
                   _DMXPeriod 00EE                _DMX_difference 00B7   __end_of_TX_RDM_Response_Set 0360  
             ??_DMX_interrput 0070                     _PWM1LDCON 0D9F                     _PWM2LDCON 0DAF  
                   _PWM3LDCON 0DBF                     _PWM4LDCON 0DCF                  __pstringtext 0403  
              ?_ADC_interrupt 0070                     _PWMDCHptr 01B4                     _PWMDCLptr 0144  
            __CFG_FOSC$INTOSC 0000             __size_of_ADC_init 000C             __size_of_ADC_loop 0027  
                 ___ftdiv@exp 0048      __end_of_RDM_tx_interrupt 0951                   ___ftmul@exp 0035  
           __size_of_DMX_init 0076             __size_of_DMX_loop 027A                __end_of___bmul 0205  
              __end_of___ftge 0D95    __size_of_RDM_tx_TimerBreak 000F             __size_of_RDM_init 00A4  
                   _PackCount 00CD                   __end_ofPL10 0E48                   __end_ofPL20 0E9F  
                 __end_ofPL12 0E68                   __end_ofPL30 0ECA                   __end_ofPL22 0EAC  
                 __end_ofPL14 0E71                   __end_ofPL40 0794                   __end_ofPL32 0ED1  
                 __end_ofPL24 0EC3                   __end_ofPL16 0E8E                   __end_ofPL50 07A1  
                 __end_ofPL42 095F                   __end_ofPL34 0EDA                   __end_ofPL26 0786  
                 __end_ofPL18 0E96                   __end_ofPL60 0F1D                   __end_ofPL52 0F0F  
                 __end_ofPL44 0403                   __end_ofPL36 0EE1                   __end_ofPL28 03FB  
                 __end_ofPL70 0F34                   __end_ofPL62 0F26                   __end_ofPL54 037B  
                 __end_ofPL46 0EF6                   __end_ofPL38 0EE9                   __end_ofPL80 0F47  
                 __end_ofPL72 0393                   __end_ofPL64 038D                   __end_ofPL56 0384  
                 __end_ofPL48 0F03                   __end_ofPL90 0F6A                   __end_ofPL82 0F4E  
                 __end_ofPL74 0F3A                   __end_ofPL66 07AA                   __end_ofPL58 0F16  
                 __end_ofPL92 039A                   __end_ofPL84 0F55                   __end_ofPL76 0966  
                 __end_ofPL68 0F2D                   __end_ofPL94 03A1                   __end_ofPL86 0F5C  
                 __end_ofPL78 0F41                   __end_ofPL96 03A8                   __end_ofPL88 0F63  
                 __end_ofPL98 0F71           start_initialization 0015                   __end_of_UID 0609  
                 __end_of_PWM 0603                   __end_of_isr 0013                     _RxDataPtr 00D3  
                _DMXStepConst 00D0              __CFG_LPBOREN$OFF 0000                      ??___bmul 0075  
                    ??___ftge 0075               ??_ADC_interrupt 0070                   __pdataBANK1 00EE  
                 __pdataBANK2 015E              _RDM_get_checkSum 0271             __size_of___awtoft 001B  
           __size_of___ftpack 003E             __size_of___lbtoft 000F                   __pbssBIGRAM 218B  
                 __pbssCOMMON 0076                     ___latbits 0001             __size_of___lwtoft 0010  
               __pcstackBANK0 0020                 __pcstackBANK3 01D8              _RDM_discovery_CC 06E7  
             _DMX_SpaceBright 01A0                     __pnvBANK1 00EC                      ?___ftadd 004A  
                    ?___ftdiv 003B                      ?___ftmul 002C                      ?___ftsub 0056  
                    ?___fttol 005C              __CFG_PPS1WAY$OFF 0000                     __pswtext1 07C2  
                   __pswtext2 07B6                      _ADC_Data 00CB                      _ADC_init 00AB  
                    _ADC_loop 00B7             ?_timer1_interrupt 0070            ??_timer1_interrupt 0070  
                   _preRxData 01BC                     clear_ram0 07AA                      _DMX_init 00DE  
                    _DMX_loop 0966                      _GO_nDONE 04E9            DMX_interrput@RxDat 0072  
               ??_timer1_init 0074                      _RDM_init 0154                 ??_RDM_rx_loop 003D  
                 _DMX_Address 00EC             ?_RDM_tx_interrupt 0070            ??_RDM_tx_interrupt 0070  
            __size_of___ftadd 00AE         __end_of_DMX_interrput 06DC              __size_of___ftdiv 005C  
            __size_of___ftmul 005C              __size_of___ftsub 001B              __size_of___fttol 0055  
                    ___awtoft 0FA7                      ___ftpack 0FC2                      ___lbtoft 0BE0  
__size_of_TX_RDM_Response_Set 0027                      ___lwtoft 0F97           __end_of_timer1_init 02AF  
         __end_of_RDM_rx_loop 0271                      _checkSum 0154                      __ptext10 01F8  
                    __ptext11 0966                      __ptext20 0FA7                      __ptext12 0F97  
                    __ptext21 0FC2                      __ptext13 0BE0                      __ptext22 00DE  
                    __ptext14 0C0A                      __ptext23 00B7                      __ptext15 0BEF  
                    __ptext24 00AB                      __ptext16 0C5F                      __ptext17 0D95  
                    __ptext26 0863                      __ptext18 0D69                      __ptext27 08D6  
                    __ptext19 0D0D                      __ptext28 0609                      __ptext29 07CC  
               __size_of_main 0055      __end_of_RDM_get_checkSum 02A9                      int$flags 007E  
    __end_of_RDM_discovery_CC 0770                    _DMX_Repeat 015E                      intlevel1 0000  
           __CFG_CLKOUTEN$OFF 0000                    _RDM_GET_CC 02AF                    _RDM_SET_CC 03BF  
          _DISCOVERY_RDM_Data 01C0                   _timer1_init 02A9                    _PWM1CLKCON 0D9E  
                  _PWM2CLKCON 0DAE                   _RDM_rx_loop 0205                    _PWM3CLKCON 0DBE  
                  _PWM4CLKCON 0DCE                   _PWMLDCONptr 01AC         __end_of_ADC_interrupt 07D6  
   __size_of_timer1_interrupt 006D  
