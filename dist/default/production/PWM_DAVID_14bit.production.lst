

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Oct 17 09:41:11 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text29,local,class=CODE,merge=1,delta=2
    18                           	psect	text30,local,class=CODE,merge=1,delta=2
    19                           	psect	swtext1,local,class=CONST,delta=2
    20                           	psect	text31,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	text32,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext3,local,class=CONST,delta=2
    24                           	psect	pa_nodes0,global,class=CODE,delta=2
    25                           	dabs	1,0x320,16
    26                           	dabs	1,0x2A0,80
    27                           	dabs	1,0x26C,4
    28                           	dabs	1,0x218C,0,_PD
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F1574 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000E                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  008C                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0095                     	;# 
    97  0096                     	;# 
    98  0097                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009A                     	;# 
   102  009B                     	;# 
   103  009B                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010E                     	;# 
   110  0111                     	;# 
   111  0112                     	;# 
   112  0113                     	;# 
   113  0114                     	;# 
   114  0115                     	;# 
   115  0116                     	;# 
   116  0117                     	;# 
   117  0118                     	;# 
   118  0119                     	;# 
   119  018C                     	;# 
   120  018E                     	;# 
   121  0191                     	;# 
   122  0191                     	;# 
   123  0192                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0194                     	;# 
   127  0195                     	;# 
   128  0196                     	;# 
   129  0197                     	;# 
   130  0199                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019C                     	;# 
   135  019D                     	;# 
   136  019E                     	;# 
   137  019F                     	;# 
   138  020C                     	;# 
   139  020E                     	;# 
   140  028C                     	;# 
   141  028E                     	;# 
   142  030C                     	;# 
   143  030E                     	;# 
   144  038C                     	;# 
   145  038E                     	;# 
   146  0391                     	;# 
   147  0392                     	;# 
   148  0393                     	;# 
   149  0397                     	;# 
   150  0398                     	;# 
   151  0399                     	;# 
   152  0691                     	;# 
   153  0692                     	;# 
   154  0693                     	;# 
   155  0694                     	;# 
   156  0695                     	;# 
   157  0D8E                     	;# 
   158  0D8F                     	;# 
   159  0D90                     	;# 
   160  0D91                     	;# 
   161  0D91                     	;# 
   162  0D92                     	;# 
   163  0D93                     	;# 
   164  0D93                     	;# 
   165  0D94                     	;# 
   166  0D95                     	;# 
   167  0D95                     	;# 
   168  0D96                     	;# 
   169  0D97                     	;# 
   170  0D97                     	;# 
   171  0D98                     	;# 
   172  0D99                     	;# 
   173  0D99                     	;# 
   174  0D9A                     	;# 
   175  0D9B                     	;# 
   176  0D9C                     	;# 
   177  0D9C                     	;# 
   178  0D9D                     	;# 
   179  0D9D                     	;# 
   180  0D9E                     	;# 
   181  0D9F                     	;# 
   182  0DA0                     	;# 
   183  0DA1                     	;# 
   184  0DA1                     	;# 
   185  0DA2                     	;# 
   186  0DA3                     	;# 
   187  0DA3                     	;# 
   188  0DA4                     	;# 
   189  0DA5                     	;# 
   190  0DA5                     	;# 
   191  0DA6                     	;# 
   192  0DA7                     	;# 
   193  0DA7                     	;# 
   194  0DA8                     	;# 
   195  0DA9                     	;# 
   196  0DA9                     	;# 
   197  0DAA                     	;# 
   198  0DAB                     	;# 
   199  0DAC                     	;# 
   200  0DAC                     	;# 
   201  0DAD                     	;# 
   202  0DAD                     	;# 
   203  0DAE                     	;# 
   204  0DAF                     	;# 
   205  0DB0                     	;# 
   206  0DB1                     	;# 
   207  0DB1                     	;# 
   208  0DB2                     	;# 
   209  0DB3                     	;# 
   210  0DB3                     	;# 
   211  0DB4                     	;# 
   212  0DB5                     	;# 
   213  0DB5                     	;# 
   214  0DB6                     	;# 
   215  0DB7                     	;# 
   216  0DB7                     	;# 
   217  0DB8                     	;# 
   218  0DB9                     	;# 
   219  0DB9                     	;# 
   220  0DBA                     	;# 
   221  0DBB                     	;# 
   222  0DBC                     	;# 
   223  0DBC                     	;# 
   224  0DBD                     	;# 
   225  0DBD                     	;# 
   226  0DBE                     	;# 
   227  0DBF                     	;# 
   228  0DC0                     	;# 
   229  0DC1                     	;# 
   230  0DC1                     	;# 
   231  0DC2                     	;# 
   232  0DC3                     	;# 
   233  0DC3                     	;# 
   234  0DC4                     	;# 
   235  0DC5                     	;# 
   236  0DC5                     	;# 
   237  0DC6                     	;# 
   238  0DC7                     	;# 
   239  0DC7                     	;# 
   240  0DC8                     	;# 
   241  0DC9                     	;# 
   242  0DC9                     	;# 
   243  0DCA                     	;# 
   244  0DCB                     	;# 
   245  0DCC                     	;# 
   246  0DCC                     	;# 
   247  0DCD                     	;# 
   248  0DCD                     	;# 
   249  0DCE                     	;# 
   250  0DCF                     	;# 
   251  0DD0                     	;# 
   252  0E0F                     	;# 
   253  0E10                     	;# 
   254  0E11                     	;# 
   255  0E12                     	;# 
   256  0E13                     	;# 
   257  0E14                     	;# 
   258  0E15                     	;# 
   259  0E16                     	;# 
   260  0E17                     	;# 
   261  0E90                     	;# 
   262  0E91                     	;# 
   263  0E92                     	;# 
   264  0E94                     	;# 
   265  0E95                     	;# 
   266  0EA0                     	;# 
   267  0EA1                     	;# 
   268  0EA2                     	;# 
   269  0EA3                     	;# 
   270  0EA4                     	;# 
   271  0EA5                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEA                     	;# 
   281  0FEB                     	;# 
   282  0FED                     	;# 
   283  0FEE                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000E                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  008C                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009B                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  009F                     	;# 
   329  010C                     	;# 
   330  010E                     	;# 
   331  0111                     	;# 
   332  0112                     	;# 
   333  0113                     	;# 
   334  0114                     	;# 
   335  0115                     	;# 
   336  0116                     	;# 
   337  0117                     	;# 
   338  0118                     	;# 
   339  0119                     	;# 
   340  018C                     	;# 
   341  018E                     	;# 
   342  0191                     	;# 
   343  0191                     	;# 
   344  0192                     	;# 
   345  0193                     	;# 
   346  0193                     	;# 
   347  0194                     	;# 
   348  0195                     	;# 
   349  0196                     	;# 
   350  0197                     	;# 
   351  0199                     	;# 
   352  019A                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019D                     	;# 
   357  019E                     	;# 
   358  019F                     	;# 
   359  020C                     	;# 
   360  020E                     	;# 
   361  028C                     	;# 
   362  028E                     	;# 
   363  030C                     	;# 
   364  030E                     	;# 
   365  038C                     	;# 
   366  038E                     	;# 
   367  0391                     	;# 
   368  0392                     	;# 
   369  0393                     	;# 
   370  0397                     	;# 
   371  0398                     	;# 
   372  0399                     	;# 
   373  0691                     	;# 
   374  0692                     	;# 
   375  0693                     	;# 
   376  0694                     	;# 
   377  0695                     	;# 
   378  0D8E                     	;# 
   379  0D8F                     	;# 
   380  0D90                     	;# 
   381  0D91                     	;# 
   382  0D91                     	;# 
   383  0D92                     	;# 
   384  0D93                     	;# 
   385  0D93                     	;# 
   386  0D94                     	;# 
   387  0D95                     	;# 
   388  0D95                     	;# 
   389  0D96                     	;# 
   390  0D97                     	;# 
   391  0D97                     	;# 
   392  0D98                     	;# 
   393  0D99                     	;# 
   394  0D99                     	;# 
   395  0D9A                     	;# 
   396  0D9B                     	;# 
   397  0D9C                     	;# 
   398  0D9C                     	;# 
   399  0D9D                     	;# 
   400  0D9D                     	;# 
   401  0D9E                     	;# 
   402  0D9F                     	;# 
   403  0DA0                     	;# 
   404  0DA1                     	;# 
   405  0DA1                     	;# 
   406  0DA2                     	;# 
   407  0DA3                     	;# 
   408  0DA3                     	;# 
   409  0DA4                     	;# 
   410  0DA5                     	;# 
   411  0DA5                     	;# 
   412  0DA6                     	;# 
   413  0DA7                     	;# 
   414  0DA7                     	;# 
   415  0DA8                     	;# 
   416  0DA9                     	;# 
   417  0DA9                     	;# 
   418  0DAA                     	;# 
   419  0DAB                     	;# 
   420  0DAC                     	;# 
   421  0DAC                     	;# 
   422  0DAD                     	;# 
   423  0DAD                     	;# 
   424  0DAE                     	;# 
   425  0DAF                     	;# 
   426  0DB0                     	;# 
   427  0DB1                     	;# 
   428  0DB1                     	;# 
   429  0DB2                     	;# 
   430  0DB3                     	;# 
   431  0DB3                     	;# 
   432  0DB4                     	;# 
   433  0DB5                     	;# 
   434  0DB5                     	;# 
   435  0DB6                     	;# 
   436  0DB7                     	;# 
   437  0DB7                     	;# 
   438  0DB8                     	;# 
   439  0DB9                     	;# 
   440  0DB9                     	;# 
   441  0DBA                     	;# 
   442  0DBB                     	;# 
   443  0DBC                     	;# 
   444  0DBC                     	;# 
   445  0DBD                     	;# 
   446  0DBD                     	;# 
   447  0DBE                     	;# 
   448  0DBF                     	;# 
   449  0DC0                     	;# 
   450  0DC1                     	;# 
   451  0DC1                     	;# 
   452  0DC2                     	;# 
   453  0DC3                     	;# 
   454  0DC3                     	;# 
   455  0DC4                     	;# 
   456  0DC5                     	;# 
   457  0DC5                     	;# 
   458  0DC6                     	;# 
   459  0DC7                     	;# 
   460  0DC7                     	;# 
   461  0DC8                     	;# 
   462  0DC9                     	;# 
   463  0DC9                     	;# 
   464  0DCA                     	;# 
   465  0DCB                     	;# 
   466  0DCC                     	;# 
   467  0DCC                     	;# 
   468  0DCD                     	;# 
   469  0DCD                     	;# 
   470  0DCE                     	;# 
   471  0DCF                     	;# 
   472  0DD0                     	;# 
   473  0E0F                     	;# 
   474  0E10                     	;# 
   475  0E11                     	;# 
   476  0E12                     	;# 
   477  0E13                     	;# 
   478  0E14                     	;# 
   479  0E15                     	;# 
   480  0E16                     	;# 
   481  0E17                     	;# 
   482  0E90                     	;# 
   483  0E91                     	;# 
   484  0E92                     	;# 
   485  0E94                     	;# 
   486  0E95                     	;# 
   487  0EA0                     	;# 
   488  0EA1                     	;# 
   489  0EA2                     	;# 
   490  0EA3                     	;# 
   491  0EA4                     	;# 
   492  0EA5                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE8                     	;# 
   499  0FE9                     	;# 
   500  0FEA                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEE                     	;# 
   506  0FEF                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000E                     	;# 
   521  0011                     	;# 
   522  0012                     	;# 
   523  0013                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008E                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0095                     	;# 
   539  0096                     	;# 
   540  0097                     	;# 
   541  0098                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  009F                     	;# 
   550  010C                     	;# 
   551  010E                     	;# 
   552  0111                     	;# 
   553  0112                     	;# 
   554  0113                     	;# 
   555  0114                     	;# 
   556  0115                     	;# 
   557  0116                     	;# 
   558  0117                     	;# 
   559  0118                     	;# 
   560  0119                     	;# 
   561  018C                     	;# 
   562  018E                     	;# 
   563  0191                     	;# 
   564  0191                     	;# 
   565  0192                     	;# 
   566  0193                     	;# 
   567  0193                     	;# 
   568  0194                     	;# 
   569  0195                     	;# 
   570  0196                     	;# 
   571  0197                     	;# 
   572  0199                     	;# 
   573  019A                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019E                     	;# 
   579  019F                     	;# 
   580  020C                     	;# 
   581  020E                     	;# 
   582  028C                     	;# 
   583  028E                     	;# 
   584  030C                     	;# 
   585  030E                     	;# 
   586  038C                     	;# 
   587  038E                     	;# 
   588  0391                     	;# 
   589  0392                     	;# 
   590  0393                     	;# 
   591  0397                     	;# 
   592  0398                     	;# 
   593  0399                     	;# 
   594  0691                     	;# 
   595  0692                     	;# 
   596  0693                     	;# 
   597  0694                     	;# 
   598  0695                     	;# 
   599  0D8E                     	;# 
   600  0D8F                     	;# 
   601  0D90                     	;# 
   602  0D91                     	;# 
   603  0D91                     	;# 
   604  0D92                     	;# 
   605  0D93                     	;# 
   606  0D93                     	;# 
   607  0D94                     	;# 
   608  0D95                     	;# 
   609  0D95                     	;# 
   610  0D96                     	;# 
   611  0D97                     	;# 
   612  0D97                     	;# 
   613  0D98                     	;# 
   614  0D99                     	;# 
   615  0D99                     	;# 
   616  0D9A                     	;# 
   617  0D9B                     	;# 
   618  0D9C                     	;# 
   619  0D9C                     	;# 
   620  0D9D                     	;# 
   621  0D9D                     	;# 
   622  0D9E                     	;# 
   623  0D9F                     	;# 
   624  0DA0                     	;# 
   625  0DA1                     	;# 
   626  0DA1                     	;# 
   627  0DA2                     	;# 
   628  0DA3                     	;# 
   629  0DA3                     	;# 
   630  0DA4                     	;# 
   631  0DA5                     	;# 
   632  0DA5                     	;# 
   633  0DA6                     	;# 
   634  0DA7                     	;# 
   635  0DA7                     	;# 
   636  0DA8                     	;# 
   637  0DA9                     	;# 
   638  0DA9                     	;# 
   639  0DAA                     	;# 
   640  0DAB                     	;# 
   641  0DAC                     	;# 
   642  0DAC                     	;# 
   643  0DAD                     	;# 
   644  0DAD                     	;# 
   645  0DAE                     	;# 
   646  0DAF                     	;# 
   647  0DB0                     	;# 
   648  0DB1                     	;# 
   649  0DB1                     	;# 
   650  0DB2                     	;# 
   651  0DB3                     	;# 
   652  0DB3                     	;# 
   653  0DB4                     	;# 
   654  0DB5                     	;# 
   655  0DB5                     	;# 
   656  0DB6                     	;# 
   657  0DB7                     	;# 
   658  0DB7                     	;# 
   659  0DB8                     	;# 
   660  0DB9                     	;# 
   661  0DB9                     	;# 
   662  0DBA                     	;# 
   663  0DBB                     	;# 
   664  0DBC                     	;# 
   665  0DBC                     	;# 
   666  0DBD                     	;# 
   667  0DBD                     	;# 
   668  0DBE                     	;# 
   669  0DBF                     	;# 
   670  0DC0                     	;# 
   671  0DC1                     	;# 
   672  0DC1                     	;# 
   673  0DC2                     	;# 
   674  0DC3                     	;# 
   675  0DC3                     	;# 
   676  0DC4                     	;# 
   677  0DC5                     	;# 
   678  0DC5                     	;# 
   679  0DC6                     	;# 
   680  0DC7                     	;# 
   681  0DC7                     	;# 
   682  0DC8                     	;# 
   683  0DC9                     	;# 
   684  0DC9                     	;# 
   685  0DCA                     	;# 
   686  0DCB                     	;# 
   687  0DCC                     	;# 
   688  0DCC                     	;# 
   689  0DCD                     	;# 
   690  0DCD                     	;# 
   691  0DCE                     	;# 
   692  0DCF                     	;# 
   693  0DD0                     	;# 
   694  0E0F                     	;# 
   695  0E10                     	;# 
   696  0E11                     	;# 
   697  0E12                     	;# 
   698  0E13                     	;# 
   699  0E14                     	;# 
   700  0E15                     	;# 
   701  0E16                     	;# 
   702  0E17                     	;# 
   703  0E90                     	;# 
   704  0E91                     	;# 
   705  0E92                     	;# 
   706  0E94                     	;# 
   707  0E95                     	;# 
   708  0EA0                     	;# 
   709  0EA1                     	;# 
   710  0EA2                     	;# 
   711  0EA3                     	;# 
   712  0EA4                     	;# 
   713  0EA5                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEA                     	;# 
   723  0FEB                     	;# 
   724  0FED                     	;# 
   725  0FEE                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000E                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0015                     	;# 
   746  0016                     	;# 
   747  0016                     	;# 
   748  0017                     	;# 
   749  0018                     	;# 
   750  0019                     	;# 
   751  001A                     	;# 
   752  001B                     	;# 
   753  001C                     	;# 
   754  008C                     	;# 
   755  008E                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0095                     	;# 
   760  0096                     	;# 
   761  0097                     	;# 
   762  0098                     	;# 
   763  0099                     	;# 
   764  009A                     	;# 
   765  009B                     	;# 
   766  009B                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009E                     	;# 
   770  009F                     	;# 
   771  010C                     	;# 
   772  010E                     	;# 
   773  0111                     	;# 
   774  0112                     	;# 
   775  0113                     	;# 
   776  0114                     	;# 
   777  0115                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  0118                     	;# 
   781  0119                     	;# 
   782  018C                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019C                     	;# 
   798  019D                     	;# 
   799  019E                     	;# 
   800  019F                     	;# 
   801  020C                     	;# 
   802  020E                     	;# 
   803  028C                     	;# 
   804  028E                     	;# 
   805  030C                     	;# 
   806  030E                     	;# 
   807  038C                     	;# 
   808  038E                     	;# 
   809  0391                     	;# 
   810  0392                     	;# 
   811  0393                     	;# 
   812  0397                     	;# 
   813  0398                     	;# 
   814  0399                     	;# 
   815  0691                     	;# 
   816  0692                     	;# 
   817  0693                     	;# 
   818  0694                     	;# 
   819  0695                     	;# 
   820  0D8E                     	;# 
   821  0D8F                     	;# 
   822  0D90                     	;# 
   823  0D91                     	;# 
   824  0D91                     	;# 
   825  0D92                     	;# 
   826  0D93                     	;# 
   827  0D93                     	;# 
   828  0D94                     	;# 
   829  0D95                     	;# 
   830  0D95                     	;# 
   831  0D96                     	;# 
   832  0D97                     	;# 
   833  0D97                     	;# 
   834  0D98                     	;# 
   835  0D99                     	;# 
   836  0D99                     	;# 
   837  0D9A                     	;# 
   838  0D9B                     	;# 
   839  0D9C                     	;# 
   840  0D9C                     	;# 
   841  0D9D                     	;# 
   842  0D9D                     	;# 
   843  0D9E                     	;# 
   844  0D9F                     	;# 
   845  0DA0                     	;# 
   846  0DA1                     	;# 
   847  0DA1                     	;# 
   848  0DA2                     	;# 
   849  0DA3                     	;# 
   850  0DA3                     	;# 
   851  0DA4                     	;# 
   852  0DA5                     	;# 
   853  0DA5                     	;# 
   854  0DA6                     	;# 
   855  0DA7                     	;# 
   856  0DA7                     	;# 
   857  0DA8                     	;# 
   858  0DA9                     	;# 
   859  0DA9                     	;# 
   860  0DAA                     	;# 
   861  0DAB                     	;# 
   862  0DAC                     	;# 
   863  0DAC                     	;# 
   864  0DAD                     	;# 
   865  0DAD                     	;# 
   866  0DAE                     	;# 
   867  0DAF                     	;# 
   868  0DB0                     	;# 
   869  0DB1                     	;# 
   870  0DB1                     	;# 
   871  0DB2                     	;# 
   872  0DB3                     	;# 
   873  0DB3                     	;# 
   874  0DB4                     	;# 
   875  0DB5                     	;# 
   876  0DB5                     	;# 
   877  0DB6                     	;# 
   878  0DB7                     	;# 
   879  0DB7                     	;# 
   880  0DB8                     	;# 
   881  0DB9                     	;# 
   882  0DB9                     	;# 
   883  0DBA                     	;# 
   884  0DBB                     	;# 
   885  0DBC                     	;# 
   886  0DBC                     	;# 
   887  0DBD                     	;# 
   888  0DBD                     	;# 
   889  0DBE                     	;# 
   890  0DBF                     	;# 
   891  0DC0                     	;# 
   892  0DC1                     	;# 
   893  0DC1                     	;# 
   894  0DC2                     	;# 
   895  0DC3                     	;# 
   896  0DC3                     	;# 
   897  0DC4                     	;# 
   898  0DC5                     	;# 
   899  0DC5                     	;# 
   900  0DC6                     	;# 
   901  0DC7                     	;# 
   902  0DC7                     	;# 
   903  0DC8                     	;# 
   904  0DC9                     	;# 
   905  0DC9                     	;# 
   906  0DCA                     	;# 
   907  0DCB                     	;# 
   908  0DCC                     	;# 
   909  0DCC                     	;# 
   910  0DCD                     	;# 
   911  0DCD                     	;# 
   912  0DCE                     	;# 
   913  0DCF                     	;# 
   914  0DD0                     	;# 
   915  0E0F                     	;# 
   916  0E10                     	;# 
   917  0E11                     	;# 
   918  0E12                     	;# 
   919  0E13                     	;# 
   920  0E14                     	;# 
   921  0E15                     	;# 
   922  0E16                     	;# 
   923  0E17                     	;# 
   924  0E90                     	;# 
   925  0E91                     	;# 
   926  0E92                     	;# 
   927  0E94                     	;# 
   928  0E95                     	;# 
   929  0EA0                     	;# 
   930  0EA1                     	;# 
   931  0EA2                     	;# 
   932  0EA3                     	;# 
   933  0EA4                     	;# 
   934  0EA5                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE8                     	;# 
   941  0FE9                     	;# 
   942  0FEA                     	;# 
   943  0FEA                     	;# 
   944  0FEB                     	;# 
   945  0FED                     	;# 
   946  0FEE                     	;# 
   947  0FEE                     	;# 
   948  0FEF                     	;# 
   949  0000                     	;# 
   950  0001                     	;# 
   951  0002                     	;# 
   952  0003                     	;# 
   953  0004                     	;# 
   954  0005                     	;# 
   955  0006                     	;# 
   956  0007                     	;# 
   957  0008                     	;# 
   958  0009                     	;# 
   959  000A                     	;# 
   960  000B                     	;# 
   961  000C                     	;# 
   962  000E                     	;# 
   963  0011                     	;# 
   964  0012                     	;# 
   965  0013                     	;# 
   966  0015                     	;# 
   967  0016                     	;# 
   968  0016                     	;# 
   969  0017                     	;# 
   970  0018                     	;# 
   971  0019                     	;# 
   972  001A                     	;# 
   973  001B                     	;# 
   974  001C                     	;# 
   975  008C                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0093                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0098                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  009F                     	;# 
   992  010C                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  018C                     	;# 
  1004  018E                     	;# 
  1005  0191                     	;# 
  1006  0191                     	;# 
  1007  0192                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0197                     	;# 
  1014  0199                     	;# 
  1015  019A                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020E                     	;# 
  1024  028C                     	;# 
  1025  028E                     	;# 
  1026  030C                     	;# 
  1027  030E                     	;# 
  1028  038C                     	;# 
  1029  038E                     	;# 
  1030  0391                     	;# 
  1031  0392                     	;# 
  1032  0393                     	;# 
  1033  0397                     	;# 
  1034  0398                     	;# 
  1035  0399                     	;# 
  1036  0691                     	;# 
  1037  0692                     	;# 
  1038  0693                     	;# 
  1039  0694                     	;# 
  1040  0695                     	;# 
  1041  0D8E                     	;# 
  1042  0D8F                     	;# 
  1043  0D90                     	;# 
  1044  0D91                     	;# 
  1045  0D91                     	;# 
  1046  0D92                     	;# 
  1047  0D93                     	;# 
  1048  0D93                     	;# 
  1049  0D94                     	;# 
  1050  0D95                     	;# 
  1051  0D95                     	;# 
  1052  0D96                     	;# 
  1053  0D97                     	;# 
  1054  0D97                     	;# 
  1055  0D98                     	;# 
  1056  0D99                     	;# 
  1057  0D99                     	;# 
  1058  0D9A                     	;# 
  1059  0D9B                     	;# 
  1060  0D9C                     	;# 
  1061  0D9C                     	;# 
  1062  0D9D                     	;# 
  1063  0D9D                     	;# 
  1064  0D9E                     	;# 
  1065  0D9F                     	;# 
  1066  0DA0                     	;# 
  1067  0DA1                     	;# 
  1068  0DA1                     	;# 
  1069  0DA2                     	;# 
  1070  0DA3                     	;# 
  1071  0DA3                     	;# 
  1072  0DA4                     	;# 
  1073  0DA5                     	;# 
  1074  0DA5                     	;# 
  1075  0DA6                     	;# 
  1076  0DA7                     	;# 
  1077  0DA7                     	;# 
  1078  0DA8                     	;# 
  1079  0DA9                     	;# 
  1080  0DA9                     	;# 
  1081  0DAA                     	;# 
  1082  0DAB                     	;# 
  1083  0DAC                     	;# 
  1084  0DAC                     	;# 
  1085  0DAD                     	;# 
  1086  0DAD                     	;# 
  1087  0DAE                     	;# 
  1088  0DAF                     	;# 
  1089  0DB0                     	;# 
  1090  0DB1                     	;# 
  1091  0DB1                     	;# 
  1092  0DB2                     	;# 
  1093  0DB3                     	;# 
  1094  0DB3                     	;# 
  1095  0DB4                     	;# 
  1096  0DB5                     	;# 
  1097  0DB5                     	;# 
  1098  0DB6                     	;# 
  1099  0DB7                     	;# 
  1100  0DB7                     	;# 
  1101  0DB8                     	;# 
  1102  0DB9                     	;# 
  1103  0DB9                     	;# 
  1104  0DBA                     	;# 
  1105  0DBB                     	;# 
  1106  0DBC                     	;# 
  1107  0DBC                     	;# 
  1108  0DBD                     	;# 
  1109  0DBD                     	;# 
  1110  0DBE                     	;# 
  1111  0DBF                     	;# 
  1112  0DC0                     	;# 
  1113  0DC1                     	;# 
  1114  0DC1                     	;# 
  1115  0DC2                     	;# 
  1116  0DC3                     	;# 
  1117  0DC3                     	;# 
  1118  0DC4                     	;# 
  1119  0DC5                     	;# 
  1120  0DC5                     	;# 
  1121  0DC6                     	;# 
  1122  0DC7                     	;# 
  1123  0DC7                     	;# 
  1124  0DC8                     	;# 
  1125  0DC9                     	;# 
  1126  0DC9                     	;# 
  1127  0DCA                     	;# 
  1128  0DCB                     	;# 
  1129  0DCC                     	;# 
  1130  0DCC                     	;# 
  1131  0DCD                     	;# 
  1132  0DCD                     	;# 
  1133  0DCE                     	;# 
  1134  0DCF                     	;# 
  1135  0DD0                     	;# 
  1136  0E0F                     	;# 
  1137  0E10                     	;# 
  1138  0E11                     	;# 
  1139  0E12                     	;# 
  1140  0E13                     	;# 
  1141  0E14                     	;# 
  1142  0E15                     	;# 
  1143  0E16                     	;# 
  1144  0E17                     	;# 
  1145  0E90                     	;# 
  1146  0E91                     	;# 
  1147  0E92                     	;# 
  1148  0E94                     	;# 
  1149  0E95                     	;# 
  1150  0EA0                     	;# 
  1151  0EA1                     	;# 
  1152  0EA2                     	;# 
  1153  0EA3                     	;# 
  1154  0EA4                     	;# 
  1155  0EA5                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE8                     	;# 
  1162  0FE9                     	;# 
  1163  0FEA                     	;# 
  1164  0FEA                     	;# 
  1165  0FEB                     	;# 
  1166  0FED                     	;# 
  1167  0FEE                     	;# 
  1168  0FEE                     	;# 
  1169  0FEF                     	;# 
  1170  0000                     	;# 
  1171  0001                     	;# 
  1172  0002                     	;# 
  1173  0003                     	;# 
  1174  0004                     	;# 
  1175  0005                     	;# 
  1176  0006                     	;# 
  1177  0007                     	;# 
  1178  0008                     	;# 
  1179  0009                     	;# 
  1180  000A                     	;# 
  1181  000B                     	;# 
  1182  000C                     	;# 
  1183  000E                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0013                     	;# 
  1187  0015                     	;# 
  1188  0016                     	;# 
  1189  0016                     	;# 
  1190  0017                     	;# 
  1191  0018                     	;# 
  1192  0019                     	;# 
  1193  001A                     	;# 
  1194  001B                     	;# 
  1195  001C                     	;# 
  1196  008C                     	;# 
  1197  008E                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0093                     	;# 
  1201  0095                     	;# 
  1202  0096                     	;# 
  1203  0097                     	;# 
  1204  0098                     	;# 
  1205  0099                     	;# 
  1206  009A                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  009F                     	;# 
  1213  010C                     	;# 
  1214  010E                     	;# 
  1215  0111                     	;# 
  1216  0112                     	;# 
  1217  0113                     	;# 
  1218  0114                     	;# 
  1219  0115                     	;# 
  1220  0116                     	;# 
  1221  0117                     	;# 
  1222  0118                     	;# 
  1223  0119                     	;# 
  1224  018C                     	;# 
  1225  018E                     	;# 
  1226  0191                     	;# 
  1227  0191                     	;# 
  1228  0192                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0197                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019D                     	;# 
  1241  019E                     	;# 
  1242  019F                     	;# 
  1243  020C                     	;# 
  1244  020E                     	;# 
  1245  028C                     	;# 
  1246  028E                     	;# 
  1247  030C                     	;# 
  1248  030E                     	;# 
  1249  038C                     	;# 
  1250  038E                     	;# 
  1251  0391                     	;# 
  1252  0392                     	;# 
  1253  0393                     	;# 
  1254  0397                     	;# 
  1255  0398                     	;# 
  1256  0399                     	;# 
  1257  0691                     	;# 
  1258  0692                     	;# 
  1259  0693                     	;# 
  1260  0694                     	;# 
  1261  0695                     	;# 
  1262  0D8E                     	;# 
  1263  0D8F                     	;# 
  1264  0D90                     	;# 
  1265  0D91                     	;# 
  1266  0D91                     	;# 
  1267  0D92                     	;# 
  1268  0D93                     	;# 
  1269  0D93                     	;# 
  1270  0D94                     	;# 
  1271  0D95                     	;# 
  1272  0D95                     	;# 
  1273  0D96                     	;# 
  1274  0D97                     	;# 
  1275  0D97                     	;# 
  1276  0D98                     	;# 
  1277  0D99                     	;# 
  1278  0D99                     	;# 
  1279  0D9A                     	;# 
  1280  0D9B                     	;# 
  1281  0D9C                     	;# 
  1282  0D9C                     	;# 
  1283  0D9D                     	;# 
  1284  0D9D                     	;# 
  1285  0D9E                     	;# 
  1286  0D9F                     	;# 
  1287  0DA0                     	;# 
  1288  0DA1                     	;# 
  1289  0DA1                     	;# 
  1290  0DA2                     	;# 
  1291  0DA3                     	;# 
  1292  0DA3                     	;# 
  1293  0DA4                     	;# 
  1294  0DA5                     	;# 
  1295  0DA5                     	;# 
  1296  0DA6                     	;# 
  1297  0DA7                     	;# 
  1298  0DA7                     	;# 
  1299  0DA8                     	;# 
  1300  0DA9                     	;# 
  1301  0DA9                     	;# 
  1302  0DAA                     	;# 
  1303  0DAB                     	;# 
  1304  0DAC                     	;# 
  1305  0DAC                     	;# 
  1306  0DAD                     	;# 
  1307  0DAD                     	;# 
  1308  0DAE                     	;# 
  1309  0DAF                     	;# 
  1310  0DB0                     	;# 
  1311  0DB1                     	;# 
  1312  0DB1                     	;# 
  1313  0DB2                     	;# 
  1314  0DB3                     	;# 
  1315  0DB3                     	;# 
  1316  0DB4                     	;# 
  1317  0DB5                     	;# 
  1318  0DB5                     	;# 
  1319  0DB6                     	;# 
  1320  0DB7                     	;# 
  1321  0DB7                     	;# 
  1322  0DB8                     	;# 
  1323  0DB9                     	;# 
  1324  0DB9                     	;# 
  1325  0DBA                     	;# 
  1326  0DBB                     	;# 
  1327  0DBC                     	;# 
  1328  0DBC                     	;# 
  1329  0DBD                     	;# 
  1330  0DBD                     	;# 
  1331  0DBE                     	;# 
  1332  0DBF                     	;# 
  1333  0DC0                     	;# 
  1334  0DC1                     	;# 
  1335  0DC1                     	;# 
  1336  0DC2                     	;# 
  1337  0DC3                     	;# 
  1338  0DC3                     	;# 
  1339  0DC4                     	;# 
  1340  0DC5                     	;# 
  1341  0DC5                     	;# 
  1342  0DC6                     	;# 
  1343  0DC7                     	;# 
  1344  0DC7                     	;# 
  1345  0DC8                     	;# 
  1346  0DC9                     	;# 
  1347  0DC9                     	;# 
  1348  0DCA                     	;# 
  1349  0DCB                     	;# 
  1350  0DCC                     	;# 
  1351  0DCC                     	;# 
  1352  0DCD                     	;# 
  1353  0DCD                     	;# 
  1354  0DCE                     	;# 
  1355  0DCF                     	;# 
  1356  0DD0                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E90                     	;# 
  1367  0E91                     	;# 
  1368  0E92                     	;# 
  1369  0E94                     	;# 
  1370  0E95                     	;# 
  1371  0EA0                     	;# 
  1372  0EA1                     	;# 
  1373  0EA2                     	;# 
  1374  0EA3                     	;# 
  1375  0EA4                     	;# 
  1376  0EA5                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEA                     	;# 
  1386  0FEB                     	;# 
  1387  0FED                     	;# 
  1388  0FEE                     	;# 
  1389  0FEE                     	;# 
  1390  0FEF                     	;# 
  1391  0000                     	;# 
  1392  0001                     	;# 
  1393  0002                     	;# 
  1394  0003                     	;# 
  1395  0004                     	;# 
  1396  0005                     	;# 
  1397  0006                     	;# 
  1398  0007                     	;# 
  1399  0008                     	;# 
  1400  0009                     	;# 
  1401  000A                     	;# 
  1402  000B                     	;# 
  1403  000C                     	;# 
  1404  000E                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0013                     	;# 
  1408  0015                     	;# 
  1409  0016                     	;# 
  1410  0016                     	;# 
  1411  0017                     	;# 
  1412  0018                     	;# 
  1413  0019                     	;# 
  1414  001A                     	;# 
  1415  001B                     	;# 
  1416  001C                     	;# 
  1417  008C                     	;# 
  1418  008E                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0093                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0098                     	;# 
  1426  0099                     	;# 
  1427  009A                     	;# 
  1428  009B                     	;# 
  1429  009B                     	;# 
  1430  009C                     	;# 
  1431  009D                     	;# 
  1432  009E                     	;# 
  1433  009F                     	;# 
  1434  010C                     	;# 
  1435  010E                     	;# 
  1436  0111                     	;# 
  1437  0112                     	;# 
  1438  0113                     	;# 
  1439  0114                     	;# 
  1440  0115                     	;# 
  1441  0116                     	;# 
  1442  0117                     	;# 
  1443  0118                     	;# 
  1444  0119                     	;# 
  1445  018C                     	;# 
  1446  018E                     	;# 
  1447  0191                     	;# 
  1448  0191                     	;# 
  1449  0192                     	;# 
  1450  0193                     	;# 
  1451  0193                     	;# 
  1452  0194                     	;# 
  1453  0195                     	;# 
  1454  0196                     	;# 
  1455  0197                     	;# 
  1456  0199                     	;# 
  1457  019A                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019C                     	;# 
  1461  019D                     	;# 
  1462  019E                     	;# 
  1463  019F                     	;# 
  1464  020C                     	;# 
  1465  020E                     	;# 
  1466  028C                     	;# 
  1467  028E                     	;# 
  1468  030C                     	;# 
  1469  030E                     	;# 
  1470  038C                     	;# 
  1471  038E                     	;# 
  1472  0391                     	;# 
  1473  0392                     	;# 
  1474  0393                     	;# 
  1475  0397                     	;# 
  1476  0398                     	;# 
  1477  0399                     	;# 
  1478  0691                     	;# 
  1479  0692                     	;# 
  1480  0693                     	;# 
  1481  0694                     	;# 
  1482  0695                     	;# 
  1483  0D8E                     	;# 
  1484  0D8F                     	;# 
  1485  0D90                     	;# 
  1486  0D91                     	;# 
  1487  0D91                     	;# 
  1488  0D92                     	;# 
  1489  0D93                     	;# 
  1490  0D93                     	;# 
  1491  0D94                     	;# 
  1492  0D95                     	;# 
  1493  0D95                     	;# 
  1494  0D96                     	;# 
  1495  0D97                     	;# 
  1496  0D97                     	;# 
  1497  0D98                     	;# 
  1498  0D99                     	;# 
  1499  0D99                     	;# 
  1500  0D9A                     	;# 
  1501  0D9B                     	;# 
  1502  0D9C                     	;# 
  1503  0D9C                     	;# 
  1504  0D9D                     	;# 
  1505  0D9D                     	;# 
  1506  0D9E                     	;# 
  1507  0D9F                     	;# 
  1508  0DA0                     	;# 
  1509  0DA1                     	;# 
  1510  0DA1                     	;# 
  1511  0DA2                     	;# 
  1512  0DA3                     	;# 
  1513  0DA3                     	;# 
  1514  0DA4                     	;# 
  1515  0DA5                     	;# 
  1516  0DA5                     	;# 
  1517  0DA6                     	;# 
  1518  0DA7                     	;# 
  1519  0DA7                     	;# 
  1520  0DA8                     	;# 
  1521  0DA9                     	;# 
  1522  0DA9                     	;# 
  1523  0DAA                     	;# 
  1524  0DAB                     	;# 
  1525  0DAC                     	;# 
  1526  0DAC                     	;# 
  1527  0DAD                     	;# 
  1528  0DAD                     	;# 
  1529  0DAE                     	;# 
  1530  0DAF                     	;# 
  1531  0DB0                     	;# 
  1532  0DB1                     	;# 
  1533  0DB1                     	;# 
  1534  0DB2                     	;# 
  1535  0DB3                     	;# 
  1536  0DB3                     	;# 
  1537  0DB4                     	;# 
  1538  0DB5                     	;# 
  1539  0DB5                     	;# 
  1540  0DB6                     	;# 
  1541  0DB7                     	;# 
  1542  0DB7                     	;# 
  1543  0DB8                     	;# 
  1544  0DB9                     	;# 
  1545  0DB9                     	;# 
  1546  0DBA                     	;# 
  1547  0DBB                     	;# 
  1548  0DBC                     	;# 
  1549  0DBC                     	;# 
  1550  0DBD                     	;# 
  1551  0DBD                     	;# 
  1552  0DBE                     	;# 
  1553  0DBF                     	;# 
  1554  0DC0                     	;# 
  1555  0DC1                     	;# 
  1556  0DC1                     	;# 
  1557  0DC2                     	;# 
  1558  0DC3                     	;# 
  1559  0DC3                     	;# 
  1560  0DC4                     	;# 
  1561  0DC5                     	;# 
  1562  0DC5                     	;# 
  1563  0DC6                     	;# 
  1564  0DC7                     	;# 
  1565  0DC7                     	;# 
  1566  0DC8                     	;# 
  1567  0DC9                     	;# 
  1568  0DC9                     	;# 
  1569  0DCA                     	;# 
  1570  0DCB                     	;# 
  1571  0DCC                     	;# 
  1572  0DCC                     	;# 
  1573  0DCD                     	;# 
  1574  0DCD                     	;# 
  1575  0DCE                     	;# 
  1576  0DCF                     	;# 
  1577  0DD0                     	;# 
  1578  0E0F                     	;# 
  1579  0E10                     	;# 
  1580  0E11                     	;# 
  1581  0E12                     	;# 
  1582  0E13                     	;# 
  1583  0E14                     	;# 
  1584  0E15                     	;# 
  1585  0E16                     	;# 
  1586  0E17                     	;# 
  1587  0E90                     	;# 
  1588  0E91                     	;# 
  1589  0E92                     	;# 
  1590  0E94                     	;# 
  1591  0E95                     	;# 
  1592  0EA0                     	;# 
  1593  0EA1                     	;# 
  1594  0EA2                     	;# 
  1595  0EA3                     	;# 
  1596  0EA4                     	;# 
  1597  0EA5                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEE                     	;# 
  1611  0FEF                     	;_PD
  1612                           
  1613                           	psect	idataBANK0
  1614  0000                     __pidataBANK0:	
  1615                           
  1616                           	psect	idataBANK2
  1617  0000                     __pidataBANK2:	
  1618                           
  1619                           	psect	stringtext
  1620  0749                     __pstringtext:	
  1621  0749                     _PWM:	
  1622  0749  3400               	retlw	0
  1623  074A  3400               	retlw	0
  1624  074B  34C8               	retlw	200
  1625  074C  3400               	retlw	0
  1626  074D  34CC               	retlw	204
  1627  074E  3400               	retlw	0
  1628  074F  34D1               	retlw	209
  1629  0750  3400               	retlw	0
  1630  0751  34D6               	retlw	214
  1631  0752  3400               	retlw	0
  1632  0753  34DB               	retlw	219
  1633  0754  3400               	retlw	0
  1634  0755  34E1               	retlw	225
  1635  0756  3400               	retlw	0
  1636  0757  34E6               	retlw	230
  1637  0758  3400               	retlw	0
  1638  0759  34EC               	retlw	236
  1639  075A  3400               	retlw	0
  1640  075B  34F1               	retlw	241
  1641  075C  3400               	retlw	0
  1642  075D  34F7               	retlw	247
  1643  075E  3400               	retlw	0
  1644  075F  34FD               	retlw	253
  1645  0760  3400               	retlw	0
  1646  0761  3403               	retlw	3
  1647  0762  3401               	retlw	1
  1648  0763  3409               	retlw	9
  1649  0764  3401               	retlw	1
  1650  0765  3410               	retlw	16
  1651  0766  3401               	retlw	1
  1652  0767  3416               	retlw	22
  1653  0768  3401               	retlw	1
  1654  0769  341D               	retlw	29
  1655  076A  3401               	retlw	1
  1656  076B  3424               	retlw	36
  1657  076C  3401               	retlw	1
  1658  076D  342B               	retlw	43
  1659  076E  3401               	retlw	1
  1660  076F  3432               	retlw	50
  1661  0770  3401               	retlw	1
  1662  0771  3439               	retlw	57
  1663  0772  3401               	retlw	1
  1664  0773  3441               	retlw	65
  1665  0774  3401               	retlw	1
  1666  0775  3449               	retlw	73
  1667  0776  3401               	retlw	1
  1668  0777  3451               	retlw	81
  1669  0778  3401               	retlw	1
  1670  0779  3459               	retlw	89
  1671  077A  3401               	retlw	1
  1672  077B  3461               	retlw	97
  1673  077C  3401               	retlw	1
  1674  077D  346A               	retlw	106
  1675  077E  3401               	retlw	1
  1676  077F  3472               	retlw	114
  1677  0780  3401               	retlw	1
  1678  0781  347B               	retlw	123
  1679  0782  3401               	retlw	1
  1680  0783  3484               	retlw	132
  1681  0784  3401               	retlw	1
  1682  0785  348E               	retlw	142
  1683  0786  3401               	retlw	1
  1684  0787  3497               	retlw	151
  1685  0788  3401               	retlw	1
  1686  0789  34A1               	retlw	161
  1687  078A  3401               	retlw	1
  1688  078B  34AB               	retlw	171
  1689  078C  3401               	retlw	1
  1690  078D  34B5               	retlw	181
  1691  078E  3401               	retlw	1
  1692  078F  34C0               	retlw	192
  1693  0790  3401               	retlw	1
  1694  0791  34CB               	retlw	203
  1695  0792  3401               	retlw	1
  1696  0793  34D6               	retlw	214
  1697  0794  3401               	retlw	1
  1698  0795  34E1               	retlw	225
  1699  0796  3401               	retlw	1
  1700  0797  34EC               	retlw	236
  1701  0798  3401               	retlw	1
  1702  0799  34F8               	retlw	248
  1703  079A  3401               	retlw	1
  1704  079B  3404               	retlw	4
  1705  079C  3402               	retlw	2
  1706  079D  3411               	retlw	17
  1707  079E  3402               	retlw	2
  1708  079F  341E               	retlw	30
  1709  07A0  3402               	retlw	2
  1710  07A1  342B               	retlw	43
  1711  07A2  3402               	retlw	2
  1712  07A3  3438               	retlw	56
  1713  07A4  3402               	retlw	2
  1714  07A5  3446               	retlw	70
  1715  07A6  3402               	retlw	2
  1716  07A7  3454               	retlw	84
  1717  07A8  3402               	retlw	2
  1718  07A9  3462               	retlw	98
  1719  07AA  3402               	retlw	2
  1720  07AB  3470               	retlw	112
  1721  07AC  3402               	retlw	2
  1722  07AD  3480               	retlw	128
  1723  07AE  3402               	retlw	2
  1724  07AF  348F               	retlw	143
  1725  07B0  3402               	retlw	2
  1726  07B1  349F               	retlw	159
  1727  07B2  3402               	retlw	2
  1728  07B3  34AF               	retlw	175
  1729  07B4  3402               	retlw	2
  1730  07B5  34BF               	retlw	191
  1731  07B6  3402               	retlw	2
  1732  07B7  34D0               	retlw	208
  1733  07B8  3402               	retlw	2
  1734  07B9  34E1               	retlw	225
  1735  07BA  3402               	retlw	2
  1736  07BB  34F3               	retlw	243
  1737  07BC  3402               	retlw	2
  1738  07BD  3405               	retlw	5
  1739  07BE  3403               	retlw	3
  1740  07BF  3418               	retlw	24
  1741  07C0  3403               	retlw	3
  1742  07C1  342B               	retlw	43
  1743  07C2  3403               	retlw	3
  1744  07C3  343E               	retlw	62
  1745  07C4  3403               	retlw	3
  1746  07C5  3452               	retlw	82
  1747  07C6  3403               	retlw	3
  1748  07C7  3467               	retlw	103
  1749  07C8  3403               	retlw	3
  1750  07C9  347C               	retlw	124
  1751  07CA  3403               	retlw	3
  1752  07CB  3491               	retlw	145
  1753  07CC  3403               	retlw	3
  1754  07CD  34A7               	retlw	167
  1755  07CE  3403               	retlw	3
  1756  07CF  34BE               	retlw	190
  1757  07D0  3403               	retlw	3
  1758  07D1  34D5               	retlw	213
  1759  07D2  3403               	retlw	3
  1760  07D3  34EC               	retlw	236
  1761  07D4  3403               	retlw	3
  1762  07D5  3404               	retlw	4
  1763  07D6  3404               	retlw	4
  1764  07D7  341D               	retlw	29
  1765  07D8  3404               	retlw	4
  1766  07D9  3436               	retlw	54
  1767  07DA  3404               	retlw	4
  1768  07DB  3450               	retlw	80
  1769  07DC  3404               	retlw	4
  1770  07DD  346B               	retlw	107
  1771  07DE  3404               	retlw	4
  1772  07DF  3486               	retlw	134
  1773  07E0  3404               	retlw	4
  1774  07E1  34A2               	retlw	162
  1775  07E2  3404               	retlw	4
  1776  07E3  34BE               	retlw	190
  1777  07E4  3404               	retlw	4
  1778  07E5  34DC               	retlw	220
  1779  07E6  3404               	retlw	4
  1780  07E7  34F9               	retlw	249
  1781  07E8  3404               	retlw	4
  1782  07E9  3418               	retlw	24
  1783  07EA  3405               	retlw	5
  1784  07EB  3437               	retlw	55
  1785  07EC  3405               	retlw	5
  1786  07ED  3457               	retlw	87
  1787  07EE  3405               	retlw	5
  1788  07EF  3478               	retlw	120
  1789  07F0  3405               	retlw	5
  1790  07F1  349A               	retlw	154
  1791  07F2  3405               	retlw	5
  1792  07F3  34BC               	retlw	188
  1793  07F4  3405               	retlw	5
  1794  07F5  34E0               	retlw	224
  1795  07F6  3405               	retlw	5
  1796  07F7  3404               	retlw	4
  1797  07F8  3406               	retlw	6
  1798  07F9  3429               	retlw	41
  1799  07FA  3406               	retlw	6
  1800  07FB  344F               	retlw	79
  1801  07FC  3406               	retlw	6
  1802  07FD  3476               	retlw	118
  1803  07FE  3406               	retlw	6
  1804  07FF  349D               	retlw	157
  1805  0800  3406               	retlw	6
  1806  0801  34C6               	retlw	198
  1807  0802  3406               	retlw	6
  1808  0803  34F0               	retlw	240
  1809  0804  3406               	retlw	6
  1810  0805  341A               	retlw	26
  1811  0806  3407               	retlw	7
  1812  0807  3446               	retlw	70
  1813  0808  3407               	retlw	7
  1814  0809  3473               	retlw	115
  1815  080A  3407               	retlw	7
  1816  080B  34A1               	retlw	161
  1817  080C  3407               	retlw	7
  1818  080D  34CF               	retlw	207
  1819  080E  3407               	retlw	7
  1820  080F  3400               	retlw	0
  1821  0810  3408               	retlw	8
  1822  0811  3431               	retlw	49
  1823  0812  3408               	retlw	8
  1824  0813  3463               	retlw	99
  1825  0814  3408               	retlw	8
  1826  0815  3497               	retlw	151
  1827  0816  3408               	retlw	8
  1828  0817  34CB               	retlw	203
  1829  0818  3408               	retlw	8
  1830  0819  3402               	retlw	2
  1831  081A  3409               	retlw	9
  1832  081B  3439               	retlw	57
  1833  081C  3409               	retlw	9
  1834  081D  3472               	retlw	114
  1835  081E  3409               	retlw	9
  1836  081F  34AC               	retlw	172
  1837  0820  3409               	retlw	9
  1838  0821  34E7               	retlw	231
  1839  0822  3409               	retlw	9
  1840  0823  3424               	retlw	36
  1841  0824  340A               	retlw	10
  1842  0825  3463               	retlw	99
  1843  0826  340A               	retlw	10
  1844  0827  34A2               	retlw	162
  1845  0828  340A               	retlw	10
  1846  0829  34E4               	retlw	228
  1847  082A  340A               	retlw	10
  1848  082B  3427               	retlw	39
  1849  082C  340B               	retlw	11
  1850  082D  346B               	retlw	107
  1851  082E  340B               	retlw	11
  1852  082F  34B2               	retlw	178
  1853  0830  340B               	retlw	11
  1854  0831  34FA               	retlw	250
  1855  0832  340B               	retlw	11
  1856  0833  3443               	retlw	67
  1857  0834  340C               	retlw	12
  1858  0835  348F               	retlw	143
  1859  0836  340C               	retlw	12
  1860  0837  34DC               	retlw	220
  1861  0838  340C               	retlw	12
  1862  0839  342B               	retlw	43
  1863  083A  340D               	retlw	13
  1864  083B  347C               	retlw	124
  1865  083C  340D               	retlw	13
  1866  083D  34CF               	retlw	207
  1867  083E  340D               	retlw	13
  1868  083F  3424               	retlw	36
  1869  0840  340E               	retlw	14
  1870  0841  347B               	retlw	123
  1871  0842  340E               	retlw	14
  1872  0843  34D4               	retlw	212
  1873  0844  340E               	retlw	14
  1874  0845  342F               	retlw	47
  1875  0846  340F               	retlw	15
  1876  0847  348C               	retlw	140
  1877  0848  340F               	retlw	15
  1878  0849  34EC               	retlw	236
  1879  084A  340F               	retlw	15
  1880  084B  344E               	retlw	78
  1881  084C  3410               	retlw	16
  1882  084D  34B2               	retlw	178
  1883  084E  3410               	retlw	16
  1884  084F  3419               	retlw	25
  1885  0850  3411               	retlw	17
  1886  0851  3482               	retlw	130
  1887  0852  3411               	retlw	17
  1888  0853  34EE               	retlw	238
  1889  0854  3411               	retlw	17
  1890  0855  345C               	retlw	92
  1891  0856  3412               	retlw	18
  1892  0857  34CD               	retlw	205
  1893  0858  3412               	retlw	18
  1894  0859  3441               	retlw	65
  1895  085A  3413               	retlw	19
  1896  085B  34B7               	retlw	183
  1897  085C  3413               	retlw	19
  1898  085D  3430               	retlw	48
  1899  085E  3414               	retlw	20
  1900  085F  34AC               	retlw	172
  1901  0860  3414               	retlw	20
  1902  0861  342C               	retlw	44
  1903  0862  3415               	retlw	21
  1904  0863  34AE               	retlw	174
  1905  0864  3415               	retlw	21
  1906  0865  3433               	retlw	51
  1907  0866  3416               	retlw	22
  1908  0867  34BC               	retlw	188
  1909  0868  3416               	retlw	22
  1910  0869  3447               	retlw	71
  1911  086A  3417               	retlw	23
  1912  086B  34D7               	retlw	215
  1913  086C  3417               	retlw	23
  1914  086D  3469               	retlw	105
  1915  086E  3418               	retlw	24
  1916  086F  34FF               	retlw	255
  1917  0870  3418               	retlw	24
  1918  0871  3499               	retlw	153
  1919  0872  3419               	retlw	25
  1920  0873  3437               	retlw	55
  1921  0874  341A               	retlw	26
  1922  0875  34D8               	retlw	216
  1923  0876  341A               	retlw	26
  1924  0877  347D               	retlw	125
  1925  0878  341B               	retlw	27
  1926  0879  3426               	retlw	38
  1927  087A  341C               	retlw	28
  1928  087B  34D3               	retlw	211
  1929  087C  341C               	retlw	28
  1930  087D  3484               	retlw	132
  1931  087E  341D               	retlw	29
  1932  087F  343A               	retlw	58
  1933  0880  341E               	retlw	30
  1934  0881  34F4               	retlw	244
  1935  0882  341E               	retlw	30
  1936  0883  34B2               	retlw	178
  1937  0884  341F               	retlw	31
  1938  0885  3475               	retlw	117
  1939  0886  3420               	retlw	32
  1940  0887  343D               	retlw	61
  1941  0888  3421               	retlw	33
  1942  0889  3409               	retlw	9
  1943  088A  3422               	retlw	34
  1944  088B  34DA               	retlw	218
  1945  088C  3422               	retlw	34
  1946  088D  34B1               	retlw	177
  1947  088E  3423               	retlw	35
  1948  088F  348C               	retlw	140
  1949  0890  3424               	retlw	36
  1950  0891  346D               	retlw	109
  1951  0892  3425               	retlw	37
  1952  0893  3453               	retlw	83
  1953  0894  3426               	retlw	38
  1954  0895  343F               	retlw	63
  1955  0896  3427               	retlw	39
  1956  0897  3430               	retlw	48
  1957  0898  3428               	retlw	40
  1958  0899  3427               	retlw	39
  1959  089A  3429               	retlw	41
  1960  089B  3424               	retlw	36
  1961  089C  342A               	retlw	42
  1962  089D  3428               	retlw	40
  1963  089E  342B               	retlw	43
  1964  089F  3431               	retlw	49
  1965  08A0  342C               	retlw	44
  1966  08A1  3441               	retlw	65
  1967  08A2  342D               	retlw	45
  1968  08A3  3457               	retlw	87
  1969  08A4  342E               	retlw	46
  1970  08A5  3474               	retlw	116
  1971  08A6  342F               	retlw	47
  1972  08A7  3498               	retlw	152
  1973  08A8  3430               	retlw	48
  1974  08A9  34C3               	retlw	195
  1975  08AA  3431               	retlw	49
  1976  08AB  34F5               	retlw	245
  1977  08AC  3432               	retlw	50
  1978  08AD  342E               	retlw	46
  1979  08AE  3434               	retlw	52
  1980  08AF  346F               	retlw	111
  1981  08B0  3435               	retlw	53
  1982  08B1  34B7               	retlw	183
  1983  08B2  3436               	retlw	54
  1984  08B3  3408               	retlw	8
  1985  08B4  3438               	retlw	56
  1986  08B5  3461               	retlw	97
  1987  08B6  3439               	retlw	57
  1988  08B7  34C1               	retlw	193
  1989  08B8  343A               	retlw	58
  1990  08B9  342B               	retlw	43
  1991  08BA  343C               	retlw	60
  1992  08BB  349D               	retlw	157
  1993  08BC  343D               	retlw	61
  1994  08BD  3418               	retlw	24
  1995  08BE  343F               	retlw	63
  1996  08BF  349C               	retlw	156
  1997  08C0  3440               	retlw	64
  1998  08C1  3429               	retlw	41
  1999  08C2  3442               	retlw	66
  2000  08C3  34C0               	retlw	192
  2001  08C4  3443               	retlw	67
  2002  08C5  3461               	retlw	97
  2003  08C6  3445               	retlw	69
  2004  08C7  340B               	retlw	11
  2005  08C8  3447               	retlw	71
  2006  08C9  34C0               	retlw	192
  2007  08CA  3448               	retlw	72
  2008  08CB  347F               	retlw	127
  2009  08CC  344A               	retlw	74
  2010  08CD  344A               	retlw	74
  2011  08CE  344C               	retlw	76
  2012  08CF  341F               	retlw	31
  2013  08D0  344E               	retlw	78
  2014  08D1  34FF               	retlw	255
  2015  08D2  344F               	retlw	79
  2016  08D3  34EB               	retlw	235
  2017  08D4  3451               	retlw	81
  2018  08D5  34E3               	retlw	227
  2019  08D6  3453               	retlw	83
  2020  08D7  34E7               	retlw	231
  2021  08D8  3455               	retlw	85
  2022  08D9  34F7               	retlw	247
  2023  08DA  3457               	retlw	87
  2024  08DB  3414               	retlw	20
  2025  08DC  345A               	retlw	90
  2026  08DD  343E               	retlw	62
  2027  08DE  345C               	retlw	92
  2028  08DF  3475               	retlw	117
  2029  08E0  345E               	retlw	94
  2030  08E1  34BA               	retlw	186
  2031  08E2  3460               	retlw	96
  2032  08E3  340D               	retlw	13
  2033  08E4  3463               	retlw	99
  2034  08E5  346E               	retlw	110
  2035  08E6  3465               	retlw	101
  2036  08E7  34DE               	retlw	222
  2037  08E8  3467               	retlw	103
  2038  08E9  345D               	retlw	93
  2039  08EA  346A               	retlw	106
  2040  08EB  34EB               	retlw	235
  2041  08EC  346C               	retlw	108
  2042  08ED  3488               	retlw	136
  2043  08EE  346F               	retlw	111
  2044  08EF  3436               	retlw	54
  2045  08F0  3472               	retlw	114
  2046  08F1  34F5               	retlw	245
  2047  08F2  3474               	retlw	116
  2048  08F3  34C4               	retlw	196
  2049  08F4  3477               	retlw	119
  2050  08F5  34A5               	retlw	165
  2051  08F6  347A               	retlw	122
  2052  08F7  3497               	retlw	151
  2053  08F8  347D               	retlw	125
  2054  08F9  349B               	retlw	155
  2055  08FA  3480               	retlw	128
  2056  08FB  34B2               	retlw	178
  2057  08FC  3483               	retlw	131
  2058  08FD  34DC               	retlw	220
  2059  08FE  3486               	retlw	134
  2060  08FF  3419               	retlw	25
  2061  0900  348A               	retlw	138
  2062  0901  346A               	retlw	106
  2063  0902  348D               	retlw	141
  2064  0903  34D0               	retlw	208
  2065  0904  3490               	retlw	144
  2066  0905  344B               	retlw	75
  2067  0906  3494               	retlw	148
  2068  0907  34DB               	retlw	219
  2069  0908  3497               	retlw	151
  2070  0909  3480               	retlw	128
  2071  090A  349B               	retlw	155
  2072  090B  343D               	retlw	61
  2073  090C  349F               	retlw	159
  2074  090D  3410               	retlw	16
  2075  090E  34A3               	retlw	163
  2076  090F  34FB               	retlw	251
  2077  0910  34A6               	retlw	166
  2078  0911  34FE               	retlw	254
  2079  0912  34AA               	retlw	170
  2080  0913  3419               	retlw	25
  2081  0914  34AF               	retlw	175
  2082  0915  344E               	retlw	78
  2083  0916  34B3               	retlw	179
  2084  0917  349D               	retlw	157
  2085  0918  34B7               	retlw	183
  2086  0919  3406               	retlw	6
  2087  091A  34BC               	retlw	188
  2088  091B  348A               	retlw	138
  2089  091C  34C0               	retlw	192
  2090  091D  342A               	retlw	42
  2091  091E  34C5               	retlw	197
  2092  091F  34E7               	retlw	231
  2093  0920  34C9               	retlw	201
  2094  0921  34C0               	retlw	192
  2095  0922  34CE               	retlw	206
  2096  0923  34B8               	retlw	184
  2097  0924  34D3               	retlw	211
  2098  0925  34CE               	retlw	206
  2099  0926  34D8               	retlw	216
  2100  0927  3403               	retlw	3
  2101  0928  34DE               	retlw	222
  2102  0929  3458               	retlw	88
  2103  092A  34E3               	retlw	227
  2104  092B  34CE               	retlw	206
  2105  092C  34E8               	retlw	232
  2106  092D  3466               	retlw	102
  2107  092E  34EE               	retlw	238
  2108  092F  3420               	retlw	32
  2109  0930  34F4               	retlw	244
  2110  0931  34FD               	retlw	253
  2111  0932  34F9               	retlw	249
  2112  0933  34FF               	retlw	255
  2113  0934  34FF               	retlw	255
  2114  0935  34FF               	retlw	255
  2115  0936  34FF               	retlw	255
  2116  0937  34FF               	retlw	255
  2117  0938  34FF               	retlw	255
  2118  0939  34FF               	retlw	255
  2119  093A  34FF               	retlw	255
  2120  093B  34FF               	retlw	255
  2121  093C  34FF               	retlw	255
  2122  093D  34FF               	retlw	255
  2123  093E  34FF               	retlw	255
  2124  093F  34FF               	retlw	255
  2125  0940  34FF               	retlw	255
  2126  0941  34FF               	retlw	255
  2127  0942  34FF               	retlw	255
  2128  0943  34FF               	retlw	255
  2129  0944  34FF               	retlw	255
  2130  0945  34FF               	retlw	255
  2131  0946  34FF               	retlw	255
  2132  0947  34FF               	retlw	255
  2133  0948  34FF               	retlw	255
  2134  0949                     __end_of_PWM:	
  2135  0949                     RDM@PERSONALITY_DEFINITIONS:	
  2136  0949  3401               	retlw	1
  2137  094A  3401               	retlw	1
  2138  094B  34B5               	retlw	low (_PERSONALITY_1| (0+32768))
  2139  094C  3489               	retlw	high (_PERSONALITY_1| (0+32768))
  2140  094D  3406               	retlw	6
  2141  094E  3402               	retlw	2
  2142  094F  3402               	retlw	2
  2143  0950  34AF               	retlw	low (_PERSONALITY_2| (0+32768))
  2144  0951  3489               	retlw	high (_PERSONALITY_2| (0+32768))
  2145  0952  3406               	retlw	6
  2146  0953  3403               	retlw	3
  2147  0954  3403               	retlw	3
  2148  0955  34A9               	retlw	low (_PERSONALITY_3| (0+32768))
  2149  0956  3489               	retlw	high (_PERSONALITY_3| (0+32768))
  2150  0957  3406               	retlw	6
  2151  0958  3404               	retlw	4
  2152  0959  3404               	retlw	4
  2153  095A  34A3               	retlw	low (_PERSONALITY_4| (0+32768))
  2154  095B  3489               	retlw	high (_PERSONALITY_4| (0+32768))
  2155  095C  3406               	retlw	6
  2156  095D  3405               	retlw	5
  2157  095E  3402               	retlw	2
  2158  095F  3496               	retlw	low (_PERSONALITY_5| (0+32768))
  2159  0960  3489               	retlw	high (_PERSONALITY_5| (0+32768))
  2160  0961  340D               	retlw	13
  2161  0962  3406               	retlw	6
  2162  0963  3404               	retlw	4
  2163  0964  3489               	retlw	low (_PERSONALITY_6| (0+32768))
  2164  0965  3489               	retlw	high (_PERSONALITY_6| (0+32768))
  2165  0966  340D               	retlw	13
  2166  0967                     __end_ofRDM@PERSONALITY_DEFINITIONS:	
  2167  0967                     _SOFTWARE_VERSION_LABEL:	
  2168  0967  344D               	retlw	77
  2169  0968  3465               	retlw	101
  2170  0969  3474               	retlw	116
  2171  096A  3465               	retlw	101
  2172  096B  346F               	retlw	111
  2173  096C  3472               	retlw	114
  2174  096D  3420               	retlw	32
  2175  096E  344C               	retlw	76
  2176  096F  3469               	retlw	105
  2177  0970  3467               	retlw	103
  2178  0971  3468               	retlw	104
  2179  0972  3474               	retlw	116
  2180  0973  3469               	retlw	105
  2181  0974  346E               	retlw	110
  2182  0975  3467               	retlw	103
  2183  0976  3420               	retlw	32
  2184  0977  3476               	retlw	118
  2185  0978  3431               	retlw	49
  2186  0979  3437               	retlw	55
  2187  097A  3431               	retlw	49
  2188  097B  3430               	retlw	48
  2189  097C  3431               	retlw	49
  2190  097D  3432               	retlw	50
  2191  097E  3400               	retlw	0
  2192  097F                     __end_of_SOFTWARE_VERSION_LABEL:	
  2193  097F                     _UID:	
  2194  097F  3408               	retlw	8
  2195  0980  34BA               	retlw	186
  2196  0981  3412               	retlw	18
  2197  0982  3434               	retlw	52
  2198  0983  3456               	retlw	86
  2199  0984  3478               	retlw	120
  2200  0985                     __end_of_UID:	
  2201  0985                     RDM@PID_DEFINITIONS:	
  2202  0985  34E0               	retlw	224
  2203  0986  3400               	retlw	0
  2204  0987  34E1               	retlw	225
  2205  0988  3400               	retlw	0
  2206  0989                     __end_ofRDM@PID_DEFINITIONS:	
  2207  0989                     _PERSONALITY_6:	
  2208  0989  3432               	retlw	50
  2209  098A  3420               	retlw	32
  2210  098B  344C               	retlw	76
  2211  098C  344F               	retlw	79
  2212  098D  3447               	retlw	71
  2213  098E  342C               	retlw	44
  2214  098F  3420               	retlw	32
  2215  0990  3432               	retlw	50
  2216  0991  3420               	retlw	32
  2217  0992  3443               	retlw	67
  2218  0993  3443               	retlw	67
  2219  0994  3454               	retlw	84
  2220  0995  3400               	retlw	0
  2221  0996                     __end_of_PERSONALITY_6:	
  2222  0996                     _PERSONALITY_5:	
  2223  0996  3431               	retlw	49
  2224  0997  3420               	retlw	32
  2225  0998  344C               	retlw	76
  2226  0999  344F               	retlw	79
  2227  099A  3447               	retlw	71
  2228  099B  342C               	retlw	44
  2229  099C  3420               	retlw	32
  2230  099D  3431               	retlw	49
  2231  099E  3420               	retlw	32
  2232  099F  3443               	retlw	67
  2233  09A0  3443               	retlw	67
  2234  09A1  3454               	retlw	84
  2235  09A2  3400               	retlw	0
  2236  09A3                     __end_of_PERSONALITY_5:	
  2237  09A3                     _PERSONALITY_4:	
  2238  09A3  3434               	retlw	52
  2239  09A4  3420               	retlw	32
  2240  09A5  344C               	retlw	76
  2241  09A6  344F               	retlw	79
  2242  09A7  3447               	retlw	71
  2243  09A8  3400               	retlw	0
  2244  09A9                     __end_of_PERSONALITY_4:	
  2245  09A9                     _PERSONALITY_3:	
  2246  09A9  3433               	retlw	51
  2247  09AA  3420               	retlw	32
  2248  09AB  344C               	retlw	76
  2249  09AC  344F               	retlw	79
  2250  09AD  3447               	retlw	71
  2251  09AE  3400               	retlw	0
  2252  09AF                     __end_of_PERSONALITY_3:	
  2253  09AF                     _PERSONALITY_2:	
  2254  09AF  3432               	retlw	50
  2255  09B0  3420               	retlw	32
  2256  09B1  344C               	retlw	76
  2257  09B2  344F               	retlw	79
  2258  09B3  3447               	retlw	71
  2259  09B4  3400               	retlw	0
  2260  09B5                     __end_of_PERSONALITY_2:	
  2261  09B5                     _PERSONALITY_1:	
  2262  09B5  3431               	retlw	49
  2263  09B6  3420               	retlw	32
  2264  09B7  344C               	retlw	76
  2265  09B8  344F               	retlw	79
  2266  09B9  3447               	retlw	71
  2267  09BA  3400               	retlw	0
  2268  09BB                     __end_of_PERSONALITY_1:	
  2269  0016                     _TMR1	set	22
  2270  001C                     _T2CON	set	28
  2271  0018                     _T1CON	set	24
  2272  000B                     _INTCON	set	11
  2273  001B                     _PR2	set	27
  2274  005F                     _GIE	set	95
  2275  0089                     _TMR2IF	set	137
  2276  0088                     _TMR1IF	set	136
  2277  008C                     _TXIF	set	140
  2278  005E                     _PEIE	set	94
  2279  008D                     _RCIF	set	141
  2280  0098                     _OSCTUNE	set	152
  2281  0099                     _OSCCON	set	153
  2282  0489                     _TMR2IE	set	1161
  2283  0488                     _TMR1IE	set	1160
  2284  048C                     _TXIE	set	1164
  2285  0474                     _TRISC4	set	1140
  2286  048D                     _RCIE	set	1165
  2287  0475                     _TRISC5	set	1141
  2288  0473                     _TRISC3	set	1139
  2289  0472                     _TRISC2	set	1138
  2290  0471                     _TRISC1	set	1137
  2291  0470                     _TRISC0	set	1136
  2292  0462                     _TRISA2	set	1122
  2293  0873                     _LATC3	set	2163
  2294  0874                     _LATC4	set	2164
  2295  0193                     _PMDAT	set	403
  2296  0191                     _PMADR	set	401
  2297  0196                     _PMCON2	set	406
  2298  019A                     _TXREG	set	410
  2299  0199                     _RCREG	set	409
  2300  019B                     _SPBRGL	set	411
  2301  019C                     _SPBRGH	set	412
  2302  019F                     _BAUDCON	set	415
  2303  019D                     _RCSTA	set	413
  2304  0CAD                     _LWLO	set	3245
  2305  0CA9                     _WR	set	3241
  2306  0CAA                     _WREN	set	3242
  2307  0CAC                     _FREE	set	3244
  2308  0CAE                     _CFGS	set	3246
  2309  0CA8                     _RD	set	3240
  2310  0CF5                     _TXEN	set	3317
  2311  0CF0                     _TX9D	set	3312
  2312  0CF6                     _TX9	set	3318
  2313  0CEF                     _SPEN	set	3311
  2314  0CEA                     _FERR	set	3306
  2315  0CF2                     _BRGH	set	3314
  2316  0CF4                     _SYNC	set	3316
  2317  0C73                     _ANSC3	set	3187
  2318  0C72                     _ANSC2	set	3186
  2319  0C71                     _ANSC1	set	3185
  2320  0C70                     _ANSC0	set	3184
  2321  0C62                     _ANSA2	set	3170
  2322  0DCB                     _PWM4CON	set	3531
  2323  0DBB                     _PWM3CON	set	3515
  2324  0DAB                     _PWM2CON	set	3499
  2325  0D9B                     _PWM1CON	set	3483
  2326  0DCE                     _PWM4CLKCON	set	3534
  2327  0DBE                     _PWM3CLKCON	set	3518
  2328  0DAE                     _PWM2CLKCON	set	3502
  2329  0D9E                     _PWM1CLKCON	set	3486
  2330  0DC5                     _PWM4PRL	set	3525
  2331  0DB5                     _PWM3PRL	set	3509
  2332  0DA5                     _PWM2PRL	set	3493
  2333  0D95                     _PWM1PRL	set	3477
  2334  0DC6                     _PWM4PRH	set	3526
  2335  0DB6                     _PWM3PRH	set	3510
  2336  0DA6                     _PWM2PRH	set	3494
  2337  0D96                     _PWM1PRH	set	3478
  2338  0DC1                     _PWM4PHL	set	3521
  2339  0DB1                     _PWM3PHL	set	3505
  2340  0DA1                     _PWM2PHL	set	3489
  2341  0D91                     _PWM1PHL	set	3473
  2342  0DC2                     _PWM4PHH	set	3522
  2343  0DB2                     _PWM3PHH	set	3506
  2344  0DA2                     _PWM2PHH	set	3490
  2345  0D92                     _PWM1PHH	set	3474
  2346  0DCF                     _PWM4LDCON	set	3535
  2347  0DBF                     _PWM3LDCON	set	3519
  2348  0DAF                     _PWM2LDCON	set	3503
  2349  0D9F                     _PWM1LDCON	set	3487
  2350  0DC3                     _PWM4DCL	set	3523
  2351  0DB3                     _PWM3DCL	set	3507
  2352  0DA3                     _PWM2DCL	set	3491
  2353  0D93                     _PWM1DCL	set	3475
  2354  0DC4                     _PWM4DCH	set	3524
  2355  0DB4                     _PWM3DCH	set	3508
  2356  0DA4                     _PWM2DCH	set	3492
  2357  0D94                     _PWM1DCH	set	3476
  2358  0E15                     _RXPPS	set	3605
  2359  0EA4                     _RC4PPS	set	3748
  2360  0EA2                     _RC2PPS	set	3746
  2361  0EA1                     _RC1PPS	set	3745
  2362  0EA0                     _RC0PPS	set	3744
  2363  0E92                     _RA2PPS	set	3730
  2364                           
  2365                           ; #config settings
  2366  0000                     
  2367                           	psect	bssCOMMON
  2368  0076                     __pbssCOMMON:	
  2369  0076                     _DMX_Flags:	
  2370  0076                     	ds	2
  2371  0078                     _PackCount:	
  2372  0078                     	ds	1
  2373  0079                     _Addr:	
  2374  0079                     	ds	1
  2375                           
  2376                           	psect	bssBANK0
  2377  0020                     __pbssBANK0:	
  2378  0020                     _Timer:	
  2379  0020                     	ds	7
  2380  0027                     _checkSum:	
  2381  0027                     	ds	2
  2382  0029                     _TX_Discovery_Flag:	
  2383  0029                     	ds	2
  2384  002B                     _TX_PD_Flag:	
  2385  002B                     	ds	2
  2386  002D                     _PD_Flag:	
  2387  002D                     	ds	2
  2388  002F                     _PD_ID_ptr:	
  2389  002F                     	ds	2
  2390  0031                     _PD_Manu_ptr:	
  2391  0031                     	ds	2
  2392  0033                     _BytePtr:	
  2393  0033                     	ds	2
  2394  0035                     _TxCount:	
  2395  0035                     	ds	2
  2396  0037                     _i:	
  2397  0037                     	ds	2
  2398  0039                     _RxTimer:	
  2399  0039                     	ds	2
  2400  003B                     _RxAddrCount:	
  2401  003B                     	ds	2
  2402  003D                     _DMX_Address:	
  2403  003D                     	ds	2
  2404  003F                     _ADC_Flags:	
  2405  003F                     	ds	1
  2406  0040                     _ADC_Data:	
  2407  0040                     	ds	1
  2408  0041                     _Timer2_Count:	
  2409  0041                     	ds	1
  2410  0042                     _Timer_DelayCount:	
  2411  0042                     	ds	1
  2412  0043                     _TimerState:	
  2413  0043                     	ds	1
  2414  0044                     _PERSONALITY:	
  2415  0044                     	ds	1
  2416  0045                     _TX_PDCount:	
  2417  0045                     	ds	1
  2418  0046                     _PDCount:	
  2419  0046                     	ds	1
  2420  0047                     _TxState:	
  2421  0047                     	ds	1
  2422  0048                     _DMXDimming:	
  2423  0048                     	ds	1
  2424  0049                     _DMXPeriodConst:	
  2425  0049                     	ds	1
  2426  004A                     _RxState:	
  2427  004A                     	ds	1
  2428  004B                     _RxDataPtr:	
  2429  004B                     	ds	1
  2430  004C                     _RxData:	
  2431  004C                     	ds	4
  2432                           
  2433                           	psect	dataBANK0
  2434  006E                     __pdataBANK0:	
  2435  006E                     _IDENTIFY_MODE:	
  2436  006E                     	ds	1
  2437                           
  2438                           	psect	bssBANK1
  2439  00A0                     __pbssBANK1:	
  2440  00A0                     _RX_RDM_Data:	
  2441  00A0                     	ds	24
  2442  00B8                     _PWMLDCONptr:	
  2443  00B8                     	ds	8
  2444  00C0                     _PWMDCHptr:	
  2445  00C0                     	ds	8
  2446  00C8                     _PWMDCLptr:	
  2447  00C8                     	ds	8
  2448  00D0                     _DMXSign:	
  2449  00D0                     	ds	4
  2450  00D4                     _DMX_difference:	
  2451  00D4                     	ds	3
  2452  00D7                     _TX_RDM_Data:	
  2453  00D7                     	ds	24
  2454                           
  2455                           	psect	bssBANK2
  2456  0120                     __pbssBANK2:	
  2457  0120                     _DMX_TargetBright:	
  2458  0120                     	ds	12
  2459  012C                     _DMX_SpaceBright:	
  2460  012C                     	ds	12
  2461  0138                     _DMX_CurrentBright:	
  2462  0138                     	ds	12
  2463  0144                     _CurrentPWM:	
  2464  0144                     	ds	8
  2465  014C                     _DISCOVERY_RDM_Data:	
  2466  014C                     	ds	24
  2467                           
  2468                           	psect	dataBANK2
  2469  0164                     __pdataBANK2:	
  2470  0164                     _DMX_Repeat:	
  2471  0164                     	ds	8
  2472  016C                     _DMX_sumRepeat:	
  2473  016C                     	ds	4
  2474                           
  2475                           	psect	clrtext
  2476  0E95                     clear_ram0:	
  2477                           ;	Called with FSR0 containing the base address, and
  2478                           ;	btemp/btemp+1 has the size to clear
  2479                           
  2480  0E95  0064               	clrwdt	;clear the watchdog before getting into this loop
  2481  0E96                     clrloop0:	
  2482  0E96  3001               	movlw	1
  2483  0E97  0180               	clrf	0	;clear RAM location pointed to by FSR
  2484  0E98  3101               	addfsr 0,1
  2485  0E99  02FE               	subwf	126,f
  2486  0E9A  3000               	movlw	0
  2487  0E9B  3BFF               	subwfb	127,f
  2488  0E9C  087F               	movf	127,w
  2489  0E9D  047E               	iorwf	126,w
  2490  0E9E  1903               	btfsc	3,2
  2491  0E9F  3400               	retlw	0	;all done for this memory range, return
  2492  0EA0  2E96               	goto	clrloop0	;have we reached the end yet?
  2493                           
  2494                           	psect	cstackCOMMON
  2495  0070                     __pcstackCOMMON:	
  2496  0070                     ?_timer_init:	
  2497  0070                     ?_DMX_init:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?_RDM_init:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ?_DMX_loop:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ?_RDM_rx_loop:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ?_timer2_loop:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ??_DMX_interrput:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_timer1_interrupt:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ??_timer1_interrupt:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0070                     ?_RDM_tx_interrupt:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0070                     ??_RDM_tx_interrupt:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     ??_timer2_interrupt:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ?_PD_init:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     ?_RDM_discovery_CC:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0070                     ?_RDM_GET_CC:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0070                     ?_RDM_SET_CC:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0070                     ?_PD_write_u8:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ?_RDM_TXSTART:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_TX_RDM_Response_Set:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_main:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_isr:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_PWM_TurnOn:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_PWM_TurnOff:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_RDM_tx_TimerBreak:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ?_RDM_Identify_Switch:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ?_DMX_interrput:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_timer2_interrupt:	
  2573                           ; 2 bytes @ 0x0
  2574                           
  2575                           
  2576                           ; 2 bytes @ 0x0
  2577  0070                     	ds	1
  2578  0071                     ?_PD_Read_u16ptr:	
  2579  0071                     ?_PD_Read_u32ptr:	
  2580                           ; 2 bytes @ 0x1
  2581                           
  2582                           
  2583                           ; 2 bytes @ 0x1
  2584  0071                     	ds	1
  2585  0072                     DMX_interrput@RxDat:	
  2586                           
  2587                           ; 1 bytes @ 0x2
  2588  0072                     	ds	2
  2589  0074                     ??_timer_init:	
  2590  0074                     ??_RDM_get_checkSum:	
  2591                           ; 1 bytes @ 0x4
  2592                           
  2593  0074                     ??_PD_init:	
  2594                           ; 1 bytes @ 0x4
  2595                           
  2596  0074                     ??_PD_write_u8:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599  0074                     ?_PD_write_u16:	
  2600                           ; 1 bytes @ 0x4
  2601                           
  2602  0074                     ??_RDM_TXSTART:	
  2603                           ; 1 bytes @ 0x4
  2604                           
  2605  0074                     ??_TX_RDM_Response_Set:	
  2606                           ; 1 bytes @ 0x4
  2607                           
  2608  0074                     ??_isr:	
  2609                           ; 1 bytes @ 0x4
  2610                           
  2611  0074                     ??_PWM_TurnOff:	
  2612                           ; 1 bytes @ 0x4
  2613                           
  2614  0074                     ??_RDM_tx_TimerBreak:	
  2615                           ; 1 bytes @ 0x4
  2616                           
  2617  0074                     ??___wmul:	
  2618                           ; 1 bytes @ 0x4
  2619                           
  2620  0074                     ?___bmul:	
  2621                           ; 1 bytes @ 0x4
  2622                           
  2623  0074                     ?_PFM_Read:	
  2624                           ; 1 bytes @ 0x4
  2625                           
  2626  0074                     ?_PD_Read_u8ptr:	
  2627                           ; 2 bytes @ 0x4
  2628                           
  2629  0074                     ___bmul@multiplicand:	
  2630                           ; 2 bytes @ 0x4
  2631                           
  2632  0074                     PFM_Read@AddrPFM:	
  2633                           ; 1 bytes @ 0x4
  2634                           
  2635  0074                     PD_write_u16@u16:	
  2636                           ; 2 bytes @ 0x4
  2637                           
  2638  0074                     ___wmul@product:	
  2639                           ; 2 bytes @ 0x4
  2640                           
  2641                           
  2642                           ; 2 bytes @ 0x4
  2643  0074                     	ds	1
  2644  0075                     ??___bmul:	
  2645                           
  2646                           ; 1 bytes @ 0x5
  2647  0075                     	ds	1
  2648  0076                     ??_timer2_loop:	
  2649  0076                     ??_PFM_Read:	
  2650                           ; 1 bytes @ 0x6
  2651                           
  2652  0076                     ??_PFM_Write:	
  2653                           ; 1 bytes @ 0x6
  2654                           
  2655  0076                     ??_RDM_SET_CC:	
  2656                           ; 1 bytes @ 0x6
  2657                           
  2658  0076                     ??_PD_Read_u8ptr:	
  2659                           ; 1 bytes @ 0x6
  2660                           
  2661  0076                     ??_main:	
  2662                           ; 1 bytes @ 0x6
  2663                           
  2664  0076                     ??_RDM_Identify_Switch:	
  2665                           ; 1 bytes @ 0x6
  2666                           
  2667                           
  2668                           	psect	cstackBANK0
  2669  0050                     __pcstackBANK0:	
  2670                           ; 1 bytes @ 0x6
  2671                           
  2672  0050                     ??_DMX_init:	
  2673  0050                     ??_DMX_loop:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0050                     ?_PFM_Write:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0050                     ??_PD_write_u16:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0050                     ?_PD_write_u32:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0050                     ??_PD_Read_u16ptr:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0050                     ??_PD_Read_u32ptr:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0050                     ??_PWM_TurnOn:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0050                     ?_RDM_get_checkSum:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0050                     ?___wmul:	
  2698                           ; 2 bytes @ 0x0
  2699                           
  2700  0050                     PD_write_u8@u8:	
  2701                           ; 2 bytes @ 0x0
  2702                           
  2703  0050                     ___bmul@product:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0050                     PFM_Write@AddrPFM:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0050                     ___wmul@multiplier:	
  2710                           ; 2 bytes @ 0x0
  2711                           
  2712  0050                     PD_write_u32@u32:	
  2713                           ; 2 bytes @ 0x0
  2714                           
  2715  0050                     RDM_get_checkSum@Data:	
  2716                           ; 4 bytes @ 0x0
  2717                           
  2718                           
  2719                           ; 24 bytes @ 0x0
  2720  0050                     	ds	1
  2721  0051                     ___bmul@multiplier:	
  2722                           
  2723                           ; 1 bytes @ 0x1
  2724  0051                     	ds	1
  2725  0052                     PFM_Write@Data:	
  2726  0052                     ___wmul@multiplicand:	
  2727                           ; 2 bytes @ 0x2
  2728                           
  2729                           
  2730                           ; 2 bytes @ 0x2
  2731  0052                     	ds	2
  2732  0054                     ??_RDM_init:	
  2733  0054                     ??_PD_write_u32:	
  2734                           ; 1 bytes @ 0x4
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x4
  2738  0054                     	ds	20
  2739  0068                     RDM_get_checkSum@len:	
  2740                           
  2741                           ; 1 bytes @ 0x18
  2742  0068                     	ds	1
  2743  0069                     ??_RDM_discovery_CC:	
  2744  0069                     ??_RDM_GET_CC:	
  2745                           ; 1 bytes @ 0x19
  2746                           
  2747                           
  2748                           ; 1 bytes @ 0x19
  2749  0069                     	ds	4
  2750  006D                     ??_RDM_rx_loop:	
  2751                           
  2752                           ; 1 bytes @ 0x1D
  2753  006D                     	ds	1
  2754                           
  2755                           	psect	intentry
  2756  0004                     __pintentry:	
  2757 ;; *************** function _isr *****************
  2758 ;; Defined at:
  2759 ;;		line 80 in file "main.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 1E/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2773 ;;      Params:         0       0       0       0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0
  2776 ;;      Totals:         0       0       0       0       0       0       0       0
  2777 ;;Total ram usage:        0 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    1
  2780 ;; This function calls:
  2781 ;;		_DMX_interrput
  2782 ;;		_RDM_tx_interrupt
  2783 ;;		_timer1_interrupt
  2784 ;;		_timer2_interrupt
  2785 ;; This function is called by:
  2786 ;;		Interrupt level 1
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790  0004                     _isr:	
  2791                           
  2792                           ;incstack = 0
  2793  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2794                           
  2795                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2796  0005  3180               	pagesel	$
  2797                           
  2798                           ;main.c: 82: DMX_interrput();
  2799  0006  318F  2724  3180   	fcall	_DMX_interrput
  2800                           
  2801                           ;main.c: 83: timer1_interrupt();
  2802  0009  318E  26B0  3180   	fcall	_timer1_interrupt
  2803                           
  2804                           ;main.c: 84: RDM_tx_interrupt();
  2805  000C  3180  2015  3180   	fcall	_RDM_tx_interrupt
  2806                           
  2807                           ;main.c: 85: timer2_interrupt();
  2808  000F  318E  26A1         	fcall	_timer2_interrupt
  2809  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2810  0012  0009               	retfie
  2811  0013                     __end_of_isr:	
  2812                           
  2813                           	psect	text29
  2814  0EA1                     __ptext29:	
  2815 ;; *************** function _timer2_interrupt *****************
  2816 ;; Defined at:
  2817 ;;		line 172 in file "Timer.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  2  128[None  ] int 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 1C/0
  2828 ;;		On exit  : 1E/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2831 ;;      Params:         0       0       0       0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0
  2834 ;;      Totals:         0       0       0       0       0       0       0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_isr
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _timer2_interrupt
  2846  0EA1                     _timer2_interrupt:	
  2847                           
  2848                           ;Timer.c: 173: if (TMR2IE && TMR2IF) {
  2849                           
  2850                           ;incstack = 0
  2851                           ; Regs used in _timer2_interrupt: [wreg+status,2+status,0]
  2852  0EA1  0021               	movlb	1	; select bank1
  2853  0EA2  1C91               	btfss	17,1	;volatile
  2854  0EA3  0008               	return
  2855  0EA4  0020               	movlb	0	; select bank0
  2856  0EA5  1C91               	btfss	17,1	;volatile
  2857  0EA6  0008               	return
  2858                           
  2859                           ;Timer.c: 174: TMR2IF = 0;
  2860  0EA7  1091               	bcf	17,1	;volatile
  2861  0EA8  3032               	movlw	50
  2862                           
  2863                           ;Timer.c: 175: Timer2_Count++;
  2864  0EA9  0AC1               	incf	_Timer2_Count,f
  2865                           
  2866                           ;Timer.c: 176: if(Timer2_Count==50){
  2867  0EAA  0641               	xorwf	_Timer2_Count,w
  2868  0EAB  1D03               	btfss	3,2
  2869  0EAC  0008               	return
  2870                           
  2871                           ;Timer.c: 177: Timer2_Count=0;
  2872  0EAD  01C1               	clrf	_Timer2_Count
  2873                           
  2874                           ;Timer.c: 178: DMX_Flags.RDM_Identify_Device_Timer2New = 1;
  2875  0EAE  16F7               	bsf	_DMX_Flags+1,5	;volatile
  2876  0EAF  0008               	return
  2877  0EB0                     __end_of_timer2_interrupt:	
  2878                           
  2879                           	psect	text30
  2880  0EB0                     __ptext30:	
  2881 ;; *************** function _timer1_interrupt *****************
  2882 ;; Defined at:
  2883 ;;		line 40 in file "Timer.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 1C/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2897 ;;      Params:         0       0       0       0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0
  2900 ;;      Totals:         0       0       0       0       0       0       0       0
  2901 ;;Total ram usage:        0 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_isr
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           
  2911                           ;psect for function _timer1_interrupt
  2912  0EB0                     _timer1_interrupt:	
  2913                           
  2914                           ;Timer.c: 41: if (TMR1IE && TMR1IF) {
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
  2918  0EB0  0021               	movlb	1	; select bank1
  2919  0EB1  1C11               	btfss	17,0	;volatile
  2920  0EB2  0008               	return
  2921  0EB3  0020               	movlb	0	; select bank0
  2922  0EB4  1C11               	btfss	17,0	;volatile
  2923  0EB5  0008               	return
  2924                           
  2925                           ;Timer.c: 42: TMR1IF = 0;
  2926  0EB6  1011               	bcf	17,0	;volatile
  2927                           
  2928                           ;Timer.c: 43: switch (TimerState) {
  2929  0EB7  2F19               	goto	i1l3395
  2930  0EB8                     i1l3343:	
  2931                           
  2932                           ;Timer.c: 45: TimerState = TIMER_500US;
  2933  0EB8  01C3               	clrf	_TimerState	;volatile
  2934                           
  2935                           ;Timer.c: 56: break;
  2936  0EB9  0008               	return
  2937  0EBA                     i1l959:	
  2938                           ;Timer.c: 57: case TIMER_500US:
  2939                           
  2940                           
  2941                           ;Timer.c: 69: TMR1 = 0xFE0B;
  2942  0EBA  30FE               	movlw	254
  2943  0EBB  0097               	movwf	23	;volatile
  2944  0EBC  300B               	movlw	11
  2945  0EBD  0096               	movwf	22	;volatile
  2946                           
  2947                           ;Timer.c: 70: RxTimer++;
  2948  0EBE  0AB9               	incf	_RxTimer,f	;volatile
  2949  0EBF  1903               	skipnz
  2950  0EC0  0ABA               	incf	_RxTimer+1,f	;volatile
  2951                           
  2952                           ;Timer.c: 71: if (RxTimer == 2400) {
  2953  0EC1  3060               	movlw	96
  2954  0EC2  0639               	xorwf	_RxTimer,w	;volatile
  2955  0EC3  3009               	movlw	9
  2956  0EC4  1903               	skipnz
  2957  0EC5  063A               	xorwf	_RxTimer+1,w	;volatile
  2958  0EC6  1D03               	btfss	3,2
  2959  0EC7  2ECD               	goto	i1l3353
  2960                           
  2961                           ;Timer.c: 72: RxTimer = 2400 + 1;
  2962  0EC8  3061               	movlw	97
  2963  0EC9  00B9               	movwf	_RxTimer	;volatile
  2964  0ECA  3009               	movlw	9
  2965  0ECB  00BA               	movwf	_RxTimer+1	;volatile
  2966                           
  2967                           ;Timer.c: 73: DMX_Flags.RxTimeout = 1;
  2968  0ECC  1576               	bsf	_DMX_Flags,2	;volatile
  2969  0ECD                     i1l3353:	
  2970                           
  2971                           ;Timer.c: 74: }
  2972                           ;Timer.c: 76: Timer.MS_Count++;
  2973  0ECD  0AA1               	incf	_Timer+1,f	;volatile
  2974  0ECE  1903               	skipnz
  2975  0ECF  0AA2               	incf	_Timer+2,f	;volatile
  2976                           
  2977                           ;Timer.c: 77: Timer.MS = 1;
  2978  0ED0  1420               	bsf	_Timer,0	;volatile
  2979                           
  2980                           ;Timer.c: 78: if (Timer.MS_Count == 1000)
  2981  0ED1  30E8               	movlw	232
  2982  0ED2  0621               	xorwf	_Timer+1,w	;volatile
  2983  0ED3  3003               	movlw	3
  2984  0ED4  1903               	skipnz
  2985  0ED5  0622               	xorwf	_Timer+2,w	;volatile
  2986  0ED6  1D03               	btfss	3,2
  2987  0ED7  0008               	return
  2988                           
  2989                           ;Timer.c: 79: {
  2990                           ;Timer.c: 94: Timer.MS_Count = 0;
  2991  0ED8  01A1               	clrf	_Timer+1	;volatile
  2992  0ED9  01A2               	clrf	_Timer+2	;volatile
  2993                           
  2994                           ;Timer.c: 95: Timer.SEC_Count++;
  2995  0EDA  0AA3               	incf	_Timer+3,f	;volatile
  2996                           
  2997                           ;Timer.c: 96: Timer.SEC = 1;
  2998  0EDB  14A0               	bsf	_Timer,1	;volatile
  2999                           
  3000                           ;Timer.c: 97: if (Timer.SEC_Count == 60)
  3001  0EDC  303C               	movlw	60
  3002  0EDD  0623               	xorwf	_Timer+3,w	;volatile
  3003  0EDE  1D03               	btfss	3,2
  3004  0EDF  0008               	return
  3005                           
  3006                           ;Timer.c: 98: {
  3007                           ;Timer.c: 99: Timer.SEC_Count = 0;
  3008  0EE0  01A3               	clrf	_Timer+3	;volatile
  3009                           
  3010                           ;Timer.c: 100: Timer.MIN_Count++;
  3011  0EE1  0AA4               	incf	_Timer+4,f	;volatile
  3012                           
  3013                           ;Timer.c: 101: Timer.MIN = 1;
  3014  0EE2  1520               	bsf	_Timer,2	;volatile
  3015                           
  3016                           ;Timer.c: 103: if (Timer.MIN_Count == 60)
  3017  0EE3  303C               	movlw	60
  3018  0EE4  0624               	xorwf	_Timer+4,w	;volatile
  3019  0EE5  1D03               	btfss	3,2
  3020  0EE6  0008               	return
  3021                           
  3022                           ;Timer.c: 104: {
  3023                           ;Timer.c: 105: Timer.MIN_Count = 0;
  3024  0EE7  01A4               	clrf	_Timer+4	;volatile
  3025                           
  3026                           ;Timer.c: 106: Timer.HR_Count++;
  3027  0EE8  0AA5               	incf	_Timer+5,f	;volatile
  3028                           
  3029                           ;Timer.c: 107: Timer.HR = 1;
  3030  0EE9  15A0               	bsf	_Timer,3	;volatile
  3031  0EEA  0008               	return
  3032  0EEB                     i1l964:	
  3033                           ;Timer.c: 118: case TIMER_RDM_MBB:
  3034                           
  3035                           
  3036                           ;Timer.c: 119: LATC4 = 0;
  3037  0EEB  0022               	movlb	2	; select bank2
  3038  0EEC  120E               	bcf	14,4	;volatile
  3039                           
  3040                           ;Timer.c: 120: TXEN = 0;
  3041  0EED  0023               	movlb	3	; select bank3
  3042  0EEE  129E               	bcf	30,5	;volatile
  3043                           
  3044                           ;Timer.c: 121: TMR1 = 0xff73;
  3045  0EEF  30FF               	movlw	255
  3046  0EF0  0020               	movlb	0	; select bank0
  3047  0EF1  0097               	movwf	23	;volatile
  3048  0EF2  3073               	movlw	115
  3049  0EF3  0096               	movwf	22	;volatile
  3050                           
  3051                           ;Timer.c: 122: TimerState = TIMER_RDM_BREAK;
  3052  0EF4  3001               	movlw	1
  3053  0EF5  00C3               	movwf	_TimerState	;volatile
  3054                           
  3055                           ;Timer.c: 123: break;
  3056  0EF6  0008               	return
  3057  0EF7                     i1l965:	
  3058                           ;Timer.c: 124: case TIMER_RDM_BREAK:
  3059                           
  3060                           
  3061                           ;Timer.c: 125: TXEN = 1;
  3062  0EF7  0023               	movlb	3	; select bank3
  3063  0EF8  169E               	bsf	30,5	;volatile
  3064                           
  3065                           ;Timer.c: 126: LATC4 = 1;
  3066  0EF9  0022               	movlb	2	; select bank2
  3067  0EFA  160E               	bsf	14,4	;volatile
  3068                           
  3069                           ;Timer.c: 127: TMR1 = 0xFFF5;
  3070  0EFB  30FF               	movlw	255
  3071  0EFC  0020               	movlb	0	; select bank0
  3072  0EFD  0097               	movwf	23	;volatile
  3073  0EFE  30F5               	movlw	245
  3074  0EFF  0096               	movwf	22	;volatile
  3075                           
  3076                           ;Timer.c: 128: TimerState = TIMER_RDM_MAB;
  3077  0F00  3002               	movlw	2
  3078  0F01  00C3               	movwf	_TimerState	;volatile
  3079                           
  3080                           ;Timer.c: 130: break;
  3081  0F02  0008               	return
  3082  0F03                     i1l966:	
  3083                           ;Timer.c: 132: case TIMER_RDM_MAB:
  3084                           
  3085                           
  3086                           ;Timer.c: 133: TMR1 = 0xFCDF;
  3087  0F03  30FC               	movlw	252
  3088  0F04  0097               	movwf	23	;volatile
  3089  0F05  30DF               	movlw	223
  3090  0F06  0096               	movwf	22	;volatile
  3091                           
  3092                           ;Timer.c: 134: TimerState = TIMER_500US;
  3093  0F07  01C3               	clrf	_TimerState	;volatile
  3094                           
  3095                           ;Timer.c: 137: TXIE = 1;
  3096  0F08  0021               	movlb	1	; select bank1
  3097  0F09  1611               	bsf	17,4	;volatile
  3098                           
  3099                           ;Timer.c: 138: break;
  3100  0F0A  0008               	return
  3101  0F0B                     i1l967:	
  3102                           ;Timer.c: 139: case TIMER_DISC_MAB:
  3103                           
  3104                           
  3105                           ;Timer.c: 141: TXIE = 1;
  3106  0F0B  0021               	movlb	1	; select bank1
  3107  0F0C  1611               	bsf	17,4	;volatile
  3108                           
  3109                           ;Timer.c: 142: TMR1 = 0xFCDF;
  3110  0F0D  30FC               	movlw	252
  3111  0F0E  0020               	movlb	0	; select bank0
  3112  0F0F  0097               	movwf	23	;volatile
  3113  0F10  30DF               	movlw	223
  3114  0F11  0096               	movwf	22	;volatile
  3115  0F12  2EB8               	goto	i1l3343
  3116  0F13                     i1l3389:	
  3117                           
  3118                           ;Timer.c: 157: TMR1 = TIMER_500US;
  3119  0F13  0196               	clrf	22	;volatile
  3120  0F14  0197               	clrf	23	;volatile
  3121                           
  3122                           ;Timer.c: 158: TimerState = TIMER_500US;
  3123  0F15  01C3               	clrf	_TimerState	;volatile
  3124                           
  3125                           ;Timer.c: 161: LATC3=0;
  3126  0F16  0022               	movlb	2	; select bank2
  3127  0F17  118E               	bcf	14,3	;volatile
  3128                           
  3129                           ;Timer.c: 162: break;
  3130  0F18  0008               	return
  3131  0F19                     i1l3395:	
  3132  0F19  0843               	movf	_TimerState,w	;volatile
  3133                           
  3134                           ; Switch size 1, requested type "space"
  3135                           ; Number of cases is 6, Range of values is 0 to 5
  3136                           ; switch strategies available:
  3137                           ; Name         Instructions Cycles
  3138                           ; direct_byte           18     6 (fixed)
  3139                           ; simple_byte           19    10 (average)
  3140                           ; jumptable            260     6 (fixed)
  3141                           ;	Chosen strategy is direct_byte
  3142  0F1A  0084               	movwf	4
  3143  0F1B  3006               	movlw	6
  3144  0F1C  0204               	subwf	4,w
  3145  0F1D  1803               	skipnc
  3146  0F1E  2EB8               	goto	i1l3343
  3147  0F1F  3189               	movlp	high i1S4373
  3148  0F20  3504               	lslf	4,w
  3149  0F21  3EBB               	addlw	low i1S4373
  3150  0F22  0082               	movwf	2
  3151  0F23  0008               	return
  3152  0F24                     __end_of_timer1_interrupt:	
  3153                           
  3154                           	psect	swtext1
  3155  09BB                     __pswtext1:	
  3156  09BB                     i1S4373:	
  3157  09BB  318E  2EBA         	ljmp	i1l959
  3158  09BD  318E  2EF7         	ljmp	i1l965
  3159  09BF  318F  2F03         	ljmp	i1l966
  3160  09C1  318E  2EEB         	ljmp	i1l964
  3161  09C3  318F  2F13         	ljmp	i1l3389
  3162  09C5  318F  2F0B         	ljmp	i1l967
  3163                           
  3164                           	psect	text31
  3165  0015                     __ptext31:	
  3166 ;; *************** function _RDM_tx_interrupt *****************
  3167 ;; Defined at:
  3168 ;;		line 108 in file "RDM.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3177 ;; Tracked objects:
  3178 ;;		On entry : 1C/0
  3179 ;;		On exit  : 1C/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3182 ;;      Params:         0       0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0
  3184 ;;      Temps:          4       0       0       0       0       0       0       0
  3185 ;;      Totals:         4       0       0       0       0       0       0       0
  3186 ;;Total ram usage:        4 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_isr
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _RDM_tx_interrupt
  3197  0015                     _RDM_tx_interrupt:	
  3198                           
  3199                           ;RDM.c: 109: if (TXIE && TXIF) {
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0+pclath]
  3203  0015  0021               	movlb	1	; select bank1
  3204  0016  1E11               	btfss	17,4	;volatile
  3205  0017  0008               	return
  3206  0018  0020               	movlb	0	; select bank0
  3207  0019  1E11               	btfss	17,4	;volatile
  3208  001A  0008               	return
  3209  001B  2891               	goto	i1l3461
  3210  001C                     i1l3407:	
  3211                           
  3212                           ;RDM.c: 112: if(TX_PD_Flag==1){
  3213  001C  032B               	decf	_TX_PD_Flag,w	;volatile
  3214  001D  042C               	iorwf	_TX_PD_Flag+1,w	;volatile
  3215  001E  1D03               	btfss	3,2
  3216  001F  2826               	goto	i1l3413
  3217                           
  3218                           ;RDM.c: 113: TX_PD_Flag=0;
  3219  0020  01AB               	clrf	_TX_PD_Flag	;volatile
  3220  0021  01AC               	clrf	_TX_PD_Flag+1	;volatile
  3221                           
  3222                           ;RDM.c: 114: TXREG = 0xCC;
  3223  0022  30CC               	movlw	204
  3224  0023  0023               	movlb	3	; select bank3
  3225  0024  009A               	movwf	26	;volatile
  3226                           
  3227                           ;RDM.c: 115: }else{
  3228  0025  0008               	return
  3229  0026                     i1l3413:	
  3230                           
  3231                           ;RDM.c: 116: TXREG = 0x01;
  3232  0026  3001               	movlw	1
  3233  0027  0023               	movlb	3	; select bank3
  3234  0028  009A               	movwf	26	;volatile
  3235                           
  3236                           ;RDM.c: 117: BytePtr = &TX_RDM_Data.value[23];
  3237  0029  30EE               	movlw	low (_TX_RDM_Data+23)
  3238  002A  0020               	movlb	0	; select bank0
  3239  002B  00B3               	movwf	_BytePtr
  3240  002C  3000               	movlw	high (_TX_RDM_Data+23)
  3241  002D  00B4               	movwf	_BytePtr+1
  3242  002E  3003               	movlw	3
  3243                           
  3244                           ;RDM.c: 118: TxCount = 0;
  3245  002F  01B5               	clrf	_TxCount
  3246  0030  01B6               	clrf	_TxCount+1
  3247                           
  3248                           ;RDM.c: 119: TxState = TX_DATA;
  3249  0031  00C7               	movwf	_TxState	;volatile
  3250  0032  0008               	return
  3251  0033                     i1l3421:	
  3252                           
  3253                           ;RDM.c: 123: TxState = TX_DISCOVERY;
  3254  0033  01C7               	clrf	_TxState	;volatile
  3255                           
  3256                           ;RDM.c: 124: break;
  3257  0034  0008               	return
  3258  0035                     i1l3423:	
  3259                           
  3260                           ;RDM.c: 126: if (TxCount <= 23) {
  3261  0035  3000               	movlw	0
  3262  0036  0236               	subwf	_TxCount+1,w
  3263  0037  3018               	movlw	24
  3264  0038  1903               	skipnz
  3265  0039  0235               	subwf	_TxCount,w
  3266  003A  1803               	skipnc
  3267  003B  2842               	goto	i1l787
  3268                           
  3269                           ;RDM.c: 127: TxCount++;
  3270  003C  0AB5               	incf	_TxCount,f
  3271  003D  1903               	skipnz
  3272  003E  0AB6               	incf	_TxCount+1,f
  3273                           
  3274                           ;RDM.c: 128: TXREG = *BytePtr;
  3275  003F  0833               	movf	_BytePtr,w
  3276                           
  3277                           ;RDM.c: 129: BytePtr--;
  3278  0040  209C               	fcall	PL14	;call to abstracted procedure
  3279                           
  3280                           ;RDM.c: 130: }else{
  3281  0041  0008               	return
  3282  0042                     i1l787:	
  3283                           
  3284                           ;RDM.c: 132: TXIE = 0;
  3285  0042  0021               	movlb	1	; select bank1
  3286  0043  1211               	bcf	17,4	;volatile
  3287                           
  3288                           ;RDM.c: 133: RCIE = 1;
  3289  0044  1691               	bsf	17,5	;volatile
  3290  0045                     L2:	
  3291                           
  3292                           ;RDM.c: 134: TMR1 = 0xFFCA;
  3293  0045  30FF               	movlw	255
  3294  0046  0020               	movlb	0	; select bank0
  3295  0047  0097               	movwf	23	;volatile
  3296  0048  30CA               	movlw	202
  3297  0049  0096               	movwf	22	;volatile
  3298                           
  3299                           ;RDM.c: 135: TimerState = TIMER_MAS;
  3300  004A  3004               	movlw	4
  3301  004B  00C3               	movwf	_TimerState	;volatile
  3302  004C  0008               	return
  3303  004D                     i1l3433:	
  3304                           
  3305                           ;RDM.c: 141: if (TxCount <= 24) {
  3306  004D  3000               	movlw	0
  3307  004E  0236               	subwf	_TxCount+1,w
  3308  004F  3019               	movlw	25
  3309  0050  1903               	skipnz
  3310  0051  0235               	subwf	_TxCount,w
  3311  0052  1803               	skipnc
  3312  0053  286D               	goto	i1l790
  3313                           
  3314                           ;RDM.c: 143: TXREG = *BytePtr;
  3315  0054  0833               	movf	_BytePtr,w
  3316                           
  3317                           ;RDM.c: 144: BytePtr--;
  3318  0055  209C  3180         	fcall	PL14	;call to abstracted procedure
  3319                           
  3320                           ;RDM.c: 145: TxCount++;
  3321  0057  0AB5               	incf	_TxCount,f
  3322  0058  1903               	skipnz
  3323  0059  0AB6               	incf	_TxCount+1,f
  3324                           
  3325                           ;RDM.c: 146: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  3326  005A  3016               	movlw	22
  3327  005B  0635               	xorwf	_TxCount,w
  3328  005C  0436               	iorwf	_TxCount+1,w
  3329  005D  1D03               	btfss	3,2
  3330  005E  0008               	return
  3331  005F  0021               	movlb	1	; select bank1
  3332  0060  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  3333  0061  1903               	btfsc	3,2
  3334  0062  0008               	return
  3335  0063  0020               	movlb	0	; select bank0
  3336  0064  082B               	movf	_TX_PD_Flag,w	;volatile
  3337  0065  042C               	iorwf	_TX_PD_Flag+1,w	;volatile
  3338  0066  1D03               	btfss	3,2
  3339  0067  0008               	return
  3340                           
  3341                           ;RDM.c: 147: TxState = TX_RDM_PD;
  3342  0068  3004               	movlw	4
  3343  0069  00C7               	movwf	_TxState	;volatile
  3344                           
  3345                           ;RDM.c: 148: TX_PDCount = (100>>1)-1;
  3346  006A  3031               	movlw	49
  3347  006B  00C5               	movwf	_TX_PDCount
  3348  006C  0008               	return
  3349  006D                     i1l790:	
  3350                           
  3351                           ;RDM.c: 151: RCIE = 1;
  3352  006D  0021               	movlb	1	; select bank1
  3353  006E  1691               	bsf	17,5	;volatile
  3354                           
  3355                           ;RDM.c: 153: TXIE = 0;
  3356  006F  1211               	bcf	17,4	;volatile
  3357  0070  2845               	goto	L2
  3358  0071                     i1l3451:	
  3359                           ;RDM.c: 157: TMR1 = 0xFFCA;
  3360                           
  3361                           
  3362                           ;RDM.c: 162: TXREG = PD.u8[TX_PDCount];
  3363  0071  0845               	movf	_TX_PDCount,w
  3364  0072  26F1  3180         	fcall	PL26	;call to abstracted procedure
  3365  0074  0023               	movlb	3	; select bank3
  3366  0075  009A               	movwf	26	;volatile
  3367                           
  3368                           ;RDM.c: 163: if (TX_PDCount == (100>>1)-TX_RDM_Data.PDL) {
  3369  0076  01F1               	clrf	??_RDM_tx_interrupt+1
  3370  0077  0021               	movlb	1	; select bank1
  3371  0078  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  3372  0079  3C32               	sublw	50
  3373  007A  00F0               	movwf	??_RDM_tx_interrupt
  3374  007B  1C03               	skipc
  3375  007C  03F1               	decf	??_RDM_tx_interrupt+1,f
  3376  007D  0020               	movlb	0	; select bank0
  3377  007E  0845               	movf	_TX_PDCount,w
  3378  007F  00F2               	movwf	??_RDM_tx_interrupt+2
  3379  0080  01F3               	clrf	??_RDM_tx_interrupt+3
  3380  0081  0871               	movf	??_RDM_tx_interrupt+1,w
  3381  0082  0673               	xorwf	??_RDM_tx_interrupt+3,w
  3382  0083  1D03               	skipz
  3383  0084  2887               	goto	u157_25
  3384  0085  0870               	movf	??_RDM_tx_interrupt,w
  3385  0086  0672               	xorwf	??_RDM_tx_interrupt+2,w
  3386  0087                     u157_25:	
  3387  0087  1D03               	skipz
  3388  0088  288F               	goto	i1l3457
  3389                           
  3390                           ;RDM.c: 164: TxState = TX_DATA;
  3391  0089  3003               	movlw	3
  3392  008A  00C7               	movwf	_TxState	;volatile
  3393                           
  3394                           ;RDM.c: 165: TX_PD_Flag = 1;
  3395  008B  3001               	movlw	1
  3396  008C  00AB               	movwf	_TX_PD_Flag	;volatile
  3397  008D  01AC               	clrf	_TX_PD_Flag+1	;volatile
  3398                           
  3399                           ;RDM.c: 166: }else{
  3400  008E  0008               	return
  3401  008F                     i1l3457:	
  3402                           
  3403                           ;RDM.c: 167: TX_PDCount--;
  3404  008F  03C5               	decf	_TX_PDCount,f
  3405  0090  0008               	return
  3406  0091                     i1l3461:	
  3407  0091  0847               	movf	_TxState,w	;volatile
  3408                           
  3409                           ; Switch size 1, requested type "space"
  3410                           ; Number of cases is 5, Range of values is 0 to 4
  3411                           ; switch strategies available:
  3412                           ; Name         Instructions Cycles
  3413                           ; direct_byte           16     6 (fixed)
  3414                           ; simple_byte           16     9 (average)
  3415                           ; jumptable            260     6 (fixed)
  3416                           ;	Chosen strategy is direct_byte
  3417  0092  0084               	movwf	4
  3418  0093  3005               	movlw	5
  3419  0094  0204               	subwf	4,w
  3420  0095  1803               	skipnc
  3421  0096  0008               	return
  3422  0097  3189               	movlp	high i1S4375
  3423  0098  3504               	lslf	4,w
  3424  0099  3ED3               	addlw	low i1S4375
  3425  009A  0082               	movwf	2
  3426  009B  0008               	return
  3427  009C                     __end_of_RDM_tx_interrupt:	
  3428  009C                     PL14:	
  3429  009C  0084               	movwf	4
  3430  009D  0834               	movf	_BytePtr+1,w
  3431  009E  0085               	movwf	5
  3432  009F  0800               	movf	0,w	;code access
  3433  00A0  0023               	movlb	3	; select bank3
  3434  00A1  009A               	movwf	26	;volatile
  3435  00A2  3001               	movlw	1
  3436  00A3  0020               	movlb	0	; select bank0
  3437  00A4  02B3               	subwf	_BytePtr,f
  3438  00A5  3000               	movlw	0
  3439  00A6  3BB4               	subwfb	_BytePtr+1,f
  3440  00A7  0008               	return
  3441  00A8                     __end_ofPL14:	
  3442  00A8                     start_initialization:	
  3443  00A8                     __initialization:		;BIGRAM
  3444                           
  3445                           ;initializer for _IDENTIFY_MODE
  3446  00A8  30FF               	movlw	255
  3447  00A9  00EE               	movwf	__pdataBANK0& (0+127)
  3448                           
  3449                           ; Initialize objects allocated to BANK2
  3450  00AA  0022               	movlb	2	; select bank2
  3451                           
  3452                           ;initializer for _DMX_Repeat
  3453  00AB  3001               	movlw	1
  3454  00AC  00E4               	movwf	__pdataBANK2& (0+127)
  3455  00AD  3002               	movlw	2
  3456  00AE  01E5               	clrf	(__pdataBANK2+1)& (0+127)
  3457  00AF  01E6               	clrf	(__pdataBANK2+2)& (0+127)
  3458  00B0  01E7               	clrf	(__pdataBANK2+3)& (0+127)
  3459  00B1  01E8               	clrf	(__pdataBANK2+4)& (0+127)
  3460  00B2  01E9               	clrf	(__pdataBANK2+5)& (0+127)
  3461  00B3  01EA               	clrf	(__pdataBANK2+6)& (0+127)
  3462  00B4  01EB               	clrf	(__pdataBANK2+7)& (0+127)
  3463                           
  3464                           ;initializer for _DMX_sumRepeat
  3465  00B5  00EC               	movwf	(__pdataBANK2+8)& (0+127)
  3466  00B6  308C               	movlw	140
  3467  00B7  01ED               	clrf	(__pdataBANK2+9)& (0+127)
  3468  00B8  01EE               	clrf	(__pdataBANK2+10)& (0+127)
  3469  00B9  01EF               	clrf	(__pdataBANK2+11)& (0+127)
  3470                           
  3471                           ; Clear objects allocated to BIGRAM
  3472  00BA  0084               	movwf	4
  3473  00BB  3021               	movlw	33
  3474  00BC  0085               	movwf	5
  3475  00BD  3064               	movlw	100
  3476  00BE  00FE               	movwf	126
  3477  00BF  01FF               	clrf	127
  3478  00C0  318E  2695  3180   	fcall	clear_ram0
  3479  00C3  3020               	movlw	low __pbssBANK0
  3480                           
  3481                           ; Clear objects allocated to COMMON
  3482  00C4  01F6               	clrf	__pbssCOMMON& (0+127)
  3483  00C5  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3484  00C6  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3485  00C7  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  3486                           
  3487                           ; Clear objects allocated to BANK0
  3488  00C8  0084               	movwf	4
  3489  00C9  3000               	movlw	high __pbssBANK0
  3490  00CA  0085               	movwf	5
  3491  00CB  3030               	movlw	48
  3492  00CC  00FE               	movwf	126
  3493  00CD  01FF               	clrf	127
  3494  00CE  318E  2695  3180   	fcall	clear_ram0
  3495                           
  3496                           ; Clear objects allocated to BANK1
  3497  00D1  30A0               	movlw	low __pbssBANK1
  3498  00D2  0084               	movwf	4
  3499  00D3  3000               	movlw	high __pbssBANK1
  3500  00D4  0085               	movwf	5
  3501  00D5  304F               	movlw	79
  3502  00D6  00FE               	movwf	126
  3503  00D7  01FF               	clrf	127
  3504  00D8  318E  2695  3180   	fcall	clear_ram0
  3505                           
  3506                           ; Clear objects allocated to BANK2
  3507  00DB  3020               	movlw	low __pbssBANK2
  3508  00DC  0084               	movwf	4
  3509  00DD  3001               	movlw	high __pbssBANK2
  3510  00DE  0085               	movwf	5
  3511  00DF  3044               	movlw	68
  3512  00E0  00FE               	movwf	126
  3513  00E1  01FF               	clrf	127
  3514  00E2  318E  2695  3180   	fcall	clear_ram0
  3515  00E5                     end_of_initialization:	
  3516                           ;End of C runtime variable initialization code
  3517                           
  3518  00E5                     __end_of__initialization:	
  3519  00E5  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3520  00E6  0020               	movlb	0
  3521  00E7  28E8               	ljmp	_main	;jump to C main() function
  3522  00E8                     __pmaintext:	
  3523 ;;
  3524 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3525 ;;
  3526 ;; *************** function _main *****************
  3527 ;; Defined at:
  3528 ;;		line 23 in file "main.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : B1F/0
  3539 ;;		On exit  : 1E/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3542 ;;      Params:         0       0       0       0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0       0
  3545 ;;      Totals:         0       0       0       0       0       0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels required when called:    6
  3548 ;; This function calls:
  3549 ;;		_DMX_init
  3550 ;;		_DMX_loop
  3551 ;;		_RDM_init
  3552 ;;		_RDM_rx_loop
  3553 ;;		_timer2_loop
  3554 ;;		_timer_init
  3555 ;; This function is called by:
  3556 ;;		Startup code after reset
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           
  3561                           ;psect for function _main
  3562  00E8                     _main:	
  3563                           
  3564                           ;main.c: 24: PWM1DCH = 0x00;
  3565                           
  3566                           ;incstack = 0
  3567                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3568  00E8  003B               	movlb	27	; select bank27
  3569  00E9  0194               	clrf	20	;volatile
  3570                           
  3571                           ;main.c: 25: PWM2DCH = 0x00;
  3572  00EA  01A4               	clrf	36	;volatile
  3573                           
  3574                           ;main.c: 26: PWM3DCH = 0x00;
  3575  00EB  01B4               	clrf	52	;volatile
  3576                           
  3577                           ;main.c: 27: PWM4DCH = 0x00;
  3578  00EC  01C4               	clrf	68	;volatile
  3579                           
  3580                           ;main.c: 29: PWM1DCL = 0x00;
  3581  00ED  0193               	clrf	19	;volatile
  3582                           
  3583                           ;main.c: 30: PWM2DCL = 0x00;
  3584  00EE  01A3               	clrf	35	;volatile
  3585                           
  3586                           ;main.c: 31: PWM3DCL = 0x00;
  3587  00EF  01B3               	clrf	51	;volatile
  3588                           
  3589                           ;main.c: 32: PWM4DCL = 0x00;
  3590  00F0  01C3               	clrf	67	;volatile
  3591                           
  3592                           ;main.c: 33: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  3593  00F1  3080               	movlw	128
  3594  00F2  00CF               	movwf	79	;volatile
  3595  00F3  00BF               	movwf	63	;volatile
  3596  00F4  00AF               	movwf	47	;volatile
  3597  00F5  009F               	movwf	31	;volatile
  3598                           
  3599                           ;main.c: 35: RA2PPS = 0b0011;
  3600  00F6  3003               	movlw	3
  3601  00F7  003D               	movlb	29	; select bank29
  3602  00F8  0092               	movwf	18	;volatile
  3603                           
  3604                           ;main.c: 36: RC0PPS = 0b0100;
  3605  00F9  3004               	movlw	4
  3606  00FA  00A0               	movwf	32	;volatile
  3607                           
  3608                           ;main.c: 37: RC1PPS = 0b0101;
  3609  00FB  3005               	movlw	5
  3610  00FC  00A1               	movwf	33	;volatile
  3611                           
  3612                           ;main.c: 38: RC2PPS = 0b0110;
  3613  00FD  3006               	movlw	6
  3614  00FE  00A2               	movwf	34	;volatile
  3615                           
  3616                           ;main.c: 40: PR2 = 0xFF;
  3617  00FF  30FF               	movlw	255
  3618  0100  0020               	movlb	0	; select bank0
  3619  0101  009B               	movwf	27	;volatile
  3620                           
  3621                           ;main.c: 42: OSCCON = 0b11110000;
  3622  0102  30F0               	movlw	240
  3623  0103  0021               	movlb	1	; select bank1
  3624  0104  0099               	movwf	25	;volatile
  3625                           
  3626                           ;main.c: 43: OSCTUNE = 0b000000;
  3627  0105  0198               	clrf	24	;volatile
  3628                           
  3629                           ;main.c: 45: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  3630  0106  110E               	bcf	14,2	;volatile
  3631  0107  108E               	bcf	14,1	;volatile
  3632  0108  100E               	bcf	14,0	;volatile
  3633  0109  110C               	bcf	12,2	;volatile
  3634                           
  3635                           ;main.c: 46: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  3636  010A  0023               	movlb	3	; select bank3
  3637  010B  110E               	bcf	14,2	;volatile
  3638  010C  108E               	bcf	14,1	;volatile
  3639  010D  100E               	bcf	14,0	;volatile
  3640  010E  110C               	bcf	12,2	;volatile
  3641                           
  3642                           ;main.c: 49: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  3643  010F  003B               	movlb	27	; select bank27
  3644  0110  01C2               	clrf	66	;volatile
  3645  0111  01B2               	clrf	50	;volatile
  3646  0112  01A2               	clrf	34	;volatile
  3647  0113  0192               	clrf	18	;volatile
  3648                           
  3649                           ;main.c: 50: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  3650  0114  01C1               	clrf	65	;volatile
  3651  0115  01B1               	clrf	49	;volatile
  3652  0116  01A1               	clrf	33	;volatile
  3653  0117  0191               	clrf	17	;volatile
  3654                           
  3655                           ;main.c: 51: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0xFF;
  3656  0118  30FF               	movlw	255
  3657  0119  00C6               	movwf	70	;volatile
  3658  011A  00B6               	movwf	54	;volatile
  3659  011B  00A6               	movwf	38	;volatile
  3660  011C  0096               	movwf	22	;volatile
  3661                           
  3662                           ;main.c: 52: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  3663  011D  00C5               	movwf	69	;volatile
  3664  011E  00B5               	movwf	53	;volatile
  3665  011F  00A5               	movwf	37	;volatile
  3666  0120  0095               	movwf	21	;volatile
  3667                           
  3668                           ;main.c: 53: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  3669  0121  01CE               	clrf	78	;volatile
  3670  0122  01BE               	clrf	62	;volatile
  3671  0123  01AE               	clrf	46	;volatile
  3672  0124  019E               	clrf	30	;volatile
  3673                           
  3674                           ;main.c: 56: TRISC3 = 0;
  3675  0125  0021               	movlb	1	; select bank1
  3676  0126  118E               	bcf	14,3	;volatile
  3677                           
  3678                           ;main.c: 57: ANSC3 = 0;
  3679  0127  0023               	movlb	3	; select bank3
  3680  0128  118E               	bcf	14,3	;volatile
  3681                           
  3682                           ;main.c: 58: INTCON = 0b11000000;
  3683  0129  30C0               	movlw	192
  3684  012A  008B               	movwf	11	;volatile
  3685                           
  3686                           ;main.c: 60: timer_init();
  3687  012B  23A7  3180         	fcall	_timer_init
  3688                           
  3689                           ;main.c: 62: DMX_init();
  3690  012D  2142  3180         	fcall	_DMX_init
  3691                           
  3692                           ;main.c: 63: RDM_init();
  3693  012F  21E6  3180         	fcall	_RDM_init
  3694                           
  3695                           ;main.c: 64: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  3696  0131  3080               	movlw	128
  3697  0132  003B               	movlb	27	; select bank27
  3698  0133  00CB               	movwf	75	;volatile
  3699  0134  00BB               	movwf	59	;volatile
  3700  0135  00AB               	movwf	43	;volatile
  3701  0136  009B               	movwf	27	;volatile
  3702                           
  3703                           ;main.c: 70: DMX_Address = 1;
  3704  0137  0020               	movlb	0	; select bank0
  3705  0138  01BD               	clrf	_DMX_Address
  3706  0139  0ABD               	incf	_DMX_Address,f
  3707  013A  01BE               	clrf	_DMX_Address+1
  3708  013B                     l4167:	
  3709                           
  3710                           ;main.c: 72: DMX_loop();
  3711  013B  21B3  3180         	fcall	_DMX_loop
  3712                           
  3713                           ;main.c: 75: RDM_rx_loop();
  3714  013D  2307  3180         	fcall	_RDM_rx_loop
  3715                           
  3716                           ;main.c: 76: timer2_loop();
  3717  013F  239E  3180         	fcall	_timer2_loop
  3718  0141  293B               	goto	l4167
  3719  0142                     __end_of_main:	
  3720  0142                     __ptext27:	
  3721 ;; *************** function _DMX_init *****************
  3722 ;; Defined at:
  3723 ;;		line 17 in file "DMX.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : B1F/0
  3734 ;;		On exit  : B1E/0
  3735 ;;		Unchanged: B00/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3737 ;;      Params:         0       0       0       0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0       0
  3739 ;;      Temps:          0       3       0       0       0       0       0       0
  3740 ;;      Totals:         0       3       0       0       0       0       0       0
  3741 ;;Total ram usage:        3 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    2
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _DMX_init
  3753  0142                     _DMX_init:	
  3754                           
  3755                           ;DMX.c: 19: RXPPS = 0b10101;
  3756                           
  3757                           ;incstack = 0
  3758                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  3759  0142  3015               	movlw	21
  3760  0143  003C               	movlb	28	; select bank28
  3761  0144  0095               	movwf	21	;volatile
  3762                           
  3763                           ;DMX.c: 20: TRISC5 = 1;
  3764  0145  0021               	movlb	1	; select bank1
  3765  0146  168E               	bsf	14,5	;volatile
  3766                           
  3767                           ;DMX.c: 22: RCSTA = 0b10010000;
  3768  0147  3090               	movlw	144
  3769  0148  0023               	movlb	3	; select bank3
  3770  0149  009D               	movwf	29	;volatile
  3771                           
  3772                           ;DMX.c: 23: SYNC = 0;
  3773  014A  121E               	bcf	30,4	;volatile
  3774                           
  3775                           ;DMX.c: 24: BAUDCON = 0b00000000;
  3776  014B  019F               	clrf	31	;volatile
  3777                           
  3778                           ;DMX.c: 25: BRGH = 1;
  3779  014C  151E               	bsf	30,2	;volatile
  3780                           
  3781                           ;DMX.c: 26: SPBRGH = 0x00;
  3782  014D  019C               	clrf	28	;volatile
  3783                           
  3784                           ;DMX.c: 27: SPBRGL = 0x7;
  3785  014E  3007               	movlw	7
  3786  014F  009B               	movwf	27	;volatile
  3787                           
  3788                           ;DMX.c: 28: RCIE = 1;
  3789  0150  0021               	movlb	1	; select bank1
  3790  0151  1691               	bsf	17,5	;volatile
  3791                           
  3792                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  3793  0152  300D               	movlw	13
  3794  0153  00C9               	movwf	(_PWMDCLptr+1)^(0+128)
  3795  0154  3093               	movlw	147
  3796  0155  00C8               	movwf	_PWMDCLptr^(0+128)
  3797                           
  3798                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  3799  0156  300D               	movlw	13
  3800  0157  00CB               	movwf	((low ((_PWMDCLptr| 0+2))+1))^(0+128)
  3801  0158  30A3               	movlw	163
  3802  0159  00CA               	movwf	(low ((_PWMDCLptr| 0+2)))^(0+128)
  3803                           
  3804                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  3805  015A  300D               	movlw	13
  3806  015B  00CD               	movwf	((low ((_PWMDCLptr| 0+4))+1))^(0+128)
  3807  015C  30B3               	movlw	179
  3808  015D  00CC               	movwf	(low ((_PWMDCLptr| 0+4)))^(0+128)
  3809                           
  3810                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  3811  015E  300D               	movlw	13
  3812  015F  00CF               	movwf	((low ((_PWMDCLptr| 0+6))+1))^(0+128)
  3813  0160  30C3               	movlw	195
  3814  0161  00CE               	movwf	(low ((_PWMDCLptr| 0+6)))^(0+128)
  3815                           
  3816                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  3817  0162  300D               	movlw	13
  3818  0163  00C1               	movwf	(_PWMDCHptr+1)^(0+128)
  3819  0164  3094               	movlw	148
  3820  0165  00C0               	movwf	_PWMDCHptr^(0+128)
  3821                           
  3822                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  3823  0166  300D               	movlw	13
  3824  0167  00C3               	movwf	((low ((_PWMDCHptr| 0+2))+1))^(0+128)
  3825  0168  30A4               	movlw	164
  3826  0169  00C2               	movwf	(low ((_PWMDCHptr| 0+2)))^(0+128)
  3827                           
  3828                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  3829  016A  300D               	movlw	13
  3830  016B  00C5               	movwf	((low ((_PWMDCHptr| 0+4))+1))^(0+128)
  3831  016C  30B4               	movlw	180
  3832  016D  00C4               	movwf	(low ((_PWMDCHptr| 0+4)))^(0+128)
  3833                           
  3834                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  3835  016E  300D               	movlw	13
  3836  016F  00C7               	movwf	((low ((_PWMDCHptr| 0+6))+1))^(0+128)
  3837  0170  30C4               	movlw	196
  3838  0171  00C6               	movwf	(low ((_PWMDCHptr| 0+6)))^(0+128)
  3839                           
  3840                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  3841  0172  300D               	movlw	13
  3842  0173  00B9               	movwf	(_PWMLDCONptr+1)^(0+128)
  3843  0174  309F               	movlw	159
  3844  0175  00B8               	movwf	_PWMLDCONptr^(0+128)
  3845                           
  3846                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  3847  0176  300D               	movlw	13
  3848  0177  00BB               	movwf	((low ((_PWMLDCONptr| 0+2))+1))^(0+128)
  3849  0178  30AF               	movlw	175
  3850  0179  00BA               	movwf	(low ((_PWMLDCONptr| 0+2)))^(0+128)
  3851                           
  3852                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  3853  017A  300D               	movlw	13
  3854  017B  00BD               	movwf	((low ((_PWMLDCONptr| 0+4))+1))^(0+128)
  3855  017C  30BF               	movlw	191
  3856  017D  00BC               	movwf	(low ((_PWMLDCONptr| 0+4)))^(0+128)
  3857                           
  3858                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  3859  017E  300D               	movlw	13
  3860  017F  00BF               	movwf	((low ((_PWMLDCONptr| 0+6))+1))^(0+128)
  3861  0180  30CF               	movlw	207
  3862  0181  00BE               	movwf	(low ((_PWMLDCONptr| 0+6)))^(0+128)
  3863                           
  3864                           ;DMX.c: 58: Addr=0;
  3865  0182  01F9               	clrf	_Addr
  3866  0183                     l3989:	
  3867                           ;DMX.c: 59: while(Addr<4){
  3868                           
  3869  0183  3004               	movlw	4
  3870  0184  0279               	subwf	_Addr,w
  3871  0185  1803               	btfsc	3,0
  3872  0186  0008               	return
  3873                           
  3874                           ;DMX.c: 60: DMX_sumRepeat[Addr]=2;
  3875  0187  0879               	movf	_Addr,w
  3876  0188  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3877  0189  0086               	movwf	6
  3878  018A  3001               	movlw	1	; select bank2/3
  3879  018B  0087               	movwf	7
  3880  018C  3002               	movlw	2
  3881  018D  0081               	movwf	1
  3882                           
  3883                           ;DMX.c: 61: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3884  018E  3579               	lslf	_Addr,w
  3885  018F  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3886  0190  0086               	movwf	6
  3887  0191  3579               	lslf	_Addr,w
  3888  0192  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3889  0193  0084               	movwf	4
  3890  0194  3001               	movlw	1	; select bank2/3
  3891  0195  0085               	movwf	5
  3892  0196  3F80               	movwi [0]fsr0
  3893  0197  0081               	movwf	1
  3894                           
  3895                           ;DMX.c: 62: DMXSign[Addr].InfiniteLoop=0;
  3896  0198  0879               	movf	_Addr,w
  3897  0199  3ED0               	addlw	(low (_DMXSign| 0))& (0+255)
  3898  019A  0086               	movwf	6
  3899  019B  0187               	clrf	7
  3900  019C  1101               	bcf	1,2
  3901                           
  3902                           ;DMX.c: 63: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3903  019D  0020               	movlb	0	; select bank0
  3904  019E  01D0               	clrf	??_DMX_init
  3905  019F  01D1               	clrf	??_DMX_init+1
  3906  01A0  01D2               	clrf	??_DMX_init+2
  3907  01A1  0879               	movf	_Addr,w
  3908  01A2  0779               	addwf	_Addr,w
  3909  01A3  0779               	addwf	_Addr,w
  3910  01A4  3E38               	addlw	(low (_DMX_CurrentBright| (0+256)))& (0+255)
  3911  01A5  0086               	movwf	6
  3912  01A6  3001               	movlw	1	; select bank2/3
  3913  01A7  0087               	movwf	7
  3914  01A8  26FF  3180         	fcall	PL30	;call to abstracted procedure
  3915  01AA  0879               	movf	_Addr,w
  3916  01AB  0779               	addwf	_Addr,w
  3917  01AC  0779               	addwf	_Addr,w
  3918  01AD  3E20               	addlw	(low (_DMX_TargetBright| (0+256)))& (0+255)
  3919  01AE  0086               	movwf	6
  3920  01AF  26FF  3180         	fcall	PL30	;call to abstracted procedure
  3921                           
  3922                           ;DMX.c: 64: Addr++;
  3923  01B1  0AF9               	incf	_Addr,f
  3924  01B2  2983               	goto	l3989
  3925  01B3                     __end_of_DMX_init:	
  3926  01B3                     __ptext26:	
  3927 ;; *************** function _DMX_loop *****************
  3928 ;; Defined at:
  3929 ;;		line 67 in file "DMX.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3938 ;; Tracked objects:
  3939 ;;		On entry : 1E/0
  3940 ;;		On exit  : 1F/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3943 ;;      Params:         0       0       0       0       0       0       0       0
  3944 ;;      Locals:         0       0       0       0       0       0       0       0
  3945 ;;      Temps:          0       5       0       0       0       0       0       0
  3946 ;;      Totals:         0       5       0       0       0       0       0       0
  3947 ;;Total ram usage:        5 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    2
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           
  3958                           ;psect for function _DMX_loop
  3959  01B3                     _DMX_loop:	
  3960                           
  3961                           ;DMX.c: 70: if (DMX_Flags.RxNew == 1) {
  3962                           
  3963                           ;incstack = 0
  3964                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath]
  3965  01B3  1C76               	btfss	_DMX_Flags,0	;volatile
  3966  01B4  29DF               	goto	l438
  3967                           
  3968                           ;DMX.c: 71: DMX_Flags.RxNew = 0;
  3969  01B5  1076               	bcf	_DMX_Flags,0	;volatile
  3970                           
  3971                           ;DMX.c: 73: Addr = 0;
  3972  01B6  01F9               	clrf	_Addr
  3973  01B7                     l4073:	
  3974                           ;DMX.c: 74: while (Addr < 4) {
  3975                           
  3976  01B7  3004               	movlw	4
  3977  01B8  0279               	subwf	_Addr,w
  3978  01B9  1803               	btfsc	3,0
  3979  01BA  29DF               	goto	l438
  3980                           
  3981                           ;DMX.c: 75: *PWMDCHptr[Addr] = PWM.PWM[RxData[Addr]].DCH;
  3982  01BB  2706  3180         	fcall	PL32	;call to abstracted procedure
  3983  01BD  0020               	movlb	0	; select bank0
  3984  01BE  00D0               	movwf	??_DMX_loop
  3985  01BF  304A               	movlw	low ((_PWM+1)| (0+32768))
  3986  01C0  271E  3180         	fcall	PL40	;call to abstracted procedure
  3987  01C2  3087               	movlw	high ((_PWM+1)| (0+32768))
  3988  01C3  2712  3180         	fcall	PL36	;call to abstracted procedure
  3989  01C5  3EC0               	addlw	(low (_PWMDCHptr| 0))& (0+255)
  3990  01C6  26CB  3180         	fcall	PL16	;call to abstracted procedure
  3991                           
  3992                           ;DMX.c: 76: *PWMDCLptr[Addr] = PWM.PWM[RxData[Addr]].DCL;
  3993  01C8  2706  3180         	fcall	PL32	;call to abstracted procedure
  3994  01CA  00D0               	movwf	??_DMX_loop
  3995  01CB  3049               	movlw	low (_PWM| (0+32768))
  3996  01CC  271E  3180         	fcall	PL40	;call to abstracted procedure
  3997  01CE  3087               	movlw	high (_PWM| (0+32768))
  3998  01CF  2712  3180         	fcall	PL36	;call to abstracted procedure
  3999  01D1  3EC8               	addlw	(low (_PWMDCLptr| 0))& (0+255)
  4000  01D2  26CB  3180         	fcall	PL16	;call to abstracted procedure
  4001                           
  4002                           ;DMX.c: 77: *PWMLDCONptr[Addr] = 0b10000000;
  4003  01D4  26D7  3180         	fcall	PL18	;call to abstracted procedure
  4004  01D6  00D0               	movwf	??_DMX_loop
  4005  01D7  3F41               	moviw [1]fsr1
  4006  01D8  00D1               	movwf	??_DMX_loop+1
  4007  01D9  0850               	movf	??_DMX_loop,w
  4008  01DA  0086               	movwf	6
  4009  01DB  0851               	movf	??_DMX_loop+1,w
  4010                           
  4011                           ;DMX.c: 78: Addr++;
  4012  01DC  2730  3180         	fcall	PL46	;call to abstracted procedure
  4013  01DE  29B7               	goto	l4073
  4014  01DF                     l438:	
  4015                           
  4016                           ;DMX.c: 79: }
  4017                           ;DMX.c: 138: }
  4018                           ;DMX.c: 140: if (Timer.MS ) {
  4019  01DF  0020               	movlb	0	; select bank0
  4020  01E0  1C20               	btfss	_Timer,0	;volatile
  4021  01E1  0008               	return
  4022                           
  4023                           ;DMX.c: 141: DMXPeriodConst++;
  4024  01E2  0AC9               	incf	_DMXPeriodConst,f	;volatile
  4025                           
  4026                           ;DMX.c: 142: Timer.MS = 0;
  4027  01E3  1020               	bcf	_Timer,0	;volatile
  4028                           
  4029                           ;DMX.c: 143: Addr = 0;
  4030  01E4  01F9               	clrf	_Addr
  4031  01E5  0008               	return
  4032  01E6                     __end_of_DMX_loop:	
  4033  01E6                     __ptext22:	
  4034 ;; *************** function _RDM_init *****************
  4035 ;; Defined at:
  4036 ;;		line 16 in file "RDM.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : B1E/0
  4047 ;;		On exit  : 1F/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4050 ;;      Params:         0       0       0       0       0       0       0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0
  4052 ;;      Temps:          0       2       0       0       0       0       0       0
  4053 ;;      Totals:         0       2       0       0       0       0       0       0
  4054 ;;Total ram usage:        2 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    4
  4057 ;; This function calls:
  4058 ;;		_PFM_Read
  4059 ;;		_PFM_Write
  4060 ;;		___bmul
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _RDM_init
  4068  01E6                     _RDM_init:	
  4069                           
  4070                           ;RDM.c: 18: PEIE = 1;
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4074  01E6  170B               	bsf	11,6	;volatile
  4075                           
  4076                           ;RDM.c: 20: TRISC4 = 0;
  4077  01E7  0021               	movlb	1	; select bank1
  4078  01E8  120E               	bcf	14,4	;volatile
  4079                           
  4080                           ;RDM.c: 21: LATC4 = 1;
  4081  01E9  0022               	movlb	2	; select bank2
  4082  01EA  160E               	bsf	14,4	;volatile
  4083                           
  4084                           ;RDM.c: 23: SPEN = 1;
  4085  01EB  0023               	movlb	3	; select bank3
  4086  01EC  179D               	bsf	29,7	;volatile
  4087                           
  4088                           ;RDM.c: 24: SYNC = 0;
  4089  01ED  121E               	bcf	30,4	;volatile
  4090                           
  4091                           ;RDM.c: 25: RC4PPS = 0b1001;
  4092  01EE  3009               	movlw	9
  4093  01EF  003D               	movlb	29	; select bank29
  4094  01F0  00A4               	movwf	36	;volatile
  4095                           
  4096                           ;RDM.c: 27: BytePtr = &TX_RDM_Data.value[0];
  4097  01F1  30D7               	movlw	low _TX_RDM_Data
  4098  01F2  0020               	movlb	0	; select bank0
  4099  01F3  00B3               	movwf	_BytePtr
  4100  01F4  3000               	movlw	high _TX_RDM_Data
  4101  01F5  00B4               	movwf	_BytePtr+1
  4102                           
  4103                           ;RDM.c: 28: TX9 = TX9D = 1;
  4104  01F6  0023               	movlb	3	; select bank3
  4105  01F7  141E               	bsf	30,0	;volatile
  4106  01F8  1C1E               	btfss	30,0	;volatile
  4107  01F9  29FD               	goto	u1790
  4108  01FA  0023               	movlb	3	; select bank3
  4109  01FB  171E               	bsf	30,6	;volatile
  4110  01FC  29FF               	goto	l3999
  4111  01FD                     u1790:	
  4112  01FD  0023               	movlb	3	; select bank3
  4113  01FE  131E               	bcf	30,6	;volatile
  4114  01FF                     l3999:	
  4115                           
  4116                           ;RDM.c: 30: LATC3=0;
  4117  01FF  0022               	movlb	2	; select bank2
  4118  0200  118E               	bcf	14,3	;volatile
  4119                           
  4120                           ;RDM.c: 31: DMX_Flags.RDMmute = 0;
  4121  0201  1177               	bcf	_DMX_Flags+1,2	;volatile
  4122                           
  4123                           ;RDM.c: 32: DMX_Flags.RDM_Identify_Device = 0;
  4124  0202  11F7               	bcf	_DMX_Flags+1,3	;volatile
  4125                           
  4126                           ;RDM.c: 35: PDCount = 23;
  4127  0203  3017               	movlw	23
  4128  0204  0020               	movlb	0	; select bank0
  4129  0205  00C6               	movwf	_PDCount
  4130  0206                     l4011:	
  4131                           ;RDM.c: 38: while (PDCount >= 17) {
  4132                           
  4133  0206  3011               	movlw	17
  4134  0207  0246               	subwf	_PDCount,w
  4135  0208  1C03               	btfss	3,0
  4136  0209  2A13               	goto	l4013
  4137                           
  4138                           ;RDM.c: 39: DISCOVERY_RDM_Data[PDCount] = 0xFE;
  4139  020A  0846               	movf	_PDCount,w
  4140  020B  3E4C               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  4141  020C  0086               	movwf	6
  4142  020D  3001               	movlw	1	; select bank2/3
  4143  020E  0087               	movwf	7
  4144  020F  30FE               	movlw	254
  4145  0210  0081               	movwf	1
  4146                           
  4147                           ;RDM.c: 40: PDCount--;
  4148  0211  03C6               	decf	_PDCount,f
  4149  0212  2A06               	goto	l4011
  4150  0213                     l4013:	
  4151                           
  4152                           ;RDM.c: 41: }
  4153                           ;RDM.c: 42: DISCOVERY_RDM_Data[16] = 0xAA;
  4154  0213  30AA               	movlw	170
  4155  0214  0022               	movlb	2	; select bank2
  4156  0215  00DC               	movwf	(_DISCOVERY_RDM_Data^(0+256)+16)
  4157                           
  4158                           ;RDM.c: 43: PDCount = 0;
  4159  0216  0020               	movlb	0	; select bank0
  4160  0217  01C6               	clrf	_PDCount
  4161                           
  4162                           ;RDM.c: 44: checkSum = 0;
  4163  0218  01A7               	clrf	_checkSum
  4164  0219  01A8               	clrf	_checkSum+1
  4165  021A                     l4027:	
  4166                           ;RDM.c: 45: while (PDCount < 6) {
  4167                           
  4168  021A  3006               	movlw	6
  4169  021B  0246               	subwf	_PDCount,w
  4170  021C  1803               	btfsc	3,0
  4171  021D  2A44               	goto	l4029
  4172                           
  4173                           ;RDM.c: 46: DISCOVERY_RDM_Data[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  4174  021E  30FE               	movlw	254
  4175  021F  00F4               	movwf	___bmul@multiplicand
  4176  0220  0846               	movf	_PDCount,w
  4177  0221  22B2  3180         	fcall	___bmul
  4178  0223  3E5B               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  4179  0224  26BF  3180         	fcall	PL12	;call to abstracted procedure
  4180  0226  38AA               	iorlw	170
  4181                           
  4182                           ;RDM.c: 47: DISCOVERY_RDM_Data[14 - PDCount * 2] = UID[PDCount] | 0x55;
  4183  0227  2735  3180         	fcall	PL48	;call to abstracted procedure
  4184  0229  22B2  3180         	fcall	___bmul
  4185  022B  3E5A               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  4186  022C  26BF  3180         	fcall	PL12	;call to abstracted procedure
  4187  022E  3855               	iorlw	85
  4188                           
  4189                           ;RDM.c: 48: checkSum += DISCOVERY_RDM_Data[15 - PDCount * 2];
  4190  022F  2735  3180         	fcall	PL48	;call to abstracted procedure
  4191  0231  22B2  3180         	fcall	___bmul
  4192  0233  3E5B               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  4193  0234  2724  3180         	fcall	PL42	;call to abstracted procedure
  4194  0236  1803               	skipnc
  4195  0237  0AA8               	incf	_checkSum+1,f
  4196                           
  4197                           ;RDM.c: 49: checkSum += DISCOVERY_RDM_Data[14 - PDCount * 2];
  4198  0238  30FE               	movlw	254
  4199  0239  00F4               	movwf	___bmul@multiplicand
  4200  023A  0846               	movf	_PDCount,w
  4201  023B  22B2  3180         	fcall	___bmul
  4202  023D  3E5A               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  4203  023E  2724  3180         	fcall	PL42	;call to abstracted procedure
  4204  0240  1803               	skipnc
  4205  0241  0AA8               	incf	_checkSum+1,f
  4206                           
  4207                           ;RDM.c: 50: PDCount++;
  4208  0242  0AC6               	incf	_PDCount,f
  4209  0243  2A1A               	goto	l4027
  4210  0244                     l4029:	
  4211                           
  4212                           ;RDM.c: 51: }
  4213                           ;RDM.c: 52: TX_RDM_Data.CS = checkSum;
  4214  0244  0828               	movf	_checkSum+1,w
  4215  0245  0021               	movlb	1	; select bank1
  4216  0246  00D8               	movwf	(_TX_RDM_Data+1)^(0+128)	;volatile
  4217  0247  0020               	movlb	0	; select bank0
  4218  0248  0827               	movf	_checkSum,w
  4219  0249  0021               	movlb	1	; select bank1
  4220  024A  00D7               	movwf	_TX_RDM_Data^(0+128)	;volatile
  4221                           
  4222                           ;RDM.c: 54: DISCOVERY_RDM_Data[3] = TX_RDM_Data.CSH | 0xAA;
  4223  024B  0858               	movf	(_TX_RDM_Data^(0+128)+1),w	;volatile
  4224  024C  38AA               	iorlw	170
  4225  024D  0022               	movlb	2	; select bank2
  4226  024E  00CF               	movwf	(_DISCOVERY_RDM_Data^(0+256)+3)
  4227                           
  4228                           ;RDM.c: 55: DISCOVERY_RDM_Data[2] = TX_RDM_Data.CSH | 0x55;
  4229  024F  0021               	movlb	1	; select bank1
  4230  0250  0858               	movf	(_TX_RDM_Data^(0+128)+1),w	;volatile
  4231  0251  3855               	iorlw	85
  4232  0252  0022               	movlb	2	; select bank2
  4233  0253  00CE               	movwf	(_DISCOVERY_RDM_Data^(0+256)+2)
  4234                           
  4235                           ;RDM.c: 56: DISCOVERY_RDM_Data[1] = TX_RDM_Data.CSL | 0xAA;
  4236  0254  0021               	movlb	1	; select bank1
  4237  0255  0857               	movf	_TX_RDM_Data^(0+128),w	;volatile
  4238  0256  38AA               	iorlw	170
  4239  0257  0022               	movlb	2	; select bank2
  4240  0258  00CD               	movwf	(_DISCOVERY_RDM_Data^(0+256)+1)
  4241                           
  4242                           ;RDM.c: 57: DISCOVERY_RDM_Data[0] = TX_RDM_Data.CSL | 0x55;
  4243  0259  0021               	movlb	1	; select bank1
  4244  025A  0857               	movf	_TX_RDM_Data^(0+128),w	;volatile
  4245  025B  3855               	iorlw	85
  4246  025C  0022               	movlb	2	; select bank2
  4247  025D  00CC               	movwf	_DISCOVERY_RDM_Data^(0+256)
  4248                           
  4249                           ;RDM.c: 59: PDCount = 16;
  4250  025E  3010               	movlw	16
  4251  025F  0020               	movlb	0	; select bank0
  4252  0260  00C6               	movwf	_PDCount
  4253  0261                     l4043:	
  4254                           ;RDM.c: 60: while (PDCount >= 11) {
  4255                           
  4256  0261  300B               	movlw	11
  4257  0262  0246               	subwf	_PDCount,w
  4258  0263  1C03               	btfss	3,0
  4259  0264  2A77               	goto	l4045
  4260                           
  4261                           ;RDM.c: 61: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  4262  0265  0846               	movf	_PDCount,w
  4263  0266  3ED7               	addlw	(low (_TX_RDM_Data| 0))& (0+255)
  4264  0267  0086               	movwf	6
  4265  0268  3089               	movlw	high ((_UID| (0+32768)+16))
  4266  0269  0187               	clrf	7
  4267  026A  00D5               	movwf	??_RDM_init+1
  4268  026B  0846               	movf	_PDCount,w
  4269  026C  3C8F               	sublw	low ((_UID| (0+32768)+16))
  4270  026D  00D4               	movwf	??_RDM_init
  4271  026E  1C03               	skipc
  4272  026F  03D5               	decf	??_RDM_init+1,f
  4273  0270  0084               	movwf	4
  4274  0271  0855               	movf	??_RDM_init+1,w
  4275  0272  0085               	movwf	5
  4276  0273  0800               	movf	0,w	;code access
  4277  0274  0081               	movwf	1
  4278                           
  4279                           ;RDM.c: 62: PDCount--;
  4280  0275  03C6               	decf	_PDCount,f
  4281  0276  2A61               	goto	l4043
  4282  0277                     l4045:	
  4283                           
  4284                           ;RDM.c: 63: }
  4285                           ;RDM.c: 64: DMX_Address=PFM_Read(Flash_DMXAddress);
  4286  0277  3080               	movlw	128
  4287  0278  00F4               	movwf	PFM_Read@AddrPFM
  4288  0279  300C               	movlw	12
  4289  027A  00F5               	movwf	PFM_Read@AddrPFM+1
  4290  027B  22BE  3180         	fcall	_PFM_Read
  4291  027D  2718  3180         	fcall	PL38	;call to abstracted procedure
  4292                           
  4293                           ;RDM.c: 65: if(DMX_Address==0x3fff){
  4294  027F  0A3D               	incf	_DMX_Address,w
  4295  0280  303F               	movlw	63
  4296  0281  1903               	skipnz
  4297  0282  063E               	xorwf	_DMX_Address+1,w
  4298                           
  4299                           ;RDM.c: 66: PFM_Write(Flash_DMXAddress,0x0001);
  4300  0283  3080               	movlw	128
  4301  0284  1D03               	btfss	3,2
  4302  0285  2A8F               	goto	L1
  4303  0286  00D0               	movwf	PFM_Write@AddrPFM
  4304  0287  300C               	movlw	12
  4305  0288  00D1               	movwf	PFM_Write@AddrPFM+1
  4306  0289  01D2               	clrf	PFM_Write@Data
  4307  028A  0AD2               	incf	PFM_Write@Data,f
  4308  028B  01D3               	clrf	PFM_Write@Data+1
  4309  028C  22CC  3180         	fcall	_PFM_Write
  4310                           
  4311                           ;RDM.c: 67: }
  4312                           ;RDM.c: 68: DMX_Address=PFM_Read(Flash_DMXAddress);
  4313  028E  3080               	movlw	128
  4314  028F                     L1:	
  4315  028F  00F4               	movwf	PFM_Read@AddrPFM
  4316  0290  300C               	movlw	12
  4317  0291  00F5               	movwf	PFM_Read@AddrPFM+1
  4318  0292  22BE  3180         	fcall	_PFM_Read
  4319  0294  2718  3180         	fcall	PL38	;call to abstracted procedure
  4320                           
  4321                           ;RDM.c: 70: PERSONALITY=PFM_Read(PERSONALITY);
  4322  0296  0844               	movf	_PERSONALITY,w
  4323  0297  00F4               	movwf	PFM_Read@AddrPFM
  4324  0298  01F5               	clrf	PFM_Read@AddrPFM+1
  4325  0299  22BE  3180         	fcall	_PFM_Read
  4326  029B  0874               	movf	?_PFM_Read,w
  4327  029C  0020               	movlb	0	; select bank0
  4328  029D  00C4               	movwf	_PERSONALITY
  4329                           
  4330                           ;RDM.c: 71: if(PERSONALITY==0xff){
  4331  029E  0F44               	incfsz	_PERSONALITY,w
  4332  029F  2AA9               	goto	l4059
  4333                           
  4334                           ;RDM.c: 72: PFM_Write(Flash_Personality,0x0004);
  4335  02A0  30C0               	movlw	192
  4336  02A1  00D0               	movwf	PFM_Write@AddrPFM
  4337  02A2  300C               	movlw	12
  4338  02A3  00D1               	movwf	PFM_Write@AddrPFM+1
  4339  02A4  3004               	movlw	4
  4340  02A5  00D2               	movwf	PFM_Write@Data
  4341  02A6  01D3               	clrf	PFM_Write@Data+1
  4342  02A7  22CC  3180         	fcall	_PFM_Write
  4343  02A9                     l4059:	
  4344                           
  4345                           ;RDM.c: 73: }
  4346                           ;RDM.c: 74: PERSONALITY=PFM_Read(Flash_Personality);
  4347  02A9  30C0               	movlw	192
  4348  02AA  00F4               	movwf	PFM_Read@AddrPFM
  4349  02AB  300C               	movlw	12
  4350  02AC  00F5               	movwf	PFM_Read@AddrPFM+1
  4351  02AD  22BE               	fcall	_PFM_Read
  4352  02AE  0874               	movf	?_PFM_Read,w
  4353  02AF  0020               	movlb	0	; select bank0
  4354  02B0  00C4               	movwf	_PERSONALITY
  4355  02B1  0008               	return
  4356  02B2                     __end_of_RDM_init:	
  4357  02B2                     __ptext23:	
  4358 ;; *************** function ___bmul *****************
  4359 ;; Defined at:
  4360 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  multiplier      1    wreg     unsigned char 
  4363 ;;  multiplicand    1    4[COMMON] unsigned char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  multiplier      1    1[BANK0 ] unsigned char 
  4366 ;;  product         1    0[BANK0 ] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      unsigned char 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0
  4371 ;; Tracked objects:
  4372 ;;		On entry : 1F/0
  4373 ;;		On exit  : 1F/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4376 ;;      Params:         1       0       0       0       0       0       0       0
  4377 ;;      Locals:         0       2       0       0       0       0       0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0
  4379 ;;      Totals:         1       2       0       0       0       0       0       0
  4380 ;;Total ram usage:        3 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    2
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_RDM_init
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function ___bmul
  4392  02B2                     ___bmul:	
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4396                           ;___bmul@multiplier stored from wreg
  4397  02B2  00D1               	movwf	___bmul@multiplier
  4398  02B3  01D0               	clrf	___bmul@product
  4399  02B4                     l3927:	
  4400  02B4  0874               	movf	___bmul@multiplicand,w
  4401  02B5  1851               	btfsc	___bmul@multiplier,0
  4402  02B6  07D0               	addwf	___bmul@product,f
  4403  02B7  35F4               	lslf	___bmul@multiplicand,f
  4404  02B8  36D1               	lsrf	___bmul@multiplier,f
  4405  02B9  0851               	movf	___bmul@multiplier,w
  4406  02BA  1D03               	btfss	3,2
  4407  02BB  2AB4               	goto	l3927
  4408  02BC  0850               	movf	___bmul@product,w
  4409  02BD  0008               	return
  4410  02BE                     __end_of___bmul:	
  4411  02BE                     __ptext25:	
  4412 ;; *************** function _PFM_Read *****************
  4413 ;; Defined at:
  4414 ;;		line 13 in file "PFM.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  AddrPFM         2    4[COMMON] unsigned int 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  2    4[COMMON] unsigned int 
  4421 ;; Registers used:
  4422 ;;		wreg
  4423 ;; Tracked objects:
  4424 ;;		On entry : 1C/0
  4425 ;;		On exit  : 1F/3
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4428 ;;      Params:         2       0       0       0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0
  4431 ;;      Totals:         2       0       0       0       0       0       0       0
  4432 ;;Total ram usage:        2 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    2
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_RDM_init
  4439 ;;		_PFM_Write
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _PFM_Read
  4445  02BE                     _PFM_Read:	
  4446                           
  4447                           ;PFM.c: 16: PMADR=AddrPFM;
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _PFM_Read: [wreg]
  4451  02BE  0875               	movf	PFM_Read@AddrPFM+1,w
  4452  02BF  0023               	movlb	3	; select bank3
  4453  02C0  0092               	movwf	18	;volatile
  4454  02C1  0874               	movf	PFM_Read@AddrPFM,w
  4455  02C2  0091               	movwf	17	;volatile
  4456                           
  4457                           ;PFM.c: 17: RD=1;
  4458  02C3  1415               	bsf	21,0	;volatile
  4459  02C4  0000               	nop	;# 
  4460  02C5  0000               	nop	;# 
  4461                           
  4462                           ;PFM.c: 20: return PMDAT;
  4463  02C6  0023               	movlb	3	; select bank3
  4464  02C7  0814               	movf	20,w	;volatile
  4465  02C8  00F5               	movwf	?_PFM_Read+1
  4466  02C9  0813               	movf	19,w	;volatile
  4467  02CA  00F4               	movwf	?_PFM_Read
  4468  02CB  0008               	return
  4469  02CC                     __end_of_PFM_Read:	
  4470  02CC                     __ptext24:	
  4471 ;; *************** function _PFM_Write *****************
  4472 ;; Defined at:
  4473 ;;		line 23 in file "PFM.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  AddrPFM         2    0[BANK0 ] unsigned int 
  4476 ;;  Data            2    2[BANK0 ] unsigned int 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;		None
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      void 
  4481 ;; Registers used:
  4482 ;;		wreg, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 1F/0
  4485 ;;		On exit  : 1F/3
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4488 ;;      Params:         0       4       0       0       0       0       0       0
  4489 ;;      Locals:         0       0       0       0       0       0       0       0
  4490 ;;      Temps:          0       0       0       0       0       0       0       0
  4491 ;;      Totals:         0       4       0       0       0       0       0       0
  4492 ;;Total ram usage:        4 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    3
  4495 ;; This function calls:
  4496 ;;		_PFM_Read
  4497 ;; This function is called by:
  4498 ;;		_RDM_init
  4499 ;;		_RDM_SET_CC
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _PFM_Write
  4505  02CC                     _PFM_Write:	
  4506  02CC                     l1058:	
  4507                           ;incstack = 0
  4508                           ; Regs used in _PFM_Write: [wreg+pclath+cstack]
  4509                           ;PFM.c: 24: do{
  4510                           
  4511                           
  4512                           ;PFM.c: 25: GIE=0;
  4513  02CC  138B               	bcf	11,7	;volatile
  4514                           
  4515                           ;PFM.c: 26: CFGS=0;
  4516  02CD  0023               	movlb	3	; select bank3
  4517  02CE  1315               	bcf	21,6	;volatile
  4518                           
  4519                           ;PFM.c: 27: PMADR=AddrPFM;
  4520  02CF  0020               	movlb	0	; select bank0
  4521  02D0  0851               	movf	PFM_Write@AddrPFM+1,w
  4522  02D1  0023               	movlb	3	; select bank3
  4523  02D2  0092               	movwf	18	;volatile
  4524  02D3  0020               	movlb	0	; select bank0
  4525  02D4  0850               	movf	PFM_Write@AddrPFM,w
  4526  02D5  0023               	movlb	3	; select bank3
  4527  02D6  0091               	movwf	17	;volatile
  4528                           
  4529                           ;PFM.c: 30: FREE = 1;
  4530  02D7  1615               	bsf	21,4	;volatile
  4531                           
  4532                           ;PFM.c: 31: WREN = 1;
  4533  02D8  1515               	bsf	21,2	;volatile
  4534                           
  4535                           ;PFM.c: 32: PMCON2=0x55;
  4536  02D9  3055               	movlw	85
  4537  02DA  0096               	movwf	22	;volsfr
  4538                           
  4539                           ;PFM.c: 33: PMCON2=0xAA;
  4540  02DB  30AA               	movlw	170
  4541  02DC  0096               	movwf	22	;volsfr
  4542                           
  4543                           ;PFM.c: 34: WR=1;
  4544  02DD  1495               	bsf	21,1	;volatile
  4545  02DE  0000               	nop	;# 
  4546  02DF  0000               	nop	;# 
  4547                           
  4548                           ;PFM.c: 39: FREE = 0;
  4549  02E0  0023               	movlb	3	; select bank3
  4550  02E1  1215               	bcf	21,4	;volatile
  4551                           
  4552                           ;PFM.c: 40: LWLO = 1;
  4553  02E2  1695               	bsf	21,5	;volatile
  4554                           
  4555                           ;PFM.c: 41: PMDAT=Data;
  4556  02E3  0020               	movlb	0	; select bank0
  4557  02E4  0853               	movf	PFM_Write@Data+1,w
  4558  02E5  0023               	movlb	3	; select bank3
  4559  02E6  0094               	movwf	20	;volatile
  4560  02E7  0020               	movlb	0	; select bank0
  4561  02E8  0852               	movf	PFM_Write@Data,w
  4562  02E9  0023               	movlb	3	; select bank3
  4563  02EA  0093               	movwf	19	;volatile
  4564                           
  4565                           ;PFM.c: 42: LWLO=0;
  4566  02EB  1295               	bcf	21,5	;volatile
  4567                           
  4568                           ;PFM.c: 43: PMCON2=0x55;
  4569  02EC  3055               	movlw	85
  4570  02ED  0096               	movwf	22	;volsfr
  4571                           
  4572                           ;PFM.c: 44: PMCON2=0xAA;
  4573  02EE  30AA               	movlw	170
  4574  02EF  0096               	movwf	22	;volsfr
  4575                           
  4576                           ;PFM.c: 45: WR=1;
  4577  02F0  1495               	bsf	21,1	;volatile
  4578  02F1  0000               	nop	;# 
  4579  02F2  0000               	nop	;# 
  4580                           
  4581                           ;PFM.c: 49: }while(PFM_Read(AddrPFM)!=Data);
  4582  02F3  0020               	movlb	0	; select bank0
  4583  02F4  0851               	movf	PFM_Write@AddrPFM+1,w
  4584  02F5  00F5               	movwf	PFM_Read@AddrPFM+1
  4585  02F6  0850               	movf	PFM_Write@AddrPFM,w
  4586  02F7  00F4               	movwf	PFM_Read@AddrPFM
  4587  02F8  22BE  3180         	fcall	_PFM_Read
  4588  02FA  0020               	movlb	0	; select bank0
  4589  02FB  0853               	movf	PFM_Write@Data+1,w
  4590  02FC  0675               	xorwf	?_PFM_Read+1,w
  4591  02FD  1D03               	skipz
  4592  02FE  2B01               	goto	u1615
  4593  02FF  0852               	movf	PFM_Write@Data,w
  4594  0300  0674               	xorwf	?_PFM_Read,w
  4595  0301                     u1615:	
  4596  0301  1D03               	skipz
  4597  0302  2ACC               	goto	l1058
  4598                           
  4599                           ;PFM.c: 50: WREN=0;
  4600  0303  0023               	movlb	3	; select bank3
  4601  0304  1115               	bcf	21,2	;volatile
  4602                           
  4603                           ;PFM.c: 51: GIE=1;
  4604  0305  178B               	bsf	11,7	;volatile
  4605  0306  0008               	return
  4606  0307                     __end_of_PFM_Write:	
  4607  0307                     __ptext4:	
  4608 ;; *************** function _RDM_rx_loop *****************
  4609 ;; Defined at:
  4610 ;;		line 78 in file "RDM.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 1F/0
  4621 ;;		On exit  : 1E/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4624 ;;      Params:         0       0       0       0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0
  4626 ;;      Temps:          0       1       0       0       0       0       0       0
  4627 ;;      Totals:         0       1       0       0       0       0       0       0
  4628 ;;Total ram usage:        1 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    5
  4631 ;; This function calls:
  4632 ;;		_PD_init
  4633 ;;		_RDM_GET_CC
  4634 ;;		_RDM_SET_CC
  4635 ;;		_RDM_discovery_CC
  4636 ;;		_RDM_get_checkSum
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _RDM_rx_loop
  4644  0307                     _RDM_rx_loop:	
  4645                           
  4646                           ;RDM.c: 79: if (DMX_Flags.RDMNew == 1) {
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4650  0307  1F76               	btfss	_DMX_Flags,6	;volatile
  4651  0308  0008               	return
  4652                           
  4653                           ;RDM.c: 80: DMX_Flags.RDMNew = 0;
  4654  0309  1376               	bcf	_DMX_Flags,6	;volatile
  4655                           
  4656                           ;RDM.c: 81: DMX_Flags.RDMcheckUID_flag = 0;
  4657  030A  30FC               	movlw	-4
  4658  030B  05F7               	andwf	_DMX_Flags+1,f	;volatile
  4659                           
  4660                           ;RDM.c: 83: if ((RX_RDM_Data.DUID.M == 0x08BA || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RDM
      +                          _Data.DUID.ID == 0x12345678 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  4661  030C  30BA               	movlw	186
  4662  030D  0021               	movlb	1	; select bank1
  4663  030E  0635               	xorwf	(_RX_RDM_Data^(0+128)+21),w	;volatile
  4664  030F  3008               	movlw	8
  4665  0310  1903               	skipnz
  4666  0311  0636               	xorwf	((_RX_RDM_Data+1)^(0+128)+21),w	;volatile
  4667  0312  1903               	btfsc	3,2
  4668  0313  2B19               	goto	l4089
  4669  0314  0F35               	incfsz	(_RX_RDM_Data^(0+128)+21),w	;volatile
  4670  0315  2B33               	goto	l764
  4671  0316  0A36               	incf	((_RX_RDM_Data+1)^(0+128)+21),w	;volatile
  4672  0317  1D03               	btfss	3,2
  4673  0318  2B33               	goto	l764
  4674  0319                     l4089:	
  4675  0319  3078               	movlw	120
  4676  031A  0631               	xorwf	(_RX_RDM_Data^(0+128)+17),w	;volatile
  4677  031B  3056               	movlw	86
  4678  031C  1903               	skipnz
  4679  031D  0632               	xorwf	((_RX_RDM_Data+1)^(0+128)+17),w	;volatile
  4680  031E  3034               	movlw	52
  4681  031F  1903               	skipnz
  4682  0320  0633               	xorwf	((_RX_RDM_Data+2)^(0+128)+17),w	;volatile
  4683  0321  3012               	movlw	18
  4684  0322  1903               	skipnz
  4685  0323  0634               	xorwf	((_RX_RDM_Data+3)^(0+128)+17),w	;volatile
  4686  0324  1903               	btfsc	3,2
  4687  0325  2B31               	goto	l4093
  4688  0326  0F31               	incfsz	(_RX_RDM_Data^(0+128)+17),w	;volatile
  4689  0327  2B33               	goto	l764
  4690  0328  0A32               	incf	((_RX_RDM_Data+1)^(0+128)+17),w	;volatile
  4691  0329  1D03               	skipz
  4692  032A  2B33               	goto	l764
  4693  032B  0A33               	incf	((_RX_RDM_Data+2)^(0+128)+17),w	;volatile
  4694  032C  1D03               	skipz
  4695  032D  2B33               	goto	l764
  4696  032E  0A34               	incf	((_RX_RDM_Data+3)^(0+128)+17),w	;volatile
  4697  032F  1D03               	btfss	3,2
  4698  0330  2B33               	goto	l764
  4699  0331                     l4093:	
  4700                           
  4701                           ;RDM.c: 84: DMX_Flags.RDMcheckUID_flag = 1;
  4702  0331  273F  3180         	fcall	PL52	;call to abstracted procedure
  4703  0333                     l764:	
  4704                           
  4705                           ;RDM.c: 85: }
  4706                           ;RDM.c: 87: if (DMX_Flags.RDMcheckUID_flag == 1 && RDM_get_checkSum(RX_RDM_Data,100) == 
      +                          RX_RDM_Data.CS) {
  4707  0333  0877               	movf	_DMX_Flags+1,w	;volatile
  4708  0334  3903               	andlw	3
  4709  0335  3A01               	xorlw	1
  4710  0336  1D03               	skipz
  4711  0337  2B57               	goto	l769
  4712  0338  30A0               	movlw	low _RX_RDM_Data
  4713  0339  0086               	movwf	6
  4714  033A  3000               	movlw	high _RX_RDM_Data
  4715  033B  26DD  3180         	fcall	PL20	;call to abstracted procedure
  4716  033D  0020               	movlb	0	; select bank0
  4717  033E  00ED               	movwf	??_RDM_rx_loop
  4718  033F                     u1950:	
  4719  033F  0016               	moviw fsr1++
  4720  0340  001A               	movwi fsr0++
  4721  0341  0BED               	decfsz	??_RDM_rx_loop,f
  4722  0342  2B3F               	goto	u1950
  4723  0343  3064               	movlw	100
  4724  0344  00E8               	movwf	RDM_get_checkSum@len
  4725  0345  2374  3180         	fcall	_RDM_get_checkSum
  4726  0347  0021               	movlb	1	; select bank1
  4727  0348  0821               	movf	(_RX_RDM_Data+1)^(0+128),w	;volatile
  4728  0349  0020               	movlb	0	; select bank0
  4729  034A  0651               	xorwf	?_RDM_get_checkSum+1,w
  4730  034B  1D03               	skipz
  4731  034C  2B51               	goto	u1965
  4732  034D  0021               	movlb	1	; select bank1
  4733  034E  0820               	movf	_RX_RDM_Data^(0+128),w	;volatile
  4734  034F  0020               	movlb	0	; select bank0
  4735  0350  0650               	xorwf	?_RDM_get_checkSum,w
  4736  0351                     u1965:	
  4737  0351  1D03               	skipz
  4738  0352  2B57               	goto	l769
  4739                           
  4740                           ;RDM.c: 88: DMX_Flags.RDMcheckUID_flag = 2;
  4741  0353  0877               	movf	_DMX_Flags+1,w	;volatile
  4742  0354  39FC               	andlw	-4
  4743  0355  3802               	iorlw	2
  4744  0356  00F7               	movwf	_DMX_Flags+1	;volatile
  4745  0357                     l769:	
  4746                           
  4747                           ;RDM.c: 89: }
  4748                           ;RDM.c: 91: if (DMX_Flags.RDMcheckUID_flag == 2) {
  4749  0357  0877               	movf	_DMX_Flags+1,w	;volatile
  4750  0358  3903               	andlw	3
  4751  0359  3A02               	xorlw	2
  4752  035A  1D03               	skipz
  4753  035B  0008               	return
  4754                           
  4755                           ;RDM.c: 92: PD_init();
  4756  035C  236E  3180         	fcall	_PD_init
  4757                           
  4758                           ;RDM.c: 102: break;
  4759                           
  4760                           ;RDM.c: 93: switch (RX_RDM_Data.CC) {
  4761  035E  0021               	movlb	1	; select bank1
  4762  035F  0825               	movf	(_RX_RDM_Data^(0+128)+5),w	;volatile
  4763                           
  4764                           ; Switch size 1, requested type "space"
  4765                           ; Number of cases is 3, Range of values is 16 to 48
  4766                           ; switch strategies available:
  4767                           ; Name         Instructions Cycles
  4768                           ; simple_byte           10     6 (average)
  4769                           ; direct_byte           75     9 (fixed)
  4770                           ; jumptable            263     9 (fixed)
  4771                           ;	Chosen strategy is simple_byte
  4772  0360  3A10               	xorlw	16	; case 16
  4773  0361  1903               	skipnz
  4774  0362  2B6A               	goto	l4101
  4775  0363  3A30               	xorlw	48	; case 32
  4776  0364  1903               	skipnz
  4777  0365  2B6B               	goto	l4103
  4778  0366  3A10               	xorlw	16	; case 48
  4779  0367  1903               	skipnz
  4780  0368  2B6C               	goto	l4105
  4781  0369  2B6D               	goto	l776
  4782  036A                     l4101:	
  4783                           
  4784                           ;RDM.c: 95: RDM_discovery_CC();
  4785  036A  2D88               	ljmp	l3775
  4786  036B                     l4103:	
  4787                           ;RDM.c: 96: break;
  4788                           
  4789                           
  4790                           ;RDM.c: 98: RDM_GET_CC();
  4791  036B  2BFC               	ljmp	l3845
  4792  036C                     l4105:	
  4793                           ;RDM.c: 99: break;
  4794                           
  4795                           
  4796                           ;RDM.c: 101: RDM_SET_CC();
  4797  036C  2D2A               	ljmp	l3897
  4798  036D                     l776:	
  4799  036D  0008               	return
  4800  036E                     __end_of_RDM_rx_loop:	
  4801  036E                     __ptext21:	
  4802 ;; *************** function _PD_init *****************
  4803 ;; Defined at:
  4804 ;;		line 202 in file "RDM_Read.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		status,2
  4813 ;; Tracked objects:
  4814 ;;		On entry : 1E/1
  4815 ;;		On exit  : 1F/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4818 ;;      Params:         0       0       0       0       0       0       0       0
  4819 ;;      Locals:         0       0       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0
  4821 ;;      Totals:         0       0       0       0       0       0       0       0
  4822 ;;Total ram usage:        0 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    2
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_RDM_rx_loop
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _PD_init
  4834  036E                     _PD_init:	
  4835                           
  4836                           ;RDM_Read.c: 203: TX_RDM_Data.PDL=0x0;
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _PD_init: [status,2]
  4840  036E  0021               	movlb	1	; select bank1
  4841  036F  01D9               	clrf	(_TX_RDM_Data^(0+128)+2)	;volatile
  4842                           
  4843                           ;RDM_Read.c: 204: PackCount=0;
  4844  0370  01F8               	clrf	_PackCount	;volatile
  4845                           
  4846                           ;RDM_Read.c: 205: PDCount=0;
  4847  0371  0020               	movlb	0	; select bank0
  4848  0372  01C6               	clrf	_PDCount
  4849  0373  0008               	return
  4850  0374                     __end_of_PD_init:	
  4851  0374                     __ptext17:	
  4852 ;; *************** function _RDM_get_checkSum *****************
  4853 ;; Defined at:
  4854 ;;		line 186 in file "RDM_Read.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;  Data           24    0[BANK0 ] struct .
  4857 ;;  len             1   24[BANK0 ] unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  2    0[BANK0 ] unsigned int 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4864 ;; Tracked objects:
  4865 ;;		On entry : 1F/0
  4866 ;;		On exit  : 1F/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4869 ;;      Params:         0      25       0       0       0       0       0       0
  4870 ;;      Locals:         0       0       0       0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0       0       0       0
  4872 ;;      Totals:         0      25       0       0       0       0       0       0
  4873 ;;Total ram usage:       25 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    2
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_RDM_rx_loop
  4880 ;;		_RDM_TXSTART
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _RDM_get_checkSum
  4886  0374                     _RDM_get_checkSum:	
  4887                           
  4888                           ;RDM_Read.c: 187: checkSum = 0x00CD;
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  4892  0374  30CD               	movlw	205
  4893  0375  00A7               	movwf	_checkSum
  4894  0376  3017               	movlw	23
  4895  0377  01A8               	clrf	_checkSum+1
  4896                           
  4897                           ;RDM_Read.c: 188: PackCount = 23;
  4898  0378  00F8               	movwf	_PackCount	;volatile
  4899  0379                     l2723:	
  4900                           ;RDM_Read.c: 189: while (PackCount > 1) {
  4901                           
  4902  0379  3002               	movlw	2
  4903  037A  0278               	subwf	_PackCount,w	;volatile
  4904  037B  1C03               	btfss	3,0
  4905  037C  2B87               	goto	l2725
  4906                           
  4907                           ;RDM_Read.c: 190: checkSum += Data.value[PackCount];
  4908  037D  0878               	movf	_PackCount,w
  4909  037E  3E50               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  4910  037F  0086               	movwf	6
  4911  0380  0187               	clrf	7
  4912  0381  0801               	movf	1,w
  4913  0382  07A7               	addwf	_checkSum,f
  4914  0383  1803               	skipnc
  4915  0384  0AA8               	incf	_checkSum+1,f
  4916                           
  4917                           ;RDM_Read.c: 191: PackCount--;
  4918  0385  03F8               	decf	_PackCount,f	;volatile
  4919  0386  2B79               	goto	l2723
  4920  0387                     l2725:	
  4921                           
  4922                           ;RDM_Read.c: 192: }
  4923                           ;RDM_Read.c: 193: PackCount = len-1;
  4924  0387  0868               	movf	RDM_get_checkSum@len,w
  4925  0388  3EFF               	addlw	255
  4926  0389  00F8               	movwf	_PackCount	;volatile
  4927                           
  4928                           ;RDM_Read.c: 194: PDCount = len - Data.PDL;
  4929  038A  0852               	movf	RDM_get_checkSum@Data+2,w
  4930  038B  0268               	subwf	RDM_get_checkSum@len,w
  4931  038C  00C6               	movwf	_PDCount
  4932  038D                     l2731:	
  4933                           ;RDM_Read.c: 195: while (PackCount >= PDCount) {
  4934                           
  4935  038D  0846               	movf	_PDCount,w
  4936  038E  0278               	subwf	_PackCount,w	;volatile
  4937  038F  1C03               	btfss	3,0
  4938  0390  2B99               	goto	l2733
  4939                           
  4940                           ;RDM_Read.c: 196: checkSum += PD.u8[PDCount];
  4941  0391  0846               	movf	_PDCount,w
  4942  0392  26F1  3180         	fcall	PL26	;call to abstracted procedure
  4943  0394  07A7               	addwf	_checkSum,f
  4944  0395  1803               	skipnc
  4945  0396  0AA8               	incf	_checkSum+1,f
  4946                           
  4947                           ;RDM_Read.c: 197: PDCount++;
  4948  0397  0AC6               	incf	_PDCount,f
  4949  0398  2B8D               	goto	l2731
  4950  0399                     l2733:	
  4951                           
  4952                           ;RDM_Read.c: 198: }
  4953                           ;RDM_Read.c: 199: return checkSum;
  4954  0399  0828               	movf	_checkSum+1,w
  4955  039A  00D1               	movwf	?_RDM_get_checkSum+1
  4956  039B  0827               	movf	_checkSum,w
  4957  039C  00D0               	movwf	?_RDM_get_checkSum
  4958  039D  0008               	return
  4959  039E                     __end_of_RDM_get_checkSum:	
  4960  039E                     __ptext2:	
  4961 ;; *************** function _timer2_loop *****************
  4962 ;; Defined at:
  4963 ;;		line 182 in file "Timer.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 1E/0
  4974 ;;		On exit  : 1E/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4977 ;;      Params:         0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    3
  4984 ;; This function calls:
  4985 ;;		_PWM_TurnOff
  4986 ;;		_PWM_TurnOn
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _timer2_loop
  4994  039E                     _timer2_loop:	
  4995                           
  4996                           ;Timer.c: 183: if(DMX_Flags.RDM_Identify_Device_Timer2New){
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _timer2_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5000  039E  1EF7               	btfss	_DMX_Flags+1,5	;volatile
  5001  039F  0008               	return
  5002                           
  5003                           ;Timer.c: 184: DMX_Flags.RDM_Identify_Device_Timer2New=0;
  5004  03A0  12F7               	bcf	_DMX_Flags+1,5	;volatile
  5005                           
  5006                           ;Timer.c: 185: DMX_Flags.RDM_Identify_Device_Flash=~DMX_Flags.RDM_Identify_Device_Flash;
  5007  03A1  3010               	movlw	16
  5008  03A2  06F7               	xorwf	_DMX_Flags+1,f	;volatile
  5009                           
  5010                           ;Timer.c: 186: if(DMX_Flags.RDM_Identify_Device_Flash){
  5011  03A3  1E77               	btfss	_DMX_Flags+1,4	;volatile
  5012  03A4  2BA6               	goto	l4121
  5013                           
  5014                           ;Timer.c: 187: PWM_TurnOn();
  5015  03A5  2BD5               	ljmp	l3765
  5016  03A6                     l4121:	
  5017                           ;Timer.c: 188: }else{
  5018                           
  5019                           
  5020                           ;Timer.c: 189: PWM_TurnOff();
  5021  03A6  2BBE               	ljmp	l2703
  5022  03A7                     __end_of_timer2_loop:	
  5023  03A7                     __ptext1:	
  5024 ;; *************** function _timer_init *****************
  5025 ;; Defined at:
  5026 ;;		line 15 in file "Timer.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2
  5035 ;; Tracked objects:
  5036 ;;		On entry : B1F/3
  5037 ;;		On exit  : B1F/0
  5038 ;;		Unchanged: B00/0
  5039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5040 ;;      Params:         0       0       0       0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    2
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_main
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           
  5055                           ;psect for function _timer_init
  5056  03A7                     _timer_init:	
  5057                           
  5058                           ;Timer.c: 17: TMR1IE = 1;
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _timer_init: [wreg+status,2]
  5062  03A7  0021               	movlb	1	; select bank1
  5063  03A8  1411               	bsf	17,0	;volatile
  5064                           
  5065                           ;Timer.c: 18: T1CON = 0b00110001;
  5066  03A9  3031               	movlw	49
  5067  03AA  0020               	movlb	0	; select bank0
  5068  03AB  0098               	movwf	24	;volatile
  5069                           
  5070                           ;Timer.c: 20: TimerState = TIMER_500US;
  5071  03AC  01C3               	clrf	_TimerState	;volatile
  5072                           
  5073                           ;Timer.c: 22: Timer.HR_Count = 0;
  5074  03AD  01A5               	clrf	_Timer+5	;volatile
  5075                           
  5076                           ;Timer.c: 23: Timer.MIN_Count = 0;
  5077  03AE  01A4               	clrf	_Timer+4	;volatile
  5078                           
  5079                           ;Timer.c: 24: Timer.SEC_Count = 0;
  5080  03AF  01A3               	clrf	_Timer+3	;volatile
  5081                           
  5082                           ;Timer.c: 25: Timer.flags = 0;
  5083  03B0  01A0               	clrf	_Timer	;volatile
  5084                           
  5085                           ;Timer.c: 28: TMR1 = 0xFE0B;
  5086  03B1  30FE               	movlw	254
  5087  03B2  0097               	movwf	23	;volatile
  5088  03B3  300B               	movlw	11
  5089  03B4  0096               	movwf	22	;volatile
  5090                           
  5091                           ;Timer.c: 29: TMR1IF = 0;
  5092  03B5  1011               	bcf	17,0	;volatile
  5093                           
  5094                           ;Timer.c: 30: TMR1IE = 1;
  5095  03B6  0021               	movlb	1	; select bank1
  5096  03B7  1411               	bsf	17,0	;volatile
  5097                           
  5098                           ;Timer.c: 35: T2CON=0b01001111;
  5099  03B8  304F               	movlw	79
  5100  03B9  0020               	movlb	0	; select bank0
  5101  03BA  009C               	movwf	28	;volatile
  5102                           
  5103                           ;Timer.c: 36: PR2=0xf9;
  5104  03BB  30F9               	movlw	249
  5105  03BC  009B               	movwf	27	;volatile
  5106  03BD  0008               	return
  5107  03BE                     __end_of_timer_init:	
  5108  03BE                     __ptext9:	
  5109 ;; *************** function _PWM_TurnOff *****************
  5110 ;; Defined at:
  5111 ;;		line 305 in file "DMX.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;		None
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;		None
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      void 
  5118 ;; Registers used:
  5119 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5120 ;; Tracked objects:
  5121 ;;		On entry : 1E/0
  5122 ;;		On exit  : 1E/0
  5123 ;;		Unchanged: 1E/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5125 ;;      Params:         0       0       0       0       0       0       0       0
  5126 ;;      Locals:         0       0       0       0       0       0       0       0
  5127 ;;      Temps:          2       0       0       0       0       0       0       0
  5128 ;;      Totals:         2       0       0       0       0       0       0       0
  5129 ;;Total ram usage:        2 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    2
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_timer2_loop
  5136 ;;		_RDM_Identify_Switch
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _PWM_TurnOff
  5142  03BE                     _PWM_TurnOff:	
  5143  03BE                     l2703:	
  5144                           ;incstack = 0
  5145                           ; Regs used in _PWM_TurnOff: [wreg+fsr1l+fsr1h+status,2+status,0]
  5146                           
  5147                           
  5148                           ;DMX.c: 306: Addr=0;
  5149  03BE  01F9               	clrf	_Addr
  5150  03BF                     l2709:	
  5151                           ;DMX.c: 307: while (Addr < 4) {
  5152                           
  5153  03BF  3004               	movlw	4
  5154  03C0  0279               	subwf	_Addr,w
  5155  03C1  1803               	btfsc	3,0
  5156  03C2  0008               	return
  5157                           
  5158                           ;DMX.c: 308: *PWMDCHptr[Addr] = 0x00;
  5159  03C3  3579               	lslf	_Addr,w
  5160  03C4  3EC0               	addlw	(low (_PWMDCHptr| 0))& (0+255)
  5161  03C5  268A  3180         	fcall	PL4	;call to abstracted procedure
  5162  03C7  0181               	clrf	1
  5163                           
  5164                           ;DMX.c: 309: *PWMDCLptr[Addr] = 0x00;
  5165  03C8  3579               	lslf	_Addr,w
  5166  03C9  3EC8               	addlw	(low (_PWMDCLptr| 0))& (0+255)
  5167  03CA  268A  3180         	fcall	PL4	;call to abstracted procedure
  5168  03CC  0181               	clrf	1
  5169                           
  5170                           ;DMX.c: 310: *PWMLDCONptr[Addr] = 0b10000000;
  5171  03CD  3579               	lslf	_Addr,w
  5172  03CE  3EB8               	addlw	(low (_PWMLDCONptr| 0))& (0+255)
  5173  03CF  268A  3180         	fcall	PL4	;call to abstracted procedure
  5174  03D1  3080               	movlw	128
  5175  03D2  0081               	movwf	1
  5176                           
  5177                           ;DMX.c: 311: Addr++;
  5178  03D3  0AF9               	incf	_Addr,f
  5179  03D4  2BBF               	goto	l2709
  5180  03D5                     __end_of_PWM_TurnOff:	
  5181  03D5                     __ptext3:	
  5182 ;; *************** function _PWM_TurnOn *****************
  5183 ;; Defined at:
  5184 ;;		line 296 in file "DMX.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5193 ;; Tracked objects:
  5194 ;;		On entry : 1E/0
  5195 ;;		On exit  : 1E/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5198 ;;      Params:         0       0       0       0       0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0       0       0       0
  5200 ;;      Temps:          0       5       0       0       0       0       0       0
  5201 ;;      Totals:         0       5       0       0       0       0       0       0
  5202 ;;Total ram usage:        5 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    2
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_timer2_loop
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _PWM_TurnOn
  5214  03D5                     _PWM_TurnOn:	
  5215  03D5                     l3765:	
  5216                           ;incstack = 0
  5217                           ; Regs used in _PWM_TurnOn: [wreg-fsr1h+status,2+status,0+pclath]
  5218                           
  5219                           
  5220                           ;DMX.c: 297: Addr=0;
  5221  03D5  01F9               	clrf	_Addr
  5222  03D6                     l3773:	
  5223                           ;DMX.c: 298: while (Addr < 4) {
  5224                           
  5225  03D6  3004               	movlw	4
  5226  03D7  0279               	subwf	_Addr,w
  5227  03D8  1803               	btfsc	3,0
  5228  03D9  0008               	return
  5229                           
  5230                           ;DMX.c: 299: *PWMDCHptr[Addr] = PWM.PWM[IDENTIFY_MODE].DCH;
  5231  03DA  0020               	movlb	0	; select bank0
  5232  03DB  086E               	movf	_IDENTIFY_MODE,w
  5233  03DC  00D0               	movwf	??_PWM_TurnOn
  5234  03DD  304A               	movlw	low ((_PWM+1)| (0+32768))
  5235  03DE  272A  3180         	fcall	PL44	;call to abstracted procedure
  5236  03E0  3087               	movlw	high ((_PWM+1)| (0+32768))
  5237  03E1  270C  3180         	fcall	PL34	;call to abstracted procedure
  5238  03E3  3EC0               	addlw	(low (_PWMDCHptr| 0))& (0+255)
  5239  03E4  26B2  3180         	fcall	PL10	;call to abstracted procedure
  5240                           
  5241                           ;DMX.c: 300: *PWMDCLptr[Addr] = PWM.PWM[IDENTIFY_MODE].DCL;
  5242  03E6  086E               	movf	_IDENTIFY_MODE,w
  5243  03E7  00D0               	movwf	??_PWM_TurnOn
  5244  03E8  3049               	movlw	low (_PWM| (0+32768))
  5245  03E9  272A  3180         	fcall	PL44	;call to abstracted procedure
  5246  03EB  3087               	movlw	high (_PWM| (0+32768))
  5247  03EC  270C  3180         	fcall	PL34	;call to abstracted procedure
  5248  03EE  3EC8               	addlw	(low (_PWMDCLptr| 0))& (0+255)
  5249  03EF  26B2  3180         	fcall	PL10	;call to abstracted procedure
  5250                           
  5251                           ;DMX.c: 301: *PWMLDCONptr[Addr] = 0b10000000;
  5252  03F1  26D7  3180         	fcall	PL18	;call to abstracted procedure
  5253  03F3  00D0               	movwf	??_PWM_TurnOn
  5254  03F4  3F41               	moviw [1]fsr1
  5255  03F5  00D1               	movwf	??_PWM_TurnOn+1
  5256  03F6  0850               	movf	??_PWM_TurnOn,w
  5257  03F7  0086               	movwf	6
  5258  03F8  0851               	movf	??_PWM_TurnOn+1,w
  5259                           
  5260                           ;DMX.c: 302: Addr++;
  5261  03F9  2730  3180         	fcall	PL46	;call to abstracted procedure
  5262  03FB  2BD6               	goto	l3773
  5263  03FC                     __end_of_PWM_TurnOn:	
  5264  03FC                     __ptext12:	
  5265 ;; *************** function _RDM_GET_CC *****************
  5266 ;; Defined at:
  5267 ;;		line 16 in file "RDM_Read.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;		None
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 1E/1
  5278 ;;		On exit  : 1F/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5281 ;;      Params:         0       0       0       0       0       0       0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0
  5283 ;;      Temps:          0       2       0       0       0       0       0       0
  5284 ;;      Totals:         0       2       0       0       0       0       0       0
  5285 ;;Total ram usage:        2 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    4
  5288 ;; This function calls:
  5289 ;;		_PD_write_u16
  5290 ;;		_PD_write_u32
  5291 ;;		_PD_write_u8
  5292 ;;		_RDM_TXSTART
  5293 ;;		___wmul
  5294 ;; This function is called by:
  5295 ;;		_RDM_rx_loop
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _RDM_GET_CC
  5301  03FC                     _RDM_GET_CC:	
  5302  03FC                     l3845:	
  5303                           ;incstack = 0
  5304                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5305                           
  5306                           
  5307                           ;RDM_Read.c: 17: switch (RX_RDM_Data.PID){
  5308  03FC  2C9D               	goto	l3881
  5309  03FD                     l3847:	
  5310                           
  5311                           ;RDM_Read.c: 21: PD_write_u8(DMX_Flags.RDM_Identify_Device);
  5312  03FD  0C77               	rrf	_DMX_Flags+1,w	;volatile
  5313  03FE  0020               	movlb	0	; select bank0
  5314  03FF  00E9               	movwf	??_RDM_GET_CC
  5315  0400  0CE9               	rrf	??_RDM_GET_CC,f
  5316  0401  0C69               	rrf	??_RDM_GET_CC,w
  5317  0402  3901               	andlw	1
  5318  0403  24DE  3180         	fcall	_PD_write_u8
  5319                           
  5320                           ;RDM_Read.c: 22: break;
  5321  0405  2CBF               	goto	l3883
  5322  0406                     l3849:	
  5323                           
  5324                           ;RDM_Read.c: 36: PD_write_u16(0x0100);
  5325  0406  3001               	movlw	1
  5326  0407  01F4               	clrf	PD_write_u16@u16
  5327  0408  00F5               	movwf	PD_write_u16@u16+1
  5328  0409  24C0  3180         	fcall	_PD_write_u16
  5329                           
  5330                           ;RDM_Read.c: 37: PD_write_u16(0x0080);
  5331  040B  3080               	movlw	128
  5332  040C  00F4               	movwf	PD_write_u16@u16
  5333  040D  01F5               	clrf	PD_write_u16@u16+1
  5334  040E  24C0  3180         	fcall	_PD_write_u16
  5335                           
  5336                           ;RDM_Read.c: 38: PD_write_u16(0x0004);
  5337  0410  3004               	movlw	4
  5338  0411  00F4               	movwf	PD_write_u16@u16
  5339  0412  01F5               	clrf	PD_write_u16@u16+1
  5340  0413  24C0  3180         	fcall	_PD_write_u16
  5341                           
  5342                           ;RDM_Read.c: 39: PD_write_u32(0x20171012);
  5343  0415  3020               	movlw	32
  5344  0416  00D3               	movwf	PD_write_u32@u32+3
  5345  0417  3017               	movlw	23
  5346  0418  00D2               	movwf	PD_write_u32@u32+2
  5347  0419  3010               	movlw	16
  5348  041A  00D1               	movwf	PD_write_u32@u32+1
  5349  041B  3012               	movlw	18
  5350  041C  00D0               	movwf	PD_write_u32@u32
  5351  041D  2505  3180         	fcall	_PD_write_u32
  5352                           
  5353                           ;RDM_Read.c: 40: PD_write_u16(0x0004);
  5354  041F  3004               	movlw	4
  5355  0420  00F4               	movwf	PD_write_u16@u16
  5356  0421  01F5               	clrf	PD_write_u16@u16+1
  5357  0422  24C0  3180         	fcall	_PD_write_u16
  5358                           
  5359                           ;RDM_Read.c: 41: PD_write_u8(PERSONALITY);
  5360  0424  0844               	movf	_PERSONALITY,w
  5361  0425  24DE  3180         	fcall	_PD_write_u8
  5362                           
  5363                           ;RDM_Read.c: 42: PD_write_u8(sizeof(PERSONALITY_DEFINITIONS));
  5364  0427  301E               	movlw	30
  5365  0428  24DE  3180         	fcall	_PD_write_u8
  5366                           
  5367                           ;RDM_Read.c: 43: PD_write_u16(DMX_Address);
  5368  042A  2744  3180         	fcall	PL56	;call to abstracted procedure
  5369  042C  24C0  3180         	fcall	_PD_write_u16
  5370                           
  5371                           ;RDM_Read.c: 44: PD_write_u16(0);
  5372  042E  01F4               	clrf	PD_write_u16@u16
  5373  042F  01F5               	clrf	PD_write_u16@u16+1
  5374  0430  24C0  3180         	fcall	_PD_write_u16
  5375                           
  5376                           ;RDM_Read.c: 45: PD_write_u8(0);
  5377  0432  3000               	movlw	0
  5378  0433  24DE  3180         	fcall	_PD_write_u8
  5379                           
  5380                           ;RDM_Read.c: 46: break;
  5381  0435  2CBF               	goto	l3883
  5382  0436                     l3851:	
  5383                           
  5384                           ;RDM_Read.c: 50: PD_write_u16(DMX_Address);
  5385  0436  0020               	movlb	0	; select bank0
  5386  0437  2744  3180         	fcall	PL56	;call to abstracted procedure
  5387  0439  24C0  3180         	fcall	_PD_write_u16
  5388                           
  5389                           ;RDM_Read.c: 51: break;
  5390  043B  2CBF               	goto	l3883
  5391  043C                     l3853:	
  5392                           
  5393                           ;RDM_Read.c: 56: PackCount++;
  5394  043C  0AF8               	incf	_PackCount,f	;volatile
  5395                           
  5396                           ;RDM_Read.c: 57: PD_write_u8(SOFTWARE_VERSION_LABEL[PackCount]);
  5397  043D  0878               	movf	_PackCount,w	;volatile
  5398  043E  3E67               	addlw	low (_SOFTWARE_VERSION_LABEL| (0+32768))
  5399  043F  0084               	movwf	4
  5400  0440  3089               	movlw	high (_SOFTWARE_VERSION_LABEL| (0+32768))
  5401  0441  1803               	skipnc
  5402  0442  3E01               	addlw	1
  5403  0443  0085               	movwf	5
  5404  0444  0800               	movf	0,w	;code access
  5405  0445  24DE  3180         	fcall	_PD_write_u8
  5406  0447                     l3857:	
  5407  0447  3018               	movlw	24
  5408  0448  0278               	subwf	_PackCount,w
  5409  0449  1803               	btfsc	3,0
  5410  044A  2CBF               	goto	l3883
  5411  044B  2C3C               	goto	l3853
  5412  044C                     l3859:	
  5413                           
  5414                           ;RDM_Read.c: 61: PDCount=sizeof(PID_DEFINITIONS);
  5415  044C  3004               	movlw	4
  5416  044D  0020               	movlb	0	; select bank0
  5417  044E  00C6               	movwf	_PDCount
  5418  044F                     l3865:	
  5419                           ;RDM_Read.c: 62: while(PackCount<PDCount){
  5420                           
  5421  044F  0846               	movf	_PDCount,w
  5422  0450  0278               	subwf	_PackCount,w	;volatile
  5423  0451  1803               	btfsc	3,0
  5424  0452  2CBF               	goto	l3883
  5425                           
  5426                           ;RDM_Read.c: 63: PD_write_u16(PID_DEFINITIONS[PackCount]);
  5427  0453  0878               	movf	_PackCount,w	;volatile
  5428  0454  00E9               	movwf	??_RDM_GET_CC
  5429  0455  3085               	movlw	low (RDM@PID_DEFINITIONS| (0+32768))
  5430  0456  01EA               	clrf	??_RDM_GET_CC+1
  5431  0457  35E9               	lslf	??_RDM_GET_CC,f
  5432  0458  0DEA               	rlf	??_RDM_GET_CC+1,f
  5433  0459  0769               	addwf	??_RDM_GET_CC,w
  5434  045A  0084               	movwf	4
  5435  045B  3089               	movlw	high (RDM@PID_DEFINITIONS| (0+32768))
  5436  045C  3D6A               	addwfc	??_RDM_GET_CC+1,w
  5437  045D  0085               	movwf	5
  5438  045E  3F00               	moviw [0]fsr0
  5439  045F  00F4               	movwf	PD_write_u16@u16
  5440  0460  3F01               	moviw [1]fsr0
  5441  0461  00F5               	movwf	PD_write_u16@u16+1
  5442  0462  24C0  3180         	fcall	_PD_write_u16
  5443                           
  5444                           ;RDM_Read.c: 64: PackCount++;
  5445  0464  0AF8               	incf	_PackCount,f	;volatile
  5446  0465  2C4F               	goto	l3865
  5447  0466                     l3867:	
  5448                           
  5449                           ;RDM_Read.c: 71: PD_write_u8(PERSONALITY);
  5450  0466  0020               	movlb	0	; select bank0
  5451  0467  0844               	movf	_PERSONALITY,w
  5452  0468  24DE  3180         	fcall	_PD_write_u8
  5453                           
  5454                           ;RDM_Read.c: 72: PD_write_u8(sizeof(PERSONALITY_DEFINITIONS));
  5455  046A  301E               	movlw	30
  5456  046B  24DE  3180         	fcall	_PD_write_u8
  5457                           
  5458                           ;RDM_Read.c: 73: break;
  5459  046D  2CBF               	goto	l3883
  5460  046E                     l3869:	
  5461                           
  5462                           ;RDM_Read.c: 75: BytePtr=PERSONALITY_DEFINITIONS[PERSONALITY-1].description;
  5463  046E  0020               	movlb	0	; select bank0
  5464  046F  26F8  3180         	fcall	PL28	;call to abstracted procedure
  5465  0471  24F0  3180         	fcall	___wmul
  5466  0473  0851               	movf	?___wmul+1,w
  5467  0474  0085               	movwf	5
  5468  0475  0850               	movf	?___wmul,w
  5469  0476  0084               	movwf	4
  5470  0477  3046               	movlw	low ((RDM@PERSONALITY_DEFINITIONS+65533)| (0+32768))
  5471  0478  0784               	addwf	4,f
  5472  0479  3089               	movlw	high ((RDM@PERSONALITY_DEFINITIONS+65533)| (0+32768))
  5473  047A  3D85               	addwfc	5,f
  5474  047B  3F00               	moviw [0]fsr0
  5475  047C  00B3               	movwf	_BytePtr
  5476  047D  3F01               	moviw [1]fsr0
  5477  047E  00B4               	movwf	_BytePtr+1
  5478                           
  5479                           ;RDM_Read.c: 76: PDCount=PERSONALITY_DEFINITIONS[PERSONALITY-1].descriptionsize;
  5480  047F  26F8  3180         	fcall	PL28	;call to abstracted procedure
  5481  0481  24F0  3180         	fcall	___wmul
  5482  0483  0851               	movf	?___wmul+1,w
  5483  0484  0085               	movwf	5
  5484  0485  0850               	movf	?___wmul,w
  5485  0486  0084               	movwf	4
  5486  0487  3048               	movlw	low ((RDM@PERSONALITY_DEFINITIONS+65535)| (0+32768))
  5487  0488  0784               	addwf	4,f
  5488  0489  3089               	movlw	high ((RDM@PERSONALITY_DEFINITIONS+65535)| (0+32768))
  5489  048A  3D85               	addwfc	5,f
  5490  048B  0800               	movf	0,w	;code access
  5491  048C  00C6               	movwf	_PDCount
  5492  048D                     l3877:	
  5493                           ;RDM_Read.c: 77: while(PackCount<PDCount){
  5494                           
  5495  048D  0846               	movf	_PDCount,w
  5496  048E  0278               	subwf	_PackCount,w	;volatile
  5497  048F  1803               	btfsc	3,0
  5498  0490  2CBF               	goto	l3883
  5499                           
  5500                           ;RDM_Read.c: 78: PD_write_u8(*BytePtr);
  5501  0491  0833               	movf	_BytePtr,w
  5502  0492  0084               	movwf	4
  5503  0493  0834               	movf	_BytePtr+1,w
  5504  0494  0085               	movwf	5
  5505  0495  0800               	movf	0,w	;code access
  5506  0496  24DE  3180         	fcall	_PD_write_u8
  5507                           
  5508                           ;RDM_Read.c: 79: PackCount++;
  5509  0498  0AF8               	incf	_PackCount,f	;volatile
  5510                           
  5511                           ;RDM_Read.c: 80: BytePtr++;
  5512  0499  0AB3               	incf	_BytePtr,f
  5513  049A  1903               	skipnz
  5514  049B  0AB4               	incf	_BytePtr+1,f
  5515  049C  2C8D               	goto	l3877
  5516  049D                     l3881:	
  5517                           
  5518                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5519                           ; Switch size 1, requested type "space"
  5520                           ; Number of cases is 2, Range of values is 0 to 16
  5521                           ; switch strategies available:
  5522                           ; Name         Instructions Cycles
  5523                           ; simple_byte            7     4 (average)
  5524                           ; direct_byte           40     6 (fixed)
  5525                           ; jumptable            260     6 (fixed)
  5526                           ;	Chosen strategy is simple_byte
  5527  049D  0021               	movlb	1	; select bank1
  5528  049E  0824               	movf	((_RX_RDM_Data+1)^(0+128)+3),w	;volatile
  5529  049F  3A00               	xorlw	0	; case 0
  5530  04A0  1903               	skipnz
  5531  04A1  2CA6               	goto	l4369
  5532  04A2  3A10               	xorlw	16	; case 16
  5533  04A3  1903               	skipnz
  5534  04A4  2CBA               	goto	l4371
  5535  04A5  2CBF               	goto	l3883
  5536  04A6                     l4369:	
  5537                           
  5538                           ; Switch size 1, requested type "space"
  5539                           ; Number of cases is 6, Range of values is 80 to 240
  5540                           ; switch strategies available:
  5541                           ; Name         Instructions Cycles
  5542                           ; simple_byte           19    10 (average)
  5543                           ; jumptable            263     9 (fixed)
  5544                           ;	Chosen strategy is simple_byte
  5545  04A6  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  5546  04A7  3A50               	xorlw	80	; case 80
  5547  04A8  1903               	skipnz
  5548  04A9  2C4C               	goto	l3859
  5549  04AA  3A30               	xorlw	48	; case 96
  5550  04AB  1903               	skipnz
  5551  04AC  2C06               	goto	l3849
  5552  04AD  3AA0               	xorlw	160	; case 192
  5553  04AE  1903               	skipnz
  5554  04AF  2C47               	goto	l3857
  5555  04B0  3A20               	xorlw	32	; case 224
  5556  04B1  1903               	skipnz
  5557  04B2  2C66               	goto	l3867
  5558  04B3  3A01               	xorlw	1	; case 225
  5559  04B4  1903               	skipnz
  5560  04B5  2C6E               	goto	l3869
  5561  04B6  3A11               	xorlw	17	; case 240
  5562  04B7  1903               	skipnz
  5563  04B8  2C36               	goto	l3851
  5564  04B9  2CBF               	goto	l3883
  5565  04BA                     l4371:	
  5566                           
  5567                           ; Switch size 1, requested type "space"
  5568                           ; Number of cases is 1, Range of values is 0 to 0
  5569                           ; switch strategies available:
  5570                           ; Name         Instructions Cycles
  5571                           ; simple_byte            4     3 (average)
  5572                           ; direct_byte            8     6 (fixed)
  5573                           ; jumptable            260     6 (fixed)
  5574                           ;	Chosen strategy is simple_byte
  5575  04BA  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  5576  04BB  3A00               	xorlw	0	; case 0
  5577  04BC  1903               	skipnz
  5578  04BD  2BFD               	goto	l3847
  5579  04BE  2CBF               	goto	l3883
  5580  04BF                     l3883:	
  5581                           
  5582                           ;RDM_Read.c: 84: RDM_TXSTART();
  5583  04BF  2E2F               	ljmp	l2795
  5584  04C0                     __end_of_RDM_GET_CC:	
  5585  04C0                     __ptext20:	
  5586 ;; *************** function _PD_write_u16 *****************
  5587 ;; Defined at:
  5588 ;;		line 213 in file "RDM_Read.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  u16             2    4[COMMON] unsigned int 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      void 
  5595 ;; Registers used:
  5596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5597 ;; Tracked objects:
  5598 ;;		On entry : 1E/1
  5599 ;;		On exit  : 1F/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5602 ;;      Params:         2       0       0       0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0       0
  5604 ;;      Temps:          0       5       0       0       0       0       0       0
  5605 ;;      Totals:         2       5       0       0       0       0       0       0
  5606 ;;Total ram usage:        7 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    2
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_RDM_GET_CC
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           
  5617                           ;psect for function _PD_write_u16
  5618  04C0                     _PD_write_u16:	
  5619                           
  5620                           ;RDM_Read.c: 214: TX_RDM_Data.PDL+=2;
  5621                           
  5622                           ;incstack = 0
  5623                           ; Regs used in _PD_write_u16: [wreg+fsr1l+fsr1h+status,2+status,0]
  5624  04C0  0021               	movlb	1	; select bank1
  5625  04C1  0AD9               	incf	(_TX_RDM_Data^(0+128)+2),f
  5626  04C2  0AD9               	incf	(_TX_RDM_Data^(0+128)+2),f	;volatile
  5627                           
  5628                           ;RDM_Read.c: 215: PD.u16[((100>>1)>>1)-(TX_RDM_Data.PDL>>1)]=u16;
  5629  04C3  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  5630  04C4  0020               	movlb	0	; select bank0
  5631  04C5  00D0               	movwf	??_PD_write_u16
  5632  04C6  36D0               	lsrf	??_PD_write_u16,f
  5633  04C7  01D2               	clrf	??_PD_write_u16+2
  5634  04C8  0850               	movf	??_PD_write_u16,w
  5635  04C9  3C19               	sublw	25
  5636  04CA  00D1               	movwf	??_PD_write_u16+1
  5637  04CB  1C03               	skipc
  5638  04CC  03D2               	decf	??_PD_write_u16+2,f
  5639  04CD  308C               	movlw	140
  5640  04CE  35D1               	lslf	??_PD_write_u16+1,f
  5641  04CF  0DD2               	rlf	??_PD_write_u16+2,f
  5642  04D0  00D3               	movwf	??_PD_write_u16+3
  5643  04D1  3021               	movlw	33
  5644  04D2  00D4               	movwf	??_PD_write_u16+4
  5645  04D3  0851               	movf	??_PD_write_u16+1,w
  5646  04D4  0753               	addwf	??_PD_write_u16+3,w
  5647  04D5  0086               	movwf	6
  5648  04D6  0852               	movf	??_PD_write_u16+2,w
  5649  04D7  3D54               	addwfc	??_PD_write_u16+4,w
  5650  04D8  0087               	movwf	7
  5651  04D9  0874               	movf	PD_write_u16@u16,w
  5652  04DA  3FC0               	movwi [0]fsr1
  5653  04DB  0875               	movf	PD_write_u16@u16+1,w
  5654  04DC  3FC1               	movwi [1]fsr1
  5655  04DD  0008               	return
  5656  04DE                     __end_of_PD_write_u16:	
  5657  04DE                     __ptext18:	
  5658 ;; *************** function _PD_write_u8 *****************
  5659 ;; Defined at:
  5660 ;;		line 208 in file "RDM_Read.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  u8              1    wreg     unsigned char 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  u8              1    0[BANK0 ] unsigned char 
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  1    wreg      void 
  5667 ;; Registers used:
  5668 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5669 ;; Tracked objects:
  5670 ;;		On entry : 1E/0
  5671 ;;		On exit  : 1F/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5674 ;;      Params:         0       0       0       0       0       0       0       0
  5675 ;;      Locals:         0       1       0       0       0       0       0       0
  5676 ;;      Temps:          2       0       0       0       0       0       0       0
  5677 ;;      Totals:         2       1       0       0       0       0       0       0
  5678 ;;Total ram usage:        3 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    2
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_RDM_GET_CC
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _PD_write_u8
  5690  04DE                     _PD_write_u8:	
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in _PD_write_u8: [wreg+fsr1l+fsr1h+status,2+status,0]
  5694                           ;PD_write_u8@u8 stored from wreg
  5695  04DE  0020               	movlb	0	; select bank0
  5696  04DF  00D0               	movwf	PD_write_u8@u8
  5697                           
  5698                           ;RDM_Read.c: 209: TX_RDM_Data.PDL++;
  5699  04E0  0021               	movlb	1	; select bank1
  5700  04E1  0AD9               	incf	(_TX_RDM_Data^(0+128)+2),f	;volatile
  5701                           
  5702                           ;RDM_Read.c: 210: PD.u8[(100>>1)-TX_RDM_Data.PDL]=u8;
  5703  04E2  3021               	movlw	33
  5704  04E3  00F5               	movwf	??_PD_write_u8+1
  5705  04E4  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  5706  04E5  3CBE               	sublw	190
  5707  04E6  00F4               	movwf	??_PD_write_u8
  5708  04E7  1C03               	skipc
  5709  04E8  03F5               	decf	??_PD_write_u8+1,f
  5710  04E9  0086               	movwf	6
  5711  04EA  0875               	movf	??_PD_write_u8+1,w
  5712  04EB  0087               	movwf	7
  5713  04EC  0020               	movlb	0	; select bank0
  5714  04ED  0850               	movf	PD_write_u8@u8,w
  5715  04EE  0081               	movwf	1
  5716  04EF  0008               	return
  5717  04F0                     __end_of_PD_write_u8:	
  5718  04F0                     __ptext13:	
  5719 ;; *************** function ___wmul *****************
  5720 ;; Defined at:
  5721 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5724 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  product         2    4[COMMON] unsigned int 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  2    0[BANK0 ] unsigned int 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 1F/0
  5733 ;;		On exit  : 1F/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5736 ;;      Params:         0       4       0       0       0       0       0       0
  5737 ;;      Locals:         2       0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0
  5739 ;;      Totals:         2       4       0       0       0       0       0       0
  5740 ;;Total ram usage:        6 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    2
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_RDM_GET_CC
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function ___wmul
  5752  04F0                     ___wmul:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5756  04F0  01F4               	clrf	___wmul@product
  5757  04F1  01F5               	clrf	___wmul@product+1
  5758  04F2                     l3751:	
  5759  04F2  1C50               	btfss	___wmul@multiplier,0
  5760  04F3  2CF8               	goto	l3755
  5761  04F4  0852               	movf	___wmul@multiplicand,w
  5762  04F5  07F4               	addwf	___wmul@product,f
  5763  04F6  0853               	movf	___wmul@multiplicand+1,w
  5764  04F7  3DF5               	addwfc	___wmul@product+1,f
  5765  04F8                     l3755:	
  5766  04F8  35D2               	lslf	___wmul@multiplicand,f
  5767  04F9  0DD3               	rlf	___wmul@multiplicand+1,f
  5768  04FA  36D1               	lsrf	___wmul@multiplier+1,f
  5769  04FB  0CD0               	rrf	___wmul@multiplier,f
  5770  04FC  0850               	movf	___wmul@multiplier,w
  5771  04FD  0451               	iorwf	___wmul@multiplier+1,w
  5772  04FE  1D03               	btfss	3,2
  5773  04FF  2CF2               	goto	l3751
  5774  0500  0875               	movf	___wmul@product+1,w
  5775  0501  00D1               	movwf	?___wmul+1
  5776  0502  0874               	movf	___wmul@product,w
  5777  0503  00D0               	movwf	?___wmul
  5778  0504  0008               	return
  5779  0505                     __end_of___wmul:	
  5780  0505                     __ptext19:	
  5781 ;; *************** function _PD_write_u32 *****************
  5782 ;; Defined at:
  5783 ;;		line 218 in file "RDM_Read.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  u32             4    0[BANK0 ] unsigned long 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5792 ;; Tracked objects:
  5793 ;;		On entry : 1F/0
  5794 ;;		On exit  : 1F/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5797 ;;      Params:         0       4       0       0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0
  5799 ;;      Temps:          0       5       0       0       0       0       0       0
  5800 ;;      Totals:         0       9       0       0       0       0       0       0
  5801 ;;Total ram usage:        9 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    2
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_RDM_GET_CC
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _PD_write_u32
  5813  0505                     _PD_write_u32:	
  5814                           
  5815                           ;RDM_Read.c: 219: TX_RDM_Data.PDL+=4;
  5816                           
  5817                           ;incstack = 0
  5818                           ; Regs used in _PD_write_u32: [wreg+fsr1l+fsr1h+status,2+status,0]
  5819  0505  3004               	movlw	4
  5820  0506  0021               	movlb	1	; select bank1
  5821  0507  07D9               	addwf	(_TX_RDM_Data^(0+128)+2),f	;volatile
  5822                           
  5823                           ;RDM_Read.c: 220: PD.u32[((100>>1)>>1)-(TX_RDM_Data.PDL>>2)]=u32;
  5824  0508  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  5825  0509  0020               	movlb	0	; select bank0
  5826  050A  00D4               	movwf	??_PD_write_u32
  5827  050B  36D4               	lsrf	??_PD_write_u32,f
  5828  050C  36D4               	lsrf	??_PD_write_u32,f
  5829  050D  01D6               	clrf	??_PD_write_u32+2
  5830  050E  0854               	movf	??_PD_write_u32,w
  5831  050F  3C19               	sublw	25
  5832  0510  00D5               	movwf	??_PD_write_u32+1
  5833  0511  1C03               	skipc
  5834  0512  03D6               	decf	??_PD_write_u32+2,f
  5835  0513  308C               	movlw	140
  5836  0514  35D5               	lslf	??_PD_write_u32+1,f
  5837  0515  0DD6               	rlf	??_PD_write_u32+2,f
  5838  0516  35D5               	lslf	??_PD_write_u32+1,f
  5839  0517  0DD6               	rlf	??_PD_write_u32+2,f
  5840  0518  00D7               	movwf	??_PD_write_u32+3
  5841  0519  3021               	movlw	33
  5842  051A  00D8               	movwf	??_PD_write_u32+4
  5843  051B  0855               	movf	??_PD_write_u32+1,w
  5844  051C  0757               	addwf	??_PD_write_u32+3,w
  5845  051D  0086               	movwf	6
  5846  051E  0856               	movf	??_PD_write_u32+2,w
  5847  051F  3D58               	addwfc	??_PD_write_u32+4,w
  5848  0520  0087               	movwf	7
  5849  0521  0850               	movf	PD_write_u32@u32,w
  5850  0522  3FC0               	movwi [0]fsr1
  5851  0523  0851               	movf	PD_write_u32@u32+1,w
  5852  0524  3FC1               	movwi [1]fsr1
  5853  0525  0852               	movf	PD_write_u32@u32+2,w
  5854  0526  3FC2               	movwi [2]fsr1
  5855  0527  0853               	movf	PD_write_u32@u32+3,w
  5856  0528  3FC3               	movwi [3]fsr1
  5857  0529  0008               	return
  5858  052A                     __end_of_PD_write_u32:	
  5859  052A                     __ptext7:	
  5860 ;; *************** function _RDM_SET_CC *****************
  5861 ;; Defined at:
  5862 ;;		line 87 in file "RDM_Read.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;		None
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  1    wreg      void 
  5869 ;; Registers used:
  5870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 1E/1
  5873 ;;		On exit  : 1F/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5876 ;;      Params:         0       0       0       0       0       0       0       0
  5877 ;;      Locals:         0       0       0       0       0       0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0
  5879 ;;      Totals:         0       0       0       0       0       0       0       0
  5880 ;;Total ram usage:        0 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    4
  5883 ;; This function calls:
  5884 ;;		_PD_Read_u16ptr
  5885 ;;		_PD_Read_u8ptr
  5886 ;;		_PFM_Write
  5887 ;;		_RDM_Identify_Switch
  5888 ;;		_RDM_TXSTART
  5889 ;; This function is called by:
  5890 ;;		_RDM_rx_loop
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _RDM_SET_CC
  5896  052A                     _RDM_SET_CC:	
  5897  052A                     l3897:	
  5898                           ;incstack = 0
  5899                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5900                           
  5901                           
  5902                           ;RDM_Read.c: 88: switch (RX_RDM_Data.PID){
  5903  052A  2D58               	goto	l3913
  5904  052B                     l3899:	
  5905                           
  5906                           ;RDM_Read.c: 91: DMX_Address=*PD_Read_u16ptr();
  5907  052B  25FF  3180         	fcall	_PD_Read_u16ptr
  5908  052D  0871               	movf	?_PD_Read_u16ptr,w
  5909  052E  0086               	movwf	6
  5910  052F  0872               	movf	?_PD_Read_u16ptr+1,w
  5911  0530  0087               	movwf	7
  5912  0531  3F40               	moviw [0]fsr1
  5913  0532  00BD               	movwf	_DMX_Address
  5914  0533  3F41               	moviw [1]fsr1
  5915  0534  00BE               	movwf	_DMX_Address+1
  5916                           
  5917                           ;RDM_Read.c: 93: PFM_Write(Flash_DMXAddress,DMX_Address);
  5918  0535  3080               	movlw	128
  5919  0536  00D0               	movwf	PFM_Write@AddrPFM
  5920  0537  300C               	movlw	12
  5921  0538  00D1               	movwf	PFM_Write@AddrPFM+1
  5922  0539  083E               	movf	_DMX_Address+1,w
  5923  053A  00D3               	movwf	PFM_Write@Data+1
  5924  053B  083D               	movf	_DMX_Address,w
  5925  053C  00D2               	movwf	PFM_Write@Data
  5926  053D  22CC  3180         	fcall	_PFM_Write
  5927                           
  5928                           ;RDM_Read.c: 96: break;
  5929  053F  2D71               	goto	l3915
  5930  0540                     l3903:	
  5931                           
  5932                           ;RDM_Read.c: 98: RDM_Identify_Switch();
  5933  0540  257C  3180         	fcall	_RDM_Identify_Switch
  5934                           
  5935                           ;RDM_Read.c: 99: break;
  5936  0542  2D71               	goto	l3915
  5937  0543                     l3905:	
  5938                           
  5939                           ;RDM_Read.c: 101: IDENTIFY_MODE=*PD_Read_u8ptr();
  5940  0543  2572  3180         	fcall	_PD_Read_u8ptr
  5941  0545  26EA  3180         	fcall	PL24	;call to abstracted procedure
  5942  0547  00EE               	movwf	_IDENTIFY_MODE
  5943                           
  5944                           ;RDM_Read.c: 102: break;
  5945  0548  2D71               	goto	l3915
  5946  0549                     l3907:	
  5947                           
  5948                           ;RDM_Read.c: 104: PERSONALITY=*PD_Read_u8ptr();
  5949  0549  2572  3180         	fcall	_PD_Read_u8ptr
  5950  054B  26EA  3180         	fcall	PL24	;call to abstracted procedure
  5951  054D  00C4               	movwf	_PERSONALITY
  5952                           
  5953                           ;RDM_Read.c: 105: PFM_Write(Flash_Personality,PERSONALITY);
  5954  054E  30C0               	movlw	192
  5955  054F  00D0               	movwf	PFM_Write@AddrPFM
  5956  0550  300C               	movlw	12
  5957  0551  00D1               	movwf	PFM_Write@AddrPFM+1
  5958  0552  0844               	movf	_PERSONALITY,w
  5959  0553  00D2               	movwf	PFM_Write@Data
  5960  0554  01D3               	clrf	PFM_Write@Data+1
  5961  0555  22CC  3180         	fcall	_PFM_Write
  5962                           
  5963                           ;RDM_Read.c: 106: break;
  5964  0557  2D71               	goto	l3915
  5965  0558                     l3913:	
  5966                           
  5967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5968                           ; Switch size 1, requested type "space"
  5969                           ; Number of cases is 2, Range of values is 0 to 16
  5970                           ; switch strategies available:
  5971                           ; Name         Instructions Cycles
  5972                           ; simple_byte            7     4 (average)
  5973                           ; direct_byte           40     6 (fixed)
  5974                           ; jumptable            260     6 (fixed)
  5975                           ;	Chosen strategy is simple_byte
  5976  0558  0021               	movlb	1	; select bank1
  5977  0559  0824               	movf	((_RX_RDM_Data+1)^(0+128)+3),w	;volatile
  5978  055A  3A00               	xorlw	0	; case 0
  5979  055B  1903               	skipnz
  5980  055C  2D61               	goto	l4365
  5981  055D  3A10               	xorlw	16	; case 16
  5982  055E  1903               	skipnz
  5983  055F  2D69               	goto	l4367
  5984  0560  2D71               	goto	l3915
  5985  0561                     l4365:	
  5986                           
  5987                           ; Switch size 1, requested type "space"
  5988                           ; Number of cases is 2, Range of values is 224 to 240
  5989                           ; switch strategies available:
  5990                           ; Name         Instructions Cycles
  5991                           ; simple_byte            7     4 (average)
  5992                           ; direct_byte           43     9 (fixed)
  5993                           ; jumptable            263     9 (fixed)
  5994                           ;	Chosen strategy is simple_byte
  5995  0561  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  5996  0562  3AE0               	xorlw	224	; case 224
  5997  0563  1903               	skipnz
  5998  0564  2D49               	goto	l3907
  5999  0565  3A10               	xorlw	16	; case 240
  6000  0566  1903               	skipnz
  6001  0567  2D2B               	goto	l3899
  6002  0568  2D71               	goto	l3915
  6003  0569                     l4367:	
  6004                           
  6005                           ; Switch size 1, requested type "space"
  6006                           ; Number of cases is 2, Range of values is 0 to 64
  6007                           ; switch strategies available:
  6008                           ; Name         Instructions Cycles
  6009                           ; simple_byte            7     4 (average)
  6010                           ; direct_byte          136     6 (fixed)
  6011                           ; jumptable            260     6 (fixed)
  6012                           ;	Chosen strategy is simple_byte
  6013  0569  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  6014  056A  3A00               	xorlw	0	; case 0
  6015  056B  1903               	skipnz
  6016  056C  2D40               	goto	l3903
  6017  056D  3A40               	xorlw	64	; case 64
  6018  056E  1903               	skipnz
  6019  056F  2D43               	goto	l3905
  6020  0570  2D71               	goto	l3915
  6021  0571                     l3915:	
  6022                           
  6023                           ;RDM_Read.c: 108: RDM_TXSTART();
  6024  0571  2E2F               	ljmp	l2795
  6025  0572                     __end_of_RDM_SET_CC:	
  6026  0572                     __ptext10:	
  6027 ;; *************** function _PD_Read_u8ptr *****************
  6028 ;; Defined at:
  6029 ;;		line 223 in file "RDM_Read.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;		None
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;		None
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  2    4[COMMON] PTR unsigned char 
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0
  6038 ;; Tracked objects:
  6039 ;;		On entry : 1F/1
  6040 ;;		On exit  : 1F/1
  6041 ;;		Unchanged: 1F/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6043 ;;      Params:         2       0       0       0       0       0       0       0
  6044 ;;      Locals:         0       0       0       0       0       0       0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0       0
  6046 ;;      Totals:         2       0       0       0       0       0       0       0
  6047 ;;Total ram usage:        2 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    2
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_RDM_SET_CC
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           
  6058                           ;psect for function _PD_Read_u8ptr
  6059  0572                     _PD_Read_u8ptr:	
  6060                           
  6061                           ;RDM_Read.c: 224: PackCount+=1;
  6062                           
  6063                           ;incstack = 0
  6064                           ; Regs used in _PD_Read_u8ptr: [wreg+status,2+status,0]
  6065  0572  0AF8               	incf	_PackCount,f	;volatile
  6066                           
  6067                           ;RDM_Read.c: 225: return &PD.u8[100-PackCount];
  6068  0573  3021               	movlw	33
  6069  0574  00F5               	movwf	?_PD_Read_u8ptr+1
  6070  0575  30F0               	movlw	240
  6071  0576  00F4               	movwf	?_PD_Read_u8ptr
  6072  0577  0878               	movf	_PackCount,w	;volatile
  6073  0578  02F4               	subwf	?_PD_Read_u8ptr,f
  6074  0579  1C03               	skipc
  6075  057A  03F5               	decf	?_PD_Read_u8ptr+1,f
  6076  057B  0008               	return
  6077  057C                     __end_of_PD_Read_u8ptr:	
  6078  057C                     __ptext8:	
  6079 ;; *************** function _RDM_Identify_Switch *****************
  6080 ;; Defined at:
  6081 ;;		line 194 in file "Timer.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      void 
  6088 ;; Registers used:
  6089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6090 ;; Tracked objects:
  6091 ;;		On entry : 1F/1
  6092 ;;		On exit  : 1E/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6095 ;;      Params:         0       0       0       0       0       0       0       0
  6096 ;;      Locals:         0       0       0       0       0       0       0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0       0
  6098 ;;      Totals:         0       0       0       0       0       0       0       0
  6099 ;;Total ram usage:        0 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    3
  6102 ;; This function calls:
  6103 ;;		_PWM_TurnOff
  6104 ;; This function is called by:
  6105 ;;		_RDM_SET_CC
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           
  6110                           ;psect for function _RDM_Identify_Switch
  6111  057C                     _RDM_Identify_Switch:	
  6112                           
  6113                           ;Timer.c: 195: DMX_Flags.RDM_Identify_Device=~DMX_Flags.RDM_Identify_Device;
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _RDM_Identify_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6117  057C  3008               	movlw	8
  6118  057D  06F7               	xorwf	_DMX_Flags+1,f	;volatile
  6119                           
  6120                           ;Timer.c: 196: TMR2IE=DMX_Flags.RDM_Identify_Device;
  6121  057E  1DF7               	btfss	_DMX_Flags+1,3	;volatile
  6122  057F  2D83               	goto	u850
  6123  0580  0021               	movlb	1	; select bank1
  6124  0581  1491               	bsf	17,1	;volatile
  6125  0582  2D85               	goto	l2779
  6126  0583                     u850:	
  6127  0583  0021               	movlb	1	; select bank1
  6128  0584  1091               	bcf	17,1	;volatile
  6129  0585                     l2779:	
  6130                           
  6131                           ;Timer.c: 197: if(!DMX_Flags.RDM_Identify_Device){
  6132  0585  19F7               	btfsc	_DMX_Flags+1,3	;volatile
  6133  0586  0008               	return
  6134                           
  6135                           ;Timer.c: 198: PWM_TurnOff();
  6136  0587  2BBE               	ljmp	l2703
  6137  0588                     __end_of_RDM_Identify_Switch:	
  6138  0588                     __ptext5:	
  6139 ;; *************** function _RDM_discovery_CC *****************
  6140 ;; Defined at:
  6141 ;;		line 111 in file "RDM_Read.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      void 
  6148 ;; Registers used:
  6149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6150 ;; Tracked objects:
  6151 ;;		On entry : 1E/1
  6152 ;;		On exit  : 1E/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6155 ;;      Params:         0       0       0       0       0       0       0       0
  6156 ;;      Locals:         0       0       0       0       0       0       0       0
  6157 ;;      Temps:          0       4       0       0       0       0       0       0
  6158 ;;      Totals:         0       4       0       0       0       0       0       0
  6159 ;;Total ram usage:        4 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; Hardware stack levels required when called:    4
  6162 ;; This function calls:
  6163 ;;		_PD_Read_u16ptr
  6164 ;;		_PD_Read_u32ptr
  6165 ;;		_RDM_TXSTART
  6166 ;; This function is called by:
  6167 ;;		_RDM_rx_loop
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _RDM_discovery_CC
  6173  0588                     _RDM_discovery_CC:	
  6174  0588                     l3775:	
  6175                           ;incstack = 0
  6176                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6177                           
  6178                           
  6179                           ;RDM_Read.c: 112: switch (RX_RDM_Data.PID) {
  6180  0588  2DED               	goto	l3837
  6181  0589                     l3777:	
  6182                           
  6183                           ;RDM_Read.c: 114: DMX_Flags.RDMcheckUID_flag = 1;
  6184  0589  0877               	movf	_DMX_Flags+1,w	;volatile
  6185  058A  39FC               	andlw	-4
  6186  058B  3801               	iorlw	1
  6187  058C  00F7               	movwf	_DMX_Flags+1	;volatile
  6188                           
  6189                           ;RDM_Read.c: 115: if (!DMX_Flags.RDMmute) {
  6190  058D  1977               	btfsc	_DMX_Flags+1,2	;volatile
  6191  058E  0008               	return
  6192                           
  6193                           ;RDM_Read.c: 116: DMX_Flags.RDMcheckUID_flag = 1;
  6194  058F  273F  3180         	fcall	PL52	;call to abstracted procedure
  6195                           
  6196                           ;RDM_Read.c: 117: PD_Manu_ptr =PD_Read_u16ptr();
  6197  0591  25FF  3180         	fcall	_PD_Read_u16ptr
  6198  0593  273A  3180         	fcall	PL50	;call to abstracted procedure
  6199                           
  6200                           ;RDM_Read.c: 118: PD_ID_ptr = PD_Read_u32ptr();
  6201  0595  2616  3180         	fcall	_PD_Read_u32ptr
  6202                           
  6203                           ;RDM_Read.c: 120: if (*PD_Manu_ptr < 0x08BA) {
  6204  0597  2695  3180         	fcall	PL6	;call to abstracted procedure
  6205  0599  30BA               	movlw	186
  6206  059A  1903               	skipnz
  6207  059B  0269               	subwf	??_RDM_discovery_CC,w
  6208  059C  1803               	skipnc
  6209  059D  2DAB               	goto	l3797
  6210                           
  6211                           ;RDM_Read.c: 121: DMX_Flags.RDMcheckUID_flag++;
  6212                           
  6213                           ;RDM_Read.c: 122: if (*PD_Manu_ptr == 0x08BA && *PD_ID_ptr > 0x12345678) {
  6214  059E  2676  3180         	fcall	PL2	;call to abstracted procedure
  6215  05A0  1D03               	btfss	3,2
  6216  05A1  2DAB               	goto	l3797
  6217  05A2  26E3  3180         	fcall	PL22	;call to abstracted procedure
  6218  05A4  3079               	movlw	121
  6219  05A5  26A4  3180         	fcall	PL8	;call to abstracted procedure
  6220  05A7  1C03               	btfss	3,0
  6221  05A8  2DAB               	goto	l3797
  6222                           
  6223                           ;RDM_Read.c: 123: DMX_Flags.RDMcheckUID_flag = 0;
  6224  05A9  30FC               	movlw	-4
  6225  05AA  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6226  05AB                     l3797:	
  6227                           
  6228                           ;RDM_Read.c: 124: }
  6229                           ;RDM_Read.c: 125: }
  6230                           ;RDM_Read.c: 126: PD_Manu_ptr = PD_Read_u16ptr();
  6231  05AB  25FF  3180         	fcall	_PD_Read_u16ptr
  6232  05AD  273A  3180         	fcall	PL50	;call to abstracted procedure
  6233                           
  6234                           ;RDM_Read.c: 127: PD_ID_ptr = PD_Read_u32ptr();
  6235  05AF  2616  3180         	fcall	_PD_Read_u32ptr
  6236                           
  6237                           ;RDM_Read.c: 128: if (*PD_Manu_ptr > 0x08BA) {
  6238  05B1  2695  3180         	fcall	PL6	;call to abstracted procedure
  6239  05B3  30BB               	movlw	187
  6240  05B4  1903               	skipnz
  6241  05B5  0269               	subwf	??_RDM_discovery_CC,w
  6242  05B6  1C03               	skipc
  6243  05B7  2DC5               	goto	l1242
  6244                           
  6245                           ;RDM_Read.c: 129: DMX_Flags.RDMcheckUID_flag++;
  6246                           
  6247                           ;RDM_Read.c: 130: if (*PD_Manu_ptr == 0x08BA && *PD_ID_ptr < 0x12345678) {
  6248  05B8  2676  3180         	fcall	PL2	;call to abstracted procedure
  6249  05BA  1D03               	btfss	3,2
  6250  05BB  2DC5               	goto	l1242
  6251  05BC  26E3  3180         	fcall	PL22	;call to abstracted procedure
  6252  05BE  3078               	movlw	120
  6253  05BF  26A4  3180         	fcall	PL8	;call to abstracted procedure
  6254  05C1  1803               	btfsc	3,0
  6255  05C2  2DC5               	goto	l1242
  6256                           
  6257                           ;RDM_Read.c: 131: DMX_Flags.RDMcheckUID_flag = 0;
  6258  05C3  30FC               	movlw	-4
  6259  05C4  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6260  05C5                     l1242:	
  6261                           
  6262                           ;RDM_Read.c: 132: }
  6263                           ;RDM_Read.c: 133: }
  6264                           ;RDM_Read.c: 134: if (DMX_Flags.RDMcheckUID_flag == 3) {
  6265  05C5  0877               	movf	_DMX_Flags+1,w	;volatile
  6266  05C6  3903               	andlw	3
  6267  05C7  3A03               	xorlw	3
  6268  05C8  1D03               	skipz
  6269  05C9  0008               	return
  6270                           
  6271                           ;RDM_Read.c: 136: LATC3 = 1;
  6272  05CA  0022               	movlb	2	; select bank2
  6273  05CB  158E               	bsf	14,3	;volatile
  6274                           
  6275                           ;RDM_Read.c: 138: BytePtr= &DISCOVERY_RDM_Data[23];
  6276  05CC  3063               	movlw	low (_DISCOVERY_RDM_Data+23)
  6277  05CD  0020               	movlb	0	; select bank0
  6278  05CE  00B3               	movwf	_BytePtr
  6279  05CF  3001               	movlw	high (_DISCOVERY_RDM_Data+23)
  6280  05D0  00B4               	movwf	_BytePtr+1
  6281                           
  6282                           ;RDM_Read.c: 139: TxCount = 0;
  6283  05D1  01B5               	clrf	_TxCount
  6284  05D2  01B6               	clrf	_TxCount+1
  6285                           
  6286                           ;RDM_Read.c: 140: TxState = TX_DISCOVERY;
  6287  05D3  01C7               	clrf	_TxState	;volatile
  6288                           
  6289                           ;RDM_Read.c: 141: RCIE = 0;
  6290  05D4  0021               	movlb	1	; select bank1
  6291  05D5  1291               	bcf	17,5	;volatile
  6292                           
  6293                           ;RDM_Read.c: 143: TXEN = 1;
  6294  05D6  0023               	movlb	3	; select bank3
  6295  05D7  169E               	bsf	30,5	;volatile
  6296                           
  6297                           ;RDM_Read.c: 145: TMR1 = 0xFFE5;
  6298  05D8  30FF               	movlw	255
  6299  05D9  0020               	movlb	0	; select bank0
  6300  05DA  0097               	movwf	23	;volatile
  6301  05DB  30E5               	movlw	229
  6302  05DC  0096               	movwf	22	;volatile
  6303                           
  6304                           ;RDM_Read.c: 146: TimerState = TIMER_DISC_MAB;
  6305  05DD  3005               	movlw	5
  6306  05DE  00C3               	movwf	_TimerState	;volatile
  6307  05DF  0008               	return
  6308  05E0                     l1246:	
  6309                           ;RDM_Read.c: 150: case 0x0002:
  6310                           
  6311                           
  6312                           ;RDM_Read.c: 151: DMX_Flags.RDMmute = 1;
  6313  05E0  1577               	bsf	_DMX_Flags+1,2	;volatile
  6314                           
  6315                           ;RDM_Read.c: 152: TX_RDM_Data.PDL=2;
  6316  05E1  3002               	movlw	2
  6317  05E2  00D9               	movwf	(_TX_RDM_Data^(0+128)+2)	;volatile
  6318                           
  6319                           ;RDM_Read.c: 153: PD.u16[((100>>1)>>1)-1] = 0;
  6320  05E3  30BC               	movlw	188
  6321  05E4  0086               	movwf	6
  6322  05E5  3021               	movlw	33
  6323  05E6  0087               	movwf	7
  6324  05E7  3000               	movlw	0
  6325  05E8  3FC0               	movwi [0]fsr1
  6326  05E9  3FC1               	movwi [1]fsr1
  6327  05EA                     l3831:	
  6328                           
  6329                           ;RDM_Read.c: 154: RDM_TXSTART();
  6330  05EA  2E2F               	ljmp	l2795
  6331  05EB                     l1247:	
  6332                           ;RDM_Read.c: 156: case 0x0003:
  6333                           
  6334                           ;RDM_Read.c: 155: break;
  6335                           
  6336                           
  6337                           ;RDM_Read.c: 157: DMX_Flags.RDMmute = 0;
  6338  05EB  1177               	bcf	_DMX_Flags+1,2	;volatile
  6339  05EC  2DEA               	goto	l3831
  6340  05ED                     l3837:	
  6341                           
  6342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6343                           ; Switch size 1, requested type "space"
  6344                           ; Number of cases is 1, Range of values is 0 to 0
  6345                           ; switch strategies available:
  6346                           ; Name         Instructions Cycles
  6347                           ; simple_byte            4     3 (average)
  6348                           ; direct_byte            8     6 (fixed)
  6349                           ; jumptable            260     6 (fixed)
  6350                           ;	Chosen strategy is simple_byte
  6351  05ED  0021               	movlb	1	; select bank1
  6352  05EE  0824               	movf	((_RX_RDM_Data+1)^(0+128)+3),w	;volatile
  6353  05EF  3A00               	xorlw	0	; case 0
  6354  05F0  1903               	skipnz
  6355  05F1  2DF3               	goto	l4363
  6356  05F2  2DFE               	goto	l1249
  6357  05F3                     l4363:	
  6358                           
  6359                           ; Switch size 1, requested type "space"
  6360                           ; Number of cases is 3, Range of values is 1 to 3
  6361                           ; switch strategies available:
  6362                           ; Name         Instructions Cycles
  6363                           ; simple_byte           10     6 (average)
  6364                           ; direct_byte           15     9 (fixed)
  6365                           ; jumptable            263     9 (fixed)
  6366                           ;	Chosen strategy is simple_byte
  6367  05F3  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  6368  05F4  3A01               	xorlw	1	; case 1
  6369  05F5  1903               	skipnz
  6370  05F6  2D89               	goto	l3777
  6371  05F7  3A03               	xorlw	3	; case 2
  6372  05F8  1903               	skipnz
  6373  05F9  2DE0               	goto	l1246
  6374  05FA  3A01               	xorlw	1	; case 3
  6375  05FB  1903               	skipnz
  6376  05FC  2DEB               	goto	l1247
  6377  05FD  2DFE               	goto	l1249
  6378  05FE                     l1249:	
  6379  05FE  0008               	return
  6380  05FF                     __end_of_RDM_discovery_CC:	
  6381  05FF                     __ptext11:	
  6382 ;; *************** function _PD_Read_u16ptr *****************
  6383 ;; Defined at:
  6384 ;;		line 227 in file "RDM_Read.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  2    1[COMMON] PTR unsigned int 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 1E/1
  6395 ;;		On exit  : 1F/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6398 ;;      Params:         0       0       0       0       0       0       0       0
  6399 ;;      Locals:         0       0       0       0       0       0       0       0
  6400 ;;      Temps:          0       3       0       0       0       0       0       0
  6401 ;;      Totals:         0       3       0       0       0       0       0       0
  6402 ;;Total ram usage:        3 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    2
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_RDM_SET_CC
  6409 ;;		_RDM_discovery_CC
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _PD_Read_u16ptr
  6415  05FF                     _PD_Read_u16ptr:	
  6416                           
  6417                           ;RDM_Read.c: 228: PackCount+=2;
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _PD_Read_u16ptr: [wreg+status,2+status,0]
  6421  05FF  0AF8               	incf	_PackCount,f
  6422  0600  0AF8               	incf	_PackCount,f	;volatile
  6423                           
  6424                           ;RDM_Read.c: 229: return &PD.u16[(100>>1)-(PackCount>>1)];
  6425  0601  3021               	movlw	33
  6426  0602  00F2               	movwf	?_PD_Read_u16ptr+1
  6427  0603  308C               	movlw	140
  6428  0604  00F1               	movwf	?_PD_Read_u16ptr
  6429  0605  0878               	movf	_PackCount,w	;volatile
  6430  0606  0020               	movlb	0	; select bank0
  6431  0607  00D0               	movwf	??_PD_Read_u16ptr
  6432  0608  36D0               	lsrf	??_PD_Read_u16ptr,f
  6433  0609  01D2               	clrf	??_PD_Read_u16ptr+2
  6434  060A  0850               	movf	??_PD_Read_u16ptr,w
  6435  060B  3C32               	sublw	50
  6436  060C  00D1               	movwf	??_PD_Read_u16ptr+1
  6437  060D  1C03               	skipc
  6438  060E  03D2               	decf	??_PD_Read_u16ptr+2,f
  6439  060F  35D1               	lslf	??_PD_Read_u16ptr+1,f
  6440  0610  0DD2               	rlf	??_PD_Read_u16ptr+2,f
  6441  0611  0851               	movf	??_PD_Read_u16ptr+1,w
  6442  0612  07F1               	addwf	?_PD_Read_u16ptr,f
  6443  0613  0852               	movf	??_PD_Read_u16ptr+2,w
  6444  0614  3DF2               	addwfc	?_PD_Read_u16ptr+1,f
  6445  0615  0008               	return
  6446  0616                     __end_of_PD_Read_u16ptr:	
  6447  0616                     __ptext6:	
  6448 ;; *************** function _PD_Read_u32ptr *****************
  6449 ;; Defined at:
  6450 ;;		line 231 in file "RDM_Read.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;		None
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;		None
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  2    1[COMMON] PTR unsigned long 
  6457 ;; Registers used:
  6458 ;;		wreg, status,2, status,0
  6459 ;; Tracked objects:
  6460 ;;		On entry : 1F/0
  6461 ;;		On exit  : 1F/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6464 ;;      Params:         0       0       0       0       0       0       0       0
  6465 ;;      Locals:         0       0       0       0       0       0       0       0
  6466 ;;      Temps:          0       3       0       0       0       0       0       0
  6467 ;;      Totals:         0       3       0       0       0       0       0       0
  6468 ;;Total ram usage:        3 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    2
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_RDM_discovery_CC
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           
  6479                           ;psect for function _PD_Read_u32ptr
  6480  0616                     _PD_Read_u32ptr:	
  6481                           
  6482                           ;RDM_Read.c: 232: PackCount+=4;
  6483                           
  6484                           ;incstack = 0
  6485                           ; Regs used in _PD_Read_u32ptr: [wreg+status,2+status,0]
  6486  0616  3004               	movlw	4
  6487  0617  07F8               	addwf	_PackCount,f	;volatile
  6488                           
  6489                           ;RDM_Read.c: 233: return &PD.u32[(100>>2)-(PackCount>>2)];
  6490  0618  3021               	movlw	33
  6491  0619  00F2               	movwf	?_PD_Read_u32ptr+1
  6492  061A  308C               	movlw	140
  6493  061B  00F1               	movwf	?_PD_Read_u32ptr
  6494  061C  0878               	movf	_PackCount,w	;volatile
  6495  061D  00D0               	movwf	??_PD_Read_u32ptr
  6496  061E  36D0               	lsrf	??_PD_Read_u32ptr,f
  6497  061F  36D0               	lsrf	??_PD_Read_u32ptr,f
  6498  0620  01D2               	clrf	??_PD_Read_u32ptr+2
  6499  0621  0850               	movf	??_PD_Read_u32ptr,w
  6500  0622  3C19               	sublw	25
  6501  0623  00D1               	movwf	??_PD_Read_u32ptr+1
  6502  0624  1C03               	skipc
  6503  0625  03D2               	decf	??_PD_Read_u32ptr+2,f
  6504  0626  35D1               	lslf	??_PD_Read_u32ptr+1,f
  6505  0627  0DD2               	rlf	??_PD_Read_u32ptr+2,f
  6506  0628  35D1               	lslf	??_PD_Read_u32ptr+1,f
  6507  0629  0DD2               	rlf	??_PD_Read_u32ptr+2,f
  6508  062A  0851               	movf	??_PD_Read_u32ptr+1,w
  6509  062B  07F1               	addwf	?_PD_Read_u32ptr,f
  6510  062C  0852               	movf	??_PD_Read_u32ptr+2,w
  6511  062D  3DF2               	addwfc	?_PD_Read_u32ptr+1,f
  6512  062E  0008               	return
  6513  062F                     __end_of_PD_Read_u32ptr:	
  6514  062F                     __ptext14:	
  6515 ;; *************** function _RDM_TXSTART *****************
  6516 ;; Defined at:
  6517 ;;		line 167 in file "RDM_Read.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 1C/1
  6528 ;;		On exit  : 1F/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6531 ;;      Params:         0       0       0       0       0       0       0       0
  6532 ;;      Locals:         0       0       0       0       0       0       0       0
  6533 ;;      Temps:          1       0       0       0       0       0       0       0
  6534 ;;      Totals:         1       0       0       0       0       0       0       0
  6535 ;;Total ram usage:        1 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    3
  6538 ;; This function calls:
  6539 ;;		_RDM_get_checkSum
  6540 ;;		_RDM_tx_TimerBreak
  6541 ;;		_TX_RDM_Response_Set
  6542 ;; This function is called by:
  6543 ;;		_RDM_GET_CC
  6544 ;;		_RDM_SET_CC
  6545 ;;		_RDM_discovery_CC
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _RDM_TXSTART
  6551  062F                     _RDM_TXSTART:	
  6552  062F                     l2795:	
  6553                           ;incstack = 0
  6554                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6555                           
  6556                           
  6557                           ;RDM_Read.c: 169: TX_RDM_Response_Set();
  6558  062F  264B  3180         	fcall	_TX_RDM_Response_Set
  6559                           
  6560                           ;RDM_Read.c: 170: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,(100>>1));
  6561  0631  30D7               	movlw	low _TX_RDM_Data
  6562  0632  0086               	movwf	6
  6563  0633  3000               	movlw	high _TX_RDM_Data
  6564  0634  26DD  3180         	fcall	PL20	;call to abstracted procedure
  6565  0636  00F4               	movwf	??_RDM_TXSTART
  6566  0637                     u880:	
  6567  0637  0016               	moviw fsr1++
  6568  0638  001A               	movwi fsr0++
  6569  0639  0BF4               	decfsz	??_RDM_TXSTART,f
  6570  063A  2E37               	goto	u880
  6571  063B  3032               	movlw	50
  6572  063C  0020               	movlb	0	; select bank0
  6573  063D  00E8               	movwf	RDM_get_checkSum@len
  6574  063E  2374  3180         	fcall	_RDM_get_checkSum
  6575  0640  0851               	movf	?_RDM_get_checkSum+1,w
  6576  0641  0021               	movlb	1	; select bank1
  6577  0642  00D8               	movwf	(_TX_RDM_Data+1)^(0+128)	;volatile
  6578  0643  0020               	movlb	0	; select bank0
  6579  0644  0850               	movf	?_RDM_get_checkSum,w
  6580  0645  0021               	movlb	1	; select bank1
  6581  0646  00D7               	movwf	_TX_RDM_Data^(0+128)	;volatile
  6582                           
  6583                           ;RDM_Read.c: 171: TxState = TX_START;
  6584  0647  3001               	movlw	1
  6585  0648  0020               	movlb	0	; select bank0
  6586  0649  00C7               	movwf	_TxState	;volatile
  6587                           
  6588                           ;RDM_Read.c: 172: RDM_tx_TimerBreak();
  6589  064A  2E69               	ljmp	l2737
  6590  064B                     __end_of_RDM_TXSTART:	
  6591  064B                     __ptext15:	
  6592 ;; *************** function _TX_RDM_Response_Set *****************
  6593 ;; Defined at:
  6594 ;;		line 175 in file "RDM_Read.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      void 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6603 ;; Tracked objects:
  6604 ;;		On entry : 1C/1
  6605 ;;		On exit  : 1F/1
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6608 ;;      Params:         0       0       0       0       0       0       0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0
  6611 ;;      Totals:         0       0       0       0       0       0       0       0
  6612 ;;Total ram usage:        0 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    2
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_RDM_TXSTART
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _TX_RDM_Response_Set
  6624  064B                     _TX_RDM_Response_Set:	
  6625                           
  6626                           ;RDM_Read.c: 176: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  6630  064B  30AB               	movlw	((low (_RX_RDM_Data| 0))& (0+255)+11)
  6631  064C  0086               	movwf	6
  6632  064D  0187               	clrf	7
  6633  064E  3F40               	moviw [0]fsr1
  6634  064F  0021               	movlb	1	; select bank1
  6635  0650  00E8               	movwf	(_TX_RDM_Data^(0+128)+17)	;volatile
  6636  0651  3F41               	moviw [1]fsr1
  6637  0652  00E9               	movwf	((_TX_RDM_Data+1)^(0+128)+17)	;volatile
  6638  0653  3F42               	moviw [2]fsr1
  6639  0654  00EA               	movwf	((_TX_RDM_Data+2)^(0+128)+17)	;volatile
  6640  0655  3F43               	moviw [3]fsr1
  6641  0656  00EB               	movwf	((_TX_RDM_Data+3)^(0+128)+17)	;volatile
  6642                           
  6643                           ;RDM_Read.c: 177: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  6644  0657  0830               	movf	((_RX_RDM_Data+1)^(0+128)+15),w	;volatile
  6645  0658  00ED               	movwf	((_TX_RDM_Data+1)^(0+128)+21)	;volatile
  6646  0659  082F               	movf	(_RX_RDM_Data^(0+128)+15),w	;volatile
  6647  065A  00EC               	movwf	(_TX_RDM_Data^(0+128)+21)	;volatile
  6648                           
  6649                           ;RDM_Read.c: 178: TX_RDM_Data.TN=RX_RDM_Data.TN;
  6650  065B  082A               	movf	(_RX_RDM_Data^(0+128)+10),w	;volatile
  6651  065C  00E1               	movwf	(_TX_RDM_Data^(0+128)+10)	;volatile
  6652                           
  6653                           ;RDM_Read.c: 179: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  6654  065D  0825               	movf	(_RX_RDM_Data^(0+128)+5),w	;volatile
  6655  065E  3E01               	addlw	1
  6656  065F  00DC               	movwf	(_TX_RDM_Data^(0+128)+5)	;volatile
  6657                           
  6658                           ;RDM_Read.c: 180: TX_RDM_Data.PID=RX_RDM_Data.PID;
  6659  0660  0824               	movf	((_RX_RDM_Data+1)^(0+128)+3),w	;volatile
  6660  0661  00DB               	movwf	((_TX_RDM_Data+1)^(0+128)+3)	;volatile
  6661  0662  0823               	movf	(_RX_RDM_Data^(0+128)+3),w	;volatile
  6662  0663  00DA               	movwf	(_TX_RDM_Data^(0+128)+3)	;volatile
  6663                           
  6664                           ;RDM_Read.c: 181: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  6665  0664  0859               	movf	(_TX_RDM_Data^(0+128)+2),w	;volatile
  6666  0665  3E18               	addlw	24
  6667  0666  00EE               	movwf	(_TX_RDM_Data^(0+128)+23)	;volatile
  6668                           
  6669                           ;RDM_Read.c: 182: TX_RDM_Data.PORT=0x00;
  6670  0667  01E0               	clrf	(_TX_RDM_Data^(0+128)+9)	;volatile
  6671  0668  0008               	return
  6672  0669                     __end_of_TX_RDM_Response_Set:	
  6673  0669                     __ptext16:	
  6674 ;; *************** function _RDM_tx_TimerBreak *****************
  6675 ;; Defined at:
  6676 ;;		line 174 in file "RDM.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg
  6685 ;; Tracked objects:
  6686 ;;		On entry : 1F/0
  6687 ;;		On exit  : 1F/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6690 ;;      Params:         0       0       0       0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0
  6693 ;;      Totals:         0       0       0       0       0       0       0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    2
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_RDM_TXSTART
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _RDM_tx_TimerBreak
  6706  0669                     _RDM_tx_TimerBreak:	
  6707  0669                     l2737:	
  6708                           ;incstack = 0
  6709                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  6710                           
  6711                           
  6712                           ;RDM.c: 175: TMR1 = 0xFFcd;
  6713  0669  30FF               	movlw	255
  6714  066A  0097               	movwf	23	;volatile
  6715  066B  30CD               	movlw	205
  6716  066C  0096               	movwf	22	;volatile
  6717                           
  6718                           ;RDM.c: 176: TimerState = TIMER_RDM_MBB;
  6719  066D  3003               	movlw	3
  6720  066E  00C3               	movwf	_TimerState	;volatile
  6721                           
  6722                           ;RDM.c: 177: LATC3 = 1;
  6723  066F  0022               	movlb	2	; select bank2
  6724  0670  158E               	bsf	14,3	;volatile
  6725                           
  6726                           ;RDM.c: 178: TX_PD_Flag=1;
  6727  0671  3001               	movlw	1
  6728  0672  0020               	movlb	0	; select bank0
  6729  0673  00AB               	movwf	_TX_PD_Flag	;volatile
  6730  0674  01AC               	clrf	_TX_PD_Flag+1	;volatile
  6731  0675  0008               	return
  6732  0676                     __end_of_RDM_tx_TimerBreak:	
  6733  0676                     PL2:	
  6734  0676  0877               	movf	_DMX_Flags+1,w	;volatile
  6735  0677  3903               	andlw	3
  6736  0678  00E9               	movwf	??_RDM_discovery_CC
  6737  0679  0AE9               	incf	??_RDM_discovery_CC,f
  6738  067A  0877               	movf	_DMX_Flags+1,w	;volatile
  6739  067B  0669               	xorwf	??_RDM_discovery_CC,w
  6740  067C  39FC               	andlw	-4
  6741  067D  0669               	xorwf	??_RDM_discovery_CC,w
  6742  067E  00F7               	movwf	_DMX_Flags+1	;volatile
  6743  067F  0831               	movf	_PD_Manu_ptr,w
  6744  0680  0086               	movwf	6
  6745  0681  0832               	movf	_PD_Manu_ptr+1,w
  6746  0682  0087               	movwf	7
  6747  0683  0016               	moviw fsr1++
  6748  0684  3ABA               	xorlw	186
  6749  0685  00E9               	movwf	??_RDM_discovery_CC
  6750  0686  0016               	moviw fsr1++
  6751  0687  3A08               	xorlw	8
  6752  0688  04E9               	iorwf	??_RDM_discovery_CC,f
  6753  0689  0008               	return
  6754  068A                     __end_ofPL2:	
  6755  068A                     PL4:	
  6756  068A  0086               	movwf	6
  6757  068B  0187               	clrf	7
  6758  068C  3F40               	moviw [0]fsr1
  6759  068D  00F4               	movwf	??_PWM_TurnOff
  6760  068E  3F41               	moviw [1]fsr1
  6761  068F  00F5               	movwf	??_PWM_TurnOff+1
  6762  0690  0874               	movf	??_PWM_TurnOff,w
  6763  0691  0086               	movwf	6
  6764  0692  0875               	movf	??_PWM_TurnOff+1,w
  6765  0693  0087               	movwf	7
  6766  0694  0008               	return
  6767  0695                     __end_ofPL4:	
  6768  0695                     PL6:	
  6769  0695  0872               	movf	?_PD_Read_u32ptr+1,w
  6770  0696  00B0               	movwf	_PD_ID_ptr+1
  6771  0697  0871               	movf	?_PD_Read_u32ptr,w
  6772  0698  00AF               	movwf	_PD_ID_ptr
  6773  0699  0831               	movf	_PD_Manu_ptr,w
  6774  069A  0086               	movwf	6
  6775  069B  0832               	movf	_PD_Manu_ptr+1,w
  6776  069C  0087               	movwf	7
  6777  069D  3F40               	moviw [0]fsr1
  6778  069E  00E9               	movwf	??_RDM_discovery_CC
  6779  069F  3F41               	moviw [1]fsr1
  6780  06A0  00EA               	movwf	??_RDM_discovery_CC+1
  6781  06A1  3008               	movlw	8
  6782  06A2  026A               	subwf	??_RDM_discovery_CC+1,w
  6783  06A3  0008               	return
  6784  06A4                     __end_ofPL6:	
  6785  06A4                     PL8:	
  6786  06A4  0269               	subwf	??_RDM_discovery_CC,w
  6787  06A5  3F41               	moviw [1]fsr1
  6788  06A6  00E9               	movwf	??_RDM_discovery_CC
  6789  06A7  3056               	movlw	86
  6790  06A8  3B69               	subwfb	??_RDM_discovery_CC,w
  6791  06A9  3F42               	moviw [2]fsr1
  6792  06AA  00E9               	movwf	??_RDM_discovery_CC
  6793  06AB  3034               	movlw	52
  6794  06AC  3B69               	subwfb	??_RDM_discovery_CC,w
  6795  06AD  3F43               	moviw [3]fsr1
  6796  06AE  00E9               	movwf	??_RDM_discovery_CC
  6797  06AF  3012               	movlw	18
  6798  06B0  3B69               	subwfb	??_RDM_discovery_CC,w
  6799  06B1  0008               	return
  6800  06B2                     __end_ofPL8:	
  6801  06B2                     PL10:	
  6802  06B2  0086               	movwf	6
  6803  06B3  0187               	clrf	7
  6804  06B4  3F40               	moviw [0]fsr1
  6805  06B5  00D3               	movwf	??_PWM_TurnOn+3
  6806  06B6  3F41               	moviw [1]fsr1
  6807  06B7  00D4               	movwf	??_PWM_TurnOn+4
  6808  06B8  0853               	movf	??_PWM_TurnOn+3,w
  6809  06B9  0086               	movwf	6
  6810  06BA  0854               	movf	??_PWM_TurnOn+4,w
  6811  06BB  0087               	movwf	7
  6812  06BC  0852               	movf	??_PWM_TurnOn+2,w
  6813  06BD  0081               	movwf	1
  6814  06BE  0008               	return
  6815  06BF                     __end_ofPL10:	
  6816  06BF                     PL12:	
  6817  06BF  0086               	movwf	6
  6818  06C0  3001               	movlw	1	; select bank2/3
  6819  06C1  0087               	movwf	7
  6820  06C2  0846               	movf	_PDCount,w
  6821  06C3  3E7F               	addlw	low (_UID| (0+32768))
  6822  06C4  0084               	movwf	4
  6823  06C5  3089               	movlw	high (_UID| (0+32768))
  6824  06C6  1803               	skipnc
  6825  06C7  3E01               	addlw	1
  6826  06C8  0085               	movwf	5
  6827  06C9  0800               	movf	0,w	;code access
  6828  06CA  0008               	return
  6829  06CB                     __end_ofPL12:	
  6830  06CB                     PL16:	
  6831  06CB  0086               	movwf	6
  6832  06CC  3F40               	moviw [0]fsr1
  6833  06CD  00D3               	movwf	??_DMX_loop+3
  6834  06CE  3F41               	moviw [1]fsr1
  6835  06CF  00D4               	movwf	??_DMX_loop+4
  6836  06D0  0853               	movf	??_DMX_loop+3,w
  6837  06D1  0086               	movwf	6
  6838  06D2  0854               	movf	??_DMX_loop+4,w
  6839  06D3  0087               	movwf	7
  6840  06D4  0852               	movf	??_DMX_loop+2,w
  6841  06D5  0081               	movwf	1
  6842  06D6  0008               	return
  6843  06D7                     __end_ofPL16:	
  6844  06D7                     PL18:	
  6845  06D7  3579               	lslf	_Addr,w
  6846  06D8  3EB8               	addlw	(low (_PWMLDCONptr| 0))& (0+255)
  6847  06D9  0086               	movwf	6
  6848  06DA  0187               	clrf	7
  6849  06DB  3F40               	moviw [0]fsr1
  6850  06DC  0008               	return
  6851  06DD                     __end_ofPL18:	
  6852  06DD                     PL20:	
  6853  06DD  0087               	movwf	7
  6854  06DE  3050               	movlw	low RDM_get_checkSum@Data
  6855  06DF  0084               	movwf	4
  6856  06E0  3000               	movlw	high RDM_get_checkSum@Data
  6857  06E1  0085               	movwf	5
  6858  06E2  3418               	retlw	24
  6859  06E3                     __end_ofPL20:	
  6860  06E3                     PL22:	
  6861  06E3  082F               	movf	_PD_ID_ptr,w
  6862  06E4  0086               	movwf	6
  6863  06E5  0830               	movf	_PD_ID_ptr+1,w
  6864  06E6  0087               	movwf	7
  6865  06E7  3F40               	moviw [0]fsr1
  6866  06E8  00E9               	movwf	??_RDM_discovery_CC
  6867  06E9  0008               	return
  6868  06EA                     __end_ofPL22:	
  6869  06EA                     PL24:	
  6870  06EA  0874               	movf	?_PD_Read_u8ptr,w
  6871  06EB  0086               	movwf	6
  6872  06EC  0875               	movf	?_PD_Read_u8ptr+1,w
  6873  06ED  0087               	movwf	7
  6874  06EE  0801               	movf	1,w
  6875  06EF  0020               	movlb	0	; select bank0
  6876  06F0  0008               	return
  6877  06F1                     __end_ofPL24:	
  6878  06F1                     PL26:	
  6879  06F1  3E8C               	addlw	140
  6880  06F2  0086               	movwf	6
  6881  06F3  3021               	movlw	33
  6882  06F4  0187               	clrf	7
  6883  06F5  3D87               	addwfc	7,f
  6884  06F6  0801               	movf	1,w
  6885  06F7  0008               	return
  6886  06F8                     __end_ofPL26:	
  6887  06F8                     PL28:	
  6888  06F8  0844               	movf	_PERSONALITY,w
  6889  06F9  00D0               	movwf	___wmul@multiplier
  6890  06FA  3005               	movlw	5
  6891  06FB  01D1               	clrf	___wmul@multiplier+1
  6892  06FC  00D2               	movwf	___wmul@multiplicand
  6893  06FD  01D3               	clrf	___wmul@multiplicand+1
  6894  06FE  0008               	return
  6895  06FF                     __end_ofPL28:	
  6896  06FF                     PL30:	
  6897  06FF  0850               	movf	??_DMX_init,w
  6898  0700  3FC0               	movwi [0]fsr1
  6899  0701  0851               	movf	??_DMX_init+1,w
  6900  0702  3FC1               	movwi [1]fsr1
  6901  0703  0852               	movf	??_DMX_init+2,w
  6902  0704  3FC2               	movwi [2]fsr1
  6903  0705  0008               	return
  6904  0706                     __end_ofPL30:	
  6905  0706                     PL32:	
  6906  0706  0879               	movf	_Addr,w
  6907  0707  3E4C               	addlw	(low (_RxData| 0))& (0+255)
  6908  0708  0086               	movwf	6
  6909  0709  0187               	clrf	7
  6910  070A  0801               	movf	1,w
  6911  070B  0008               	return
  6912  070C                     __end_ofPL32:	
  6913  070C                     PL34:	
  6914  070C  3D51               	addwfc	??_PWM_TurnOn+1,w
  6915  070D  0085               	movwf	5
  6916  070E  0800               	movf	0,w	;code access
  6917  070F  00D2               	movwf	??_PWM_TurnOn+2
  6918  0710  3579               	lslf	_Addr,w
  6919  0711  0008               	return
  6920  0712                     __end_ofPL34:	
  6921  0712                     PL36:	
  6922  0712  3D51               	addwfc	??_DMX_loop+1,w
  6923  0713  0085               	movwf	5
  6924  0714  0800               	movf	0,w	;code access
  6925  0715  00D2               	movwf	??_DMX_loop+2
  6926  0716  3579               	lslf	_Addr,w
  6927  0717  0008               	return
  6928  0718                     __end_ofPL36:	
  6929  0718                     PL38:	
  6930  0718  0875               	movf	?_PFM_Read+1,w
  6931  0719  0020               	movlb	0	; select bank0
  6932  071A  00BE               	movwf	_DMX_Address+1
  6933  071B  0874               	movf	?_PFM_Read,w
  6934  071C  00BD               	movwf	_DMX_Address
  6935  071D  0008               	return
  6936  071E                     __end_ofPL38:	
  6937  071E                     PL40:	
  6938  071E  01D1               	clrf	??_DMX_loop+1
  6939  071F  35D0               	lslf	??_DMX_loop,f
  6940  0720  0DD1               	rlf	??_DMX_loop+1,f
  6941  0721  0750               	addwf	??_DMX_loop,w
  6942  0722  0084               	movwf	4
  6943  0723  0008               	return
  6944  0724                     __end_ofPL40:	
  6945  0724                     PL42:	
  6946  0724  0086               	movwf	6
  6947  0725  3001               	movlw	1	; select bank2/3
  6948  0726  0087               	movwf	7
  6949  0727  0801               	movf	1,w
  6950  0728  07A7               	addwf	_checkSum,f
  6951  0729  0008               	return
  6952  072A                     __end_ofPL42:	
  6953  072A                     PL44:	
  6954  072A  01D1               	clrf	??_PWM_TurnOn+1
  6955  072B  35D0               	lslf	??_PWM_TurnOn,f
  6956  072C  0DD1               	rlf	??_PWM_TurnOn+1,f
  6957  072D  0750               	addwf	??_PWM_TurnOn,w
  6958  072E  0084               	movwf	4
  6959  072F  0008               	return
  6960  0730                     __end_ofPL44:	
  6961  0730                     PL46:	
  6962  0730  0087               	movwf	7
  6963  0731  3080               	movlw	128
  6964  0732  0081               	movwf	1
  6965  0733  0AF9               	incf	_Addr,f
  6966  0734  0008               	return
  6967  0735                     __end_ofPL46:	
  6968  0735                     PL48:	
  6969  0735  0081               	movwf	1
  6970  0736  30FE               	movlw	254
  6971  0737  00F4               	movwf	___bmul@multiplicand
  6972  0738  0846               	movf	_PDCount,w
  6973  0739  0008               	return
  6974  073A                     __end_ofPL48:	
  6975  073A                     PL50:	
  6976  073A  0872               	movf	?_PD_Read_u16ptr+1,w
  6977  073B  00B2               	movwf	_PD_Manu_ptr+1
  6978  073C  0871               	movf	?_PD_Read_u16ptr,w
  6979  073D  00B1               	movwf	_PD_Manu_ptr
  6980  073E  0008               	return
  6981  073F                     __end_ofPL50:	
  6982  073F                     PL52:	
  6983  073F  0877               	movf	_DMX_Flags+1,w	;volatile
  6984  0740  39FC               	andlw	-4
  6985  0741  3801               	iorlw	1
  6986  0742  00F7               	movwf	_DMX_Flags+1	;volatile
  6987  0743  0008               	return
  6988  0744                     __end_ofPL52:	
  6989  0744                     PL56:	
  6990  0744  083E               	movf	_DMX_Address+1,w
  6991  0745  00F5               	movwf	PD_write_u16@u16+1
  6992  0746  083D               	movf	_DMX_Address,w
  6993  0747  00F4               	movwf	PD_write_u16@u16
  6994  0748  0008               	return
  6995  0749                     __end_ofPL56:	
  6996                           
  6997                           	psect	swtext2
  6998  09D3                     __pswtext2:	
  6999  09D3                     i1S4375:	
  7000  09D3  3180  2835         	ljmp	i1l3423
  7001  09D5  3180  281C         	ljmp	i1l3407
  7002  09D7  3180  2833         	ljmp	i1l3421
  7003  09D9  3180  284D         	ljmp	i1l3433
  7004  09DB  3180  2871         	ljmp	i1l3451
  7005                           
  7006                           	psect	text32
  7007  0F24                     __ptext32:	
  7008 ;; *************** function _DMX_interrput *****************
  7009 ;; Defined at:
  7010 ;;		line 196 in file "DMX.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;		None
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  2  122[None  ] int 
  7017 ;; Registers used:
  7018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7024 ;;      Params:         0       0       0       0       0       0       0       0
  7025 ;;      Locals:         1       0       0       0       0       0       0       0
  7026 ;;      Temps:          2       0       0       0       0       0       0       0
  7027 ;;      Totals:         3       0       0       0       0       0       0       0
  7028 ;;Total ram usage:        3 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; This function calls:
  7031 ;;		Nothing
  7032 ;; This function is called by:
  7033 ;;		_isr
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _DMX_interrput
  7039  0F24                     _DMX_interrput:	
  7040                           
  7041                           ;DMX.c: 197: if (RCIE & RCIF) {
  7042                           
  7043                           ;incstack = 0
  7044                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  7045  0F24  3001               	movlw	1
  7046  0F25  0021               	movlb	1	; select bank1
  7047  0F26  1E91               	btfss	17,5	;volatile
  7048  0F27  3900               	andlw	0
  7049  0F28  0020               	movlb	0	; select bank0
  7050  0F29  1E91               	btfss	17,5	;volatile
  7051  0F2A  3900               	andlw	0
  7052  0F2B  1C09               	btfss	9,0
  7053  0F2C  0008               	return
  7054                           
  7055                           ;DMX.c: 198: volatile char RxDat;
  7056                           ;DMX.c: 199: if (FERR)
  7057  0F2D  0023               	movlb	3	; select bank3
  7058  0F2E  1D1D               	btfss	29,2	;volatile
  7059  0F2F  2FDF               	goto	i1l3323
  7060                           
  7061                           ;DMX.c: 200: {
  7062                           ;DMX.c: 201: RxDat = RCREG;
  7063  0F30  0819               	movf	25,w	;volatile
  7064  0F31  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7065                           
  7066                           ;DMX.c: 202: DMX_Flags.RxBreak = 1;
  7067  0F32  14F6               	bsf	_DMX_Flags,1	;volatile
  7068                           
  7069                           ;DMX.c: 203: RxState = WAIT_FOR_START;
  7070  0F33  3001               	movlw	1
  7071  0F34  0020               	movlb	0	; select bank0
  7072  0F35  00CA               	movwf	_RxState	;volatile
  7073                           
  7074                           ;DMX.c: 204: RxTimer = 0;
  7075  0F36  01B9               	clrf	_RxTimer	;volatile
  7076  0F37  01BA               	clrf	_RxTimer+1	;volatile
  7077  0F38  2FDF               	goto	i1l3323
  7078  0F39                     i1l3243:	
  7079                           
  7080                           ;DMX.c: 208: RxDat = RCREG;
  7081  0F39  0023               	movlb	3	; select bank3
  7082  0F3A  0819               	movf	25,w	;volatile
  7083  0F3B  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7084                           
  7085                           ;DMX.c: 209: break;
  7086  0F3C  2FEA               	goto	i1l3325
  7087  0F3D                     i1l451:	
  7088                           ;DMX.c: 210: case WAIT_FOR_START:
  7089                           
  7090                           
  7091                           ;DMX.c: 211: if (RCIF)
  7092  0F3D  1E91               	btfss	17,5	;volatile
  7093  0F3E  2FEA               	goto	i1l3325
  7094                           
  7095                           ;DMX.c: 212: {
  7096                           ;DMX.c: 213: RxDat = RCREG;
  7097  0F3F  0023               	movlb	3	; select bank3
  7098  0F40  0819               	movf	25,w	;volatile
  7099  0F41  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7100                           
  7101                           ;DMX.c: 214: if (RxDat == 0) {
  7102  0F42  0872               	movf	DMX_interrput@RxDat,w	;volatile
  7103  0F43  1D03               	btfss	3,2
  7104  0F44  2F4F               	goto	i1l3253
  7105                           
  7106                           ;DMX.c: 216: RxState = RX_DMX_READ_DATA;
  7107  0F45  3002               	movlw	2
  7108  0F46  0020               	movlb	0	; select bank0
  7109  0F47  00CA               	movwf	_RxState	;volatile
  7110                           
  7111                           ;DMX.c: 217: RxDataPtr = &RxData[0];
  7112  0F48  304C               	movlw	(low (_RxData| 0))& (0+255)
  7113  0F49  00CB               	movwf	_RxDataPtr
  7114                           
  7115                           ;DMX.c: 220: DMXPeriod = DMXPeriodConst;
  7116  0F4A  3001               	movlw	1
  7117  0F4B  00BB               	movwf	_RxAddrCount	;volatile
  7118  0F4C  01BC               	clrf	_RxAddrCount+1	;volatile
  7119                           
  7120                           ;DMX.c: 221: DMXPeriodConst = 0;
  7121  0F4D  01C9               	clrf	_DMXPeriodConst	;volatile
  7122                           
  7123                           ;DMX.c: 222: } else if (RxDat == 0xCC) {
  7124  0F4E  2FEA               	goto	i1l3325
  7125  0F4F                     i1l3253:	
  7126  0F4F  30CC               	movlw	204
  7127  0F50  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  7128  0F51  1D03               	btfss	3,2
  7129  0F52  2F57               	goto	i1l3257
  7130                           
  7131                           ;DMX.c: 224: RxState = RX_RDM_READ_SubStartCode;
  7132  0F53  3003               	movlw	3
  7133  0F54  0020               	movlb	0	; select bank0
  7134  0F55  00CA               	movwf	_RxState	;volatile
  7135                           
  7136                           ;DMX.c: 226: } else {
  7137  0F56  2FEA               	goto	i1l3325
  7138  0F57                     i1l3257:	
  7139                           
  7140                           ;DMX.c: 227: RxState = RX_WAIT_FOR_BREAK;
  7141  0F57  0020               	movlb	0	; select bank0
  7142  0F58  01CA               	clrf	_RxState	;volatile
  7143  0F59  2FEA               	goto	i1l3325
  7144  0F5A                     i1l3259:	
  7145                           
  7146                           ;DMX.c: 232: RxDat = RCREG;
  7147  0F5A  0023               	movlb	3	; select bank3
  7148  0F5B  0819               	movf	25,w	;volatile
  7149  0F5C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7150                           
  7151                           ;DMX.c: 233: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  7152  0F5D  0020               	movlb	0	; select bank0
  7153  0F5E  083E               	movf	_DMX_Address+1,w
  7154  0F5F  023C               	subwf	_RxAddrCount+1,w	;volatile
  7155  0F60  1D03               	skipz
  7156  0F61  2F64               	goto	u132_25
  7157  0F62  083D               	movf	_DMX_Address,w
  7158  0F63  023B               	subwf	_RxAddrCount,w	;volatile
  7159  0F64                     u132_25:	
  7160  0F64  1C03               	skipc
  7161  0F65  2F70               	goto	i1l3267
  7162  0F66  083D               	movf	_DMX_Address,w
  7163  0F67  043E               	iorwf	_DMX_Address+1,w
  7164  0F68  1903               	btfsc	3,2
  7165  0F69  2F70               	goto	i1l3267
  7166                           
  7167                           ;DMX.c: 234: {
  7168                           ;DMX.c: 235: *RxDataPtr = RxDat;
  7169  0F6A  084B               	movf	_RxDataPtr,w
  7170  0F6B  0086               	movwf	6
  7171  0F6C  0187               	clrf	7
  7172  0F6D  0872               	movf	DMX_interrput@RxDat,w	;volatile
  7173  0F6E  0081               	movwf	1
  7174                           
  7175                           ;DMX.c: 236: RxDataPtr++;
  7176  0F6F  0ACB               	incf	_RxDataPtr,f
  7177  0F70                     i1l3267:	
  7178                           
  7179                           ;DMX.c: 237: }
  7180                           ;DMX.c: 238: RxAddrCount++;
  7181  0F70  0ABB               	incf	_RxAddrCount,f	;volatile
  7182  0F71  1903               	skipnz
  7183  0F72  0ABC               	incf	_RxAddrCount+1,f	;volatile
  7184                           
  7185                           ;DMX.c: 240: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  7186  0F73  083D               	movf	_DMX_Address,w
  7187  0F74  3E04               	addlw	4
  7188  0F75  00F0               	movwf	??_DMX_interrput
  7189  0F76  3000               	movlw	0
  7190  0F77  3D3E               	addwfc	_DMX_Address+1,w
  7191  0F78  00F1               	movwf	??_DMX_interrput+1
  7192  0F79  023C               	subwf	_RxAddrCount+1,w	;volatile
  7193  0F7A  1D03               	skipz
  7194  0F7B  2F7E               	goto	u134_25
  7195  0F7C  0870               	movf	??_DMX_interrput,w
  7196  0F7D  023B               	subwf	_RxAddrCount,w	;volatile
  7197  0F7E                     u134_25:	
  7198  0F7E  1C03               	skipc
  7199  0F7F  2FEA               	goto	i1l3325
  7200  0F80  083D               	movf	_DMX_Address,w
  7201  0F81  043E               	iorwf	_DMX_Address+1,w
  7202  0F82  1903               	btfsc	3,2
  7203  0F83  2FEA               	goto	i1l3325
  7204                           
  7205                           ;DMX.c: 241: DMX_Flags.RxNew = 1;
  7206  0F84  1476               	bsf	_DMX_Flags,0	;volatile
  7207                           
  7208                           ;DMX.c: 242: RxState = RX_WAIT_FOR_BREAK;
  7209                           
  7210                           ;DMX.c: 243: RxTimer = 0;
  7211                           
  7212                           ;DMX.c: 244: DMX_Flags.RxTimeout = 0;
  7213  0F85  27FB  318F         	fcall	PL54	;call to abstracted procedure
  7214  0F87  2FEA               	goto	i1l3325
  7215  0F88                     i1l3279:	
  7216                           
  7217                           ;DMX.c: 248: RxDat = RCREG;
  7218  0F88  0023               	movlb	3	; select bank3
  7219  0F89  0819               	movf	25,w	;volatile
  7220  0F8A  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7221                           
  7222                           ;DMX.c: 249: if (RxDat == 0x01)
  7223  0F8B  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  7224  0F8C  2FEA               	goto	i1l3325
  7225                           
  7226                           ;DMX.c: 250: {
  7227                           ;DMX.c: 251: RxState = RX_RDM_READ_DATA;
  7228  0F8D  3004               	movlw	4
  7229  0F8E  0020               	movlb	0	; select bank0
  7230  0F8F  00CA               	movwf	_RxState	;volatile
  7231                           
  7232                           ;DMX.c: 252: PackCount = 23;
  7233  0F90  3017               	movlw	23
  7234  0F91  00F8               	movwf	_PackCount	;volatile
  7235                           
  7236                           ;DMX.c: 253: PD_Flag = 0;
  7237  0F92  01AD               	clrf	_PD_Flag	;volatile
  7238  0F93  2FDB               	goto	L3
  7239  0F94                     i1l3287:	
  7240                           
  7241                           ;DMX.c: 258: RxDat = RCREG;
  7242  0F94  0023               	movlb	3	; select bank3
  7243  0F95  0819               	movf	25,w	;volatile
  7244  0F96  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7245                           
  7246                           ;DMX.c: 259: RX_RDM_Data.value[PackCount] = RxDat;
  7247  0F97  0878               	movf	_PackCount,w
  7248  0F98  3EA0               	addlw	(low (_RX_RDM_Data| 0))& (0+255)
  7249  0F99  0086               	movwf	6
  7250  0F9A  0187               	clrf	7
  7251  0F9B  0872               	movf	DMX_interrput@RxDat,w	;volatile
  7252  0F9C  0081               	movwf	1
  7253                           
  7254                           ;DMX.c: 261: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  7255  0F9D  3002               	movlw	2
  7256  0F9E  0678               	xorwf	_PackCount,w	;volatile
  7257  0F9F  1D03               	btfss	3,2
  7258  0FA0  2FB2               	goto	i1l3301
  7259  0FA1  0878               	movf	_PackCount,w
  7260  0FA2  3EA0               	addlw	(low (_RX_RDM_Data| 0))& (0+255)
  7261  0FA3  0086               	movwf	6
  7262  0FA4  0801               	movf	1,w
  7263  0FA5  1903               	btfsc	3,2
  7264  0FA6  2FB2               	goto	i1l3301
  7265  0FA7  0020               	movlb	0	; select bank0
  7266  0FA8  082D               	movf	_PD_Flag,w	;volatile
  7267  0FA9  042E               	iorwf	_PD_Flag+1,w	;volatile
  7268  0FAA  1D03               	btfss	3,2
  7269  0FAB  2FB2               	goto	i1l3301
  7270                           
  7271                           ;DMX.c: 262: RxState = RX_RDM_PD;
  7272  0FAC  3005               	movlw	5
  7273  0FAD  00CA               	movwf	_RxState	;volatile
  7274                           
  7275                           ;DMX.c: 263: PDCount = 100-1;
  7276  0FAE  3063               	movlw	99
  7277  0FAF  00C6               	movwf	_PDCount
  7278  0FB0                     i1l3299:	
  7279                           
  7280                           ;DMX.c: 264: PackCount--;
  7281  0FB0  03F8               	decf	_PackCount,f	;volatile
  7282                           
  7283                           ;DMX.c: 265: break;
  7284  0FB1  2FEA               	goto	i1l3325
  7285  0FB2                     i1l3301:	
  7286                           
  7287                           ;DMX.c: 266: }
  7288                           ;DMX.c: 267: if (PackCount == 0) {
  7289  0FB2  0878               	movf	_PackCount,w	;volatile
  7290  0FB3  1D03               	btfss	3,2
  7291  0FB4  2FB0               	goto	i1l3299
  7292                           
  7293                           ;DMX.c: 268: DMX_Flags.RDMNew = 1;
  7294  0FB5  1776               	bsf	_DMX_Flags,6	;volatile
  7295                           
  7296                           ;DMX.c: 269: RxState = RX_WAIT_FOR_BREAK;
  7297  0FB6  0020               	movlb	0	; select bank0
  7298                           
  7299                           ;DMX.c: 270: RxTimer = 0;
  7300                           
  7301                           ;DMX.c: 271: DMX_Flags.RxTimeout = 0;
  7302  0FB7  27FB  318F         	fcall	PL54	;call to abstracted procedure
  7303  0FB9  2FB0               	goto	i1l3299
  7304  0FBA                     i1l3311:	
  7305                           
  7306                           ;DMX.c: 277: RxDat = RCREG;
  7307  0FBA  0023               	movlb	3	; select bank3
  7308  0FBB  0819               	movf	25,w	;volatile
  7309  0FBC  00F2               	movwf	DMX_interrput@RxDat	;volatile
  7310                           
  7311                           ;DMX.c: 278: PD.u8[PDCount] = RxDat;
  7312  0FBD  0020               	movlb	0	; select bank0
  7313  0FBE  0846               	movf	_PDCount,w
  7314  0FBF  3E8C               	addlw	140
  7315  0FC0  00F0               	movwf	??_DMX_interrput
  7316  0FC1  3021               	movlw	33
  7317  0FC2  01F1               	clrf	??_DMX_interrput+1
  7318  0FC3  3DF1               	addwfc	??_DMX_interrput+1,f
  7319  0FC4  0870               	movf	??_DMX_interrput,w
  7320  0FC5  0086               	movwf	6
  7321  0FC6  0871               	movf	??_DMX_interrput+1,w
  7322  0FC7  0087               	movwf	7
  7323  0FC8  0872               	movf	DMX_interrput@RxDat,w	;volatile
  7324  0FC9  0081               	movwf	1
  7325                           
  7326                           ;DMX.c: 279: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  7327  0FCA  01F1               	clrf	??_DMX_interrput+1
  7328  0FCB  0021               	movlb	1	; select bank1
  7329  0FCC  0822               	movf	(_RX_RDM_Data^(0+128)+2),w	;volatile
  7330  0FCD  3C64               	sublw	100
  7331  0FCE  00F0               	movwf	??_DMX_interrput
  7332  0FCF  1C03               	skipc
  7333  0FD0  03F1               	decf	??_DMX_interrput+1,f
  7334  0FD1  0020               	movlb	0	; select bank0
  7335  0FD2  0846               	movf	_PDCount,w
  7336  0FD3  0670               	xorwf	??_DMX_interrput,w
  7337  0FD4  0471               	iorwf	??_DMX_interrput+1,w
  7338  0FD5  1D03               	skipz
  7339  0FD6  2FDD               	goto	i1l3319
  7340                           
  7341                           ;DMX.c: 280: RxState = RX_RDM_READ_DATA;
  7342  0FD7  3004               	movlw	4
  7343  0FD8  00CA               	movwf	_RxState	;volatile
  7344                           
  7345                           ;DMX.c: 281: PD_Flag = 1;
  7346  0FD9  3001               	movlw	1
  7347  0FDA  00AD               	movwf	_PD_Flag	;volatile
  7348  0FDB                     L3:	
  7349  0FDB  01AE               	clrf	_PD_Flag+1	;volatile
  7350                           
  7351                           ;DMX.c: 282: }else{
  7352  0FDC  2FEA               	goto	i1l3325
  7353  0FDD                     i1l3319:	
  7354                           
  7355                           ;DMX.c: 283: PDCount--;
  7356  0FDD  03C6               	decf	_PDCount,f
  7357  0FDE  2FEA               	goto	i1l3325
  7358  0FDF                     i1l3323:	
  7359  0FDF  0020               	movlb	0	; select bank0
  7360  0FE0  084A               	movf	_RxState,w	;volatile
  7361                           
  7362                           ; Switch size 1, requested type "space"
  7363                           ; Number of cases is 6, Range of values is 0 to 5
  7364                           ; switch strategies available:
  7365                           ; Name         Instructions Cycles
  7366                           ; direct_byte           18     6 (fixed)
  7367                           ; simple_byte           19    10 (average)
  7368                           ; jumptable            260     6 (fixed)
  7369                           ;	Chosen strategy is direct_byte
  7370  0FE1  0084               	movwf	4
  7371  0FE2  3006               	movlw	6
  7372  0FE3  0204               	subwf	4,w
  7373  0FE4  1803               	skipnc
  7374  0FE5  2FEA               	goto	i1l3325
  7375  0FE6  3189               	movlp	high i1S4377
  7376  0FE7  3504               	lslf	4,w
  7377  0FE8  3EC7               	addlw	low i1S4377
  7378  0FE9  0082               	movwf	2
  7379  0FEA                     i1l3325:	
  7380                           
  7381                           ;DMX.c: 288: if (RxTimer > 2400) {
  7382  0FEA  0020               	movlb	0	; select bank0
  7383  0FEB  083A               	movf	_RxTimer+1,w	;volatile
  7384  0FEC  3A80               	xorlw	128
  7385  0FED  00F0               	movwf	??_DMX_interrput
  7386  0FEE  3089               	movlw	137
  7387  0FEF  0270               	subwf	??_DMX_interrput,w
  7388  0FF0  1D03               	skipz
  7389  0FF1  2FF4               	goto	u142_25
  7390  0FF2  3061               	movlw	97
  7391  0FF3  0239               	subwf	_RxTimer,w	;volatile
  7392  0FF4                     u142_25:	
  7393  0FF4  1C03               	skipc
  7394  0FF5  0008               	return
  7395                           
  7396                           ;DMX.c: 289: DMX_Flags.RxTimeout = 1;
  7397  0FF6  1576               	bsf	_DMX_Flags,2	;volatile
  7398                           
  7399                           ;DMX.c: 290: RxTimer = 0;
  7400  0FF7  0020               	movlb	0	; select bank0
  7401  0FF8  01B9               	clrf	_RxTimer	;volatile
  7402  0FF9  01BA               	clrf	_RxTimer+1	;volatile
  7403  0FFA  0008               	return
  7404  0FFB                     __end_of_DMX_interrput:	
  7405  007E                     btemp	set	126	;btemp
  7406  007E                     int$flags	set	126
  7407  007E                     wtemp0	set	126
  7408  0FFB                     PL54:	
  7409  0FFB  01CA               	clrf	_RxState	;volatile
  7410  0FFC  01B9               	clrf	_RxTimer	;volatile
  7411  0FFD  01BA               	clrf	_RxTimer+1	;volatile
  7412  0FFE  1176               	bcf	_DMX_Flags,2	;volatile
  7413  0FFF  0008               	return
  7414  1000                     __end_ofPL54:	
  7415                           
  7416                           	psect	swtext3
  7417  09C7                     __pswtext3:	
  7418  09C7                     i1S4377:	
  7419  09C7  318F  2F39         	ljmp	i1l3243
  7420  09C9  318F  2F3D         	ljmp	i1l451
  7421  09CB  318F  2F5A         	ljmp	i1l3259
  7422  09CD  318F  2F88         	ljmp	i1l3279
  7423  09CF  318F  2F94         	ljmp	i1l3287
  7424  09D1  318F  2FBA         	ljmp	i1l3311


Data Sizes:
    Strings     0
    Constant    626
    Data        13
    BSS         199
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     30      79
    BANK1            80      0      79
    BANK2            80      0      80
    BANK3            80      0       0
    BANK4            76      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    sp__PD_Read_u32ptr	PTR unsigned long  size(2) Largest target is 100
		 -> PD(BIGRAM[100]), 

    PD_ID_ptr	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_Manu_ptr	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    sp__PD_Read_u8ptr	PTR unsigned char  size(2) Largest target is 100
		 -> PD(BIGRAM[100]), 

    sp__PD_Read_u16ptr	PTR unsigned int  size(2) Largest target is 100
		 -> PD(BIGRAM[100]), 

    RDM@PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    RDM@PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    BytePtr	PTR volatile unsigned char  size(2) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK2[24]), TX_RDM_Data(BANK1[24]), PERSONALITY_6(CODE[13]), 
		 -> PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), PERSONALITY_2(CODE[6]), 
		 -> PERSONALITY_1(CODE[6]), 

    RDM@PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK0[4]), 

    PWMLDCONptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 

    RDM@PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    S79_personality_definition$description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 


Critical Paths under _main in COMMON

    _timer2_loop->_PWM_TurnOff
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_PD_Read_u8ptr
    _RDM_Identify_Switch->_PWM_TurnOff
    _RDM_GET_CC->_PD_write_u16
    _RDM_GET_CC->_PD_write_u8
    _RDM_GET_CC->___wmul
    _RDM_init->_PFM_Read
    _PFM_Write->_PFM_Read

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_RDM_rx_loop
    _timer2_loop->_PWM_TurnOn
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_TXSTART->_RDM_get_checkSum
    _RDM_init->_PFM_Write

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8757
                           _DMX_init
                           _DMX_loop
                           _RDM_init
                        _RDM_rx_loop
                        _timer2_loop
                         _timer_init
 ---------------------------------------------------------------------------------
 (1) _timer_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_loop                                          0     0      0       0
                        _PWM_TurnOff
                         _PWM_TurnOn
 ---------------------------------------------------------------------------------
 (2) _PWM_TurnOn                                           5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    6591
                                             29 BANK0      1     1      0
                            _PD_init
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     446
                                             25 BANK0      4     4      0
                     _PD_Read_u16ptr
                     _PD_Read_u32ptr
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u32ptr                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0    1869
                     _PD_Read_u16ptr
                      _PD_Read_u8ptr
                          _PFM_Write
                _RDM_Identify_Switch
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_Identify_Switch                                  0     0      0       0
                        _PWM_TurnOff
 ---------------------------------------------------------------------------------
 (2) _PWM_TurnOff                                          2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u8ptr                                        2     0      2       0
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u16ptr                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0    3830
                                             25 BANK0      2     2      0
                       _PD_write_u16
                       _PD_write_u32
                        _PD_write_u8
                        _RDM_TXSTART
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2484
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     446
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     446
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (3) _PD_write_u8                                          3     3      0      31
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PD_write_u32                                         9     5      4     135
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _PD_write_u16                                         7     5      2     734
                                              4 COMMON     2     0      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _PD_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             2     2      0    2166
                                              4 BANK0      2     2      0
                           _PFM_Read
                          _PFM_Write
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _PFM_Write                                            4     0      4    1423
                                              0 BANK0      4     0      4
                           _PFM_Read
 ---------------------------------------------------------------------------------
 (4) _PFM_Read                                             2     0      2     467
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                             5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
                   _timer2_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer2_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DMX_init
   _DMX_loop
   _RDM_init
     _PFM_Read
     _PFM_Write
       _PFM_Read
     ___bmul
   _RDM_rx_loop
     _PD_init
     _RDM_GET_CC
       _PD_write_u16
       _PD_write_u32
       _PD_write_u8
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
       ___wmul
     _RDM_SET_CC
       _PD_Read_u16ptr
       _PD_Read_u8ptr
       _PFM_Write
         _PFM_Read
       _RDM_Identify_Switch
         _PWM_TurnOff
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _PD_Read_u16ptr
       _PD_Read_u32ptr
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer2_loop
     _PWM_TurnOff
     _PWM_TurnOn
   _timer_init

 _isr (ROOT)
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt
   _timer2_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4C      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      F8      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Oct 17 09:41:11 2017

                                 _i 0037                                   pc 0002  
                    ___bmul@product 0050                         __CFG_CP$OFF 0000  
                                PL2 0676                                  PL4 068A  
                                PL6 0695                                  PL8 06A4  
                                _PD 218C                                  _RD 0CA8  
                                _WR 0CA9                   _TX_Discovery_Flag 0029  
               ___wmul@multiplicand 0052               __size_of_PD_write_u16 001E  
             __size_of_PD_write_u32 0025           __size_of_timer2_interrupt 000F  
                               PL10 06B2                                 PL20 06DD  
                               PL12 06BF                                 PL30 06FF  
                               PL22 06E3                                 PL14 009C  
                               PL40 071E                                 PL32 0706  
                               PL24 06EA                                 PL16 06CB  
                               PL50 073A                                 PL42 0724  
                               PL34 070C                                 PL26 06F1  
                               PL18 06D7                                 PL52 073F  
                               PL44 072A                                 PL36 0712  
                               PL28 06F8                                 PL54 0FFB  
                               PL46 0730                                 PL38 0718  
                               PL56 0744                                 PL48 0735  
                        _PWM_TurnOn 03D5                                 l438 01DF  
                               l764 0333                                 l776 036D  
                               l769 0357                                 _GIE 005F  
                               _PR2 001B                                 u850 0583  
                               _UID 097F                                 u880 0637  
                               _TX9 0CF6                                 _PWM 0749  
                               _isr 0004                                 wreg 0009  
                       _PD_write_u8 04DE                        __CFG_LVP$OFF 0000  
                       _PWM_TurnOff 03BE                                l1058 02CC  
                              l1242 05C5                                l1246 05E0  
                              l1247 05EB                                l1249 05FE  
                              l4011 0206                                l4013 0213  
                              l4101 036A                                l4103 036B  
                              l4105 036C                                l4121 03A6  
                              l4043 0261                                l4027 021A  
                              l4045 0277                                l4029 0244  
                              l2703 03BE                                l4073 01B7  
                              l4059 02A9                                l2731 038D  
                              l2723 0379                                l2733 0399  
                              l2725 0387                                l2709 03BF  
                              l4093 0331                                l4167 013B  
                              l2737 0669                                l4089 0319  
                              l4371 04BA                                l4363 05F3  
                              l4365 0561                                l3751 04F2  
                              l4367 0569                                l3903 0540  
                              l3831 05EA                                l4369 04A6  
                              l3905 0543                                l3913 0558  
                              l2795 062F                                l3755 04F8  
                              l3851 0436                                l2779 0585  
                              l3907 0549                                l3915 0571  
                              l3853 043C                                l3845 03FC  
                              l3837 05ED                                l3773 03D6  
                              l3765 03D5                                l3927 02B4  
                              l3847 03FD                                l3775 0588  
                              l3865 044F                                l3857 0447  
                              l3849 0406                                l3881 049D  
                              l3777 0589                                l3867 0466  
                              l3859 044C                                l3883 04BF  
                              l3877 048D                                l3869 046E  
                              l3797 05AB                                l3897 052A  
                              l3899 052B                                ?_isr 0070  
                              l3989 0183                                l3999 01FF  
                              _CFGS 0CAE                                _BRGH 0CF2  
                              _FERR 0CEA                                _FREE 0CAC  
                              u1615 0301                                u1790 01FD  
                              u1950 033F                                _PEIE 005E  
                              u1965 0351                                _RCIE 048D  
                              _RCIF 008D                                _LWLO 0CAD  
                              _TMR1 0016                                _SPEN 0CEF  
                              _TX9D 0CF0                                _Addr 0079  
                              _TXIE 048C                                _TXEN 0CF5  
                              _WREN 0CAA                                _TXIF 008C  
                              _SYNC 0CF4                 _TX_RDM_Response_Set 064B  
                              _main 00E8                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_PD_init 0374                                start 0013  
                        _TX_PDCount 0045                          _TX_PD_Flag 002B  
                       ?_RDM_GET_CC 0070                        _PD_write_u32 0505  
                      _PD_write_u16 04C0                   ___bmul@multiplier 0051  
                     __CFG_MCLRE$ON 0000                         ?_RDM_SET_CC 0070  
                             ??_isr 0074                       __CFG_PLLEN$ON 0000  
              ?_TX_RDM_Response_Set 0070                         _RX_RDM_Data 00A0  
                             ?_main 0070                       __CFG_WDTE$OFF 0000  
                  __end_of_DMX_init 01B3                               _ANSA2 0C62  
                             _ANSC0 0C70                               _ANSC1 0C71  
                             _ANSC2 0C72                               _ANSC3 0C73  
                  __end_of_DMX_loop 01E6                               _T1CON 0018  
                             _T2CON 001C                               _LATC3 0873  
                             _LATC4 0874                               i1l451 0F3D  
                             i1l790 006D                               i1l787 0042  
                             i1l964 0EEB                               i1l965 0EF7  
                             i1l966 0F03                               i1l967 0F0B  
                             i1l959 0EBA                               _PMADR 0191  
                             _PMDAT 0193                               _RCREG 0199  
         __size_of_RDM_tx_interrupt 0087                               _RCSTA 019D  
                __size_of_PFM_Write 003B                               _RXPPS 0E15  
                             _TXREG 019A                    __end_of_PFM_Read 02CC  
                     __CFG_WRT$HALF 0000                               _Timer 0020  
                  __end_of_RDM_init 02B2                     PD_write_u32@u32 0050  
                   PD_write_u16@u16 0074                      __CFG_BOREN$OFF 0000  
                       _TX_RDM_Data 00D7                               status 0003  
                             wtemp0 007E                   ?_RDM_get_checkSum 0050  
__end_ofRDM@PERSONALITY_DEFINITIONS 0967          RDM@PERSONALITY_DEFINITIONS 0949  
                ??_RDM_get_checkSum 0074                     __initialization 00A8  
            _SOFTWARE_VERSION_LABEL 0967                        __end_of_main 0142  
                        _CurrentPWM 0144                   ?_RDM_discovery_CC 0070  
             ??_TX_RDM_Response_Set 0074                        ?_RDM_TXSTART 0070  
                ??_RDM_discovery_CC 0069                              ??_main 0076  
                       ?_PWM_TurnOn 0070                 __size_of_RDM_GET_CC 00C4  
                            i1S4373 09BB                              i1S4375 09D3  
                            i1S4377 09C7                           ??_PD_init 0074  
               __size_of_RDM_SET_CC 0048                              _RA2PPS 0E92  
                            _RC0PPS 0EA0                              _RC1PPS 0EA1  
                            _RC2PPS 0EA2                              _RC4PPS 0EA4  
                            i1l3301 0FB2                              i1l3311 0FBA  
                            i1l3243 0F39                              i1l3323 0FDF  
                            i1l3253 0F4F                              i1l3325 0FEA  
                            i1l3421 0033                              i1l3413 0026  
                            i1l3319 0FDD                              i1l3423 0035  
                            i1l3407 001C                              i1l3343 0EB8  
                            i1l3257 0F57                              i1l3433 004D  
                            i1l3353 0ECD                              i1l3267 0F70  
                            i1l3259 0F5A                              i1l3451 0071  
                            i1l3461 0091                              i1l3287 0F94  
                            i1l3279 0F88                              i1l3457 008F  
                            i1l3299 0FB0                              i1l3395 0F19  
                            i1l3389 0F13                              u132_25 0F64  
                            u142_25 0FF4                              u134_25 0F7E  
                            _INTCON 000B                              u157_25 0087  
                            _PMCON2 0196                              _OSCCON 0099  
            __size_of_DMX_interrput 00D7                              _TMR1IE 0488  
                            _TMR1IF 0088                   _DMX_CurrentBright 0138  
                            _TMR2IE 0489                              _TMR2IF 0089  
                            _SPBRGH 019C                              _SPBRGL 019B  
                            _TRISA2 0462                              _TRISC0 0470  
                            _TRISC1 0471                              _TRISC2 0472  
                            _TRISC3 0473                              _TRISC4 0474  
                            _TRISC5 0475                     PFM_Read@AddrPFM 0074  
                    __CFG_PWRTE$OFF 0000                   __end_of_PFM_Write 0307  
                            _RxData 004C          __end_ofRDM@PID_DEFINITIONS 0989  
                  _timer1_interrupt 0EB0                              ___bmul 02B2  
                            ___wmul 04F0                      __CFG_STVREN$ON 0000  
                      ?_timer2_loop 0070                        ?_RDM_rx_loop 0070  
                        _TimerState 0043                    _timer2_interrupt 0EA1  
               RDM_get_checkSum@len 0068             __size_of_PD_Read_u16ptr 0017  
           __size_of_PD_Read_u32ptr 0019             __end_of__initialization 00E5  
             __end_of_PD_Read_u8ptr 057C                 __size_of_PWM_TurnOn 0027  
                         ?_DMX_init 0070                           ?_DMX_loop 0070  
                    _DMXPeriodConst 0049                 ___bmul@multiplicand 0074  
                         ?_PFM_Read 0074                      __pcstackCOMMON 0070  
                      __pidataBANK0 0000                        __pidataBANK2 0000  
                  _DMX_TargetBright 0120                           ?_RDM_init 0070  
                        __end_ofPL2 068A                          __end_ofPL4 0695  
                        __end_ofPL6 06A4                          __end_ofPL8 06B2  
                     _DMX_interrput 0F24                    _RDM_tx_interrupt 0015  
                      ?_PD_write_u8 0070        __size_of_RDM_Identify_Switch 000C  
                      ?_PWM_TurnOff 0070                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
                     _DMX_sumRepeat 016C                         _RxAddrCount 003B  
                        ??_DMX_init 0050                          ??_DMX_loop 0050  
                      ??_RDM_GET_CC 0069                          __pmaintext 00E8  
                        ??_PFM_Read 0076                        ??_RDM_SET_CC 0076  
                           ?___bmul 0074                             ?___wmul 0050  
                        ??_RDM_init 0054                          __pintentry 0004  
                    ?_DMX_interrput 0070                             _BAUDCON 019F  
                 _RDM_tx_TimerBreak 0669                       _PERSONALITY_1 09B5  
                     _PERSONALITY_2 09AF                       _PERSONALITY_3 09A9  
                     _PERSONALITY_4 09A3                       _PERSONALITY_5 0996  
                     _PERSONALITY_6 0989                __size_of_RDM_TXSTART 001C  
                ?_RDM_tx_TimerBreak 0070                             _DMXSign 00D0  
                           _PWM1DCH 0D94                             _PWM1DCL 0D93  
                           _PWM2DCH 0DA4                             _PWM2DCL 0DA3  
                           _OSCTUNE 0098                             _PWM3DCH 0DB4  
                           _PWM3DCL 0DB3                             _PWM4DCH 0DC4  
                           _PWM1CON 0D9B                             _PWM4DCL 0DC3  
                           _PWM2CON 0DAB                             _PWM3CON 0DBB  
                           _PWM4CON 0DCB                             _PDCount 0046  
                           _PWM1PHH 0D92                             _PWM1PHL 0D91  
                           _PWM2PHH 0DA2                             _PWM2PHL 0DA1  
                           _PWM3PHH 0DB2                             _PWM3PHL 0DB1  
                           _PWM1PRH 0D96                             _PWM4PHH 0DC2  
                           _PWM1PRL 0D95                             _PWM4PHL 0DC1  
                           _PWM2PRH 0DA6                             _PWM2PRL 0DA5  
                           _PWM3PRH 0DB6                             _PWM3PRL 0DB5  
                           _PD_Flag 002D                             _PWM4PRH 0DC6  
                           _PWM4PRL 0DC5                    _Timer_DelayCount 0042  
                __end_of_RDM_GET_CC 04C0                             _PD_init 036E  
               ??_RDM_tx_TimerBreak 0074                  __end_of_RDM_SET_CC 0572  
                         _ADC_Flags 003F                             _BytePtr 0033  
                           _TxCount 0035                             _RxTimer 0039  
                           _RxState 004A                             _TxState 0047  
                   __size_of___bmul 000C                     __size_of___wmul 0015  
         __end_of_RDM_tx_TimerBreak 0676                             __ptext1 03A7  
                           __ptext2 039E                             __ptext3 03D5  
                           __ptext4 0307                             __ptext5 0588  
                           __ptext6 0616                             __ptext7 052A  
                           __ptext8 057C                             __ptext9 03BE  
                      ??_PWM_TurnOn 0050                __size_of_timer2_loop 0009  
              __size_of_RDM_rx_loop 0067           __size_of_RDM_get_checkSum 002A  
                      __size_of_isr 000F            __end_of_timer1_interrupt 0F24  
                           clrloop0 0E96           __size_of_RDM_discovery_CC 0077  
              RDM_get_checkSum@Data 0050                end_of_initialization 00E5  
                         _DMX_Flags 0076                       PFM_Write@Data 0052  
                    _PD_Read_u32ptr 0616                      _PD_Read_u16ptr 05FF  
          __end_of_timer2_interrupt 0EB0      __end_of_SOFTWARE_VERSION_LABEL 097F  
                __end_of_PWM_TurnOn 03FC                      _DMX_difference 00D4  
       __end_of_TX_RDM_Response_Set 0669                           _PD_ID_ptr 002F  
                   ??_DMX_interrput 0070                           _PWM1LDCON 0D9F  
                         _PWM2LDCON 0DAF                           _PWM3LDCON 0DBF  
                         _PFM_Write 02CC                           _PWM4LDCON 0DCF  
                      __pstringtext 0749                          _timer_init 03A7  
                         _PWMDCHptr 00C0                           _PWMDCLptr 00C8  
                RDM@PID_DEFINITIONS 0985                    __CFG_FOSC$INTOSC 0000  
            __end_of_PD_Read_u16ptr 0616              __end_of_PD_Read_u32ptr 062F  
              __size_of_PD_write_u8 0012                __size_of_PWM_TurnOff 0017  
          __end_of_RDM_tx_interrupt 009C                       PD_write_u8@u8 0050  
                 __size_of_DMX_init 0071                   __size_of_DMX_loop 0033  
               _RDM_Identify_Switch 057C                          ?_PFM_Write 0050  
                    __end_of___bmul 02BE                   __size_of_PFM_Read 000E  
        __size_of_RDM_tx_TimerBreak 000D                      __end_of___wmul 0505  
                 __size_of_RDM_init 00CC                    PFM_Write@AddrPFM 0050  
                         _PackCount 0078                         __end_ofPL10 06BF  
                       __end_ofPL20 06E3                         __end_ofPL12 06CB  
                       __end_ofPL30 0706                         __end_ofPL22 06EA  
                       __end_ofPL14 00A8                         __end_ofPL40 0724  
                       __end_ofPL32 070C                         __end_ofPL24 06F1  
                       __end_ofPL16 06D7                         __end_ofPL50 073F  
                       __end_ofPL42 072A                         __end_ofPL34 0712  
                       __end_ofPL26 06F8                         __end_ofPL18 06DD  
                       __end_ofPL52 0744                         __end_ofPL44 0730  
                       __end_ofPL36 0718                         __end_ofPL28 06FF  
                       __end_ofPL54 1000                         __end_ofPL46 0735  
                       __end_ofPL38 071E                         __end_ofPL56 0749  
                       __end_ofPL48 073A                 start_initialization 00A8  
                       __end_of_UID 0985                         __end_of_PWM 0949  
                       __end_of_isr 0013                ?_RDM_Identify_Switch 0070  
                   ?_PD_Read_u32ptr 0071                     ?_PD_Read_u16ptr 0071  
                         _RxDataPtr 004B                       ?_PD_write_u32 0050  
                     ?_PD_write_u16 0074                    __CFG_LPBOREN$OFF 0000  
                          ??___bmul 0075                            ??___wmul 0074  
                       __pdataBANK0 006E                         __pdataBANK2 0164  
                     _IDENTIFY_MODE 006E                         ?_timer_init 0070  
                  _RDM_get_checkSum 0374                         __pbssBIGRAM 218C  
                       __pbssCOMMON 0076              __size_of_PD_Read_u8ptr 000A  
                         ___latbits 0001                       __pcstackBANK0 0050  
             ??_RDM_Identify_Switch 0076                    _RDM_discovery_CC 0588  
                          ?_PD_init 0070                     _DMX_SpaceBright 012C  
                    ??_PD_write_u32 0054                      ??_PD_write_u16 0050  
                       ??_PFM_Write 0076                    __CFG_PPS1WAY$OFF 0000  
                     ??_RDM_TXSTART 0074                           __pswtext1 09BB  
                         __pswtext2 09D3                           __pswtext3 09C7  
                          _ADC_Data 0040                   ?_timer1_interrupt 0070  
                ??_timer1_interrupt 0070                      ___wmul@product 0074  
                 ?_timer2_interrupt 0070                 __size_of_timer_init 0017  
                         clear_ram0 0E95                            _DMX_init 0142  
                          _DMX_loop 01B3                       _PD_Read_u8ptr 0572  
                ??_timer2_interrupt 0070                            _PFM_Read 02BE  
                DMX_interrput@RxDat 0072                            _RDM_init 01E6  
                     ??_timer2_loop 0076                       ??_RDM_rx_loop 006D  
                 ___wmul@multiplier 0050                 __end_of_RDM_TXSTART 064B  
                       _DMX_Address 003D                    __size_of_PD_init 0006  
                    ?_PD_Read_u8ptr 0074                   ?_RDM_tx_interrupt 0070  
                      _Timer2_Count 0041                  ??_RDM_tx_interrupt 0070  
             __end_of_DMX_interrput 0FFB        __size_of_TX_RDM_Response_Set 001E  
                  ??_PD_Read_u32ptr 0050                    ??_PD_Read_u16ptr 0050  
               __end_of_timer2_loop 03A7                 __end_of_RDM_rx_loop 036E  
                          _checkSum 0027                __end_of_PD_write_u16 04DE  
              __end_of_PD_write_u32 052A                       ??_PD_write_u8 0074  
                          __ptext10 0572                            __ptext11 05FF  
                          __ptext20 04C0                            __ptext12 03FC  
                          __ptext21 036E                            __ptext13 04F0  
                          __ptext30 0EB0                            __ptext22 01E6  
                          __ptext14 062F                            __ptext31 0015  
                          __ptext23 02B2                            __ptext15 064B  
                          __ptext32 0F24                            __ptext24 02CC  
                          __ptext16 0669                            __ptext25 02BE  
                          __ptext17 0374                            __ptext26 01B3  
                          __ptext18 04DE                            __ptext27 0142  
                          __ptext19 0505                            __ptext29 0EA1  
                     ??_PWM_TurnOff 0074                         _PERSONALITY 0044  
                     __size_of_main 005A            __end_of_RDM_get_checkSum 039E  
                          int$flags 007E            __end_of_RDM_discovery_CC 05FF  
                        _DMXDimming 0048                        ??_timer_init 0074  
                       _RDM_TXSTART 062F               __end_of_PERSONALITY_1 09BB  
             __end_of_PERSONALITY_2 09B5               __end_of_PERSONALITY_3 09AF  
             __end_of_PERSONALITY_4 09A9               __end_of_PERSONALITY_5 09A3  
             __end_of_PERSONALITY_6 0996                          _DMX_Repeat 0164  
                          intlevel1 0000                 __end_of_PD_write_u8 04F0  
                   ??_PD_Read_u8ptr 0076                   __CFG_CLKOUTEN$OFF 0000  
               __end_of_PWM_TurnOff 03D5                  __end_of_timer_init 03BE  
                       _PD_Manu_ptr 0031                          _RDM_GET_CC 03FC  
                        _RDM_SET_CC 052A                  _DISCOVERY_RDM_Data 014C  
                        _PWM1CLKCON 0D9E                         _timer2_loop 039E  
                        _PWM2CLKCON 0DAE                         _RDM_rx_loop 0307  
                        _PWM3CLKCON 0DBE                          _PWM4CLKCON 0DCE  
                       _PWMLDCONptr 00B8         __end_of_RDM_Identify_Switch 0588  
         __size_of_timer1_interrupt 0074  
