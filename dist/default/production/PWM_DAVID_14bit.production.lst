

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Oct 20 16:19:28 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text27,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text46,local,class=CODE,merge=1,delta=2
    28                           	psect	text47,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext1,local,class=CONST,delta=2
    30                           	psect	text48,local,class=CODE,merge=1,delta=2
    31                           	psect	text49,local,class=CODE,merge=1,delta=2
    32                           	psect	swtext2,local,class=CONST,delta=2
    33                           	psect	pa_nodes0,global,class=CODE,delta=2
    34                           	dabs	1,0x620,32
    35                           	dabs	1,0x5A0,80
    36                           	dabs	1,0x520,80
    37                           	dabs	1,0x4E8,8
    38                           	dabs	1,0x2318,0,_PD
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F1575 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000E                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010E                     	;# 
   120  0111                     	;# 
   121  0112                     	;# 
   122  0113                     	;# 
   123  0114                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0117                     	;# 
   127  0118                     	;# 
   128  0119                     	;# 
   129  018C                     	;# 
   130  018E                     	;# 
   131  0191                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0197                     	;# 
   140  0199                     	;# 
   141  019A                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019D                     	;# 
   146  019E                     	;# 
   147  019F                     	;# 
   148  020C                     	;# 
   149  020E                     	;# 
   150  028C                     	;# 
   151  028E                     	;# 
   152  030C                     	;# 
   153  030E                     	;# 
   154  038C                     	;# 
   155  038E                     	;# 
   156  0391                     	;# 
   157  0392                     	;# 
   158  0393                     	;# 
   159  0397                     	;# 
   160  0398                     	;# 
   161  0399                     	;# 
   162  0691                     	;# 
   163  0692                     	;# 
   164  0693                     	;# 
   165  0694                     	;# 
   166  0695                     	;# 
   167  0D8E                     	;# 
   168  0D8F                     	;# 
   169  0D90                     	;# 
   170  0D91                     	;# 
   171  0D91                     	;# 
   172  0D92                     	;# 
   173  0D93                     	;# 
   174  0D93                     	;# 
   175  0D94                     	;# 
   176  0D95                     	;# 
   177  0D95                     	;# 
   178  0D96                     	;# 
   179  0D97                     	;# 
   180  0D97                     	;# 
   181  0D98                     	;# 
   182  0D99                     	;# 
   183  0D99                     	;# 
   184  0D9A                     	;# 
   185  0D9B                     	;# 
   186  0D9C                     	;# 
   187  0D9C                     	;# 
   188  0D9D                     	;# 
   189  0D9D                     	;# 
   190  0D9E                     	;# 
   191  0D9F                     	;# 
   192  0DA0                     	;# 
   193  0DA1                     	;# 
   194  0DA1                     	;# 
   195  0DA2                     	;# 
   196  0DA3                     	;# 
   197  0DA3                     	;# 
   198  0DA4                     	;# 
   199  0DA5                     	;# 
   200  0DA5                     	;# 
   201  0DA6                     	;# 
   202  0DA7                     	;# 
   203  0DA7                     	;# 
   204  0DA8                     	;# 
   205  0DA9                     	;# 
   206  0DA9                     	;# 
   207  0DAA                     	;# 
   208  0DAB                     	;# 
   209  0DAC                     	;# 
   210  0DAC                     	;# 
   211  0DAD                     	;# 
   212  0DAD                     	;# 
   213  0DAE                     	;# 
   214  0DAF                     	;# 
   215  0DB0                     	;# 
   216  0DB1                     	;# 
   217  0DB1                     	;# 
   218  0DB2                     	;# 
   219  0DB3                     	;# 
   220  0DB3                     	;# 
   221  0DB4                     	;# 
   222  0DB5                     	;# 
   223  0DB5                     	;# 
   224  0DB6                     	;# 
   225  0DB7                     	;# 
   226  0DB7                     	;# 
   227  0DB8                     	;# 
   228  0DB9                     	;# 
   229  0DB9                     	;# 
   230  0DBA                     	;# 
   231  0DBB                     	;# 
   232  0DBC                     	;# 
   233  0DBC                     	;# 
   234  0DBD                     	;# 
   235  0DBD                     	;# 
   236  0DBE                     	;# 
   237  0DBF                     	;# 
   238  0DC0                     	;# 
   239  0DC1                     	;# 
   240  0DC1                     	;# 
   241  0DC2                     	;# 
   242  0DC3                     	;# 
   243  0DC3                     	;# 
   244  0DC4                     	;# 
   245  0DC5                     	;# 
   246  0DC5                     	;# 
   247  0DC6                     	;# 
   248  0DC7                     	;# 
   249  0DC7                     	;# 
   250  0DC8                     	;# 
   251  0DC9                     	;# 
   252  0DC9                     	;# 
   253  0DCA                     	;# 
   254  0DCB                     	;# 
   255  0DCC                     	;# 
   256  0DCC                     	;# 
   257  0DCD                     	;# 
   258  0DCD                     	;# 
   259  0DCE                     	;# 
   260  0DCF                     	;# 
   261  0DD0                     	;# 
   262  0E0F                     	;# 
   263  0E10                     	;# 
   264  0E11                     	;# 
   265  0E12                     	;# 
   266  0E13                     	;# 
   267  0E14                     	;# 
   268  0E15                     	;# 
   269  0E16                     	;# 
   270  0E17                     	;# 
   271  0E90                     	;# 
   272  0E91                     	;# 
   273  0E92                     	;# 
   274  0E94                     	;# 
   275  0E95                     	;# 
   276  0EA0                     	;# 
   277  0EA1                     	;# 
   278  0EA2                     	;# 
   279  0EA3                     	;# 
   280  0EA4                     	;# 
   281  0EA5                     	;# 
   282  0FE4                     	;# 
   283  0FE5                     	;# 
   284  0FE6                     	;# 
   285  0FE7                     	;# 
   286  0FE8                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEA                     	;# 
   291  0FEB                     	;# 
   292  0FED                     	;# 
   293  0FEE                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000E                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0016                     	;# 
   316  0017                     	;# 
   317  0018                     	;# 
   318  0019                     	;# 
   319  001A                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  008C                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009A                     	;# 
   333  009B                     	;# 
   334  009B                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  009F                     	;# 
   339  010C                     	;# 
   340  010E                     	;# 
   341  0111                     	;# 
   342  0112                     	;# 
   343  0113                     	;# 
   344  0114                     	;# 
   345  0115                     	;# 
   346  0116                     	;# 
   347  0117                     	;# 
   348  0118                     	;# 
   349  0119                     	;# 
   350  018C                     	;# 
   351  018E                     	;# 
   352  0191                     	;# 
   353  0191                     	;# 
   354  0192                     	;# 
   355  0193                     	;# 
   356  0193                     	;# 
   357  0194                     	;# 
   358  0195                     	;# 
   359  0196                     	;# 
   360  0197                     	;# 
   361  0199                     	;# 
   362  019A                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019C                     	;# 
   366  019D                     	;# 
   367  019E                     	;# 
   368  019F                     	;# 
   369  020C                     	;# 
   370  020E                     	;# 
   371  028C                     	;# 
   372  028E                     	;# 
   373  030C                     	;# 
   374  030E                     	;# 
   375  038C                     	;# 
   376  038E                     	;# 
   377  0391                     	;# 
   378  0392                     	;# 
   379  0393                     	;# 
   380  0397                     	;# 
   381  0398                     	;# 
   382  0399                     	;# 
   383  0691                     	;# 
   384  0692                     	;# 
   385  0693                     	;# 
   386  0694                     	;# 
   387  0695                     	;# 
   388  0D8E                     	;# 
   389  0D8F                     	;# 
   390  0D90                     	;# 
   391  0D91                     	;# 
   392  0D91                     	;# 
   393  0D92                     	;# 
   394  0D93                     	;# 
   395  0D93                     	;# 
   396  0D94                     	;# 
   397  0D95                     	;# 
   398  0D95                     	;# 
   399  0D96                     	;# 
   400  0D97                     	;# 
   401  0D97                     	;# 
   402  0D98                     	;# 
   403  0D99                     	;# 
   404  0D99                     	;# 
   405  0D9A                     	;# 
   406  0D9B                     	;# 
   407  0D9C                     	;# 
   408  0D9C                     	;# 
   409  0D9D                     	;# 
   410  0D9D                     	;# 
   411  0D9E                     	;# 
   412  0D9F                     	;# 
   413  0DA0                     	;# 
   414  0DA1                     	;# 
   415  0DA1                     	;# 
   416  0DA2                     	;# 
   417  0DA3                     	;# 
   418  0DA3                     	;# 
   419  0DA4                     	;# 
   420  0DA5                     	;# 
   421  0DA5                     	;# 
   422  0DA6                     	;# 
   423  0DA7                     	;# 
   424  0DA7                     	;# 
   425  0DA8                     	;# 
   426  0DA9                     	;# 
   427  0DA9                     	;# 
   428  0DAA                     	;# 
   429  0DAB                     	;# 
   430  0DAC                     	;# 
   431  0DAC                     	;# 
   432  0DAD                     	;# 
   433  0DAD                     	;# 
   434  0DAE                     	;# 
   435  0DAF                     	;# 
   436  0DB0                     	;# 
   437  0DB1                     	;# 
   438  0DB1                     	;# 
   439  0DB2                     	;# 
   440  0DB3                     	;# 
   441  0DB3                     	;# 
   442  0DB4                     	;# 
   443  0DB5                     	;# 
   444  0DB5                     	;# 
   445  0DB6                     	;# 
   446  0DB7                     	;# 
   447  0DB7                     	;# 
   448  0DB8                     	;# 
   449  0DB9                     	;# 
   450  0DB9                     	;# 
   451  0DBA                     	;# 
   452  0DBB                     	;# 
   453  0DBC                     	;# 
   454  0DBC                     	;# 
   455  0DBD                     	;# 
   456  0DBD                     	;# 
   457  0DBE                     	;# 
   458  0DBF                     	;# 
   459  0DC0                     	;# 
   460  0DC1                     	;# 
   461  0DC1                     	;# 
   462  0DC2                     	;# 
   463  0DC3                     	;# 
   464  0DC3                     	;# 
   465  0DC4                     	;# 
   466  0DC5                     	;# 
   467  0DC5                     	;# 
   468  0DC6                     	;# 
   469  0DC7                     	;# 
   470  0DC7                     	;# 
   471  0DC8                     	;# 
   472  0DC9                     	;# 
   473  0DC9                     	;# 
   474  0DCA                     	;# 
   475  0DCB                     	;# 
   476  0DCC                     	;# 
   477  0DCC                     	;# 
   478  0DCD                     	;# 
   479  0DCD                     	;# 
   480  0DCE                     	;# 
   481  0DCF                     	;# 
   482  0DD0                     	;# 
   483  0E0F                     	;# 
   484  0E10                     	;# 
   485  0E11                     	;# 
   486  0E12                     	;# 
   487  0E13                     	;# 
   488  0E14                     	;# 
   489  0E15                     	;# 
   490  0E16                     	;# 
   491  0E17                     	;# 
   492  0E90                     	;# 
   493  0E91                     	;# 
   494  0E92                     	;# 
   495  0E94                     	;# 
   496  0E95                     	;# 
   497  0EA0                     	;# 
   498  0EA1                     	;# 
   499  0EA2                     	;# 
   500  0EA3                     	;# 
   501  0EA4                     	;# 
   502  0EA5                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE8                     	;# 
   509  0FE9                     	;# 
   510  0FEA                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000E                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0013                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  008C                     	;# 
   544  008E                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0095                     	;# 
   549  0096                     	;# 
   550  0097                     	;# 
   551  0098                     	;# 
   552  0099                     	;# 
   553  009A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  009F                     	;# 
   560  010C                     	;# 
   561  010E                     	;# 
   562  0111                     	;# 
   563  0112                     	;# 
   564  0113                     	;# 
   565  0114                     	;# 
   566  0115                     	;# 
   567  0116                     	;# 
   568  0117                     	;# 
   569  0118                     	;# 
   570  0119                     	;# 
   571  018C                     	;# 
   572  018E                     	;# 
   573  0191                     	;# 
   574  0191                     	;# 
   575  0192                     	;# 
   576  0193                     	;# 
   577  0193                     	;# 
   578  0194                     	;# 
   579  0195                     	;# 
   580  0196                     	;# 
   581  0197                     	;# 
   582  0199                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019C                     	;# 
   587  019D                     	;# 
   588  019E                     	;# 
   589  019F                     	;# 
   590  020C                     	;# 
   591  020E                     	;# 
   592  028C                     	;# 
   593  028E                     	;# 
   594  030C                     	;# 
   595  030E                     	;# 
   596  038C                     	;# 
   597  038E                     	;# 
   598  0391                     	;# 
   599  0392                     	;# 
   600  0393                     	;# 
   601  0397                     	;# 
   602  0398                     	;# 
   603  0399                     	;# 
   604  0691                     	;# 
   605  0692                     	;# 
   606  0693                     	;# 
   607  0694                     	;# 
   608  0695                     	;# 
   609  0D8E                     	;# 
   610  0D8F                     	;# 
   611  0D90                     	;# 
   612  0D91                     	;# 
   613  0D91                     	;# 
   614  0D92                     	;# 
   615  0D93                     	;# 
   616  0D93                     	;# 
   617  0D94                     	;# 
   618  0D95                     	;# 
   619  0D95                     	;# 
   620  0D96                     	;# 
   621  0D97                     	;# 
   622  0D97                     	;# 
   623  0D98                     	;# 
   624  0D99                     	;# 
   625  0D99                     	;# 
   626  0D9A                     	;# 
   627  0D9B                     	;# 
   628  0D9C                     	;# 
   629  0D9C                     	;# 
   630  0D9D                     	;# 
   631  0D9D                     	;# 
   632  0D9E                     	;# 
   633  0D9F                     	;# 
   634  0DA0                     	;# 
   635  0DA1                     	;# 
   636  0DA1                     	;# 
   637  0DA2                     	;# 
   638  0DA3                     	;# 
   639  0DA3                     	;# 
   640  0DA4                     	;# 
   641  0DA5                     	;# 
   642  0DA5                     	;# 
   643  0DA6                     	;# 
   644  0DA7                     	;# 
   645  0DA7                     	;# 
   646  0DA8                     	;# 
   647  0DA9                     	;# 
   648  0DA9                     	;# 
   649  0DAA                     	;# 
   650  0DAB                     	;# 
   651  0DAC                     	;# 
   652  0DAC                     	;# 
   653  0DAD                     	;# 
   654  0DAD                     	;# 
   655  0DAE                     	;# 
   656  0DAF                     	;# 
   657  0DB0                     	;# 
   658  0DB1                     	;# 
   659  0DB1                     	;# 
   660  0DB2                     	;# 
   661  0DB3                     	;# 
   662  0DB3                     	;# 
   663  0DB4                     	;# 
   664  0DB5                     	;# 
   665  0DB5                     	;# 
   666  0DB6                     	;# 
   667  0DB7                     	;# 
   668  0DB7                     	;# 
   669  0DB8                     	;# 
   670  0DB9                     	;# 
   671  0DB9                     	;# 
   672  0DBA                     	;# 
   673  0DBB                     	;# 
   674  0DBC                     	;# 
   675  0DBC                     	;# 
   676  0DBD                     	;# 
   677  0DBD                     	;# 
   678  0DBE                     	;# 
   679  0DBF                     	;# 
   680  0DC0                     	;# 
   681  0DC1                     	;# 
   682  0DC1                     	;# 
   683  0DC2                     	;# 
   684  0DC3                     	;# 
   685  0DC3                     	;# 
   686  0DC4                     	;# 
   687  0DC5                     	;# 
   688  0DC5                     	;# 
   689  0DC6                     	;# 
   690  0DC7                     	;# 
   691  0DC7                     	;# 
   692  0DC8                     	;# 
   693  0DC9                     	;# 
   694  0DC9                     	;# 
   695  0DCA                     	;# 
   696  0DCB                     	;# 
   697  0DCC                     	;# 
   698  0DCC                     	;# 
   699  0DCD                     	;# 
   700  0DCD                     	;# 
   701  0DCE                     	;# 
   702  0DCF                     	;# 
   703  0DD0                     	;# 
   704  0E0F                     	;# 
   705  0E10                     	;# 
   706  0E11                     	;# 
   707  0E12                     	;# 
   708  0E13                     	;# 
   709  0E14                     	;# 
   710  0E15                     	;# 
   711  0E16                     	;# 
   712  0E17                     	;# 
   713  0E90                     	;# 
   714  0E91                     	;# 
   715  0E92                     	;# 
   716  0E94                     	;# 
   717  0E95                     	;# 
   718  0EA0                     	;# 
   719  0EA1                     	;# 
   720  0EA2                     	;# 
   721  0EA3                     	;# 
   722  0EA4                     	;# 
   723  0EA5                     	;# 
   724  0FE4                     	;# 
   725  0FE5                     	;# 
   726  0FE6                     	;# 
   727  0FE7                     	;# 
   728  0FE8                     	;# 
   729  0FE8                     	;# 
   730  0FE9                     	;# 
   731  0FEA                     	;# 
   732  0FEA                     	;# 
   733  0FEB                     	;# 
   734  0FED                     	;# 
   735  0FEE                     	;# 
   736  0FEE                     	;# 
   737  0FEF                     	;# 
   738  0000                     	;# 
   739  0001                     	;# 
   740  0002                     	;# 
   741  0003                     	;# 
   742  0004                     	;# 
   743  0005                     	;# 
   744  0006                     	;# 
   745  0007                     	;# 
   746  0008                     	;# 
   747  0009                     	;# 
   748  000A                     	;# 
   749  000B                     	;# 
   750  000C                     	;# 
   751  000E                     	;# 
   752  0011                     	;# 
   753  0012                     	;# 
   754  0013                     	;# 
   755  0015                     	;# 
   756  0016                     	;# 
   757  0016                     	;# 
   758  0017                     	;# 
   759  0018                     	;# 
   760  0019                     	;# 
   761  001A                     	;# 
   762  001B                     	;# 
   763  001C                     	;# 
   764  008C                     	;# 
   765  008E                     	;# 
   766  0091                     	;# 
   767  0092                     	;# 
   768  0093                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  009F                     	;# 
   781  010C                     	;# 
   782  010E                     	;# 
   783  0111                     	;# 
   784  0112                     	;# 
   785  0113                     	;# 
   786  0114                     	;# 
   787  0115                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  0118                     	;# 
   791  0119                     	;# 
   792  018C                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0197                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019C                     	;# 
   808  019D                     	;# 
   809  019E                     	;# 
   810  019F                     	;# 
   811  020C                     	;# 
   812  020E                     	;# 
   813  028C                     	;# 
   814  028E                     	;# 
   815  030C                     	;# 
   816  030E                     	;# 
   817  038C                     	;# 
   818  038E                     	;# 
   819  0391                     	;# 
   820  0392                     	;# 
   821  0393                     	;# 
   822  0397                     	;# 
   823  0398                     	;# 
   824  0399                     	;# 
   825  0691                     	;# 
   826  0692                     	;# 
   827  0693                     	;# 
   828  0694                     	;# 
   829  0695                     	;# 
   830  0D8E                     	;# 
   831  0D8F                     	;# 
   832  0D90                     	;# 
   833  0D91                     	;# 
   834  0D91                     	;# 
   835  0D92                     	;# 
   836  0D93                     	;# 
   837  0D93                     	;# 
   838  0D94                     	;# 
   839  0D95                     	;# 
   840  0D95                     	;# 
   841  0D96                     	;# 
   842  0D97                     	;# 
   843  0D97                     	;# 
   844  0D98                     	;# 
   845  0D99                     	;# 
   846  0D99                     	;# 
   847  0D9A                     	;# 
   848  0D9B                     	;# 
   849  0D9C                     	;# 
   850  0D9C                     	;# 
   851  0D9D                     	;# 
   852  0D9D                     	;# 
   853  0D9E                     	;# 
   854  0D9F                     	;# 
   855  0DA0                     	;# 
   856  0DA1                     	;# 
   857  0DA1                     	;# 
   858  0DA2                     	;# 
   859  0DA3                     	;# 
   860  0DA3                     	;# 
   861  0DA4                     	;# 
   862  0DA5                     	;# 
   863  0DA5                     	;# 
   864  0DA6                     	;# 
   865  0DA7                     	;# 
   866  0DA7                     	;# 
   867  0DA8                     	;# 
   868  0DA9                     	;# 
   869  0DA9                     	;# 
   870  0DAA                     	;# 
   871  0DAB                     	;# 
   872  0DAC                     	;# 
   873  0DAC                     	;# 
   874  0DAD                     	;# 
   875  0DAD                     	;# 
   876  0DAE                     	;# 
   877  0DAF                     	;# 
   878  0DB0                     	;# 
   879  0DB1                     	;# 
   880  0DB1                     	;# 
   881  0DB2                     	;# 
   882  0DB3                     	;# 
   883  0DB3                     	;# 
   884  0DB4                     	;# 
   885  0DB5                     	;# 
   886  0DB5                     	;# 
   887  0DB6                     	;# 
   888  0DB7                     	;# 
   889  0DB7                     	;# 
   890  0DB8                     	;# 
   891  0DB9                     	;# 
   892  0DB9                     	;# 
   893  0DBA                     	;# 
   894  0DBB                     	;# 
   895  0DBC                     	;# 
   896  0DBC                     	;# 
   897  0DBD                     	;# 
   898  0DBD                     	;# 
   899  0DBE                     	;# 
   900  0DBF                     	;# 
   901  0DC0                     	;# 
   902  0DC1                     	;# 
   903  0DC1                     	;# 
   904  0DC2                     	;# 
   905  0DC3                     	;# 
   906  0DC3                     	;# 
   907  0DC4                     	;# 
   908  0DC5                     	;# 
   909  0DC5                     	;# 
   910  0DC6                     	;# 
   911  0DC7                     	;# 
   912  0DC7                     	;# 
   913  0DC8                     	;# 
   914  0DC9                     	;# 
   915  0DC9                     	;# 
   916  0DCA                     	;# 
   917  0DCB                     	;# 
   918  0DCC                     	;# 
   919  0DCC                     	;# 
   920  0DCD                     	;# 
   921  0DCD                     	;# 
   922  0DCE                     	;# 
   923  0DCF                     	;# 
   924  0DD0                     	;# 
   925  0E0F                     	;# 
   926  0E10                     	;# 
   927  0E11                     	;# 
   928  0E12                     	;# 
   929  0E13                     	;# 
   930  0E14                     	;# 
   931  0E15                     	;# 
   932  0E16                     	;# 
   933  0E17                     	;# 
   934  0E90                     	;# 
   935  0E91                     	;# 
   936  0E92                     	;# 
   937  0E94                     	;# 
   938  0E95                     	;# 
   939  0EA0                     	;# 
   940  0EA1                     	;# 
   941  0EA2                     	;# 
   942  0EA3                     	;# 
   943  0EA4                     	;# 
   944  0EA5                     	;# 
   945  0FE4                     	;# 
   946  0FE5                     	;# 
   947  0FE6                     	;# 
   948  0FE7                     	;# 
   949  0FE8                     	;# 
   950  0FE8                     	;# 
   951  0FE9                     	;# 
   952  0FEA                     	;# 
   953  0FEA                     	;# 
   954  0FEB                     	;# 
   955  0FED                     	;# 
   956  0FEE                     	;# 
   957  0FEE                     	;# 
   958  0FEF                     	;# 
   959  0000                     	;# 
   960  0001                     	;# 
   961  0002                     	;# 
   962  0003                     	;# 
   963  0004                     	;# 
   964  0005                     	;# 
   965  0006                     	;# 
   966  0007                     	;# 
   967  0008                     	;# 
   968  0009                     	;# 
   969  000A                     	;# 
   970  000B                     	;# 
   971  000C                     	;# 
   972  000E                     	;# 
   973  0011                     	;# 
   974  0012                     	;# 
   975  0013                     	;# 
   976  0015                     	;# 
   977  0016                     	;# 
   978  0016                     	;# 
   979  0017                     	;# 
   980  0018                     	;# 
   981  0019                     	;# 
   982  001A                     	;# 
   983  001B                     	;# 
   984  001C                     	;# 
   985  008C                     	;# 
   986  008E                     	;# 
   987  0091                     	;# 
   988  0092                     	;# 
   989  0093                     	;# 
   990  0095                     	;# 
   991  0096                     	;# 
   992  0097                     	;# 
   993  0098                     	;# 
   994  0099                     	;# 
   995  009A                     	;# 
   996  009B                     	;# 
   997  009B                     	;# 
   998  009C                     	;# 
   999  009D                     	;# 
  1000  009E                     	;# 
  1001  009F                     	;# 
  1002  010C                     	;# 
  1003  010E                     	;# 
  1004  0111                     	;# 
  1005  0112                     	;# 
  1006  0113                     	;# 
  1007  0114                     	;# 
  1008  0115                     	;# 
  1009  0116                     	;# 
  1010  0117                     	;# 
  1011  0118                     	;# 
  1012  0119                     	;# 
  1013  018C                     	;# 
  1014  018E                     	;# 
  1015  0191                     	;# 
  1016  0191                     	;# 
  1017  0192                     	;# 
  1018  0193                     	;# 
  1019  0193                     	;# 
  1020  0194                     	;# 
  1021  0195                     	;# 
  1022  0196                     	;# 
  1023  0197                     	;# 
  1024  0199                     	;# 
  1025  019A                     	;# 
  1026  019B                     	;# 
  1027  019B                     	;# 
  1028  019C                     	;# 
  1029  019D                     	;# 
  1030  019E                     	;# 
  1031  019F                     	;# 
  1032  020C                     	;# 
  1033  020E                     	;# 
  1034  028C                     	;# 
  1035  028E                     	;# 
  1036  030C                     	;# 
  1037  030E                     	;# 
  1038  038C                     	;# 
  1039  038E                     	;# 
  1040  0391                     	;# 
  1041  0392                     	;# 
  1042  0393                     	;# 
  1043  0397                     	;# 
  1044  0398                     	;# 
  1045  0399                     	;# 
  1046  0691                     	;# 
  1047  0692                     	;# 
  1048  0693                     	;# 
  1049  0694                     	;# 
  1050  0695                     	;# 
  1051  0D8E                     	;# 
  1052  0D8F                     	;# 
  1053  0D90                     	;# 
  1054  0D91                     	;# 
  1055  0D91                     	;# 
  1056  0D92                     	;# 
  1057  0D93                     	;# 
  1058  0D93                     	;# 
  1059  0D94                     	;# 
  1060  0D95                     	;# 
  1061  0D95                     	;# 
  1062  0D96                     	;# 
  1063  0D97                     	;# 
  1064  0D97                     	;# 
  1065  0D98                     	;# 
  1066  0D99                     	;# 
  1067  0D99                     	;# 
  1068  0D9A                     	;# 
  1069  0D9B                     	;# 
  1070  0D9C                     	;# 
  1071  0D9C                     	;# 
  1072  0D9D                     	;# 
  1073  0D9D                     	;# 
  1074  0D9E                     	;# 
  1075  0D9F                     	;# 
  1076  0DA0                     	;# 
  1077  0DA1                     	;# 
  1078  0DA1                     	;# 
  1079  0DA2                     	;# 
  1080  0DA3                     	;# 
  1081  0DA3                     	;# 
  1082  0DA4                     	;# 
  1083  0DA5                     	;# 
  1084  0DA5                     	;# 
  1085  0DA6                     	;# 
  1086  0DA7                     	;# 
  1087  0DA7                     	;# 
  1088  0DA8                     	;# 
  1089  0DA9                     	;# 
  1090  0DA9                     	;# 
  1091  0DAA                     	;# 
  1092  0DAB                     	;# 
  1093  0DAC                     	;# 
  1094  0DAC                     	;# 
  1095  0DAD                     	;# 
  1096  0DAD                     	;# 
  1097  0DAE                     	;# 
  1098  0DAF                     	;# 
  1099  0DB0                     	;# 
  1100  0DB1                     	;# 
  1101  0DB1                     	;# 
  1102  0DB2                     	;# 
  1103  0DB3                     	;# 
  1104  0DB3                     	;# 
  1105  0DB4                     	;# 
  1106  0DB5                     	;# 
  1107  0DB5                     	;# 
  1108  0DB6                     	;# 
  1109  0DB7                     	;# 
  1110  0DB7                     	;# 
  1111  0DB8                     	;# 
  1112  0DB9                     	;# 
  1113  0DB9                     	;# 
  1114  0DBA                     	;# 
  1115  0DBB                     	;# 
  1116  0DBC                     	;# 
  1117  0DBC                     	;# 
  1118  0DBD                     	;# 
  1119  0DBD                     	;# 
  1120  0DBE                     	;# 
  1121  0DBF                     	;# 
  1122  0DC0                     	;# 
  1123  0DC1                     	;# 
  1124  0DC1                     	;# 
  1125  0DC2                     	;# 
  1126  0DC3                     	;# 
  1127  0DC3                     	;# 
  1128  0DC4                     	;# 
  1129  0DC5                     	;# 
  1130  0DC5                     	;# 
  1131  0DC6                     	;# 
  1132  0DC7                     	;# 
  1133  0DC7                     	;# 
  1134  0DC8                     	;# 
  1135  0DC9                     	;# 
  1136  0DC9                     	;# 
  1137  0DCA                     	;# 
  1138  0DCB                     	;# 
  1139  0DCC                     	;# 
  1140  0DCC                     	;# 
  1141  0DCD                     	;# 
  1142  0DCD                     	;# 
  1143  0DCE                     	;# 
  1144  0DCF                     	;# 
  1145  0DD0                     	;# 
  1146  0E0F                     	;# 
  1147  0E10                     	;# 
  1148  0E11                     	;# 
  1149  0E12                     	;# 
  1150  0E13                     	;# 
  1151  0E14                     	;# 
  1152  0E15                     	;# 
  1153  0E16                     	;# 
  1154  0E17                     	;# 
  1155  0E90                     	;# 
  1156  0E91                     	;# 
  1157  0E92                     	;# 
  1158  0E94                     	;# 
  1159  0E95                     	;# 
  1160  0EA0                     	;# 
  1161  0EA1                     	;# 
  1162  0EA2                     	;# 
  1163  0EA3                     	;# 
  1164  0EA4                     	;# 
  1165  0EA5                     	;# 
  1166  0FE4                     	;# 
  1167  0FE5                     	;# 
  1168  0FE6                     	;# 
  1169  0FE7                     	;# 
  1170  0FE8                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEE                     	;# 
  1179  0FEF                     	;# 
  1180  0000                     	;# 
  1181  0001                     	;# 
  1182  0002                     	;# 
  1183  0003                     	;# 
  1184  0004                     	;# 
  1185  0005                     	;# 
  1186  0006                     	;# 
  1187  0007                     	;# 
  1188  0008                     	;# 
  1189  0009                     	;# 
  1190  000A                     	;# 
  1191  000B                     	;# 
  1192  000C                     	;# 
  1193  000E                     	;# 
  1194  0011                     	;# 
  1195  0012                     	;# 
  1196  0013                     	;# 
  1197  0015                     	;# 
  1198  0016                     	;# 
  1199  0016                     	;# 
  1200  0017                     	;# 
  1201  0018                     	;# 
  1202  0019                     	;# 
  1203  001A                     	;# 
  1204  001B                     	;# 
  1205  001C                     	;# 
  1206  008C                     	;# 
  1207  008E                     	;# 
  1208  0091                     	;# 
  1209  0092                     	;# 
  1210  0093                     	;# 
  1211  0095                     	;# 
  1212  0096                     	;# 
  1213  0097                     	;# 
  1214  0098                     	;# 
  1215  0099                     	;# 
  1216  009A                     	;# 
  1217  009B                     	;# 
  1218  009B                     	;# 
  1219  009C                     	;# 
  1220  009D                     	;# 
  1221  009E                     	;# 
  1222  009F                     	;# 
  1223  010C                     	;# 
  1224  010E                     	;# 
  1225  0111                     	;# 
  1226  0112                     	;# 
  1227  0113                     	;# 
  1228  0114                     	;# 
  1229  0115                     	;# 
  1230  0116                     	;# 
  1231  0117                     	;# 
  1232  0118                     	;# 
  1233  0119                     	;# 
  1234  018C                     	;# 
  1235  018E                     	;# 
  1236  0191                     	;# 
  1237  0191                     	;# 
  1238  0192                     	;# 
  1239  0193                     	;# 
  1240  0193                     	;# 
  1241  0194                     	;# 
  1242  0195                     	;# 
  1243  0196                     	;# 
  1244  0197                     	;# 
  1245  0199                     	;# 
  1246  019A                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  019D                     	;# 
  1251  019E                     	;# 
  1252  019F                     	;# 
  1253  020C                     	;# 
  1254  020E                     	;# 
  1255  028C                     	;# 
  1256  028E                     	;# 
  1257  030C                     	;# 
  1258  030E                     	;# 
  1259  038C                     	;# 
  1260  038E                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0397                     	;# 
  1265  0398                     	;# 
  1266  0399                     	;# 
  1267  0691                     	;# 
  1268  0692                     	;# 
  1269  0693                     	;# 
  1270  0694                     	;# 
  1271  0695                     	;# 
  1272  0D8E                     	;# 
  1273  0D8F                     	;# 
  1274  0D90                     	;# 
  1275  0D91                     	;# 
  1276  0D91                     	;# 
  1277  0D92                     	;# 
  1278  0D93                     	;# 
  1279  0D93                     	;# 
  1280  0D94                     	;# 
  1281  0D95                     	;# 
  1282  0D95                     	;# 
  1283  0D96                     	;# 
  1284  0D97                     	;# 
  1285  0D97                     	;# 
  1286  0D98                     	;# 
  1287  0D99                     	;# 
  1288  0D99                     	;# 
  1289  0D9A                     	;# 
  1290  0D9B                     	;# 
  1291  0D9C                     	;# 
  1292  0D9C                     	;# 
  1293  0D9D                     	;# 
  1294  0D9D                     	;# 
  1295  0D9E                     	;# 
  1296  0D9F                     	;# 
  1297  0DA0                     	;# 
  1298  0DA1                     	;# 
  1299  0DA1                     	;# 
  1300  0DA2                     	;# 
  1301  0DA3                     	;# 
  1302  0DA3                     	;# 
  1303  0DA4                     	;# 
  1304  0DA5                     	;# 
  1305  0DA5                     	;# 
  1306  0DA6                     	;# 
  1307  0DA7                     	;# 
  1308  0DA7                     	;# 
  1309  0DA8                     	;# 
  1310  0DA9                     	;# 
  1311  0DA9                     	;# 
  1312  0DAA                     	;# 
  1313  0DAB                     	;# 
  1314  0DAC                     	;# 
  1315  0DAC                     	;# 
  1316  0DAD                     	;# 
  1317  0DAD                     	;# 
  1318  0DAE                     	;# 
  1319  0DAF                     	;# 
  1320  0DB0                     	;# 
  1321  0DB1                     	;# 
  1322  0DB1                     	;# 
  1323  0DB2                     	;# 
  1324  0DB3                     	;# 
  1325  0DB3                     	;# 
  1326  0DB4                     	;# 
  1327  0DB5                     	;# 
  1328  0DB5                     	;# 
  1329  0DB6                     	;# 
  1330  0DB7                     	;# 
  1331  0DB7                     	;# 
  1332  0DB8                     	;# 
  1333  0DB9                     	;# 
  1334  0DB9                     	;# 
  1335  0DBA                     	;# 
  1336  0DBB                     	;# 
  1337  0DBC                     	;# 
  1338  0DBC                     	;# 
  1339  0DBD                     	;# 
  1340  0DBD                     	;# 
  1341  0DBE                     	;# 
  1342  0DBF                     	;# 
  1343  0DC0                     	;# 
  1344  0DC1                     	;# 
  1345  0DC1                     	;# 
  1346  0DC2                     	;# 
  1347  0DC3                     	;# 
  1348  0DC3                     	;# 
  1349  0DC4                     	;# 
  1350  0DC5                     	;# 
  1351  0DC5                     	;# 
  1352  0DC6                     	;# 
  1353  0DC7                     	;# 
  1354  0DC7                     	;# 
  1355  0DC8                     	;# 
  1356  0DC9                     	;# 
  1357  0DC9                     	;# 
  1358  0DCA                     	;# 
  1359  0DCB                     	;# 
  1360  0DCC                     	;# 
  1361  0DCC                     	;# 
  1362  0DCD                     	;# 
  1363  0DCD                     	;# 
  1364  0DCE                     	;# 
  1365  0DCF                     	;# 
  1366  0DD0                     	;# 
  1367  0E0F                     	;# 
  1368  0E10                     	;# 
  1369  0E11                     	;# 
  1370  0E12                     	;# 
  1371  0E13                     	;# 
  1372  0E14                     	;# 
  1373  0E15                     	;# 
  1374  0E16                     	;# 
  1375  0E17                     	;# 
  1376  0E90                     	;# 
  1377  0E91                     	;# 
  1378  0E92                     	;# 
  1379  0E94                     	;# 
  1380  0E95                     	;# 
  1381  0EA0                     	;# 
  1382  0EA1                     	;# 
  1383  0EA2                     	;# 
  1384  0EA3                     	;# 
  1385  0EA4                     	;# 
  1386  0EA5                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE8                     	;# 
  1393  0FE9                     	;# 
  1394  0FEA                     	;# 
  1395  0FEA                     	;# 
  1396  0FEB                     	;# 
  1397  0FED                     	;# 
  1398  0FEE                     	;# 
  1399  0FEE                     	;# 
  1400  0FEF                     	;# 
  1401  0000                     	;# 
  1402  0001                     	;# 
  1403  0002                     	;# 
  1404  0003                     	;# 
  1405  0004                     	;# 
  1406  0005                     	;# 
  1407  0006                     	;# 
  1408  0007                     	;# 
  1409  0008                     	;# 
  1410  0009                     	;# 
  1411  000A                     	;# 
  1412  000B                     	;# 
  1413  000C                     	;# 
  1414  000E                     	;# 
  1415  0011                     	;# 
  1416  0012                     	;# 
  1417  0013                     	;# 
  1418  0015                     	;# 
  1419  0016                     	;# 
  1420  0016                     	;# 
  1421  0017                     	;# 
  1422  0018                     	;# 
  1423  0019                     	;# 
  1424  001A                     	;# 
  1425  001B                     	;# 
  1426  001C                     	;# 
  1427  008C                     	;# 
  1428  008E                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0093                     	;# 
  1432  0095                     	;# 
  1433  0096                     	;# 
  1434  0097                     	;# 
  1435  0098                     	;# 
  1436  0099                     	;# 
  1437  009A                     	;# 
  1438  009B                     	;# 
  1439  009B                     	;# 
  1440  009C                     	;# 
  1441  009D                     	;# 
  1442  009E                     	;# 
  1443  009F                     	;# 
  1444  010C                     	;# 
  1445  010E                     	;# 
  1446  0111                     	;# 
  1447  0112                     	;# 
  1448  0113                     	;# 
  1449  0114                     	;# 
  1450  0115                     	;# 
  1451  0116                     	;# 
  1452  0117                     	;# 
  1453  0118                     	;# 
  1454  0119                     	;# 
  1455  018C                     	;# 
  1456  018E                     	;# 
  1457  0191                     	;# 
  1458  0191                     	;# 
  1459  0192                     	;# 
  1460  0193                     	;# 
  1461  0193                     	;# 
  1462  0194                     	;# 
  1463  0195                     	;# 
  1464  0196                     	;# 
  1465  0197                     	;# 
  1466  0199                     	;# 
  1467  019A                     	;# 
  1468  019B                     	;# 
  1469  019B                     	;# 
  1470  019C                     	;# 
  1471  019D                     	;# 
  1472  019E                     	;# 
  1473  019F                     	;# 
  1474  020C                     	;# 
  1475  020E                     	;# 
  1476  028C                     	;# 
  1477  028E                     	;# 
  1478  030C                     	;# 
  1479  030E                     	;# 
  1480  038C                     	;# 
  1481  038E                     	;# 
  1482  0391                     	;# 
  1483  0392                     	;# 
  1484  0393                     	;# 
  1485  0397                     	;# 
  1486  0398                     	;# 
  1487  0399                     	;# 
  1488  0691                     	;# 
  1489  0692                     	;# 
  1490  0693                     	;# 
  1491  0694                     	;# 
  1492  0695                     	;# 
  1493  0D8E                     	;# 
  1494  0D8F                     	;# 
  1495  0D90                     	;# 
  1496  0D91                     	;# 
  1497  0D91                     	;# 
  1498  0D92                     	;# 
  1499  0D93                     	;# 
  1500  0D93                     	;# 
  1501  0D94                     	;# 
  1502  0D95                     	;# 
  1503  0D95                     	;# 
  1504  0D96                     	;# 
  1505  0D97                     	;# 
  1506  0D97                     	;# 
  1507  0D98                     	;# 
  1508  0D99                     	;# 
  1509  0D99                     	;# 
  1510  0D9A                     	;# 
  1511  0D9B                     	;# 
  1512  0D9C                     	;# 
  1513  0D9C                     	;# 
  1514  0D9D                     	;# 
  1515  0D9D                     	;# 
  1516  0D9E                     	;# 
  1517  0D9F                     	;# 
  1518  0DA0                     	;# 
  1519  0DA1                     	;# 
  1520  0DA1                     	;# 
  1521  0DA2                     	;# 
  1522  0DA3                     	;# 
  1523  0DA3                     	;# 
  1524  0DA4                     	;# 
  1525  0DA5                     	;# 
  1526  0DA5                     	;# 
  1527  0DA6                     	;# 
  1528  0DA7                     	;# 
  1529  0DA7                     	;# 
  1530  0DA8                     	;# 
  1531  0DA9                     	;# 
  1532  0DA9                     	;# 
  1533  0DAA                     	;# 
  1534  0DAB                     	;# 
  1535  0DAC                     	;# 
  1536  0DAC                     	;# 
  1537  0DAD                     	;# 
  1538  0DAD                     	;# 
  1539  0DAE                     	;# 
  1540  0DAF                     	;# 
  1541  0DB0                     	;# 
  1542  0DB1                     	;# 
  1543  0DB1                     	;# 
  1544  0DB2                     	;# 
  1545  0DB3                     	;# 
  1546  0DB3                     	;# 
  1547  0DB4                     	;# 
  1548  0DB5                     	;# 
  1549  0DB5                     	;# 
  1550  0DB6                     	;# 
  1551  0DB7                     	;# 
  1552  0DB7                     	;# 
  1553  0DB8                     	;# 
  1554  0DB9                     	;# 
  1555  0DB9                     	;# 
  1556  0DBA                     	;# 
  1557  0DBB                     	;# 
  1558  0DBC                     	;# 
  1559  0DBC                     	;# 
  1560  0DBD                     	;# 
  1561  0DBD                     	;# 
  1562  0DBE                     	;# 
  1563  0DBF                     	;# 
  1564  0DC0                     	;# 
  1565  0DC1                     	;# 
  1566  0DC1                     	;# 
  1567  0DC2                     	;# 
  1568  0DC3                     	;# 
  1569  0DC3                     	;# 
  1570  0DC4                     	;# 
  1571  0DC5                     	;# 
  1572  0DC5                     	;# 
  1573  0DC6                     	;# 
  1574  0DC7                     	;# 
  1575  0DC7                     	;# 
  1576  0DC8                     	;# 
  1577  0DC9                     	;# 
  1578  0DC9                     	;# 
  1579  0DCA                     	;# 
  1580  0DCB                     	;# 
  1581  0DCC                     	;# 
  1582  0DCC                     	;# 
  1583  0DCD                     	;# 
  1584  0DCD                     	;# 
  1585  0DCE                     	;# 
  1586  0DCF                     	;# 
  1587  0DD0                     	;# 
  1588  0E0F                     	;# 
  1589  0E10                     	;# 
  1590  0E11                     	;# 
  1591  0E12                     	;# 
  1592  0E13                     	;# 
  1593  0E14                     	;# 
  1594  0E15                     	;# 
  1595  0E16                     	;# 
  1596  0E17                     	;# 
  1597  0E90                     	;# 
  1598  0E91                     	;# 
  1599  0E92                     	;# 
  1600  0E94                     	;# 
  1601  0E95                     	;# 
  1602  0EA0                     	;# 
  1603  0EA1                     	;# 
  1604  0EA2                     	;# 
  1605  0EA3                     	;# 
  1606  0EA4                     	;# 
  1607  0EA5                     	;# 
  1608  0FE4                     	;# 
  1609  0FE5                     	;# 
  1610  0FE6                     	;# 
  1611  0FE7                     	;# 
  1612  0FE8                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEA                     	;# 
  1617  0FEB                     	;# 
  1618  0FED                     	;# 
  1619  0FEE                     	;# 
  1620  0FEE                     	;# 
  1621  0FEF                     	;_PD
  1622                           
  1623                           	psect	idataBANK1
  1624  0000                     __pidataBANK1:	
  1625                           
  1626                           	psect	idataBANK2
  1627  0000                     __pidataBANK2:	
  1628                           
  1629                           	psect	idataBANK3
  1630  02AD                     __pidataBANK3:	
  1631                           
  1632                           ;initializer for _DMX_repeat_hereditary
  1633  02AD  3400               	retlw	0
  1634  02AE  3400               	retlw	0
  1635  02AF  3440               	retlw	64
  1636  02B0  3400               	retlw	0
  1637  02B1  3400               	retlw	0
  1638  02B2  3400               	retlw	0
  1639  02B3  3400               	retlw	0
  1640  02B4  3400               	retlw	0
  1641  02B5  3400               	retlw	0
  1642  02B6  3400               	retlw	0
  1643  02B7  3400               	retlw	0
  1644  02B8  3400               	retlw	0
  1645                           
  1646                           ;initializer for _DMX_Repeat
  1647  02B9  3401               	retlw	1
  1648  02BA  3400               	retlw	0
  1649  02BB  3400               	retlw	0
  1650  02BC  3400               	retlw	0
  1651  02BD  3400               	retlw	0
  1652  02BE  3400               	retlw	0
  1653  02BF  3400               	retlw	0
  1654  02C0  3400               	retlw	0
  1655                           
  1656                           	psect	idataBANK4
  1657  028D                     __pidataBANK4:	
  1658                           
  1659                           ;initializer for _DEVICE_LABEL
  1660  028D  344D               	retlw	77
  1661  028E  3445               	retlw	69
  1662  028F  3454               	retlw	84
  1663  0290  3445               	retlw	69
  1664  0291  344F               	retlw	79
  1665  0292  3452               	retlw	82
  1666  0293  3420               	retlw	32
  1667  0294  3444               	retlw	68
  1668  0295  3452               	retlw	82
  1669  0296  3449               	retlw	73
  1670  0297  3456               	retlw	86
  1671  0298  3445               	retlw	69
  1672  0299  3452               	retlw	82
  1673  029A  3400               	retlw	0
  1674  029B  3400               	retlw	0
  1675  029C  3400               	retlw	0
  1676  029D  3400               	retlw	0
  1677  029E  3400               	retlw	0
  1678  029F  3400               	retlw	0
  1679  02A0  3400               	retlw	0
  1680  02A1  3400               	retlw	0
  1681  02A2  3400               	retlw	0
  1682  02A3  3400               	retlw	0
  1683  02A4  3400               	retlw	0
  1684  02A5  3400               	retlw	0
  1685  02A6  3400               	retlw	0
  1686  02A7  3400               	retlw	0
  1687  02A8  3400               	retlw	0
  1688  02A9  3400               	retlw	0
  1689  02AA  3400               	retlw	0
  1690  02AB  3400               	retlw	0
  1691  02AC  3400               	retlw	0
  1692                           
  1693                           	psect	stringtext
  1694  1800                     __pstringtext:	
  1695  1800                     _PWM:	
  1696  1800  3400               	retlw	0
  1697  1801  3400               	retlw	0
  1698  1802  34C8               	retlw	200
  1699  1803  3400               	retlw	0
  1700  1804  34CC               	retlw	204
  1701  1805  3400               	retlw	0
  1702  1806  34D1               	retlw	209
  1703  1807  3400               	retlw	0
  1704  1808  34D6               	retlw	214
  1705  1809  3400               	retlw	0
  1706  180A  34DB               	retlw	219
  1707  180B  3400               	retlw	0
  1708  180C  34E1               	retlw	225
  1709  180D  3400               	retlw	0
  1710  180E  34E6               	retlw	230
  1711  180F  3400               	retlw	0
  1712  1810  34EC               	retlw	236
  1713  1811  3400               	retlw	0
  1714  1812  34F1               	retlw	241
  1715  1813  3400               	retlw	0
  1716  1814  34F7               	retlw	247
  1717  1815  3400               	retlw	0
  1718  1816  34FD               	retlw	253
  1719  1817  3400               	retlw	0
  1720  1818  3403               	retlw	3
  1721  1819  3401               	retlw	1
  1722  181A  3409               	retlw	9
  1723  181B  3401               	retlw	1
  1724  181C  3410               	retlw	16
  1725  181D  3401               	retlw	1
  1726  181E  3416               	retlw	22
  1727  181F  3401               	retlw	1
  1728  1820  341D               	retlw	29
  1729  1821  3401               	retlw	1
  1730  1822  3424               	retlw	36
  1731  1823  3401               	retlw	1
  1732  1824  342B               	retlw	43
  1733  1825  3401               	retlw	1
  1734  1826  3432               	retlw	50
  1735  1827  3401               	retlw	1
  1736  1828  3439               	retlw	57
  1737  1829  3401               	retlw	1
  1738  182A  3441               	retlw	65
  1739  182B  3401               	retlw	1
  1740  182C  3449               	retlw	73
  1741  182D  3401               	retlw	1
  1742  182E  3451               	retlw	81
  1743  182F  3401               	retlw	1
  1744  1830  3459               	retlw	89
  1745  1831  3401               	retlw	1
  1746  1832  3461               	retlw	97
  1747  1833  3401               	retlw	1
  1748  1834  346A               	retlw	106
  1749  1835  3401               	retlw	1
  1750  1836  3472               	retlw	114
  1751  1837  3401               	retlw	1
  1752  1838  347B               	retlw	123
  1753  1839  3401               	retlw	1
  1754  183A  3484               	retlw	132
  1755  183B  3401               	retlw	1
  1756  183C  348E               	retlw	142
  1757  183D  3401               	retlw	1
  1758  183E  3497               	retlw	151
  1759  183F  3401               	retlw	1
  1760  1840  34A1               	retlw	161
  1761  1841  3401               	retlw	1
  1762  1842  34AB               	retlw	171
  1763  1843  3401               	retlw	1
  1764  1844  34B5               	retlw	181
  1765  1845  3401               	retlw	1
  1766  1846  34C0               	retlw	192
  1767  1847  3401               	retlw	1
  1768  1848  34CB               	retlw	203
  1769  1849  3401               	retlw	1
  1770  184A  34D6               	retlw	214
  1771  184B  3401               	retlw	1
  1772  184C  34E1               	retlw	225
  1773  184D  3401               	retlw	1
  1774  184E  34EC               	retlw	236
  1775  184F  3401               	retlw	1
  1776  1850  34F8               	retlw	248
  1777  1851  3401               	retlw	1
  1778  1852  3404               	retlw	4
  1779  1853  3402               	retlw	2
  1780  1854  3411               	retlw	17
  1781  1855  3402               	retlw	2
  1782  1856  341E               	retlw	30
  1783  1857  3402               	retlw	2
  1784  1858  342B               	retlw	43
  1785  1859  3402               	retlw	2
  1786  185A  3438               	retlw	56
  1787  185B  3402               	retlw	2
  1788  185C  3446               	retlw	70
  1789  185D  3402               	retlw	2
  1790  185E  3454               	retlw	84
  1791  185F  3402               	retlw	2
  1792  1860  3462               	retlw	98
  1793  1861  3402               	retlw	2
  1794  1862  3470               	retlw	112
  1795  1863  3402               	retlw	2
  1796  1864  3480               	retlw	128
  1797  1865  3402               	retlw	2
  1798  1866  348F               	retlw	143
  1799  1867  3402               	retlw	2
  1800  1868  349F               	retlw	159
  1801  1869  3402               	retlw	2
  1802  186A  34AF               	retlw	175
  1803  186B  3402               	retlw	2
  1804  186C  34BF               	retlw	191
  1805  186D  3402               	retlw	2
  1806  186E  34D0               	retlw	208
  1807  186F  3402               	retlw	2
  1808  1870  34E1               	retlw	225
  1809  1871  3402               	retlw	2
  1810  1872  34F3               	retlw	243
  1811  1873  3402               	retlw	2
  1812  1874  3405               	retlw	5
  1813  1875  3403               	retlw	3
  1814  1876  3418               	retlw	24
  1815  1877  3403               	retlw	3
  1816  1878  342B               	retlw	43
  1817  1879  3403               	retlw	3
  1818  187A  343E               	retlw	62
  1819  187B  3403               	retlw	3
  1820  187C  3452               	retlw	82
  1821  187D  3403               	retlw	3
  1822  187E  3467               	retlw	103
  1823  187F  3403               	retlw	3
  1824  1880  347C               	retlw	124
  1825  1881  3403               	retlw	3
  1826  1882  3491               	retlw	145
  1827  1883  3403               	retlw	3
  1828  1884  34A7               	retlw	167
  1829  1885  3403               	retlw	3
  1830  1886  34BE               	retlw	190
  1831  1887  3403               	retlw	3
  1832  1888  34D5               	retlw	213
  1833  1889  3403               	retlw	3
  1834  188A  34EC               	retlw	236
  1835  188B  3403               	retlw	3
  1836  188C  3404               	retlw	4
  1837  188D  3404               	retlw	4
  1838  188E  341D               	retlw	29
  1839  188F  3404               	retlw	4
  1840  1890  3436               	retlw	54
  1841  1891  3404               	retlw	4
  1842  1892  3450               	retlw	80
  1843  1893  3404               	retlw	4
  1844  1894  346B               	retlw	107
  1845  1895  3404               	retlw	4
  1846  1896  3486               	retlw	134
  1847  1897  3404               	retlw	4
  1848  1898  34A2               	retlw	162
  1849  1899  3404               	retlw	4
  1850  189A  34BE               	retlw	190
  1851  189B  3404               	retlw	4
  1852  189C  34DC               	retlw	220
  1853  189D  3404               	retlw	4
  1854  189E  34F9               	retlw	249
  1855  189F  3404               	retlw	4
  1856  18A0  3418               	retlw	24
  1857  18A1  3405               	retlw	5
  1858  18A2  3437               	retlw	55
  1859  18A3  3405               	retlw	5
  1860  18A4  3457               	retlw	87
  1861  18A5  3405               	retlw	5
  1862  18A6  3478               	retlw	120
  1863  18A7  3405               	retlw	5
  1864  18A8  349A               	retlw	154
  1865  18A9  3405               	retlw	5
  1866  18AA  34BC               	retlw	188
  1867  18AB  3405               	retlw	5
  1868  18AC  34E0               	retlw	224
  1869  18AD  3405               	retlw	5
  1870  18AE  3404               	retlw	4
  1871  18AF  3406               	retlw	6
  1872  18B0  3429               	retlw	41
  1873  18B1  3406               	retlw	6
  1874  18B2  344F               	retlw	79
  1875  18B3  3406               	retlw	6
  1876  18B4  3476               	retlw	118
  1877  18B5  3406               	retlw	6
  1878  18B6  349D               	retlw	157
  1879  18B7  3406               	retlw	6
  1880  18B8  34C6               	retlw	198
  1881  18B9  3406               	retlw	6
  1882  18BA  34F0               	retlw	240
  1883  18BB  3406               	retlw	6
  1884  18BC  341A               	retlw	26
  1885  18BD  3407               	retlw	7
  1886  18BE  3446               	retlw	70
  1887  18BF  3407               	retlw	7
  1888  18C0  3473               	retlw	115
  1889  18C1  3407               	retlw	7
  1890  18C2  34A1               	retlw	161
  1891  18C3  3407               	retlw	7
  1892  18C4  34CF               	retlw	207
  1893  18C5  3407               	retlw	7
  1894  18C6  3400               	retlw	0
  1895  18C7  3408               	retlw	8
  1896  18C8  3431               	retlw	49
  1897  18C9  3408               	retlw	8
  1898  18CA  3463               	retlw	99
  1899  18CB  3408               	retlw	8
  1900  18CC  3497               	retlw	151
  1901  18CD  3408               	retlw	8
  1902  18CE  34CB               	retlw	203
  1903  18CF  3408               	retlw	8
  1904  18D0  3402               	retlw	2
  1905  18D1  3409               	retlw	9
  1906  18D2  3439               	retlw	57
  1907  18D3  3409               	retlw	9
  1908  18D4  3472               	retlw	114
  1909  18D5  3409               	retlw	9
  1910  18D6  34AC               	retlw	172
  1911  18D7  3409               	retlw	9
  1912  18D8  34E7               	retlw	231
  1913  18D9  3409               	retlw	9
  1914  18DA  3424               	retlw	36
  1915  18DB  340A               	retlw	10
  1916  18DC  3463               	retlw	99
  1917  18DD  340A               	retlw	10
  1918  18DE  34A2               	retlw	162
  1919  18DF  340A               	retlw	10
  1920  18E0  34E4               	retlw	228
  1921  18E1  340A               	retlw	10
  1922  18E2  3427               	retlw	39
  1923  18E3  340B               	retlw	11
  1924  18E4  346B               	retlw	107
  1925  18E5  340B               	retlw	11
  1926  18E6  34B2               	retlw	178
  1927  18E7  340B               	retlw	11
  1928  18E8  34FA               	retlw	250
  1929  18E9  340B               	retlw	11
  1930  18EA  3443               	retlw	67
  1931  18EB  340C               	retlw	12
  1932  18EC  348F               	retlw	143
  1933  18ED  340C               	retlw	12
  1934  18EE  34DC               	retlw	220
  1935  18EF  340C               	retlw	12
  1936  18F0  342B               	retlw	43
  1937  18F1  340D               	retlw	13
  1938  18F2  347C               	retlw	124
  1939  18F3  340D               	retlw	13
  1940  18F4  34CF               	retlw	207
  1941  18F5  340D               	retlw	13
  1942  18F6  3424               	retlw	36
  1943  18F7  340E               	retlw	14
  1944  18F8  347B               	retlw	123
  1945  18F9  340E               	retlw	14
  1946  18FA  34D4               	retlw	212
  1947  18FB  340E               	retlw	14
  1948  18FC  342F               	retlw	47
  1949  18FD  340F               	retlw	15
  1950  18FE  348C               	retlw	140
  1951  18FF  340F               	retlw	15
  1952  1900  34EC               	retlw	236
  1953  1901  340F               	retlw	15
  1954  1902  344E               	retlw	78
  1955  1903  3410               	retlw	16
  1956  1904  34B2               	retlw	178
  1957  1905  3410               	retlw	16
  1958  1906  3419               	retlw	25
  1959  1907  3411               	retlw	17
  1960  1908  3482               	retlw	130
  1961  1909  3411               	retlw	17
  1962  190A  34EE               	retlw	238
  1963  190B  3411               	retlw	17
  1964  190C  345C               	retlw	92
  1965  190D  3412               	retlw	18
  1966  190E  34CD               	retlw	205
  1967  190F  3412               	retlw	18
  1968  1910  3441               	retlw	65
  1969  1911  3413               	retlw	19
  1970  1912  34B7               	retlw	183
  1971  1913  3413               	retlw	19
  1972  1914  3430               	retlw	48
  1973  1915  3414               	retlw	20
  1974  1916  34AC               	retlw	172
  1975  1917  3414               	retlw	20
  1976  1918  342C               	retlw	44
  1977  1919  3415               	retlw	21
  1978  191A  34AE               	retlw	174
  1979  191B  3415               	retlw	21
  1980  191C  3433               	retlw	51
  1981  191D  3416               	retlw	22
  1982  191E  34BC               	retlw	188
  1983  191F  3416               	retlw	22
  1984  1920  3447               	retlw	71
  1985  1921  3417               	retlw	23
  1986  1922  34D7               	retlw	215
  1987  1923  3417               	retlw	23
  1988  1924  3469               	retlw	105
  1989  1925  3418               	retlw	24
  1990  1926  34FF               	retlw	255
  1991  1927  3418               	retlw	24
  1992  1928  3499               	retlw	153
  1993  1929  3419               	retlw	25
  1994  192A  3437               	retlw	55
  1995  192B  341A               	retlw	26
  1996  192C  34D8               	retlw	216
  1997  192D  341A               	retlw	26
  1998  192E  347D               	retlw	125
  1999  192F  341B               	retlw	27
  2000  1930  3426               	retlw	38
  2001  1931  341C               	retlw	28
  2002  1932  34D3               	retlw	211
  2003  1933  341C               	retlw	28
  2004  1934  3484               	retlw	132
  2005  1935  341D               	retlw	29
  2006  1936  343A               	retlw	58
  2007  1937  341E               	retlw	30
  2008  1938  34F4               	retlw	244
  2009  1939  341E               	retlw	30
  2010  193A  34B2               	retlw	178
  2011  193B  341F               	retlw	31
  2012  193C  3475               	retlw	117
  2013  193D  3420               	retlw	32
  2014  193E  343D               	retlw	61
  2015  193F  3421               	retlw	33
  2016  1940  3409               	retlw	9
  2017  1941  3422               	retlw	34
  2018  1942  34DA               	retlw	218
  2019  1943  3422               	retlw	34
  2020  1944  34B1               	retlw	177
  2021  1945  3423               	retlw	35
  2022  1946  348C               	retlw	140
  2023  1947  3424               	retlw	36
  2024  1948  346D               	retlw	109
  2025  1949  3425               	retlw	37
  2026  194A  3453               	retlw	83
  2027  194B  3426               	retlw	38
  2028  194C  343F               	retlw	63
  2029  194D  3427               	retlw	39
  2030  194E  3430               	retlw	48
  2031  194F  3428               	retlw	40
  2032  1950  3427               	retlw	39
  2033  1951  3429               	retlw	41
  2034  1952  3424               	retlw	36
  2035  1953  342A               	retlw	42
  2036  1954  3428               	retlw	40
  2037  1955  342B               	retlw	43
  2038  1956  3431               	retlw	49
  2039  1957  342C               	retlw	44
  2040  1958  3441               	retlw	65
  2041  1959  342D               	retlw	45
  2042  195A  3457               	retlw	87
  2043  195B  342E               	retlw	46
  2044  195C  3474               	retlw	116
  2045  195D  342F               	retlw	47
  2046  195E  3498               	retlw	152
  2047  195F  3430               	retlw	48
  2048  1960  34C3               	retlw	195
  2049  1961  3431               	retlw	49
  2050  1962  34F5               	retlw	245
  2051  1963  3432               	retlw	50
  2052  1964  342E               	retlw	46
  2053  1965  3434               	retlw	52
  2054  1966  346F               	retlw	111
  2055  1967  3435               	retlw	53
  2056  1968  34B7               	retlw	183
  2057  1969  3436               	retlw	54
  2058  196A  3408               	retlw	8
  2059  196B  3438               	retlw	56
  2060  196C  3461               	retlw	97
  2061  196D  3439               	retlw	57
  2062  196E  34C1               	retlw	193
  2063  196F  343A               	retlw	58
  2064  1970  342B               	retlw	43
  2065  1971  343C               	retlw	60
  2066  1972  349D               	retlw	157
  2067  1973  343D               	retlw	61
  2068  1974  3418               	retlw	24
  2069  1975  343F               	retlw	63
  2070  1976  349C               	retlw	156
  2071  1977  3440               	retlw	64
  2072  1978  3429               	retlw	41
  2073  1979  3442               	retlw	66
  2074  197A  34C0               	retlw	192
  2075  197B  3443               	retlw	67
  2076  197C  3461               	retlw	97
  2077  197D  3445               	retlw	69
  2078  197E  340B               	retlw	11
  2079  197F  3447               	retlw	71
  2080  1980  34C0               	retlw	192
  2081  1981  3448               	retlw	72
  2082  1982  347F               	retlw	127
  2083  1983  344A               	retlw	74
  2084  1984  344A               	retlw	74
  2085  1985  344C               	retlw	76
  2086  1986  341F               	retlw	31
  2087  1987  344E               	retlw	78
  2088  1988  34FF               	retlw	255
  2089  1989  344F               	retlw	79
  2090  198A  34EB               	retlw	235
  2091  198B  3451               	retlw	81
  2092  198C  34E3               	retlw	227
  2093  198D  3453               	retlw	83
  2094  198E  34E7               	retlw	231
  2095  198F  3455               	retlw	85
  2096  1990  34F7               	retlw	247
  2097  1991  3457               	retlw	87
  2098  1992  3414               	retlw	20
  2099  1993  345A               	retlw	90
  2100  1994  343E               	retlw	62
  2101  1995  345C               	retlw	92
  2102  1996  3475               	retlw	117
  2103  1997  345E               	retlw	94
  2104  1998  34BA               	retlw	186
  2105  1999  3460               	retlw	96
  2106  199A  340D               	retlw	13
  2107  199B  3463               	retlw	99
  2108  199C  346E               	retlw	110
  2109  199D  3465               	retlw	101
  2110  199E  34DE               	retlw	222
  2111  199F  3467               	retlw	103
  2112  19A0  345D               	retlw	93
  2113  19A1  346A               	retlw	106
  2114  19A2  34EB               	retlw	235
  2115  19A3  346C               	retlw	108
  2116  19A4  3488               	retlw	136
  2117  19A5  346F               	retlw	111
  2118  19A6  3436               	retlw	54
  2119  19A7  3472               	retlw	114
  2120  19A8  34F5               	retlw	245
  2121  19A9  3474               	retlw	116
  2122  19AA  34C4               	retlw	196
  2123  19AB  3477               	retlw	119
  2124  19AC  34A5               	retlw	165
  2125  19AD  347A               	retlw	122
  2126  19AE  3497               	retlw	151
  2127  19AF  347D               	retlw	125
  2128  19B0  349B               	retlw	155
  2129  19B1  3480               	retlw	128
  2130  19B2  34B2               	retlw	178
  2131  19B3  3483               	retlw	131
  2132  19B4  34DC               	retlw	220
  2133  19B5  3486               	retlw	134
  2134  19B6  3419               	retlw	25
  2135  19B7  348A               	retlw	138
  2136  19B8  346A               	retlw	106
  2137  19B9  348D               	retlw	141
  2138  19BA  34D0               	retlw	208
  2139  19BB  3490               	retlw	144
  2140  19BC  344B               	retlw	75
  2141  19BD  3494               	retlw	148
  2142  19BE  34DB               	retlw	219
  2143  19BF  3497               	retlw	151
  2144  19C0  3480               	retlw	128
  2145  19C1  349B               	retlw	155
  2146  19C2  343D               	retlw	61
  2147  19C3  349F               	retlw	159
  2148  19C4  3410               	retlw	16
  2149  19C5  34A3               	retlw	163
  2150  19C6  34FB               	retlw	251
  2151  19C7  34A6               	retlw	166
  2152  19C8  34FE               	retlw	254
  2153  19C9  34AA               	retlw	170
  2154  19CA  3419               	retlw	25
  2155  19CB  34AF               	retlw	175
  2156  19CC  344E               	retlw	78
  2157  19CD  34B3               	retlw	179
  2158  19CE  349D               	retlw	157
  2159  19CF  34B7               	retlw	183
  2160  19D0  3406               	retlw	6
  2161  19D1  34BC               	retlw	188
  2162  19D2  348A               	retlw	138
  2163  19D3  34C0               	retlw	192
  2164  19D4  342A               	retlw	42
  2165  19D5  34C5               	retlw	197
  2166  19D6  34E7               	retlw	231
  2167  19D7  34C9               	retlw	201
  2168  19D8  34C0               	retlw	192
  2169  19D9  34CE               	retlw	206
  2170  19DA  34B8               	retlw	184
  2171  19DB  34D3               	retlw	211
  2172  19DC  34CE               	retlw	206
  2173  19DD  34D8               	retlw	216
  2174  19DE  3403               	retlw	3
  2175  19DF  34DE               	retlw	222
  2176  19E0  3458               	retlw	88
  2177  19E1  34E3               	retlw	227
  2178  19E2  34CE               	retlw	206
  2179  19E3  34E8               	retlw	232
  2180  19E4  3466               	retlw	102
  2181  19E5  34EE               	retlw	238
  2182  19E6  3420               	retlw	32
  2183  19E7  34F4               	retlw	244
  2184  19E8  34FD               	retlw	253
  2185  19E9  34F9               	retlw	249
  2186  19EA  34FF               	retlw	255
  2187  19EB  34FF               	retlw	255
  2188  19EC  34FF               	retlw	255
  2189  19ED  34FF               	retlw	255
  2190  19EE  34FF               	retlw	255
  2191  19EF  34FF               	retlw	255
  2192  19F0  34FF               	retlw	255
  2193  19F1  34FF               	retlw	255
  2194  19F2  34FF               	retlw	255
  2195  19F3  34FF               	retlw	255
  2196  19F4  34FF               	retlw	255
  2197  19F5  34FF               	retlw	255
  2198  19F6  34FF               	retlw	255
  2199  19F7  34FF               	retlw	255
  2200  19F8  34FF               	retlw	255
  2201  19F9  34FF               	retlw	255
  2202  19FA  34FF               	retlw	255
  2203  19FB  34FF               	retlw	255
  2204  19FC  34FF               	retlw	255
  2205  19FD  34FF               	retlw	255
  2206  19FE  34FF               	retlw	255
  2207  19FF  34FF               	retlw	255
  2208  1A00                     __end_of_PWM:	
  2209  1A00                     _PERSONALITY_DEFINITIONS:	
  2210  1A00  3401               	retlw	1
  2211  1A01  3401               	retlw	1
  2212  1A02  34FD               	retlw	low (_PERSONALITY_1| (0+32768))
  2213  1A03  349A               	retlw	high (_PERSONALITY_1| (0+32768))
  2214  1A04  3405               	retlw	5
  2215  1A05  3402               	retlw	2
  2216  1A06  3402               	retlw	2
  2217  1A07  34F7               	retlw	low (_PERSONALITY_2| (0+32768))
  2218  1A08  349A               	retlw	high (_PERSONALITY_2| (0+32768))
  2219  1A09  3405               	retlw	5
  2220  1A0A  3403               	retlw	3
  2221  1A0B  3403               	retlw	3
  2222  1A0C  34F1               	retlw	low (_PERSONALITY_3| (0+32768))
  2223  1A0D  349A               	retlw	high (_PERSONALITY_3| (0+32768))
  2224  1A0E  3405               	retlw	5
  2225  1A0F  3404               	retlw	4
  2226  1A10  3404               	retlw	4
  2227  1A11  34EB               	retlw	low (_PERSONALITY_4| (0+32768))
  2228  1A12  349A               	retlw	high (_PERSONALITY_4| (0+32768))
  2229  1A13  3405               	retlw	5
  2230  1A14  3405               	retlw	5
  2231  1A15  3402               	retlw	2
  2232  1A16  34CC               	retlw	low (_PERSONALITY_5| (0+32768))
  2233  1A17  349A               	retlw	high (_PERSONALITY_5| (0+32768))
  2234  1A18  340C               	retlw	12
  2235  1A19  3406               	retlw	6
  2236  1A1A  3404               	retlw	4
  2237  1A1B  34BF               	retlw	low (_PERSONALITY_6| (0+32768))
  2238  1A1C  349A               	retlw	high (_PERSONALITY_6| (0+32768))
  2239  1A1D  340C               	retlw	12
  2240  1A1E                     __end_of_PERSONALITY_DEFINITIONS:	
  2241  1A1E                     RDM@SUPPORTED_PARAMETERS:	
  2242  1A1E  3470               	retlw	112
  2243  1A1F  3400               	retlw	0
  2244  1A20  3480               	retlw	128
  2245  1A21  3400               	retlw	0
  2246  1A22  3481               	retlw	129
  2247  1A23  3400               	retlw	0
  2248  1A24  3482               	retlw	130
  2249  1A25  3400               	retlw	0
  2250  1A26  34C1               	retlw	193
  2251  1A27  3400               	retlw	0
  2252  1A28  34C2               	retlw	194
  2253  1A29  3400               	retlw	0
  2254  1A2A  34E0               	retlw	224
  2255  1A2B  3400               	retlw	0
  2256  1A2C  34E1               	retlw	225
  2257  1A2D  3400               	retlw	0
  2258  1A2E  3420               	retlw	32
  2259  1A2F  3401               	retlw	1
  2260  1A30  3421               	retlw	33
  2261  1A31  3401               	retlw	1
  2262  1A32  3422               	retlw	34
  2263  1A33  3401               	retlw	1
  2264  1A34  3440               	retlw	64
  2265  1A35  3410               	retlw	16
  2266  1A36                     __end_ofRDM@SUPPORTED_PARAMETERS:	
  2267  1A36                     _SLOT_LABEL_ID:	
  2268  1A36  3401               	retlw	1
  2269  1A37  3400               	retlw	0
  2270  1A38  3401               	retlw	1
  2271  1A39  3400               	retlw	0
  2272  1A3A  3401               	retlw	1
  2273  1A3B  3400               	retlw	0
  2274  1A3C  3401               	retlw	1
  2275  1A3D  3400               	retlw	0
  2276  1A3E  3401               	retlw	1
  2277  1A3F  3400               	retlw	0
  2278  1A40  3408               	retlw	8
  2279  1A41  3402               	retlw	2
  2280  1A42  3401               	retlw	1
  2281  1A43  3400               	retlw	0
  2282  1A44  3408               	retlw	8
  2283  1A45  3402               	retlw	2
  2284  1A46                     __end_of_SLOT_LABEL_ID:	
  2285  1A46                     _SLOT_DEFINITIONS:	
  2286  1A46  34D9               	retlw	low (_SLOT_DESCRIPTION_0| (0+32768))
  2287  1A47  349A               	retlw	high (_SLOT_DESCRIPTION_0| (0+32768))
  2288  1A48  3409               	retlw	9
  2289  1A49  34B2               	retlw	low (_SLOT_DESCRIPTION_1| (0+32768))
  2290  1A4A  349A               	retlw	high (_SLOT_DESCRIPTION_1| (0+32768))
  2291  1A4B  340C               	retlw	12
  2292  1A4C  34E3               	retlw	low (_SLOT_DESCRIPTION_2| (0+32768))
  2293  1A4D  349A               	retlw	high (_SLOT_DESCRIPTION_2| (0+32768))
  2294  1A4E  3407               	retlw	7
  2295  1A4F                     __end_of_SLOT_DEFINITIONS:	
  2296  1A4F                     _SLOT_TYPE:	
  2297  1A4F  3400               	retlw	0
  2298  1A50  3400               	retlw	0
  2299  1A51  3400               	retlw	0
  2300  1A52  3400               	retlw	0
  2301  1A53  3400               	retlw	0
  2302  1A54  3404               	retlw	4
  2303  1A55  3400               	retlw	0
  2304  1A56  3404               	retlw	4
  2305  1A57                     __end_of_SLOT_TYPE:	
  2306  1A57                     _SLOT:	
  2307  1A57  3430               	retlw	48
  2308  1A58  3431               	retlw	49
  2309  1A59  3432               	retlw	50
  2310  1A5A  3433               	retlw	51
  2311  1A5B  3400               	retlw	0
  2312  1A5C                     __end_of_SLOT:	
  2313  1A5C                     _BOOT_SOFTWARE_VERSION_LABEL:	
  2314  1A5C  3444               	retlw	68
  2315  1A5D  344D               	retlw	77
  2316  1A5E  3458               	retlw	88
  2317  1A5F  342C               	retlw	44
  2318  1A60  3420               	retlw	32
  2319  1A61  3454               	retlw	84
  2320  1A62  3455               	retlw	85
  2321  1A63  344E               	retlw	78
  2322  1A64  3441               	retlw	65
  2323  1A65  3442               	retlw	66
  2324  1A66  344C               	retlw	76
  2325  1A67  3445               	retlw	69
  2326  1A68  3420               	retlw	32
  2327  1A69  3457               	retlw	87
  2328  1A6A  3448               	retlw	72
  2329  1A6B  3449               	retlw	73
  2330  1A6C  3454               	retlw	84
  2331  1A6D  3445               	retlw	69
  2332  1A6E  342C               	retlw	44
  2333  1A6F  3420               	retlw	32
  2334  1A70  3431               	retlw	49
  2335  1A71  3436               	retlw	54
  2336  1A72  3462               	retlw	98
  2337  1A73  3469               	retlw	105
  2338  1A74  3474               	retlw	116
  2339  1A75  3420               	retlw	32
  2340  1A76  3466               	retlw	102
  2341  1A77  3469               	retlw	105
  2342  1A78  346E               	retlw	110
  2343  1A79  3465               	retlw	101
  2344  1A7A  3400               	retlw	0
  2345  1A7B                     __end_of_BOOT_SOFTWARE_VERSION_LABEL:	
  2346  1A7B                     _SOFTWARE_VERSION_LABEL:	
  2347  1A7B  344D               	retlw	77
  2348  1A7C  3445               	retlw	69
  2349  1A7D  3454               	retlw	84
  2350  1A7E  3445               	retlw	69
  2351  1A7F  344F               	retlw	79
  2352  1A80  3452               	retlw	82
  2353  1A81  3420               	retlw	32
  2354  1A82  344C               	retlw	76
  2355  1A83  3449               	retlw	73
  2356  1A84  3447               	retlw	71
  2357  1A85  3448               	retlw	72
  2358  1A86  3454               	retlw	84
  2359  1A87  3449               	retlw	73
  2360  1A88  344E               	retlw	78
  2361  1A89  3447               	retlw	71
  2362  1A8A  3420               	retlw	32
  2363  1A8B  3453               	retlw	83
  2364  1A8C  344F               	retlw	79
  2365  1A8D  3446               	retlw	70
  2366  1A8E  3454               	retlw	84
  2367  1A8F  3457               	retlw	87
  2368  1A90  3441               	retlw	65
  2369  1A91  3452               	retlw	82
  2370  1A92  3445               	retlw	69
  2371  1A93  3400               	retlw	0
  2372  1A94                     __end_of_SOFTWARE_VERSION_LABEL:	
  2373  1A94                     _MANUFACTURER_LABEL:	
  2374  1A94  344D               	retlw	77
  2375  1A95  3445               	retlw	69
  2376  1A96  3454               	retlw	84
  2377  1A97  3445               	retlw	69
  2378  1A98  344F               	retlw	79
  2379  1A99  3452               	retlw	82
  2380  1A9A  3420               	retlw	32
  2381  1A9B  344C               	retlw	76
  2382  1A9C  3449               	retlw	73
  2383  1A9D  3447               	retlw	71
  2384  1A9E  3448               	retlw	72
  2385  1A9F  3454               	retlw	84
  2386  1AA0  3449               	retlw	73
  2387  1AA1  344E               	retlw	78
  2388  1AA2  3447               	retlw	71
  2389  1AA3  3400               	retlw	0
  2390  1AA4                     __end_of_MANUFACTURER_LABEL:	
  2391  1AA4                     _DEVICE_MODEL_DESCRIPTION:	
  2392  1AA4  344D               	retlw	77
  2393  1AA5  3445               	retlw	69
  2394  1AA6  3454               	retlw	84
  2395  1AA7  3445               	retlw	69
  2396  1AA8  344F               	retlw	79
  2397  1AA9  3452               	retlw	82
  2398  1AAA  3420               	retlw	32
  2399  1AAB  3444               	retlw	68
  2400  1AAC  3452               	retlw	82
  2401  1AAD  3449               	retlw	73
  2402  1AAE  3456               	retlw	86
  2403  1AAF  3445               	retlw	69
  2404  1AB0  3452               	retlw	82
  2405  1AB1  3400               	retlw	0
  2406  1AB2                     __end_of_DEVICE_MODEL_DESCRIPTION:	
  2407  1AB2                     _SLOT_DESCRIPTION_1:	
  2408  1AB2  344C               	retlw	76
  2409  1AB3  3445               	retlw	69
  2410  1AB4  3444               	retlw	68
  2411  1AB5  3420               	retlw	32
  2412  1AB6  3449               	retlw	73
  2413  1AB7  3454               	retlw	84
  2414  1AB8  3445               	retlw	69
  2415  1AB9  344E               	retlw	78
  2416  1ABA  3453               	retlw	83
  2417  1ABB  3449               	retlw	73
  2418  1ABC  3454               	retlw	84
  2419  1ABD  3459               	retlw	89
  2420  1ABE  3400               	retlw	0
  2421  1ABF                     __end_of_SLOT_DESCRIPTION_1:	
  2422  1ABF                     _PERSONALITY_6:	
  2423  1ABF  344C               	retlw	76
  2424  1AC0  344F               	retlw	79
  2425  1AC1  3447               	retlw	71
  2426  1AC2  3420               	retlw	32
  2427  1AC3  3432               	retlw	50
  2428  1AC4  342C               	retlw	44
  2429  1AC5  3420               	retlw	32
  2430  1AC6  3443               	retlw	67
  2431  1AC7  3443               	retlw	67
  2432  1AC8  3454               	retlw	84
  2433  1AC9  3420               	retlw	32
  2434  1ACA  3432               	retlw	50
  2435  1ACB  3400               	retlw	0
  2436  1ACC                     __end_of_PERSONALITY_6:	
  2437  1ACC                     _PERSONALITY_5:	
  2438  1ACC  344C               	retlw	76
  2439  1ACD  344F               	retlw	79
  2440  1ACE  3447               	retlw	71
  2441  1ACF  3420               	retlw	32
  2442  1AD0  3431               	retlw	49
  2443  1AD1  342C               	retlw	44
  2444  1AD2  3420               	retlw	32
  2445  1AD3  3443               	retlw	67
  2446  1AD4  3443               	retlw	67
  2447  1AD5  3454               	retlw	84
  2448  1AD6  3420               	retlw	32
  2449  1AD7  3431               	retlw	49
  2450  1AD8  3400               	retlw	0
  2451  1AD9                     __end_of_PERSONALITY_5:	
  2452  1AD9                     _SLOT_DESCRIPTION_0:	
  2453  1AD9  3450               	retlw	80
  2454  1ADA  3457               	retlw	87
  2455  1ADB  344D               	retlw	77
  2456  1ADC  3420               	retlw	32
  2457  1ADD  3453               	retlw	83
  2458  1ADE  344C               	retlw	76
  2459  1ADF  344F               	retlw	79
  2460  1AE0  3454               	retlw	84
  2461  1AE1  3420               	retlw	32
  2462  1AE2  3400               	retlw	0
  2463  1AE3                     __end_of_SLOT_DESCRIPTION_0:	
  2464  1AE3                     _SLOT_DESCRIPTION_2:	
  2465  1AE3  344C               	retlw	76
  2466  1AE4  3445               	retlw	69
  2467  1AE5  3444               	retlw	68
  2468  1AE6  3420               	retlw	32
  2469  1AE7  3443               	retlw	67
  2470  1AE8  3443               	retlw	67
  2471  1AE9  3454               	retlw	84
  2472  1AEA  3400               	retlw	0
  2473  1AEB                     __end_of_SLOT_DESCRIPTION_2:	
  2474  1AEB                     _PERSONALITY_4:	
  2475  1AEB  344C               	retlw	76
  2476  1AEC  344F               	retlw	79
  2477  1AED  3447               	retlw	71
  2478  1AEE  3420               	retlw	32
  2479  1AEF  3434               	retlw	52
  2480  1AF0  3400               	retlw	0
  2481  1AF1                     __end_of_PERSONALITY_4:	
  2482  1AF1                     _PERSONALITY_3:	
  2483  1AF1  344C               	retlw	76
  2484  1AF2  344F               	retlw	79
  2485  1AF3  3447               	retlw	71
  2486  1AF4  3420               	retlw	32
  2487  1AF5  3433               	retlw	51
  2488  1AF6  3400               	retlw	0
  2489  1AF7                     __end_of_PERSONALITY_3:	
  2490  1AF7                     _PERSONALITY_2:	
  2491  1AF7  344C               	retlw	76
  2492  1AF8  344F               	retlw	79
  2493  1AF9  3447               	retlw	71
  2494  1AFA  3420               	retlw	32
  2495  1AFB  3432               	retlw	50
  2496  1AFC  3400               	retlw	0
  2497  1AFD                     __end_of_PERSONALITY_2:	
  2498  1AFD                     _PERSONALITY_1:	
  2499  1AFD  344C               	retlw	76
  2500  1AFE  344F               	retlw	79
  2501  1AFF  3447               	retlw	71
  2502  1B00  3420               	retlw	32
  2503  1B01  3431               	retlw	49
  2504  1B02  3400               	retlw	0
  2505  1B03                     __end_of_PERSONALITY_1:	
  2506  0016                     _TMR1	set	22
  2507  001C                     _T2CON	set	28
  2508  0018                     _T1CON	set	24
  2509  000B                     _INTCON	set	11
  2510  001B                     _PR2	set	27
  2511  005F                     _GIE	set	95
  2512  0089                     _TMR2IF	set	137
  2513  0088                     _TMR1IF	set	136
  2514  008C                     _TXIF	set	140
  2515  005E                     _PEIE	set	94
  2516  008D                     _RCIF	set	141
  2517  0098                     _OSCTUNE	set	152
  2518  0099                     _OSCCON	set	153
  2519  0489                     _TMR2IE	set	1161
  2520  0488                     _TMR1IE	set	1160
  2521  048C                     _TXIE	set	1164
  2522  0474                     _TRISC4	set	1140
  2523  048D                     _RCIE	set	1165
  2524  0475                     _TRISC5	set	1141
  2525  0473                     _TRISC3	set	1139
  2526  0472                     _TRISC2	set	1138
  2527  0471                     _TRISC1	set	1137
  2528  0470                     _TRISC0	set	1136
  2529  0462                     _TRISA2	set	1122
  2530  0873                     _LATC3	set	2163
  2531  0874                     _LATC4	set	2164
  2532  0193                     _PMDAT	set	403
  2533  0191                     _PMADR	set	401
  2534  0196                     _PMCON2	set	406
  2535  019A                     _TXREG	set	410
  2536  0199                     _RCREG	set	409
  2537  019B                     _SPBRGL	set	411
  2538  019C                     _SPBRGH	set	412
  2539  019F                     _BAUDCON	set	415
  2540  019D                     _RCSTA	set	413
  2541  0CAD                     _LWLO	set	3245
  2542  0CA9                     _WR	set	3241
  2543  0CAA                     _WREN	set	3242
  2544  0CAC                     _FREE	set	3244
  2545  0CAE                     _CFGS	set	3246
  2546  0CA8                     _RD	set	3240
  2547  0CF5                     _TXEN	set	3317
  2548  0CF0                     _TX9D	set	3312
  2549  0CF6                     _TX9	set	3318
  2550  0CEF                     _SPEN	set	3311
  2551  0CEA                     _FERR	set	3306
  2552  0CF2                     _BRGH	set	3314
  2553  0CF4                     _SYNC	set	3316
  2554  0C73                     _ANSC3	set	3187
  2555  0C72                     _ANSC2	set	3186
  2556  0C71                     _ANSC1	set	3185
  2557  0C70                     _ANSC0	set	3184
  2558  0C62                     _ANSA2	set	3170
  2559  0DCB                     _PWM4CON	set	3531
  2560  0DBB                     _PWM3CON	set	3515
  2561  0DAB                     _PWM2CON	set	3499
  2562  0D9B                     _PWM1CON	set	3483
  2563  0DCE                     _PWM4CLKCON	set	3534
  2564  0DBE                     _PWM3CLKCON	set	3518
  2565  0DAE                     _PWM2CLKCON	set	3502
  2566  0D9E                     _PWM1CLKCON	set	3486
  2567  0DC5                     _PWM4PRL	set	3525
  2568  0DB5                     _PWM3PRL	set	3509
  2569  0DA5                     _PWM2PRL	set	3493
  2570  0D95                     _PWM1PRL	set	3477
  2571  0DC6                     _PWM4PRH	set	3526
  2572  0DB6                     _PWM3PRH	set	3510
  2573  0DA6                     _PWM2PRH	set	3494
  2574  0D96                     _PWM1PRH	set	3478
  2575  0DC1                     _PWM4PHL	set	3521
  2576  0DB1                     _PWM3PHL	set	3505
  2577  0DA1                     _PWM2PHL	set	3489
  2578  0D91                     _PWM1PHL	set	3473
  2579  0DC2                     _PWM4PHH	set	3522
  2580  0DB2                     _PWM3PHH	set	3506
  2581  0DA2                     _PWM2PHH	set	3490
  2582  0D92                     _PWM1PHH	set	3474
  2583  0DCF                     _PWM4LDCON	set	3535
  2584  0DBF                     _PWM3LDCON	set	3519
  2585  0DAF                     _PWM2LDCON	set	3503
  2586  0D9F                     _PWM1LDCON	set	3487
  2587  0DC3                     _PWM4DCL	set	3523
  2588  0DB3                     _PWM3DCL	set	3507
  2589  0DA3                     _PWM2DCL	set	3491
  2590  0D93                     _PWM1DCL	set	3475
  2591  0DC4                     _PWM4DCH	set	3524
  2592  0DB4                     _PWM3DCH	set	3508
  2593  0DA4                     _PWM2DCH	set	3492
  2594  0D94                     _PWM1DCH	set	3476
  2595  0E15                     _RXPPS	set	3605
  2596  0EA4                     _RC4PPS	set	3748
  2597  0EA2                     _RC2PPS	set	3746
  2598  0EA1                     _RC1PPS	set	3745
  2599  0EA0                     _RC0PPS	set	3744
  2600  0E92                     _RA2PPS	set	3730
  2601                           
  2602                           ; #config settings
  2603  0000                     
  2604                           	psect	cinit
  2605  080E                     start_initialization:	
  2606  080E                     __initialization:		;BIGRAM
  2607                           
  2608                           ; Initialize objects allocated to BANK1
  2609  080E  0021               	movlb	1	; select bank1
  2610                           
  2611                           ;initializer for _DEVICE_LABEL_SIZE
  2612  080F  300D               	movlw	13
  2613  0810  00EB               	movwf	__pdataBANK1& (0+127)
  2614                           
  2615                           ;initializer for _IDENTIFY_MODE
  2616  0811  30FF               	movlw	255
  2617  0812  00EC               	movwf	(__pdataBANK1+1)& (0+127)
  2618                           
  2619                           ;initializer for _DMXPeriod
  2620  0813  3064               	movlw	100
  2621  0814  00ED               	movwf	(__pdataBANK1+2)& (0+127)
  2622                           
  2623                           ;initializer for _FOOTPRINT
  2624  0815  3004               	movlw	4
  2625  0816  00EE               	movwf	(__pdataBANK1+3)& (0+127)
  2626                           
  2627                           ; Initialize objects allocated to BANK2
  2628  0817  0022               	movlb	2	; select bank2
  2629                           
  2630                           ;initializer for _DMX_repeatcoeff
  2631  0818  3001               	movlw	1
  2632  0819  00E8               	movwf	__pdataBANK2& (0+127)
  2633  081A  3002               	movlw	2
  2634  081B  01E9               	clrf	(__pdataBANK2+1)& (0+127)
  2635  081C  01EA               	clrf	(__pdataBANK2+2)& (0+127)
  2636  081D  01EB               	clrf	(__pdataBANK2+3)& (0+127)
  2637                           
  2638                           ;initializer for _DMX_sumRepeat
  2639  081E  00EC               	movwf	(__pdataBANK2+4)& (0+127)
  2640  081F  30AD               	movlw	low __pidataBANK3
  2641  0820  01ED               	clrf	(__pdataBANK2+5)& (0+127)
  2642  0821  01EE               	clrf	(__pdataBANK2+6)& (0+127)
  2643  0822  01EF               	clrf	(__pdataBANK2+7)& (0+127)
  2644                           
  2645                           ; Initialize objects allocated to BANK3
  2646  0823  0084               	movwf	4
  2647  0824  3082               	movlw	(high __pidataBANK3)| (0+128)
  2648  0825  0085               	movwf	5
  2649  0826  30DC               	movlw	low __pdataBANK3
  2650  0827  0086               	movwf	6
  2651  0828  3001               	movlw	high __pdataBANK3
  2652  0829  0087               	movwf	7
  2653  082A  3014               	movlw	20
  2654  082B  01FF               	clrf	127
  2655  082C  3182  22D1  3188   	fcall	init_ram
  2656                           
  2657                           ; Initialize objects allocated to BANK4
  2658  082F  308D               	movlw	low __pidataBANK4
  2659  0830  0084               	movwf	4
  2660  0831  3082               	movlw	(high __pidataBANK4)| (0+128)
  2661  0832  0085               	movwf	5
  2662  0833  3020               	movlw	low __pdataBANK4
  2663  0834  0086               	movwf	6
  2664  0835  3002               	movlw	high __pdataBANK4
  2665  0836  0087               	movwf	7
  2666  0837  3020               	movlw	32
  2667  0838  01FF               	clrf	127
  2668  0839  3182  22D1  3188   	fcall	init_ram
  2669                           
  2670                           ; Clear objects allocated to BIGRAM
  2671  083C  3018               	movlw	24
  2672  083D  0084               	movwf	4
  2673  083E  3023               	movlw	35
  2674  083F  0085               	movwf	5
  2675  0840  30C8               	movlw	200
  2676  0841  00FE               	movwf	126
  2677  0842  01FF               	clrf	127
  2678  0843  3182  22DD  3188   	fcall	clear_ram0
  2679                           
  2680                           ; Clear objects allocated to COMMON
  2681  0846  01F6               	clrf	__pbssCOMMON& (0+127)
  2682  0847  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2683  0848  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2684  0849  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2685                           
  2686                           ; Clear objects allocated to BANK0
  2687  084A  0020               	movlb	0	; select bank0
  2688  084B  30A0               	movlw	low __pbssBANK1
  2689  084C  01EC               	clrf	__pbssBANK0& (0+127)
  2690                           
  2691                           ; Clear objects allocated to BANK1
  2692  084D  0084               	movwf	4
  2693  084E  3000               	movlw	high __pbssBANK1
  2694  084F  0085               	movwf	5
  2695  0850  304B               	movlw	75
  2696  0851  00FE               	movwf	126
  2697  0852  01FF               	clrf	127
  2698  0853  3182  22DD  3188   	fcall	clear_ram0
  2699                           
  2700                           ; Clear objects allocated to BANK2
  2701  0856  3020               	movlw	low __pbssBANK2
  2702  0857  0084               	movwf	4
  2703  0858  3001               	movlw	high __pbssBANK2
  2704  0859  0085               	movwf	5
  2705  085A  3048               	movlw	72
  2706  085B  00FE               	movwf	126
  2707  085C  01FF               	clrf	127
  2708  085D  3182  22DD  3188   	fcall	clear_ram0
  2709                           
  2710                           ; Clear objects allocated to BANK3
  2711  0860  30A0               	movlw	low __pbssBANK3
  2712  0861  0084               	movwf	4
  2713  0862  3001               	movlw	high __pbssBANK3
  2714  0863  0085               	movwf	5
  2715  0864  303C               	movlw	60
  2716  0865  00FE               	movwf	126
  2717  0866  01FF               	clrf	127
  2718  0867  3182  22DD  3188   	fcall	clear_ram0
  2719  086A                     end_of_initialization:	
  2720                           ;End of C runtime variable initialization code
  2721                           
  2722  086A                     __end_of__initialization:	
  2723  086A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2724  086B  0020               	movlb	0
  2725  086C  286D               	ljmp	_main	;jump to C main() function
  2726  086D                     __pmaintext:	
  2727 ;;
  2728 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2729 ;;
  2730 ;; *************** function _main *****************
  2731 ;; Defined at:
  2732 ;;		line 23 in file "main.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : B1F/0
  2743 ;;		On exit  : 1C/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;Total ram usage:        0 bytes
  2751 ;; Hardware stack levels required when called:    6
  2752 ;; This function calls:
  2753 ;;		_DMX_init
  2754 ;;		_DMX_loop
  2755 ;;		_RDM_init
  2756 ;;		_RDM_rx_loop
  2757 ;;		_timer2_loop
  2758 ;;		_timer_init
  2759 ;; This function is called by:
  2760 ;;		Startup code after reset
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           
  2765                           ;psect for function _main
  2766  086D                     _main:	
  2767                           
  2768                           ;main.c: 24: PWM1DCH = 0x00;
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2772  086D  003B               	movlb	27	; select bank27
  2773  086E  0194               	clrf	20	;volatile
  2774                           
  2775                           ;main.c: 25: PWM2DCH = 0x00;
  2776  086F  01A4               	clrf	36	;volatile
  2777                           
  2778                           ;main.c: 26: PWM3DCH = 0x00;
  2779  0870  01B4               	clrf	52	;volatile
  2780                           
  2781                           ;main.c: 27: PWM4DCH = 0x00;
  2782  0871  01C4               	clrf	68	;volatile
  2783                           
  2784                           ;main.c: 29: PWM1DCL = 0x00;
  2785  0872  0193               	clrf	19	;volatile
  2786                           
  2787                           ;main.c: 30: PWM2DCL = 0x00;
  2788  0873  01A3               	clrf	35	;volatile
  2789                           
  2790                           ;main.c: 31: PWM3DCL = 0x00;
  2791  0874  01B3               	clrf	51	;volatile
  2792                           
  2793                           ;main.c: 32: PWM4DCL = 0x00;
  2794  0875  01C3               	clrf	67	;volatile
  2795                           
  2796                           ;main.c: 33: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  2797  0876  3080               	movlw	128
  2798  0877  00CF               	movwf	79	;volatile
  2799  0878  00BF               	movwf	63	;volatile
  2800  0879  00AF               	movwf	47	;volatile
  2801  087A  009F               	movwf	31	;volatile
  2802                           
  2803                           ;main.c: 35: RA2PPS = 0b0011;
  2804  087B  3003               	movlw	3
  2805  087C  003D               	movlb	29	; select bank29
  2806  087D  0092               	movwf	18	;volatile
  2807                           
  2808                           ;main.c: 36: RC0PPS = 0b0100;
  2809  087E  3004               	movlw	4
  2810  087F  00A0               	movwf	32	;volatile
  2811                           
  2812                           ;main.c: 37: RC1PPS = 0b0101;
  2813  0880  3005               	movlw	5
  2814  0881  00A1               	movwf	33	;volatile
  2815                           
  2816                           ;main.c: 38: RC2PPS = 0b0110;
  2817  0882  3006               	movlw	6
  2818  0883  00A2               	movwf	34	;volatile
  2819                           
  2820                           ;main.c: 40: PR2 = 0xFF;
  2821  0884  30FF               	movlw	255
  2822  0885  0020               	movlb	0	; select bank0
  2823  0886  009B               	movwf	27	;volatile
  2824                           
  2825                           ;main.c: 42: OSCCON = 0b11110000;
  2826  0887  30F0               	movlw	240
  2827  0888  0021               	movlb	1	; select bank1
  2828  0889  0099               	movwf	25	;volatile
  2829                           
  2830                           ;main.c: 43: OSCTUNE = 0b000000;
  2831  088A  0198               	clrf	24	;volatile
  2832                           
  2833                           ;main.c: 45: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2834  088B  110E               	bcf	14,2	;volatile
  2835  088C  108E               	bcf	14,1	;volatile
  2836  088D  100E               	bcf	14,0	;volatile
  2837  088E  110C               	bcf	12,2	;volatile
  2838                           
  2839                           ;main.c: 46: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2840  088F  0023               	movlb	3	; select bank3
  2841  0890  110E               	bcf	14,2	;volatile
  2842  0891  108E               	bcf	14,1	;volatile
  2843  0892  100E               	bcf	14,0	;volatile
  2844  0893  110C               	bcf	12,2	;volatile
  2845                           
  2846                           ;main.c: 49: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2847  0894  003B               	movlb	27	; select bank27
  2848  0895  01C2               	clrf	66	;volatile
  2849  0896  01B2               	clrf	50	;volatile
  2850  0897  01A2               	clrf	34	;volatile
  2851  0898  0192               	clrf	18	;volatile
  2852                           
  2853                           ;main.c: 50: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2854  0899  01C1               	clrf	65	;volatile
  2855  089A  01B1               	clrf	49	;volatile
  2856  089B  01A1               	clrf	33	;volatile
  2857  089C  0191               	clrf	17	;volatile
  2858                           
  2859                           ;main.c: 51: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0xFF;
  2860  089D  30FF               	movlw	255
  2861  089E  00C6               	movwf	70	;volatile
  2862  089F  00B6               	movwf	54	;volatile
  2863  08A0  00A6               	movwf	38	;volatile
  2864  08A1  0096               	movwf	22	;volatile
  2865                           
  2866                           ;main.c: 52: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2867  08A2  00C5               	movwf	69	;volatile
  2868  08A3  00B5               	movwf	53	;volatile
  2869  08A4  00A5               	movwf	37	;volatile
  2870  08A5  0095               	movwf	21	;volatile
  2871                           
  2872                           ;main.c: 53: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2873  08A6  01CE               	clrf	78	;volatile
  2874  08A7  01BE               	clrf	62	;volatile
  2875  08A8  01AE               	clrf	46	;volatile
  2876  08A9  019E               	clrf	30	;volatile
  2877                           
  2878                           ;main.c: 56: TRISC3 = 0;
  2879  08AA  0021               	movlb	1	; select bank1
  2880  08AB  118E               	bcf	14,3	;volatile
  2881                           
  2882                           ;main.c: 57: ANSC3 = 0;
  2883  08AC  0023               	movlb	3	; select bank3
  2884  08AD  118E               	bcf	14,3	;volatile
  2885                           
  2886                           ;main.c: 58: INTCON = 0b11000000;
  2887  08AE  30C0               	movlw	192
  2888  08AF  008B               	movwf	11	;volatile
  2889                           
  2890                           ;main.c: 61: timer_init();
  2891  08B0  27E5  3188         	fcall	_timer_init
  2892                           
  2893                           ;main.c: 63: DMX_init();
  2894  08B2  20C4               	fcall	_DMX_init
  2895                           
  2896                           ;main.c: 64: RDM_init();
  2897  08B3  3191  2120  3188   	fcall	_RDM_init
  2898                           
  2899                           ;main.c: 66: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  2900  08B6  3080               	movlw	128
  2901  08B7  003B               	movlb	27	; select bank27
  2902  08B8  00CB               	movwf	75	;volatile
  2903  08B9  00BB               	movwf	59	;volatile
  2904  08BA  00AB               	movwf	43	;volatile
  2905  08BB  009B               	movwf	27	;volatile
  2906  08BC                     l6205:	
  2907                           
  2908                           ;main.c: 74: DMX_loop();
  2909  08BC  2125               	fcall	_DMX_loop
  2910                           
  2911                           ;main.c: 77: RDM_rx_loop();
  2912  08BD  3190  202D  3188   	fcall	_RDM_rx_loop
  2913                           
  2914                           ;main.c: 78: timer2_loop();
  2915  08C0  3181  2192  3188   	fcall	_timer2_loop
  2916  08C3  28BC               	goto	l6205
  2917  08C4                     __end_of_main:	
  2918  08C4                     __ptext44:	
  2919 ;; *************** function _DMX_init *****************
  2920 ;; Defined at:
  2921 ;;		line 17 in file "DMX.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;		None
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : B1F/0
  2932 ;;		On exit  : B1F/0
  2933 ;;		Unchanged: B00/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2937 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2939 ;;Total ram usage:        3 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    2
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_main
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           
  2950                           ;psect for function _DMX_init
  2951  08C4                     _DMX_init:	
  2952                           
  2953                           ;DMX.c: 19: RXPPS = 0b10101;
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  2957  08C4  3015               	movlw	21
  2958  08C5  003C               	movlb	28	; select bank28
  2959  08C6  0095               	movwf	21	;volatile
  2960                           
  2961                           ;DMX.c: 20: TRISC5 = 1;
  2962  08C7  0021               	movlb	1	; select bank1
  2963  08C8  168E               	bsf	14,5	;volatile
  2964                           
  2965                           ;DMX.c: 22: RCSTA = 0b10010000;
  2966  08C9  3090               	movlw	144
  2967  08CA  0023               	movlb	3	; select bank3
  2968  08CB  009D               	movwf	29	;volatile
  2969                           
  2970                           ;DMX.c: 23: SYNC = 0;
  2971  08CC  121E               	bcf	30,4	;volatile
  2972                           
  2973                           ;DMX.c: 24: BAUDCON = 0b00000000;
  2974  08CD  019F               	clrf	31	;volatile
  2975                           
  2976                           ;DMX.c: 25: BRGH = 1;
  2977  08CE  151E               	bsf	30,2	;volatile
  2978                           
  2979                           ;DMX.c: 26: SPBRGH = 0x00;
  2980  08CF  019C               	clrf	28	;volatile
  2981                           
  2982                           ;DMX.c: 27: SPBRGL = 0x7;
  2983  08D0  3007               	movlw	7
  2984  08D1  009B               	movwf	27	;volatile
  2985                           
  2986                           ;DMX.c: 28: RCIE = 1;
  2987  08D2  0021               	movlb	1	; select bank1
  2988  08D3  1691               	bsf	17,5	;volatile
  2989                           
  2990                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  2991  08D4  300D               	movlw	13
  2992  08D5  0023               	movlb	3	; select bank3
  2993  08D6  00B1               	movwf	(_PWMDCLptr+1)^(0+384)
  2994  08D7  3093               	movlw	147
  2995  08D8  00B0               	movwf	_PWMDCLptr^(0+384)
  2996                           
  2997                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  2998  08D9  300D               	movlw	13
  2999  08DA  00B3               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^(0+128)
  3000  08DB  30A3               	movlw	163
  3001  08DC  00B2               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^(0+128)
  3002                           
  3003                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  3004  08DD  300D               	movlw	13
  3005  08DE  00B5               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^(0+128)
  3006  08DF  30B3               	movlw	179
  3007  08E0  00B4               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^(0+128)
  3008                           
  3009                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  3010  08E1  300D               	movlw	13
  3011  08E2  00B7               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^(0+128)
  3012  08E3  30C3               	movlw	195
  3013  08E4  00B6               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^(0+128)
  3014                           
  3015                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  3016  08E5  300D               	movlw	13
  3017  08E6  00A9               	movwf	(_PWMDCHptr+1)^(0+384)
  3018  08E7  3094               	movlw	148
  3019  08E8  00A8               	movwf	_PWMDCHptr^(0+384)
  3020                           
  3021                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  3022  08E9  300D               	movlw	13
  3023  08EA  00AB               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  3024  08EB  30A4               	movlw	164
  3025  08EC  00AA               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  3026                           
  3027                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  3028  08ED  300D               	movlw	13
  3029  08EE  00AD               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  3030  08EF  30B4               	movlw	180
  3031  08F0  00AC               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  3032                           
  3033                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  3034  08F1  300D               	movlw	13
  3035  08F2  00AF               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  3036  08F3  30C4               	movlw	196
  3037  08F4  00AE               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  3038                           
  3039                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  3040  08F5  300D               	movlw	13
  3041  08F6  00A1               	movwf	(_PWMLDCONptr+1)^(0+384)
  3042  08F7  309F               	movlw	159
  3043  08F8  00A0               	movwf	_PWMLDCONptr^(0+384)
  3044                           
  3045                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  3046  08F9  300D               	movlw	13
  3047  08FA  00A3               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  3048  08FB  30AF               	movlw	175
  3049  08FC  00A2               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  3050                           
  3051                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  3052  08FD  300D               	movlw	13
  3053  08FE  00A5               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  3054  08FF  30BF               	movlw	191
  3055  0900  00A4               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  3056                           
  3057                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  3058  0901  300D               	movlw	13
  3059  0902  00A7               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  3060  0903  30CF               	movlw	207
  3061  0904  00A6               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  3062                           
  3063                           ;DMX.c: 58: Addr=0;
  3064  0905  0020               	movlb	0	; select bank0
  3065  0906  01EC               	clrf	_Addr
  3066  0907                     l5913:	
  3067                           ;DMX.c: 59: while(Addr<4){
  3068                           
  3069  0907  3004               	movlw	4
  3070  0908  026C               	subwf	_Addr,w
  3071  0909  1803               	btfsc	3,0
  3072  090A  0008               	return
  3073                           
  3074                           ;DMX.c: 60: DMX_sumRepeat[Addr]=2;
  3075  090B  265C  3188         	fcall	PL80	;call to abstracted procedure
  3076  090D  3002               	movlw	2
  3077  090E  0081               	movwf	1
  3078                           
  3079                           ;DMX.c: 61: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3080  090F  356C               	lslf	_Addr,w
  3081  0910  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3082  0911  26DB  3188         	fcall	PL152	;call to abstracted procedure
  3083  0913  0085               	movwf	5
  3084  0914  3F80               	movwi [0]fsr0
  3085                           
  3086                           ;DMX.c: 62: DMXSign[Addr].InfiniteLoop=0;
  3087  0915  26C3  3188         	fcall	PL136	;call to abstracted procedure
  3088  0917  1101               	bcf	1,2
  3089                           
  3090                           ;DMX.c: 63: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3091  0918  01A0               	clrf	??_DMX_init
  3092  0919  01A1               	clrf	??_DMX_init+1
  3093  091A  01A2               	clrf	??_DMX_init+2
  3094  091B  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3095  091D  26B0  3188         	fcall	PL120	;call to abstracted procedure
  3096  091F  258F  3188         	fcall	PL4	;call to abstracted procedure
  3097  0921  26B0  3188         	fcall	PL120	;call to abstracted procedure
  3098                           
  3099                           ;DMX.c: 64: Addr++;
  3100  0923  0AEC               	incf	_Addr,f
  3101  0924  2907               	goto	l5913
  3102  0925                     __end_of_DMX_init:	
  3103  0925                     __ptext33:	
  3104 ;; *************** function _DMX_loop *****************
  3105 ;; Defined at:
  3106 ;;		line 67 in file "DMX.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      void 
  3113 ;; Registers used:
  3114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 4/1B
  3117 ;;		On exit  : 1E/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  3123 ;;      Totals:         0       3       0       0       0       8       0       0       0       0       0       0       
      +0       0
  3124 ;;Total ram usage:       11 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    5
  3127 ;; This function calls:
  3128 ;;		___awtoft
  3129 ;;		___ftadd
  3130 ;;		___ftdiv
  3131 ;;		___ftge
  3132 ;;		___ftmul
  3133 ;;		___ftsub
  3134 ;;		___fttol
  3135 ;;		___lbtoft
  3136 ;;		___lwtoft
  3137 ;; This function is called by:
  3138 ;;		_main
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _DMX_loop
  3144  0925                     _DMX_loop:	
  3145                           
  3146                           ;DMX.c: 70: if (DMX_Flags.RxNew == 1) {
  3147                           
  3148                           ;incstack = 0
  3149                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3150  0925  1C76               	btfss	_DMX_Flags,0	;volatile
  3151  0926  2ADC               	goto	l498
  3152                           
  3153                           ;DMX.c: 71: DMX_Flags.RxNew = 0;
  3154  0927  1076               	bcf	_DMX_Flags,0	;volatile
  3155                           
  3156                           ;DMX.c: 73: Addr = 0;
  3157  0928  0020               	movlb	0	; select bank0
  3158  0929  01EC               	clrf	_Addr
  3159                           
  3160                           ;DMX.c: 101: DMXDimming=0;
  3161  092A  0021               	movlb	1	; select bank1
  3162  092B  01E7               	clrf	_DMXDimming^(0+128)	;volatile
  3163                           
  3164                           ;DMX.c: 102: DMXStepConst=3;
  3165  092C  3003               	movlw	3
  3166  092D  00E6               	movwf	_DMXStepConst^(0+128)
  3167                           
  3168                           ;DMX.c: 103: if(PERSONALITY<5){
  3169  092E  3005               	movlw	5
  3170  092F  0261               	subwf	_PERSONALITY^(0+128),w
  3171  0930  1C03               	btfss	3,0
  3172  0931  2AD6               	goto	l6075
  3173  0932  2ADC               	goto	l498
  3174  0933                     l6003:	
  3175                           
  3176                           ;DMX.c: 105: rxdata=RxData[Addr];
  3177  0933  26B7  3188         	fcall	PL128	;call to abstracted procedure
  3178  0935  0801               	movf	1,w
  3179  0936  0021               	movlb	1	; select bank1
  3180  0937  00E5               	movwf	_rxdata^(0+128)
  3181                           
  3182                           ;DMX.c: 107: if (DMX_TargetBright[Addr] < rxdata) {
  3183  0938  0020               	movlb	0	; select bank0
  3184  0939  258F  3188         	fcall	PL4	;call to abstracted procedure
  3185  093B  0187               	clrf	7
  3186  093C  2694  3188         	fcall	PL106	;call to abstracted procedure
  3187  093E  0021               	movlb	1	; select bank1
  3188  093F  0865               	movf	_rxdata^(0+128),w
  3189  0940  23ED  3188         	fcall	___lbtoft
  3190  0942  0828               	movf	?___lbtoft,w
  3191  0943  00AF               	movwf	___ftge@ff2
  3192  0944  0829               	movf	?___lbtoft+1,w
  3193  0945  00B0               	movwf	___ftge@ff2+1
  3194  0946  082A               	movf	?___lbtoft+2,w
  3195  0947  00B1               	movwf	___ftge@ff2+2
  3196  0948  23FD  3188         	fcall	___ftge
  3197  094A  1803               	btfsc	3,0
  3198  094B  29B5               	goto	l6021
  3199                           
  3200                           ;DMX.c: 108: DMX_difference=rxdata-DMX_TargetBright[Addr];
  3201  094C  258F  3188         	fcall	PL4	;call to abstracted procedure
  3202  094E  0187               	clrf	7
  3203  094F  2600  3188         	fcall	PL32	;call to abstracted procedure
  3204  0951  0021               	movlb	1	; select bank1
  3205  0952  0865               	movf	_rxdata^(0+128),w
  3206  0953  23ED  3188         	fcall	___lbtoft
  3207  0955  0828               	movf	?___lbtoft,w
  3208  0956  00D9               	movwf	___ftsub@f1
  3209  0957  0829               	movf	?___lbtoft+1,w
  3210  0958  00DA               	movwf	___ftsub@f1+1
  3211  0959  082A               	movf	?___lbtoft+2,w
  3212  095A  00DB               	movwf	___ftsub@f1+2
  3213  095B  2429  3188         	fcall	___ftsub
  3214                           
  3215                           ;DMX.c: 109: if(DMX_difference<0.05){
  3216  095D  2595  3188         	fcall	PL6	;call to abstracted procedure
  3217  095F  23FD  3188         	fcall	___ftge
  3218                           
  3219                           ;DMX.c: 110: DMXSign[Addr].SIGN = 0b00;
  3220  0961  086C               	movf	_Addr,w
  3221  0962  1803               	btfsc	3,0
  3222  0963  296D               	goto	L3
  3223                           
  3224                           ;DMX.c: 111: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3225  0964  266A  3188         	fcall	PL86	;call to abstracted procedure
  3226  0966  23ED  3188         	fcall	___lbtoft
  3227  0968  086C               	movf	_Addr,w
  3228  0969  076C               	addwf	_Addr,w
  3229  096A  2579  3188         	fcall	PL2	;call to abstracted procedure
  3230                           
  3231                           ;DMX.c: 112: }else{
  3232  096C  2A3B               	goto	l6041
  3233  096D                     L3:	
  3234                           ;DMX.c: 113: DMXSign[Addr].SIGN = 0b01;
  3235                           
  3236  096D  26D5  3188         	fcall	PL144	;call to abstracted procedure
  3237  096F  3801               	iorlw	1
  3238  0970  0081               	movwf	1
  3239                           
  3240                           ;DMX.c: 114: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3241  0971  258F  3188         	fcall	PL4	;call to abstracted procedure
  3242  0973  3F40               	moviw [0]fsr1
  3243  0974  25E9  3188         	fcall	PL20	;call to abstracted procedure
  3244  0976  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3245                           
  3246                           ;DMX.c: 115: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*DMX_repeatcoe
      +                          ff[Addr]/DMX_sumRepeat[Addr]);
  3247  0978  263E  3188         	fcall	PL62	;call to abstracted procedure
  3248  097A  258F  3188         	fcall	PL4	;call to abstracted procedure
  3249  097C  2679  3188         	fcall	PL90	;call to abstracted procedure
  3250  097E  265C  3188         	fcall	PL80	;call to abstracted procedure
  3251  0980  0801               	movf	1,w
  3252  0981  23ED  3188         	fcall	___lbtoft
  3253  0983  25B8  3188         	fcall	PL14	;call to abstracted procedure
  3254  0985  23ED  3188         	fcall	___lbtoft
  3255  0987  269B  3188         	fcall	PL108	;call to abstracted procedure
  3256  0989  26E4  3188         	fcall	___ftmul
  3257  098B  2686  3188         	fcall	PL102	;call to abstracted procedure
  3258  098D  2444  3188         	fcall	___ftdiv
  3259  098F  2655  3188         	fcall	PL74	;call to abstracted procedure
  3260  0991  24A0  3188         	fcall	___ftadd
  3261  0993  258F  3188         	fcall	PL4	;call to abstracted procedure
  3262  0995  0187               	clrf	7
  3263  0996  084A               	movf	?___ftadd,w
  3264  0997  3FC0               	movwi [0]fsr1
  3265  0998  084B               	movf	?___ftadd+1,w
  3266  0999  3FC1               	movwi [1]fsr1
  3267  099A  084C               	movf	?___ftadd+2,w
  3268                           
  3269                           ;DMX.c: 116: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMX
      +                          Period>>2);
  3270  099B  262B  3188         	fcall	PL46	;call to abstracted procedure
  3271  099D  254E  3188         	fcall	___awtoft
  3272  099F  2647  3188         	fcall	PL64	;call to abstracted procedure
  3273  09A1  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3274  09A3  0187               	clrf	7
  3275  09A4  2600  3188         	fcall	PL32	;call to abstracted procedure
  3276  09A6  258F  3188         	fcall	PL4	;call to abstracted procedure
  3277  09A8  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3278  09AA  2429  3188         	fcall	___ftsub
  3279  09AC  26A2  3188         	fcall	PL112	;call to abstracted procedure
  3280  09AE  2444  3188         	fcall	___ftdiv
  3281  09B0  2616  3188         	fcall	PL38	;call to abstracted procedure
  3282  09B2  268D  3188         	fcall	PL104	;call to abstracted procedure
  3283  09B4  2A3B               	goto	l6041
  3284  09B5                     l6021:	
  3285  09B5  0021               	movlb	1	; select bank1
  3286  09B6  0865               	movf	_rxdata^(0+128),w
  3287  09B7  23ED  3188         	fcall	___lbtoft
  3288  09B9  0828               	movf	?___lbtoft,w
  3289  09BA  00AC               	movwf	___ftge@ff1
  3290  09BB  0829               	movf	?___lbtoft+1,w
  3291  09BC  00AD               	movwf	___ftge@ff1+1
  3292  09BD  082A               	movf	?___lbtoft+2,w
  3293  09BE  00AE               	movwf	___ftge@ff1+2
  3294  09BF  258F  3188         	fcall	PL4	;call to abstracted procedure
  3295  09C1  0187               	clrf	7
  3296  09C2  264E  3188         	fcall	PL70	;call to abstracted procedure
  3297  09C4  23FD  3188         	fcall	___ftge
  3298  09C6  1803               	btfsc	3,0
  3299  09C7  2A2E               	goto	l6037
  3300                           
  3301                           ;DMX.c: 119: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  3302  09C8  0021               	movlb	1	; select bank1
  3303  09C9  0865               	movf	_rxdata^(0+128),w
  3304  09CA  23ED  3188         	fcall	___lbtoft
  3305  09CC  26A9  3188         	fcall	PL118	;call to abstracted procedure
  3306  09CE  258F  3188         	fcall	PL4	;call to abstracted procedure
  3307  09D0  0187               	clrf	7
  3308  09D1  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3309  09D3  2429  3188         	fcall	___ftsub
  3310                           
  3311                           ;DMX.c: 120: if(DMX_difference<0.05){
  3312  09D5  2595  3188         	fcall	PL6	;call to abstracted procedure
  3313  09D7  23FD  3188         	fcall	___ftge
  3314                           
  3315                           ;DMX.c: 121: DMXSign[Addr].SIGN = 0b00;
  3316  09D9  086C               	movf	_Addr,w
  3317  09DA  1803               	btfsc	3,0
  3318  09DB  29E5               	goto	L4
  3319                           
  3320                           ;DMX.c: 122: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3321  09DC  266A  3188         	fcall	PL86	;call to abstracted procedure
  3322  09DE  23ED  3188         	fcall	___lbtoft
  3323  09E0  086C               	movf	_Addr,w
  3324  09E1  076C               	addwf	_Addr,w
  3325  09E2  2579  3188         	fcall	PL2	;call to abstracted procedure
  3326                           
  3327                           ;DMX.c: 123: }
  3328  09E4  2A3B               	goto	l6041
  3329  09E5                     L4:	
  3330                           ;DMX.c: 124: else{
  3331                           ;DMX.c: 125: DMXSign[Addr].SIGN = 0b10;
  3332                           
  3333  09E5  26D5  3188         	fcall	PL144	;call to abstracted procedure
  3334  09E7  3802               	iorlw	2
  3335  09E8  0081               	movwf	1
  3336                           
  3337                           ;DMX.c: 126: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3338  09E9  258F  3188         	fcall	PL4	;call to abstracted procedure
  3339  09EB  3F40               	moviw [0]fsr1
  3340  09EC  25E9  3188         	fcall	PL20	;call to abstracted procedure
  3341  09EE  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3342                           
  3343                           ;DMX.c: 127: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*DMX_repeatcoe
      +                          ff[Addr]/DMX_sumRepeat[Addr]);
  3344  09F0  263E  3188         	fcall	PL62	;call to abstracted procedure
  3345  09F2  265C  3188         	fcall	PL80	;call to abstracted procedure
  3346  09F4  0801               	movf	1,w
  3347  09F5  23ED  3188         	fcall	___lbtoft
  3348  09F7  25B8  3188         	fcall	PL14	;call to abstracted procedure
  3349  09F9  23ED  3188         	fcall	___lbtoft
  3350  09FB  269B  3188         	fcall	PL108	;call to abstracted procedure
  3351  09FD  26E4  3188         	fcall	___ftmul
  3352  09FF  2686  3188         	fcall	PL102	;call to abstracted procedure
  3353  0A01  2444  3188         	fcall	___ftdiv
  3354  0A03  083B               	movf	?___ftdiv,w
  3355  0A04  00D6               	movwf	___ftsub@f2
  3356  0A05  083C               	movf	?___ftdiv+1,w
  3357  0A06  00D7               	movwf	___ftsub@f2+1
  3358  0A07  083D               	movf	?___ftdiv+2,w
  3359  0A08  00D8               	movwf	___ftsub@f2+2
  3360  0A09  258F  3188         	fcall	PL4	;call to abstracted procedure
  3361  0A0B  0187               	clrf	7
  3362  0A0C  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3363  0A0E  2429  3188         	fcall	___ftsub
  3364  0A10  258F  3188         	fcall	PL4	;call to abstracted procedure
  3365  0A12  2672  3188         	fcall	PL88	;call to abstracted procedure
  3366                           
  3367                           ;DMX.c: 128: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMX
      +                          Period>>2);
  3368  0A14  262B  3188         	fcall	PL46	;call to abstracted procedure
  3369  0A16  254E  3188         	fcall	___awtoft
  3370  0A18  2647  3188         	fcall	PL64	;call to abstracted procedure
  3371  0A1A  258F  3188         	fcall	PL4	;call to abstracted procedure
  3372  0A1C  0187               	clrf	7
  3373  0A1D  2600  3188         	fcall	PL32	;call to abstracted procedure
  3374  0A1F  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3375  0A21  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3376  0A23  2429  3188         	fcall	___ftsub
  3377  0A25  26A2  3188         	fcall	PL112	;call to abstracted procedure
  3378  0A27  2444  3188         	fcall	___ftdiv
  3379  0A29  2616  3188         	fcall	PL38	;call to abstracted procedure
  3380  0A2B  268D  3188         	fcall	PL104	;call to abstracted procedure
  3381  0A2D  2A3B               	goto	l6041
  3382  0A2E                     l6037:	
  3383                           
  3384                           ;DMX.c: 131: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3385  0A2E  0021               	movlb	1	; select bank1
  3386  0A2F  0865               	movf	_rxdata^(0+128),w
  3387  0A30  23ED  3188         	fcall	___lbtoft
  3388  0A32  086C               	movf	_Addr,w
  3389  0A33  076C               	addwf	_Addr,w
  3390  0A34  2579  3188         	fcall	PL2	;call to abstracted procedure
  3391                           
  3392                           ;DMX.c: 132: DMXSign[Addr].SIGN = 0b00;
  3393  0A36  086C               	movf	_Addr,w
  3394  0A37  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  3395  0A38  0086               	movwf	6
  3396  0A39  30FC               	movlw	-4
  3397  0A3A  0581               	andwf	1,f
  3398  0A3B                     l6041:	
  3399                           
  3400                           ;DMX.c: 133: }
  3401                           ;DMX.c: 135: if(preRxData[Addr]==RxData[Addr] && !DMXSign[Addr].InfiniteLoop){
  3402  0A3B  26B7  3188         	fcall	PL128	;call to abstracted procedure
  3403  0A3D  086C               	movf	_Addr,w
  3404  0A3E  3EC0               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3405  0A3F  0084               	movwf	4
  3406  0A40  3001               	movlw	1	; select bank3/4
  3407  0A41  0085               	movwf	5
  3408  0A42  0800               	movf	0,w
  3409  0A43  0601               	xorwf	1,w
  3410  0A44  1D03               	skipz
  3411  0A45  2A79               	goto	l6057
  3412  0A46  086C               	movf	_Addr,w
  3413  0A47  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  3414  0A48  0086               	movwf	6
  3415  0A49  0187               	clrf	7
  3416  0A4A  1901               	btfsc	1,2
  3417  0A4B  2A79               	goto	l6057
  3418                           
  3419                           ;DMX.c: 136: DMX_Repeat[Addr][0]++;
  3420  0A4C  26BD  3188         	fcall	PL132	;call to abstracted procedure
  3421  0A4E  0A81               	incf	1,f
  3422                           
  3423                           ;DMX.c: 137: if(DMX_Repeat[Addr][0]==0x10){
  3424  0A4F  356C               	lslf	_Addr,w
  3425  0A50  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3426  0A51  0086               	movwf	6
  3427  0A52  3010               	movlw	16
  3428  0A53  0601               	xorwf	1,w
  3429  0A54  1D03               	btfss	3,2
  3430  0A55  2A67               	goto	l6055
  3431                           
  3432                           ;DMX.c: 138: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3433  0A56  356C               	lslf	_Addr,w
  3434  0A57  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3435  0A58  26DB  3188         	fcall	PL152	;call to abstracted procedure
  3436  0A5A  3F80               	movwi [0]fsr0
  3437  0A5B  0081               	movwf	1
  3438                           
  3439                           ;DMX.c: 139: DMX_sumRepeat[Addr]=2;
  3440  0A5C  086C               	movf	_Addr,w
  3441  0A5D  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3442  0A5E  0086               	movwf	6
  3443  0A5F  3002               	movlw	2
  3444                           
  3445                           ;DMX.c: 140: DMXSign[Addr].InfiniteLoop=1;
  3446  0A60  26C3  3188         	fcall	PL136	;call to abstracted procedure
  3447  0A62  1501               	bsf	1,2
  3448                           
  3449                           ;DMX.c: 141: DMX_repeatcoeff[Addr]=2;
  3450  0A63  086C               	movf	_Addr,w
  3451  0A64  3E68               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  3452  0A65  2680  3188         	fcall	PL98	;call to abstracted procedure
  3453  0A67                     l6055:	
  3454                           
  3455                           ;DMX.c: 142: }
  3456                           ;DMX.c: 143: DMX_repeat_hereditary[Addr]=DMX_repeat_hereditary[Addr]/2+DMX_Repeat[Addr][
      +                          0];
  3457  0A67  26BD  3188         	fcall	PL132	;call to abstracted procedure
  3458  0A69  0801               	movf	1,w
  3459  0A6A  23ED  3188         	fcall	___lbtoft
  3460  0A6C  25D1  3188         	fcall	PL18	;call to abstracted procedure
  3461  0A6E  2444  3188         	fcall	___ftdiv
  3462  0A70  2655  3188         	fcall	PL74	;call to abstracted procedure
  3463  0A72  24A0  3188         	fcall	___ftadd
  3464  0A74  25F1  3188         	fcall	PL24	;call to abstracted procedure
  3465  0A76  2637  3188         	fcall	PL48	;call to abstracted procedure
  3466                           
  3467                           ;DMX.c: 144: }else{
  3468  0A78  2AC9               	goto	l6071
  3469  0A79                     l6057:	
  3470                           
  3471                           ;DMX.c: 145: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  3472  0A79  265C  3188         	fcall	PL80	;call to abstracted procedure
  3473  0A7B  356C               	lslf	_Addr,w
  3474  0A7C  3EE9               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3475  0A7D  0084               	movwf	4
  3476  0A7E  3001               	movlw	1	; select bank3/4
  3477  0A7F  0085               	movwf	5
  3478  0A80  0800               	movf	0,w
  3479  0A81  0024               	movlb	4	; select bank4
  3480  0A82  00C0               	movwf	??_DMX_loop^(0+512)
  3481  0A83  0020               	movlb	0	; select bank0
  3482  0A84  356C               	lslf	_Addr,w
  3483  0A85  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3484  0A86  0084               	movwf	4
  3485  0A87  0800               	movf	0,w
  3486  0A88  0024               	movlb	4	; select bank4
  3487  0A89  0740               	addwf	??_DMX_loop^(0+512),w
  3488  0A8A  0081               	movwf	1
  3489                           
  3490                           ;DMX.c: 146: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  3491  0A8B  0020               	movlb	0	; select bank0
  3492  0A8C  356C               	lslf	_Addr,w
  3493  0A8D  3EE9               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3494  0A8E  0086               	movwf	6
  3495  0A8F  356C               	lslf	_Addr,w
  3496  0A90  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3497  0A91  0084               	movwf	4
  3498  0A92  0800               	movf	0,w
  3499  0A93  0081               	movwf	1
  3500                           
  3501                           ;DMX.c: 147: DMX_repeat_hereditary[Addr]=DMX_repeat_hereditary[Addr]/2+DMX_Repeat[Addr][
      +                          0];
  3502  0A94  356C               	lslf	_Addr,w
  3503  0A95  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3504  0A96  0086               	movwf	6
  3505  0A97  0801               	movf	1,w
  3506  0A98  23ED  3188         	fcall	___lbtoft
  3507  0A9A  25D1  3188         	fcall	PL18	;call to abstracted procedure
  3508  0A9C  2444  3188         	fcall	___ftdiv
  3509  0A9E  2655  3188         	fcall	PL74	;call to abstracted procedure
  3510  0AA0  24A0  3188         	fcall	___ftadd
  3511  0AA2  25F1  3188         	fcall	PL24	;call to abstracted procedure
  3512  0AA4  2637  3188         	fcall	PL48	;call to abstracted procedure
  3513                           
  3514                           ;DMX.c: 148: DMX_Repeat[Addr][0]=1;
  3515  0AA6  356C               	lslf	_Addr,w
  3516  0AA7  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3517  0AA8  0086               	movwf	6
  3518  0AA9  0181               	clrf	1
  3519  0AAA  0A81               	incf	1,f
  3520                           
  3521                           ;DMX.c: 149: DMXSign[Addr].InfiniteLoop=0;
  3522  0AAB  086C               	movf	_Addr,w
  3523  0AAC  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  3524  0AAD  0086               	movwf	6
  3525  0AAE  3066               	movlw	102
  3526  0AAF  0187               	clrf	7
  3527  0AB0  1101               	bcf	1,2
  3528                           
  3529                           ;DMX.c: 150: if(DMX_repeat_hereditary[Addr]>2.1){
  3530  0AB1  00AC               	movwf	___ftge@ff1
  3531  0AB2  3006               	movlw	6
  3532  0AB3  00AD               	movwf	___ftge@ff1+1
  3533  0AB4  3040               	movlw	64
  3534  0AB5  00AE               	movwf	___ftge@ff1+2
  3535  0AB6  25F1  3188         	fcall	PL24	;call to abstracted procedure
  3536  0AB8  264E  3188         	fcall	PL70	;call to abstracted procedure
  3537  0ABA  23FD  3188         	fcall	___ftge
  3538                           
  3539                           ;DMX.c: 151: DMX_repeatcoeff[Addr]=1;
  3540  0ABC  086C               	movf	_Addr,w
  3541  0ABD  1803               	btfsc	3,0
  3542  0ABE  2AC6               	goto	L5
  3543  0ABF  3E68               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  3544  0AC0  0086               	movwf	6
  3545  0AC1  3001               	movlw	1	; select bank2/3
  3546  0AC2  0087               	movwf	7
  3547  0AC3  0181               	clrf	1
  3548  0AC4  0A81               	incf	1,f
  3549                           
  3550                           ;DMX.c: 152: }else{
  3551  0AC5  2AC9               	goto	l6071
  3552  0AC6                     L5:	
  3553                           ;DMX.c: 153: DMX_repeatcoeff[Addr]=2;
  3554                           
  3555  0AC6  3E68               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  3556  0AC7  2680  3188         	fcall	PL98	;call to abstracted procedure
  3557  0AC9                     l6071:	
  3558                           
  3559                           ;DMX.c: 154: }
  3560                           ;DMX.c: 155: }
  3561                           ;DMX.c: 156: preRxData[Addr]=RxData[Addr];
  3562  0AC9  086C               	movf	_Addr,w
  3563  0ACA  3EC0               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3564  0ACB  0086               	movwf	6
  3565  0ACC  3001               	movlw	1	; select bank3/4
  3566  0ACD  0087               	movwf	7
  3567  0ACE  086C               	movf	_Addr,w
  3568  0ACF  3E64               	addlw	(low (_RxData| (0+256)))& (0+255)
  3569  0AD0  0084               	movwf	4
  3570  0AD1  3001               	movlw	1	; select bank2/3
  3571  0AD2  0085               	movwf	5
  3572  0AD3  0800               	movf	0,w
  3573  0AD4  0081               	movwf	1
  3574                           
  3575                           ;DMX.c: 157: Addr++;
  3576  0AD5  0AEC               	incf	_Addr,f
  3577  0AD6                     l6075:	
  3578  0AD6  0021               	movlb	1	; select bank1
  3579  0AD7  086E               	movf	_FOOTPRINT^(0+128),w
  3580  0AD8  0020               	movlb	0	; select bank0
  3581  0AD9  026C               	subwf	_Addr,w
  3582  0ADA  1C03               	skipc
  3583  0ADB  2933               	goto	l6003
  3584  0ADC                     l498:	
  3585                           
  3586                           ;DMX.c: 158: }
  3587                           ;DMX.c: 159: }
  3588                           ;DMX.c: 160: }
  3589                           ;DMX.c: 162: if (Timer.MS ) {
  3590  0ADC  0021               	movlb	1	; select bank1
  3591  0ADD  1C38               	btfss	_Timer^(0+128),0	;volatile
  3592  0ADE  0008               	return
  3593                           
  3594                           ;DMX.c: 163: DMXPeriodConst++;
  3595  0ADF  0AE8               	incf	_DMXPeriodConst^(0+128),f	;volatile
  3596                           
  3597                           ;DMX.c: 164: Timer.MS = 0;
  3598  0AE0  1038               	bcf	_Timer^(0+128),0	;volatile
  3599                           
  3600                           ;DMX.c: 165: Addr = 0;
  3601  0AE1  0020               	movlb	0	; select bank0
  3602  0AE2  01EC               	clrf	_Addr
  3603                           
  3604                           ;DMX.c: 166: DMXDimming++;
  3605  0AE3  0021               	movlb	1	; select bank1
  3606  0AE4  0AE7               	incf	_DMXDimming^(0+128),f	;volatile
  3607                           
  3608                           ;DMX.c: 167: if(DMXStepConst==0 && DMXDimming<DMXPeriod){
  3609  0AE5  0866               	movf	_DMXStepConst^(0+128),w
  3610  0AE6  1D03               	btfss	3,2
  3611  0AE7  2BEB               	goto	l6117
  3612  0AE8  086D               	movf	_DMXPeriod^(0+128),w
  3613  0AE9  0267               	subwf	_DMXDimming^(0+128),w	;volatile
  3614  0AEA  1803               	skipnc
  3615  0AEB  2BEB               	goto	l6117
  3616                           
  3617                           ;DMX.c: 168: DMXStepConst=3;
  3618  0AEC  3003               	movlw	3
  3619  0AED  00E6               	movwf	_DMXStepConst^(0+128)
  3620                           
  3621                           ;DMX.c: 169: while (Addr < FOOTPRINT) {
  3622  0AEE  2BD5               	goto	l6115
  3623  0AEF                     l6091:	
  3624                           
  3625                           ;DMX.c: 172: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  3626  0AEF  2616  3188         	fcall	PL38	;call to abstracted procedure
  3627  0AF1  2679  3188         	fcall	PL90	;call to abstracted procedure
  3628  0AF3  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3629  0AF5  0187               	clrf	7
  3630  0AF6  3F40               	moviw [0]fsr1
  3631  0AF7  00CD               	movwf	___ftadd@f2
  3632  0AF8  3F41               	moviw [1]fsr1
  3633  0AF9  00CE               	movwf	___ftadd@f2+1
  3634  0AFA  3F42               	moviw [2]fsr1
  3635  0AFB  00CF               	movwf	___ftadd@f2+2
  3636  0AFC  24A0  3188         	fcall	___ftadd
  3637  0AFE  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3638  0B00  0187               	clrf	7
  3639  0B01  2637  3188         	fcall	PL48	;call to abstracted procedure
  3640                           
  3641                           ;DMX.c: 173: if(DMX_CurrentBright[Addr]>255){
  3642  0B03  307F               	movlw	127
  3643  0B04  01AC               	clrf	___ftge@ff1
  3644  0B05  00AD               	movwf	___ftge@ff1+1
  3645  0B06  3043               	movlw	67
  3646  0B07  00AE               	movwf	___ftge@ff1+2
  3647  0B08  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3648  0B0A  264E  3188         	fcall	PL70	;call to abstracted procedure
  3649  0B0C  23FD  3188         	fcall	___ftge
  3650                           
  3651                           ;DMX.c: 174: DMX_CurrentBright[Addr]=255;
  3652  0B0E  086C               	movf	_Addr,w
  3653  0B0F  1803               	btfsc	3,0
  3654  0B10  2B39               	goto	L6
  3655  0B11  2662  3188         	fcall	PL82	;call to abstracted procedure
  3656  0B13  307F               	movlw	127
  3657  0B14  3FC1               	movwi [1]fsr1
  3658  0B15  3043               	movlw	67
  3659  0B16  3FC2               	movwi [2]fsr1
  3660  0B17  2B38               	goto	l6103
  3661  0B18                     l6095:	
  3662                           
  3663                           ;DMX.c: 178: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  3664  0B18  2616  3188         	fcall	PL38	;call to abstracted procedure
  3665  0B1A  2600  3188         	fcall	PL32	;call to abstracted procedure
  3666  0B1C  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3667  0B1E  0187               	clrf	7
  3668  0B1F  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3669  0B21  2429  3188         	fcall	___ftsub
  3670  0B23  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3671  0B25  2672  3188         	fcall	PL88	;call to abstracted procedure
  3672  0B27  3FC2               	movwi [2]fsr1
  3673                           
  3674                           ;DMX.c: 179: if(DMX_CurrentBright[Addr]<0){
  3675  0B28  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3676  0B2A  2694  3188         	fcall	PL106	;call to abstracted procedure
  3677  0B2C  01AF               	clrf	___ftge@ff2
  3678  0B2D  01B0               	clrf	___ftge@ff2+1
  3679  0B2E  01B1               	clrf	___ftge@ff2+2
  3680  0B2F  23FD  3188         	fcall	___ftge
  3681                           
  3682                           ;DMX.c: 180: DMX_CurrentBright[Addr]=0;
  3683  0B31  086C               	movf	_Addr,w
  3684  0B32  1803               	btfsc	3,0
  3685  0B33  2B39               	goto	L6
  3686  0B34  2662  3188         	fcall	PL82	;call to abstracted procedure
  3687  0B36  3FC1               	movwi [1]fsr1
  3688  0B37  3FC2               	movwi [2]fsr1
  3689  0B38                     l6103:	
  3690                           
  3691                           ;DMX.c: 186: rxdata=DMX_CurrentBright[Addr];
  3692  0B38  086C               	movf	_Addr,w
  3693  0B39                     L6:	
  3694  0B39  076C               	addwf	_Addr,w
  3695  0B3A  076C               	addwf	_Addr,w
  3696  0B3B  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3697  0B3C  0086               	movwf	6
  3698  0B3D  0187               	clrf	7
  3699  0B3E  3F40               	moviw [0]fsr1
  3700  0B3F  00DC               	movwf	___fttol@f1
  3701  0B40  3F41               	moviw [1]fsr1
  3702  0B41  00DD               	movwf	___fttol@f1+1
  3703  0B42  3F42               	moviw [2]fsr1
  3704  0B43  00DE               	movwf	___fttol@f1+2
  3705  0B44  2789  3188         	fcall	___fttol
  3706  0B46  085C               	movf	?___fttol,w
  3707  0B47  0021               	movlb	1	; select bank1
  3708  0B48  00E5               	movwf	_rxdata^(0+128)
  3709                           
  3710                           ;DMX.c: 188: CurrentPWM.DC[Addr]=PWM[rxdata].DC+(PWM[rxdata+1].DC-PWM[rxdata].DC)*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3711  0B49  261E  3188         	fcall	PL42	;call to abstracted procedure
  3712  0B4B  00C2               	movwf	(??_DMX_loop+2)^(0+512)
  3713  0B4C  3F01               	moviw [1]fsr0
  3714  0B4D  00C3               	movwf	((??_DMX_loop+2)^(0+512)+1)
  3715  0B4E  0021               	movlb	1	; select bank1
  3716  0B4F  0865               	movf	_rxdata^(0+128),w
  3717  0B50  0024               	movlb	4	; select bank4
  3718  0B51  00C4               	movwf	(??_DMX_loop+4)^(0+512)
  3719  0B52  3002               	movlw	low ((_PWM+2)| (0+32768))
  3720  0B53  01C5               	clrf	((??_DMX_loop+4)^(0+512)+1)
  3721  0B54  35C4               	lslf	(??_DMX_loop+4)^(0+512),f
  3722  0B55  0DC5               	rlf	((??_DMX_loop+4)^(0+512)+1),f
  3723  0B56  0744               	addwf	(??_DMX_loop+4)^(0+512),w
  3724  0B57  0084               	movwf	4
  3725  0B58  3098               	movlw	high ((_PWM+2)| (0+32768))
  3726  0B59  3D45               	addwfc	(??_DMX_loop+5)^(0+512),w
  3727  0B5A  0085               	movwf	5
  3728  0B5B  3F00               	moviw [0]fsr0
  3729  0B5C  00C6               	movwf	(??_DMX_loop+6)^(0+512)
  3730  0B5D  3F01               	moviw [1]fsr0
  3731  0B5E  00C7               	movwf	((??_DMX_loop+6)^(0+512)+1)
  3732  0B5F  0842               	movf	(??_DMX_loop+2)^(0+512),w
  3733  0B60  0246               	subwf	(??_DMX_loop+6)^(0+512),w
  3734  0B61  0020               	movlb	0	; select bank0
  3735  0B62  00A8               	movwf	___lwtoft@c
  3736  0B63  0024               	movlb	4	; select bank4
  3737  0B64  0843               	movf	(??_DMX_loop+3)^(0+512),w
  3738  0B65  3B47               	subwfb	(??_DMX_loop+7)^(0+512),w
  3739  0B66  0020               	movlb	0	; select bank0
  3740  0B67  00A9               	movwf	___lwtoft@c+1
  3741  0B68  2569  3188         	fcall	___lwtoft
  3742  0B6A  0828               	movf	?___lwtoft,w
  3743  0B6B  00AF               	movwf	___ftmul@f2
  3744  0B6C  0829               	movf	?___lwtoft+1,w
  3745  0B6D  00B0               	movwf	___ftmul@f2+1
  3746  0B6E  082A               	movf	?___lwtoft+2,w
  3747  0B6F  00B1               	movwf	___ftmul@f2+2
  3748  0B70  25B2  3188         	fcall	PL12	;call to abstracted procedure
  3749  0B72  0187               	clrf	7
  3750  0B73  25F9  3188         	fcall	PL28	;call to abstracted procedure
  3751  0B75  0021               	movlb	1	; select bank1
  3752  0B76  0865               	movf	_rxdata^(0+128),w
  3753  0B77  23ED  3188         	fcall	___lbtoft
  3754  0B79  26A9  3188         	fcall	PL118	;call to abstracted procedure
  3755  0B7B  2429  3188         	fcall	___ftsub
  3756  0B7D  0856               	movf	?___ftsub,w
  3757  0B7E  00AC               	movwf	___ftmul@f1
  3758  0B7F  0857               	movf	?___ftsub+1,w
  3759  0B80  00AD               	movwf	___ftmul@f1+1
  3760  0B81  0858               	movf	?___ftsub+2,w
  3761  0B82  00AE               	movwf	___ftmul@f1+2
  3762  0B83  26E4  3188         	fcall	___ftmul
  3763  0B85  082C               	movf	?___ftmul,w
  3764  0B86  00E9               	movwf	_DMX_loop$1925
  3765  0B87  082D               	movf	?___ftmul+1,w
  3766  0B88  00EA               	movwf	_DMX_loop$1925+1
  3767  0B89  082E               	movf	?___ftmul+2,w
  3768  0B8A  00EB               	movwf	_DMX_loop$1925+2
  3769                           
  3770                           ;DMX.c: 188: CurrentPWM.DC[Addr]=PWM[rxdata].DC+(PWM[rxdata+1].DC-PWM[rxdata].DC)*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3771  0B8B  0021               	movlb	1	; select bank1
  3772  0B8C  0865               	movf	_rxdata^(0+128),w
  3773  0B8D  261E  3188         	fcall	PL42	;call to abstracted procedure
  3774  0B8F  0020               	movlb	0	; select bank0
  3775  0B90  00A8               	movwf	___lwtoft@c
  3776  0B91  3F01               	moviw [1]fsr0
  3777  0B92  00A9               	movwf	___lwtoft@c+1
  3778  0B93  2569  3188         	fcall	___lwtoft
  3779  0B95  0828               	movf	?___lwtoft,w
  3780  0B96  00CD               	movwf	___ftadd@f2
  3781  0B97  0829               	movf	?___lwtoft+1,w
  3782  0B98  00CE               	movwf	___ftadd@f2+1
  3783  0B99  082A               	movf	?___lwtoft+2,w
  3784  0B9A  00CF               	movwf	___ftadd@f2+2
  3785  0B9B  0869               	movf	_DMX_loop$1925,w
  3786  0B9C  00CA               	movwf	___ftadd@f1
  3787  0B9D  086A               	movf	_DMX_loop$1925+1,w
  3788  0B9E  00CB               	movwf	___ftadd@f1+1
  3789  0B9F  086B               	movf	_DMX_loop$1925+2,w
  3790  0BA0  00CC               	movwf	___ftadd@f1+2
  3791  0BA1  24A0  3188         	fcall	___ftadd
  3792  0BA3  084A               	movf	?___ftadd,w
  3793  0BA4  00DC               	movwf	___fttol@f1
  3794  0BA5  084B               	movf	?___ftadd+1,w
  3795  0BA6  00DD               	movwf	___fttol@f1+1
  3796  0BA7  084C               	movf	?___ftadd+2,w
  3797  0BA8  00DE               	movwf	___fttol@f1+2
  3798  0BA9  2789  3188         	fcall	___fttol
  3799  0BAB  356C               	lslf	_Addr,w
  3800  0BAC  3EB8               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3801  0BAD  0086               	movwf	6
  3802  0BAE  3001               	movlw	1	; select bank3/4
  3803  0BAF  0087               	movwf	7
  3804  0BB0  085C               	movf	?___fttol,w
  3805  0BB1  3FC0               	movwi [0]fsr1
  3806  0BB2  085D               	movf	?___fttol+1,w
  3807  0BB3  3FC1               	movwi [1]fsr1
  3808                           
  3809                           ;DMX.c: 189: if(!DMX_Flags.RDM_Identify_Device){
  3810  0BB4  19F7               	btfsc	_DMX_Flags+1,3	;volatile
  3811  0BB5  2BD3               	goto	l6113
  3812                           
  3813                           ;DMX.c: 190: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  3814  0BB6  356C               	lslf	_Addr,w
  3815  0BB7  3EB9               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3816  0BB8  0086               	movwf	6
  3817  0BB9  26CF  3188         	fcall	PL140	;call to abstracted procedure
  3818  0BBB  3EA8               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  3819                           
  3820                           ;DMX.c: 191: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  3821  0BBC  2607  3188         	fcall	PL36	;call to abstracted procedure
  3822  0BBE  3EB8               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3823  0BBF  0086               	movwf	6
  3824  0BC0  3001               	movlw	1	; select bank3/4
  3825  0BC1  0087               	movwf	7
  3826  0BC2  26CF  3188         	fcall	PL140	;call to abstracted procedure
  3827  0BC4  3EB0               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  3828                           
  3829                           ;DMX.c: 192: *PWMLDCONptr[Addr] = 0b10000000;
  3830  0BC5  2607               	fcall	PL36	;call to abstracted procedure
  3831  0BC6  3182  2209  3188   	fcall	PL94	;call to abstracted procedure
  3832  0BC9  0024               	movlb	4	; select bank4
  3833  0BCA  00C0               	movwf	??_DMX_loop^(0+512)
  3834  0BCB  3F41               	moviw [1]fsr1
  3835  0BCC  00C1               	movwf	(??_DMX_loop^(0+512)+1)
  3836  0BCD  0840               	movf	??_DMX_loop^(0+512),w
  3837  0BCE  0086               	movwf	6
  3838  0BCF  0841               	movf	(??_DMX_loop+1)^(0+512),w
  3839  0BD0  0087               	movwf	7
  3840  0BD1  3080               	movlw	128
  3841  0BD2  0081               	movwf	1
  3842  0BD3                     l6113:	
  3843                           
  3844                           ;DMX.c: 193: }
  3845                           ;DMX.c: 194: Addr++;
  3846  0BD3  0020               	movlb	0	; select bank0
  3847  0BD4  0AEC               	incf	_Addr,f
  3848  0BD5                     l6115:	
  3849  0BD5  0021               	movlb	1	; select bank1
  3850  0BD6  086E               	movf	_FOOTPRINT^(0+128),w
  3851  0BD7  0020               	movlb	0	; select bank0
  3852  0BD8  026C               	subwf	_Addr,w
  3853  0BD9  1803               	btfsc	3,0
  3854  0BDA  0008               	return
  3855  0BDB  086C               	movf	_Addr,w
  3856  0BDC  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  3857  0BDD  0086               	movwf	6
  3858  0BDE  0187               	clrf	7
  3859  0BDF  0801               	movf	1,w
  3860  0BE0  3903               	andlw	3
  3861                           
  3862                           ; Switch size 1, requested type "space"
  3863                           ; Number of cases is 3, Range of values is 0 to 2
  3864                           ; switch strategies available:
  3865                           ; Name         Instructions Cycles
  3866                           ; simple_byte           10     6 (average)
  3867                           ; direct_byte           12     6 (fixed)
  3868                           ; jumptable            260     6 (fixed)
  3869                           ;	Chosen strategy is simple_byte
  3870  0BE1  1903               	skipnz
  3871  0BE2  2B38               	goto	l6103
  3872  0BE3  3A01               	xorlw	1	; case 1
  3873  0BE4  1903               	skipnz
  3874  0BE5  2AEF               	goto	l6091
  3875  0BE6  3A03               	xorlw	3	; case 2
  3876  0BE7  1903               	skipnz
  3877  0BE8  2B18               	goto	l6095
  3878  0BE9  2B38               	goto	l6103
  3879  0BEA  2B38               	goto	l6103
  3880  0BEB                     l6117:	
  3881                           
  3882                           ;DMX.c: 197: DMXStepConst--;
  3883  0BEB  03E6               	decf	_DMXStepConst^(0+128),f
  3884  0BEC  0008               	return
  3885  0BED                     __end_of_DMX_loop:	
  3886  0BED                     __ptext35:	
  3887 ;; *************** function ___lbtoft *****************
  3888 ;; Defined at:
  3889 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  c               1    wreg     unsigned char 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  c               1    4[COMMON] unsigned char 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  3    8[BANK0 ] float 
  3896 ;; Registers used:
  3897 ;;		wreg, status,2, status,0, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 1E/1
  3900 ;;		On exit  : 1F/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3903 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;Total ram usage:        5 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    3
  3910 ;; This function calls:
  3911 ;;		___ftpack
  3912 ;; This function is called by:
  3913 ;;		_DMX_loop
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function ___lbtoft
  3919  0BED                     ___lbtoft:	
  3920                           
  3921                           ;incstack = 0
  3922                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3923                           ;___lbtoft@c stored from wreg
  3924  0BED  00F4               	movwf	___lbtoft@c
  3925  0BEE  0020               	movlb	0	; select bank0
  3926  0BEF  00A0               	movwf	___ftpack@arg
  3927  0BF0  308E               	movlw	142
  3928  0BF1  01A1               	clrf	___ftpack@arg+1
  3929  0BF2  01A2               	clrf	___ftpack@arg+2
  3930  0BF3  00A3               	movwf	___ftpack@exp
  3931  0BF4  01A4               	clrf	___ftpack@sign
  3932  0BF5  2740               	fcall	___ftpack
  3933  0BF6  0820               	movf	?___ftpack,w
  3934  0BF7  00A8               	movwf	?___lbtoft
  3935  0BF8  0821               	movf	?___ftpack+1,w
  3936  0BF9  00A9               	movwf	?___lbtoft+1
  3937  0BFA  0822               	movf	?___ftpack+2,w
  3938  0BFB  00AA               	movwf	?___lbtoft+2
  3939  0BFC  0008               	return
  3940  0BFD                     __end_of___lbtoft:	
  3941  0BFD                     __ptext40:	
  3942 ;; *************** function ___ftge *****************
  3943 ;; Defined at:
  3944 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  ff1             3   12[BANK0 ] float 
  3947 ;;  ff2             3   15[BANK0 ] float 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 1F/0
  3956 ;;		On exit  : 1F/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3959 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3962 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3963 ;;Total ram usage:        6 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_DMX_loop
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function ___ftge
  3975  0BFD                     ___ftge:	
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3979  0BFD  1FAE               	btfss	___ftge@ff1+2,7
  3980  0BFE  2C0C               	goto	l4313
  3981  0BFF  082C               	movf	___ftge@ff1,w
  3982  0C00  3C00               	sublw	0
  3983  0C01  00AC               	movwf	___ftge@ff1
  3984  0C02  082D               	movf	___ftge@ff1+1,w
  3985  0C03  1C03               	skipc
  3986  0C04  0F2D               	incfsz	___ftge@ff1+1,w
  3987  0C05  3C00               	sublw	0
  3988  0C06  00AD               	movwf	___ftge@ff1+1
  3989  0C07  082E               	movf	___ftge@ff1+2,w
  3990  0C08  1C03               	skipc
  3991  0C09  0F2E               	incfsz	___ftge@ff1+2,w
  3992  0C0A  3C80               	sublw	128
  3993  0C0B  00AE               	movwf	___ftge@ff1+2
  3994  0C0C                     l4313:	
  3995  0C0C  1FB1               	btfss	___ftge@ff2+2,7
  3996  0C0D  2C1B               	goto	l4317
  3997  0C0E  082F               	movf	___ftge@ff2,w
  3998  0C0F  3C00               	sublw	0
  3999  0C10  00AF               	movwf	___ftge@ff2
  4000  0C11  0830               	movf	___ftge@ff2+1,w
  4001  0C12  1C03               	skipc
  4002  0C13  0F30               	incfsz	___ftge@ff2+1,w
  4003  0C14  3C00               	sublw	0
  4004  0C15  00B0               	movwf	___ftge@ff2+1
  4005  0C16  0831               	movf	___ftge@ff2+2,w
  4006  0C17  1C03               	skipc
  4007  0C18  0F31               	incfsz	___ftge@ff2+2,w
  4008  0C19  3C80               	sublw	128
  4009  0C1A  00B1               	movwf	___ftge@ff2+2
  4010  0C1B                     l4317:	
  4011  0C1B  3080               	movlw	128
  4012  0C1C  06AE               	xorwf	___ftge@ff1+2,f
  4013  0C1D  06B1               	xorwf	___ftge@ff2+2,f
  4014  0C1E  0831               	movf	___ftge@ff2+2,w
  4015  0C1F  022E               	subwf	___ftge@ff1+2,w
  4016  0C20  1D03               	skipz
  4017  0C21  0008               	return
  4018  0C22  0830               	movf	___ftge@ff2+1,w
  4019  0C23  022D               	subwf	___ftge@ff1+1,w
  4020  0C24  1D03               	skipz
  4021  0C25  0008               	return
  4022  0C26  082F               	movf	___ftge@ff2,w
  4023  0C27  022C               	subwf	___ftge@ff1,w
  4024  0C28  0008               	return
  4025  0C29                     __end_of___ftge:	
  4026  0C29                     __ptext37:	
  4027 ;; *************** function ___ftsub *****************
  4028 ;; Defined at:
  4029 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  f2              3   54[BANK0 ] float 
  4032 ;;  f1              3   57[BANK0 ] float 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  3   54[BANK0 ] float 
  4037 ;; Registers used:
  4038 ;;		wreg, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 1F/0
  4041 ;;		On exit  : 1F/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4044 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;Total ram usage:        6 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    4
  4051 ;; This function calls:
  4052 ;;		___ftadd
  4053 ;; This function is called by:
  4054 ;;		_DMX_loop
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function ___ftsub
  4060  0C29                     ___ftsub:	
  4061                           
  4062                           ;incstack = 0
  4063                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4064  0C29  0858               	movf	___ftsub@f2+2,w
  4065  0C2A  0457               	iorwf	___ftsub@f2+1,w
  4066  0C2B  0456               	iorwf	___ftsub@f2,w
  4067  0C2C  1903               	skipnz
  4068  0C2D  2C30               	goto	l5851
  4069  0C2E  3080               	movlw	128
  4070  0C2F  06D8               	xorwf	___ftsub@f2+2,f
  4071  0C30                     l5851:	
  4072  0C30  0859               	movf	___ftsub@f1,w
  4073  0C31  00CA               	movwf	___ftadd@f1
  4074  0C32  085A               	movf	___ftsub@f1+1,w
  4075  0C33  00CB               	movwf	___ftadd@f1+1
  4076  0C34  085B               	movf	___ftsub@f1+2,w
  4077  0C35  00CC               	movwf	___ftadd@f1+2
  4078  0C36  0856               	movf	___ftsub@f2,w
  4079  0C37  00CD               	movwf	___ftadd@f2
  4080  0C38  0857               	movf	___ftsub@f2+1,w
  4081  0C39  00CE               	movwf	___ftadd@f2+1
  4082  0C3A  0858               	movf	___ftsub@f2+2,w
  4083  0C3B  00CF               	movwf	___ftadd@f2+2
  4084  0C3C  24A0               	fcall	___ftadd
  4085  0C3D  084A               	movf	?___ftadd,w
  4086  0C3E  00D6               	movwf	?___ftsub
  4087  0C3F  084B               	movf	?___ftadd+1,w
  4088  0C40  00D7               	movwf	?___ftsub+1
  4089  0C41  084C               	movf	?___ftadd+2,w
  4090  0C42  00D8               	movwf	?___ftsub+2
  4091  0C43  0008               	return
  4092  0C44                     __end_of___ftsub:	
  4093  0C44                     __ptext41:	
  4094 ;; *************** function ___ftdiv *****************
  4095 ;; Defined at:
  4096 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  f2              3   27[BANK0 ] float 
  4099 ;;  f1              3   30[BANK0 ] float 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  f3              3   37[BANK0 ] float 
  4102 ;;  sign            1   41[BANK0 ] unsigned char 
  4103 ;;  exp             1   40[BANK0 ] unsigned char 
  4104 ;;  cntr            1   36[BANK0 ] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  3   27[BANK0 ] float 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, pclath, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 1F/0
  4111 ;;		On exit  : 1F/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4114 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;Total ram usage:       15 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    3
  4121 ;; This function calls:
  4122 ;;		___ftpack
  4123 ;; This function is called by:
  4124 ;;		_DMX_loop
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function ___ftdiv
  4130  0C44                     ___ftdiv:	
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4134  0C44  083E               	movf	___ftdiv@f1,w
  4135  0C45  00C1               	movwf	??___ftdiv
  4136  0C46  083F               	movf	___ftdiv@f1+1,w
  4137  0C47  00C2               	movwf	??___ftdiv+1
  4138  0C48  0840               	movf	___ftdiv@f1+2,w
  4139  0C49  00C3               	movwf	??___ftdiv+2
  4140  0C4A  1003               	clrc
  4141  0C4B  0D42               	rlf	??___ftdiv+1,w
  4142  0C4C  0D43               	rlf	??___ftdiv+2,w
  4143  0C4D  00C8               	movwf	___ftdiv@exp
  4144  0C4E  0848               	movf	___ftdiv@exp,w
  4145  0C4F  1D03               	btfss	3,2
  4146  0C50  2C52               	goto	l5759
  4147  0C51  2EE0               	ljmp	PL174	;call to abstracted procedure
  4148  0C52                     l5759:	
  4149  0C52  083B               	movf	___ftdiv@f2,w
  4150  0C53  00C1               	movwf	??___ftdiv
  4151  0C54  083C               	movf	___ftdiv@f2+1,w
  4152  0C55  00C2               	movwf	??___ftdiv+1
  4153  0C56  083D               	movf	___ftdiv@f2+2,w
  4154  0C57  00C3               	movwf	??___ftdiv+2
  4155  0C58  1003               	clrc
  4156  0C59  0D42               	rlf	??___ftdiv+1,w
  4157  0C5A  0D43               	rlf	??___ftdiv+2,w
  4158  0C5B  00C9               	movwf	___ftdiv@sign
  4159  0C5C  0849               	movf	___ftdiv@sign,w
  4160  0C5D  1D03               	btfss	3,2
  4161  0C5E  2C60               	goto	l1851
  4162  0C5F  2EE0               	ljmp	PL174	;call to abstracted procedure
  4163  0C60                     l1851:	
  4164  0C60  3089               	movlw	137
  4165  0C61  01C5               	clrf	___ftdiv@f3
  4166  0C62  01C6               	clrf	___ftdiv@f3+1
  4167  0C63  01C7               	clrf	___ftdiv@f3+2
  4168  0C64  0749               	addwf	___ftdiv@sign,w
  4169  0C65  00C1               	movwf	??___ftdiv
  4170  0C66  02C8               	subwf	___ftdiv@exp,f
  4171  0C67  0840               	movf	___ftdiv@f1+2,w
  4172  0C68  00C9               	movwf	___ftdiv@sign
  4173  0C69  083D               	movf	___ftdiv@f2+2,w
  4174  0C6A  06C9               	xorwf	___ftdiv@sign,f
  4175  0C6B  3080               	movlw	128
  4176  0C6C  05C9               	andwf	___ftdiv@sign,f
  4177  0C6D  3018               	movlw	24
  4178  0C6E  17BF               	bsf	___ftdiv@f1+1,7
  4179  0C6F  01C0               	clrf	___ftdiv@f1+2
  4180  0C70  17BC               	bsf	___ftdiv@f2+1,7
  4181  0C71  01BD               	clrf	___ftdiv@f2+2
  4182  0C72  00C4               	movwf	___ftdiv@cntr
  4183  0C73                     l5781:	
  4184  0C73  35C5               	lslf	___ftdiv@f3,f
  4185  0C74  0DC6               	rlf	___ftdiv@f3+1,f
  4186  0C75  0DC7               	rlf	___ftdiv@f3+2,f
  4187  0C76  083D               	movf	___ftdiv@f2+2,w
  4188  0C77  0240               	subwf	___ftdiv@f1+2,w
  4189  0C78  1D03               	skipz
  4190  0C79  2C80               	goto	u3785
  4191  0C7A  083C               	movf	___ftdiv@f2+1,w
  4192  0C7B  023F               	subwf	___ftdiv@f1+1,w
  4193  0C7C  1D03               	skipz
  4194  0C7D  2C80               	goto	u3785
  4195  0C7E  083B               	movf	___ftdiv@f2,w
  4196  0C7F  023E               	subwf	___ftdiv@f1,w
  4197  0C80                     u3785:	
  4198  0C80  1C03               	skipc
  4199  0C81  2C89               	goto	l5787
  4200  0C82  083B               	movf	___ftdiv@f2,w
  4201  0C83  02BE               	subwf	___ftdiv@f1,f
  4202  0C84  083C               	movf	___ftdiv@f2+1,w
  4203  0C85  3BBF               	subwfb	___ftdiv@f1+1,f
  4204  0C86  083D               	movf	___ftdiv@f2+2,w
  4205  0C87  3BC0               	subwfb	___ftdiv@f1+2,f
  4206  0C88  1445               	bsf	___ftdiv@f3,0
  4207  0C89                     l5787:	
  4208  0C89  35BE               	lslf	___ftdiv@f1,f
  4209  0C8A  0DBF               	rlf	___ftdiv@f1+1,f
  4210  0C8B  0DC0               	rlf	___ftdiv@f1+2,f
  4211  0C8C  0BC4               	decfsz	___ftdiv@cntr,f
  4212  0C8D  2C73               	goto	l5781
  4213  0C8E  0845               	movf	___ftdiv@f3,w
  4214  0C8F  00A0               	movwf	___ftpack@arg
  4215  0C90  0846               	movf	___ftdiv@f3+1,w
  4216  0C91  00A1               	movwf	___ftpack@arg+1
  4217  0C92  0847               	movf	___ftdiv@f3+2,w
  4218  0C93  00A2               	movwf	___ftpack@arg+2
  4219  0C94  0848               	movf	___ftdiv@exp,w
  4220  0C95  00A3               	movwf	___ftpack@exp
  4221  0C96  0849               	movf	___ftdiv@sign,w
  4222  0C97  00A4               	movwf	___ftpack@sign
  4223  0C98  2740               	fcall	___ftpack
  4224  0C99  0820               	movf	?___ftpack,w
  4225  0C9A  00BB               	movwf	?___ftdiv
  4226  0C9B  0821               	movf	?___ftpack+1,w
  4227  0C9C  00BC               	movwf	?___ftdiv+1
  4228  0C9D  0822               	movf	?___ftpack+2,w
  4229  0C9E  00BD               	movwf	?___ftdiv+2
  4230  0C9F  0008               	return
  4231  0CA0                     __end_of___ftdiv:	
  4232  0CA0                     __ptext38:	
  4233 ;; *************** function ___ftadd *****************
  4234 ;; Defined at:
  4235 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  f1              3   42[BANK0 ] float 
  4238 ;;  f2              3   45[BANK0 ] float 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  exp1            1   53[BANK0 ] unsigned char 
  4241 ;;  exp2            1   52[BANK0 ] unsigned char 
  4242 ;;  sign            1   51[BANK0 ] unsigned char 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  3   42[BANK0 ] float 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, pclath, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 1F/0
  4249 ;;		On exit  : 1F/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4252 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;Total ram usage:       12 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    3
  4259 ;; This function calls:
  4260 ;;		___ftpack
  4261 ;; This function is called by:
  4262 ;;		_DMX_loop
  4263 ;;		___ftsub
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           
  4268                           ;psect for function ___ftadd
  4269  0CA0                     ___ftadd:	
  4270                           
  4271                           ;incstack = 0
  4272                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4273  0CA0  084A               	movf	___ftadd@f1,w
  4274  0CA1  00D0               	movwf	??___ftadd
  4275  0CA2  084B               	movf	___ftadd@f1+1,w
  4276  0CA3  00D1               	movwf	??___ftadd+1
  4277  0CA4  084C               	movf	___ftadd@f1+2,w
  4278  0CA5  00D2               	movwf	??___ftadd+2
  4279  0CA6  1003               	clrc
  4280  0CA7  0D51               	rlf	??___ftadd+1,w
  4281  0CA8  0D52               	rlf	??___ftadd+2,w
  4282  0CA9  00D5               	movwf	___ftadd@exp1
  4283  0CAA  084D               	movf	___ftadd@f2,w
  4284  0CAB  00D0               	movwf	??___ftadd
  4285  0CAC  084E               	movf	___ftadd@f2+1,w
  4286  0CAD  00D1               	movwf	??___ftadd+1
  4287  0CAE  084F               	movf	___ftadd@f2+2,w
  4288  0CAF  00D2               	movwf	??___ftadd+2
  4289  0CB0  1003               	clrc
  4290  0CB1  0D51               	rlf	??___ftadd+1,w
  4291  0CB2  0D52               	rlf	??___ftadd+2,w
  4292  0CB3  00D4               	movwf	___ftadd@exp2
  4293  0CB4  0855               	movf	___ftadd@exp1,w
  4294  0CB5  1903               	btfsc	3,2
  4295  0CB6  2CC3               	goto	l5383
  4296  0CB7  0854               	movf	___ftadd@exp2,w
  4297  0CB8  0255               	subwf	___ftadd@exp1,w
  4298  0CB9  0854               	movf	___ftadd@exp2,w
  4299  0CBA  1803               	skipnc
  4300  0CBB  2CCB               	goto	L7
  4301  0CBC  00D0               	movwf	??___ftadd
  4302  0CBD  0855               	movf	___ftadd@exp1,w
  4303  0CBE  02D0               	subwf	??___ftadd,f
  4304  0CBF  3019               	movlw	25
  4305  0CC0  0250               	subwf	??___ftadd,w
  4306  0CC1  1C03               	skipc
  4307  0CC2  2CCA               	goto	l5387
  4308  0CC3                     l5383:	
  4309  0CC3  084D               	movf	___ftadd@f2,w
  4310  0CC4  00CA               	movwf	?___ftadd
  4311  0CC5  084E               	movf	___ftadd@f2+1,w
  4312  0CC6  00CB               	movwf	?___ftadd+1
  4313  0CC7  084F               	movf	___ftadd@f2+2,w
  4314  0CC8  00CC               	movwf	?___ftadd+2
  4315  0CC9  0008               	return
  4316  0CCA                     l5387:	
  4317  0CCA  0854               	movf	___ftadd@exp2,w
  4318  0CCB                     L7:	
  4319  0CCB  1903               	btfsc	3,2
  4320  0CCC  0008               	return
  4321  0CCD  0855               	movf	___ftadd@exp1,w
  4322  0CCE  0254               	subwf	___ftadd@exp2,w
  4323  0CCF  1803               	skipnc
  4324  0CD0  2CD9               	goto	l5393
  4325  0CD1  0855               	movf	___ftadd@exp1,w
  4326  0CD2  00D0               	movwf	??___ftadd
  4327  0CD3  0854               	movf	___ftadd@exp2,w
  4328  0CD4  02D0               	subwf	??___ftadd,f
  4329  0CD5  3019               	movlw	25
  4330  0CD6  0250               	subwf	??___ftadd,w
  4331  0CD7  1803               	btfsc	3,0
  4332  0CD8  0008               	return
  4333  0CD9                     l5393:	
  4334  0CD9  3006               	movlw	6
  4335  0CDA  00D3               	movwf	___ftadd@sign
  4336  0CDB  1BCC               	btfsc	___ftadd@f1+2,7
  4337  0CDC  17D3               	bsf	___ftadd@sign,7
  4338  0CDD  1BCF               	btfsc	___ftadd@f2+2,7
  4339  0CDE  1753               	bsf	___ftadd@sign,6
  4340  0CDF  17CB               	bsf	___ftadd@f1+1,7
  4341  0CE0  01CC               	clrf	___ftadd@f1+2
  4342  0CE1  17CE               	bsf	___ftadd@f2+1,7
  4343  0CE2  01CF               	clrf	___ftadd@f2+2
  4344  0CE3  0854               	movf	___ftadd@exp2,w
  4345  0CE4  0255               	subwf	___ftadd@exp1,w
  4346  0CE5  1803               	skipnc
  4347  0CE6  2CFE               	goto	l5415
  4348  0CE7                     l5405:	
  4349  0CE7  35CD               	lslf	___ftadd@f2,f
  4350  0CE8  0DCE               	rlf	___ftadd@f2+1,f
  4351  0CE9  0DCF               	rlf	___ftadd@f2+2,f
  4352  0CEA  03D4               	decf	___ftadd@exp2,f
  4353  0CEB  0854               	movf	___ftadd@exp2,w
  4354  0CEC  0655               	xorwf	___ftadd@exp1,w
  4355  0CED  1903               	skipnz
  4356  0CEE  2CF9               	goto	l5413
  4357  0CEF  03D3               	decf	___ftadd@sign,f
  4358  0CF0  0853               	movf	___ftadd@sign,w
  4359  0CF1  3907               	andlw	7
  4360  0CF2  1903               	btfsc	3,2
  4361  0CF3  2CF9               	goto	l5413
  4362  0CF4  2CE7               	goto	l5405
  4363  0CF5                     l5411:	
  4364  0CF5  36CC               	lsrf	___ftadd@f1+2,f
  4365  0CF6  0CCB               	rrf	___ftadd@f1+1,f
  4366  0CF7  0CCA               	rrf	___ftadd@f1,f
  4367  0CF8  0AD5               	incf	___ftadd@exp1,f
  4368  0CF9                     l5413:	
  4369  0CF9  0855               	movf	___ftadd@exp1,w
  4370  0CFA  0654               	xorwf	___ftadd@exp2,w
  4371  0CFB  1903               	btfsc	3,2
  4372  0CFC  2D18               	goto	l1833
  4373  0CFD  2CF5               	goto	l5411
  4374  0CFE                     l5415:	
  4375  0CFE  0855               	movf	___ftadd@exp1,w
  4376  0CFF  0254               	subwf	___ftadd@exp2,w
  4377  0D00  1803               	skipnc
  4378  0D01  2D18               	goto	l1833
  4379  0D02                     l5417:	
  4380  0D02  35CA               	lslf	___ftadd@f1,f
  4381  0D03  0DCB               	rlf	___ftadd@f1+1,f
  4382  0D04  0DCC               	rlf	___ftadd@f1+2,f
  4383  0D05  03D5               	decf	___ftadd@exp1,f
  4384  0D06  0854               	movf	___ftadd@exp2,w
  4385  0D07  0655               	xorwf	___ftadd@exp1,w
  4386  0D08  1903               	skipnz
  4387  0D09  2D14               	goto	l5425
  4388  0D0A  03D3               	decf	___ftadd@sign,f
  4389  0D0B  0853               	movf	___ftadd@sign,w
  4390  0D0C  3907               	andlw	7
  4391  0D0D  1903               	btfsc	3,2
  4392  0D0E  2D14               	goto	l5425
  4393  0D0F  2D02               	goto	l5417
  4394  0D10                     l5423:	
  4395  0D10  36CF               	lsrf	___ftadd@f2+2,f
  4396  0D11  0CCE               	rrf	___ftadd@f2+1,f
  4397  0D12  0CCD               	rrf	___ftadd@f2,f
  4398  0D13  0AD4               	incf	___ftadd@exp2,f
  4399  0D14                     l5425:	
  4400  0D14  0855               	movf	___ftadd@exp1,w
  4401  0D15  0654               	xorwf	___ftadd@exp2,w
  4402  0D16  1D03               	skipz
  4403  0D17  2D10               	goto	l5423
  4404  0D18                     l1833:	
  4405  0D18  1FD3               	btfss	___ftadd@sign,7
  4406  0D19  2D23               	goto	l5431
  4407  0D1A  30FF               	movlw	255
  4408  0D1B  06CA               	xorwf	___ftadd@f1,f
  4409  0D1C  06CB               	xorwf	___ftadd@f1+1,f
  4410  0D1D  06CC               	xorwf	___ftadd@f1+2,f
  4411  0D1E  0ACA               	incf	___ftadd@f1,f
  4412  0D1F  1903               	skipnz
  4413  0D20  0ACB               	incf	___ftadd@f1+1,f
  4414  0D21  1903               	skipnz
  4415  0D22  0ACC               	incf	___ftadd@f1+2,f
  4416  0D23                     l5431:	
  4417  0D23  1F53               	btfss	___ftadd@sign,6
  4418  0D24  2D2B               	goto	l5437
  4419  0D25  26C9  3188         	fcall	PL138	;call to abstracted procedure
  4420  0D27  1903               	skipnz
  4421  0D28  0ACE               	incf	___ftadd@f2+1,f
  4422  0D29  1903               	skipnz
  4423  0D2A  0ACF               	incf	___ftadd@f2+2,f
  4424  0D2B                     l5437:	
  4425  0D2B  01D3               	clrf	___ftadd@sign
  4426  0D2C  084A               	movf	___ftadd@f1,w
  4427  0D2D  07CD               	addwf	___ftadd@f2,f
  4428  0D2E  084B               	movf	___ftadd@f1+1,w
  4429  0D2F  3DCE               	addwfc	___ftadd@f2+1,f
  4430  0D30  084C               	movf	___ftadd@f1+2,w
  4431  0D31  3DCF               	addwfc	___ftadd@f2+2,f
  4432  0D32  1FCF               	btfss	___ftadd@f2+2,7
  4433  0D33  2D3C               	goto	l5449
  4434  0D34  26C9  3188         	fcall	PL138	;call to abstracted procedure
  4435  0D36  1903               	skipnz
  4436  0D37  0ACE               	incf	___ftadd@f2+1,f
  4437  0D38  1903               	skipnz
  4438  0D39  0ACF               	incf	___ftadd@f2+2,f
  4439  0D3A  01D3               	clrf	___ftadd@sign
  4440  0D3B  0AD3               	incf	___ftadd@sign,f
  4441  0D3C                     l5449:	
  4442  0D3C  084D               	movf	___ftadd@f2,w
  4443  0D3D  00A0               	movwf	___ftpack@arg
  4444  0D3E  084E               	movf	___ftadd@f2+1,w
  4445  0D3F  00A1               	movwf	___ftpack@arg+1
  4446  0D40  084F               	movf	___ftadd@f2+2,w
  4447  0D41  00A2               	movwf	___ftpack@arg+2
  4448  0D42  0855               	movf	___ftadd@exp1,w
  4449  0D43  00A3               	movwf	___ftpack@exp
  4450  0D44  0853               	movf	___ftadd@sign,w
  4451  0D45  00A4               	movwf	___ftpack@sign
  4452  0D46  2740               	fcall	___ftpack
  4453  0D47  0820               	movf	?___ftpack,w
  4454  0D48  00CA               	movwf	?___ftadd
  4455  0D49  0821               	movf	?___ftpack+1,w
  4456  0D4A  00CB               	movwf	?___ftadd+1
  4457  0D4B  0822               	movf	?___ftpack+2,w
  4458  0D4C  00CC               	movwf	?___ftadd+2
  4459  0D4D  0008               	return
  4460  0D4E                     __end_of___ftadd:	
  4461  0D4E                     __ptext42:	
  4462 ;; *************** function ___awtoft *****************
  4463 ;; Defined at:
  4464 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  c               2    8[BANK0 ] int 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  sign            1    4[COMMON] unsigned char 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  3    8[BANK0 ] float 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, pclath, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 1F/0
  4475 ;;		On exit  : 1F/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4478 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;Total ram usage:        4 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    3
  4485 ;; This function calls:
  4486 ;;		___ftpack
  4487 ;; This function is called by:
  4488 ;;		_DMX_loop
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function ___awtoft
  4494  0D4E                     ___awtoft:	
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4498  0D4E  01F4               	clrf	___awtoft@sign
  4499  0D4F  1FA9               	btfss	___awtoft@c+1,7
  4500  0D50  2D58               	goto	l5751
  4501  0D51  09A8               	comf	___awtoft@c,f
  4502  0D52  09A9               	comf	___awtoft@c+1,f
  4503  0D53  0AA8               	incf	___awtoft@c,f
  4504  0D54  1903               	skipnz
  4505  0D55  0AA9               	incf	___awtoft@c+1,f
  4506  0D56  01F4               	clrf	___awtoft@sign
  4507  0D57  0AF4               	incf	___awtoft@sign,f
  4508  0D58                     l5751:	
  4509  0D58  0828               	movf	___awtoft@c,w
  4510  0D59  00A0               	movwf	___ftpack@arg
  4511  0D5A  0829               	movf	___awtoft@c+1,w
  4512  0D5B  00A1               	movwf	___ftpack@arg+1
  4513  0D5C  308E               	movlw	142
  4514  0D5D  01A2               	clrf	___ftpack@arg+2
  4515  0D5E  00A3               	movwf	___ftpack@exp
  4516  0D5F  0874               	movf	___awtoft@sign,w
  4517  0D60  00A4               	movwf	___ftpack@sign
  4518  0D61  2740               	fcall	___ftpack
  4519  0D62  0820               	movf	?___ftpack,w
  4520  0D63  00A8               	movwf	?___awtoft
  4521  0D64  0821               	movf	?___ftpack+1,w
  4522  0D65  00A9               	movwf	?___awtoft+1
  4523  0D66  0822               	movf	?___ftpack+2,w
  4524  0D67  00AA               	movwf	?___awtoft+2
  4525  0D68  0008               	return
  4526  0D69                     __end_of___awtoft:	
  4527  0D69                     __ptext34:	
  4528 ;; *************** function ___lwtoft *****************
  4529 ;; Defined at:
  4530 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  c               2    8[BANK0 ] unsigned int 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  3    8[BANK0 ] float 
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0, pclath, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 1F/0
  4541 ;;		On exit  : 1F/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4544 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;Total ram usage:        3 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    3
  4551 ;; This function calls:
  4552 ;;		___ftpack
  4553 ;; This function is called by:
  4554 ;;		_DMX_loop
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function ___lwtoft
  4560  0D69                     ___lwtoft:	
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4564  0D69  0828               	movf	___lwtoft@c,w
  4565  0D6A  00A0               	movwf	___ftpack@arg
  4566  0D6B  0829               	movf	___lwtoft@c+1,w
  4567  0D6C  00A1               	movwf	___ftpack@arg+1
  4568  0D6D  308E               	movlw	142
  4569  0D6E  01A2               	clrf	___ftpack@arg+2
  4570  0D6F  00A3               	movwf	___ftpack@exp
  4571  0D70  01A4               	clrf	___ftpack@sign
  4572  0D71  2740               	fcall	___ftpack
  4573  0D72  0820               	movf	?___ftpack,w
  4574  0D73  00A8               	movwf	?___lwtoft
  4575  0D74  0821               	movf	?___ftpack+1,w
  4576  0D75  00A9               	movwf	?___lwtoft+1
  4577  0D76  0822               	movf	?___ftpack+2,w
  4578  0D77  00AA               	movwf	?___lwtoft+2
  4579  0D78  0008               	return
  4580  0D79                     __end_of___lwtoft:	
  4581  0D79                     PL2:	
  4582  0D79  076C               	addwf	_Addr,w
  4583  0D7A  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4584  0D7B  0086               	movwf	6
  4585  0D7C  0187               	clrf	7
  4586  0D7D  0828               	movf	?___lbtoft,w
  4587  0D7E  3FC0               	movwi [0]fsr1
  4588  0D7F  0829               	movf	?___lbtoft+1,w
  4589  0D80  3FC1               	movwi [1]fsr1
  4590  0D81  082A               	movf	?___lbtoft+2,w
  4591  0D82  3FC2               	movwi [2]fsr1
  4592  0D83  086C               	movf	_Addr,w
  4593  0D84  076C               	addwf	_Addr,w
  4594  0D85  076C               	addwf	_Addr,w
  4595  0D86  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4596  0D87  0086               	movwf	6
  4597  0D88  0828               	movf	?___lbtoft,w
  4598  0D89  3FC0               	movwi [0]fsr1
  4599  0D8A  0829               	movf	?___lbtoft+1,w
  4600  0D8B  3FC1               	movwi [1]fsr1
  4601  0D8C  082A               	movf	?___lbtoft+2,w
  4602  0D8D  3FC2               	movwi [2]fsr1
  4603  0D8E  0008               	return
  4604  0D8F                     __end_ofPL2:	
  4605  0D8F                     PL4:	
  4606  0D8F  086C               	movf	_Addr,w
  4607  0D90  076C               	addwf	_Addr,w
  4608  0D91  076C               	addwf	_Addr,w
  4609  0D92  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4610  0D93  0086               	movwf	6
  4611  0D94  0008               	return
  4612  0D95                     __end_ofPL4:	
  4613  0D95                     PL6:	
  4614  0D95  0856               	movf	?___ftsub,w
  4615  0D96  0021               	movlb	1	; select bank1
  4616  0D97  00C9               	movwf	_DMX_difference^(0+128)	;volatile
  4617  0D98  0020               	movlb	0	; select bank0
  4618  0D99  0857               	movf	?___ftsub+1,w
  4619  0D9A  0021               	movlb	1	; select bank1
  4620  0D9B  00CA               	movwf	(_DMX_difference+1)^(0+128)	;volatile
  4621  0D9C  0020               	movlb	0	; select bank0
  4622  0D9D  0858               	movf	?___ftsub+2,w
  4623  0D9E  0021               	movlb	1	; select bank1
  4624  0D9F  00CB               	movwf	(_DMX_difference+2)^(0+128)	;volatile
  4625  0DA0  0849               	movf	_DMX_difference^(0+128),w	;volatile
  4626  0DA1  0020               	movlb	0	; select bank0
  4627  0DA2  00AC               	movwf	___ftge@ff1
  4628  0DA3  0021               	movlb	1	; select bank1
  4629  0DA4  084A               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  4630  0DA5  0020               	movlb	0	; select bank0
  4631  0DA6  00AD               	movwf	___ftge@ff1+1
  4632  0DA7  0021               	movlb	1	; select bank1
  4633  0DA8  084B               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  4634  0DA9  0020               	movlb	0	; select bank0
  4635  0DAA  00AE               	movwf	___ftge@ff1+2
  4636  0DAB  30CD               	movlw	205
  4637  0DAC  00AF               	movwf	___ftge@ff2
  4638  0DAD  304C               	movlw	76
  4639  0DAE  00B0               	movwf	___ftge@ff2+1
  4640  0DAF  303D               	movlw	61
  4641  0DB0  00B1               	movwf	___ftge@ff2+2
  4642  0DB1  0008               	return
  4643  0DB2                     __end_ofPL6:	
  4644  0DB2                     PL12:	
  4645  0DB2  086C               	movf	_Addr,w
  4646  0DB3  076C               	addwf	_Addr,w
  4647  0DB4  076C               	addwf	_Addr,w
  4648  0DB5  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4649  0DB6  0086               	movwf	6
  4650  0DB7  0008               	return
  4651  0DB8                     __end_ofPL12:	
  4652  0DB8                     PL14:	
  4653  0DB8  0828               	movf	?___lbtoft,w
  4654  0DB9  00BB               	movwf	___ftdiv@f2
  4655  0DBA  0829               	movf	?___lbtoft+1,w
  4656  0DBB  00BC               	movwf	___ftdiv@f2+1
  4657  0DBC  082A               	movf	?___lbtoft+2,w
  4658  0DBD  00BD               	movwf	___ftdiv@f2+2
  4659  0DBE  0021               	movlb	1	; select bank1
  4660  0DBF  0849               	movf	_DMX_difference^(0+128),w	;volatile
  4661  0DC0  0020               	movlb	0	; select bank0
  4662  0DC1  00AC               	movwf	___ftmul@f1
  4663  0DC2  0021               	movlb	1	; select bank1
  4664  0DC3  084A               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  4665  0DC4  0020               	movlb	0	; select bank0
  4666  0DC5  00AD               	movwf	___ftmul@f1+1
  4667  0DC6  0021               	movlb	1	; select bank1
  4668  0DC7  084B               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  4669  0DC8  0020               	movlb	0	; select bank0
  4670  0DC9  00AE               	movwf	___ftmul@f1+2
  4671  0DCA  086C               	movf	_Addr,w
  4672  0DCB  3E68               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  4673  0DCC  0086               	movwf	6
  4674  0DCD  3001               	movlw	1	; select bank2/3
  4675  0DCE  0087               	movwf	7
  4676  0DCF  0801               	movf	1,w
  4677  0DD0  0008               	return
  4678  0DD1                     __end_ofPL14:	
  4679  0DD1                     PL18:	
  4680  0DD1  0828               	movf	?___lbtoft,w
  4681  0DD2  00CA               	movwf	___ftadd@f1
  4682  0DD3  0829               	movf	?___lbtoft+1,w
  4683  0DD4  00CB               	movwf	___ftadd@f1+1
  4684  0DD5  082A               	movf	?___lbtoft+2,w
  4685  0DD6  00CC               	movwf	___ftadd@f1+2
  4686  0DD7  3040               	movlw	64
  4687  0DD8  01BB               	clrf	___ftdiv@f2
  4688  0DD9  01BC               	clrf	___ftdiv@f2+1
  4689  0DDA  00BD               	movwf	___ftdiv@f2+2
  4690  0DDB  086C               	movf	_Addr,w
  4691  0DDC  076C               	addwf	_Addr,w
  4692  0DDD  076C               	addwf	_Addr,w
  4693  0DDE  3EDC               	addlw	(low (_DMX_repeat_hereditary| (0+256)))& (0+255)
  4694  0DDF  0086               	movwf	6
  4695  0DE0  3001               	movlw	1	; select bank3/4
  4696  0DE1  0087               	movwf	7
  4697  0DE2  3F40               	moviw [0]fsr1
  4698  0DE3  00BE               	movwf	___ftdiv@f1
  4699  0DE4  3F41               	moviw [1]fsr1
  4700  0DE5  00BF               	movwf	___ftdiv@f1+1
  4701  0DE6  3F42               	moviw [2]fsr1
  4702  0DE7  00C0               	movwf	___ftdiv@f1+2
  4703  0DE8  0008               	return
  4704  0DE9                     __end_ofPL18:	
  4705  0DE9                     PL20:	
  4706  0DE9  0024               	movlb	4	; select bank4
  4707  0DEA  00C0               	movwf	??_DMX_loop^(0+512)
  4708  0DEB  3F41               	moviw [1]fsr1
  4709  0DEC  00C1               	movwf	(??_DMX_loop^(0+512)+1)
  4710  0DED  3F42               	moviw [2]fsr1
  4711  0DEE  00C2               	movwf	(??_DMX_loop^(0+512)+2)
  4712  0DEF  0020               	movlb	0	; select bank0
  4713  0DF0  0008               	return
  4714  0DF1                     __end_ofPL20:	
  4715  0DF1                     PL24:	
  4716  0DF1  086C               	movf	_Addr,w
  4717  0DF2  076C               	addwf	_Addr,w
  4718  0DF3  076C               	addwf	_Addr,w
  4719  0DF4  3EDC               	addlw	(low (_DMX_repeat_hereditary| (0+256)))& (0+255)
  4720  0DF5  0086               	movwf	6
  4721  0DF6  3001               	movlw	1	; select bank3/4
  4722  0DF7  0087               	movwf	7
  4723  0DF8  0008               	return
  4724  0DF9                     __end_ofPL24:	
  4725  0DF9                     PL28:	
  4726  0DF9  3F40               	moviw [0]fsr1
  4727  0DFA  00D9               	movwf	___ftsub@f1
  4728  0DFB  3F41               	moviw [1]fsr1
  4729  0DFC  00DA               	movwf	___ftsub@f1+1
  4730  0DFD  3F42               	moviw [2]fsr1
  4731  0DFE  00DB               	movwf	___ftsub@f1+2
  4732  0DFF  0008               	return
  4733  0E00                     __end_ofPL28:	
  4734  0E00                     PL32:	
  4735  0E00  3F40               	moviw [0]fsr1
  4736  0E01  00D6               	movwf	___ftsub@f2
  4737  0E02  3F41               	moviw [1]fsr1
  4738  0E03  00D7               	movwf	___ftsub@f2+1
  4739  0E04  3F42               	moviw [2]fsr1
  4740  0E05  00D8               	movwf	___ftsub@f2+2
  4741  0E06  0008               	return
  4742  0E07                     __end_ofPL32:	
  4743  0E07                     PL36:	
  4744  0E07  0086               	movwf	6
  4745  0E08  3F40               	moviw [0]fsr1
  4746  0E09  0024               	movlb	4	; select bank4
  4747  0E0A  00C1               	movwf	(??_DMX_loop+1)^(0+512)
  4748  0E0B  3F41               	moviw [1]fsr1
  4749  0E0C  00C2               	movwf	((??_DMX_loop+1)^(0+512)+1)
  4750  0E0D  0841               	movf	(??_DMX_loop+1)^(0+512),w
  4751  0E0E  0086               	movwf	6
  4752  0E0F  0842               	movf	(??_DMX_loop+2)^(0+512),w
  4753  0E10  0087               	movwf	7
  4754  0E11  0840               	movf	??_DMX_loop^(0+512),w
  4755  0E12  0081               	movwf	1
  4756  0E13  0020               	movlb	0	; select bank0
  4757  0E14  356C               	lslf	_Addr,w
  4758  0E15  0008               	return
  4759  0E16                     __end_ofPL36:	
  4760  0E16                     PL38:	
  4761  0E16  086C               	movf	_Addr,w
  4762  0E17  076C               	addwf	_Addr,w
  4763  0E18  076C               	addwf	_Addr,w
  4764  0E19  3E38               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4765  0E1A  0086               	movwf	6
  4766  0E1B  3001               	movlw	1	; select bank2/3
  4767  0E1C  0087               	movwf	7
  4768  0E1D  0008               	return
  4769  0E1E                     __end_ofPL38:	
  4770  0E1E                     PL42:	
  4771  0E1E  0024               	movlb	4	; select bank4
  4772  0E1F  00C0               	movwf	??_DMX_loop^(0+512)
  4773  0E20  3000               	movlw	low (_PWM| (0+32768))
  4774  0E21  01C1               	clrf	(??_DMX_loop^(0+512)+1)
  4775  0E22  35C0               	lslf	??_DMX_loop^(0+512),f
  4776  0E23  0DC1               	rlf	(??_DMX_loop^(0+512)+1),f
  4777  0E24  0740               	addwf	??_DMX_loop^(0+512),w
  4778  0E25  0084               	movwf	4
  4779  0E26  3098               	movlw	high (_PWM| (0+32768))
  4780  0E27  3D41               	addwfc	(??_DMX_loop+1)^(0+512),w
  4781  0E28  0085               	movwf	5
  4782  0E29  3F00               	moviw [0]fsr0
  4783  0E2A  0008               	return
  4784  0E2B                     __end_ofPL42:	
  4785  0E2B                     PL46:	
  4786  0E2B  3FC2               	movwi [2]fsr1
  4787  0E2C  0021               	movlb	1	; select bank1
  4788  0E2D  086D               	movf	_DMXPeriod^(0+128),w
  4789  0E2E  0024               	movlb	4	; select bank4
  4790  0E2F  00C0               	movwf	??_DMX_loop^(0+512)
  4791  0E30  36C0               	lsrf	??_DMX_loop^(0+512),f
  4792  0E31  36C0               	lsrf	??_DMX_loop^(0+512),f
  4793  0E32  0840               	movf	??_DMX_loop^(0+512),w
  4794  0E33  0020               	movlb	0	; select bank0
  4795  0E34  00A8               	movwf	___awtoft@c
  4796  0E35  01A9               	clrf	___awtoft@c+1
  4797  0E36  0008               	return
  4798  0E37                     __end_ofPL46:	
  4799  0E37                     PL48:	
  4800  0E37  084A               	movf	?___ftadd,w
  4801  0E38  3FC0               	movwi [0]fsr1
  4802  0E39  084B               	movf	?___ftadd+1,w
  4803  0E3A  3FC1               	movwi [1]fsr1
  4804  0E3B  084C               	movf	?___ftadd+2,w
  4805  0E3C  3FC2               	movwi [2]fsr1
  4806  0E3D  0008               	return
  4807  0E3E                     __end_ofPL48:	
  4808  0E3E                     PL62:	
  4809  0E3E  0024               	movlb	4	; select bank4
  4810  0E3F  0840               	movf	??_DMX_loop^(0+512),w
  4811  0E40  3FC0               	movwi [0]fsr1
  4812  0E41  0841               	movf	(??_DMX_loop+1)^(0+512),w
  4813  0E42  3FC1               	movwi [1]fsr1
  4814  0E43  0842               	movf	(??_DMX_loop+2)^(0+512),w
  4815  0E44  3FC2               	movwi [2]fsr1
  4816  0E45  0020               	movlb	0	; select bank0
  4817  0E46  0008               	return
  4818  0E47                     __end_ofPL62:	
  4819  0E47                     PL64:	
  4820  0E47  0828               	movf	?___awtoft,w
  4821  0E48  00BB               	movwf	___ftdiv@f2
  4822  0E49  0829               	movf	?___awtoft+1,w
  4823  0E4A  00BC               	movwf	___ftdiv@f2+1
  4824  0E4B  082A               	movf	?___awtoft+2,w
  4825  0E4C  00BD               	movwf	___ftdiv@f2+2
  4826  0E4D  0008               	return
  4827  0E4E                     __end_ofPL64:	
  4828  0E4E                     PL70:	
  4829  0E4E  3F40               	moviw [0]fsr1
  4830  0E4F  00AF               	movwf	___ftge@ff2
  4831  0E50  3F41               	moviw [1]fsr1
  4832  0E51  00B0               	movwf	___ftge@ff2+1
  4833  0E52  3F42               	moviw [2]fsr1
  4834  0E53  00B1               	movwf	___ftge@ff2+2
  4835  0E54  0008               	return
  4836  0E55                     __end_ofPL70:	
  4837  0E55                     PL74:	
  4838  0E55  083B               	movf	?___ftdiv,w
  4839  0E56  00CD               	movwf	___ftadd@f2
  4840  0E57  083C               	movf	?___ftdiv+1,w
  4841  0E58  00CE               	movwf	___ftadd@f2+1
  4842  0E59  083D               	movf	?___ftdiv+2,w
  4843  0E5A  00CF               	movwf	___ftadd@f2+2
  4844  0E5B  0008               	return
  4845  0E5C                     __end_ofPL74:	
  4846  0E5C                     PL80:	
  4847  0E5C  086C               	movf	_Addr,w
  4848  0E5D  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  4849  0E5E  0086               	movwf	6
  4850  0E5F  3001               	movlw	1	; select bank2/3
  4851  0E60  0087               	movwf	7
  4852  0E61  0008               	return
  4853  0E62                     __end_ofPL80:	
  4854  0E62                     PL82:	
  4855  0E62  076C               	addwf	_Addr,w
  4856  0E63  076C               	addwf	_Addr,w
  4857  0E64  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4858  0E65  0086               	movwf	6
  4859  0E66  3000               	movlw	0
  4860  0E67  0187               	clrf	7
  4861  0E68  3FC0               	movwi [0]fsr1
  4862  0E69  0008               	return
  4863  0E6A                     __end_ofPL82:	
  4864  0E6A                     PL86:	
  4865  0E6A  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  4866  0E6B  0086               	movwf	6
  4867  0E6C  30FC               	movlw	-4
  4868  0E6D  0187               	clrf	7
  4869  0E6E  0581               	andwf	1,f
  4870  0E6F  0021               	movlb	1	; select bank1
  4871  0E70  0865               	movf	_rxdata^(0+128),w
  4872  0E71  0008               	return
  4873  0E72                     __end_ofPL86:	
  4874  0E72                     PL88:	
  4875  0E72  0187               	clrf	7
  4876  0E73  0856               	movf	?___ftsub,w
  4877  0E74  3FC0               	movwi [0]fsr1
  4878  0E75  0857               	movf	?___ftsub+1,w
  4879  0E76  3FC1               	movwi [1]fsr1
  4880  0E77  0858               	movf	?___ftsub+2,w
  4881  0E78  0008               	return
  4882  0E79                     __end_ofPL88:	
  4883  0E79                     PL90:	
  4884  0E79  3F40               	moviw [0]fsr1
  4885  0E7A  00CA               	movwf	___ftadd@f1
  4886  0E7B  3F41               	moviw [1]fsr1
  4887  0E7C  00CB               	movwf	___ftadd@f1+1
  4888  0E7D  3F42               	moviw [2]fsr1
  4889  0E7E  00CC               	movwf	___ftadd@f1+2
  4890  0E7F  0008               	return
  4891  0E80                     __end_ofPL90:	
  4892  0E80                     PL98:	
  4893  0E80  0086               	movwf	6
  4894  0E81  3001               	movlw	1	; select bank2/3
  4895  0E82  0087               	movwf	7
  4896  0E83  3002               	movlw	2
  4897  0E84  0081               	movwf	1
  4898  0E85  0008               	return
  4899  0E86                     __end_ofPL98:	
  4900  0E86                     PL102:	
  4901  0E86  082C               	movf	?___ftmul,w
  4902  0E87  00BE               	movwf	___ftdiv@f1
  4903  0E88  082D               	movf	?___ftmul+1,w
  4904  0E89  00BF               	movwf	___ftdiv@f1+1
  4905  0E8A  082E               	movf	?___ftmul+2,w
  4906  0E8B  00C0               	movwf	___ftdiv@f1+2
  4907  0E8C  0008               	return
  4908  0E8D                     __end_ofPL102:	
  4909  0E8D                     PL104:	
  4910  0E8D  083B               	movf	?___ftdiv,w
  4911  0E8E  3FC0               	movwi [0]fsr1
  4912  0E8F  083C               	movf	?___ftdiv+1,w
  4913  0E90  3FC1               	movwi [1]fsr1
  4914  0E91  083D               	movf	?___ftdiv+2,w
  4915  0E92  3FC2               	movwi [2]fsr1
  4916  0E93  0008               	return
  4917  0E94                     __end_ofPL104:	
  4918  0E94                     PL106:	
  4919  0E94  3F40               	moviw [0]fsr1
  4920  0E95  00AC               	movwf	___ftge@ff1
  4921  0E96  3F41               	moviw [1]fsr1
  4922  0E97  00AD               	movwf	___ftge@ff1+1
  4923  0E98  3F42               	moviw [2]fsr1
  4924  0E99  00AE               	movwf	___ftge@ff1+2
  4925  0E9A  0008               	return
  4926  0E9B                     __end_ofPL106:	
  4927  0E9B                     PL108:	
  4928  0E9B  0828               	movf	?___lbtoft,w
  4929  0E9C  00AF               	movwf	___ftmul@f2
  4930  0E9D  0829               	movf	?___lbtoft+1,w
  4931  0E9E  00B0               	movwf	___ftmul@f2+1
  4932  0E9F  082A               	movf	?___lbtoft+2,w
  4933  0EA0  00B1               	movwf	___ftmul@f2+2
  4934  0EA1  0008               	return
  4935  0EA2                     __end_ofPL108:	
  4936  0EA2                     PL112:	
  4937  0EA2  0856               	movf	?___ftsub,w
  4938  0EA3  00BE               	movwf	___ftdiv@f1
  4939  0EA4  0857               	movf	?___ftsub+1,w
  4940  0EA5  00BF               	movwf	___ftdiv@f1+1
  4941  0EA6  0858               	movf	?___ftsub+2,w
  4942  0EA7  00C0               	movwf	___ftdiv@f1+2
  4943  0EA8  0008               	return
  4944  0EA9                     __end_ofPL112:	
  4945  0EA9                     PL118:	
  4946  0EA9  0828               	movf	?___lbtoft,w
  4947  0EAA  00D6               	movwf	___ftsub@f2
  4948  0EAB  0829               	movf	?___lbtoft+1,w
  4949  0EAC  00D7               	movwf	___ftsub@f2+1
  4950  0EAD  082A               	movf	?___lbtoft+2,w
  4951  0EAE  00D8               	movwf	___ftsub@f2+2
  4952  0EAF  0008               	return
  4953  0EB0                     __end_ofPL118:	
  4954  0EB0                     PL120:	
  4955  0EB0  0820               	movf	??_DMX_init,w
  4956  0EB1  3FC0               	movwi [0]fsr1
  4957  0EB2  0821               	movf	??_DMX_init+1,w
  4958  0EB3  3FC1               	movwi [1]fsr1
  4959  0EB4  0822               	movf	??_DMX_init+2,w
  4960  0EB5  3FC2               	movwi [2]fsr1
  4961  0EB6  0008               	return
  4962  0EB7                     __end_ofPL120:	
  4963  0EB7                     PL128:	
  4964  0EB7  086C               	movf	_Addr,w
  4965  0EB8  3E64               	addlw	(low (_RxData| (0+256)))& (0+255)
  4966  0EB9  0086               	movwf	6
  4967  0EBA  3001               	movlw	1	; select bank2/3
  4968  0EBB  0087               	movwf	7
  4969  0EBC  0008               	return
  4970  0EBD                     __end_ofPL128:	
  4971  0EBD                     PL132:	
  4972  0EBD  356C               	lslf	_Addr,w
  4973  0EBE  3EE8               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  4974  0EBF  0086               	movwf	6
  4975  0EC0  3001               	movlw	1	; select bank3/4
  4976  0EC1  0087               	movwf	7
  4977  0EC2  0008               	return
  4978  0EC3                     __end_ofPL132:	
  4979  0EC3                     PL136:	
  4980  0EC3  0081               	movwf	1
  4981  0EC4  086C               	movf	_Addr,w
  4982  0EC5  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  4983  0EC6  0086               	movwf	6
  4984  0EC7  0187               	clrf	7
  4985  0EC8  0008               	return
  4986  0EC9                     __end_ofPL136:	
  4987  0EC9                     PL138:	
  4988  0EC9  30FF               	movlw	255
  4989  0ECA  06CD               	xorwf	___ftadd@f2,f
  4990  0ECB  06CE               	xorwf	___ftadd@f2+1,f
  4991  0ECC  06CF               	xorwf	___ftadd@f2+2,f
  4992  0ECD  0ACD               	incf	___ftadd@f2,f
  4993  0ECE  0008               	return
  4994  0ECF                     __end_ofPL138:	
  4995  0ECF                     PL140:	
  4996  0ECF  0801               	movf	1,w
  4997  0ED0  0024               	movlb	4	; select bank4
  4998  0ED1  00C0               	movwf	??_DMX_loop^(0+512)
  4999  0ED2  0020               	movlb	0	; select bank0
  5000  0ED3  356C               	lslf	_Addr,w
  5001  0ED4  0008               	return
  5002  0ED5                     __end_ofPL140:	
  5003  0ED5                     PL144:	
  5004  0ED5  3EC5               	addlw	(low (_DMXSign| 0))& (0+255)
  5005  0ED6  0086               	movwf	6
  5006  0ED7  0187               	clrf	7
  5007  0ED8  0801               	movf	1,w
  5008  0ED9  39FC               	andlw	-4
  5009  0EDA  0008               	return
  5010  0EDB                     __end_ofPL144:	
  5011  0EDB                     PL152:	
  5012  0EDB  0086               	movwf	6
  5013  0EDC  356C               	lslf	_Addr,w
  5014  0EDD  3EE9               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5015  0EDE  0084               	movwf	4
  5016  0EDF  3401               	retlw	1	; select bank3/4
  5017  0EE0                     __end_ofPL152:	
  5018  0EE0                     PL174:	
  5019  0EE0  01BB               	clrf	?___ftdiv
  5020  0EE1  01BC               	clrf	?___ftdiv+1
  5021  0EE2  01BD               	clrf	?___ftdiv+2
  5022  0EE3  0008               	return
  5023  0EE4                     __end_ofPL174:	
  5024  0EE4                     __ptext39:	
  5025 ;; *************** function ___ftmul *****************
  5026 ;; Defined at:
  5027 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  f1              3   12[BANK0 ] float 
  5030 ;;  f2              3   15[BANK0 ] float 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  5033 ;;  sign            1   26[BANK0 ] unsigned char 
  5034 ;;  cntr            1   25[BANK0 ] unsigned char 
  5035 ;;  exp             1   21[BANK0 ] unsigned char 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  3   12[BANK0 ] float 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2, status,0, pclath, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 1F/0
  5042 ;;		On exit  : 1F/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5045 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;Total ram usage:       15 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    3
  5052 ;; This function calls:
  5053 ;;		___ftpack
  5054 ;; This function is called by:
  5055 ;;		_DMX_loop
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function ___ftmul
  5061  0EE4                     ___ftmul:	
  5062                           
  5063                           ;incstack = 0
  5064                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5065  0EE4  082C               	movf	___ftmul@f1,w
  5066  0EE5  00B2               	movwf	??___ftmul
  5067  0EE6  082D               	movf	___ftmul@f1+1,w
  5068  0EE7  00B3               	movwf	??___ftmul+1
  5069  0EE8  082E               	movf	___ftmul@f1+2,w
  5070  0EE9  00B4               	movwf	??___ftmul+2
  5071  0EEA  1003               	clrc
  5072  0EEB  0D33               	rlf	??___ftmul+1,w
  5073  0EEC  0D34               	rlf	??___ftmul+2,w
  5074  0EED  00B5               	movwf	___ftmul@exp
  5075  0EEE  0835               	movf	___ftmul@exp,w
  5076  0EEF  1D03               	btfss	3,2
  5077  0EF0  2EF2               	goto	l5799
  5078  0EF1  2F85               	ljmp	PL180	;call to abstracted procedure
  5079  0EF2                     l5799:	
  5080  0EF2  082F               	movf	___ftmul@f2,w
  5081  0EF3  00B2               	movwf	??___ftmul
  5082  0EF4  0830               	movf	___ftmul@f2+1,w
  5083  0EF5  00B3               	movwf	??___ftmul+1
  5084  0EF6  0831               	movf	___ftmul@f2+2,w
  5085  0EF7  00B4               	movwf	??___ftmul+2
  5086  0EF8  1003               	clrc
  5087  0EF9  0D33               	rlf	??___ftmul+1,w
  5088  0EFA  0D34               	rlf	??___ftmul+2,w
  5089  0EFB  00BA               	movwf	___ftmul@sign
  5090  0EFC  083A               	movf	___ftmul@sign,w
  5091  0EFD  1D03               	btfss	3,2
  5092  0EFE  2F00               	goto	l5803
  5093  0EFF  2F85               	ljmp	PL180	;call to abstracted procedure
  5094  0F00                     l5803:	
  5095  0F00  083A               	movf	___ftmul@sign,w
  5096  0F01  3E7B               	addlw	123
  5097  0F02  07B5               	addwf	___ftmul@exp,f
  5098  0F03  082E               	movf	___ftmul@f1+2,w
  5099  0F04  00BA               	movwf	___ftmul@sign
  5100  0F05  0831               	movf	___ftmul@f2+2,w
  5101  0F06  06BA               	xorwf	___ftmul@sign,f
  5102  0F07  3080               	movlw	128
  5103  0F08  05BA               	andwf	___ftmul@sign,f
  5104  0F09  30FF               	movlw	255
  5105  0F0A  17AD               	bsf	___ftmul@f1+1,7
  5106  0F0B  17B0               	bsf	___ftmul@f2+1,7
  5107  0F0C  05AF               	andwf	___ftmul@f2,f
  5108  0F0D  05B0               	andwf	___ftmul@f2+1,f
  5109  0F0E  3007               	movlw	7
  5110  0F0F  01B1               	clrf	___ftmul@f2+2
  5111  0F10  01B6               	clrf	___ftmul@f3_as_product
  5112  0F11  01B7               	clrf	___ftmul@f3_as_product+1
  5113  0F12  01B8               	clrf	___ftmul@f3_as_product+2
  5114  0F13  00B9               	movwf	___ftmul@cntr
  5115  0F14                     l5821:	
  5116  0F14  1C2C               	btfss	___ftmul@f1,0
  5117  0F15  2F18               	goto	l5825
  5118  0F16  277E  3188         	fcall	PL110	;call to abstracted procedure
  5119  0F18                     l5825:	
  5120  0F18  36AE               	lsrf	___ftmul@f1+2,f
  5121  0F19  0CAD               	rrf	___ftmul@f1+1,f
  5122  0F1A  0CAC               	rrf	___ftmul@f1,f
  5123  0F1B  35AF               	lslf	___ftmul@f2,f
  5124  0F1C  0DB0               	rlf	___ftmul@f2+1,f
  5125  0F1D  0DB1               	rlf	___ftmul@f2+2,f
  5126  0F1E  0BB9               	decfsz	___ftmul@cntr,f
  5127  0F1F  2F14               	goto	l5821
  5128  0F20  3009               	movlw	9
  5129  0F21  00B9               	movwf	___ftmul@cntr
  5130  0F22                     l5833:	
  5131  0F22  1C2C               	btfss	___ftmul@f1,0
  5132  0F23  2F26               	goto	l5837
  5133  0F24  277E  3188         	fcall	PL110	;call to abstracted procedure
  5134  0F26                     l5837:	
  5135  0F26  36AE               	lsrf	___ftmul@f1+2,f
  5136  0F27  0CAD               	rrf	___ftmul@f1+1,f
  5137  0F28  0CAC               	rrf	___ftmul@f1,f
  5138  0F29  36B8               	lsrf	___ftmul@f3_as_product+2,f
  5139  0F2A  0CB7               	rrf	___ftmul@f3_as_product+1,f
  5140  0F2B  0CB6               	rrf	___ftmul@f3_as_product,f
  5141  0F2C  0BB9               	decfsz	___ftmul@cntr,f
  5142  0F2D  2F22               	goto	l5833
  5143  0F2E  0836               	movf	___ftmul@f3_as_product,w
  5144  0F2F  00A0               	movwf	___ftpack@arg
  5145  0F30  0837               	movf	___ftmul@f3_as_product+1,w
  5146  0F31  00A1               	movwf	___ftpack@arg+1
  5147  0F32  0838               	movf	___ftmul@f3_as_product+2,w
  5148  0F33  00A2               	movwf	___ftpack@arg+2
  5149  0F34  0835               	movf	___ftmul@exp,w
  5150  0F35  00A3               	movwf	___ftpack@exp
  5151  0F36  083A               	movf	___ftmul@sign,w
  5152  0F37  00A4               	movwf	___ftpack@sign
  5153  0F38  2740               	fcall	___ftpack
  5154  0F39  0820               	movf	?___ftpack,w
  5155  0F3A  00AC               	movwf	?___ftmul
  5156  0F3B  0821               	movf	?___ftpack+1,w
  5157  0F3C  00AD               	movwf	?___ftmul+1
  5158  0F3D  0822               	movf	?___ftpack+2,w
  5159  0F3E  00AE               	movwf	?___ftmul+2
  5160  0F3F  0008               	return
  5161  0F40                     __end_of___ftmul:	
  5162  0F40                     __ptext43:	
  5163 ;; *************** function ___ftpack *****************
  5164 ;; Defined at:
  5165 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  arg             3    0[BANK0 ] unsigned um
  5168 ;;  exp             1    3[BANK0 ] unsigned char 
  5169 ;;  sign            1    4[BANK0 ] unsigned char 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  3    0[BANK0 ] float 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 1F/0
  5178 ;;		On exit  : 1F/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5181 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;Total ram usage:        8 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    2
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		___awtoft
  5192 ;;		___ftadd
  5193 ;;		___ftdiv
  5194 ;;		___ftmul
  5195 ;;		___lbtoft
  5196 ;;		___lwtoft
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function ___ftpack
  5202  0F40                     ___ftpack:	
  5203                           
  5204                           ;incstack = 0
  5205                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5206  0F40  0823               	movf	___ftpack@exp,w
  5207  0F41  1903               	btfsc	3,2
  5208  0F42  2F48               	goto	l1797
  5209  0F43  0822               	movf	___ftpack@arg+2,w
  5210  0F44  0421               	iorwf	___ftpack@arg+1,w
  5211  0F45  0420               	iorwf	___ftpack@arg,w
  5212  0F46  1D03               	skipz
  5213  0F47  2F50               	goto	l5263
  5214  0F48                     l1797:	
  5215  0F48  01A0               	clrf	?___ftpack
  5216  0F49  01A1               	clrf	?___ftpack+1
  5217  0F4A  01A2               	clrf	?___ftpack+2
  5218  0F4B  0008               	return
  5219  0F4C                     l5261:	
  5220  0F4C  0AA3               	incf	___ftpack@exp,f
  5221  0F4D  36A2               	lsrf	___ftpack@arg+2,f
  5222  0F4E  0CA1               	rrf	___ftpack@arg+1,f
  5223  0F4F  0CA0               	rrf	___ftpack@arg,f
  5224  0F50                     l5263:	
  5225  0F50  30FE               	movlw	254
  5226  0F51  0522               	andwf	___ftpack@arg+2,w
  5227  0F52  1903               	btfsc	3,2
  5228  0F53  2F5E               	goto	l5267
  5229  0F54  2F4C               	goto	l5261
  5230  0F55                     l5265:	
  5231  0F55  0AA3               	incf	___ftpack@exp,f
  5232  0F56  0AA0               	incf	___ftpack@arg,f
  5233  0F57  1903               	skipnz
  5234  0F58  0AA1               	incf	___ftpack@arg+1,f
  5235  0F59  1903               	skipnz
  5236  0F5A  0AA2               	incf	___ftpack@arg+2,f
  5237  0F5B  36A2               	lsrf	___ftpack@arg+2,f
  5238  0F5C  0CA1               	rrf	___ftpack@arg+1,f
  5239  0F5D  0CA0               	rrf	___ftpack@arg,f
  5240  0F5E                     l5267:	
  5241  0F5E  30FF               	movlw	255
  5242  0F5F  0522               	andwf	___ftpack@arg+2,w
  5243  0F60  1903               	btfsc	3,2
  5244  0F61  2F6B               	goto	l5271
  5245  0F62  2F55               	goto	l5265
  5246  0F63                     l5273:	
  5247  0F63  3002               	movlw	2
  5248  0F64  0223               	subwf	___ftpack@exp,w
  5249  0F65  1C03               	btfss	3,0
  5250  0F66  2F6D               	goto	l1809
  5251  0F67  03A3               	decf	___ftpack@exp,f
  5252  0F68  35A0               	lslf	___ftpack@arg,f
  5253  0F69  0DA1               	rlf	___ftpack@arg+1,f
  5254  0F6A  0DA2               	rlf	___ftpack@arg+2,f
  5255  0F6B                     l5271:	
  5256  0F6B  1FA1               	btfss	___ftpack@arg+1,7
  5257  0F6C  2F63               	goto	l5273
  5258  0F6D                     l1809:	
  5259  0F6D  1C23               	btfss	___ftpack@exp,0
  5260  0F6E  13A1               	bcf	___ftpack@arg+1,7
  5261  0F6F  36A3               	lsrf	___ftpack@exp,f
  5262  0F70  0823               	movf	___ftpack@exp,w
  5263  0F71  00A7               	movwf	??___ftpack+2
  5264  0F72  01A6               	clrf	??___ftpack+1
  5265  0F73  01A5               	clrf	??___ftpack
  5266  0F74  0825               	movf	??___ftpack,w
  5267  0F75  04A0               	iorwf	___ftpack@arg,f
  5268  0F76  0826               	movf	??___ftpack+1,w
  5269  0F77  04A1               	iorwf	___ftpack@arg+1,f
  5270  0F78  0827               	movf	??___ftpack+2,w
  5271  0F79  04A2               	iorwf	___ftpack@arg+2,f
  5272  0F7A  0824               	movf	___ftpack@sign,w
  5273  0F7B  1D03               	btfss	3,2
  5274  0F7C  17A2               	bsf	___ftpack@arg+2,7
  5275  0F7D  0008               	return
  5276  0F7E                     __end_of___ftpack:	
  5277  0F7E                     PL110:	
  5278  0F7E  082F               	movf	___ftmul@f2,w
  5279  0F7F  07B6               	addwf	___ftmul@f3_as_product,f
  5280  0F80  0830               	movf	___ftmul@f2+1,w
  5281  0F81  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  5282  0F82  0831               	movf	___ftmul@f2+2,w
  5283  0F83  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  5284  0F84  0008               	return
  5285  0F85                     __end_ofPL110:	
  5286  0F85                     PL180:	
  5287  0F85  01AC               	clrf	?___ftmul
  5288  0F86  01AD               	clrf	?___ftmul+1
  5289  0F87  01AE               	clrf	?___ftmul+2
  5290  0F88  0008               	return
  5291  0F89                     __end_ofPL180:	
  5292  0F89                     __ptext36:	
  5293 ;; *************** function ___fttol *****************
  5294 ;; Defined at:
  5295 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  f1              3   60[BANK0 ] float 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  lval            4   68[BANK0 ] unsigned long 
  5300 ;;  exp1            1   72[BANK0 ] unsigned char 
  5301 ;;  sign1           1   67[BANK0 ] unsigned char 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  4   60[BANK0 ] long 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0
  5306 ;; Tracked objects:
  5307 ;;		On entry : 1F/0
  5308 ;;		On exit  : 1F/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;Total ram usage:       13 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    2
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_DMX_loop
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function ___fttol
  5327  0F89                     ___fttol:	
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5331  0F89  27DE  3188         	fcall	PL126	;call to abstracted procedure
  5332  0F8B  1003               	clrc
  5333  0F8C  0D61               	rlf	??___fttol+1,w
  5334  0F8D  0D62               	rlf	??___fttol+2,w
  5335  0F8E  00E8               	movwf	___fttol@exp1
  5336  0F8F  0868               	movf	___fttol@exp1,w
  5337  0F90  1D03               	btfss	3,2
  5338  0F91  2F97               	goto	l4393
  5339  0F92                     l4391:	
  5340  0F92  01DC               	clrf	?___fttol
  5341  0F93  01DD               	clrf	?___fttol+1
  5342  0F94  01DE               	clrf	?___fttol+2
  5343  0F95  01DF               	clrf	?___fttol+3
  5344  0F96  0008               	return
  5345  0F97                     l4393:	
  5346  0F97  27DE  3188         	fcall	PL126	;call to abstracted procedure
  5347  0F99  3017               	movlw	23
  5348  0F9A                     u2405:	
  5349  0F9A  36E2               	lsrf	??___fttol+2,f
  5350  0F9B  0CE1               	rrf	??___fttol+1,f
  5351  0F9C  0CE0               	rrf	??___fttol,f
  5352  0F9D  0B89               	decfsz	9,f
  5353  0F9E  2F9A               	goto	u2405
  5354  0F9F  0860               	movf	??___fttol,w
  5355  0FA0  00E3               	movwf	___fttol@sign1
  5356  0FA1  17DD               	bsf	___fttol@f1+1,7
  5357  0FA2  01DE               	clrf	___fttol@f1+2
  5358  0FA3  085C               	movf	___fttol@f1,w
  5359  0FA4  00E4               	movwf	___fttol@lval
  5360  0FA5  085D               	movf	___fttol@f1+1,w
  5361  0FA6  00E5               	movwf	___fttol@lval+1
  5362  0FA7  085E               	movf	___fttol@f1+2,w
  5363  0FA8  00E6               	movwf	___fttol@lval+2
  5364  0FA9  308E               	movlw	142
  5365  0FAA  01E7               	clrf	___fttol@lval+3
  5366  0FAB  02E8               	subwf	___fttol@exp1,f
  5367  0FAC  1FE8               	btfss	___fttol@exp1,7
  5368  0FAD  2FBA               	goto	l4413
  5369  0FAE  0868               	movf	___fttol@exp1,w
  5370  0FAF  3A80               	xorlw	128
  5371  0FB0  3E8F               	addlw	143
  5372  0FB1  1C03               	btfss	3,0
  5373  0FB2  2F92               	goto	l4391
  5374  0FB3                     l4409:	
  5375  0FB3  36E7               	lsrf	___fttol@lval+3,f
  5376  0FB4  0CE6               	rrf	___fttol@lval+2,f
  5377  0FB5  0CE5               	rrf	___fttol@lval+1,f
  5378  0FB6  0CE4               	rrf	___fttol@lval,f
  5379  0FB7  0FE8               	incfsz	___fttol@exp1,f
  5380  0FB8  2FB3               	goto	l4409
  5381  0FB9  2FC7               	goto	l4421
  5382  0FBA                     l4413:	
  5383  0FBA  3018               	movlw	24
  5384  0FBB  0268               	subwf	___fttol@exp1,w
  5385  0FBC  1803               	btfsc	3,0
  5386  0FBD  2F92               	goto	l4391
  5387  0FBE                     l4419:	
  5388  0FBE  0868               	movf	___fttol@exp1,w
  5389  0FBF  1903               	btfsc	3,2
  5390  0FC0  2FC7               	goto	l4421
  5391  0FC1  35E4               	lslf	___fttol@lval,f
  5392  0FC2  0DE5               	rlf	___fttol@lval+1,f
  5393  0FC3  0DE6               	rlf	___fttol@lval+2,f
  5394  0FC4  0DE7               	rlf	___fttol@lval+3,f
  5395  0FC5  03E8               	decf	___fttol@exp1,f
  5396  0FC6  2FBE               	goto	l4419
  5397  0FC7                     l4421:	
  5398  0FC7  0863               	movf	___fttol@sign1,w
  5399  0FC8  1903               	btfsc	3,2
  5400  0FC9  2FD5               	goto	l4425
  5401  0FCA  09E4               	comf	___fttol@lval,f
  5402  0FCB  09E5               	comf	___fttol@lval+1,f
  5403  0FCC  09E6               	comf	___fttol@lval+2,f
  5404  0FCD  09E7               	comf	___fttol@lval+3,f
  5405  0FCE  0AE4               	incf	___fttol@lval,f
  5406  0FCF  1903               	skipnz
  5407  0FD0  0AE5               	incf	___fttol@lval+1,f
  5408  0FD1  1903               	skipnz
  5409  0FD2  0AE6               	incf	___fttol@lval+2,f
  5410  0FD3  1903               	skipnz
  5411  0FD4  0AE7               	incf	___fttol@lval+3,f
  5412  0FD5                     l4425:	
  5413  0FD5  0867               	movf	___fttol@lval+3,w
  5414  0FD6  00DF               	movwf	?___fttol+3
  5415  0FD7  0866               	movf	___fttol@lval+2,w
  5416  0FD8  00DE               	movwf	?___fttol+2
  5417  0FD9  0865               	movf	___fttol@lval+1,w
  5418  0FDA  00DD               	movwf	?___fttol+1
  5419  0FDB  0864               	movf	___fttol@lval,w
  5420  0FDC  00DC               	movwf	?___fttol
  5421  0FDD  0008               	return
  5422  0FDE                     __end_of___fttol:	
  5423  0FDE                     PL126:	
  5424  0FDE  085C               	movf	___fttol@f1,w
  5425  0FDF  00E0               	movwf	??___fttol
  5426  0FE0  085D               	movf	___fttol@f1+1,w
  5427  0FE1  00E1               	movwf	??___fttol+1
  5428  0FE2  085E               	movf	___fttol@f1+2,w
  5429  0FE3  00E2               	movwf	??___fttol+2
  5430  0FE4  0008               	return
  5431  0FE5                     __end_ofPL126:	
  5432  0FE5                     __ptext1:	
  5433 ;; *************** function _timer_init *****************
  5434 ;; Defined at:
  5435 ;;		line 15 in file "Timer.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2
  5444 ;; Tracked objects:
  5445 ;;		On entry : B1F/3
  5446 ;;		On exit  : B1F/0
  5447 ;;		Unchanged: B00/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;Total ram usage:        0 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    2
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _timer_init
  5465  0FE5                     _timer_init:	
  5466                           
  5467                           ;Timer.c: 17: TMR1IE = 1;
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _timer_init: [wreg+status,2]
  5471  0FE5  0021               	movlb	1	; select bank1
  5472  0FE6  1411               	bsf	17,0	;volatile
  5473                           
  5474                           ;Timer.c: 18: T1CON = 0b00110001;
  5475  0FE7  3031               	movlw	49
  5476  0FE8  0020               	movlb	0	; select bank0
  5477  0FE9  0098               	movwf	24	;volatile
  5478                           
  5479                           ;Timer.c: 20: TimerState = TIMER_500US;
  5480  0FEA  0021               	movlb	1	; select bank1
  5481  0FEB  01E0               	clrf	_TimerState^(0+128)	;volatile
  5482                           
  5483                           ;Timer.c: 22: Timer.HR_Count = 0;
  5484  0FEC  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  5485                           
  5486                           ;Timer.c: 23: Timer.MIN_Count = 0;
  5487  0FED  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  5488                           
  5489                           ;Timer.c: 24: Timer.SEC_Count = 0;
  5490  0FEE  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  5491                           
  5492                           ;Timer.c: 25: Timer.flags = 0;
  5493  0FEF  01B8               	clrf	_Timer^(0+128)	;volatile
  5494                           
  5495                           ;Timer.c: 28: TMR1 = 0xFE0B;
  5496  0FF0  27FA               	fcall	PL160	;call to abstracted procedure
  5497                           
  5498                           ;Timer.c: 29: TMR1IF = 0;
  5499  0FF1  1011               	bcf	17,0	;volatile
  5500                           
  5501                           ;Timer.c: 30: TMR1IE = 1;
  5502  0FF2  0021               	movlb	1	; select bank1
  5503  0FF3  1411               	bsf	17,0	;volatile
  5504                           
  5505                           ;Timer.c: 35: T2CON=0b01001111;
  5506  0FF4  304F               	movlw	79
  5507  0FF5  0020               	movlb	0	; select bank0
  5508  0FF6  009C               	movwf	28	;volatile
  5509                           
  5510                           ;Timer.c: 36: PR2=0xf9;
  5511  0FF7  30F9               	movlw	249
  5512  0FF8  009B               	movwf	27	;volatile
  5513  0FF9  0008               	return
  5514  0FFA                     __end_of_timer_init:	
  5515  0FFA                     PL160:	
  5516  0FFA  30FE               	movlw	254
  5517  0FFB  0020               	movlb	0	; select bank0
  5518  0FFC  0097               	movwf	23	;volatile
  5519  0FFD  300B               	movlw	11
  5520  0FFE  0096               	movwf	22	;volatile
  5521  0FFF  0008               	return
  5522  1000                     __end_ofPL160:	
  5523                           
  5524                           	psect	bssCOMMON
  5525  0076                     __pbssCOMMON:	
  5526  0076                     _DMX_Flags:	
  5527  0076                     	ds	2
  5528  0078                     _ReadCount:	
  5529  0078                     	ds	1
  5530  0079                     _tmp8:	
  5531  0079                     	ds	1
  5532                           
  5533                           	psect	bssBANK0
  5534  006C                     __pbssBANK0:	
  5535  006C                     _Addr:	
  5536  006C                     	ds	1
  5537                           
  5538                           	psect	bssBANK1
  5539  00A0                     __pbssBANK1:	
  5540  00A0                     _DMX_TargetBright:	
  5541  00A0                     	ds	12
  5542  00AC                     _DMX_CurrentBright:	
  5543  00AC                     	ds	12
  5544  00B8                     _Timer:	
  5545  00B8                     	ds	7
  5546  00BF                     _UID:	
  5547  00BF                     	ds	6
  5548  00C5                     _DMXSign:	
  5549  00C5                     	ds	4
  5550  00C9                     _DMX_difference:	
  5551  00C9                     	ds	3
  5552  00CC                     _TX_PD_Flag:	
  5553  00CC                     	ds	2
  5554  00CE                     _tmp16:	
  5555  00CE                     	ds	2
  5556  00D0                     _PD_ID_ptr:	
  5557  00D0                     	ds	2
  5558  00D2                     _PD_Manu_ptr:	
  5559  00D2                     	ds	2
  5560  00D4                     _TxCount:	
  5561  00D4                     	ds	2
  5562  00D6                     _RxTimer:	
  5563  00D6                     	ds	2
  5564  00D8                     _RxAddrCount:	
  5565  00D8                     	ds	2
  5566  00DA                     _DMX_Address:	
  5567  00DA                     	ds	2
  5568  00DC                     _ADC_Flags:	
  5569  00DC                     	ds	1
  5570  00DD                     _ADC_Data:	
  5571  00DD                     	ds	1
  5572  00DE                     _Timer2_Count:	
  5573  00DE                     	ds	1
  5574  00DF                     _Timer_DelayCount:	
  5575  00DF                     	ds	1
  5576  00E0                     _TimerState:	
  5577  00E0                     	ds	1
  5578  00E1                     _PERSONALITY:	
  5579  00E1                     	ds	1
  5580  00E2                     _TX_PDCount:	
  5581  00E2                     	ds	1
  5582  00E3                     _TxState:	
  5583  00E3                     	ds	1
  5584  00E4                     _BytePtr:	
  5585  00E4                     	ds	1
  5586  00E5                     _rxdata:	
  5587  00E5                     	ds	1
  5588  00E6                     _DMXStepConst:	
  5589  00E6                     	ds	1
  5590  00E7                     _DMXDimming:	
  5591  00E7                     	ds	1
  5592  00E8                     _DMXPeriodConst:	
  5593  00E8                     	ds	1
  5594  00E9                     _RxState:	
  5595  00E9                     	ds	1
  5596  00EA                     _RxDataPtr:	
  5597  00EA                     	ds	1
  5598                           
  5599                           	psect	dataBANK1
  5600  00EB                     __pdataBANK1:	
  5601  00EB                     _DEVICE_LABEL_SIZE:	
  5602  00EB                     	ds	1
  5603  00EC                     _IDENTIFY_MODE:	
  5604  00EC                     	ds	1
  5605  00ED                     _DMXPeriod:	
  5606  00ED                     	ds	1
  5607  00EE                     _FOOTPRINT:	
  5608  00EE                     	ds	1
  5609                           
  5610                           	psect	bssBANK2
  5611  0120                     __pbssBANK2:	
  5612  0120                     _RX_RDM_Data:	
  5613  0120                     	ds	24
  5614  0138                     _DMX_SpaceBright:	
  5615  0138                     	ds	12
  5616  0144                     _checkSum:	
  5617  0144                     	ds	2
  5618  0146                     _TX_Discovery_Flag:	
  5619  0146                     	ds	2
  5620  0148                     _PD_Flag:	
  5621  0148                     	ds	2
  5622  014A                     _i:	
  5623  014A                     	ds	2
  5624  014C                     _TX_RDM_Data:	
  5625  014C                     	ds	24
  5626  0164                     _RxData:	
  5627  0164                     	ds	4
  5628                           
  5629                           	psect	dataBANK2
  5630  0168                     __pdataBANK2:	
  5631  0168                     _DMX_repeatcoeff:	
  5632  0168                     	ds	4
  5633  016C                     _DMX_sumRepeat:	
  5634  016C                     	ds	4
  5635                           
  5636                           	psect	bssBANK3
  5637  01A0                     __pbssBANK3:	
  5638  01A0                     _PWMLDCONptr:	
  5639  01A0                     	ds	8
  5640  01A8                     _PWMDCHptr:	
  5641  01A8                     	ds	8
  5642  01B0                     _PWMDCLptr:	
  5643  01B0                     	ds	8
  5644  01B8                     _CurrentPWM:	
  5645  01B8                     	ds	8
  5646  01C0                     _preRxData:	
  5647  01C0                     	ds	4
  5648  01C4                     _DISCOVERY_RDM_Data:	
  5649  01C4                     	ds	24
  5650                           
  5651                           	psect	dataBANK3
  5652  01DC                     __pdataBANK3:	
  5653  01DC                     _DMX_repeat_hereditary:	
  5654  01DC                     	ds	12
  5655  01E8                     _DMX_Repeat:	
  5656  01E8                     	ds	8
  5657                           
  5658                           	psect	dataBANK4
  5659  0220                     __pdataBANK4:	
  5660  0220                     _DEVICE_LABEL:	
  5661  0220                     	ds	32
  5662                           
  5663                           	psect	inittext
  5664  02D1                     init_ram:	
  5665  02D1  00FE               	movwf	126
  5666  02D2                     initloop:	
  5667  02D2  0012               	moviw fsr0++
  5668  02D3  001E               	movwi fsr1++
  5669  02D4  3001               	movlw	1
  5670  02D5  02FE               	subwf	126,f
  5671  02D6  3000               	movlw	0
  5672  02D7  3BFF               	subwfb	127,f
  5673  02D8  087F               	movf	127,w
  5674  02D9  047E               	iorwf	126,w
  5675  02DA  1903               	btfsc	3,2
  5676  02DB  3400               	retlw	0
  5677  02DC  2AD2               	goto	initloop
  5678                           
  5679                           	psect	clrtext
  5680  02DD                     clear_ram0:	
  5681                           ;	Called with FSR0 containing the base address, and
  5682                           ;	btemp/btemp+1 has the size to clear
  5683                           
  5684  02DD  0064               	clrwdt	;clear the watchdog before getting into this loop
  5685  02DE                     clrloop0:	
  5686  02DE  3001               	movlw	1
  5687  02DF  0180               	clrf	0	;clear RAM location pointed to by FSR
  5688  02E0  3101               	addfsr 0,1
  5689  02E1  02FE               	subwf	126,f
  5690  02E2  3000               	movlw	0
  5691  02E3  3BFF               	subwfb	127,f
  5692  02E4  087F               	movf	127,w
  5693  02E5  047E               	iorwf	126,w
  5694  02E6  1903               	btfsc	3,2
  5695  02E7  3400               	retlw	0	;all done for this memory range, return
  5696  02E8  2ADE               	goto	clrloop0	;have we reached the end yet?
  5697                           
  5698                           	psect	cstackBANK4
  5699  0240                     __pcstackBANK4:	
  5700  0240                     ??_DMX_loop:	
  5701                           
  5702                           ; 1 bytes @ 0x0
  5703  0240                     	ds	8
  5704                           
  5705                           	psect	cstackCOMMON
  5706  0070                     __pcstackCOMMON:	
  5707  0070                     ?_timer_init:	
  5708  0070                     ?_DMX_init:	
  5709                           ; 1 bytes @ 0x0
  5710                           
  5711  0070                     ?_RDM_init:	
  5712                           ; 1 bytes @ 0x0
  5713                           
  5714  0070                     ?_DMX_loop:	
  5715                           ; 1 bytes @ 0x0
  5716                           
  5717  0070                     ?_RDM_rx_loop:	
  5718                           ; 1 bytes @ 0x0
  5719                           
  5720  0070                     ?_timer2_loop:	
  5721                           ; 1 bytes @ 0x0
  5722                           
  5723  0070                     ??_DMX_interrput:	
  5724                           ; 1 bytes @ 0x0
  5725                           
  5726  0070                     ?_timer1_interrupt:	
  5727                           ; 1 bytes @ 0x0
  5728                           
  5729  0070                     ??_timer1_interrupt:	
  5730                           ; 1 bytes @ 0x0
  5731                           
  5732  0070                     ?_RDM_tx_interrupt:	
  5733                           ; 1 bytes @ 0x0
  5734                           
  5735  0070                     ??_RDM_tx_interrupt:	
  5736                           ; 1 bytes @ 0x0
  5737                           
  5738  0070                     ??_timer2_interrupt:	
  5739                           ; 1 bytes @ 0x0
  5740                           
  5741  0070                     ?_Get_FootPrint:	
  5742                           ; 1 bytes @ 0x0
  5743                           
  5744  0070                     ?_PD_init:	
  5745                           ; 1 bytes @ 0x0
  5746                           
  5747  0070                     ?_RDM_discovery_CC:	
  5748                           ; 1 bytes @ 0x0
  5749                           
  5750  0070                     ?_RDM_GET_CC:	
  5751                           ; 1 bytes @ 0x0
  5752                           
  5753  0070                     ?_RDM_SET_CC:	
  5754                           ; 1 bytes @ 0x0
  5755                           
  5756  0070                     ?_PFM_Unlock:	
  5757                           ; 1 bytes @ 0x0
  5758                           
  5759  0070                     ?_PD_write_u8:	
  5760                           ; 1 bytes @ 0x0
  5761                           
  5762  0070                     ?_RDM_TXSTART:	
  5763                           ; 1 bytes @ 0x0
  5764                           
  5765  0070                     ?_TX_RDM_Response_Set:	
  5766                           ; 1 bytes @ 0x0
  5767                           
  5768  0070                     ?_main:	
  5769                           ; 1 bytes @ 0x0
  5770                           
  5771  0070                     ?_isr:	
  5772                           ; 1 bytes @ 0x0
  5773                           
  5774  0070                     ?_PWM_TurnOn:	
  5775                           ; 1 bytes @ 0x0
  5776                           
  5777  0070                     ?_PWM_TurnOff:	
  5778                           ; 1 bytes @ 0x0
  5779                           
  5780  0070                     ?_RDM_tx_TimerBreak:	
  5781                           ; 1 bytes @ 0x0
  5782                           
  5783  0070                     ?_RDM_Identify_Switch:	
  5784                           ; 1 bytes @ 0x0
  5785                           
  5786  0070                     ?_DMX_interrput:	
  5787                           ; 1 bytes @ 0x0
  5788                           
  5789  0070                     ?_timer2_interrupt:	
  5790                           ; 2 bytes @ 0x0
  5791                           
  5792                           
  5793                           ; 2 bytes @ 0x0
  5794  0070                     	ds	1
  5795  0071                     ?_PD_Read_u16ptr:	
  5796  0071                     ?_PD_Read_u32ptr:	
  5797                           ; 2 bytes @ 0x1
  5798                           
  5799                           
  5800                           ; 2 bytes @ 0x1
  5801  0071                     	ds	1
  5802  0072                     DMX_interrput@RxDat:	
  5803                           
  5804                           ; 1 bytes @ 0x2
  5805  0072                     	ds	2
  5806  0074                     ??_timer_init:	
  5807  0074                     ?_PFM_Erase:	
  5808                           ; 1 bytes @ 0x4
  5809                           
  5810  0074                     ??_RDM_get_checkSum:	
  5811                           ; 1 bytes @ 0x4
  5812                           
  5813  0074                     ??_PD_init:	
  5814                           ; 1 bytes @ 0x4
  5815                           
  5816  0074                     ??_PFM_Unlock:	
  5817                           ; 1 bytes @ 0x4
  5818                           
  5819  0074                     ??_PD_write_u8:	
  5820                           ; 1 bytes @ 0x4
  5821                           
  5822  0074                     ??_RDM_TXSTART:	
  5823                           ; 1 bytes @ 0x4
  5824                           
  5825  0074                     ??_TX_RDM_Response_Set:	
  5826                           ; 1 bytes @ 0x4
  5827                           
  5828  0074                     ??_isr:	
  5829                           ; 1 bytes @ 0x4
  5830                           
  5831  0074                     ??_PWM_TurnOff:	
  5832                           ; 1 bytes @ 0x4
  5833                           
  5834  0074                     ??_RDM_tx_TimerBreak:	
  5835                           ; 1 bytes @ 0x4
  5836                           
  5837  0074                     ??_PFM_write_String:	
  5838                           ; 1 bytes @ 0x4
  5839                           
  5840  0074                     ??___wmul:	
  5841                           ; 1 bytes @ 0x4
  5842                           
  5843  0074                     ?___bmul:	
  5844                           ; 1 bytes @ 0x4
  5845                           
  5846  0074                     ??___awtoft:	
  5847                           ; 1 bytes @ 0x4
  5848                           
  5849  0074                     ??___lbtoft:	
  5850                           ; 1 bytes @ 0x4
  5851                           
  5852  0074                     ??___lwtoft:	
  5853                           ; 1 bytes @ 0x4
  5854                           
  5855  0074                     ?_PFM_Read:	
  5856                           ; 1 bytes @ 0x4
  5857                           
  5858  0074                     ?_PD_Read_u8ptr:	
  5859                           ; 2 bytes @ 0x4
  5860                           
  5861  0074                     ___bmul@multiplicand:	
  5862                           ; 2 bytes @ 0x4
  5863                           
  5864  0074                     ___awtoft@sign:	
  5865                           ; 1 bytes @ 0x4
  5866                           
  5867  0074                     ___lbtoft@c:	
  5868                           ; 1 bytes @ 0x4
  5869                           
  5870  0074                     PFM_Read@AddrRd:	
  5871                           ; 1 bytes @ 0x4
  5872                           
  5873  0074                     PFM_Erase@AddrErs:	
  5874                           ; 2 bytes @ 0x4
  5875                           
  5876  0074                     ___wmul@product:	
  5877                           ; 2 bytes @ 0x4
  5878                           
  5879                           
  5880                           ; 2 bytes @ 0x4
  5881  0074                     	ds	1
  5882  0075                     ??___bmul:	
  5883  0075                     ??___ftge:	
  5884                           ; 1 bytes @ 0x5
  5885                           
  5886  0075                     ??___ftsub:	
  5887                           ; 1 bytes @ 0x5
  5888                           
  5889                           
  5890                           ; 1 bytes @ 0x5
  5891  0075                     	ds	1
  5892  0076                     ??_timer2_loop:	
  5893  0076                     ??_PFM_Read:	
  5894                           ; 1 bytes @ 0x6
  5895                           
  5896  0076                     ??_PFM_Write:	
  5897                           ; 1 bytes @ 0x6
  5898                           
  5899  0076                     ??_PFM_Erase:	
  5900                           ; 1 bytes @ 0x6
  5901                           
  5902  0076                     ??_Get_FootPrint:	
  5903                           ; 1 bytes @ 0x6
  5904                           
  5905  0076                     ??_PFM_Read_String:	
  5906                           ; 1 bytes @ 0x6
  5907                           
  5908  0076                     ??_RDM_SET_CC:	
  5909                           ; 1 bytes @ 0x6
  5910                           
  5911  0076                     ??_PD_write_String:	
  5912                           ; 1 bytes @ 0x6
  5913                           
  5914  0076                     ??_PD_Read_u8ptr:	
  5915                           ; 1 bytes @ 0x6
  5916                           
  5917  0076                     ??_PD_Read_String:	
  5918                           ; 1 bytes @ 0x6
  5919                           
  5920  0076                     ??_main:	
  5921                           ; 1 bytes @ 0x6
  5922                           
  5923  0076                     ??_RDM_Identify_Switch:	
  5924                           ; 1 bytes @ 0x6
  5925                           
  5926                           
  5927                           	psect	cstackBANK0
  5928  0020                     __pcstackBANK0:	
  5929                           ; 1 bytes @ 0x6
  5930                           
  5931  0020                     ??_DMX_init:	
  5932  0020                     ?_PFM_Write:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0020                     ?_PFM_Read_String:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0020                     ?_PD_write_u32:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0020                     ??_PD_Read_u16ptr:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0020                     ?_PD_Read_String:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0020                     ??_PD_Read_u32ptr:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0020                     ??_PWM_TurnOn:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0020                     ?_PFM_write_String:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0020                     ?_RDM_get_checkSum:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0020                     ?___wmul:	
  5960                           ; 2 bytes @ 0x0
  5961                           
  5962  0020                     ?___ftpack:	
  5963                           ; 2 bytes @ 0x0
  5964                           
  5965  0020                     PD_write_u8@u8:	
  5966                           ; 3 bytes @ 0x0
  5967                           
  5968  0020                     PD_Read_String@u8len:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0020                     ___bmul@product:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0020                     PFM_Write@AddrWrt:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0020                     PFM_write_String@AddrWrtStr:	
  5978                           ; 2 bytes @ 0x0
  5979                           
  5980  0020                     PFM_Read_String@AddrRdStr:	
  5981                           ; 2 bytes @ 0x0
  5982                           
  5983  0020                     ___wmul@multiplier:	
  5984                           ; 2 bytes @ 0x0
  5985                           
  5986  0020                     ___ftpack@arg:	
  5987                           ; 2 bytes @ 0x0
  5988                           
  5989  0020                     PD_write_u32@u32:	
  5990                           ; 3 bytes @ 0x0
  5991                           
  5992  0020                     RDM_get_checkSum@Data:	
  5993                           ; 4 bytes @ 0x0
  5994                           
  5995                           
  5996                           ; 24 bytes @ 0x0
  5997  0020                     	ds	1
  5998  0021                     PD_Read_String@u8ptr:	
  5999  0021                     ___bmul@multiplier:	
  6000                           ; 1 bytes @ 0x1
  6001                           
  6002                           
  6003                           ; 1 bytes @ 0x1
  6004  0021                     	ds	1
  6005  0022                     PFM_write_String@u8ptr:	
  6006  0022                     PFM_Read_String@dataptr:	
  6007                           ; 1 bytes @ 0x2
  6008                           
  6009  0022                     PFM_Write@Data:	
  6010                           ; 1 bytes @ 0x2
  6011                           
  6012  0022                     ___wmul@multiplicand:	
  6013                           ; 2 bytes @ 0x2
  6014                           
  6015                           
  6016                           ; 2 bytes @ 0x2
  6017  0022                     	ds	1
  6018  0023                     PFM_write_String@u8len:	
  6019  0023                     ___ftpack@exp:	
  6020                           ; 1 bytes @ 0x3
  6021                           
  6022                           
  6023                           ; 1 bytes @ 0x3
  6024  0023                     	ds	1
  6025  0024                     ?_PD_write_u16:	
  6026  0024                     ??_PD_write_u32:	
  6027                           ; 1 bytes @ 0x4
  6028                           
  6029  0024                     ?_PD_write_String:	
  6030                           ; 1 bytes @ 0x4
  6031                           
  6032  0024                     Get_FootPrint@Input_Personality:	
  6033                           ; 1 bytes @ 0x4
  6034                           
  6035  0024                     ___ftpack@sign:	
  6036                           ; 1 bytes @ 0x4
  6037                           
  6038  0024                     PD_write_u16@u16:	
  6039                           ; 1 bytes @ 0x4
  6040                           
  6041  0024                     PD_write_String@u8ptr:	
  6042                           ; 2 bytes @ 0x4
  6043                           
  6044                           
  6045                           ; 2 bytes @ 0x4
  6046  0024                     	ds	1
  6047  0025                     ??_RDM_init:	
  6048  0025                     ??___ftpack:	
  6049                           ; 1 bytes @ 0x5
  6050                           
  6051                           
  6052                           ; 1 bytes @ 0x5
  6053  0025                     	ds	1
  6054  0026                     ??_PD_write_u16:	
  6055  0026                     PD_write_String@u8len:	
  6056                           ; 1 bytes @ 0x6
  6057                           
  6058                           
  6059                           ; 1 bytes @ 0x6
  6060  0026                     	ds	2
  6061  0028                     ?___awtoft:	
  6062  0028                     ?___lbtoft:	
  6063                           ; 3 bytes @ 0x8
  6064                           
  6065  0028                     ?___lwtoft:	
  6066                           ; 3 bytes @ 0x8
  6067                           
  6068  0028                     ___awtoft@c:	
  6069                           ; 3 bytes @ 0x8
  6070                           
  6071  0028                     ___lwtoft@c:	
  6072                           ; 2 bytes @ 0x8
  6073                           
  6074                           
  6075                           ; 2 bytes @ 0x8
  6076  0028                     	ds	4
  6077  002C                     ?___ftge:	
  6078  002C                     ?___ftmul:	
  6079                           ; 1 bit 
  6080                           
  6081  002C                     ___ftge@ff1:	
  6082                           ; 3 bytes @ 0xC
  6083                           
  6084  002C                     ___ftmul@f1:	
  6085                           ; 3 bytes @ 0xC
  6086                           
  6087                           
  6088                           ; 3 bytes @ 0xC
  6089  002C                     	ds	3
  6090  002F                     ___ftge@ff2:	
  6091  002F                     ___ftmul@f2:	
  6092                           ; 3 bytes @ 0xF
  6093                           
  6094                           
  6095                           ; 3 bytes @ 0xF
  6096  002F                     	ds	3
  6097  0032                     ??___ftmul:	
  6098                           
  6099                           ; 1 bytes @ 0x12
  6100  0032                     	ds	3
  6101  0035                     ___ftmul@exp:	
  6102                           
  6103                           ; 1 bytes @ 0x15
  6104  0035                     	ds	1
  6105  0036                     ___ftmul@f3_as_product:	
  6106                           
  6107                           ; 3 bytes @ 0x16
  6108  0036                     	ds	2
  6109  0038                     RDM_get_checkSum@len:	
  6110                           
  6111                           ; 1 bytes @ 0x18
  6112  0038                     	ds	1
  6113  0039                     ??_RDM_discovery_CC:	
  6114  0039                     ??_RDM_GET_CC:	
  6115                           ; 1 bytes @ 0x19
  6116                           
  6117  0039                     ___ftmul@cntr:	
  6118                           ; 1 bytes @ 0x19
  6119                           
  6120                           
  6121                           ; 1 bytes @ 0x19
  6122  0039                     	ds	1
  6123  003A                     ___ftmul@sign:	
  6124                           
  6125                           ; 1 bytes @ 0x1A
  6126  003A                     	ds	1
  6127  003B                     ?___ftdiv:	
  6128  003B                     ___ftdiv@f2:	
  6129                           ; 3 bytes @ 0x1B
  6130                           
  6131                           
  6132                           ; 3 bytes @ 0x1B
  6133  003B                     	ds	2
  6134  003D                     ??_RDM_rx_loop:	
  6135                           
  6136                           ; 1 bytes @ 0x1D
  6137  003D                     	ds	1
  6138  003E                     ___ftdiv@f1:	
  6139                           
  6140                           ; 3 bytes @ 0x1E
  6141  003E                     	ds	3
  6142  0041                     ??___ftdiv:	
  6143                           
  6144                           ; 1 bytes @ 0x21
  6145  0041                     	ds	3
  6146  0044                     ___ftdiv@cntr:	
  6147                           
  6148                           ; 1 bytes @ 0x24
  6149  0044                     	ds	1
  6150  0045                     ___ftdiv@f3:	
  6151                           
  6152                           ; 3 bytes @ 0x25
  6153  0045                     	ds	3
  6154  0048                     ___ftdiv@exp:	
  6155                           
  6156                           ; 1 bytes @ 0x28
  6157  0048                     	ds	1
  6158  0049                     ___ftdiv@sign:	
  6159                           
  6160                           ; 1 bytes @ 0x29
  6161  0049                     	ds	1
  6162  004A                     ?___ftadd:	
  6163  004A                     ___ftadd@f1:	
  6164                           ; 3 bytes @ 0x2A
  6165                           
  6166                           
  6167                           ; 3 bytes @ 0x2A
  6168  004A                     	ds	3
  6169  004D                     ___ftadd@f2:	
  6170                           
  6171                           ; 3 bytes @ 0x2D
  6172  004D                     	ds	3
  6173  0050                     ??___ftadd:	
  6174                           
  6175                           ; 1 bytes @ 0x30
  6176  0050                     	ds	3
  6177  0053                     ___ftadd@sign:	
  6178                           
  6179                           ; 1 bytes @ 0x33
  6180  0053                     	ds	1
  6181  0054                     ___ftadd@exp2:	
  6182                           
  6183                           ; 1 bytes @ 0x34
  6184  0054                     	ds	1
  6185  0055                     ___ftadd@exp1:	
  6186                           
  6187                           ; 1 bytes @ 0x35
  6188  0055                     	ds	1
  6189  0056                     ?___ftsub:	
  6190  0056                     ___ftsub@f2:	
  6191                           ; 3 bytes @ 0x36
  6192                           
  6193                           
  6194                           ; 3 bytes @ 0x36
  6195  0056                     	ds	3
  6196  0059                     ___ftsub@f1:	
  6197                           
  6198                           ; 3 bytes @ 0x39
  6199  0059                     	ds	3
  6200  005C                     ?___fttol:	
  6201  005C                     ___fttol@f1:	
  6202                           ; 4 bytes @ 0x3C
  6203                           
  6204                           
  6205                           ; 3 bytes @ 0x3C
  6206  005C                     	ds	4
  6207  0060                     ??___fttol:	
  6208                           
  6209                           ; 1 bytes @ 0x40
  6210  0060                     	ds	3
  6211  0063                     ___fttol@sign1:	
  6212                           
  6213                           ; 1 bytes @ 0x43
  6214  0063                     	ds	1
  6215  0064                     ___fttol@lval:	
  6216                           
  6217                           ; 4 bytes @ 0x44
  6218  0064                     	ds	4
  6219  0068                     ___fttol@exp1:	
  6220                           
  6221                           ; 1 bytes @ 0x48
  6222  0068                     	ds	1
  6223  0069                     _DMX_loop$1925:	
  6224                           
  6225                           ; 3 bytes @ 0x49
  6226  0069                     	ds	3
  6227                           
  6228                           	psect	text2
  6229  0192                     __ptext2:	
  6230 ;; *************** function _timer2_loop *****************
  6231 ;; Defined at:
  6232 ;;		line 179 in file "Timer.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;		None
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      void 
  6239 ;; Registers used:
  6240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 1C/1
  6243 ;;		On exit  : 1C/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;Total ram usage:        0 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    3
  6253 ;; This function calls:
  6254 ;;		_PWM_TurnOff
  6255 ;;		_PWM_TurnOn
  6256 ;; This function is called by:
  6257 ;;		_main
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           
  6262                           ;psect for function _timer2_loop
  6263  0192                     _timer2_loop:	
  6264                           
  6265                           ;Timer.c: 180: if(DMX_Flags.RDM_Identify_Device_Timer2New){
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _timer2_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6269  0192  1EF7               	btfss	_DMX_Flags+1,5	;volatile
  6270  0193  0008               	return
  6271                           
  6272                           ;Timer.c: 181: DMX_Flags.RDM_Identify_Device_Timer2New=0;
  6273  0194  12F7               	bcf	_DMX_Flags+1,5	;volatile
  6274                           
  6275                           ;Timer.c: 182: DMX_Flags.RDM_Identify_Device_Flash=~DMX_Flags.RDM_Identify_Device_Flash;
  6276  0195  3010               	movlw	16
  6277  0196  06F7               	xorwf	_DMX_Flags+1,f	;volatile
  6278                           
  6279                           ;Timer.c: 183: if(DMX_Flags.RDM_Identify_Device_Flash){
  6280  0197  1E77               	btfss	_DMX_Flags+1,4	;volatile
  6281  0198  299A               	goto	l6161
  6282                           
  6283                           ;Timer.c: 184: PWM_TurnOn();
  6284  0199  29BF               	ljmp	l5453
  6285  019A                     l6161:	
  6286                           ;Timer.c: 185: }else{
  6287                           
  6288                           
  6289                           ;Timer.c: 186: PWM_TurnOff();
  6290  019A  29A7               	ljmp	l3643
  6291  019B                     __end_of_timer2_loop:	
  6292  019B                     __ptext8:	
  6293 ;; *************** function _RDM_Identify_Switch *****************
  6294 ;; Defined at:
  6295 ;;		line 191 in file "Timer.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 1F/2
  6306 ;;		On exit  : 1E/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:        0 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    3
  6316 ;; This function calls:
  6317 ;;		_PWM_TurnOff
  6318 ;; This function is called by:
  6319 ;;		_RDM_SET_CC
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           
  6324                           ;psect for function _RDM_Identify_Switch
  6325  019B                     _RDM_Identify_Switch:	
  6326                           
  6327                           ;Timer.c: 192: DMX_Flags.RDM_Identify_Device=~DMX_Flags.RDM_Identify_Device;
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _RDM_Identify_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6331  019B  3008               	movlw	8
  6332  019C  06F7               	xorwf	_DMX_Flags+1,f	;volatile
  6333                           
  6334                           ;Timer.c: 193: TMR2IE=DMX_Flags.RDM_Identify_Device;
  6335  019D  1DF7               	btfss	_DMX_Flags+1,3	;volatile
  6336  019E  29A2               	goto	u1740
  6337  019F  0021               	movlb	1	; select bank1
  6338  01A0  1491               	bsf	17,1	;volatile
  6339  01A1  29A4               	goto	l3795
  6340  01A2                     u1740:	
  6341  01A2  0021               	movlb	1	; select bank1
  6342  01A3  1091               	bcf	17,1	;volatile
  6343  01A4                     l3795:	
  6344                           
  6345                           ;Timer.c: 194: if(!DMX_Flags.RDM_Identify_Device){
  6346  01A4  19F7               	btfsc	_DMX_Flags+1,3	;volatile
  6347  01A5  0008               	return
  6348                           
  6349                           ;Timer.c: 195: PWM_TurnOff();
  6350  01A6  29A7               	ljmp	l3643
  6351  01A7                     __end_of_RDM_Identify_Switch:	
  6352  01A7                     __ptext9:	
  6353 ;; *************** function _PWM_TurnOff *****************
  6354 ;; Defined at:
  6355 ;;		line 327 in file "DMX.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6364 ;; Tracked objects:
  6365 ;;		On entry : 1C/1
  6366 ;;		On exit  : 1F/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        2 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    2
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_timer2_loop
  6380 ;;		_RDM_Identify_Switch
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _PWM_TurnOff
  6386  01A7                     _PWM_TurnOff:	
  6387  01A7                     l3643:	
  6388                           ;incstack = 0
  6389                           ; Regs used in _PWM_TurnOff: [wreg+fsr1l+fsr1h+status,2+status,0]
  6390                           
  6391                           
  6392                           ;DMX.c: 328: Addr=0;
  6393  01A7  0020               	movlb	0	; select bank0
  6394  01A8  01EC               	clrf	_Addr
  6395  01A9                     l3649:	
  6396                           ;DMX.c: 329: while (Addr < 4) {
  6397                           
  6398  01A9  3004               	movlw	4
  6399  01AA  026C               	subwf	_Addr,w
  6400  01AB  1803               	btfsc	3,0
  6401  01AC  0008               	return
  6402                           
  6403                           ;DMX.c: 330: *PWMDCHptr[Addr] = 0x00;
  6404  01AD  356C               	lslf	_Addr,w
  6405  01AE  3EA8               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  6406  01AF  21EF  3181         	fcall	PL22	;call to abstracted procedure
  6407  01B1  0181               	clrf	1
  6408                           
  6409                           ;DMX.c: 331: *PWMDCLptr[Addr] = 0x00;
  6410  01B2  356C               	lslf	_Addr,w
  6411  01B3  3EB0               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  6412  01B4  21EF  3181         	fcall	PL22	;call to abstracted procedure
  6413  01B6  0181               	clrf	1
  6414                           
  6415                           ;DMX.c: 332: *PWMLDCONptr[Addr] = 0b10000000;
  6416  01B7  356C               	lslf	_Addr,w
  6417  01B8  3EA0               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  6418  01B9  21EF  3181         	fcall	PL22	;call to abstracted procedure
  6419  01BB  3080               	movlw	128
  6420  01BC  0081               	movwf	1
  6421                           
  6422                           ;DMX.c: 333: Addr++;
  6423  01BD  0AEC               	incf	_Addr,f
  6424  01BE  29A9               	goto	l3649
  6425  01BF                     __end_of_PWM_TurnOff:	
  6426  01BF                     __ptext3:	
  6427 ;; *************** function _PWM_TurnOn *****************
  6428 ;; Defined at:
  6429 ;;		line 318 in file "DMX.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6438 ;; Tracked objects:
  6439 ;;		On entry : 1C/1
  6440 ;;		On exit  : 1F/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;Total ram usage:        5 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    2
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_timer2_loop
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function _PWM_TurnOn
  6459  01BF                     _PWM_TurnOn:	
  6460  01BF                     l5453:	
  6461                           ;incstack = 0
  6462                           ; Regs used in _PWM_TurnOn: [wreg-fsr1h+status,2+status,0+pclath]
  6463                           
  6464                           
  6465                           ;DMX.c: 319: Addr=0;
  6466  01BF  0020               	movlb	0	; select bank0
  6467  01C0  01EC               	clrf	_Addr
  6468  01C1                     l5461:	
  6469                           ;DMX.c: 320: while (Addr < FOOTPRINT) {
  6470                           
  6471  01C1  0021               	movlb	1	; select bank1
  6472  01C2  086E               	movf	_FOOTPRINT^(0+128),w
  6473  01C3  0020               	movlb	0	; select bank0
  6474  01C4  026C               	subwf	_Addr,w
  6475  01C5  1803               	btfsc	3,0
  6476  01C6  0008               	return
  6477                           
  6478                           ;DMX.c: 321: *PWMDCHptr[Addr] = PWM[IDENTIFY_MODE].DCH;
  6479  01C7  0021               	movlb	1	; select bank1
  6480  01C8  086C               	movf	_IDENTIFY_MODE^(0+128),w
  6481  01C9  0020               	movlb	0	; select bank0
  6482  01CA  00A0               	movwf	??_PWM_TurnOn
  6483  01CB  3001               	movlw	low ((_PWM+1)| (0+32768))
  6484  01CC  220F  3181         	fcall	PL154	;call to abstracted procedure
  6485  01CE  3098               	movlw	high ((_PWM+1)| (0+32768))
  6486  01CF  2215  3181         	fcall	PL166	;call to abstracted procedure
  6487  01D1  3EA8               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  6488  01D2  21FB  3181         	fcall	PL40	;call to abstracted procedure
  6489                           
  6490                           ;DMX.c: 322: *PWMDCLptr[Addr] = PWM[IDENTIFY_MODE].DCL;
  6491  01D4  0021               	movlb	1	; select bank1
  6492  01D5  086C               	movf	_IDENTIFY_MODE^(0+128),w
  6493  01D6  0020               	movlb	0	; select bank0
  6494  01D7  00A0               	movwf	??_PWM_TurnOn
  6495  01D8  3000               	movlw	low (_PWM| (0+32768))
  6496  01D9  220F  3181         	fcall	PL154	;call to abstracted procedure
  6497  01DB  3098               	movlw	high (_PWM| (0+32768))
  6498  01DC  2215  3181         	fcall	PL166	;call to abstracted procedure
  6499  01DE  3EB0               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  6500  01DF  21FB  3181         	fcall	PL40	;call to abstracted procedure
  6501                           
  6502                           ;DMX.c: 323: *PWMLDCONptr[Addr] = 0b10000000;
  6503  01E1  356C               	lslf	_Addr,w
  6504  01E2  2209  3181         	fcall	PL94	;call to abstracted procedure
  6505  01E4  00A0               	movwf	??_PWM_TurnOn
  6506  01E5  3F41               	moviw [1]fsr1
  6507  01E6  00A1               	movwf	??_PWM_TurnOn+1
  6508  01E7  0820               	movf	??_PWM_TurnOn,w
  6509  01E8  0086               	movwf	6
  6510  01E9  0821               	movf	??_PWM_TurnOn+1,w
  6511  01EA  0087               	movwf	7
  6512  01EB  3080               	movlw	128
  6513  01EC  0081               	movwf	1
  6514                           
  6515                           ;DMX.c: 324: Addr++;
  6516  01ED  0AEC               	incf	_Addr,f
  6517  01EE  29C1               	goto	l5461
  6518  01EF                     __end_of_PWM_TurnOn:	
  6519  01EF                     PL22:	
  6520  01EF  0086               	movwf	6
  6521  01F0  3001               	movlw	1	; select bank3/4
  6522  01F1  0087               	movwf	7
  6523  01F2  3F40               	moviw [0]fsr1
  6524  01F3  00F4               	movwf	??_PWM_TurnOff
  6525  01F4  3F41               	moviw [1]fsr1
  6526  01F5  00F5               	movwf	??_PWM_TurnOff+1
  6527  01F6  0874               	movf	??_PWM_TurnOff,w
  6528  01F7  0086               	movwf	6
  6529  01F8  0875               	movf	??_PWM_TurnOff+1,w
  6530  01F9  0087               	movwf	7
  6531  01FA  0008               	return
  6532  01FB                     __end_ofPL22:	
  6533  01FB                     PL40:	
  6534  01FB  0086               	movwf	6
  6535  01FC  3001               	movlw	1	; select bank3/4
  6536  01FD  0087               	movwf	7
  6537  01FE  3F40               	moviw [0]fsr1
  6538  01FF  00A3               	movwf	??_PWM_TurnOn+3
  6539  0200  3F41               	moviw [1]fsr1
  6540  0201  00A4               	movwf	??_PWM_TurnOn+4
  6541  0202  0823               	movf	??_PWM_TurnOn+3,w
  6542  0203  0086               	movwf	6
  6543  0204  0824               	movf	??_PWM_TurnOn+4,w
  6544  0205  0087               	movwf	7
  6545  0206  0822               	movf	??_PWM_TurnOn+2,w
  6546  0207  0081               	movwf	1
  6547  0208  0008               	return
  6548  0209                     __end_ofPL40:	
  6549  0209                     PL94:	
  6550  0209  3EA0               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  6551  020A  0086               	movwf	6
  6552  020B  3001               	movlw	1	; select bank3/4
  6553  020C  0087               	movwf	7
  6554  020D  3F40               	moviw [0]fsr1
  6555  020E  0008               	return
  6556  020F                     __end_ofPL94:	
  6557  020F                     PL154:	
  6558  020F  01A1               	clrf	??_PWM_TurnOn+1
  6559  0210  35A0               	lslf	??_PWM_TurnOn,f
  6560  0211  0DA1               	rlf	??_PWM_TurnOn+1,f
  6561  0212  0720               	addwf	??_PWM_TurnOn,w
  6562  0213  0084               	movwf	4
  6563  0214  0008               	return
  6564  0215                     __end_ofPL154:	
  6565  0215                     PL166:	
  6566  0215  3D21               	addwfc	??_PWM_TurnOn+1,w
  6567  0216  0085               	movwf	5
  6568  0217  0800               	movf	0,w	;code access
  6569  0218  00A2               	movwf	??_PWM_TurnOn+2
  6570  0219  356C               	lslf	_Addr,w
  6571  021A  0008               	return
  6572  021B                     __end_ofPL166:	
  6573                           
  6574                           	psect	text27
  6575  100B                     __ptext27:	
  6576 ;; *************** function _PFM_Read_String *****************
  6577 ;; Defined at:
  6578 ;;		line 126 in file "PFM.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  AddrRdStr       2    0[BANK0 ] unsigned int 
  6581 ;;  dataptr         1    2[BANK0 ] PTR unsigned char 
  6582 ;;		 -> DEVICE_LABEL(32), 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      unsigned char 
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 1F/0
  6591 ;;		On exit  : 1E/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6594 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;Total ram usage:        3 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    3
  6601 ;; This function calls:
  6602 ;;		_PFM_Read
  6603 ;; This function is called by:
  6604 ;;		_RDM_init
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           
  6609                           ;psect for function _PFM_Read_String
  6610  100B                     _PFM_Read_String:	
  6611                           
  6612                           ;PFM.c: 127: ReadCount=0;
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _PFM_Read_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6616  100B  01F8               	clrf	_ReadCount	;volatile
  6617  100C                     l5481:	
  6618                           ;PFM.c: 128: while(ReadCount<32){
  6619                           
  6620  100C  3020               	movlw	32
  6621  100D  0278               	subwf	_ReadCount,w	;volatile
  6622  100E  1803               	btfsc	3,0
  6623  100F  282B               	goto	l5483
  6624                           
  6625                           ;PFM.c: 129: tmp16=PFM_Read(AddrRdStr);
  6626  1010  0821               	movf	PFM_Read_String@AddrRdStr+1,w
  6627  1011  00F5               	movwf	PFM_Read@AddrRd+1
  6628  1012  0820               	movf	PFM_Read_String@AddrRdStr,w
  6629  1013  00F4               	movwf	PFM_Read@AddrRd
  6630  1014  220C  3190         	fcall	_PFM_Read
  6631                           
  6632                           ;PFM.c: 130: if(tmp16==0x3fff){
  6633  1016  26E0  3190         	fcall	PL50	;call to abstracted procedure
  6634  1018  1903               	skipnz
  6635  1019  064F               	xorwf	(_tmp16+1)^(0+128),w
  6636  101A  1903               	btfsc	3,2
  6637  101B  282B               	goto	l5483
  6638                           
  6639                           ;PFM.c: 133: *dataptr=tmp16;
  6640  101C  0020               	movlb	0	; select bank0
  6641  101D  0822               	movf	PFM_Read_String@dataptr,w
  6642  101E  0086               	movwf	6
  6643  101F  3002               	movlw	2	; select bank4/5
  6644  1020  0087               	movwf	7
  6645  1021  0021               	movlb	1	; select bank1
  6646  1022  084E               	movf	_tmp16^(0+128),w
  6647  1023  0081               	movwf	1
  6648                           
  6649                           ;PFM.c: 134: ReadCount++;
  6650  1024  0AF8               	incf	_ReadCount,f	;volatile
  6651                           
  6652                           ;PFM.c: 135: dataptr++;
  6653  1025  0020               	movlb	0	; select bank0
  6654  1026  0AA2               	incf	PFM_Read_String@dataptr,f
  6655                           
  6656                           ;PFM.c: 136: AddrRdStr++;
  6657  1027  0AA0               	incf	PFM_Read_String@AddrRdStr,f
  6658  1028  1903               	skipnz
  6659  1029  0AA1               	incf	PFM_Read_String@AddrRdStr+1,f
  6660  102A  280C               	goto	l5481
  6661  102B                     l5483:	
  6662                           
  6663                           ;PFM.c: 137: }
  6664                           ;PFM.c: 139: }
  6665                           ;PFM.c: 140: return ReadCount;
  6666  102B  0878               	movf	_ReadCount,w	;volatile
  6667  102C  0008               	return
  6668  102D                     __end_of_PFM_Read_String:	
  6669  102D                     __ptext4:	
  6670 ;; *************** function _RDM_rx_loop *****************
  6671 ;; Defined at:
  6672 ;;		line 94 in file "RDM.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 1E/1
  6683 ;;		On exit  : 1C/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        1 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    5
  6693 ;; This function calls:
  6694 ;;		_PD_init
  6695 ;;		_RDM_GET_CC
  6696 ;;		_RDM_SET_CC
  6697 ;;		_RDM_discovery_CC
  6698 ;;		_RDM_get_checkSum
  6699 ;; This function is called by:
  6700 ;;		_main
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _RDM_rx_loop
  6706  102D                     _RDM_rx_loop:	
  6707                           
  6708                           ;RDM.c: 95: if (DMX_Flags.RDMNew == 1) {
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6712  102D  1F76               	btfss	_DMX_Flags,6	;volatile
  6713  102E  0008               	return
  6714                           
  6715                           ;RDM.c: 96: DMX_Flags.RDMNew = 0;
  6716  102F  1376               	bcf	_DMX_Flags,6	;volatile
  6717                           
  6718                           ;RDM.c: 97: DMX_Flags.RDMcheckUID_flag = 0;
  6719  1030  30FC               	movlw	-4
  6720  1031  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6721                           
  6722                           ;RDM.c: 99: if ((RX_RDM_Data.DUID.M == UID.MANC || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_R
      +                          DM_Data.DUID.ID == UID.ID || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  6723  1032  0021               	movlb	1	; select bank1
  6724  1033  0844               	movf	((_UID+1)^(0+128)+4),w
  6725  1034  0022               	movlb	2	; select bank2
  6726  1035  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6727  1036  1D03               	skipz
  6728  1037  283C               	goto	u4155
  6729  1038  0021               	movlb	1	; select bank1
  6730  1039  0843               	movf	(_UID^(0+128)+4),w
  6731  103A  0022               	movlb	2	; select bank2
  6732  103B  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6733  103C                     u4155:	
  6734  103C  1903               	skipnz
  6735  103D  2843               	goto	l6129
  6736  103E  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6737  103F  2868               	goto	l893
  6738  1040  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6739  1041  1D03               	btfss	3,2
  6740  1042  2868               	goto	l893
  6741  1043                     l6129:	
  6742  1043  0021               	movlb	1	; select bank1
  6743  1044  0842               	movf	(_UID+3)^(0+128),w
  6744  1045  0022               	movlb	2	; select bank2
  6745  1046  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6746  1047  1D03               	skipz
  6747  1048  2859               	goto	u4175
  6748  1049  0021               	movlb	1	; select bank1
  6749  104A  0841               	movf	(_UID+2)^(0+128),w
  6750  104B  0022               	movlb	2	; select bank2
  6751  104C  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6752  104D  1D03               	skipz
  6753  104E  2859               	goto	u4175
  6754  104F  0021               	movlb	1	; select bank1
  6755  1050  0840               	movf	(_UID+1)^(0+128),w
  6756  1051  0022               	movlb	2	; select bank2
  6757  1052  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6758  1053  1D03               	skipz
  6759  1054  2859               	goto	u4175
  6760  1055  0021               	movlb	1	; select bank1
  6761  1056  083F               	movf	_UID^(0+128),w
  6762  1057  0022               	movlb	2	; select bank2
  6763  1058  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6764  1059                     u4175:	
  6765  1059  1903               	skipnz
  6766  105A  2866               	goto	l6133
  6767  105B  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6768  105C  2868               	goto	l893
  6769  105D  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6770  105E  1D03               	skipz
  6771  105F  2868               	goto	l893
  6772  1060  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6773  1061  1D03               	skipz
  6774  1062  2868               	goto	l893
  6775  1063  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6776  1064  1D03               	btfss	3,2
  6777  1065  2868               	goto	l893
  6778  1066                     l6133:	
  6779                           
  6780                           ;RDM.c: 100: DMX_Flags.RDMcheckUID_flag = 1;
  6781  1066  2793  3190         	fcall	PL170	;call to abstracted procedure
  6782  1068                     l893:	
  6783                           
  6784                           ;RDM.c: 101: }
  6785                           ;RDM.c: 103: if (DMX_Flags.RDMcheckUID_flag == 1 && RDM_get_checkSum(RX_RDM_Data,200) ==
      +                           RX_RDM_Data.CS) {
  6786  1068  0877               	movf	_DMX_Flags+1,w	;volatile
  6787  1069  3903               	andlw	3
  6788  106A  3A01               	xorlw	1
  6789  106B  1D03               	skipz
  6790  106C  288C               	goto	l898
  6791  106D  3020               	movlw	low _RX_RDM_Data
  6792  106E  0086               	movwf	6
  6793  106F  3001               	movlw	high _RX_RDM_Data
  6794  1070  2754  3190         	fcall	PL122	;call to abstracted procedure
  6795  1072  0020               	movlb	0	; select bank0
  6796  1073  00BD               	movwf	??_RDM_rx_loop
  6797  1074                     u4200:	
  6798  1074  0016               	moviw fsr1++
  6799  1075  001A               	movwi fsr0++
  6800  1076  0BBD               	decfsz	??_RDM_rx_loop,f
  6801  1077  2874               	goto	u4200
  6802  1078  30C8               	movlw	200
  6803  1079  00B8               	movwf	RDM_get_checkSum@len
  6804  107A  27A7  3190         	fcall	_RDM_get_checkSum
  6805  107C  0022               	movlb	2	; select bank2
  6806  107D  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  6807  107E  0020               	movlb	0	; select bank0
  6808  107F  0621               	xorwf	?_RDM_get_checkSum+1,w
  6809  1080  1D03               	skipz
  6810  1081  2886               	goto	u4215
  6811  1082  0022               	movlb	2	; select bank2
  6812  1083  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  6813  1084  0020               	movlb	0	; select bank0
  6814  1085  0620               	xorwf	?_RDM_get_checkSum,w
  6815  1086                     u4215:	
  6816  1086  1D03               	skipz
  6817  1087  288C               	goto	l898
  6818                           
  6819                           ;RDM.c: 104: DMX_Flags.RDMcheckUID_flag = 2;
  6820  1088  0877               	movf	_DMX_Flags+1,w	;volatile
  6821  1089  39FC               	andlw	-4
  6822  108A  3802               	iorlw	2
  6823  108B  00F7               	movwf	_DMX_Flags+1	;volatile
  6824  108C                     l898:	
  6825                           
  6826                           ;RDM.c: 105: }
  6827                           ;RDM.c: 107: if (DMX_Flags.RDMcheckUID_flag == 2) {
  6828  108C  0877               	movf	_DMX_Flags+1,w	;volatile
  6829  108D  3903               	andlw	3
  6830  108E  3A02               	xorlw	2
  6831  108F  1D03               	skipz
  6832  1090  0008               	return
  6833                           
  6834                           ;RDM.c: 108: PD_init();
  6835  1091  267F  3190         	fcall	_PD_init
  6836                           
  6837                           ;RDM.c: 118: break;
  6838                           
  6839                           ;RDM.c: 109: switch (RX_RDM_Data.CC) {
  6840  1093  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6841                           
  6842                           ; Switch size 1, requested type "space"
  6843                           ; Number of cases is 3, Range of values is 16 to 48
  6844                           ; switch strategies available:
  6845                           ; Name         Instructions Cycles
  6846                           ; simple_byte           10     6 (average)
  6847                           ; direct_byte           75     9 (fixed)
  6848                           ; jumptable            263     9 (fixed)
  6849                           ;	Chosen strategy is simple_byte
  6850  1094  3A10               	xorlw	16	; case 16
  6851  1095  1903               	skipnz
  6852  1096  289E               	goto	l6141
  6853  1097  3A30               	xorlw	48	; case 32
  6854  1098  1903               	skipnz
  6855  1099  289F               	goto	l6143
  6856  109A  3A10               	xorlw	16	; case 48
  6857  109B  1903               	skipnz
  6858  109C  28A0               	goto	l6145
  6859  109D  28A1               	goto	l905
  6860  109E                     l6141:	
  6861                           
  6862                           ;RDM.c: 111: RDM_discovery_CC();
  6863  109E  2D88               	ljmp	l5487
  6864  109F                     l6143:	
  6865                           ;RDM.c: 112: break;
  6866                           
  6867                           
  6868                           ;RDM.c: 114: RDM_GET_CC();
  6869  109F  2AAD               	ljmp	l5555
  6870  10A0                     l6145:	
  6871                           ;RDM.c: 115: break;
  6872                           
  6873                           
  6874                           ;RDM.c: 117: RDM_SET_CC();
  6875  10A0  28A2               	ljmp	l5689
  6876  10A1                     l905:	
  6877  10A1  0008               	return
  6878  10A2                     __end_of_RDM_rx_loop:	
  6879  10A2                     __ptext7:	
  6880 ;; *************** function _RDM_SET_CC *****************
  6881 ;; Defined at:
  6882 ;;		line 150 in file "RDM_Read.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;		None
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;		None
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 1C/2
  6893 ;;		On exit  : 1F/2
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;Total ram usage:        0 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    4
  6903 ;; This function calls:
  6904 ;;		_Get_FootPrint
  6905 ;;		_PD_Read_String
  6906 ;;		_PD_Read_u16ptr
  6907 ;;		_PD_Read_u8ptr
  6908 ;;		_PFM_Erase
  6909 ;;		_PFM_Write
  6910 ;;		_PFM_write_String
  6911 ;;		_RDM_Identify_Switch
  6912 ;;		_RDM_TXSTART
  6913 ;; This function is called by:
  6914 ;;		_RDM_rx_loop
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           
  6919                           ;psect for function _RDM_SET_CC
  6920  10A2                     _RDM_SET_CC:	
  6921  10A2                     l5689:	
  6922                           ;incstack = 0
  6923                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6924                           
  6925                           
  6926                           ;RDM_Read.c: 151: switch (RX_RDM_Data.PID){
  6927  10A2  28F7               	goto	l5717
  6928  10A3                     l5691:	
  6929                           
  6930                           ;RDM_Read.c: 154: DMX_Address=*PD_Read_u16ptr();
  6931  10A3  2632  3190         	fcall	_PD_Read_u16ptr
  6932  10A5  274D  3190         	fcall	PL116	;call to abstracted procedure
  6933  10A7  00DA               	movwf	_DMX_Address^(0+128)
  6934  10A8  3F41               	moviw [1]fsr1
  6935  10A9  00DB               	movwf	(_DMX_Address+1)^(0+128)
  6936                           
  6937                           ;RDM_Read.c: 156: PFM_Erase(Flash_DMX_ADDRESS);
  6938  10AA  3080               	movlw	128
  6939  10AB  00F4               	movwf	PFM_Erase@AddrErs
  6940  10AC  301F               	movlw	31
  6941  10AD  00F5               	movwf	PFM_Erase@AddrErs+1
  6942  10AE  2114  3190         	fcall	_PFM_Erase
  6943                           
  6944                           ;RDM_Read.c: 157: PFM_Write(Flash_DMX_ADDRESS,DMX_Address);
  6945  10B0  2767  3190         	fcall	PL134	;call to abstracted procedure
  6946  10B2  0021               	movlb	1	; select bank1
  6947  10B3  085B               	movf	(_DMX_Address+1)^(0+128),w
  6948  10B4  0020               	movlb	0	; select bank0
  6949  10B5  00A3               	movwf	PFM_Write@Data+1
  6950  10B6  0021               	movlb	1	; select bank1
  6951  10B7  085A               	movf	_DMX_Address^(0+128),w
  6952  10B8  0020               	movlb	0	; select bank0
  6953  10B9  00A2               	movwf	PFM_Write@Data
  6954  10BA  2227  3190         	fcall	_PFM_Write
  6955                           
  6956                           ;RDM_Read.c: 160: break;
  6957  10BC  2913               	goto	l5719
  6958  10BD                     l5697:	
  6959                           
  6960                           ;RDM_Read.c: 162: RDM_Identify_Switch();
  6961  10BD  3181  219B  3190   	fcall	_RDM_Identify_Switch
  6962                           
  6963                           ;RDM_Read.c: 163: break;
  6964  10C0  2913               	goto	l5719
  6965  10C1                     l5699:	
  6966                           
  6967                           ;RDM_Read.c: 165: IDENTIFY_MODE=*PD_Read_u8ptr();
  6968  10C1  2575  3190         	fcall	_PD_Read_u8ptr
  6969  10C3  2719  3190         	fcall	PL68	;call to abstracted procedure
  6970  10C5  00EC               	movwf	_IDENTIFY_MODE^(0+128)
  6971                           
  6972                           ;RDM_Read.c: 166: break;
  6973  10C6  2913               	goto	l5719
  6974  10C7                     l5701:	
  6975                           
  6976                           ;RDM_Read.c: 168: PERSONALITY=*PD_Read_u8ptr();
  6977  10C7  2575  3190         	fcall	_PD_Read_u8ptr
  6978  10C9  2719  3190         	fcall	PL68	;call to abstracted procedure
  6979  10CB  00E1               	movwf	_PERSONALITY^(0+128)
  6980                           
  6981                           ;RDM_Read.c: 169: PFM_Erase(Flash_PERSONALITY);
  6982  10CC  30A0               	movlw	160
  6983  10CD  00F4               	movwf	PFM_Erase@AddrErs
  6984  10CE  301F               	movlw	31
  6985  10CF  00F5               	movwf	PFM_Erase@AddrErs+1
  6986  10D0  2114  3190         	fcall	_PFM_Erase
  6987                           
  6988                           ;RDM_Read.c: 170: PFM_Write(Flash_PERSONALITY,PERSONALITY);
  6989  10D2  2761  3190         	fcall	PL130	;call to abstracted procedure
  6990  10D4  0021               	movlb	1	; select bank1
  6991  10D5  0861               	movf	_PERSONALITY^(0+128),w
  6992  10D6  0020               	movlb	0	; select bank0
  6993  10D7  00A2               	movwf	PFM_Write@Data
  6994  10D8  01A3               	clrf	PFM_Write@Data+1
  6995  10D9  2227  3190         	fcall	_PFM_Write
  6996                           
  6997                           ;RDM_Read.c: 171: FOOTPRINT=Get_FootPrint(PERSONALITY);
  6998  10DB  0021               	movlb	1	; select bank1
  6999  10DC  0861               	movf	_PERSONALITY^(0+128),w
  7000  10DD  225C  3190         	fcall	_Get_FootPrint
  7001  10DF  0021               	movlb	1	; select bank1
  7002  10E0  00EE               	movwf	_FOOTPRINT^(0+128)
  7003                           
  7004                           ;RDM_Read.c: 172: break;
  7005  10E1  2913               	goto	l5719
  7006  10E2                     l5709:	
  7007                           
  7008                           ;RDM_Read.c: 174: DEVICE_LABEL_SIZE=RX_RDM_Data.PDL;
  7009  10E2  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  7010  10E3  0021               	movlb	1	; select bank1
  7011  10E4  00EB               	movwf	_DEVICE_LABEL_SIZE^(0+128)
  7012                           
  7013                           ;RDM_Read.c: 175: PD_Read_String(&DEVICE_LABEL[0] , DEVICE_LABEL_SIZE);
  7014  10E5  0020               	movlb	0	; select bank0
  7015  10E6  00A0               	movwf	PD_Read_String@u8len
  7016  10E7  3020               	movlw	(low (_DEVICE_LABEL| (0+512)))& (0+255)
  7017  10E8  2267  3190         	fcall	_PD_Read_String
  7018                           
  7019                           ;RDM_Read.c: 176: PFM_write_String(Flash_DEVICE_LABEL,&DEVICE_LABEL[0],DEVICE_LABEL_SIZE
      +                          );
  7020  10EA  30C0               	movlw	192
  7021  10EB  00A0               	movwf	PFM_write_String@AddrWrtStr
  7022  10EC  301F               	movlw	31
  7023  10ED  00A1               	movwf	PFM_write_String@AddrWrtStr+1
  7024  10EE  3020               	movlw	(low (_DEVICE_LABEL| (0+512)))& (0+255)
  7025  10EF  00A2               	movwf	PFM_write_String@u8ptr
  7026  10F0  0021               	movlb	1	; select bank1
  7027  10F1  086B               	movf	_DEVICE_LABEL_SIZE^(0+128),w
  7028  10F2  0020               	movlb	0	; select bank0
  7029  10F3  00A3               	movwf	PFM_write_String@u8len
  7030  10F4  227B  3190         	fcall	_PFM_write_String
  7031                           
  7032                           ;RDM_Read.c: 177: break;
  7033  10F6  2913               	goto	l5719
  7034  10F7                     l5717:	
  7035                           
  7036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7037                           ; Switch size 1, requested type "space"
  7038                           ; Number of cases is 2, Range of values is 0 to 16
  7039                           ; switch strategies available:
  7040                           ; Name         Instructions Cycles
  7041                           ; simple_byte            7     4 (average)
  7042                           ; direct_byte           40     6 (fixed)
  7043                           ; jumptable            260     6 (fixed)
  7044                           ;	Chosen strategy is simple_byte
  7045  10F7  0022               	movlb	2	; select bank2
  7046  10F8  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  7047  10F9  3A00               	xorlw	0	; case 0
  7048  10FA  1903               	skipnz
  7049  10FB  2900               	goto	l6383
  7050  10FC  3A10               	xorlw	16	; case 16
  7051  10FD  1903               	skipnz
  7052  10FE  290B               	goto	l6385
  7053  10FF  2913               	goto	l5719
  7054  1100                     l6383:	
  7055                           
  7056                           ; Switch size 1, requested type "space"
  7057                           ; Number of cases is 3, Range of values is 130 to 240
  7058                           ; switch strategies available:
  7059                           ; Name         Instructions Cycles
  7060                           ; simple_byte           10     6 (average)
  7061                           ; direct_byte          231     9 (fixed)
  7062                           ; jumptable            263     9 (fixed)
  7063                           ;	Chosen strategy is simple_byte
  7064  1100  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7065  1101  3A82               	xorlw	130	; case 130
  7066  1102  1903               	skipnz
  7067  1103  28E2               	goto	l5709
  7068  1104  3A62               	xorlw	98	; case 224
  7069  1105  1903               	skipnz
  7070  1106  28C7               	goto	l5701
  7071  1107  3A10               	xorlw	16	; case 240
  7072  1108  1903               	skipnz
  7073  1109  28A3               	goto	l5691
  7074  110A  2913               	goto	l5719
  7075  110B                     l6385:	
  7076                           
  7077                           ; Switch size 1, requested type "space"
  7078                           ; Number of cases is 2, Range of values is 0 to 64
  7079                           ; switch strategies available:
  7080                           ; Name         Instructions Cycles
  7081                           ; simple_byte            7     4 (average)
  7082                           ; direct_byte          136     6 (fixed)
  7083                           ; jumptable            260     6 (fixed)
  7084                           ;	Chosen strategy is simple_byte
  7085  110B  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7086  110C  3A00               	xorlw	0	; case 0
  7087  110D  1903               	skipnz
  7088  110E  28BD               	goto	l5697
  7089  110F  3A40               	xorlw	64	; case 64
  7090  1110  1903               	skipnz
  7091  1111  28C1               	goto	l5699
  7092  1112  2913               	goto	l5719
  7093  1113                     l5719:	
  7094                           
  7095                           ;RDM_Read.c: 179: RDM_TXSTART();
  7096  1113  2E63               	ljmp	l3867
  7097  1114                     __end_of_RDM_SET_CC:	
  7098  1114                     __ptext29:	
  7099 ;; *************** function _PFM_Erase *****************
  7100 ;; Defined at:
  7101 ;;		line 23 in file "PFM.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  AddrErs         2    4[COMMON] unsigned int 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0, pclath, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 1F/1
  7112 ;;		On exit  : 1F/3
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;Total ram usage:        2 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    3
  7122 ;; This function calls:
  7123 ;;		_PFM_Unlock
  7124 ;; This function is called by:
  7125 ;;		_RDM_init
  7126 ;;		_RDM_SET_CC
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _PFM_Erase
  7132  1114                     _PFM_Erase:	
  7133                           
  7134                           ;PFM.c: 24: GIE=0;
  7135                           
  7136                           ;incstack = 0
  7137                           ; Regs used in _PFM_Erase: [wreg+status,2+status,0+pclath+cstack]
  7138  1114  138B               	bcf	11,7	;volatile
  7139                           
  7140                           ;PFM.c: 25: CFGS=0;
  7141  1115  0023               	movlb	3	; select bank3
  7142  1116  1315               	bcf	21,6	;volatile
  7143                           
  7144                           ;PFM.c: 26: PMADR=AddrErs;
  7145  1117  0875               	movf	PFM_Erase@AddrErs+1,w
  7146  1118  0092               	movwf	18	;volatile
  7147  1119  0874               	movf	PFM_Erase@AddrErs,w
  7148  111A  0091               	movwf	17	;volatile
  7149                           
  7150                           ;PFM.c: 28: FREE = 1;
  7151  111B  1615               	bsf	21,4	;volatile
  7152                           
  7153                           ;PFM.c: 29: WREN = 1;
  7154  111C  1515               	bsf	21,2	;volatile
  7155                           
  7156                           ;PFM.c: 30: PFM_Unlock();
  7157  111D  257F  3190         	fcall	_PFM_Unlock
  7158                           
  7159                           ;PFM.c: 32: WREN=0;
  7160                           
  7161                           ;PFM.c: 33: GIE=1;
  7162  111F  2F8F               	ljmp	PL168	;call to abstracted procedure
  7163  1120                     __end_of_PFM_Erase:	
  7164  1120                     __ptext24:	
  7165 ;; *************** function _RDM_init *****************
  7166 ;; Defined at:
  7167 ;;		line 16 in file "RDM.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;		None
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : B1F/0
  7178 ;;		On exit  : 1F/1
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;Total ram usage:        1 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    4
  7188 ;; This function calls:
  7189 ;;		_Get_FootPrint
  7190 ;;		_PFM_Erase
  7191 ;;		_PFM_Read
  7192 ;;		_PFM_Read_String
  7193 ;;		_PFM_Write
  7194 ;;		___bmul
  7195 ;; This function is called by:
  7196 ;;		_main
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function _RDM_init
  7202  1120                     _RDM_init:	
  7203                           
  7204                           ;RDM.c: 18: PEIE = 1;
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7208  1120  170B               	bsf	11,6	;volatile
  7209                           
  7210                           ;RDM.c: 20: TRISC4 = 0;
  7211  1121  0021               	movlb	1	; select bank1
  7212  1122  120E               	bcf	14,4	;volatile
  7213                           
  7214                           ;RDM.c: 21: LATC4 = 1;
  7215  1123  0022               	movlb	2	; select bank2
  7216  1124  160E               	bsf	14,4	;volatile
  7217                           
  7218                           ;RDM.c: 23: SPEN = 1;
  7219  1125  0023               	movlb	3	; select bank3
  7220  1126  179D               	bsf	29,7	;volatile
  7221                           
  7222                           ;RDM.c: 24: SYNC = 0;
  7223  1127  121E               	bcf	30,4	;volatile
  7224                           
  7225                           ;RDM.c: 25: RC4PPS = 0b1001;
  7226  1128  3009               	movlw	9
  7227  1129  003D               	movlb	29	; select bank29
  7228  112A  00A4               	movwf	36	;volatile
  7229                           
  7230                           ;RDM.c: 27: BytePtr = &TX_RDM_Data.value[0];
  7231  112B  304C               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7232  112C  0021               	movlb	1	; select bank1
  7233  112D  00E4               	movwf	_BytePtr^(0+128)
  7234                           
  7235                           ;RDM.c: 28: TX9 = TX9D = 1;
  7236  112E  0023               	movlb	3	; select bank3
  7237  112F  141E               	bsf	30,0	;volatile
  7238  1130  1C1E               	btfss	30,0	;volatile
  7239  1131  2935               	goto	u3880
  7240  1132  0023               	movlb	3	; select bank3
  7241  1133  171E               	bsf	30,6	;volatile
  7242  1134  2937               	goto	l5921
  7243  1135                     u3880:	
  7244  1135  0023               	movlb	3	; select bank3
  7245  1136  131E               	bcf	30,6	;volatile
  7246  1137                     l5921:	
  7247                           
  7248                           ;RDM.c: 30: LATC3=0;
  7249  1137  0022               	movlb	2	; select bank2
  7250  1138  118E               	bcf	14,3	;volatile
  7251                           
  7252                           ;RDM.c: 31: DMX_Flags.RDMmute = 0;
  7253  1139  1177               	bcf	_DMX_Flags+1,2	;volatile
  7254                           
  7255                           ;RDM.c: 32: DMX_Flags.RDM_Identify_Device = 0;
  7256  113A  11F7               	bcf	_DMX_Flags+1,3	;volatile
  7257                           
  7258                           ;RDM.c: 34: UID.MANC=0x08BA;
  7259  113B  30BA               	movlw	186
  7260  113C  0021               	movlb	1	; select bank1
  7261  113D  00C3               	movwf	(_UID^(0+128)+4)
  7262  113E  3008               	movlw	8
  7263  113F  00C4               	movwf	(_UID^(0+128)+5)
  7264                           
  7265                           ;RDM.c: 35: UID.ID=0x12345678;
  7266  1140  3012               	movlw	18
  7267  1141  00C2               	movwf	(_UID+3)^(0+128)
  7268  1142  3034               	movlw	52
  7269  1143  00C1               	movwf	(_UID+2)^(0+128)
  7270  1144  3056               	movlw	86
  7271  1145  00C0               	movwf	(_UID+1)^(0+128)
  7272  1146  3078               	movlw	120
  7273  1147  00BF               	movwf	_UID^(0+128)
  7274                           
  7275                           ;RDM.c: 37: tmp8 = 23;
  7276  1148  3017               	movlw	23
  7277  1149  00F9               	movwf	_tmp8
  7278  114A                     l5931:	
  7279                           ;RDM.c: 40: while (tmp8 >= 17) {
  7280                           
  7281  114A  3011               	movlw	17
  7282  114B  0279               	subwf	_tmp8,w
  7283  114C  1C03               	btfss	3,0
  7284  114D  2957               	goto	l5933
  7285                           
  7286                           ;RDM.c: 41: DISCOVERY_RDM_Data[tmp8] = 0xFE;
  7287  114E  0879               	movf	_tmp8,w
  7288  114F  3EC4               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  7289  1150  0086               	movwf	6
  7290  1151  3001               	movlw	1	; select bank3/4
  7291  1152  0087               	movwf	7
  7292  1153  30FE               	movlw	254
  7293  1154  0081               	movwf	1
  7294                           
  7295                           ;RDM.c: 42: tmp8--;
  7296  1155  03F9               	decf	_tmp8,f
  7297  1156  294A               	goto	l5931
  7298  1157                     l5933:	
  7299                           
  7300                           ;RDM.c: 43: }
  7301                           ;RDM.c: 44: DISCOVERY_RDM_Data[16] = 0xAA;
  7302  1157  30AA               	movlw	170
  7303  1158  0023               	movlb	3	; select bank3
  7304  1159  00D4               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)
  7305                           
  7306                           ;RDM.c: 45: tmp8 = 0;
  7307  115A  01F9               	clrf	_tmp8
  7308                           
  7309                           ;RDM.c: 46: checkSum = 0;
  7310  115B  0022               	movlb	2	; select bank2
  7311  115C  01C4               	clrf	_checkSum^(0+256)
  7312  115D  01C5               	clrf	(_checkSum+1)^(0+256)
  7313  115E                     l5947:	
  7314                           ;RDM.c: 47: while (tmp8 < 6) {
  7315                           
  7316  115E  3006               	movlw	6
  7317  115F  0279               	subwf	_tmp8,w
  7318  1160  1803               	btfsc	3,0
  7319  1161  298C               	goto	l5949
  7320                           
  7321                           ;RDM.c: 48: DISCOVERY_RDM_Data[15 - tmp8 * 2] = UID.data[5-tmp8] | 0xAA;
  7322  1162  30FE               	movlw	254
  7323  1163  00F4               	movwf	___bmul@multiplicand
  7324  1164  0879               	movf	_tmp8,w
  7325  1165  221A  3190         	fcall	___bmul
  7326  1167  3ED3               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7327  1168  26D4  3190         	fcall	PL44	;call to abstracted procedure
  7328  116A  38AA               	iorlw	170
  7329                           
  7330                           ;RDM.c: 49: DISCOVERY_RDM_Data[14 - tmp8 * 2] = UID.data[5-tmp8] | 0x55;
  7331  116B  279D  3190         	fcall	PL178	;call to abstracted procedure
  7332  116D  221A  3190         	fcall	___bmul
  7333  116F  3ED2               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7334  1170  26D4  3190         	fcall	PL44	;call to abstracted procedure
  7335  1172  3855               	iorlw	85
  7336                           
  7337                           ;RDM.c: 50: checkSum += DISCOVERY_RDM_Data[15 - tmp8 * 2];
  7338  1173  279D  3190         	fcall	PL178	;call to abstracted procedure
  7339  1175  221A  3190         	fcall	___bmul
  7340  1177  3ED3               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7341  1178  0086               	movwf	6
  7342  1179  3001               	movlw	1	; select bank3/4
  7343  117A  0087               	movwf	7
  7344  117B  0801               	movf	1,w
  7345  117C  0022               	movlb	2	; select bank2
  7346  117D  07C4               	addwf	_checkSum^(0+256),f
  7347  117E  1803               	skipnc
  7348  117F  0AC5               	incf	(_checkSum+1)^(0+256),f
  7349                           
  7350                           ;RDM.c: 51: checkSum += DISCOVERY_RDM_Data[14 - tmp8 * 2];
  7351  1180  30FE               	movlw	254
  7352  1181  00F4               	movwf	___bmul@multiplicand
  7353  1182  0879               	movf	_tmp8,w
  7354  1183  221A  3190         	fcall	___bmul
  7355  1185  3ED2               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7356  1186  0086               	movwf	6
  7357  1187  3001               	movlw	1	; select bank3/4
  7358  1188  0087               	movwf	7
  7359                           
  7360                           ;RDM.c: 52: tmp8++;
  7361  1189  2746  3190         	fcall	PL100	;call to abstracted procedure
  7362  118B  295E               	goto	l5947
  7363  118C                     l5949:	
  7364                           
  7365                           ;RDM.c: 53: }
  7366                           ;RDM.c: 54: TX_RDM_Data.CS = checkSum;
  7367  118C  0845               	movf	(_checkSum+1)^(0+256),w
  7368  118D  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7369  118E  0844               	movf	_checkSum^(0+256),w
  7370  118F  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7371                           
  7372                           ;RDM.c: 56: DISCOVERY_RDM_Data[3] = TX_RDM_Data.CSH | 0xAA;
  7373  1190  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7374  1191  38AA               	iorlw	170
  7375  1192  0023               	movlb	3	; select bank3
  7376  1193  00C7               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)
  7377                           
  7378                           ;RDM.c: 57: DISCOVERY_RDM_Data[2] = TX_RDM_Data.CSH | 0x55;
  7379  1194  0022               	movlb	2	; select bank2
  7380  1195  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7381  1196  3855               	iorlw	85
  7382  1197  0023               	movlb	3	; select bank3
  7383  1198  00C6               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)
  7384                           
  7385                           ;RDM.c: 58: DISCOVERY_RDM_Data[1] = TX_RDM_Data.CSL | 0xAA;
  7386  1199  0022               	movlb	2	; select bank2
  7387  119A  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7388  119B  38AA               	iorlw	170
  7389  119C  0023               	movlb	3	; select bank3
  7390  119D  00C5               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)
  7391                           
  7392                           ;RDM.c: 59: DISCOVERY_RDM_Data[0] = TX_RDM_Data.CSL | 0x55;
  7393  119E  0022               	movlb	2	; select bank2
  7394  119F  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7395  11A0  3855               	iorlw	85
  7396  11A1  0023               	movlb	3	; select bank3
  7397  11A2  00C4               	movwf	_DISCOVERY_RDM_Data^(0+384)
  7398                           
  7399                           ;RDM.c: 60: tmp8 = 16;
  7400  11A3  3010               	movlw	16
  7401  11A4  00F9               	movwf	_tmp8
  7402  11A5                     l5963:	
  7403                           ;RDM.c: 61: while (tmp8 >= 11) {
  7404                           
  7405  11A5  300B               	movlw	11
  7406  11A6  0279               	subwf	_tmp8,w
  7407  11A7  1C03               	btfss	3,0
  7408  11A8  29B6               	goto	l5965
  7409                           
  7410                           ;RDM.c: 62: TX_RDM_Data.value[tmp8] = UID.data[tmp8-11];
  7411  11A9  0879               	movf	_tmp8,w
  7412  11AA  3E4C               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7413  11AB  0086               	movwf	6
  7414  11AC  3001               	movlw	1	; select bank2/3
  7415  11AD  0087               	movwf	7
  7416  11AE  0879               	movf	_tmp8,w
  7417  11AF  3EB4               	addlw	(low ((_UID| 0+245)))& (0+255)
  7418  11B0  0084               	movwf	4
  7419  11B1  0185               	clrf	5
  7420  11B2  0800               	movf	0,w
  7421  11B3  0081               	movwf	1
  7422                           
  7423                           ;RDM.c: 63: tmp8--;
  7424  11B4  03F9               	decf	_tmp8,f
  7425  11B5  29A5               	goto	l5963
  7426  11B6                     l5965:	
  7427                           
  7428                           ;RDM.c: 64: }
  7429                           ;RDM.c: 67: DMX_Address=PFM_Read(Flash_DMX_ADDRESS);
  7430  11B6  27A2  3190         	fcall	PL182	;call to abstracted procedure
  7431  11B8  220C  3190         	fcall	_PFM_Read
  7432  11BA  276D  3190         	fcall	PL142	;call to abstracted procedure
  7433                           
  7434                           ;RDM.c: 68: if(DMX_Address==0x3fff){
  7435  11BC  0A5A               	incf	_DMX_Address^(0+128),w
  7436  11BD  303F               	movlw	63
  7437  11BE  1903               	skipnz
  7438  11BF  065B               	xorwf	(_DMX_Address+1)^(0+128),w
  7439  11C0  1D03               	btfss	3,2
  7440  11C1  29CF               	goto	l5973
  7441                           
  7442                           ;RDM.c: 70: PFM_Write(Flash_DMX_ADDRESS,0x0001);
  7443  11C2  2767  3190         	fcall	PL134	;call to abstracted procedure
  7444  11C4  01A2               	clrf	PFM_Write@Data
  7445  11C5  0AA2               	incf	PFM_Write@Data,f
  7446  11C6  01A3               	clrf	PFM_Write@Data+1
  7447  11C7  2227  3190         	fcall	_PFM_Write
  7448                           
  7449                           ;RDM.c: 71: DMX_Address=PFM_Read(Flash_DMX_ADDRESS);
  7450  11C9  27A2  3190         	fcall	PL182	;call to abstracted procedure
  7451  11CB  220C  3190         	fcall	_PFM_Read
  7452  11CD  276D  3190         	fcall	PL142	;call to abstracted procedure
  7453  11CF                     l5973:	
  7454                           
  7455                           ;RDM.c: 72: }
  7456                           ;RDM.c: 75: tmp16=PFM_Read(Flash_PERSONALITY);
  7457  11CF  30A0               	movlw	160
  7458  11D0  00F4               	movwf	PFM_Read@AddrRd
  7459  11D1  301F               	movlw	31
  7460  11D2  00F5               	movwf	PFM_Read@AddrRd+1
  7461  11D3  220C  3190         	fcall	_PFM_Read
  7462                           
  7463                           ;RDM.c: 76: if(tmp16==0x3fff){
  7464  11D5  26E0  3190         	fcall	PL50	;call to abstracted procedure
  7465  11D7  1903               	skipnz
  7466  11D8  064F               	xorwf	(_tmp16+1)^(0+128),w
  7467                           
  7468                           ;RDM.c: 77: PFM_Erase(Flash_PERSONALITY);
  7469  11D9  30A0               	movlw	160
  7470  11DA  1D03               	btfss	3,2
  7471  11DB  29E9               	goto	L2
  7472  11DC  00F4               	movwf	PFM_Erase@AddrErs
  7473  11DD  301F               	movlw	31
  7474  11DE  00F5               	movwf	PFM_Erase@AddrErs+1
  7475  11DF  2114  3190         	fcall	_PFM_Erase
  7476                           
  7477                           ;RDM.c: 78: PFM_Write(Flash_PERSONALITY,0x0004);
  7478  11E1  2761  3190         	fcall	PL130	;call to abstracted procedure
  7479  11E3  3004               	movlw	4
  7480  11E4  00A2               	movwf	PFM_Write@Data
  7481  11E5  01A3               	clrf	PFM_Write@Data+1
  7482  11E6  2227  3190         	fcall	_PFM_Write
  7483                           
  7484                           ;RDM.c: 79: }
  7485                           ;RDM.c: 80: PERSONALITY=PFM_Read(Flash_PERSONALITY);
  7486  11E8  30A0               	movlw	160
  7487  11E9                     L2:	
  7488  11E9  00F4               	movwf	PFM_Read@AddrRd
  7489  11EA  301F               	movlw	31
  7490  11EB  00F5               	movwf	PFM_Read@AddrRd+1
  7491  11EC  220C  3190         	fcall	_PFM_Read
  7492  11EE  0874               	movf	?_PFM_Read,w
  7493  11EF  0021               	movlb	1	; select bank1
  7494  11F0  00E1               	movwf	_PERSONALITY^(0+128)
  7495                           
  7496                           ;RDM.c: 81: FOOTPRINT=Get_FootPrint(PERSONALITY);
  7497  11F1  225C  3190         	fcall	_Get_FootPrint
  7498  11F3  0021               	movlb	1	; select bank1
  7499  11F4  00EE               	movwf	_FOOTPRINT^(0+128)
  7500                           
  7501                           ;RDM.c: 84: tmp16=PFM_Read(Flash_DEVICE_LABEL);
  7502  11F5  30C0               	movlw	192
  7503  11F6  00F4               	movwf	PFM_Read@AddrRd
  7504  11F7  301F               	movlw	31
  7505  11F8  00F5               	movwf	PFM_Read@AddrRd+1
  7506  11F9  220C  3190         	fcall	_PFM_Read
  7507                           
  7508                           ;RDM.c: 87: if(tmp16==0x3fff){
  7509  11FB  26E0  3190         	fcall	PL50	;call to abstracted procedure
  7510  11FD  1903               	skipnz
  7511  11FE  064F               	xorwf	(_tmp16+1)^(0+128),w
  7512  11FF  1903               	btfsc	3,2
  7513  1200  0008               	return
  7514                           
  7515                           ;RDM.c: 90: DEVICE_LABEL_SIZE=PFM_Read_String(Flash_DEVICE_LABEL,&DEVICE_LABEL[0]);
  7516  1201  30C0               	movlw	192
  7517  1202  0020               	movlb	0	; select bank0
  7518  1203  00A0               	movwf	PFM_Read_String@AddrRdStr
  7519  1204  301F               	movlw	31
  7520  1205  00A1               	movwf	PFM_Read_String@AddrRdStr+1
  7521  1206  3020               	movlw	(low (_DEVICE_LABEL| (0+512)))& (0+255)
  7522  1207  00A2               	movwf	PFM_Read_String@dataptr
  7523  1208  200B               	fcall	_PFM_Read_String
  7524  1209  0021               	movlb	1	; select bank1
  7525  120A  00EB               	movwf	_DEVICE_LABEL_SIZE^(0+128)
  7526  120B  0008               	return
  7527  120C                     __end_of_RDM_init:	
  7528  120C                     __ptext28:	
  7529 ;; *************** function _PFM_Read *****************
  7530 ;; Defined at:
  7531 ;;		line 14 in file "PFM.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  AddrRd          2    4[COMMON] unsigned int 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  2    4[COMMON] unsigned int 
  7538 ;; Registers used:
  7539 ;;		wreg
  7540 ;; Tracked objects:
  7541 ;;		On entry : 1C/3
  7542 ;;		On exit  : 1F/3
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;Total ram usage:        2 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    2
  7552 ;; This function calls:
  7553 ;;		Nothing
  7554 ;; This function is called by:
  7555 ;;		_RDM_init
  7556 ;;		_PFM_Write
  7557 ;;		_PFM_Read_String
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           
  7562                           ;psect for function _PFM_Read
  7563  120C                     _PFM_Read:	
  7564                           
  7565                           ;PFM.c: 16: PMADR=AddrRd;
  7566                           
  7567                           ;incstack = 0
  7568                           ; Regs used in _PFM_Read: [wreg]
  7569  120C  0875               	movf	PFM_Read@AddrRd+1,w
  7570  120D  0023               	movlb	3	; select bank3
  7571  120E  0092               	movwf	18	;volatile
  7572  120F  0874               	movf	PFM_Read@AddrRd,w
  7573  1210  0091               	movwf	17	;volatile
  7574                           
  7575                           ;PFM.c: 17: RD=1;
  7576  1211  1415               	bsf	21,0	;volatile
  7577  1212  0000               	nop	;# 
  7578  1213  0000               	nop	;# 
  7579                           
  7580                           ;PFM.c: 20: return PMDAT;
  7581  1214  0023               	movlb	3	; select bank3
  7582  1215  0814               	movf	20,w	;volatile
  7583  1216  00F5               	movwf	?_PFM_Read+1
  7584  1217  0813               	movf	19,w	;volatile
  7585  1218  00F4               	movwf	?_PFM_Read
  7586  1219  0008               	return
  7587  121A                     __end_of_PFM_Read:	
  7588  121A                     __ptext25:	
  7589 ;; *************** function ___bmul *****************
  7590 ;; Defined at:
  7591 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;  multiplier      1    wreg     unsigned char 
  7594 ;;  multiplicand    1    4[COMMON] unsigned char 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  multiplier      1    1[BANK0 ] unsigned char 
  7597 ;;  product         1    0[BANK0 ] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      unsigned char 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0
  7602 ;; Tracked objects:
  7603 ;;		On entry : 1D/2
  7604 ;;		On exit  : 1F/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        3 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    2
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_RDM_init
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function ___bmul
  7623  121A                     ___bmul:	
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7627                           ;___bmul@multiplier stored from wreg
  7628  121A  0020               	movlb	0	; select bank0
  7629  121B  00A1               	movwf	___bmul@multiplier
  7630  121C  01A0               	clrf	___bmul@product
  7631  121D                     l5731:	
  7632  121D  0874               	movf	___bmul@multiplicand,w
  7633  121E  1821               	btfsc	___bmul@multiplier,0
  7634  121F  07A0               	addwf	___bmul@product,f
  7635  1220  35F4               	lslf	___bmul@multiplicand,f
  7636  1221  36A1               	lsrf	___bmul@multiplier,f
  7637  1222  0821               	movf	___bmul@multiplier,w
  7638  1223  1D03               	btfss	3,2
  7639  1224  2A1D               	goto	l5731
  7640  1225  0820               	movf	___bmul@product,w
  7641  1226  0008               	return
  7642  1227                     __end_of___bmul:	
  7643  1227                     __ptext26:	
  7644 ;; *************** function _PFM_Write *****************
  7645 ;; Defined at:
  7646 ;;		line 36 in file "PFM.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  AddrWrt         2    0[BANK0 ] unsigned int 
  7649 ;;  Data            2    2[BANK0 ] unsigned int 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  1    wreg      void 
  7654 ;; Registers used:
  7655 ;;		wreg, pclath, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 1F/0
  7658 ;;		On exit  : 1F/3
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;Total ram usage:        4 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    3
  7668 ;; This function calls:
  7669 ;;		_PFM_Read
  7670 ;; This function is called by:
  7671 ;;		_RDM_init
  7672 ;;		_RDM_SET_CC
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           
  7677                           ;psect for function _PFM_Write
  7678  1227                     _PFM_Write:	
  7679  1227                     l1309:	
  7680                           ;incstack = 0
  7681                           ; Regs used in _PFM_Write: [wreg+pclath+cstack]
  7682                           ;PFM.c: 37: do{
  7683                           
  7684                           
  7685                           ;PFM.c: 38: GIE=0;
  7686  1227  138B               	bcf	11,7	;volatile
  7687                           
  7688                           ;PFM.c: 39: CFGS=0;
  7689  1228  0023               	movlb	3	; select bank3
  7690  1229  1315               	bcf	21,6	;volatile
  7691                           
  7692                           ;PFM.c: 40: PMADR=AddrWrt;
  7693  122A  0020               	movlb	0	; select bank0
  7694  122B  0821               	movf	PFM_Write@AddrWrt+1,w
  7695  122C  0023               	movlb	3	; select bank3
  7696  122D  0092               	movwf	18	;volatile
  7697  122E  0020               	movlb	0	; select bank0
  7698  122F  0820               	movf	PFM_Write@AddrWrt,w
  7699                           
  7700                           ;PFM.c: 43: FREE = 1;
  7701                           
  7702                           ;PFM.c: 44: WREN = 1;
  7703                           
  7704                           ;PFM.c: 45: PMCON2=0x55;
  7705  1230  277F  3190         	fcall	PL156	;call to abstracted procedure
  7706  1232  0096               	movwf	22	;volsfr
  7707                           
  7708                           ;PFM.c: 46: PMCON2=0xAA;
  7709  1233  30AA               	movlw	170
  7710  1234  0096               	movwf	22	;volsfr
  7711                           
  7712                           ;PFM.c: 47: WR=1;
  7713  1235  1495               	bsf	21,1	;volatile
  7714  1236  0000               	nop	;# 
  7715  1237  0000               	nop	;# 
  7716                           
  7717                           ;PFM.c: 52: FREE = 0;
  7718  1238  0023               	movlb	3	; select bank3
  7719  1239  1215               	bcf	21,4	;volatile
  7720                           
  7721                           ;PFM.c: 53: LWLO = 1;
  7722  123A  1695               	bsf	21,5	;volatile
  7723                           
  7724                           ;PFM.c: 54: PMDAT=Data;
  7725  123B  0020               	movlb	0	; select bank0
  7726  123C  0823               	movf	PFM_Write@Data+1,w
  7727  123D  0023               	movlb	3	; select bank3
  7728  123E  0094               	movwf	20	;volatile
  7729  123F  0020               	movlb	0	; select bank0
  7730  1240  0822               	movf	PFM_Write@Data,w
  7731  1241  0023               	movlb	3	; select bank3
  7732  1242  0093               	movwf	19	;volatile
  7733                           
  7734                           ;PFM.c: 55: LWLO=0;
  7735  1243  1295               	bcf	21,5	;volatile
  7736                           
  7737                           ;PFM.c: 56: PMCON2=0x55;
  7738  1244  3055               	movlw	85
  7739  1245  0096               	movwf	22	;volsfr
  7740                           
  7741                           ;PFM.c: 57: PMCON2=0xAA;
  7742  1246  30AA               	movlw	170
  7743  1247  0096               	movwf	22	;volsfr
  7744                           
  7745                           ;PFM.c: 58: WR=1;
  7746  1248  1495               	bsf	21,1	;volatile
  7747  1249  0000               	nop	;# 
  7748  124A  0000               	nop	;# 
  7749                           
  7750                           ;PFM.c: 62: }while(PFM_Read(AddrWrt)!=Data);
  7751  124B  0020               	movlb	0	; select bank0
  7752  124C  0821               	movf	PFM_Write@AddrWrt+1,w
  7753  124D  00F5               	movwf	PFM_Read@AddrRd+1
  7754  124E  0820               	movf	PFM_Write@AddrWrt,w
  7755  124F  00F4               	movwf	PFM_Read@AddrRd
  7756  1250  220C  3190         	fcall	_PFM_Read
  7757  1252  0020               	movlb	0	; select bank0
  7758  1253  0823               	movf	PFM_Write@Data+1,w
  7759  1254  0675               	xorwf	?_PFM_Read+1,w
  7760  1255  1D03               	skipz
  7761  1256  2A59               	goto	u3295
  7762  1257  0822               	movf	PFM_Write@Data,w
  7763  1258  0674               	xorwf	?_PFM_Read,w
  7764  1259                     u3295:	
  7765  1259  1D03               	skipz
  7766  125A  2A27               	goto	l1309
  7767                           
  7768                           ;PFM.c: 64: WREN=0;
  7769                           
  7770                           ;PFM.c: 65: GIE=1;
  7771  125B  2F8F               	ljmp	PL168	;call to abstracted procedure
  7772  125C                     __end_of_PFM_Write:	
  7773  125C                     __ptext31:	
  7774 ;; *************** function _Get_FootPrint *****************
  7775 ;; Defined at:
  7776 ;;		line 206 in file "RDM.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  Input_Person    1    wreg     unsigned char 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  Input_Person    1    4[BANK0 ] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      unsigned char 
  7783 ;; Registers used:
  7784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 1F/1
  7787 ;;		On exit  : 1F/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        1 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    3
  7797 ;; This function calls:
  7798 ;;		___wmul
  7799 ;; This function is called by:
  7800 ;;		_RDM_init
  7801 ;;		_RDM_SET_CC
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           
  7806                           ;psect for function _Get_FootPrint
  7807  125C                     _Get_FootPrint:	
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _Get_FootPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7811                           ;Get_FootPrint@Input_Personality stored from wreg
  7812  125C  0020               	movlb	0	; select bank0
  7813  125D  00A4               	movwf	Get_FootPrint@Input_Personality
  7814                           
  7815                           ;RDM.c: 207: return PERSONALITY_DEFINITIONS[Input_Personality-1].footprint;
  7816  125E  00A0               	movwf	___wmul@multiplier
  7817  125F  3005               	movlw	5
  7818  1260  01A1               	clrf	___wmul@multiplier+1
  7819  1261  00A2               	movwf	___wmul@multiplicand
  7820  1262  01A3               	clrf	___wmul@multiplicand+1
  7821  1263  2560  3190         	fcall	___wmul
  7822  1265  2705               	fcall	PL58	;call to abstracted procedure
  7823  1266  0008               	return
  7824  1267                     __end_of_Get_FootPrint:	
  7825  1267                     __ptext11:	
  7826 ;; *************** function _PD_Read_String *****************
  7827 ;; Defined at:
  7828 ;;		line 328 in file "RDM_Read.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;  u8ptr           1    wreg     PTR unsigned char 
  7831 ;;		 -> DEVICE_LABEL(32), 
  7832 ;;  u8len           1    0[BANK0 ] unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  u8ptr           1    1[BANK0 ] PTR unsigned char 
  7835 ;;		 -> DEVICE_LABEL(32), 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      void 
  7838 ;; Registers used:
  7839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : 1F/0
  7842 ;;		On exit  : 1F/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7845 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;Total ram usage:        2 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    3
  7852 ;; This function calls:
  7853 ;;		_PD_Read_u8ptr
  7854 ;; This function is called by:
  7855 ;;		_RDM_SET_CC
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _PD_Read_String
  7861  1267                     _PD_Read_String:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _PD_Read_String: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7865                           ;PD_Read_String@u8ptr stored from wreg
  7866  1267  00A1               	movwf	PD_Read_String@u8ptr
  7867  1268                     l5369:	
  7868                           ;RDM_Read.c: 329: while(ReadCount<u8len){
  7869                           
  7870  1268  0820               	movf	PD_Read_String@u8len,w
  7871  1269  0278               	subwf	_ReadCount,w	;volatile
  7872  126A  1803               	btfsc	3,0
  7873  126B  0008               	return
  7874                           
  7875                           ;RDM_Read.c: 330: *u8ptr=*PD_Read_u8ptr();
  7876  126C  0821               	movf	PD_Read_String@u8ptr,w
  7877  126D  0086               	movwf	6
  7878  126E  3002               	movlw	2	; select bank4/5
  7879  126F  0087               	movwf	7
  7880  1270  2575  3190         	fcall	_PD_Read_u8ptr
  7881  1272  0874               	movf	?_PD_Read_u8ptr,w
  7882  1273  0084               	movwf	4
  7883  1274  0875               	movf	?_PD_Read_u8ptr+1,w
  7884  1275  0085               	movwf	5
  7885  1276  0800               	movf	0,w
  7886  1277  0081               	movwf	1
  7887                           
  7888                           ;RDM_Read.c: 331: u8ptr++;
  7889  1278  0020               	movlb	0	; select bank0
  7890  1279  0AA1               	incf	PD_Read_String@u8ptr,f
  7891  127A  2A68               	goto	l5369
  7892  127B                     __end_of_PD_Read_String:	
  7893  127B                     __ptext10:	
  7894 ;; *************** function _PFM_write_String *****************
  7895 ;; Defined at:
  7896 ;;		line 89 in file "PFM.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  AddrWrtStr      2    0[BANK0 ] unsigned int 
  7899 ;;  u8ptr           1    2[BANK0 ] PTR unsigned char 
  7900 ;;		 -> DEVICE_LABEL(32), 
  7901 ;;  u8len           1    3[BANK0 ] unsigned char 
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;		None
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 1F/0
  7910 ;;		On exit  : 1F/3
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;Total ram usage:        4 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    3
  7920 ;; This function calls:
  7921 ;;		_PFM_Unlock
  7922 ;; This function is called by:
  7923 ;;		_RDM_SET_CC
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function _PFM_write_String
  7929  127B                     _PFM_write_String:	
  7930                           
  7931                           ;PFM.c: 91: GIE=0;
  7932                           
  7933                           ;incstack = 0
  7934                           ; Regs used in _PFM_write_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7935  127B  138B               	bcf	11,7	;volatile
  7936                           
  7937                           ;PFM.c: 92: CFGS=0;
  7938  127C  0023               	movlb	3	; select bank3
  7939  127D  1315               	bcf	21,6	;volatile
  7940                           
  7941                           ;PFM.c: 93: PMADR=AddrWrtStr;
  7942  127E  0020               	movlb	0	; select bank0
  7943  127F  0821               	movf	PFM_write_String@AddrWrtStr+1,w
  7944  1280  0023               	movlb	3	; select bank3
  7945  1281  0092               	movwf	18	;volatile
  7946  1282  0020               	movlb	0	; select bank0
  7947  1283  0820               	movf	PFM_write_String@AddrWrtStr,w
  7948                           
  7949                           ;PFM.c: 95: FREE = 1;
  7950                           
  7951                           ;PFM.c: 96: WREN = 1;
  7952                           
  7953                           ;PFM.c: 97: PMCON2=0x55;
  7954  1284  277F  3190         	fcall	PL156	;call to abstracted procedure
  7955  1286  0096               	movwf	22	;volsfr
  7956                           
  7957                           ;PFM.c: 98: PMCON2=0xAA;
  7958  1287  30AA               	movlw	170
  7959  1288  0096               	movwf	22	;volsfr
  7960                           
  7961                           ;PFM.c: 99: WR=1;
  7962  1289  1495               	bsf	21,1	;volatile
  7963  128A  0000               	nop	;# 
  7964  128B  0000               	nop	;# 
  7965                           
  7966                           ;PFM.c: 103: FREE = 0;
  7967  128C  0023               	movlb	3	; select bank3
  7968  128D  1215               	bcf	21,4	;volatile
  7969                           
  7970                           ;PFM.c: 104: LWLO = 1;
  7971  128E  1695               	bsf	21,5	;volatile
  7972                           
  7973                           ;PFM.c: 106: ReadCount=0;
  7974  128F  01F8               	clrf	_ReadCount	;volatile
  7975  1290  2A99               	goto	l5319
  7976  1291                     l5325:	
  7977                           
  7978                           ;PFM.c: 111: PFM_Unlock();
  7979  1291  257F  3190         	fcall	_PFM_Unlock
  7980                           
  7981                           ;PFM.c: 112: u8ptr++;
  7982  1293  0020               	movlb	0	; select bank0
  7983  1294  0AA2               	incf	PFM_write_String@u8ptr,f
  7984                           
  7985                           ;PFM.c: 113: PMADR++;
  7986  1295  0023               	movlb	3	; select bank3
  7987  1296  0A91               	incf	17,f	;volatile
  7988  1297  1903               	skipnz
  7989  1298  0A92               	incf	18,f	;volatile
  7990  1299                     l5319:	
  7991                           ;PFM.c: 114: }else{
  7992                           
  7993                           
  7994                           ;PFM.c: 108: PMDAT=*u8ptr;
  7995  1299  0020               	movlb	0	; select bank0
  7996  129A  0822               	movf	PFM_write_String@u8ptr,w
  7997  129B  0086               	movwf	6
  7998  129C  3002               	movlw	2	; select bank4/5
  7999  129D  0087               	movwf	7
  8000  129E  0801               	movf	1,w
  8001  129F  0023               	movlb	3	; select bank3
  8002  12A0  0093               	movwf	19	;volatile
  8003  12A1  0194               	clrf	20	;volatile
  8004                           
  8005                           ;PFM.c: 109: ReadCount++;
  8006  12A2  0AF8               	incf	_ReadCount,f	;volatile
  8007                           
  8008                           ;PFM.c: 110: if(ReadCount<u8len){
  8009  12A3  0020               	movlb	0	; select bank0
  8010  12A4  0823               	movf	PFM_write_String@u8len,w
  8011  12A5  0278               	subwf	_ReadCount,w	;volatile
  8012  12A6  1C03               	btfss	3,0
  8013  12A7  2A91               	goto	l5325
  8014                           
  8015                           ;PFM.c: 116: }
  8016                           ;PFM.c: 118: }
  8017                           ;PFM.c: 120: LWLO=0;
  8018  12A8  0023               	movlb	3	; select bank3
  8019  12A9  1295               	bcf	21,5	;volatile
  8020                           
  8021                           ;PFM.c: 121: PFM_Unlock();
  8022  12AA  257F  3190         	fcall	_PFM_Unlock
  8023                           
  8024                           ;PFM.c: 122: WREN=0;
  8025                           
  8026                           ;PFM.c: 123: GIE=1;
  8027  12AC  2F8F               	ljmp	PL168	;call to abstracted procedure
  8028  12AD                     __end_of_PFM_write_String:	
  8029  12AD                     __ptext12:	
  8030 ;; *************** function _RDM_GET_CC *****************
  8031 ;; Defined at:
  8032 ;;		line 15 in file "RDM_Read.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      void 
  8039 ;; Registers used:
  8040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 1C/2
  8043 ;;		On exit  : 1F/2
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        2 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    4
  8053 ;; This function calls:
  8054 ;;		_PD_Read_u16ptr
  8055 ;;		_PD_Read_u8ptr
  8056 ;;		_PD_write_String
  8057 ;;		_PD_write_u16
  8058 ;;		_PD_write_u32
  8059 ;;		_PD_write_u8
  8060 ;;		_RDM_TXSTART
  8061 ;;		___wmul
  8062 ;; This function is called by:
  8063 ;;		_RDM_rx_loop
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _RDM_GET_CC
  8069  12AD                     _RDM_GET_CC:	
  8070  12AD                     l5555:	
  8071                           ;incstack = 0
  8072                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8073                           
  8074                           
  8075                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  8076  12AD  2C6A               	goto	l5667
  8077  12AE                     l5557:	
  8078                           
  8079                           ;RDM_Read.c: 18: PD_write_u8(DMX_Flags.RDM_Identify_Device);
  8080  12AE  0C77               	rrf	_DMX_Flags+1,w	;volatile
  8081  12AF  0020               	movlb	0	; select bank0
  8082  12B0  00B9               	movwf	??_RDM_GET_CC
  8083  12B1  0CB9               	rrf	??_RDM_GET_CC,f
  8084  12B2  0C39               	rrf	??_RDM_GET_CC,w
  8085  12B3  3901               	andlw	1
  8086  12B4  24B3  3190         	fcall	_PD_write_u8
  8087                           
  8088                           ;RDM_Read.c: 19: break;
  8089  12B6  2CB2               	goto	l5669
  8090  12B7                     l5559:	
  8091                           
  8092                           ;RDM_Read.c: 21: PD_write_u16(0x0100);
  8093  12B7  0020               	movlb	0	; select bank0
  8094  12B8  3001               	movlw	1
  8095  12B9  01A4               	clrf	PD_write_u16@u16
  8096  12BA  00A5               	movwf	PD_write_u16@u16+1
  8097  12BB  24C5  3190         	fcall	_PD_write_u16
  8098                           
  8099                           ;RDM_Read.c: 22: PD_write_u16(0x0080);
  8100  12BD  3080               	movlw	128
  8101  12BE  00A4               	movwf	PD_write_u16@u16
  8102  12BF  01A5               	clrf	PD_write_u16@u16+1
  8103  12C0  24C5  3190         	fcall	_PD_write_u16
  8104                           
  8105                           ;RDM_Read.c: 23: PD_write_u16(0x0004);
  8106  12C2  3004               	movlw	4
  8107  12C3  00A4               	movwf	PD_write_u16@u16
  8108  12C4  01A5               	clrf	PD_write_u16@u16+1
  8109  12C5  24C5  3190         	fcall	_PD_write_u16
  8110  12C7  3020               	movlw	32
  8111  12C8  2730  3190         	fcall	PL84	;call to abstracted procedure
  8112  12CA  2516  3190         	fcall	_PD_write_u32
  8113                           
  8114                           ;RDM_Read.c: 25: PD_write_u16(FOOTPRINT);
  8115  12CC  0021               	movlb	1	; select bank1
  8116  12CD  086E               	movf	_FOOTPRINT^(0+128),w
  8117  12CE  0020               	movlb	0	; select bank0
  8118  12CF  00A4               	movwf	PD_write_u16@u16
  8119  12D0  01A5               	clrf	PD_write_u16@u16+1
  8120  12D1  24C5  3190         	fcall	_PD_write_u16
  8121                           
  8122                           ;RDM_Read.c: 26: PD_write_u8(PERSONALITY);
  8123  12D3  0021               	movlb	1	; select bank1
  8124  12D4  0861               	movf	_PERSONALITY^(0+128),w
  8125  12D5  24B3  3190         	fcall	_PD_write_u8
  8126                           
  8127                           ;RDM_Read.c: 27: PD_write_u8(sizeof(PERSONALITY_DEFINITIONS)/5);
  8128  12D7  3006               	movlw	6
  8129  12D8  24B3  3190         	fcall	_PD_write_u8
  8130                           
  8131                           ;RDM_Read.c: 28: PD_write_u16(DMX_Address);
  8132  12DA  2727  3190         	fcall	PL78	;call to abstracted procedure
  8133  12DC  24C5  3190         	fcall	_PD_write_u16
  8134                           
  8135                           ;RDM_Read.c: 29: PD_write_u16(0);
  8136  12DE  01A4               	clrf	PD_write_u16@u16
  8137  12DF  01A5               	clrf	PD_write_u16@u16+1
  8138  12E0  24C5  3190         	fcall	_PD_write_u16
  8139                           
  8140                           ;RDM_Read.c: 30: PD_write_u8(0);
  8141  12E2  3000               	movlw	0
  8142  12E3  24B3  3190         	fcall	_PD_write_u8
  8143                           
  8144                           ;RDM_Read.c: 31: break;
  8145  12E5  2CB2               	goto	l5669
  8146  12E6                     l5561:	
  8147                           
  8148                           ;RDM_Read.c: 33: PD_write_u16(DMX_Address);
  8149  12E6  2727  3190         	fcall	PL78	;call to abstracted procedure
  8150  12E8  24C5  3190         	fcall	_PD_write_u16
  8151                           
  8152                           ;RDM_Read.c: 34: break;
  8153  12EA  2CB2               	goto	l5669
  8154  12EB                     l5563:	
  8155                           
  8156                           ;RDM_Read.c: 36: PD_write_String(&SOFTWARE_VERSION_LABEL[0],sizeof(SOFTWARE_VERSION_LABE
      +                          L));
  8157  12EB  307B               	movlw	low (_SOFTWARE_VERSION_LABEL| (0+32768))
  8158  12EC  0020               	movlb	0	; select bank0
  8159  12ED  00A4               	movwf	PD_write_String@u8ptr
  8160  12EE  309A               	movlw	high (_SOFTWARE_VERSION_LABEL| (0+32768))
  8161  12EF  00A5               	movwf	PD_write_String@u8ptr+1
  8162  12F0  3019               	movlw	25
  8163  12F1  00A6               	movwf	PD_write_String@u8len
  8164  12F2  2505  3190         	fcall	_PD_write_String
  8165                           
  8166                           ;RDM_Read.c: 37: break;
  8167  12F4  2CB2               	goto	l5669
  8168  12F5                     l5565:	
  8169  12F5  3020               	movlw	32
  8170  12F6  0020               	movlb	0	; select bank0
  8171  12F7  2730  3190         	fcall	PL84	;call to abstracted procedure
  8172  12F9  2516  3190         	fcall	_PD_write_u32
  8173                           
  8174                           ;RDM_Read.c: 40: break;
  8175  12FB  2CB2               	goto	l5669
  8176  12FC                     l5567:	
  8177                           
  8178                           ;RDM_Read.c: 42: PD_write_String(&BOOT_SOFTWARE_VERSION_LABEL[0],sizeof(BOOT_SOFTWARE_VE
      +                          RSION_LABEL));
  8179  12FC  305C               	movlw	low (_BOOT_SOFTWARE_VERSION_LABEL| (0+32768))
  8180  12FD  0020               	movlb	0	; select bank0
  8181  12FE  00A4               	movwf	PD_write_String@u8ptr
  8182  12FF  309A               	movlw	high (_BOOT_SOFTWARE_VERSION_LABEL| (0+32768))
  8183  1300  00A5               	movwf	PD_write_String@u8ptr+1
  8184  1301  301F               	movlw	31
  8185  1302  00A6               	movwf	PD_write_String@u8len
  8186  1303  2505  3190         	fcall	_PD_write_String
  8187                           
  8188                           ;RDM_Read.c: 43: break;
  8189  1305  2CB2               	goto	l5669
  8190  1306                     l5569:	
  8191                           
  8192                           ;RDM_Read.c: 46: PD_write_u16(SUPPORTED_PARAMETERS[ReadCount]);
  8193  1306  0878               	movf	_ReadCount,w	;volatile
  8194  1307  0020               	movlb	0	; select bank0
  8195  1308  00B9               	movwf	??_RDM_GET_CC
  8196  1309  301E               	movlw	low (RDM@SUPPORTED_PARAMETERS| (0+32768))
  8197  130A  01BA               	clrf	??_RDM_GET_CC+1
  8198  130B  35B9               	lslf	??_RDM_GET_CC,f
  8199  130C  0DBA               	rlf	??_RDM_GET_CC+1,f
  8200  130D  0739               	addwf	??_RDM_GET_CC,w
  8201  130E  0084               	movwf	4
  8202  130F  309A               	movlw	high (RDM@SUPPORTED_PARAMETERS| (0+32768))
  8203  1310  3D3A               	addwfc	??_RDM_GET_CC+1,w
  8204  1311  0085               	movwf	5
  8205  1312  3F00               	moviw [0]fsr0
  8206  1313  00A4               	movwf	PD_write_u16@u16
  8207  1314  3F01               	moviw [1]fsr0
  8208  1315  00A5               	movwf	PD_write_u16@u16+1
  8209  1316  24C5  3190         	fcall	_PD_write_u16
  8210                           
  8211                           ;RDM_Read.c: 47: ReadCount++;
  8212  1318  0AF8               	incf	_ReadCount,f	;volatile
  8213  1319                     l5573:	
  8214  1319  300C               	movlw	12
  8215  131A  0278               	subwf	_ReadCount,w
  8216  131B  1803               	btfsc	3,0
  8217  131C  2CB2               	goto	l5669
  8218  131D  2B06               	goto	l5569
  8219  131E                     l5575:	
  8220                           
  8221                           ;RDM_Read.c: 51: tmp16=*PD_Read_u8ptr();
  8222  131E  2575  3190         	fcall	_PD_Read_u8ptr
  8223  1320  2719  3190         	fcall	PL68	;call to abstracted procedure
  8224  1322  00CE               	movwf	_tmp16^(0+128)
  8225  1323  01CF               	clrf	(_tmp16+1)^(0+128)
  8226                           
  8227                           ;RDM_Read.c: 52: PD_write_u16(tmp16);
  8228  1324  084F               	movf	(_tmp16+1)^(0+128),w
  8229  1325  275A  3190         	fcall	PL124	;call to abstracted procedure
  8230  1327  24C5  3190         	fcall	_PD_write_u16
  8231                           
  8232                           ;RDM_Read.c: 53: PD_write_u8(0x0001);
  8233  1329  3001               	movlw	1
  8234  132A  24B3  3190         	fcall	_PD_write_u8
  8235                           
  8236                           ;RDM_Read.c: 54: PD_write_u8(0x02);
  8237  132C  3002               	movlw	2
  8238  132D  24B3  3190         	fcall	_PD_write_u8
  8239                           
  8240                           ;RDM_Read.c: 55: PD_write_u8(0x01);
  8241  132F  3001               	movlw	1
  8242  1330  24B3  3190         	fcall	_PD_write_u8
  8243                           
  8244                           ;RDM_Read.c: 56: PD_write_u8(0x00);
  8245  1332  3000               	movlw	0
  8246  1333  24B3  3190         	fcall	_PD_write_u8
  8247                           
  8248                           ;RDM_Read.c: 57: PD_write_u8(0x00);
  8249  1335  3000               	movlw	0
  8250  1336  24B3  3190         	fcall	_PD_write_u8
  8251                           
  8252                           ;RDM_Read.c: 58: PD_write_u8(0x00);
  8253  1338  3000               	movlw	0
  8254  1339  24B3  3190         	fcall	_PD_write_u8
  8255                           
  8256                           ;RDM_Read.c: 59: PD_write_u32(0x00000000);
  8257  133B  2798  3190         	fcall	PL172	;call to abstracted procedure
  8258  133D  2516  3190         	fcall	_PD_write_u32
  8259                           
  8260                           ;RDM_Read.c: 60: PD_write_u32(0xffffffff);
  8261  133F  30FF               	movlw	255
  8262  1340  00A0               	movwf	PD_write_u32@u32
  8263  1341  00A1               	movwf	PD_write_u32@u32+1
  8264  1342  00A2               	movwf	PD_write_u32@u32+2
  8265  1343  00A3               	movwf	PD_write_u32@u32+3
  8266  1344  2516  3190         	fcall	_PD_write_u32
  8267                           
  8268                           ;RDM_Read.c: 61: PD_write_u32(0x00000000);
  8269  1346  2798  3190         	fcall	PL172	;call to abstracted procedure
  8270  1348  2516  3190         	fcall	_PD_write_u32
  8271                           
  8272                           ;RDM_Read.c: 62: break;
  8273  134A  2CB2               	goto	l5669
  8274  134B                     l5577:	
  8275                           
  8276                           ;RDM_Read.c: 64: PD_write_u8(IDENTIFY_MODE);
  8277  134B  0021               	movlb	1	; select bank1
  8278  134C  086C               	movf	_IDENTIFY_MODE^(0+128),w
  8279  134D  24B3  3190         	fcall	_PD_write_u8
  8280                           
  8281                           ;RDM_Read.c: 65: break;
  8282  134F  2CB2               	goto	l5669
  8283  1350                     l5579:	
  8284                           
  8285                           ;RDM_Read.c: 67: PD_write_u8(PERSONALITY);
  8286  1350  0021               	movlb	1	; select bank1
  8287  1351  0861               	movf	_PERSONALITY^(0+128),w
  8288  1352  24B3  3190         	fcall	_PD_write_u8
  8289                           
  8290                           ;RDM_Read.c: 68: PD_write_u8(sizeof(PERSONALITY_DEFINITIONS)/5);
  8291  1354  3006               	movlw	6
  8292  1355  24B3  3190         	fcall	_PD_write_u8
  8293                           
  8294                           ;RDM_Read.c: 69: break;
  8295  1357  2CB2               	goto	l5669
  8296  1358                     l5581:	
  8297                           
  8298                           ;RDM_Read.c: 71: Addr=*PD_Read_u8ptr();
  8299  1358  2575  3190         	fcall	_PD_Read_u8ptr
  8300  135A  0874               	movf	?_PD_Read_u8ptr,w
  8301  135B  0086               	movwf	6
  8302  135C  0875               	movf	?_PD_Read_u8ptr+1,w
  8303  135D  0087               	movwf	7
  8304  135E  0801               	movf	1,w
  8305  135F  0020               	movlb	0	; select bank0
  8306  1360  00EC               	movwf	_Addr
  8307                           
  8308                           ;RDM_Read.c: 72: PD_write_u8(Addr);
  8309  1361  24B3  3190         	fcall	_PD_write_u8
  8310                           
  8311                           ;RDM_Read.c: 73: PD_write_u16(PERSONALITY_DEFINITIONS[Addr-1].footprint);
  8312  1363  2720  3190         	fcall	PL72	;call to abstracted procedure
  8313  1365  2560  3190         	fcall	___wmul
  8314  1367  2705  3190         	fcall	PL58	;call to abstracted procedure
  8315  1369  00A4               	movwf	PD_write_u16@u16
  8316  136A  01A5               	clrf	PD_write_u16@u16+1
  8317  136B  24C5  3190         	fcall	_PD_write_u16
  8318                           
  8319                           ;RDM_Read.c: 74: PD_write_String( PERSONALITY_DEFINITIONS[Addr-1].description , PERSONAL
      +                          ITY_DEFINITIONS[Addr-1].descriptionsize );
  8320  136D  2720  3190         	fcall	PL72	;call to abstracted procedure
  8321  136F  2560  3190         	fcall	___wmul
  8322  1371  0821               	movf	?___wmul+1,w
  8323  1372  0085               	movwf	5
  8324  1373  0820               	movf	?___wmul,w
  8325  1374  0084               	movwf	4
  8326  1375  30FD               	movlw	low ((_PERSONALITY_DEFINITIONS+65533)| (0+32768))
  8327  1376  0784               	addwf	4,f
  8328  1377  3099               	movlw	high ((_PERSONALITY_DEFINITIONS+65533)| (0+32768))
  8329  1378  3D85               	addwfc	5,f
  8330  1379  3F00               	moviw [0]fsr0
  8331  137A  00A4               	movwf	PD_write_String@u8ptr
  8332  137B  3F01               	moviw [1]fsr0
  8333  137C  00A5               	movwf	PD_write_String@u8ptr+1
  8334  137D  2720  3190         	fcall	PL72	;call to abstracted procedure
  8335  137F  2560  3190         	fcall	___wmul
  8336  1381  0821               	movf	?___wmul+1,w
  8337  1382  0085               	movwf	5
  8338  1383  0820               	movf	?___wmul,w
  8339  1384  0084               	movwf	4
  8340  1385  30FF               	movlw	low ((_PERSONALITY_DEFINITIONS+65535)| (0+32768))
  8341  1386  0784               	addwf	4,f
  8342  1387  3099               	movlw	high ((_PERSONALITY_DEFINITIONS+65535)| (0+32768))
  8343  1388  3D85               	addwfc	5,f
  8344  1389  0800               	movf	0,w	;code access
  8345  138A  00A6               	movwf	PD_write_String@u8len
  8346  138B  2505  3190         	fcall	_PD_write_String
  8347                           
  8348                           ;RDM_Read.c: 75: break;
  8349  138D  2CB2               	goto	l5669
  8350  138E                     l5587:	
  8351                           
  8352                           ;RDM_Read.c: 77: PD_write_u16(0x0004);
  8353  138E  3004               	movlw	4
  8354  138F  0020               	movlb	0	; select bank0
  8355  1390  00A4               	movwf	PD_write_u16@u16
  8356  1391  01A5               	clrf	PD_write_u16@u16+1
  8357  1392  24C5  3190         	fcall	_PD_write_u16
  8358                           
  8359                           ;RDM_Read.c: 78: break;
  8360  1394  2CB2               	goto	l5669
  8361  1395                     l5589:	
  8362                           
  8363                           ;RDM_Read.c: 80: PD_write_String(&DEVICE_MODEL_DESCRIPTION[0] , sizeof(DEVICE_MODEL_DESC
      +                          RIPTION));
  8364  1395  30A4               	movlw	low (_DEVICE_MODEL_DESCRIPTION| (0+32768))
  8365  1396  0020               	movlb	0	; select bank0
  8366  1397  00A4               	movwf	PD_write_String@u8ptr
  8367  1398  309A               	movlw	high (_DEVICE_MODEL_DESCRIPTION| (0+32768))
  8368  1399  00A5               	movwf	PD_write_String@u8ptr+1
  8369  139A  300E               	movlw	14
  8370  139B  00A6               	movwf	PD_write_String@u8len
  8371  139C  2505  3190         	fcall	_PD_write_String
  8372                           
  8373                           ;RDM_Read.c: 81: break;
  8374  139E  2CB2               	goto	l5669
  8375  139F                     l5591:	
  8376                           
  8377                           ;RDM_Read.c: 83: PD_write_String(&MANUFACTURER_LABEL[0] , sizeof(MANUFACTURER_LABEL));
  8378  139F  3094               	movlw	low (_MANUFACTURER_LABEL| (0+32768))
  8379  13A0  0020               	movlb	0	; select bank0
  8380  13A1  00A4               	movwf	PD_write_String@u8ptr
  8381  13A2  309A               	movlw	high (_MANUFACTURER_LABEL| (0+32768))
  8382  13A3  00A5               	movwf	PD_write_String@u8ptr+1
  8383  13A4  3010               	movlw	16
  8384  13A5  00A6               	movwf	PD_write_String@u8len
  8385  13A6  2505  3190         	fcall	_PD_write_String
  8386                           
  8387                           ;RDM_Read.c: 84: break;
  8388  13A8  2CB2               	goto	l5669
  8389  13A9                     l5593:	
  8390                           
  8391                           ;RDM_Read.c: 86: PD_write_String(&DEVICE_LABEL[0] , DEVICE_LABEL_SIZE);
  8392  13A9  3020               	movlw	low _DEVICE_LABEL
  8393  13AA  0020               	movlb	0	; select bank0
  8394  13AB  00A4               	movwf	PD_write_String@u8ptr
  8395  13AC  3002               	movlw	high _DEVICE_LABEL
  8396  13AD  00A5               	movwf	PD_write_String@u8ptr+1
  8397  13AE  0021               	movlb	1	; select bank1
  8398  13AF  086B               	movf	_DEVICE_LABEL_SIZE^(0+128),w
  8399  13B0  0020               	movlb	0	; select bank0
  8400  13B1  00A6               	movwf	PD_write_String@u8len
  8401  13B2  2505  3190         	fcall	_PD_write_String
  8402                           
  8403                           ;RDM_Read.c: 87: break;
  8404  13B4  2CB2               	goto	l5669
  8405  13B5                     l5595:	
  8406                           
  8407                           ;RDM_Read.c: 89: if(PERSONALITY<5){
  8408  13B5  3005               	movlw	5
  8409  13B6  0021               	movlb	1	; select bank1
  8410  13B7  0261               	subwf	_PERSONALITY^(0+128),w
  8411  13B8  1C03               	btfss	3,0
  8412  13B9  2BCA               	goto	l5607
  8413  13BA  2BD0               	goto	l5609
  8414  13BB                     l5599:	
  8415                           
  8416                           ;RDM_Read.c: 91: PD_write_u16(ReadCount);
  8417  13BB  2784  3190         	fcall	PL158	;call to abstracted procedure
  8418  13BD  24C5  3190         	fcall	_PD_write_u16
  8419                           
  8420                           ;RDM_Read.c: 92: PD_write_u8(SLOT_TYPE[ReadCount]);
  8421  13BF  0878               	movf	_ReadCount,w	;volatile
  8422  13C0  26E7  3190         	fcall	PL52	;call to abstracted procedure
  8423  13C2  24B3  3190         	fcall	_PD_write_u8
  8424                           
  8425                           ;RDM_Read.c: 93: PD_write_u16(SLOT_LABEL_ID[ReadCount]);
  8426  13C4  0878               	movf	_ReadCount,w	;volatile
  8427  13C5  269E  3190         	fcall	PL10	;call to abstracted procedure
  8428  13C7  24C5  3190         	fcall	_PD_write_u16
  8429                           
  8430                           ;RDM_Read.c: 94: ReadCount++;
  8431  13C9  0AF8               	incf	_ReadCount,f	;volatile
  8432  13CA                     l5607:	
  8433  13CA  0021               	movlb	1	; select bank1
  8434  13CB  0861               	movf	_PERSONALITY^(0+128),w
  8435  13CC  0278               	subwf	_ReadCount,w	;volatile
  8436  13CD  1803               	btfsc	3,0
  8437  13CE  2CB2               	goto	l5669
  8438  13CF  2BBB               	goto	l5599
  8439  13D0                     l5609:	
  8440                           
  8441                           ;RDM_Read.c: 97: ReadCount=4;
  8442  13D0  3004               	movlw	4
  8443  13D1  00F8               	movwf	_ReadCount	;volatile
  8444  13D2                     l1543:	
  8445                           ;RDM_Read.c: 98: while(ReadCount<PERSONALITY){
  8446                           
  8447  13D2  0021               	movlb	1	; select bank1
  8448  13D3  0861               	movf	_PERSONALITY^(0+128),w
  8449  13D4  0278               	subwf	_ReadCount,w	;volatile
  8450  13D5  1803               	btfsc	3,0
  8451  13D6  2CB2               	goto	l5669
  8452                           
  8453                           ;RDM_Read.c: 99: PD_write_u16(ReadCount);
  8454  13D7  2784  3190         	fcall	PL158	;call to abstracted procedure
  8455  13D9  24C5  3190         	fcall	_PD_write_u16
  8456                           
  8457                           ;RDM_Read.c: 100: PD_write_u8(SLOT_TYPE[ReadCount]);
  8458  13DB  0878               	movf	_ReadCount,w	;volatile
  8459  13DC  26E7  3190         	fcall	PL52	;call to abstracted procedure
  8460  13DE  24B3  3190         	fcall	_PD_write_u8
  8461                           
  8462                           ;RDM_Read.c: 101: PD_write_u16(SLOT_LABEL_ID[ReadCount]);
  8463  13E0  0878               	movf	_ReadCount,w	;volatile
  8464  13E1  269E  3190         	fcall	PL10	;call to abstracted procedure
  8465  13E3  24C5  3190         	fcall	_PD_write_u16
  8466                           
  8467                           ;RDM_Read.c: 102: tmp8=ReadCount+1;
  8468                           
  8469                           ;RDM_Read.c: 103: PD_write_u16(tmp8);
  8470  13E5  2779  3190         	fcall	PL148	;call to abstracted procedure
  8471  13E7  24C5  3190         	fcall	_PD_write_u16
  8472                           
  8473                           ;RDM_Read.c: 104: PD_write_u8(SLOT_TYPE[tmp8]);
  8474  13E9  0879               	movf	_tmp8,w
  8475  13EA  26E7  3190         	fcall	PL52	;call to abstracted procedure
  8476  13EC  24B3  3190         	fcall	_PD_write_u8
  8477                           
  8478                           ;RDM_Read.c: 105: PD_write_u16(SLOT_LABEL_ID[tmp8]);
  8479  13EE  0879               	movf	_tmp8,w
  8480  13EF  269E  3190         	fcall	PL10	;call to abstracted procedure
  8481  13F1  24C5  3190         	fcall	_PD_write_u16
  8482                           
  8483                           ;RDM_Read.c: 106: ReadCount++;
  8484  13F3  0AF8               	incf	_ReadCount,f	;volatile
  8485  13F4  2BD2               	goto	l1543
  8486  13F5                     l5627:	
  8487                           
  8488                           ;RDM_Read.c: 111: tmp16=*PD_Read_u16ptr();
  8489  13F5  2632  3190         	fcall	_PD_Read_u16ptr
  8490  13F7  274D  3190         	fcall	PL116	;call to abstracted procedure
  8491  13F9  00CE               	movwf	_tmp16^(0+128)
  8492  13FA  3F41               	moviw [1]fsr1
  8493  13FB  00CF               	movwf	(_tmp16+1)^(0+128)
  8494                           
  8495                           ;RDM_Read.c: 112: PD_write_u16(tmp16);
  8496  13FC  275A  3190         	fcall	PL124	;call to abstracted procedure
  8497  13FE  24C5  3190         	fcall	_PD_write_u16
  8498                           
  8499                           ;RDM_Read.c: 113: if(PERSONALITY<5){
  8500  1400  3005               	movlw	5
  8501  1401  0021               	movlb	1	; select bank1
  8502  1402  0261               	subwf	_PERSONALITY^(0+128),w
  8503                           
  8504                           ;RDM_Read.c: 114: PD_write_String(SLOT_DEFINITIONS[0].description , SLOT_DEFINITIONS[0].
      +                          descriptionsize);
  8505  1403  3046               	movlw	low (_SLOT_DEFINITIONS| (0+32768))
  8506  1404  0084               	movwf	4
  8507  1405  309A               	movlw	high (_SLOT_DEFINITIONS| (0+32768))
  8508  1406  0085               	movwf	5
  8509  1407  1803               	skipnc
  8510  1408  2C19               	goto	L1
  8511  1409  3F00               	moviw [0]fsr0
  8512  140A  26EF  3190         	fcall	PL54	;call to abstracted procedure
  8513  140C  2505  3190         	fcall	_PD_write_String
  8514                           
  8515                           ;RDM_Read.c: 115: PD_write_u8(SLOT[tmp16]);
  8516  140E  26FA  3190         	fcall	PL56	;call to abstracted procedure
  8517  1410  24B3  3190         	fcall	_PD_write_u8
  8518                           
  8519                           ;RDM_Read.c: 116: PD_write_String(SLOT_DEFINITIONS[1].description , SLOT_DEFINITIONS[1].
      +                          descriptionsize);
  8520  1412  2773  3190         	fcall	PL146	;call to abstracted procedure
  8521  1414  270F  3190         	fcall	PL60	;call to abstracted procedure
  8522  1416  2505  3190         	fcall	_PD_write_String
  8523                           
  8524                           ;RDM_Read.c: 117: }else{
  8525  1418  2CB2               	goto	l5669
  8526  1419                     L1:	
  8527                           ;RDM_Read.c: 118: PD_write_String(SLOT_DEFINITIONS[0].description , SLOT_DEFINITIONS[0].
      +                          descriptionsize);
  8528                           
  8529  1419  3F00               	moviw [0]fsr0
  8530  141A  26EF  3190         	fcall	PL54	;call to abstracted procedure
  8531  141C  2505  3190         	fcall	_PD_write_String
  8532                           
  8533                           ;RDM_Read.c: 119: PD_write_u8(SLOT[tmp16]);
  8534  141E  26FA  3190         	fcall	PL56	;call to abstracted procedure
  8535  1420  24B3  3190         	fcall	_PD_write_u8
  8536                           
  8537                           ;RDM_Read.c: 120: if(tmp16%2==0){
  8538  1422  0021               	movlb	1	; select bank1
  8539  1423  184E               	btfsc	_tmp16^(0+128),0
  8540  1424  2C2D               	goto	l5639
  8541                           
  8542                           ;RDM_Read.c: 121: PD_write_String(SLOT_DEFINITIONS[1].description , SLOT_DEFINITIONS[1].
      +                          descriptionsize);
  8543  1425  2773  3190         	fcall	PL146	;call to abstracted procedure
  8544  1427  0020               	movlb	0	; select bank0
  8545  1428  270F  3190         	fcall	PL60	;call to abstracted procedure
  8546  142A  2505  3190         	fcall	_PD_write_String
  8547                           
  8548                           ;RDM_Read.c: 122: }else{
  8549  142C  2CB2               	goto	l5669
  8550  142D                     l5639:	
  8551                           
  8552                           ;RDM_Read.c: 123: PD_write_String(SLOT_DEFINITIONS[2].description , SLOT_DEFINITIONS[2].
      +                          descriptionsize);
  8553  142D  304C               	movlw	low ((_SLOT_DEFINITIONS+6)| (0+32768))
  8554  142E  0084               	movwf	4
  8555  142F  309A               	movlw	high ((_SLOT_DEFINITIONS+6)| (0+32768))
  8556  1430  0085               	movwf	5
  8557  1431  3F00               	moviw [0]fsr0
  8558  1432  0020               	movlb	0	; select bank0
  8559  1433  00A4               	movwf	PD_write_String@u8ptr
  8560  1434  3F01               	moviw [1]fsr0
  8561  1435  00A5               	movwf	PD_write_String@u8ptr+1
  8562  1436  304E               	movlw	low ((_SLOT_DEFINITIONS+8)| (0+32768))
  8563  1437  0084               	movwf	4
  8564  1438  309A               	movlw	high ((_SLOT_DEFINITIONS+8)| (0+32768))
  8565  1439  0085               	movwf	5
  8566  143A  0800               	movf	0,w	;code access
  8567  143B  00A6               	movwf	PD_write_String@u8len
  8568  143C  2505  3190         	fcall	_PD_write_String
  8569  143E  2CB2               	goto	l5669
  8570  143F                     l5641:	
  8571                           
  8572                           ;RDM_Read.c: 128: if(PERSONALITY<5){
  8573  143F  3005               	movlw	5
  8574  1440  0021               	movlb	1	; select bank1
  8575  1441  0261               	subwf	_PERSONALITY^(0+128),w
  8576  1442  1C03               	btfss	3,0
  8577  1443  2C4D               	goto	l5649
  8578  1444  2C53               	goto	l5651
  8579  1445                     l5645:	
  8580                           
  8581                           ;RDM_Read.c: 130: PD_write_u16(ReadCount);
  8582  1445  2784  3190         	fcall	PL158	;call to abstracted procedure
  8583  1447  24C5  3190         	fcall	_PD_write_u16
  8584                           
  8585                           ;RDM_Read.c: 131: PD_write_u8(0);
  8586  1449  3000               	movlw	0
  8587  144A  24B3  3190         	fcall	_PD_write_u8
  8588                           
  8589                           ;RDM_Read.c: 132: ReadCount++;
  8590  144C  0AF8               	incf	_ReadCount,f	;volatile
  8591  144D                     l5649:	
  8592  144D  0021               	movlb	1	; select bank1
  8593  144E  0861               	movf	_PERSONALITY^(0+128),w
  8594  144F  0278               	subwf	_ReadCount,w	;volatile
  8595  1450  1803               	btfsc	3,0
  8596  1451  2CB2               	goto	l5669
  8597  1452  2C45               	goto	l5645
  8598  1453                     l5651:	
  8599                           
  8600                           ;RDM_Read.c: 135: ReadCount=4;
  8601  1453  3004               	movlw	4
  8602  1454  00F8               	movwf	_ReadCount	;volatile
  8603  1455                     l5663:	
  8604                           ;RDM_Read.c: 136: while(ReadCount<PERSONALITY){
  8605                           
  8606  1455  0021               	movlb	1	; select bank1
  8607  1456  0861               	movf	_PERSONALITY^(0+128),w
  8608  1457  0278               	subwf	_ReadCount,w	;volatile
  8609  1458  1803               	btfsc	3,0
  8610  1459  2CB2               	goto	l5669
  8611                           
  8612                           ;RDM_Read.c: 137: PD_write_u16(ReadCount);
  8613  145A  2784  3190         	fcall	PL158	;call to abstracted procedure
  8614  145C  24C5  3190         	fcall	_PD_write_u16
  8615                           
  8616                           ;RDM_Read.c: 138: PD_write_u8(0);
  8617  145E  3000               	movlw	0
  8618  145F  24B3  3190         	fcall	_PD_write_u8
  8619                           
  8620                           ;RDM_Read.c: 139: tmp8=ReadCount+1;
  8621                           
  8622                           ;RDM_Read.c: 140: PD_write_u16(tmp8);
  8623  1461  2779  3190         	fcall	PL148	;call to abstracted procedure
  8624  1463  24C5  3190         	fcall	_PD_write_u16
  8625                           
  8626                           ;RDM_Read.c: 141: PD_write_u8(0);
  8627  1465  3000               	movlw	0
  8628  1466  24B3  3190         	fcall	_PD_write_u8
  8629                           
  8630                           ;RDM_Read.c: 142: ReadCount++;
  8631  1468  0AF8               	incf	_ReadCount,f	;volatile
  8632  1469  2C55               	goto	l5663
  8633  146A                     l5667:	
  8634                           
  8635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  8636                           ; Switch size 1, requested type "space"
  8637                           ; Number of cases is 3, Range of values is 0 to 16
  8638                           ; switch strategies available:
  8639                           ; Name         Instructions Cycles
  8640                           ; simple_byte           10     6 (average)
  8641                           ; direct_byte           40     6 (fixed)
  8642                           ; jumptable            260     6 (fixed)
  8643                           ;	Chosen strategy is simple_byte
  8644  146A  0022               	movlb	2	; select bank2
  8645  146B  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  8646  146C  3A00               	xorlw	0	; case 0
  8647  146D  1903               	skipnz
  8648  146E  2C76               	goto	l6387
  8649  146F  3A01               	xorlw	1	; case 1
  8650  1470  1903               	skipnz
  8651  1471  2C9F               	goto	l6389
  8652  1472  3A11               	xorlw	17	; case 16
  8653  1473  1903               	skipnz
  8654  1474  2CAA               	goto	l6391
  8655  1475  2CB2               	goto	l5669
  8656  1476                     l6387:	
  8657                           
  8658                           ; Switch size 1, requested type "space"
  8659                           ; Number of cases is 13, Range of values is 80 to 240
  8660                           ; switch strategies available:
  8661                           ; Name         Instructions Cycles
  8662                           ; simple_byte           40    21 (average)
  8663                           ; jumptable            263     9 (fixed)
  8664                           ;	Chosen strategy is simple_byte
  8665  1476  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  8666  1477  3A50               	xorlw	80	; case 80
  8667  1478  1903               	skipnz
  8668  1479  2B19               	goto	l5573
  8669  147A  3A01               	xorlw	1	; case 81
  8670  147B  1903               	skipnz
  8671  147C  2B1E               	goto	l5575
  8672  147D  3A31               	xorlw	49	; case 96
  8673  147E  1903               	skipnz
  8674  147F  2AB7               	goto	l5559
  8675  1480  3A10               	xorlw	16	; case 112
  8676  1481  1903               	skipnz
  8677  1482  2B8E               	goto	l5587
  8678  1483  3AF0               	xorlw	240	; case 128
  8679  1484  1903               	skipnz
  8680  1485  2B95               	goto	l5589
  8681  1486  3A01               	xorlw	1	; case 129
  8682  1487  1903               	skipnz
  8683  1488  2B9F               	goto	l5591
  8684  1489  3A03               	xorlw	3	; case 130
  8685  148A  1903               	skipnz
  8686  148B  2BA9               	goto	l5593
  8687  148C  3A42               	xorlw	66	; case 192
  8688  148D  1903               	skipnz
  8689  148E  2AEB               	goto	l5563
  8690  148F  3A01               	xorlw	1	; case 193
  8691  1490  1903               	skipnz
  8692  1491  2AF5               	goto	l5565
  8693  1492  3A03               	xorlw	3	; case 194
  8694  1493  1903               	skipnz
  8695  1494  2AFC               	goto	l5567
  8696  1495  3A22               	xorlw	34	; case 224
  8697  1496  1903               	skipnz
  8698  1497  2B50               	goto	l5579
  8699  1498  3A01               	xorlw	1	; case 225
  8700  1499  1903               	skipnz
  8701  149A  2B58               	goto	l5581
  8702  149B  3A11               	xorlw	17	; case 240
  8703  149C  1903               	skipnz
  8704  149D  2AE6               	goto	l5561
  8705  149E  2CB2               	goto	l5669
  8706  149F                     l6389:	
  8707                           
  8708                           ; Switch size 1, requested type "space"
  8709                           ; Number of cases is 3, Range of values is 32 to 34
  8710                           ; switch strategies available:
  8711                           ; Name         Instructions Cycles
  8712                           ; simple_byte           10     6 (average)
  8713                           ; direct_byte           15     9 (fixed)
  8714                           ; jumptable            263     9 (fixed)
  8715                           ;	Chosen strategy is simple_byte
  8716  149F  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  8717  14A0  3A20               	xorlw	32	; case 32
  8718  14A1  1903               	skipnz
  8719  14A2  2BB5               	goto	l5595
  8720  14A3  3A01               	xorlw	1	; case 33
  8721  14A4  1903               	skipnz
  8722  14A5  2BF5               	goto	l5627
  8723  14A6  3A03               	xorlw	3	; case 34
  8724  14A7  1903               	skipnz
  8725  14A8  2C3F               	goto	l5641
  8726  14A9  2CB2               	goto	l5669
  8727  14AA                     l6391:	
  8728                           
  8729                           ; Switch size 1, requested type "space"
  8730                           ; Number of cases is 2, Range of values is 0 to 64
  8731                           ; switch strategies available:
  8732                           ; Name         Instructions Cycles
  8733                           ; simple_byte            7     4 (average)
  8734                           ; direct_byte          136     6 (fixed)
  8735                           ; jumptable            260     6 (fixed)
  8736                           ;	Chosen strategy is simple_byte
  8737  14AA  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  8738  14AB  3A00               	xorlw	0	; case 0
  8739  14AC  1903               	skipnz
  8740  14AD  2AAE               	goto	l5557
  8741  14AE  3A40               	xorlw	64	; case 64
  8742  14AF  1903               	skipnz
  8743  14B0  2B4B               	goto	l5577
  8744  14B1  2CB2               	goto	l5669
  8745  14B2                     l5669:	
  8746                           
  8747                           ;RDM_Read.c: 147: RDM_TXSTART();
  8748  14B2  2E63               	ljmp	l3867
  8749  14B3                     __end_of_RDM_GET_CC:	
  8750  14B3                     __ptext20:	
  8751 ;; *************** function _PD_write_u8 *****************
  8752 ;; Defined at:
  8753 ;;		line 279 in file "RDM_Read.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  u8              1    wreg     unsigned char 
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;  u8              1    0[BANK0 ] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  1    wreg      void 
  8760 ;; Registers used:
  8761 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8762 ;; Tracked objects:
  8763 ;;		On entry : 1E/0
  8764 ;;		On exit  : 1F/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;Total ram usage:        3 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    2
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_RDM_GET_CC
  8778 ;;		_PD_write_String
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function _PD_write_u8
  8784  14B3                     _PD_write_u8:	
  8785                           
  8786                           ;incstack = 0
  8787                           ; Regs used in _PD_write_u8: [wreg+fsr1l+fsr1h+status,2+status,0]
  8788                           ;PD_write_u8@u8 stored from wreg
  8789  14B3  0020               	movlb	0	; select bank0
  8790  14B4  00A0               	movwf	PD_write_u8@u8
  8791                           
  8792                           ;RDM_Read.c: 280: TX_RDM_Data.PDL++;
  8793  14B5  0022               	movlb	2	; select bank2
  8794  14B6  0ACE               	incf	(_TX_RDM_Data^(0+256)+2),f	;volatile
  8795                           
  8796                           ;RDM_Read.c: 281: PD.u8[(200>>1)-TX_RDM_Data.PDL]=u8;
  8797  14B7  3023               	movlw	35
  8798  14B8  00F5               	movwf	??_PD_write_u8+1
  8799  14B9  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8800  14BA  3C7C               	sublw	124
  8801  14BB  00F4               	movwf	??_PD_write_u8
  8802  14BC  1C03               	skipc
  8803  14BD  03F5               	decf	??_PD_write_u8+1,f
  8804  14BE  0086               	movwf	6
  8805  14BF  0875               	movf	??_PD_write_u8+1,w
  8806  14C0  0087               	movwf	7
  8807  14C1  0020               	movlb	0	; select bank0
  8808  14C2  0820               	movf	PD_write_u8@u8,w
  8809  14C3  0081               	movwf	1
  8810  14C4  0008               	return
  8811  14C5                     __end_of_PD_write_u8:	
  8812  14C5                     __ptext18:	
  8813 ;; *************** function _PD_write_u16 *****************
  8814 ;; Defined at:
  8815 ;;		line 284 in file "RDM_Read.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  u16             2    4[BANK0 ] unsigned int 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  1    wreg      void 
  8822 ;; Registers used:
  8823 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8824 ;; Tracked objects:
  8825 ;;		On entry : 1F/0
  8826 ;;		On exit  : 1F/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;Total ram usage:        7 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    2
  8836 ;; This function calls:
  8837 ;;		Nothing
  8838 ;; This function is called by:
  8839 ;;		_RDM_GET_CC
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _PD_write_u16
  8845  14C5                     _PD_write_u16:	
  8846                           
  8847                           ;RDM_Read.c: 285: TX_RDM_Data.PDL+=2;
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _PD_write_u16: [wreg+fsr1l+fsr1h+status,2+status,0]
  8851  14C5  0022               	movlb	2	; select bank2
  8852  14C6  0ACE               	incf	(_TX_RDM_Data^(0+256)+2),f
  8853  14C7  0ACE               	incf	(_TX_RDM_Data^(0+256)+2),f	;volatile
  8854                           
  8855                           ;RDM_Read.c: 286: if(TX_RDM_Data.PDL%2==0){
  8856  14C8  184E               	btfsc	(_TX_RDM_Data^(0+256)+2),0	;volatile
  8857  14C9  2CE5               	goto	l3839
  8858                           
  8859                           ;RDM_Read.c: 287: PD.u16[((200>>1)>>1)-(TX_RDM_Data.PDL>>1)]=u16;
  8860  14CA  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8861  14CB  0020               	movlb	0	; select bank0
  8862  14CC  00A6               	movwf	??_PD_write_u16
  8863  14CD  36A6               	lsrf	??_PD_write_u16,f
  8864  14CE  01A8               	clrf	??_PD_write_u16+2
  8865  14CF  0826               	movf	??_PD_write_u16,w
  8866  14D0  3C32               	sublw	50
  8867  14D1  00A7               	movwf	??_PD_write_u16+1
  8868  14D2  1C03               	skipc
  8869  14D3  03A8               	decf	??_PD_write_u16+2,f
  8870  14D4  3018               	movlw	24
  8871  14D5  35A7               	lslf	??_PD_write_u16+1,f
  8872  14D6  0DA8               	rlf	??_PD_write_u16+2,f
  8873  14D7  00A9               	movwf	??_PD_write_u16+3
  8874  14D8  3023               	movlw	35
  8875  14D9  00AA               	movwf	??_PD_write_u16+4
  8876  14DA  0827               	movf	??_PD_write_u16+1,w
  8877  14DB  0729               	addwf	??_PD_write_u16+3,w
  8878  14DC  0086               	movwf	6
  8879  14DD  0828               	movf	??_PD_write_u16+2,w
  8880  14DE  3D2A               	addwfc	??_PD_write_u16+4,w
  8881  14DF  0087               	movwf	7
  8882  14E0  0824               	movf	PD_write_u16@u16,w
  8883  14E1  3FC0               	movwi [0]fsr1
  8884  14E2  0825               	movf	PD_write_u16@u16+1,w
  8885  14E3  3FC1               	movwi [1]fsr1
  8886                           
  8887                           ;RDM_Read.c: 288: }else{
  8888  14E4  0008               	return
  8889  14E5                     l3839:	
  8890                           
  8891                           ;RDM_Read.c: 289: PD.u8[(200>>1)-TX_RDM_Data.PDL]=u16;
  8892  14E5  3023               	movlw	35
  8893  14E6  0020               	movlb	0	; select bank0
  8894  14E7  00A7               	movwf	??_PD_write_u16+1
  8895  14E8  0022               	movlb	2	; select bank2
  8896  14E9  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8897  14EA  3C7C               	sublw	124
  8898  14EB  0020               	movlb	0	; select bank0
  8899  14EC  00A6               	movwf	??_PD_write_u16
  8900  14ED  1C03               	skipc
  8901  14EE  03A7               	decf	??_PD_write_u16+1,f
  8902  14EF  0086               	movwf	6
  8903  14F0  0827               	movf	??_PD_write_u16+1,w
  8904  14F1  0087               	movwf	7
  8905  14F2  0824               	movf	PD_write_u16@u16,w
  8906  14F3  0081               	movwf	1
  8907                           
  8908                           ;RDM_Read.c: 290: PD.u8[(200>>1)-TX_RDM_Data.PDL+1]=(u16>>8);
  8909  14F4  0825               	movf	PD_write_u16@u16+1,w
  8910  14F5  00A6               	movwf	??_PD_write_u16
  8911  14F6  3023               	movlw	35
  8912  14F7  00A8               	movwf	??_PD_write_u16+2
  8913  14F8  0022               	movlb	2	; select bank2
  8914  14F9  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8915  14FA  3C7D               	sublw	125
  8916  14FB  0020               	movlb	0	; select bank0
  8917  14FC  00A7               	movwf	??_PD_write_u16+1
  8918  14FD  1C03               	skipc
  8919  14FE  03A8               	decf	??_PD_write_u16+2,f
  8920  14FF  0086               	movwf	6
  8921  1500  0828               	movf	??_PD_write_u16+2,w
  8922  1501  0087               	movwf	7
  8923  1502  0826               	movf	??_PD_write_u16,w
  8924  1503  0081               	movwf	1
  8925  1504  0008               	return
  8926  1505                     __end_of_PD_write_u16:	
  8927  1505                     __ptext19:	
  8928 ;; *************** function _PD_write_String *****************
  8929 ;; Defined at:
  8930 ;;		line 306 in file "RDM_Read.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  u8ptr           2    4[BANK0 ] PTR unsigned char 
  8933 ;;		 -> MANUFACTURER_LABEL(16), DEVICE_MODEL_DESCRIPTION(14), BOOT_SOFTWARE_VERSION_LABEL(31), SOFTWARE_VERSION_LABEL(25
      +), 
  8934 ;;		 -> DEVICE_LABEL(32), SLOT_DESCRIPTION_2(8), SLOT_DESCRIPTION_1(13), SLOT_DESCRIPTION_0(10), 
  8935 ;;		 -> PERSONALITY_6(13), PERSONALITY_5(13), PERSONALITY_4(6), PERSONALITY_3(6), 
  8936 ;;		 -> PERSONALITY_2(6), PERSONALITY_1(6), 
  8937 ;;  u8len           1    6[BANK0 ] unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      void 
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 1F/0
  8946 ;;		On exit  : 1F/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8949 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;Total ram usage:        3 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    3
  8956 ;; This function calls:
  8957 ;;		_PD_write_u8
  8958 ;; This function is called by:
  8959 ;;		_RDM_GET_CC
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _PD_write_String
  8965  1505                     _PD_write_String:	
  8966                           
  8967                           ;RDM_Read.c: 307: tmp8=0;
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _PD_write_String: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8971  1505  01F9               	clrf	_tmp8
  8972  1506                     l5353:	
  8973                           ;RDM_Read.c: 308: while(tmp8<u8len){
  8974                           
  8975  1506  0826               	movf	PD_write_String@u8len,w
  8976  1507  0279               	subwf	_tmp8,w
  8977  1508  1803               	btfsc	3,0
  8978  1509  0008               	return
  8979                           
  8980                           ;RDM_Read.c: 309: PD_write_u8(*u8ptr);
  8981  150A  0824               	movf	PD_write_String@u8ptr,w
  8982  150B  0084               	movwf	4
  8983  150C  0825               	movf	PD_write_String@u8ptr+1,w
  8984  150D  0085               	movwf	5
  8985  150E  0800               	movf	0,w	;code access
  8986  150F  24B3  3190         	fcall	_PD_write_u8
  8987                           
  8988                           ;RDM_Read.c: 310: tmp8++;
  8989  1511  0AF9               	incf	_tmp8,f
  8990                           
  8991                           ;RDM_Read.c: 311: u8ptr++;
  8992  1512  0AA4               	incf	PD_write_String@u8ptr,f
  8993  1513  1903               	skipnz
  8994  1514  0AA5               	incf	PD_write_String@u8ptr+1,f
  8995  1515  2D06               	goto	l5353
  8996  1516                     __end_of_PD_write_String:	
  8997  1516                     __ptext17:	
  8998 ;; *************** function _PD_write_u32 *****************
  8999 ;; Defined at:
  9000 ;;		line 294 in file "RDM_Read.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;  u32             4    0[BANK0 ] unsigned long 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9009 ;; Tracked objects:
  9010 ;;		On entry : 1F/0
  9011 ;;		On exit  : 1F/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9014 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;Total ram usage:        9 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:    2
  9021 ;; This function calls:
  9022 ;;		Nothing
  9023 ;; This function is called by:
  9024 ;;		_RDM_GET_CC
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           
  9029                           ;psect for function _PD_write_u32
  9030  1516                     _PD_write_u32:	
  9031                           
  9032                           ;RDM_Read.c: 295: TX_RDM_Data.PDL+=4;
  9033                           
  9034                           ;incstack = 0
  9035                           ; Regs used in _PD_write_u32: [wreg+fsr1l+fsr1h+status,2+status,0]
  9036  1516  3004               	movlw	4
  9037  1517  0022               	movlb	2	; select bank2
  9038  1518  07CE               	addwf	(_TX_RDM_Data^(0+256)+2),f	;volatile
  9039                           
  9040                           ;RDM_Read.c: 296: if(TX_RDM_Data.PDL%4==0){
  9041  1519  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  9042  151A  3903               	andlw	3
  9043  151B  1D03               	btfss	3,2
  9044  151C  2D3F               	goto	l5343
  9045                           
  9046                           ;RDM_Read.c: 297: PD.u32[((200>>1)>>2)-(TX_RDM_Data.PDL>>2)]=u32;
  9047  151D  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  9048  151E  0020               	movlb	0	; select bank0
  9049  151F  00A4               	movwf	??_PD_write_u32
  9050  1520  36A4               	lsrf	??_PD_write_u32,f
  9051  1521  36A4               	lsrf	??_PD_write_u32,f
  9052  1522  01A6               	clrf	??_PD_write_u32+2
  9053  1523  0824               	movf	??_PD_write_u32,w
  9054  1524  3C19               	sublw	25
  9055  1525  00A5               	movwf	??_PD_write_u32+1
  9056  1526  1C03               	skipc
  9057  1527  03A6               	decf	??_PD_write_u32+2,f
  9058  1528  3018               	movlw	24
  9059  1529  35A5               	lslf	??_PD_write_u32+1,f
  9060  152A  0DA6               	rlf	??_PD_write_u32+2,f
  9061  152B  35A5               	lslf	??_PD_write_u32+1,f
  9062  152C  0DA6               	rlf	??_PD_write_u32+2,f
  9063  152D  00A7               	movwf	??_PD_write_u32+3
  9064  152E  3023               	movlw	35
  9065  152F  00A8               	movwf	??_PD_write_u32+4
  9066  1530  0825               	movf	??_PD_write_u32+1,w
  9067  1531  0727               	addwf	??_PD_write_u32+3,w
  9068  1532  0086               	movwf	6
  9069  1533  0826               	movf	??_PD_write_u32+2,w
  9070  1534  3D28               	addwfc	??_PD_write_u32+4,w
  9071  1535  0087               	movwf	7
  9072  1536  0820               	movf	PD_write_u32@u32,w
  9073  1537  3FC0               	movwi [0]fsr1
  9074  1538  0821               	movf	PD_write_u32@u32+1,w
  9075  1539  3FC1               	movwi [1]fsr1
  9076  153A  0822               	movf	PD_write_u32@u32+2,w
  9077  153B  3FC2               	movwi [2]fsr1
  9078  153C  0823               	movf	PD_write_u32@u32+3,w
  9079  153D  3FC3               	movwi [3]fsr1
  9080                           
  9081                           ;RDM_Read.c: 298: }else{
  9082  153E  0008               	return
  9083  153F                     l5343:	
  9084                           
  9085                           ;RDM_Read.c: 299: PD.u8[(200>>1)-TX_RDM_Data.PDL]=u32;
  9086  153F  3023               	movlw	35
  9087  1540  0020               	movlb	0	; select bank0
  9088  1541  00A5               	movwf	??_PD_write_u32+1
  9089  1542  0022               	movlb	2	; select bank2
  9090  1543  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  9091  1544  3C7C               	sublw	124
  9092  1545  0020               	movlb	0	; select bank0
  9093  1546  00A4               	movwf	??_PD_write_u32
  9094  1547  1C03               	skipc
  9095  1548  03A5               	decf	??_PD_write_u32+1,f
  9096  1549  0086               	movwf	6
  9097  154A  0825               	movf	??_PD_write_u32+1,w
  9098  154B  0087               	movwf	7
  9099  154C  0820               	movf	PD_write_u32@u32,w
  9100  154D  0081               	movwf	1
  9101                           
  9102                           ;RDM_Read.c: 300: PD.u8[(200>>1)-TX_RDM_Data.PDL+1]=(u32>>8);
  9103  154E  0821               	movf	PD_write_u32@u32+1,w
  9104  154F  2740  3190         	fcall	PL96	;call to abstracted procedure
  9105  1551  3C7D               	sublw	125
  9106  1552  26CA  3190         	fcall	PL34	;call to abstracted procedure
  9107                           
  9108                           ;RDM_Read.c: 301: PD.u8[(200>>1)-TX_RDM_Data.PDL+2]=(u32>>16);
  9109  1554  0822               	movf	PD_write_u32@u32+2,w
  9110  1555  2740  3190         	fcall	PL96	;call to abstracted procedure
  9111  1557  3C7E               	sublw	126
  9112  1558  26CA  3190         	fcall	PL34	;call to abstracted procedure
  9113                           
  9114                           ;RDM_Read.c: 302: PD.u8[(200>>1)-TX_RDM_Data.PDL+3]=(u32>>24);
  9115  155A  0823               	movf	PD_write_u32@u32+3,w
  9116  155B  2740  3190         	fcall	PL96	;call to abstracted procedure
  9117  155D  3C7F               	sublw	127
  9118  155E  26CA               	fcall	PL34	;call to abstracted procedure
  9119  155F  0008               	return
  9120  1560                     __end_of_PD_write_u32:	
  9121  1560                     __ptext32:	
  9122 ;; *************** function ___wmul *****************
  9123 ;; Defined at:
  9124 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9127 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  product         2    4[COMMON] unsigned int 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  2    0[BANK0 ] unsigned int 
  9132 ;; Registers used:
  9133 ;;		wreg, status,2, status,0
  9134 ;; Tracked objects:
  9135 ;;		On entry : 1F/0
  9136 ;;		On exit  : 1F/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9139 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;Total ram usage:        6 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    2
  9146 ;; This function calls:
  9147 ;;		Nothing
  9148 ;; This function is called by:
  9149 ;;		_Get_FootPrint
  9150 ;;		_RDM_GET_CC
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function ___wmul
  9156  1560                     ___wmul:	
  9157                           
  9158                           ;incstack = 0
  9159                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9160  1560  01F4               	clrf	___wmul@product
  9161  1561  01F5               	clrf	___wmul@product+1
  9162  1562                     l5243:	
  9163  1562  1C20               	btfss	___wmul@multiplier,0
  9164  1563  2D68               	goto	l5247
  9165  1564  0822               	movf	___wmul@multiplicand,w
  9166  1565  07F4               	addwf	___wmul@product,f
  9167  1566  0823               	movf	___wmul@multiplicand+1,w
  9168  1567  3DF5               	addwfc	___wmul@product+1,f
  9169  1568                     l5247:	
  9170  1568  35A2               	lslf	___wmul@multiplicand,f
  9171  1569  0DA3               	rlf	___wmul@multiplicand+1,f
  9172  156A  36A1               	lsrf	___wmul@multiplier+1,f
  9173  156B  0CA0               	rrf	___wmul@multiplier,f
  9174  156C  0820               	movf	___wmul@multiplier,w
  9175  156D  0421               	iorwf	___wmul@multiplier+1,w
  9176  156E  1D03               	btfss	3,2
  9177  156F  2D62               	goto	l5243
  9178  1570  0875               	movf	___wmul@product+1,w
  9179  1571  00A1               	movwf	?___wmul+1
  9180  1572  0874               	movf	___wmul@product,w
  9181  1573  00A0               	movwf	?___wmul
  9182  1574  0008               	return
  9183  1575                     __end_of___wmul:	
  9184  1575                     __ptext21:	
  9185 ;; *************** function _PD_Read_u8ptr *****************
  9186 ;; Defined at:
  9187 ;;		line 315 in file "RDM_Read.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;		None
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  2    4[COMMON] PTR unsigned char 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0
  9196 ;; Tracked objects:
  9197 ;;		On entry : 1D/2
  9198 ;;		On exit  : 1D/0
  9199 ;;		Unchanged: 1D/0
  9200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9201 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;Total ram usage:        2 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    2
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_RDM_GET_CC
  9212 ;;		_RDM_SET_CC
  9213 ;;		_PD_Read_String
  9214 ;; This function uses a non-reentrant model
  9215 ;;
  9216                           
  9217                           
  9218                           ;psect for function _PD_Read_u8ptr
  9219  1575                     _PD_Read_u8ptr:	
  9220                           
  9221                           ;RDM_Read.c: 316: ReadCount+=1;
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in _PD_Read_u8ptr: [wreg+status,2+status,0]
  9225  1575  0AF8               	incf	_ReadCount,f	;volatile
  9226                           
  9227                           ;RDM_Read.c: 317: return &PD.u8[200-ReadCount];
  9228  1576  3023               	movlw	35
  9229  1577  00F5               	movwf	?_PD_Read_u8ptr+1
  9230  1578  30E0               	movlw	224
  9231  1579  00F4               	movwf	?_PD_Read_u8ptr
  9232  157A  0878               	movf	_ReadCount,w	;volatile
  9233  157B  02F4               	subwf	?_PD_Read_u8ptr,f
  9234  157C  1C03               	skipc
  9235  157D  03F5               	decf	?_PD_Read_u8ptr+1,f
  9236  157E  0008               	return
  9237  157F                     __end_of_PD_Read_u8ptr:	
  9238  157F                     __ptext30:	
  9239 ;; *************** function _PFM_Unlock *****************
  9240 ;; Defined at:
  9241 ;;		line 143 in file "PFM.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      void 
  9248 ;; Registers used:
  9249 ;;		wreg
  9250 ;; Tracked objects:
  9251 ;;		On entry : 1C/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;Total ram usage:        0 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    2
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_PFM_Erase
  9266 ;;		_PFM_write_String
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _PFM_Unlock
  9272  157F                     _PFM_Unlock:	
  9273                           
  9274                           ;PFM.c: 144: PMCON2=0x55;
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _PFM_Unlock: [wreg]
  9278  157F  3055               	movlw	85
  9279  1580  0023               	movlb	3	; select bank3
  9280  1581  0096               	movwf	22	;volsfr
  9281                           
  9282                           ;PFM.c: 145: PMCON2=0xAA;
  9283  1582  30AA               	movlw	170
  9284  1583  0096               	movwf	22	;volsfr
  9285                           
  9286                           ;PFM.c: 146: WR=1;
  9287  1584  1495               	bsf	21,1	;volatile
  9288  1585  0000               	nop	;# 
  9289  1586  0000               	nop	;# 
  9290  1587  0008               	return
  9291  1588                     __end_of_PFM_Unlock:	
  9292  1588                     __ptext5:	
  9293 ;; *************** function _RDM_discovery_CC *****************
  9294 ;; Defined at:
  9295 ;;		line 182 in file "RDM_Read.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 1C/2
  9306 ;;		On exit  : 1C/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:        4 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    4
  9316 ;; This function calls:
  9317 ;;		_PD_Read_u16ptr
  9318 ;;		_PD_Read_u32ptr
  9319 ;;		_RDM_TXSTART
  9320 ;; This function is called by:
  9321 ;;		_RDM_rx_loop
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function _RDM_discovery_CC
  9327  1588                     _RDM_discovery_CC:	
  9328  1588                     l5487:	
  9329                           ;incstack = 0
  9330                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9331                           
  9332                           
  9333                           ;RDM_Read.c: 183: switch (RX_RDM_Data.PID) {
  9334  1588  2E20               	goto	l5547
  9335  1589                     l5489:	
  9336                           
  9337                           ;RDM_Read.c: 185: DMX_Flags.RDMcheckUID_flag = 1;
  9338  1589  0877               	movf	_DMX_Flags+1,w	;volatile
  9339  158A  39FC               	andlw	-4
  9340  158B  3801               	iorlw	1
  9341  158C  00F7               	movwf	_DMX_Flags+1	;volatile
  9342                           
  9343                           ;RDM_Read.c: 186: if (!DMX_Flags.RDMmute) {
  9344  158D  1977               	btfsc	_DMX_Flags+1,2	;volatile
  9345  158E  0008               	return
  9346                           
  9347                           ;RDM_Read.c: 187: DMX_Flags.RDMcheckUID_flag = 1;
  9348  158F  2793  3190         	fcall	PL170	;call to abstracted procedure
  9349                           
  9350                           ;RDM_Read.c: 188: PD_Manu_ptr =PD_Read_u16ptr();
  9351  1591  2632  3190         	fcall	_PD_Read_u16ptr
  9352  1593  2789  3190         	fcall	PL164	;call to abstracted procedure
  9353                           
  9354                           ;RDM_Read.c: 189: PD_ID_ptr = PD_Read_u32ptr();
  9355  1595  2649  3190         	fcall	_PD_Read_u32ptr
  9356  1597  26C4  3190         	fcall	PL30	;call to abstracted procedure
  9357                           
  9358                           ;RDM_Read.c: 191: if (*PD_Manu_ptr <= UID.MANC) {
  9359  1599  26AD  3190         	fcall	PL16	;call to abstracted procedure
  9360  159B  0244               	subwf	((_UID+1)^(0+128)+4),w
  9361  159C  1D03               	skipz
  9362  159D  2DA2               	goto	u3575
  9363  159E  0020               	movlb	0	; select bank0
  9364  159F  0839               	movf	??_RDM_discovery_CC,w
  9365  15A0  0021               	movlb	1	; select bank1
  9366  15A1  0243               	subwf	(_UID^(0+128)+4),w
  9367  15A2                     u3575:	
  9368  15A2  1C03               	skipc
  9369  15A3  2DC7               	goto	l5509
  9370                           
  9371                           ;RDM_Read.c: 192: DMX_Flags.RDMcheckUID_flag++;
  9372  15A4  0877               	movf	_DMX_Flags+1,w	;volatile
  9373  15A5  3903               	andlw	3
  9374  15A6  0020               	movlb	0	; select bank0
  9375                           
  9376                           ;RDM_Read.c: 193: if (*PD_Manu_ptr == UID.MANC && *PD_ID_ptr > UID.ID) {
  9377  15A7  2684  3190         	fcall	PL8	;call to abstracted procedure
  9378  15A9  1D03               	skipz
  9379  15AA  2DC7               	goto	l5509
  9380  15AB  0850               	movf	_PD_ID_ptr^(0+128),w
  9381  15AC  0086               	movwf	6
  9382  15AD  0851               	movf	(_PD_ID_ptr+1)^(0+128),w
  9383  15AE  26B8  3190         	fcall	PL26	;call to abstracted procedure
  9384  15B0  0242               	subwf	(_UID+3)^(0+128),w
  9385  15B1  1D03               	skipz
  9386  15B2  2DC3               	goto	u3595
  9387  15B3  0020               	movlb	0	; select bank0
  9388  15B4  083B               	movf	??_RDM_discovery_CC+2,w
  9389  15B5  0021               	movlb	1	; select bank1
  9390  15B6  0241               	subwf	(_UID+2)^(0+128),w
  9391  15B7  1D03               	skipz
  9392  15B8  2DC3               	goto	u3595
  9393  15B9  0020               	movlb	0	; select bank0
  9394  15BA  083A               	movf	??_RDM_discovery_CC+1,w
  9395  15BB  0021               	movlb	1	; select bank1
  9396  15BC  0240               	subwf	(_UID+1)^(0+128),w
  9397  15BD  1D03               	skipz
  9398  15BE  2DC3               	goto	u3595
  9399  15BF  0020               	movlb	0	; select bank0
  9400  15C0  0839               	movf	??_RDM_discovery_CC,w
  9401  15C1  0021               	movlb	1	; select bank1
  9402  15C2  023F               	subwf	_UID^(0+128),w
  9403  15C3                     u3595:	
  9404  15C3  1803               	skipnc
  9405  15C4  2DC7               	goto	l5509
  9406                           
  9407                           ;RDM_Read.c: 194: DMX_Flags.RDMcheckUID_flag = 0;
  9408  15C5  30FC               	movlw	-4
  9409  15C6  05F7               	andwf	_DMX_Flags+1,f	;volatile
  9410  15C7                     l5509:	
  9411                           
  9412                           ;RDM_Read.c: 195: }
  9413                           ;RDM_Read.c: 196: }
  9414                           ;RDM_Read.c: 197: PD_Manu_ptr = PD_Read_u16ptr();
  9415  15C7  2632  3190         	fcall	_PD_Read_u16ptr
  9416  15C9  2789  3190         	fcall	PL164	;call to abstracted procedure
  9417                           
  9418                           ;RDM_Read.c: 198: PD_ID_ptr = PD_Read_u32ptr();
  9419  15CB  2649  3190         	fcall	_PD_Read_u32ptr
  9420  15CD  26C4  3190         	fcall	PL30	;call to abstracted procedure
  9421                           
  9422                           ;RDM_Read.c: 199: if (*PD_Manu_ptr >= UID.MANC) {
  9423  15CF  26AD  3190         	fcall	PL16	;call to abstracted procedure
  9424  15D1  0844               	movf	((_UID+1)^(0+128)+4),w
  9425  15D2  0020               	movlb	0	; select bank0
  9426  15D3  023A               	subwf	??_RDM_discovery_CC+1,w
  9427  15D4  1D03               	skipz
  9428  15D5  2DDA               	goto	u3605
  9429  15D6  0021               	movlb	1	; select bank1
  9430  15D7  0843               	movf	(_UID^(0+128)+4),w
  9431  15D8  0020               	movlb	0	; select bank0
  9432  15D9  0239               	subwf	??_RDM_discovery_CC,w
  9433  15DA                     u3605:	
  9434  15DA  1C03               	skipc
  9435  15DB  2E00               	goto	l1578
  9436                           
  9437                           ;RDM_Read.c: 200: DMX_Flags.RDMcheckUID_flag++;
  9438  15DC  0877               	movf	_DMX_Flags+1,w	;volatile
  9439  15DD  3903               	andlw	3
  9440                           
  9441                           ;RDM_Read.c: 201: if (*PD_Manu_ptr == UID.MANC && *PD_ID_ptr < UID.ID) {
  9442  15DE  2684  3190         	fcall	PL8	;call to abstracted procedure
  9443  15E0  1D03               	skipz
  9444  15E1  2E00               	goto	l1578
  9445  15E2  0850               	movf	_PD_ID_ptr^(0+128),w
  9446  15E3  0086               	movwf	6
  9447  15E4  0851               	movf	(_PD_ID_ptr+1)^(0+128),w
  9448  15E5  26B8  3190         	fcall	PL26	;call to abstracted procedure
  9449  15E7  0842               	movf	(_UID+3)^(0+128),w
  9450  15E8  0020               	movlb	0	; select bank0
  9451  15E9  023C               	subwf	??_RDM_discovery_CC+3,w
  9452  15EA  1D03               	skipz
  9453  15EB  2DFC               	goto	u3625
  9454  15EC  0021               	movlb	1	; select bank1
  9455  15ED  0841               	movf	(_UID+2)^(0+128),w
  9456  15EE  0020               	movlb	0	; select bank0
  9457  15EF  023B               	subwf	??_RDM_discovery_CC+2,w
  9458  15F0  1D03               	skipz
  9459  15F1  2DFC               	goto	u3625
  9460  15F2  0021               	movlb	1	; select bank1
  9461  15F3  0840               	movf	(_UID+1)^(0+128),w
  9462  15F4  0020               	movlb	0	; select bank0
  9463  15F5  023A               	subwf	??_RDM_discovery_CC+1,w
  9464  15F6  1D03               	skipz
  9465  15F7  2DFC               	goto	u3625
  9466  15F8  0021               	movlb	1	; select bank1
  9467  15F9  083F               	movf	_UID^(0+128),w
  9468  15FA  0020               	movlb	0	; select bank0
  9469  15FB  0239               	subwf	??_RDM_discovery_CC,w
  9470  15FC                     u3625:	
  9471  15FC  1803               	skipnc
  9472  15FD  2E00               	goto	l1578
  9473                           
  9474                           ;RDM_Read.c: 202: DMX_Flags.RDMcheckUID_flag = 0;
  9475  15FE  30FC               	movlw	-4
  9476  15FF  05F7               	andwf	_DMX_Flags+1,f	;volatile
  9477  1600                     l1578:	
  9478                           
  9479                           ;RDM_Read.c: 203: }
  9480                           ;RDM_Read.c: 204: }
  9481                           ;RDM_Read.c: 205: if (DMX_Flags.RDMcheckUID_flag == 3) {
  9482  1600  0877               	movf	_DMX_Flags+1,w	;volatile
  9483  1601  3903               	andlw	3
  9484  1602  3A03               	xorlw	3
  9485  1603  1D03               	skipz
  9486  1604  0008               	return
  9487                           
  9488                           ;RDM_Read.c: 207: LATC3 = 1;
  9489  1605  0022               	movlb	2	; select bank2
  9490  1606  158E               	bsf	14,3	;volatile
  9491                           
  9492                           ;RDM_Read.c: 209: BytePtr= &DISCOVERY_RDM_Data[23];
  9493  1607  30DB               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  9494  1608  0021               	movlb	1	; select bank1
  9495  1609  00E4               	movwf	_BytePtr^(0+128)
  9496                           
  9497                           ;RDM_Read.c: 210: TxCount = 0;
  9498  160A  01D4               	clrf	_TxCount^(0+128)
  9499  160B  01D5               	clrf	(_TxCount+1)^(0+128)
  9500                           
  9501                           ;RDM_Read.c: 211: TxState = TX_DISCOVERY;
  9502  160C  01E3               	clrf	_TxState^(0+128)	;volatile
  9503                           
  9504                           ;RDM_Read.c: 212: RCIE = 0;
  9505  160D  1291               	bcf	17,5	;volatile
  9506                           
  9507                           ;RDM_Read.c: 214: TXEN = 1;
  9508                           
  9509                           ;RDM_Read.c: 216: TMR1 = 0xFFF5;
  9510  160E  2738               	fcall	PL92	;call to abstracted procedure
  9511                           
  9512                           ;RDM_Read.c: 217: TimerState = TIMER_DISC_MAB;
  9513  160F  3005               	movlw	5
  9514  1610  0021               	movlb	1	; select bank1
  9515  1611  00E0               	movwf	_TimerState^(0+128)	;volatile
  9516  1612  0008               	return
  9517  1613                     l1582:	
  9518                           ;RDM_Read.c: 221: case 0x0002:
  9519                           
  9520                           
  9521                           ;RDM_Read.c: 222: DMX_Flags.RDMmute = 1;
  9522  1613  1577               	bsf	_DMX_Flags+1,2	;volatile
  9523                           
  9524                           ;RDM_Read.c: 223: TX_RDM_Data.PDL=2;
  9525  1614  3002               	movlw	2
  9526  1615  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  9527                           
  9528                           ;RDM_Read.c: 224: PD.u16[((200>>1)>>1)-1] = 0;
  9529  1616  307A               	movlw	122
  9530  1617  0086               	movwf	6
  9531  1618  3023               	movlw	35
  9532  1619  0087               	movwf	7
  9533  161A  3000               	movlw	0
  9534  161B  3FC0               	movwi [0]fsr1
  9535  161C  3FC1               	movwi [1]fsr1
  9536  161D                     l5541:	
  9537                           
  9538                           ;RDM_Read.c: 225: RDM_TXSTART();
  9539  161D  2E63               	ljmp	l3867
  9540  161E                     l1583:	
  9541                           ;RDM_Read.c: 227: case 0x0003:
  9542                           
  9543                           ;RDM_Read.c: 226: break;
  9544                           
  9545                           
  9546                           ;RDM_Read.c: 228: DMX_Flags.RDMmute = 0;
  9547  161E  1177               	bcf	_DMX_Flags+1,2	;volatile
  9548  161F  2E1D               	goto	l5541
  9549  1620                     l5547:	
  9550                           
  9551                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9552                           ; Switch size 1, requested type "space"
  9553                           ; Number of cases is 1, Range of values is 0 to 0
  9554                           ; switch strategies available:
  9555                           ; Name         Instructions Cycles
  9556                           ; simple_byte            4     3 (average)
  9557                           ; direct_byte            8     6 (fixed)
  9558                           ; jumptable            260     6 (fixed)
  9559                           ;	Chosen strategy is simple_byte
  9560  1620  0022               	movlb	2	; select bank2
  9561  1621  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  9562  1622  3A00               	xorlw	0	; case 0
  9563  1623  1903               	skipnz
  9564  1624  2E26               	goto	l6381
  9565  1625  2E31               	goto	l1585
  9566  1626                     l6381:	
  9567                           
  9568                           ; Switch size 1, requested type "space"
  9569                           ; Number of cases is 3, Range of values is 1 to 3
  9570                           ; switch strategies available:
  9571                           ; Name         Instructions Cycles
  9572                           ; simple_byte           10     6 (average)
  9573                           ; direct_byte           15     9 (fixed)
  9574                           ; jumptable            263     9 (fixed)
  9575                           ;	Chosen strategy is simple_byte
  9576  1626  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  9577  1627  3A01               	xorlw	1	; case 1
  9578  1628  1903               	skipnz
  9579  1629  2D89               	goto	l5489
  9580  162A  3A03               	xorlw	3	; case 2
  9581  162B  1903               	skipnz
  9582  162C  2E13               	goto	l1582
  9583  162D  3A01               	xorlw	1	; case 3
  9584  162E  1903               	skipnz
  9585  162F  2E1E               	goto	l1583
  9586  1630  2E31               	goto	l1585
  9587  1631                     l1585:	
  9588  1631  0008               	return
  9589  1632                     __end_of_RDM_discovery_CC:	
  9590  1632                     __ptext22:	
  9591 ;; *************** function _PD_Read_u16ptr *****************
  9592 ;; Defined at:
  9593 ;;		line 319 in file "RDM_Read.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;		None
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  2    1[COMMON] PTR unsigned int 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0
  9602 ;; Tracked objects:
  9603 ;;		On entry : 1C/2
  9604 ;;		On exit  : 1F/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;Total ram usage:        3 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    2
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_RDM_GET_CC
  9618 ;;		_RDM_SET_CC
  9619 ;;		_RDM_discovery_CC
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _PD_Read_u16ptr
  9625  1632                     _PD_Read_u16ptr:	
  9626                           
  9627                           ;RDM_Read.c: 320: ReadCount+=2;
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _PD_Read_u16ptr: [wreg+status,2+status,0]
  9631  1632  0AF8               	incf	_ReadCount,f
  9632  1633  0AF8               	incf	_ReadCount,f	;volatile
  9633                           
  9634                           ;RDM_Read.c: 321: return &PD.u16[(200>>1)-(ReadCount>>1)];
  9635  1634  3023               	movlw	35
  9636  1635  00F2               	movwf	?_PD_Read_u16ptr+1
  9637  1636  3018               	movlw	24
  9638  1637  00F1               	movwf	?_PD_Read_u16ptr
  9639  1638  0878               	movf	_ReadCount,w	;volatile
  9640  1639  0020               	movlb	0	; select bank0
  9641  163A  00A0               	movwf	??_PD_Read_u16ptr
  9642  163B  36A0               	lsrf	??_PD_Read_u16ptr,f
  9643  163C  01A2               	clrf	??_PD_Read_u16ptr+2
  9644  163D  0820               	movf	??_PD_Read_u16ptr,w
  9645  163E  3C64               	sublw	100
  9646  163F  00A1               	movwf	??_PD_Read_u16ptr+1
  9647  1640  1C03               	skipc
  9648  1641  03A2               	decf	??_PD_Read_u16ptr+2,f
  9649  1642  35A1               	lslf	??_PD_Read_u16ptr+1,f
  9650  1643  0DA2               	rlf	??_PD_Read_u16ptr+2,f
  9651  1644  0821               	movf	??_PD_Read_u16ptr+1,w
  9652  1645  07F1               	addwf	?_PD_Read_u16ptr,f
  9653  1646  0822               	movf	??_PD_Read_u16ptr+2,w
  9654  1647  3DF2               	addwfc	?_PD_Read_u16ptr+1,f
  9655  1648  0008               	return
  9656  1649                     __end_of_PD_Read_u16ptr:	
  9657  1649                     __ptext6:	
  9658 ;; *************** function _PD_Read_u32ptr *****************
  9659 ;; Defined at:
  9660 ;;		line 323 in file "RDM_Read.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  2    1[COMMON] PTR unsigned long 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 1F/1
  9671 ;;		On exit  : 1F/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;Total ram usage:        3 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    2
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_RDM_discovery_CC
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           
  9689                           ;psect for function _PD_Read_u32ptr
  9690  1649                     _PD_Read_u32ptr:	
  9691                           
  9692                           ;RDM_Read.c: 324: ReadCount+=4;
  9693                           
  9694                           ;incstack = 0
  9695                           ; Regs used in _PD_Read_u32ptr: [wreg+status,2+status,0]
  9696  1649  3004               	movlw	4
  9697  164A  07F8               	addwf	_ReadCount,f	;volatile
  9698                           
  9699                           ;RDM_Read.c: 325: return &PD.u32[(200>>2)-(ReadCount>>2)];
  9700  164B  3023               	movlw	35
  9701  164C  00F2               	movwf	?_PD_Read_u32ptr+1
  9702  164D  3018               	movlw	24
  9703  164E  00F1               	movwf	?_PD_Read_u32ptr
  9704  164F  0878               	movf	_ReadCount,w	;volatile
  9705  1650  0020               	movlb	0	; select bank0
  9706  1651  00A0               	movwf	??_PD_Read_u32ptr
  9707  1652  36A0               	lsrf	??_PD_Read_u32ptr,f
  9708  1653  36A0               	lsrf	??_PD_Read_u32ptr,f
  9709  1654  01A2               	clrf	??_PD_Read_u32ptr+2
  9710  1655  0820               	movf	??_PD_Read_u32ptr,w
  9711  1656  3C32               	sublw	50
  9712  1657  00A1               	movwf	??_PD_Read_u32ptr+1
  9713  1658  1C03               	skipc
  9714  1659  03A2               	decf	??_PD_Read_u32ptr+2,f
  9715  165A  35A1               	lslf	??_PD_Read_u32ptr+1,f
  9716  165B  0DA2               	rlf	??_PD_Read_u32ptr+2,f
  9717  165C  35A1               	lslf	??_PD_Read_u32ptr+1,f
  9718  165D  0DA2               	rlf	??_PD_Read_u32ptr+2,f
  9719  165E  0821               	movf	??_PD_Read_u32ptr+1,w
  9720  165F  07F1               	addwf	?_PD_Read_u32ptr,f
  9721  1660  0822               	movf	??_PD_Read_u32ptr+2,w
  9722  1661  3DF2               	addwfc	?_PD_Read_u32ptr+1,f
  9723  1662  0008               	return
  9724  1663                     __end_of_PD_Read_u32ptr:	
  9725  1663                     __ptext13:	
  9726 ;; *************** function _RDM_TXSTART *****************
  9727 ;; Defined at:
  9728 ;;		line 238 in file "RDM_Read.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;		None
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  1    wreg      void 
  9735 ;; Registers used:
  9736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9737 ;; Tracked objects:
  9738 ;;		On entry : 1C/2
  9739 ;;		On exit  : 1F/2
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;Total ram usage:        1 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    3
  9749 ;; This function calls:
  9750 ;;		_RDM_get_checkSum
  9751 ;;		_RDM_tx_TimerBreak
  9752 ;;		_TX_RDM_Response_Set
  9753 ;; This function is called by:
  9754 ;;		_RDM_GET_CC
  9755 ;;		_RDM_SET_CC
  9756 ;;		_RDM_discovery_CC
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           
  9761                           ;psect for function _RDM_TXSTART
  9762  1663                     _RDM_TXSTART:	
  9763  1663                     l3867:	
  9764                           ;incstack = 0
  9765                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9766                           
  9767                           
  9768                           ;RDM_Read.c: 240: TX_RDM_Response_Set();
  9769  1663  27D6  3190         	fcall	_TX_RDM_Response_Set
  9770                           
  9771                           ;RDM_Read.c: 241: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,(200>>1));
  9772  1665  304C               	movlw	low _TX_RDM_Data
  9773  1666  0086               	movwf	6
  9774  1667  3001               	movlw	high _TX_RDM_Data
  9775  1668  2754  3190         	fcall	PL122	;call to abstracted procedure
  9776  166A  00F4               	movwf	??_RDM_TXSTART
  9777  166B                     u1810:	
  9778  166B  0016               	moviw fsr1++
  9779  166C  001A               	movwi fsr0++
  9780  166D  0BF4               	decfsz	??_RDM_TXSTART,f
  9781  166E  2E6B               	goto	u1810
  9782  166F  3064               	movlw	100
  9783  1670  0020               	movlb	0	; select bank0
  9784  1671  00B8               	movwf	RDM_get_checkSum@len
  9785  1672  27A7  3190         	fcall	_RDM_get_checkSum
  9786  1674  0821               	movf	?_RDM_get_checkSum+1,w
  9787  1675  0022               	movlb	2	; select bank2
  9788  1676  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  9789  1677  0020               	movlb	0	; select bank0
  9790  1678  0820               	movf	?_RDM_get_checkSum,w
  9791  1679  0022               	movlb	2	; select bank2
  9792  167A  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  9793                           
  9794                           ;RDM_Read.c: 242: TxState = TX_START;
  9795  167B  3001               	movlw	1
  9796  167C  0021               	movlb	1	; select bank1
  9797  167D  00E3               	movwf	_TxState^(0+128)	;volatile
  9798                           
  9799                           ;RDM_Read.c: 243: RDM_tx_TimerBreak();
  9800  167E  2FF5               	ljmp	l3677
  9801  167F                     __end_of_RDM_TXSTART:	
  9802  167F                     __ptext23:	
  9803 ;; *************** function _PD_init *****************
  9804 ;; Defined at:
  9805 ;;		line 273 in file "RDM_Read.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;		None
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		status,2
  9814 ;; Tracked objects:
  9815 ;;		On entry : 1D/2
  9816 ;;		On exit  : 1F/2
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;Total ram usage:        0 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    2
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_RDM_rx_loop
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _PD_init
  9835  167F                     _PD_init:	
  9836                           
  9837                           ;RDM_Read.c: 274: TX_RDM_Data.PDL=0x0;
  9838                           
  9839                           ;incstack = 0
  9840                           ; Regs used in _PD_init: [status,2]
  9841  167F  0022               	movlb	2	; select bank2
  9842  1680  01CE               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  9843                           
  9844                           ;RDM_Read.c: 275: ReadCount=0;
  9845  1681  01F8               	clrf	_ReadCount	;volatile
  9846                           
  9847                           ;RDM_Read.c: 276: tmp8=0;
  9848  1682  01F9               	clrf	_tmp8
  9849  1683  0008               	return
  9850  1684                     __end_of_PD_init:	
  9851  1684                     PL8:	
  9852  1684  00B9               	movwf	??_RDM_discovery_CC
  9853  1685  0AB9               	incf	??_RDM_discovery_CC,f
  9854  1686  0877               	movf	_DMX_Flags+1,w	;volatile
  9855  1687  0639               	xorwf	??_RDM_discovery_CC,w
  9856  1688  39FC               	andlw	-4
  9857  1689  0639               	xorwf	??_RDM_discovery_CC,w
  9858  168A  00F7               	movwf	_DMX_Flags+1	;volatile
  9859  168B  0021               	movlb	1	; select bank1
  9860  168C  0852               	movf	_PD_Manu_ptr^(0+128),w
  9861  168D  0086               	movwf	6
  9862  168E  0853               	movf	(_PD_Manu_ptr+1)^(0+128),w
  9863  168F  0087               	movwf	7
  9864  1690  3F40               	moviw [0]fsr1
  9865  1691  0020               	movlb	0	; select bank0
  9866  1692  00B9               	movwf	??_RDM_discovery_CC
  9867  1693  3F41               	moviw [1]fsr1
  9868  1694  00BA               	movwf	??_RDM_discovery_CC+1
  9869  1695  0021               	movlb	1	; select bank1
  9870  1696  0644               	xorwf	((_UID+1)^(0+128)+4),w
  9871  1697  1D03               	skipz
  9872  1698  0008               	return
  9873  1699  0020               	movlb	0	; select bank0
  9874  169A  0839               	movf	??_RDM_discovery_CC,w
  9875  169B  0021               	movlb	1	; select bank1
  9876  169C  0643               	xorwf	(_UID^(0+128)+4),w
  9877  169D  0008               	return
  9878  169E                     __end_ofPL8:	
  9879  169E                     PL10:	
  9880  169E  00B9               	movwf	??_RDM_GET_CC
  9881  169F  3036               	movlw	low (_SLOT_LABEL_ID| (0+32768))
  9882  16A0  01BA               	clrf	??_RDM_GET_CC+1
  9883  16A1  35B9               	lslf	??_RDM_GET_CC,f
  9884  16A2  0DBA               	rlf	??_RDM_GET_CC+1,f
  9885  16A3  0739               	addwf	??_RDM_GET_CC,w
  9886  16A4  0084               	movwf	4
  9887  16A5  309A               	movlw	high (_SLOT_LABEL_ID| (0+32768))
  9888  16A6  3D3A               	addwfc	??_RDM_GET_CC+1,w
  9889  16A7  0085               	movwf	5
  9890  16A8  3F00               	moviw [0]fsr0
  9891  16A9  00A4               	movwf	PD_write_u16@u16
  9892  16AA  3F01               	moviw [1]fsr0
  9893  16AB  00A5               	movwf	PD_write_u16@u16+1
  9894  16AC  0008               	return
  9895  16AD                     __end_ofPL10:	
  9896  16AD                     PL16:	
  9897  16AD  0852               	movf	_PD_Manu_ptr^(0+128),w
  9898  16AE  0086               	movwf	6
  9899  16AF  0853               	movf	(_PD_Manu_ptr+1)^(0+128),w
  9900  16B0  0087               	movwf	7
  9901  16B1  3F40               	moviw [0]fsr1
  9902  16B2  0020               	movlb	0	; select bank0
  9903  16B3  00B9               	movwf	??_RDM_discovery_CC
  9904  16B4  3F41               	moviw [1]fsr1
  9905  16B5  00BA               	movwf	??_RDM_discovery_CC+1
  9906  16B6  0021               	movlb	1	; select bank1
  9907  16B7  0008               	return
  9908  16B8                     __end_ofPL16:	
  9909  16B8                     PL26:	
  9910  16B8  0087               	movwf	7
  9911  16B9  3F40               	moviw [0]fsr1
  9912  16BA  0020               	movlb	0	; select bank0
  9913  16BB  00B9               	movwf	??_RDM_discovery_CC
  9914  16BC  3F41               	moviw [1]fsr1
  9915  16BD  00BA               	movwf	??_RDM_discovery_CC+1
  9916  16BE  3F42               	moviw [2]fsr1
  9917  16BF  00BB               	movwf	??_RDM_discovery_CC+2
  9918  16C0  3F43               	moviw [3]fsr1
  9919  16C1  00BC               	movwf	??_RDM_discovery_CC+3
  9920  16C2  0021               	movlb	1	; select bank1
  9921  16C3  0008               	return
  9922  16C4                     __end_ofPL26:	
  9923  16C4                     PL30:	
  9924  16C4  0872               	movf	?_PD_Read_u32ptr+1,w
  9925  16C5  0021               	movlb	1	; select bank1
  9926  16C6  00D1               	movwf	(_PD_ID_ptr+1)^(0+128)
  9927  16C7  0871               	movf	?_PD_Read_u32ptr,w
  9928  16C8  00D0               	movwf	_PD_ID_ptr^(0+128)
  9929  16C9  0008               	return
  9930  16CA                     __end_ofPL30:	
  9931  16CA                     PL34:	
  9932  16CA  0020               	movlb	0	; select bank0
  9933  16CB  00A5               	movwf	??_PD_write_u32+1
  9934  16CC  1C03               	skipc
  9935  16CD  03A6               	decf	??_PD_write_u32+2,f
  9936  16CE  0086               	movwf	6
  9937  16CF  0826               	movf	??_PD_write_u32+2,w
  9938  16D0  0087               	movwf	7
  9939  16D1  0824               	movf	??_PD_write_u32,w
  9940  16D2  0081               	movwf	1
  9941  16D3  0008               	return
  9942  16D4                     __end_ofPL34:	
  9943  16D4                     PL44:	
  9944  16D4  0086               	movwf	6
  9945  16D5  3001               	movlw	1	; select bank3/4
  9946  16D6  0087               	movwf	7
  9947  16D7  30C4               	movlw	(low ((_UID| 0+5)))& (0+255)
  9948  16D8  00A5               	movwf	??_RDM_init
  9949  16D9  0879               	movf	_tmp8,w
  9950  16DA  02A5               	subwf	??_RDM_init,f
  9951  16DB  0825               	movf	??_RDM_init,w
  9952  16DC  0084               	movwf	4
  9953  16DD  0185               	clrf	5
  9954  16DE  0800               	movf	0,w
  9955  16DF  0008               	return
  9956  16E0                     __end_ofPL44:	
  9957  16E0                     PL50:	
  9958  16E0  0875               	movf	?_PFM_Read+1,w
  9959  16E1  0021               	movlb	1	; select bank1
  9960  16E2  00CF               	movwf	(_tmp16+1)^(0+128)
  9961  16E3  0874               	movf	?_PFM_Read,w
  9962  16E4  00CE               	movwf	_tmp16^(0+128)
  9963  16E5  0A4E               	incf	_tmp16^(0+128),w
  9964  16E6  343F               	retlw	63
  9965  16E7                     __end_ofPL50:	
  9966  16E7                     PL52:	
  9967  16E7  3E4F               	addlw	low (_SLOT_TYPE| (0+32768))
  9968  16E8  0084               	movwf	4
  9969  16E9  309A               	movlw	high (_SLOT_TYPE| (0+32768))
  9970  16EA  1803               	skipnc
  9971  16EB  3E01               	addlw	1
  9972  16EC  0085               	movwf	5
  9973  16ED  0800               	movf	0,w	;code access
  9974  16EE  0008               	return
  9975  16EF                     __end_ofPL52:	
  9976  16EF                     PL54:	
  9977  16EF  0020               	movlb	0	; select bank0
  9978  16F0  00A4               	movwf	PD_write_String@u8ptr
  9979  16F1  3F01               	moviw [1]fsr0
  9980  16F2  00A5               	movwf	PD_write_String@u8ptr+1
  9981  16F3  3048               	movlw	low ((_SLOT_DEFINITIONS+2)| (0+32768))
  9982  16F4  0084               	movwf	4
  9983  16F5  309A               	movlw	high ((_SLOT_DEFINITIONS+2)| (0+32768))
  9984  16F6  0085               	movwf	5
  9985  16F7  0800               	movf	0,w	;code access
  9986  16F8  00A6               	movwf	PD_write_String@u8len
  9987  16F9  0008               	return
  9988  16FA                     __end_ofPL54:	
  9989  16FA                     PL56:	
  9990  16FA  0021               	movlb	1	; select bank1
  9991  16FB  084F               	movf	(_tmp16+1)^(0+128),w
  9992  16FC  0085               	movwf	5
  9993  16FD  084E               	movf	_tmp16^(0+128),w
  9994  16FE  0084               	movwf	4
  9995  16FF  3057               	movlw	low (_SLOT| (0+32768))
  9996  1700  0784               	addwf	4,f
  9997  1701  309A               	movlw	high (_SLOT| (0+32768))
  9998  1702  3D85               	addwfc	5,f
  9999  1703  0800               	movf	0,w	;code access
 10000  1704  0008               	return
 10001  1705                     __end_ofPL56:	
 10002  1705                     PL58:	
 10003  1705  0821               	movf	?___wmul+1,w
 10004  1706  0085               	movwf	5
 10005  1707  0820               	movf	?___wmul,w
 10006  1708  0084               	movwf	4
 10007  1709  30FC               	movlw	low ((_PERSONALITY_DEFINITIONS+65532)| (0+32768))
 10008  170A  0784               	addwf	4,f
 10009  170B  3099               	movlw	high ((_PERSONALITY_DEFINITIONS+65532)| (0+32768))
 10010  170C  3D85               	addwfc	5,f
 10011  170D  0800               	movf	0,w	;code access
 10012  170E  0008               	return
 10013  170F                     __end_ofPL58:	
 10014  170F                     PL60:	
 10015  170F  00A4               	movwf	PD_write_String@u8ptr
 10016  1710  3F01               	moviw [1]fsr0
 10017  1711  00A5               	movwf	PD_write_String@u8ptr+1
 10018  1712  304B               	movlw	low ((_SLOT_DEFINITIONS+5)| (0+32768))
 10019  1713  0084               	movwf	4
 10020  1714  309A               	movlw	high ((_SLOT_DEFINITIONS+5)| (0+32768))
 10021  1715  0085               	movwf	5
 10022  1716  0800               	movf	0,w	;code access
 10023  1717  00A6               	movwf	PD_write_String@u8len
 10024  1718  0008               	return
 10025  1719                     __end_ofPL60:	
 10026  1719                     PL68:	
 10027  1719  0874               	movf	?_PD_Read_u8ptr,w
 10028  171A  0086               	movwf	6
 10029  171B  0875               	movf	?_PD_Read_u8ptr+1,w
 10030  171C  0087               	movwf	7
 10031  171D  0801               	movf	1,w
 10032  171E  0021               	movlb	1	; select bank1
 10033  171F  0008               	return
 10034  1720                     __end_ofPL68:	
 10035  1720                     PL72:	
 10036  1720  086C               	movf	_Addr,w
 10037  1721  00A0               	movwf	___wmul@multiplier
 10038  1722  3005               	movlw	5
 10039  1723  01A1               	clrf	___wmul@multiplier+1
 10040  1724  00A2               	movwf	___wmul@multiplicand
 10041  1725  01A3               	clrf	___wmul@multiplicand+1
 10042  1726  0008               	return
 10043  1727                     __end_ofPL72:	
 10044  1727                     PL78:	
 10045  1727  0021               	movlb	1	; select bank1
 10046  1728  085B               	movf	(_DMX_Address+1)^(0+128),w
 10047  1729  0020               	movlb	0	; select bank0
 10048  172A  00A5               	movwf	PD_write_u16@u16+1
 10049  172B  0021               	movlb	1	; select bank1
 10050  172C  085A               	movf	_DMX_Address^(0+128),w
 10051  172D  0020               	movlb	0	; select bank0
 10052  172E  00A4               	movwf	PD_write_u16@u16
 10053  172F  0008               	return
 10054  1730                     __end_ofPL78:	
 10055  1730                     PL84:	
 10056  1730  00A3               	movwf	PD_write_u32@u32+3
 10057  1731  3017               	movlw	23
 10058  1732  00A2               	movwf	PD_write_u32@u32+2
 10059  1733  3010               	movlw	16
 10060  1734  00A1               	movwf	PD_write_u32@u32+1
 10061  1735  3019               	movlw	25
 10062  1736  00A0               	movwf	PD_write_u32@u32
 10063  1737  0008               	return
 10064  1738                     __end_ofPL84:	
 10065  1738                     PL92:	
 10066  1738  0023               	movlb	3	; select bank3
 10067  1739  169E               	bsf	30,5	;volatile
 10068  173A  30FF               	movlw	255
 10069  173B  0020               	movlb	0	; select bank0
 10070  173C  0097               	movwf	23	;volatile
 10071  173D  30F5               	movlw	245
 10072  173E  0096               	movwf	22	;volatile
 10073  173F  0008               	return
 10074  1740                     __end_ofPL92:	
 10075  1740                     PL96:	
 10076  1740  00A4               	movwf	??_PD_write_u32
 10077  1741  3023               	movlw	35
 10078  1742  00A6               	movwf	??_PD_write_u32+2
 10079  1743  0022               	movlb	2	; select bank2
 10080  1744  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
 10081  1745  0008               	return
 10082  1746                     __end_ofPL96:	
 10083  1746                     PL100:	
 10084  1746  0801               	movf	1,w
 10085  1747  0022               	movlb	2	; select bank2
 10086  1748  07C4               	addwf	_checkSum^(0+256),f
 10087  1749  1803               	skipnc
 10088  174A  0AC5               	incf	(_checkSum+1)^(0+256),f
 10089  174B  0AF9               	incf	_tmp8,f
 10090  174C  0008               	return
 10091  174D                     __end_ofPL100:	
 10092  174D                     PL116:	
 10093  174D  0871               	movf	?_PD_Read_u16ptr,w
 10094  174E  0086               	movwf	6
 10095  174F  0872               	movf	?_PD_Read_u16ptr+1,w
 10096  1750  0087               	movwf	7
 10097  1751  3F40               	moviw [0]fsr1
 10098  1752  0021               	movlb	1	; select bank1
 10099  1753  0008               	return
 10100  1754                     __end_ofPL116:	
 10101  1754                     PL122:	
 10102  1754  0087               	movwf	7
 10103  1755  3020               	movlw	low RDM_get_checkSum@Data
 10104  1756  0084               	movwf	4
 10105  1757  3000               	movlw	high RDM_get_checkSum@Data
 10106  1758  0085               	movwf	5
 10107  1759  3418               	retlw	24
 10108  175A                     __end_ofPL122:	
 10109  175A                     PL124:	
 10110  175A  0020               	movlb	0	; select bank0
 10111  175B  00A5               	movwf	PD_write_u16@u16+1
 10112  175C  0021               	movlb	1	; select bank1
 10113  175D  084E               	movf	_tmp16^(0+128),w
 10114  175E  0020               	movlb	0	; select bank0
 10115  175F  00A4               	movwf	PD_write_u16@u16
 10116  1760  0008               	return
 10117  1761                     __end_ofPL124:	
 10118  1761                     PL130:	
 10119  1761  30A0               	movlw	160
 10120  1762  0020               	movlb	0	; select bank0
 10121  1763  00A0               	movwf	PFM_Write@AddrWrt
 10122  1764  301F               	movlw	31
 10123  1765  00A1               	movwf	PFM_Write@AddrWrt+1
 10124  1766  0008               	return
 10125  1767                     __end_ofPL130:	
 10126  1767                     PL134:	
 10127  1767  3080               	movlw	128
 10128  1768  0020               	movlb	0	; select bank0
 10129  1769  00A0               	movwf	PFM_Write@AddrWrt
 10130  176A  301F               	movlw	31
 10131  176B  00A1               	movwf	PFM_Write@AddrWrt+1
 10132  176C  0008               	return
 10133  176D                     __end_ofPL134:	
 10134  176D                     PL142:	
 10135  176D  0875               	movf	?_PFM_Read+1,w
 10136  176E  0021               	movlb	1	; select bank1
 10137  176F  00DB               	movwf	(_DMX_Address+1)^(0+128)
 10138  1770  0874               	movf	?_PFM_Read,w
 10139  1771  00DA               	movwf	_DMX_Address^(0+128)
 10140  1772  0008               	return
 10141  1773                     __end_ofPL142:	
 10142  1773                     PL146:	
 10143  1773  3049               	movlw	low ((_SLOT_DEFINITIONS+3)| (0+32768))
 10144  1774  0084               	movwf	4
 10145  1775  309A               	movlw	high ((_SLOT_DEFINITIONS+3)| (0+32768))
 10146  1776  0085               	movwf	5
 10147  1777  3F00               	moviw [0]fsr0
 10148  1778  0008               	return
 10149  1779                     __end_ofPL146:	
 10150  1779                     PL148:	
 10151  1779  0878               	movf	_ReadCount,w	;volatile
 10152  177A  3E01               	addlw	1
 10153  177B  00F9               	movwf	_tmp8
 10154  177C  00A4               	movwf	PD_write_u16@u16
 10155  177D  01A5               	clrf	PD_write_u16@u16+1
 10156  177E  0008               	return
 10157  177F                     __end_ofPL148:	
 10158  177F                     PL156:	
 10159  177F  0023               	movlb	3	; select bank3
 10160  1780  0091               	movwf	17	;volatile
 10161  1781  1615               	bsf	21,4	;volatile
 10162  1782  1515               	bsf	21,2	;volatile
 10163  1783  3455               	retlw	85
 10164  1784                     __end_ofPL156:	
 10165  1784                     PL158:	
 10166  1784  0878               	movf	_ReadCount,w	;volatile
 10167  1785  0020               	movlb	0	; select bank0
 10168  1786  00A4               	movwf	PD_write_u16@u16
 10169  1787  01A5               	clrf	PD_write_u16@u16+1
 10170  1788  0008               	return
 10171  1789                     __end_ofPL158:	
 10172  1789                     PL164:	
 10173  1789  0872               	movf	?_PD_Read_u16ptr+1,w
 10174  178A  0021               	movlb	1	; select bank1
 10175  178B  00D3               	movwf	(_PD_Manu_ptr+1)^(0+128)
 10176  178C  0871               	movf	?_PD_Read_u16ptr,w
 10177  178D  00D2               	movwf	_PD_Manu_ptr^(0+128)
 10178  178E  0008               	return
 10179  178F                     __end_ofPL164:	
 10180  178F                     PL168:	
 10181  178F  0023               	movlb	3	; select bank3
 10182  1790  1115               	bcf	21,2	;volatile
 10183  1791  178B               	bsf	11,7	;volatile
 10184  1792  0008               	return
 10185  1793                     __end_ofPL168:	
 10186  1793                     PL170:	
 10187  1793  0877               	movf	_DMX_Flags+1,w	;volatile
 10188  1794  39FC               	andlw	-4
 10189  1795  3801               	iorlw	1
 10190  1796  00F7               	movwf	_DMX_Flags+1	;volatile
 10191  1797  0008               	return
 10192  1798                     __end_ofPL170:	
 10193  1798                     PL172:	
 10194  1798  01A0               	clrf	PD_write_u32@u32
 10195  1799  01A1               	clrf	PD_write_u32@u32+1
 10196  179A  01A2               	clrf	PD_write_u32@u32+2
 10197  179B  01A3               	clrf	PD_write_u32@u32+3
 10198  179C  0008               	return
 10199  179D                     __end_ofPL172:	
 10200  179D                     PL178:	
 10201  179D  0081               	movwf	1
 10202  179E  30FE               	movlw	254
 10203  179F  00F4               	movwf	___bmul@multiplicand
 10204  17A0  0879               	movf	_tmp8,w
 10205  17A1  0008               	return
 10206  17A2                     __end_ofPL178:	
 10207  17A2                     PL182:	
 10208  17A2  3080               	movlw	128
 10209  17A3  00F4               	movwf	PFM_Read@AddrRd
 10210  17A4  301F               	movlw	31
 10211  17A5  00F5               	movwf	PFM_Read@AddrRd+1
 10212  17A6  0008               	return
 10213  17A7                     __end_ofPL182:	
 10214  17A7                     __ptext16:	
 10215 ;; *************** function _RDM_get_checkSum *****************
 10216 ;; Defined at:
 10217 ;;		line 257 in file "RDM_Read.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  Data           24    0[BANK0 ] struct .
 10220 ;;  len             1   24[BANK0 ] unsigned char 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;		None
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  2    0[BANK0 ] unsigned int 
 10225 ;; Registers used:
 10226 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10227 ;; Tracked objects:
 10228 ;;		On entry : 1F/0
 10229 ;;		On exit  : 1F/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10232 ;;      Params:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;Total ram usage:       25 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    2
 10239 ;; This function calls:
 10240 ;;		Nothing
 10241 ;; This function is called by:
 10242 ;;		_RDM_rx_loop
 10243 ;;		_RDM_TXSTART
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           
 10248                           ;psect for function _RDM_get_checkSum
 10249  17A7                     _RDM_get_checkSum:	
 10250                           
 10251                           ;RDM_Read.c: 258: checkSum = 0x00CD;
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
 10255  17A7  30CD               	movlw	205
 10256  17A8  0022               	movlb	2	; select bank2
 10257  17A9  00C4               	movwf	_checkSum^(0+256)
 10258  17AA  3017               	movlw	23
 10259  17AB  01C5               	clrf	(_checkSum+1)^(0+256)
 10260                           
 10261                           ;RDM_Read.c: 259: ReadCount = 23;
 10262  17AC  00F8               	movwf	_ReadCount	;volatile
 10263  17AD                     l3663:	
 10264                           ;RDM_Read.c: 260: while (ReadCount > 1) {
 10265                           
 10266  17AD  3002               	movlw	2
 10267  17AE  0278               	subwf	_ReadCount,w	;volatile
 10268  17AF  1C03               	btfss	3,0
 10269  17B0  2FBB               	goto	l3665
 10270                           
 10271                           ;RDM_Read.c: 261: checkSum += Data.value[ReadCount];
 10272  17B1  0878               	movf	_ReadCount,w
 10273  17B2  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
 10274  17B3  0086               	movwf	6
 10275  17B4  0187               	clrf	7
 10276  17B5  0801               	movf	1,w
 10277  17B6  07C4               	addwf	_checkSum^(0+256),f
 10278  17B7  1803               	skipnc
 10279  17B8  0AC5               	incf	(_checkSum+1)^(0+256),f
 10280                           
 10281                           ;RDM_Read.c: 262: ReadCount--;
 10282  17B9  03F8               	decf	_ReadCount,f	;volatile
 10283  17BA  2FAD               	goto	l3663
 10284  17BB                     l3665:	
 10285                           
 10286                           ;RDM_Read.c: 263: }
 10287                           ;RDM_Read.c: 264: ReadCount = len-1;
 10288  17BB  0020               	movlb	0	; select bank0
 10289  17BC  0838               	movf	RDM_get_checkSum@len,w
 10290  17BD  3EFF               	addlw	255
 10291  17BE  00F8               	movwf	_ReadCount	;volatile
 10292                           
 10293                           ;RDM_Read.c: 265: tmp8 = len - Data.PDL;
 10294  17BF  0822               	movf	RDM_get_checkSum@Data+2,w
 10295  17C0  0238               	subwf	RDM_get_checkSum@len,w
 10296  17C1  00F9               	movwf	_tmp8
 10297  17C2                     l3671:	
 10298                           ;RDM_Read.c: 266: while (ReadCount >= tmp8) {
 10299                           
 10300  17C2  0879               	movf	_tmp8,w
 10301  17C3  0278               	subwf	_ReadCount,w	;volatile
 10302  17C4  1C03               	btfss	3,0
 10303  17C5  2FCD               	goto	l3673
 10304                           
 10305                           ;RDM_Read.c: 267: checkSum += PD.u8[tmp8];
 10306  17C6  0879               	movf	_tmp8,w
 10307  17C7  3181  218C  3190   	fcall	PL114	;call to abstracted procedure
 10308                           
 10309                           ;RDM_Read.c: 268: tmp8++;
 10310  17CA  2746  3190         	fcall	PL100	;call to abstracted procedure
 10311  17CC  2FC2               	goto	l3671
 10312  17CD                     l3673:	
 10313                           
 10314                           ;RDM_Read.c: 269: }
 10315                           ;RDM_Read.c: 270: return checkSum;
 10316  17CD  0022               	movlb	2	; select bank2
 10317  17CE  0845               	movf	(_checkSum+1)^(0+256),w
 10318  17CF  0020               	movlb	0	; select bank0
 10319  17D0  00A1               	movwf	?_RDM_get_checkSum+1
 10320  17D1  0022               	movlb	2	; select bank2
 10321  17D2  0844               	movf	_checkSum^(0+256),w
 10322  17D3  0020               	movlb	0	; select bank0
 10323  17D4  00A0               	movwf	?_RDM_get_checkSum
 10324  17D5  0008               	return
 10325  17D6                     __end_of_RDM_get_checkSum:	
 10326  17D6                     __ptext14:	
 10327 ;; *************** function _TX_RDM_Response_Set *****************
 10328 ;; Defined at:
 10329 ;;		line 246 in file "RDM_Read.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;		None
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;		None
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10338 ;; Tracked objects:
 10339 ;;		On entry : 1C/2
 10340 ;;		On exit  : 1F/2
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;Total ram usage:        0 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    2
 10350 ;; This function calls:
 10351 ;;		Nothing
 10352 ;; This function is called by:
 10353 ;;		_RDM_TXSTART
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           
 10358                           ;psect for function _TX_RDM_Response_Set
 10359  17D6                     _TX_RDM_Response_Set:	
 10360                           
 10361                           ;RDM_Read.c: 247: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
 10362                           
 10363                           ;incstack = 0
 10364                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
 10365  17D6  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
 10366  17D7  0086               	movwf	6
 10367  17D8  3001               	movlw	1	; select bank2/3
 10368  17D9  0087               	movwf	7
 10369  17DA  3F40               	moviw [0]fsr1
 10370  17DB  0022               	movlb	2	; select bank2
 10371  17DC  00DD               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
 10372  17DD  3F41               	moviw [1]fsr1
 10373  17DE  00DE               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
 10374  17DF  3F42               	moviw [2]fsr1
 10375  17E0  00DF               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
 10376  17E1  3F43               	moviw [3]fsr1
 10377  17E2  00E0               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
 10378                           
 10379                           ;RDM_Read.c: 248: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
 10380  17E3  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
 10381  17E4  00E2               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
 10382  17E5  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
 10383  17E6  00E1               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
 10384                           
 10385                           ;RDM_Read.c: 249: TX_RDM_Data.TN=RX_RDM_Data.TN;
 10386  17E7  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
 10387  17E8  00D6               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
 10388                           
 10389                           ;RDM_Read.c: 250: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
 10390  17E9  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
 10391  17EA  3E01               	addlw	1
 10392  17EB  00D1               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
 10393                           
 10394                           ;RDM_Read.c: 251: TX_RDM_Data.PID=RX_RDM_Data.PID;
 10395  17EC  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
 10396  17ED  00D0               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
 10397  17EE  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
 10398  17EF  00CF               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
 10399                           
 10400                           ;RDM_Read.c: 252: TX_RDM_Data.ML=0x18+TX_RDM_Data.PDL;
 10401  17F0  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
 10402  17F1  3E18               	addlw	24
 10403  17F2  00E3               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
 10404                           
 10405                           ;RDM_Read.c: 253: TX_RDM_Data.PORT=0x00;
 10406  17F3  01D5               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
 10407  17F4  0008               	return
 10408  17F5                     __end_of_TX_RDM_Response_Set:	
 10409  17F5                     __ptext15:	
 10410 ;; *************** function _RDM_tx_TimerBreak *****************
 10411 ;; Defined at:
 10412 ;;		line 192 in file "RDM.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		wreg
 10421 ;; Tracked objects:
 10422 ;;		On entry : 1F/1
 10423 ;;		On exit  : 1F/2
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    2
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_RDM_TXSTART
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _RDM_tx_TimerBreak
 10442  17F5                     _RDM_tx_TimerBreak:	
 10443  17F5                     l3677:	
 10444                           ;incstack = 0
 10445                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
 10446                           
 10447                           
 10448                           ;RDM.c: 199: TXEN = 0;
 10449  17F5  0023               	movlb	3	; select bank3
 10450  17F6  129E               	bcf	30,5	;volatile
 10451                           
 10452                           ;RDM.c: 200: TX_PD_Flag=1;
 10453  17F7  3001               	movlw	1
 10454  17F8  0021               	movlb	1	; select bank1
 10455  17F9  00CC               	movwf	_TX_PD_Flag^(0+128)	;volatile
 10456  17FA  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
 10457                           
 10458                           ;RDM.c: 201: TMR1 = 0xFF4f;
 10459                           
 10460                           ;RDM.c: 202: TimerState = TIMER_RDM_BREAK;
 10461  17FB  3182  227E         	fcall	PL76	;call to abstracted procedure
 10462                           
 10463                           ;RDM.c: 203: LATC3 = 1;
 10464  17FD  0022               	movlb	2	; select bank2
 10465  17FE  158E               	bsf	14,3	;volatile
 10466  17FF  0008               	return
 10467  1800                     __end_of_RDM_tx_TimerBreak:	
 10468                           
 10469                           	psect	intentry
 10470  0004                     __pintentry:	
 10471 ;; *************** function _isr *****************
 10472 ;; Defined at:
 10473 ;;		line 82 in file "main.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;		None
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      void 
 10480 ;; Registers used:
 10481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 1E/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;Total ram usage:        0 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    1
 10494 ;; This function calls:
 10495 ;;		_DMX_interrput
 10496 ;;		_RDM_tx_interrupt
 10497 ;;		_timer1_interrupt
 10498 ;;		_timer2_interrupt
 10499 ;; This function is called by:
 10500 ;;		Interrupt level 1
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504  0004                     _isr:	
 10505                           
 10506                           ;incstack = 0
 10507  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10508                           
 10509                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10510  0005  3180               	pagesel	$
 10511                           
 10512                           ;main.c: 84: DMX_interrput();
 10513  0006  3180  2015  3180   	fcall	_DMX_interrput
 10514                           
 10515                           ;main.c: 85: timer1_interrupt();
 10516  0009  3182  221B  3180   	fcall	_timer1_interrupt
 10517                           
 10518                           ;main.c: 86: RDM_tx_interrupt();
 10519  000C  3180  20F7  3180   	fcall	_RDM_tx_interrupt
 10520                           
 10521                           ;main.c: 87: timer2_interrupt();
 10522  000F  3182  22C1         	fcall	_timer2_interrupt
 10523  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10524  0012  0009               	retfie
 10525  0013                     __end_of_isr:	
 10526                           
 10527                           	psect	text46
 10528  02C1                     __ptext46:	
 10529 ;; *************** function _timer2_interrupt *****************
 10530 ;; Defined at:
 10531 ;;		line 169 in file "Timer.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  2  128[None  ] int 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0
 10540 ;; Tracked objects:
 10541 ;;		On entry : 1C/0
 10542 ;;		On exit  : 1E/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;Total ram usage:        0 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_isr
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _timer2_interrupt
 10560  02C1                     _timer2_interrupt:	
 10561                           
 10562                           ;Timer.c: 170: if (TMR2IE && TMR2IF) {
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _timer2_interrupt: [wreg+status,2+status,0]
 10566  02C1  0021               	movlb	1	; select bank1
 10567  02C2  1C91               	btfss	17,1	;volatile
 10568  02C3  0008               	return
 10569  02C4  0020               	movlb	0	; select bank0
 10570  02C5  1C91               	btfss	17,1	;volatile
 10571  02C6  0008               	return
 10572                           
 10573                           ;Timer.c: 171: TMR2IF = 0;
 10574  02C7  1091               	bcf	17,1	;volatile
 10575                           
 10576                           ;Timer.c: 172: Timer2_Count++;
 10577  02C8  0021               	movlb	1	; select bank1
 10578  02C9  3032               	movlw	50
 10579  02CA  0ADE               	incf	_Timer2_Count^(0+128),f
 10580                           
 10581                           ;Timer.c: 173: if(Timer2_Count==50){
 10582  02CB  065E               	xorwf	_Timer2_Count^(0+128),w
 10583  02CC  1D03               	btfss	3,2
 10584  02CD  0008               	return
 10585                           
 10586                           ;Timer.c: 174: Timer2_Count=0;
 10587  02CE  01DE               	clrf	_Timer2_Count^(0+128)
 10588                           
 10589                           ;Timer.c: 175: DMX_Flags.RDM_Identify_Device_Timer2New = 1;
 10590  02CF  16F7               	bsf	_DMX_Flags+1,5	;volatile
 10591  02D0  0008               	return
 10592  02D1                     __end_of_timer2_interrupt:	
 10593                           
 10594                           	psect	text47
 10595  021B                     __ptext47:	
 10596 ;; *************** function _timer1_interrupt *****************
 10597 ;; Defined at:
 10598 ;;		line 40 in file "Timer.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;		None
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 1C/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;Total ram usage:        0 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_isr
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _timer1_interrupt
 10627  021B                     _timer1_interrupt:	
 10628                           
 10629                           ;Timer.c: 41: if (TMR1IE && TMR1IF) {
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
 10633  021B  0021               	movlb	1	; select bank1
 10634  021C  1C11               	btfss	17,0	;volatile
 10635  021D  0008               	return
 10636  021E  0020               	movlb	0	; select bank0
 10637  021F  1C11               	btfss	17,0	;volatile
 10638  0220  0008               	return
 10639                           
 10640                           ;Timer.c: 42: TMR1IF = 0;
 10641  0221  1011               	bcf	17,0	;volatile
 10642                           
 10643                           ;Timer.c: 43: switch (TimerState) {
 10644  0222  2A72               	goto	i1l4923
 10645  0223                     i1l4871:	
 10646                           
 10647                           ;Timer.c: 45: TimerState = TIMER_500US;
 10648  0223  0021               	movlb	1	; select bank1
 10649  0224  01E0               	clrf	_TimerState^(0+128)	;volatile
 10650                           
 10651                           ;Timer.c: 56: break;
 10652  0225  0008               	return
 10653  0226                     i1l1119:	
 10654                           ;Timer.c: 57: case TIMER_500US:
 10655                           
 10656                           
 10657                           ;Timer.c: 69: TMR1 = 0xFE0B;
 10658  0226  318F  27FA  3182   	fcall	PL160	;call to abstracted procedure
 10659                           
 10660                           ;Timer.c: 70: RxTimer++;
 10661  0229  0021               	movlb	1	; select bank1
 10662  022A  0AD6               	incf	_RxTimer^(0+128),f	;volatile
 10663  022B  1903               	skipnz
 10664  022C  0AD7               	incf	(_RxTimer+1)^(0+128),f	;volatile
 10665                           
 10666                           ;Timer.c: 71: if (RxTimer == 2400) {
 10667  022D  3060               	movlw	96
 10668  022E  0656               	xorwf	_RxTimer^(0+128),w	;volatile
 10669  022F  3009               	movlw	9
 10670  0230  1903               	skipnz
 10671  0231  0657               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
 10672  0232  1D03               	btfss	3,2
 10673  0233  2A39               	goto	i1l4881
 10674                           
 10675                           ;Timer.c: 72: RxTimer = 2400 + 1;
 10676  0234  3061               	movlw	97
 10677  0235  00D6               	movwf	_RxTimer^(0+128)	;volatile
 10678  0236  3009               	movlw	9
 10679  0237  00D7               	movwf	(_RxTimer^(0+128)+1)	;volatile
 10680                           
 10681                           ;Timer.c: 73: DMX_Flags.RxTimeout = 1;
 10682  0238  1576               	bsf	_DMX_Flags,2	;volatile
 10683  0239                     i1l4881:	
 10684                           
 10685                           ;Timer.c: 74: }
 10686                           ;Timer.c: 76: Timer.MS_Count++;
 10687  0239  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
 10688  023A  1903               	skipnz
 10689  023B  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
 10690                           
 10691                           ;Timer.c: 77: Timer.MS = 1;
 10692  023C  1438               	bsf	_Timer^(0+128),0	;volatile
 10693                           
 10694                           ;Timer.c: 78: if (Timer.MS_Count == 1000)
 10695  023D  30E8               	movlw	232
 10696  023E  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
 10697  023F  3003               	movlw	3
 10698  0240  1903               	skipnz
 10699  0241  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
 10700  0242  1D03               	btfss	3,2
 10701  0243  0008               	return
 10702                           
 10703                           ;Timer.c: 79: {
 10704                           ;Timer.c: 94: Timer.MS_Count = 0;
 10705  0244  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
 10706  0245  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
 10707                           
 10708                           ;Timer.c: 95: Timer.SEC_Count++;
 10709  0246  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
 10710                           
 10711                           ;Timer.c: 96: Timer.SEC = 1;
 10712  0247  14B8               	bsf	_Timer^(0+128),1	;volatile
 10713                           
 10714                           ;Timer.c: 97: if (Timer.SEC_Count == 60)
 10715  0248  303C               	movlw	60
 10716  0249  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
 10717  024A  1D03               	btfss	3,2
 10718  024B  0008               	return
 10719                           
 10720                           ;Timer.c: 98: {
 10721                           ;Timer.c: 99: Timer.SEC_Count = 0;
 10722  024C  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
 10723                           
 10724                           ;Timer.c: 100: Timer.MIN_Count++;
 10725  024D  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
 10726                           
 10727                           ;Timer.c: 101: Timer.MIN = 1;
 10728  024E  1538               	bsf	_Timer^(0+128),2	;volatile
 10729                           
 10730                           ;Timer.c: 103: if (Timer.MIN_Count == 60)
 10731  024F  303C               	movlw	60
 10732  0250  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
 10733  0251  1D03               	btfss	3,2
 10734  0252  0008               	return
 10735                           
 10736                           ;Timer.c: 104: {
 10737                           ;Timer.c: 105: Timer.MIN_Count = 0;
 10738  0253  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
 10739                           
 10740                           ;Timer.c: 106: Timer.HR_Count++;
 10741  0254  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
 10742                           
 10743                           ;Timer.c: 107: Timer.HR = 1;
 10744  0255  15B8               	bsf	_Timer^(0+128),3	;volatile
 10745  0256  0008               	return
 10746  0257                     i1l1124:	
 10747                           ;Timer.c: 118: case TIMER_RDM_MBB:
 10748                           
 10749                           
 10750                           ;Timer.c: 119: TXEN = 0;
 10751  0257  0023               	movlb	3	; select bank3
 10752  0258  129E               	bcf	30,5	;volatile
 10753                           
 10754                           ;Timer.c: 120: TMR1 = 0xFF4f;
 10755                           
 10756                           ;Timer.c: 121: TimerState = TIMER_RDM_BREAK;
 10757  0259  227E               	fcall	PL76	;call to abstracted procedure
 10758                           
 10759                           ;Timer.c: 122: break;
 10760  025A  0008               	return
 10761  025B                     i1l1125:	
 10762                           ;Timer.c: 123: case TIMER_RDM_BREAK:
 10763                           
 10764                           
 10765                           ;Timer.c: 124: TXEN = 1;
 10766                           
 10767                           ;Timer.c: 125: TMR1 = 0xFFF5;
 10768  025B  3197  2738         	fcall	PL92	;call to abstracted procedure
 10769                           
 10770                           ;Timer.c: 126: TimerState = TIMER_RDM_MAB;
 10771  025D  3002               	movlw	2
 10772  025E  0021               	movlb	1	; select bank1
 10773  025F  00E0               	movwf	_TimerState^(0+128)	;volatile
 10774                           
 10775                           ;Timer.c: 127: break;
 10776  0260  0008               	return
 10777  0261                     i1l1126:	
 10778                           ;Timer.c: 129: case TIMER_RDM_MAB:
 10779                           
 10780                           
 10781                           ;Timer.c: 130: TMR1 = 0xFCDF;
 10782  0261  2287               	fcall	PL150	;call to abstracted procedure
 10783                           
 10784                           ;Timer.c: 131: TimerState = TIMER_500US;
 10785  0262  0021               	movlb	1	; select bank1
 10786  0263  01E0               	clrf	_TimerState^(0+128)	;volatile
 10787                           
 10788                           ;Timer.c: 134: TXIE = 1;
 10789  0264  1611               	bsf	17,4	;volatile
 10790                           
 10791                           ;Timer.c: 135: break;
 10792  0265  0008               	return
 10793  0266                     i1l1127:	
 10794                           ;Timer.c: 136: case TIMER_DISC_MAB:
 10795                           
 10796                           
 10797                           ;Timer.c: 138: TXIE = 1;
 10798  0266  1611               	bsf	17,4	;volatile
 10799                           
 10800                           ;Timer.c: 139: TMR1 = 0xFCDF;
 10801  0267  2287  3182         	fcall	PL150	;call to abstracted procedure
 10802  0269  2A23               	goto	i1l4871
 10803  026A                     i1l4917:	
 10804                           
 10805                           ;Timer.c: 154: TMR1 = TIMER_500US;
 10806  026A  0020               	movlb	0	; select bank0
 10807  026B  0196               	clrf	22	;volatile
 10808  026C  0197               	clrf	23	;volatile
 10809                           
 10810                           ;Timer.c: 155: TimerState = TIMER_500US;
 10811  026D  0021               	movlb	1	; select bank1
 10812  026E  01E0               	clrf	_TimerState^(0+128)	;volatile
 10813                           
 10814                           ;Timer.c: 158: LATC3=0;
 10815  026F  0022               	movlb	2	; select bank2
 10816  0270  118E               	bcf	14,3	;volatile
 10817                           
 10818                           ;Timer.c: 159: break;
 10819  0271  0008               	return
 10820  0272                     i1l4923:	
 10821  0272  0021               	movlb	1	; select bank1
 10822  0273  0860               	movf	_TimerState^(0+128),w	;volatile
 10823                           
 10824                           ; Switch size 1, requested type "space"
 10825                           ; Number of cases is 6, Range of values is 0 to 5
 10826                           ; switch strategies available:
 10827                           ; Name         Instructions Cycles
 10828                           ; direct_byte           18     6 (fixed)
 10829                           ; simple_byte           19    10 (average)
 10830                           ; jumptable            260     6 (fixed)
 10831                           ;	Chosen strategy is direct_byte
 10832  0274  0084               	movwf	4
 10833  0275  3006               	movlw	6
 10834  0276  0204               	subwf	4,w
 10835  0277  1803               	skipnc
 10836  0278  2A23               	goto	i1l4871
 10837  0279  3182               	movlp	high i1S6393
 10838  027A  3504               	lslf	4,w
 10839  027B  3EE9               	addlw	low i1S6393
 10840  027C  0082               	movwf	2
 10841  027D  0008               	return
 10842  027E                     __end_of_timer1_interrupt:	
 10843  027E                     PL76:	
 10844  027E  30FF               	movlw	255
 10845  027F  0020               	movlb	0	; select bank0
 10846  0280  0097               	movwf	23	;volatile
 10847  0281  304F               	movlw	79
 10848  0282  0096               	movwf	22	;volatile
 10849  0283  3001               	movlw	1
 10850  0284  0021               	movlb	1	; select bank1
 10851  0285  00E0               	movwf	_TimerState^(0+128)	;volatile
 10852  0286  0008               	return
 10853  0287                     __end_ofPL76:	
 10854  0287                     PL150:	
 10855  0287  30FC               	movlw	252
 10856  0288  0020               	movlb	0	; select bank0
 10857  0289  0097               	movwf	23	;volatile
 10858  028A  30DF               	movlw	223
 10859  028B  0096               	movwf	22	;volatile
 10860  028C  0008               	return
 10861  028D                     __end_ofPL150:	
 10862                           
 10863                           	psect	swtext1
 10864  02E9                     __pswtext1:	
 10865  02E9                     i1S6393:	
 10866  02E9  3182  2A26         	ljmp	i1l1119
 10867  02EB  3182  2A5B         	ljmp	i1l1125
 10868  02ED  3182  2A61         	ljmp	i1l1126
 10869  02EF  3182  2A57         	ljmp	i1l1124
 10870  02F1  3182  2A6A         	ljmp	i1l4917
 10871  02F3  3182  2A66         	ljmp	i1l1127
 10872                           
 10873                           	psect	text48
 10874  00F7                     __ptext48:	
 10875 ;; *************** function _RDM_tx_interrupt *****************
 10876 ;; Defined at:
 10877 ;;		line 124 in file "RDM.c"
 10878 ;; Parameters:    Size  Location     Type
 10879 ;;		None
 10880 ;; Auto vars:     Size  Location     Type
 10881 ;;		None
 10882 ;; Return value:  Size  Location     Type
 10883 ;;                  1    wreg      void 
 10884 ;; Registers used:
 10885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10886 ;; Tracked objects:
 10887 ;;		On entry : 1C/0
 10888 ;;		On exit  : 1C/0
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;Total ram usage:        4 bytes
 10896 ;; Hardware stack levels used:    1
 10897 ;; This function calls:
 10898 ;;		Nothing
 10899 ;; This function is called by:
 10900 ;;		_isr
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           
 10905                           ;psect for function _RDM_tx_interrupt
 10906  00F7                     _RDM_tx_interrupt:	
 10907                           
 10908                           ;RDM.c: 125: if (TXIE && TXIF) {
 10909                           
 10910                           ;incstack = 0
 10911                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
 10912  00F7  0021               	movlb	1	; select bank1
 10913  00F8  1E11               	btfss	17,4	;volatile
 10914  00F9  0008               	return
 10915  00FA  0020               	movlb	0	; select bank0
 10916  00FB  1E11               	btfss	17,4	;volatile
 10917  00FC  0008               	return
 10918  00FD  296F               	goto	i1l4987
 10919  00FE                     i1l4935:	
 10920                           
 10921                           ;RDM.c: 128: if(TX_PD_Flag==1){
 10922  00FE  034C               	decf	_TX_PD_Flag^(0+128),w	;volatile
 10923  00FF  044D               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
 10924  0100  1D03               	btfss	3,2
 10925  0101  2908               	goto	i1l4941
 10926                           
 10927                           ;RDM.c: 129: TX_PD_Flag=0;
 10928  0102  01CC               	clrf	_TX_PD_Flag^(0+128)	;volatile
 10929  0103  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
 10930                           
 10931                           ;RDM.c: 130: TXREG = 0xCC;
 10932  0104  30CC               	movlw	204
 10933  0105  0023               	movlb	3	; select bank3
 10934  0106  009A               	movwf	26	;volatile
 10935                           
 10936                           ;RDM.c: 131: }else{
 10937  0107  0008               	return
 10938  0108                     i1l4941:	
 10939                           
 10940                           ;RDM.c: 132: TXREG = 0x01;
 10941  0108  3001               	movlw	1
 10942  0109  0023               	movlb	3	; select bank3
 10943  010A  009A               	movwf	26	;volatile
 10944                           
 10945                           ;RDM.c: 133: BytePtr = &TX_RDM_Data.value[23];
 10946  010B  3063               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
 10947  010C  0021               	movlb	1	; select bank1
 10948  010D  00E4               	movwf	_BytePtr^(0+128)
 10949  010E  3003               	movlw	3
 10950                           
 10951                           ;RDM.c: 134: TxCount = 0;
 10952  010F  01D4               	clrf	_TxCount^(0+128)
 10953  0110  01D5               	clrf	(_TxCount+1)^(0+128)
 10954                           
 10955                           ;RDM.c: 135: TxState = TX_DATA;
 10956  0111  00E3               	movwf	_TxState^(0+128)	;volatile
 10957  0112  0008               	return
 10958  0113                     i1l4947:	
 10959                           
 10960                           ;RDM.c: 139: TxState = TX_DISCOVERY;
 10961  0113  01E3               	clrf	_TxState^(0+128)	;volatile
 10962                           
 10963                           ;RDM.c: 140: break;
 10964  0114  0008               	return
 10965  0115                     i1l4949:	
 10966                           
 10967                           ;RDM.c: 142: if (TxCount <= 23) {
 10968  0115  3000               	movlw	0
 10969  0116  0255               	subwf	(_TxCount+1)^(0+128),w
 10970  0117  3018               	movlw	24
 10971  0118  1903               	skipnz
 10972  0119  0254               	subwf	_TxCount^(0+128),w
 10973  011A  1803               	skipnc
 10974  011B  2921               	goto	i1l916
 10975                           
 10976                           ;RDM.c: 143: TxCount++;
 10977  011C  0AD4               	incf	_TxCount^(0+128),f
 10978  011D  1903               	skipnz
 10979  011E  0AD5               	incf	(_TxCount+1)^(0+128),f
 10980                           
 10981                           ;RDM.c: 144: TXREG = *BytePtr;
 10982                           
 10983                           ;RDM.c: 145: BytePtr--;
 10984  011F  2182               	fcall	PL66	;call to abstracted procedure
 10985                           
 10986                           ;RDM.c: 146: }else{
 10987  0120  0008               	return
 10988  0121                     i1l916:	
 10989                           
 10990                           ;RDM.c: 148: TXIE = 0;
 10991  0121  1211               	bcf	17,4	;volatile
 10992                           
 10993                           ;RDM.c: 149: RCIE = 1;
 10994  0122  1691               	bsf	17,5	;volatile
 10995  0123                     L9:	
 10996                           
 10997                           ;RDM.c: 150: TMR1 = 0xFFDD;
 10998  0123  30FF               	movlw	255
 10999  0124  0020               	movlb	0	; select bank0
 11000  0125  0097               	movwf	23	;volatile
 11001  0126  30DD               	movlw	221
 11002  0127  0096               	movwf	22	;volatile
 11003                           
 11004                           ;RDM.c: 151: TimerState = TIMER_MAS;
 11005  0128  3004               	movlw	4
 11006  0129  0021               	movlb	1	; select bank1
 11007  012A  00E0               	movwf	_TimerState^(0+128)	;volatile
 11008  012B  0008               	return
 11009  012C                     i1l4959:	
 11010                           
 11011                           ;RDM.c: 157: if (TxCount < 24) {
 11012  012C  3000               	movlw	0
 11013  012D  0255               	subwf	(_TxCount+1)^(0+128),w
 11014  012E  3018               	movlw	24
 11015  012F  1903               	skipnz
 11016  0130  0254               	subwf	_TxCount^(0+128),w
 11017  0131  1803               	skipnc
 11018  0132  294B               	goto	i1l919
 11019                           
 11020                           ;RDM.c: 159: TXREG = *BytePtr;
 11021                           
 11022                           ;RDM.c: 160: BytePtr--;
 11023  0133  2182  3180         	fcall	PL66	;call to abstracted procedure
 11024                           
 11025                           ;RDM.c: 161: TxCount++;
 11026  0135  0AD4               	incf	_TxCount^(0+128),f
 11027  0136  1903               	skipnz
 11028  0137  0AD5               	incf	(_TxCount+1)^(0+128),f
 11029                           
 11030                           ;RDM.c: 162: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
 11031  0138  3016               	movlw	22
 11032  0139  0654               	xorwf	_TxCount^(0+128),w
 11033  013A  0455               	iorwf	(_TxCount+1)^(0+128),w
 11034  013B  1D03               	btfss	3,2
 11035  013C  0008               	return
 11036  013D  0022               	movlb	2	; select bank2
 11037  013E  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
 11038  013F  1903               	btfsc	3,2
 11039  0140  0008               	return
 11040  0141  0021               	movlb	1	; select bank1
 11041  0142  084C               	movf	_TX_PD_Flag^(0+128),w	;volatile
 11042  0143  044D               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
 11043  0144  1D03               	btfss	3,2
 11044  0145  0008               	return
 11045                           
 11046                           ;RDM.c: 163: TxState = TX_RDM_PD;
 11047  0146  3005               	movlw	5
 11048  0147  00E3               	movwf	_TxState^(0+128)	;volatile
 11049                           
 11050                           ;RDM.c: 164: TX_PDCount = (200>>1)-1;
 11051  0148  3063               	movlw	99
 11052  0149  00E2               	movwf	_TX_PDCount^(0+128)
 11053  014A  0008               	return
 11054  014B                     i1l919:	
 11055                           
 11056                           ;RDM.c: 168: RCIE = 1;
 11057  014B  1691               	bsf	17,5	;volatile
 11058                           
 11059                           ;RDM.c: 170: TXIE = 0;
 11060  014C  1211               	bcf	17,4	;volatile
 11061  014D  2923               	goto	L9
 11062  014E                     i1l4977:	
 11063                           ;RDM.c: 171: TMR1 = 0xFFDD;
 11064                           
 11065                           
 11066                           ;RDM.c: 180: TXREG = PD.u8[TX_PDCount];
 11067  014E  0862               	movf	_TX_PDCount^(0+128),w
 11068  014F  218C  3180         	fcall	PL114	;call to abstracted procedure
 11069  0151  0801               	movf	1,w
 11070  0152  0023               	movlb	3	; select bank3
 11071  0153  009A               	movwf	26	;volatile
 11072                           
 11073                           ;RDM.c: 181: if (TX_PDCount == (200>>1)-TX_RDM_Data.PDL) {
 11074  0154  01F1               	clrf	??_RDM_tx_interrupt+1
 11075  0155  0022               	movlb	2	; select bank2
 11076  0156  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
 11077  0157  3C64               	sublw	100
 11078  0158  00F0               	movwf	??_RDM_tx_interrupt
 11079  0159  1C03               	skipc
 11080  015A  03F1               	decf	??_RDM_tx_interrupt+1,f
 11081  015B  0021               	movlb	1	; select bank1
 11082  015C  0862               	movf	_TX_PDCount^(0+128),w
 11083  015D  00F2               	movwf	??_RDM_tx_interrupt+2
 11084  015E  01F3               	clrf	??_RDM_tx_interrupt+3
 11085  015F  0871               	movf	??_RDM_tx_interrupt+1,w
 11086  0160  0673               	xorwf	??_RDM_tx_interrupt+3,w
 11087  0161  1D03               	skipz
 11088  0162  2965               	goto	u315_25
 11089  0163  0870               	movf	??_RDM_tx_interrupt,w
 11090  0164  0672               	xorwf	??_RDM_tx_interrupt+2,w
 11091  0165                     u315_25:	
 11092  0165  1D03               	skipz
 11093  0166  296D               	goto	i1l4983
 11094                           
 11095                           ;RDM.c: 182: TxState = TX_DATA;
 11096  0167  3003               	movlw	3
 11097  0168  00E3               	movwf	_TxState^(0+128)	;volatile
 11098                           
 11099                           ;RDM.c: 183: TX_PD_Flag = 1;
 11100  0169  3001               	movlw	1
 11101  016A  00CC               	movwf	_TX_PD_Flag^(0+128)	;volatile
 11102  016B  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
 11103                           
 11104                           ;RDM.c: 184: }else{
 11105  016C  0008               	return
 11106  016D                     i1l4983:	
 11107                           
 11108                           ;RDM.c: 185: TX_PDCount--;
 11109  016D  03E2               	decf	_TX_PDCount^(0+128),f
 11110  016E  0008               	return
 11111  016F                     i1l4987:	
 11112  016F  0021               	movlb	1	; select bank1
 11113  0170  0863               	movf	_TxState^(0+128),w	;volatile
 11114                           
 11115                           ; Switch size 1, requested type "space"
 11116                           ; Number of cases is 5, Range of values is 0 to 5
 11117                           ; switch strategies available:
 11118                           ; Name         Instructions Cycles
 11119                           ; simple_byte           16     9 (average)
 11120                           ; direct_byte           18     6 (fixed)
 11121                           ; jumptable            260     6 (fixed)
 11122                           ;	Chosen strategy is simple_byte
 11123  0171  3A00               	xorlw	0	; case 0
 11124  0172  1903               	skipnz
 11125  0173  2915               	goto	i1l4949
 11126  0174  3A01               	xorlw	1	; case 1
 11127  0175  1903               	skipnz
 11128  0176  28FE               	goto	i1l4935
 11129  0177  3A03               	xorlw	3	; case 2
 11130  0178  1903               	skipnz
 11131  0179  2913               	goto	i1l4947
 11132  017A  3A01               	xorlw	1	; case 3
 11133  017B  1903               	skipnz
 11134  017C  292C               	goto	i1l4959
 11135  017D  3A06               	xorlw	6	; case 5
 11136  017E  1903               	skipnz
 11137  017F  294E               	goto	i1l4977
 11138  0180  2981               	goto	i1l925
 11139  0181                     i1l925:	
 11140  0181  0008               	return
 11141  0182                     __end_of_RDM_tx_interrupt:	
 11142  0182                     PL66:	
 11143  0182  0864               	movf	_BytePtr^(0+128),w
 11144  0183  0086               	movwf	6
 11145  0184  3001               	movlw	1	; select bank2/3
 11146  0185  0087               	movwf	7
 11147  0186  0801               	movf	1,w
 11148  0187  0023               	movlb	3	; select bank3
 11149  0188  009A               	movwf	26	;volatile
 11150  0189  0021               	movlb	1	; select bank1
 11151  018A  03E4               	decf	_BytePtr^(0+128),f
 11152  018B  0008               	return
 11153  018C                     __end_ofPL66:	
 11154  018C                     PL114:	
 11155  018C  3E18               	addlw	24
 11156  018D  0086               	movwf	6
 11157  018E  3023               	movlw	35
 11158  018F  0187               	clrf	7
 11159  0190  3D87               	addwfc	7,f
 11160  0191  0008               	return
 11161  0192                     __end_ofPL114:	
 11162                           
 11163                           	psect	text49
 11164  0015                     __ptext49:	
 11165 ;; *************** function _DMX_interrput *****************
 11166 ;; Defined at:
 11167 ;;		line 218 in file "DMX.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;		None
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  RxDat           1    2[COMMON] volatile unsigned char 
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  2  122[None  ] int 
 11174 ;; Registers used:
 11175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;Total ram usage:        3 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; This function calls:
 11188 ;;		Nothing
 11189 ;; This function is called by:
 11190 ;;		_isr
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           
 11195                           ;psect for function _DMX_interrput
 11196  0015                     _DMX_interrput:	
 11197                           
 11198                           ;DMX.c: 219: if (RCIE & RCIF) {
 11199                           
 11200                           ;incstack = 0
 11201                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
 11202  0015  3001               	movlw	1
 11203  0016  0021               	movlb	1	; select bank1
 11204  0017  1E91               	btfss	17,5	;volatile
 11205  0018  3900               	andlw	0
 11206  0019  0020               	movlb	0	; select bank0
 11207  001A  1E91               	btfss	17,5	;volatile
 11208  001B  3900               	andlw	0
 11209  001C  1C09               	btfss	9,0
 11210  001D  0008               	return
 11211                           
 11212                           ;DMX.c: 220: volatile char RxDat;
 11213                           ;DMX.c: 221: if (FERR)
 11214  001E  0023               	movlb	3	; select bank3
 11215  001F  1D1D               	btfss	29,2	;volatile
 11216  0020  28D0               	goto	i1l4851
 11217                           
 11218                           ;DMX.c: 222: {
 11219                           ;DMX.c: 223: RxDat = RCREG;
 11220  0021  0819               	movf	25,w	;volatile
 11221  0022  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11222                           
 11223                           ;DMX.c: 224: DMX_Flags.RxBreak = 1;
 11224  0023  14F6               	bsf	_DMX_Flags,1	;volatile
 11225                           
 11226                           ;DMX.c: 225: RxState = WAIT_FOR_START;
 11227  0024  3001               	movlw	1
 11228  0025  0021               	movlb	1	; select bank1
 11229  0026  00E9               	movwf	_RxState^(0+128)	;volatile
 11230                           
 11231                           ;DMX.c: 226: RxTimer = 0;
 11232  0027  01D6               	clrf	_RxTimer^(0+128)	;volatile
 11233  0028  01D7               	clrf	(_RxTimer+1)^(0+128)	;volatile
 11234  0029  28D0               	goto	i1l4851
 11235  002A                     i1l4771:	
 11236                           
 11237                           ;DMX.c: 230: RxDat = RCREG;
 11238  002A  0023               	movlb	3	; select bank3
 11239  002B  0819               	movf	25,w	;volatile
 11240  002C  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11241                           
 11242                           ;DMX.c: 231: break;
 11243  002D  28DB               	goto	i1l4853
 11244  002E                     i1l538:	
 11245                           ;DMX.c: 232: case WAIT_FOR_START:
 11246                           
 11247                           
 11248                           ;DMX.c: 233: if (RCIF)
 11249  002E  0020               	movlb	0	; select bank0
 11250  002F  1E91               	btfss	17,5	;volatile
 11251  0030  28DB               	goto	i1l4853
 11252                           
 11253                           ;DMX.c: 234: {
 11254                           ;DMX.c: 235: RxDat = RCREG;
 11255  0031  0023               	movlb	3	; select bank3
 11256  0032  0819               	movf	25,w	;volatile
 11257  0033  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11258                           
 11259                           ;DMX.c: 236: if (RxDat == 0) {
 11260  0034  0872               	movf	DMX_interrput@RxDat,w	;volatile
 11261  0035  1D03               	btfss	3,2
 11262  0036  2843               	goto	i1l4781
 11263                           
 11264                           ;DMX.c: 238: RxState = RX_DMX_READ_DATA;
 11265  0037  3002               	movlw	2
 11266  0038  0021               	movlb	1	; select bank1
 11267  0039  00E9               	movwf	_RxState^(0+128)	;volatile
 11268                           
 11269                           ;DMX.c: 239: RxDataPtr = &RxData[0];
 11270  003A  3064               	movlw	(low (_RxData| (0+256)))& (0+255)
 11271  003B  00EA               	movwf	_RxDataPtr^(0+128)
 11272                           
 11273                           ;DMX.c: 240: RxAddrCount = 1;
 11274  003C  3001               	movlw	1
 11275  003D  00D8               	movwf	_RxAddrCount^(0+128)	;volatile
 11276  003E  01D9               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
 11277                           
 11278                           ;DMX.c: 242: DMXPeriod = DMXPeriodConst;
 11279  003F  0868               	movf	_DMXPeriodConst^(0+128),w	;volatile
 11280  0040  00ED               	movwf	_DMXPeriod^(0+128)
 11281                           
 11282                           ;DMX.c: 243: DMXPeriodConst = 0;
 11283  0041  01E8               	clrf	_DMXPeriodConst^(0+128)	;volatile
 11284                           
 11285                           ;DMX.c: 244: } else if (RxDat == 0xCC) {
 11286  0042  28DB               	goto	i1l4853
 11287  0043                     i1l4781:	
 11288  0043  30CC               	movlw	204
 11289  0044  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
 11290  0045  1D03               	btfss	3,2
 11291  0046  284B               	goto	i1l4785
 11292                           
 11293                           ;DMX.c: 246: RxState = RX_RDM_READ_SubStartCode;
 11294  0047  3003               	movlw	3
 11295  0048  0021               	movlb	1	; select bank1
 11296  0049  00E9               	movwf	_RxState^(0+128)	;volatile
 11297                           
 11298                           ;DMX.c: 248: } else {
 11299  004A  28DB               	goto	i1l4853
 11300  004B                     i1l4785:	
 11301                           
 11302                           ;DMX.c: 249: RxState = RX_WAIT_FOR_BREAK;
 11303  004B  0021               	movlb	1	; select bank1
 11304  004C  01E9               	clrf	_RxState^(0+128)	;volatile
 11305  004D  28DB               	goto	i1l4853
 11306  004E                     i1l4787:	
 11307                           
 11308                           ;DMX.c: 254: RxDat = RCREG;
 11309  004E  0023               	movlb	3	; select bank3
 11310  004F  0819               	movf	25,w	;volatile
 11311  0050  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11312                           
 11313                           ;DMX.c: 255: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
 11314  0051  0021               	movlb	1	; select bank1
 11315  0052  085B               	movf	(_DMX_Address+1)^(0+128),w
 11316  0053  0259               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
 11317  0054  1D03               	skipz
 11318  0055  2858               	goto	u290_25
 11319  0056  085A               	movf	_DMX_Address^(0+128),w
 11320  0057  0258               	subwf	_RxAddrCount^(0+128),w	;volatile
 11321  0058                     u290_25:	
 11322  0058  1C03               	skipc
 11323  0059  2862               	goto	i1l4795
 11324  005A  085A               	movf	_DMX_Address^(0+128),w
 11325  005B  045B               	iorwf	(_DMX_Address+1)^(0+128),w
 11326  005C  1903               	btfsc	3,2
 11327  005D  2862               	goto	i1l4795
 11328                           
 11329                           ;DMX.c: 256: {
 11330                           ;DMX.c: 257: *RxDataPtr = RxDat;
 11331  005E  086A               	movf	_RxDataPtr^(0+128),w
 11332  005F  20EC  3180         	fcall	PL162	;call to abstracted procedure
 11333                           
 11334                           ;DMX.c: 258: RxDataPtr++;
 11335  0061  0AEA               	incf	_RxDataPtr^(0+128),f
 11336  0062                     i1l4795:	
 11337                           
 11338                           ;DMX.c: 259: }
 11339                           ;DMX.c: 260: RxAddrCount++;
 11340  0062  0AD8               	incf	_RxAddrCount^(0+128),f	;volatile
 11341  0063  1903               	skipnz
 11342  0064  0AD9               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
 11343                           
 11344                           ;DMX.c: 262: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
 11345  0065  085A               	movf	_DMX_Address^(0+128),w
 11346  0066  3E04               	addlw	4
 11347  0067  00F0               	movwf	??_DMX_interrput
 11348  0068  3000               	movlw	0
 11349  0069  3D5B               	addwfc	(_DMX_Address+1)^(0+128),w
 11350  006A  00F1               	movwf	??_DMX_interrput+1
 11351  006B  0259               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
 11352  006C  1D03               	skipz
 11353  006D  2870               	goto	u292_25
 11354  006E  0870               	movf	??_DMX_interrput,w
 11355  006F  0258               	subwf	_RxAddrCount^(0+128),w	;volatile
 11356  0070                     u292_25:	
 11357  0070  1C03               	skipc
 11358  0071  28DB               	goto	i1l4853
 11359  0072  085A               	movf	_DMX_Address^(0+128),w
 11360  0073  045B               	iorwf	(_DMX_Address+1)^(0+128),w
 11361  0074  1903               	btfsc	3,2
 11362  0075  28DB               	goto	i1l4853
 11363                           
 11364                           ;DMX.c: 263: DMX_Flags.RxNew = 1;
 11365  0076  1476               	bsf	_DMX_Flags,0	;volatile
 11366                           
 11367                           ;DMX.c: 264: RxState = RX_WAIT_FOR_BREAK;
 11368                           
 11369                           ;DMX.c: 265: RxTimer = 0;
 11370                           
 11371                           ;DMX.c: 266: DMX_Flags.RxTimeout = 0;
 11372  0077  20F2  3180         	fcall	PL176	;call to abstracted procedure
 11373  0079  28DB               	goto	i1l4853
 11374  007A                     i1l4807:	
 11375                           
 11376                           ;DMX.c: 270: RxDat = RCREG;
 11377  007A  0023               	movlb	3	; select bank3
 11378  007B  0819               	movf	25,w	;volatile
 11379  007C  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11380                           
 11381                           ;DMX.c: 271: if (RxDat == 0x01)
 11382  007D  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
 11383  007E  28DB               	goto	i1l4853
 11384                           
 11385                           ;DMX.c: 272: {
 11386                           ;DMX.c: 273: RxState = RX_RDM_READ_DATA;
 11387  007F  3004               	movlw	4
 11388  0080  0021               	movlb	1	; select bank1
 11389  0081  00E9               	movwf	_RxState^(0+128)	;volatile
 11390                           
 11391                           ;DMX.c: 274: ReadCount = 23;
 11392  0082  3017               	movlw	23
 11393  0083  00F8               	movwf	_ReadCount	;volatile
 11394                           
 11395                           ;DMX.c: 275: PD_Flag = 0;
 11396  0084  0022               	movlb	2	; select bank2
 11397  0085  01C8               	clrf	_PD_Flag^(0+256)	;volatile
 11398  0086  28CC               	goto	L10
 11399  0087                     i1l4815:	
 11400                           
 11401                           ;DMX.c: 280: RxDat = RCREG;
 11402  0087  0023               	movlb	3	; select bank3
 11403  0088  0819               	movf	25,w	;volatile
 11404  0089  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11405                           
 11406                           ;DMX.c: 281: RX_RDM_Data.value[ReadCount] = RxDat;
 11407  008A  0878               	movf	_ReadCount,w
 11408  008B  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
 11409  008C  20EC  3180         	fcall	PL162	;call to abstracted procedure
 11410                           
 11411                           ;DMX.c: 283: if (ReadCount == 2 && RX_RDM_Data.value[ReadCount] > 0 && PD_Flag == 0) {
 11412  008E  3002               	movlw	2
 11413  008F  0678               	xorwf	_ReadCount,w	;volatile
 11414  0090  1D03               	btfss	3,2
 11415  0091  28A4               	goto	i1l4829
 11416  0092  0878               	movf	_ReadCount,w
 11417  0093  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
 11418  0094  0086               	movwf	6
 11419  0095  0801               	movf	1,w
 11420  0096  1903               	btfsc	3,2
 11421  0097  28A4               	goto	i1l4829
 11422  0098  0022               	movlb	2	; select bank2
 11423  0099  0848               	movf	_PD_Flag^(0+256),w	;volatile
 11424  009A  0449               	iorwf	(_PD_Flag+1)^(0+256),w	;volatile
 11425  009B  1D03               	btfss	3,2
 11426  009C  28A4               	goto	i1l4829
 11427                           
 11428                           ;DMX.c: 284: RxState = RX_RDM_PD;
 11429  009D  3005               	movlw	5
 11430  009E  0021               	movlb	1	; select bank1
 11431  009F  00E9               	movwf	_RxState^(0+128)	;volatile
 11432                           
 11433                           ;DMX.c: 285: tmp8 = 200-1;
 11434  00A0  30C7               	movlw	199
 11435  00A1  00F9               	movwf	_tmp8
 11436  00A2                     i1l4827:	
 11437                           
 11438                           ;DMX.c: 286: ReadCount--;
 11439  00A2  03F8               	decf	_ReadCount,f	;volatile
 11440                           
 11441                           ;DMX.c: 287: break;
 11442  00A3  28DB               	goto	i1l4853
 11443  00A4                     i1l4829:	
 11444                           
 11445                           ;DMX.c: 288: }
 11446                           ;DMX.c: 289: if (ReadCount == 0) {
 11447  00A4  0878               	movf	_ReadCount,w	;volatile
 11448  00A5  1D03               	btfss	3,2
 11449  00A6  28A2               	goto	i1l4827
 11450                           
 11451                           ;DMX.c: 290: DMX_Flags.RDMNew = 1;
 11452  00A7  1776               	bsf	_DMX_Flags,6	;volatile
 11453                           
 11454                           ;DMX.c: 291: RxState = RX_WAIT_FOR_BREAK;
 11455  00A8  0021               	movlb	1	; select bank1
 11456                           
 11457                           ;DMX.c: 292: RxTimer = 0;
 11458                           
 11459                           ;DMX.c: 293: DMX_Flags.RxTimeout = 0;
 11460  00A9  20F2  3180         	fcall	PL176	;call to abstracted procedure
 11461  00AB  28A2               	goto	i1l4827
 11462  00AC                     i1l4839:	
 11463                           
 11464                           ;DMX.c: 299: RxDat = RCREG;
 11465  00AC  0023               	movlb	3	; select bank3
 11466  00AD  0819               	movf	25,w	;volatile
 11467  00AE  00F2               	movwf	DMX_interrput@RxDat	;volatile
 11468                           
 11469                           ;DMX.c: 300: PD.u8[tmp8] = RxDat;
 11470  00AF  0879               	movf	_tmp8,w
 11471  00B0  3E18               	addlw	24
 11472  00B1  00F0               	movwf	??_DMX_interrput
 11473  00B2  3023               	movlw	35
 11474  00B3  01F1               	clrf	??_DMX_interrput+1
 11475  00B4  3DF1               	addwfc	??_DMX_interrput+1,f
 11476  00B5  0870               	movf	??_DMX_interrput,w
 11477  00B6  0086               	movwf	6
 11478  00B7  0871               	movf	??_DMX_interrput+1,w
 11479  00B8  0087               	movwf	7
 11480  00B9  0872               	movf	DMX_interrput@RxDat,w	;volatile
 11481  00BA  0081               	movwf	1
 11482                           
 11483                           ;DMX.c: 301: if ((200 - RX_RDM_Data.PDL) == tmp8) {
 11484  00BB  01F1               	clrf	??_DMX_interrput+1
 11485  00BC  0022               	movlb	2	; select bank2
 11486  00BD  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
 11487  00BE  3CC8               	sublw	200
 11488  00BF  00F0               	movwf	??_DMX_interrput
 11489  00C0  1C03               	skipc
 11490  00C1  03F1               	decf	??_DMX_interrput+1,f
 11491  00C2  0679               	xorwf	_tmp8,w
 11492  00C3  0471               	iorwf	??_DMX_interrput+1,w
 11493  00C4  1D03               	skipz
 11494  00C5  28CE               	goto	i1l4847
 11495                           
 11496                           ;DMX.c: 302: RxState = RX_RDM_READ_DATA;
 11497  00C6  3004               	movlw	4
 11498  00C7  0021               	movlb	1	; select bank1
 11499  00C8  00E9               	movwf	_RxState^(0+128)	;volatile
 11500                           
 11501                           ;DMX.c: 303: PD_Flag = 1;
 11502  00C9  3001               	movlw	1
 11503  00CA  0022               	movlb	2	; select bank2
 11504  00CB  00C8               	movwf	_PD_Flag^(0+256)	;volatile
 11505  00CC                     L10:	
 11506  00CC  01C9               	clrf	(_PD_Flag+1)^(0+256)	;volatile
 11507                           
 11508                           ;DMX.c: 304: }else{
 11509  00CD  28DB               	goto	i1l4853
 11510  00CE                     i1l4847:	
 11511                           
 11512                           ;DMX.c: 305: tmp8--;
 11513  00CE  03F9               	decf	_tmp8,f
 11514  00CF  28DB               	goto	i1l4853
 11515  00D0                     i1l4851:	
 11516  00D0  0021               	movlb	1	; select bank1
 11517  00D1  0869               	movf	_RxState^(0+128),w	;volatile
 11518                           
 11519                           ; Switch size 1, requested type "space"
 11520                           ; Number of cases is 6, Range of values is 0 to 5
 11521                           ; switch strategies available:
 11522                           ; Name         Instructions Cycles
 11523                           ; direct_byte           18     6 (fixed)
 11524                           ; simple_byte           19    10 (average)
 11525                           ; jumptable            260     6 (fixed)
 11526                           ;	Chosen strategy is direct_byte
 11527  00D2  0084               	movwf	4
 11528  00D3  3006               	movlw	6
 11529  00D4  0204               	subwf	4,w
 11530  00D5  1803               	skipnc
 11531  00D6  28DB               	goto	i1l4853
 11532  00D7  3183               	movlp	high i1S6395
 11533  00D8  3504               	lslf	4,w
 11534  00D9  3E00               	addlw	low i1S6395
 11535  00DA  0082               	movwf	2
 11536  00DB                     i1l4853:	
 11537                           
 11538                           ;DMX.c: 310: if (RxTimer > 2400) {
 11539  00DB  0021               	movlb	1	; select bank1
 11540  00DC  0857               	movf	(_RxTimer+1)^(0+128),w	;volatile
 11541  00DD  3A80               	xorlw	128
 11542  00DE  00F0               	movwf	??_DMX_interrput
 11543  00DF  3089               	movlw	137
 11544  00E0  0270               	subwf	??_DMX_interrput,w
 11545  00E1  1D03               	skipz
 11546  00E2  28E5               	goto	u300_25
 11547  00E3  3061               	movlw	97
 11548  00E4  0256               	subwf	_RxTimer^(0+128),w	;volatile
 11549  00E5                     u300_25:	
 11550  00E5  1C03               	skipc
 11551  00E6  0008               	return
 11552                           
 11553                           ;DMX.c: 311: DMX_Flags.RxTimeout = 1;
 11554  00E7  1576               	bsf	_DMX_Flags,2	;volatile
 11555                           
 11556                           ;DMX.c: 312: RxTimer = 0;
 11557  00E8  0021               	movlb	1	; select bank1
 11558  00E9  01D6               	clrf	_RxTimer^(0+128)	;volatile
 11559  00EA  01D7               	clrf	(_RxTimer+1)^(0+128)	;volatile
 11560  00EB  0008               	return
 11561  00EC                     __end_of_DMX_interrput:	
 11562  007E                     btemp	set	126	;btemp
 11563  007E                     int$flags	set	126
 11564  007E                     wtemp0	set	126
 11565  00EC                     PL162:	
 11566  00EC  0086               	movwf	6
 11567  00ED  3001               	movlw	1	; select bank2/3
 11568  00EE  0087               	movwf	7
 11569  00EF  0872               	movf	DMX_interrput@RxDat,w	;volatile
 11570  00F0  0081               	movwf	1
 11571  00F1  0008               	return
 11572  00F2                     __end_ofPL162:	
 11573  00F2                     PL176:	
 11574  00F2  01E9               	clrf	_RxState^(0+128)	;volatile
 11575  00F3  01D6               	clrf	_RxTimer^(0+128)	;volatile
 11576  00F4  01D7               	clrf	(_RxTimer+1)^(0+128)	;volatile
 11577  00F5  1176               	bcf	_DMX_Flags,2	;volatile
 11578  00F6  0008               	return
 11579  00F7                     __end_ofPL176:	
 11580                           
 11581                           	psect	swtext2
 11582  0300                     __pswtext2:	
 11583  0300                     i1S6395:	
 11584  0300  3180  282A         	ljmp	i1l4771
 11585  0302  3180  282E         	ljmp	i1l538
 11586  0304  3180  284E         	ljmp	i1l4787
 11587  0306  3180  287A         	ljmp	i1l4807
 11588  0308  3180  2887         	ljmp	i1l4815
 11589  030A  3180  28AC         	ljmp	i1l4839


Data Sizes:
    Strings     0
    Constant    771
    Data        64
    BSS         212
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     76      77
    BANK1            80      0      79
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      8      40
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            72      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    PD_Read_String@u8ptr	PTR unsigned char  size(1) Largest target is 32
		 -> DEVICE_LABEL(BANK4[32]), 

    PD_write_String@u8ptr	PTR unsigned char  size(2) Largest target is 32
		 -> MANUFACTURER_LABEL(CODE[16]), DEVICE_MODEL_DESCRIPTION(CODE[14]), BOOT_SOFTWARE_VERSION_LABEL(CODE[31]), SOFTWARE_VERSION_LABEL(CODE[25]), 
		 -> DEVICE_LABEL(BANK4[32]), SLOT_DESCRIPTION_2(CODE[8]), SLOT_DESCRIPTION_1(CODE[13]), SLOT_DESCRIPTION_0(CODE[10]), 
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    sp__PD_Read_u32ptr	PTR unsigned long  size(2) Largest target is 200
		 -> PD(BIGRAM[200]), 

    PD_ID_ptr	PTR unsigned long  size(2) Largest target is 200
		 -> NULL(NULL[0]), PD(BIGRAM[200]), 

    PD_Manu_ptr	PTR unsigned int  size(2) Largest target is 200
		 -> NULL(NULL[0]), PD(BIGRAM[200]), 

    sp__PD_Read_u16ptr	PTR unsigned int  size(2) Largest target is 200
		 -> PD(BIGRAM[200]), 

    sp__PD_Read_u8ptr	PTR unsigned char  size(2) Largest target is 200
		 -> PD(BIGRAM[200]), 

    PFM_Read_String@dataptr	PTR unsigned char  size(1) Largest target is 32
		 -> DEVICE_LABEL(BANK4[32]), 

    PFM_write_String@u8ptr	PTR unsigned char  size(1) Largest target is 32
		 -> DEVICE_LABEL(BANK4[32]), 

    BytePtr	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK2[4]), 

    PWMLDCONptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 

    S90_slot_description$description	PTR const unsigned char  size(2) Largest target is 13
		 -> SLOT_DESCRIPTION_2(CODE[8]), SLOT_DESCRIPTION_1(CODE[13]), SLOT_DESCRIPTION_0(CODE[10]), 

    SLOT_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> SLOT_DESCRIPTION_2(CODE[8]), SLOT_DESCRIPTION_1(CODE[13]), SLOT_DESCRIPTION_0(CODE[10]), 

    S85_personality_definition$description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 

    PERSONALITY_DEFINITIONS.description	PTR const unsigned char  size(2) Largest target is 13
		 -> PERSONALITY_6(CODE[13]), PERSONALITY_5(CODE[13]), PERSONALITY_4(CODE[6]), PERSONALITY_3(CODE[6]), 
		 -> PERSONALITY_2(CODE[6]), PERSONALITY_1(CODE[6]), 


Critical Paths under _main in COMMON

    _timer2_loop->_PWM_TurnOff
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_PD_Read_u8ptr
    _RDM_SET_CC->_PFM_Erase
    _RDM_Identify_Switch->_PWM_TurnOff
    _PD_Read_String->_PD_Read_u8ptr
    _RDM_GET_CC->_PD_Read_u8ptr
    _RDM_GET_CC->_PD_write_u8
    _RDM_GET_CC->___wmul
    _PD_write_u16->___wmul
    _PD_write_String->_PD_write_u8
    _PD_write_String->___wmul
    _RDM_init->_PFM_Erase
    _RDM_init->_PFM_Read
    _PFM_Write->_PFM_Read
    _PFM_Read_String->_PFM_Read
    _Get_FootPrint->___wmul
    _DMX_loop->___awtoft
    _DMX_loop->___lbtoft
    ___fttol->___lbtoft
    ___ftsub->___lbtoft
    ___ftadd->___lbtoft
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_DMX_loop
    _timer2_loop->_PWM_TurnOn
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_TXSTART->_RDM_get_checkSum
    _PD_write_u16->___wmul
    _PD_write_String->___wmul
    _RDM_init->_Get_FootPrint
    _Get_FootPrint->___wmul
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_DMX_loop

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   74865
                           _DMX_init
                           _DMX_loop
                           _RDM_init
                        _RDM_rx_loop
                        _timer2_loop
                         _timer_init
 ---------------------------------------------------------------------------------
 (1) _timer_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_loop                                          0     0      0       0
                        _PWM_TurnOff
                         _PWM_TurnOn
 ---------------------------------------------------------------------------------
 (2) _PWM_TurnOn                                           5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0   26472
                                             29 BANK0      1     1      0
                            _PD_init
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     446
                                             25 BANK0      4     4      0
                     _PD_Read_u16ptr
                     _PD_Read_u32ptr
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u32ptr                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0   11541
                      _Get_FootPrint
                     _PD_Read_String
                     _PD_Read_u16ptr
                      _PD_Read_u8ptr
                          _PFM_Erase
                          _PFM_Write
                   _PFM_write_String
                _RDM_Identify_Switch
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_Identify_Switch                                  0     0      0       0
                        _PWM_TurnOff
 ---------------------------------------------------------------------------------
 (2) _PWM_TurnOff                                          2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _PFM_write_String                                     4     0      4     408
                                              0 BANK0      4     0      4
                         _PFM_Unlock
 ---------------------------------------------------------------------------------
 (3) _PD_Read_String                                       2     1      1     208
                                              0 BANK0      2     1      1
                      _PD_Read_u8ptr
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0   14039
                                             25 BANK0      2     2      0
                     _PD_Read_u16ptr
                      _PD_Read_u8ptr
                    _PD_write_String
                       _PD_write_u16
                       _PD_write_u32
                        _PD_write_u8
                        _RDM_TXSTART
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     446
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     446
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (3) _PD_write_u32                                         9     5      4     684
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _PD_write_u16                                         7     5      2    1936
                                              4 BANK0      7     5      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PD_write_String                                      3     0      3    2384
                                              4 BANK0      3     0      3
                        _PD_write_u8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PD_write_u8                                          3     3      0      31
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u8ptr                                        2     0      2       0
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PD_Read_u16ptr                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _PD_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             1     1      0   12321
                                              5 BANK0      1     1      0
                      _Get_FootPrint
                          _PFM_Erase
                           _PFM_Read
                    _PFM_Read_String
                          _PFM_Write
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _PFM_Write                                            4     0      4    1601
                                              0 BANK0      4     0      4
                           _PFM_Read
 ---------------------------------------------------------------------------------
 (2) _PFM_Read_String                                      3     0      3     921
                                              0 BANK0      3     0      3
                           _PFM_Read
 ---------------------------------------------------------------------------------
 (4) _PFM_Read                                             2     0      2     645
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PFM_Erase                                            2     0      2     289
                                              4 COMMON     2     0      2
                         _PFM_Unlock
 ---------------------------------------------------------------------------------
 (4) _PFM_Unlock                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Get_FootPrint                                        1     1      0    8589
                                              4 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    8558
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            11    11      0   36072
                                             73 BANK0      3     3      0
                                              0 BANK4      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              4 COMMON     1     1      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     430
                                             60 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7500
                                             54 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5948
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1382
                                             12 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5149
                                             27 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
                   _timer2_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer2_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DMX_init
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_init
     _Get_FootPrint
       ___wmul
     _PFM_Erase
       _PFM_Unlock
     _PFM_Read
     _PFM_Read_String
       _PFM_Read
     _PFM_Write
       _PFM_Read
     ___bmul
   _RDM_rx_loop
     _PD_init
     _RDM_GET_CC
       _PD_Read_u16ptr
       _PD_Read_u8ptr
       _PD_write_String
         _PD_write_u8
         ___wmul (ARG)
       _PD_write_u16
         ___wmul (ARG)
       _PD_write_u32
       _PD_write_u8
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
       ___wmul
     _RDM_SET_CC
       _Get_FootPrint
         ___wmul
       _PD_Read_String
         _PD_Read_u8ptr
       _PD_Read_u16ptr
       _PD_Read_u8ptr
       _PFM_Erase
         _PFM_Unlock
       _PFM_Write
         _PFM_Read
       _PFM_write_String
         _PFM_Unlock
       _RDM_Identify_Switch
         _PWM_TurnOff
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _PD_Read_u16ptr
       _PD_Read_u32ptr
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer2_loop
     _PWM_TurnOff
     _PWM_TurnOn
   _timer_init

 _isr (ROOT)
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt
   _timer2_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      28      13       50.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               48      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Oct 20 16:19:28 2017

                                  _i 014A                                    pc 0002  
                     ___bmul@product 0020                          __CFG_CP$OFF 0000  
                                 PL2 0D79                                   PL4 0D8F  
                                 PL6 0D95                                   PL8 1684  
                                 _PD 2318                                   _RD 0CA8  
                                 _WR 0CA9                    _TX_Discovery_Flag 0146  
                ___wmul@multiplicand 0022                __size_of_PD_write_u16 0040  
              __size_of_PD_write_u32 004A            __size_of_timer2_interrupt 0010  
                       ___ftadd@exp1 0055                         ___ftadd@exp2 0054  
                                PL10 169E                                  PL20 0DE9  
                                PL12 0DB2                                  PL30 16C4  
                                PL22 01EF                                  PL14 0DB8  
                                PL40 01FB                                  PL32 0E00  
                                PL24 0DF1                                  PL16 16AD  
                                PL50 16E0                                  PL42 0E1E  
                                PL34 16CA                                  PL26 16B8  
                                PL18 0DD1                                  PL60 170F  
                                PL52 16E7                                  PL44 16D4  
                                PL36 0E07                                  PL28 0DF9  
                                PL70 0E4E                                  PL62 0E3E  
                                PL54 16EF                                  PL46 0E2B  
                                PL38 0E16                                  PL80 0E5C  
                                PL72 1720                                  PL64 0E47  
                                PL56 16FA                                  PL48 0E37  
                                PL90 0E79                                  PL82 0E62  
                                PL74 0E55                                  PL66 0182  
                                PL58 1705                                  PL92 1738  
                                PL84 1730                                  PL76 027E  
                                PL68 1719                                  PL94 0209  
                                PL86 0E6A                                  PL78 1727  
                                PL96 1740                                  PL88 0E72  
                                PL98 0E80              _PERSONALITY_DEFINITIONS 1A00  
                         _PWM_TurnOn 01BF                         ___ftadd@sign 0053  
                                l905 10A1                                  l498 0ADC  
                                l893 1068                                  l898 108C  
                                _GIE 005F                                  _PR2 001B  
                                _UID 00BF                                  _TX9 0CF6  
                                _PWM 1800                                  _isr 0004  
                                wreg 0009                          _PD_write_u8 14B3  
                               PL100 1746                                 PL110 0F7E  
                               PL102 0E86                                 PL120 0EB0  
                               PL112 0EA2                                 PL104 0E8D  
                               PL130 1761                                 PL122 1754  
                               PL114 018C                                 PL106 0E94  
                               PL140 0ECF                                 PL132 0EBD  
                               PL124 175A                                 PL116 174D  
                               PL108 0E9B                                 PL150 0287  
                               PL142 176D                                 PL134 1767  
                               PL126 0FDE                                 PL118 0EA9  
                               PL160 0FFA                                 PL152 0EDB  
                               PL144 0ED5                                 PL136 0EC3  
                               PL128 0EB7                                 PL170 1793  
                               PL162 00EC                                 PL154 020F  
                               PL146 1773                                 PL138 0EC9  
                               PL180 0F85                                 PL172 1798  
                               PL164 1789                                 PL156 177F  
                               PL148 1779                                 PL182 17A2  
                               PL174 0EE0                                 PL166 0215  
                               PL158 1784                                 PL176 00F2  
                               PL168 178F                                 PL178 179D  
                       __CFG_LVP$OFF 0000                         ___ftdiv@cntr 0044  
                        _PWM_TurnOff 01A7                         ___ftdiv@sign 0049  
                               l1309 1227                                 l1543 13D2  
                               l1582 1613                                 l1583 161E  
                               l1809 0F6D                                 l4313 0C0C  
                               l1833 0D18                                 l1585 1631  
                               l1578 1600                                 l1851 0C60  
                               l6003 0933                                 l4317 0C1B  
                               l4421 0FC7                                 l4413 0FBA  
                               l6021 09B5                                 l6103 0B38  
                               l4425 0FD5                                 l4409 0FB3  
                               l6113 0BD3                                 l6041 0A3B  
                               l5411 0CF5                                 l4419 0FBE  
                               l6115 0BD5                                 l5243 1562  
                               l3643 01A7                                 l5261 0F4C  
                               l1797 0F48                                 l5413 0CF9  
                               l5405 0CE7                                 l6117 0BEB  
                               l6037 0A2E                                 l5325 1291  
                               l6141 109E                                 l6133 1066  
                               l6205 08BC                                 l5271 0F6B  
                               l5263 0F50                                 l5431 0D23  
                               l5423 0D10                                 l5415 0CFE  
                               l4391 0F92                                 l6071 0AC9  
                               l6055 0A67                                 l5247 1568  
                               l5343 153F                                 l3671 17C2  
                               l3663 17AD                                 l5319 1299  
                               l6143 109F                                 l5273 0F63  
                               l5265 0F55                                 l5425 0D14  
                               l5417 0D02                                 l4393 0F97  
                               l6057 0A79                                 l5353 1506  
                               l3673 17CD                                 l3665 17BB  
                               l3649 01A9                                 l6145 10A0  
                               l6129 1043                                 l6161 019A  
                               l5267 0F5E                                 l6091 0AEF  
                               l6075 0AD6                                 l5437 0D2B  
                               l3677 17F5                                 l5701 10C7  
                               l5541 161D                                 l5509 15C7  
                               l5461 01C1                                 l5453 01BF  
                               l5383 0CC3                                 l6095 0B18  
                               l3839 14E5                                 l5607 13CA  
                               l5449 0D3C                                 l5393 0CD9  
                               l5481 100C                                 l5641 143F  
                               l5609 13D0                                 l5561 12E6  
                               l5369 1268                                 l5803 0F00  
                               l5387 0CCA                                 l5483 102B  
                               l5731 121D                                 l3867 1663  
                               l5651 1453                                 l5627 13F5  
                               l5563 12EB                                 l5555 12AD  
                               l3795 01A4                                 l5547 1620  
                               l5821 0F14                                 l5645 1445  
                               l5581 1358                                 l5573 1319  
                               l5565 12F5                                 l5557 12AE  
                               l5709 10E2                                 l5717 10F7  
                               l6381 1626                                 l5751 0D58  
                               l6391 14AA                                 l5663 1455  
                               l5639 142D                                 l5591 139F  
                               l5575 131E                                 l5567 12FC  
                               l5559 12B7                                 l6383 1100  
                               l5719 1113                                 l5487 1588  
                               l5913 0907                                 l5833 0F22  
                               l5825 0F18                                 l5921 1137  
                               l5649 144D                                 l5593 13A9  
                               l5577 134B                                 l5569 1306  
                               l6385 110B                                 l5489 1589  
                               l5851 0C30                                 l5931 114A  
                               l6387 1476                                 l5595 13B5  
                               l5587 138E                                 l5579 1350  
                               l5667 146A                                 l5691 10A3  
                               ?_isr 0070                                 l5781 0C73  
                               l5837 0F26                                 l5933 1157  
                               l6389 149F                                 l5589 1395  
                               l5669 14B2                                 l5759 0C52  
                               l5599 13BB                                 l5697 10BD  
                               l5689 10A2                                 l5787 0C89  
                               l5963 11A5                                 l5947 115E  
                               l5699 10C1                                 l5973 11CF  
                               l5965 11B6                                 l5949 118C  
                               l5799 0EF2                                 _CFGS 0CAE  
                               _BRGH 0CF2                                 _FERR 0CEA  
                               _FREE 0CAC                                 u2405 0F9A  
                               u4200 1074                                 u1810 166B  
                               u1740 01A2                                 u4215 1086  
                               u4155 103C                                 u3605 15DA  
                               u3295 1259                                 u4175 1059  
                               u3625 15FC                                 _PEIE 005E  
                               u3575 15A2                                 u3595 15C3  
                               _RCIE 048D                                 _RCIF 008D  
                               u3880 1135                                 u3785 0C80  
                               _LWLO 0CAD                                 _TMR1 0016  
                               _SPEN 0CEF                                 _TX9D 0CF0  
                               _SLOT 1A57                                 _Addr 006C  
                               _TXIE 048C                                 _TXEN 0CF5  
                               _WREN 0CAA                                 _TXIF 008C  
                               _SYNC 0CF4                  _TX_RDM_Response_Set 17D6  
                               _main 086D                         ___ftpack@arg 0020  
                       ___ftpack@exp 0023                                 _tmp8 0079  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                      __end_of_PD_init 1684  
                               start 0013                           _TX_PDCount 00E2  
                         _TX_PD_Flag 00CC             __end_of_PFM_write_String 12AD  
                        ?_RDM_GET_CC 0070                         _PD_write_u32 1516  
                       _PD_write_u16 14C5                    ___bmul@multiplier 0021  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0039  
                       ___ftmul@sign 003A                          ?_RDM_SET_CC 0070  
                       ___fttol@exp1 0068                         ___fttol@lval 0064  
                              ??_isr 0074                        __CFG_PLLEN$ON 0000  
                        ?_PFM_Unlock 0070                 ?_TX_RDM_Response_Set 0070  
                        _RX_RDM_Data 0120                                ?_main 0070  
                    __end_of___ftadd 0D4E                        __CFG_WDTE$OFF 0000  
                   __end_of_DMX_init 0925                                _ANSA2 0C62  
                              _ANSC0 0C70                      __end_of___ftdiv 0CA0  
                              _ANSC1 0C71                                _ANSC2 0C72  
                              _ANSC3 0C73                     __end_of_DMX_loop 0BED  
                 __size_of_PFM_Erase 000C                      __end_of___ftmul 0F40  
                              _T1CON 0018                      __end_of___ftsub 0C44  
                    __end_of___fttol 0FDE                                _T2CON 001C  
                              _LATC3 0873                                _LATC4 0874  
                              i1l538 002E                                i1l916 0121  
                              i1l925 0181                                i1l919 014B  
                              _PMADR 0191                                _PMDAT 0193  
                              _RCREG 0199            __size_of_RDM_tx_interrupt 008B  
                              _RCSTA 019D     __end_of_DEVICE_MODEL_DESCRIPTION 1AB2  
                 __size_of_PFM_Write 0035                                _RXPPS 0E15  
                              _TXREG 019A                     __end_of_PFM_Read 121A  
               PD_write_String@u8len 0026                 PD_write_String@u8ptr 0024  
                      __CFG_WRT$HALF 0000                                _Timer 00B8  
                   __end_of_RDM_init 120C                        ___awtoft@sign 0074  
                    _PFM_Read_String 100B                      PD_write_u16@u16 0024  
                    PD_write_u32@u32 0020                                _tmp16 00CE  
                      ___ftpack@sign 0024                       __CFG_BOREN$OFF 0000  
                        _TX_RDM_Data 014C                                status 0003  
                              wtemp0 007E                         __end_ofPL100 174D  
                       __end_ofPL110 0F85                         __end_ofPL102 0E8D  
                       __end_ofPL120 0EB7                         __end_ofPL112 0EA9  
                       __end_ofPL104 0E94                         __end_ofPL130 1767  
                       __end_ofPL122 175A                         __end_ofPL114 0192  
                       __end_ofPL106 0E9B                         __end_ofPL140 0ED5  
                       __end_ofPL132 0EC3                         __end_ofPL124 1761  
                       __end_ofPL116 1754                         __end_ofPL108 0EA2  
                       __end_ofPL150 028D                         __end_ofPL142 1773  
                       __end_ofPL134 176D                         __end_ofPL126 0FE5  
                       __end_ofPL118 0EB0                         __end_ofPL160 1000  
                       __end_ofPL152 0EE0                         __end_ofPL144 0EDB  
                       __end_ofPL136 0EC9                         __end_ofPL128 0EBD  
                       __end_ofPL170 1798                         __end_ofPL162 00F2  
                       __end_ofPL154 0215                         __end_ofPL146 1779  
                       __end_ofPL138 0ECF                         __end_ofPL180 0F89  
                       __end_ofPL172 179D                         __end_ofPL164 178F  
                       __end_ofPL156 1784                         __end_ofPL148 177F  
                       __end_ofPL182 17A7                         __end_ofPL174 0EE4  
                       __end_ofPL166 021B                         __end_ofPL158 1789  
                       __end_ofPL176 00F7                         __end_ofPL168 1793  
                       __end_ofPL178 17A2                    ?_RDM_get_checkSum 0020  
           __size_of_PD_write_String 0011                         __end_of_SLOT 1A5C  
                 ??_RDM_get_checkSum 0074                      __initialization 080E  
             _SOFTWARE_VERSION_LABEL 1A7B                         __end_of_main 08C4  
                         _CurrentPWM 01B8                    ?_RDM_discovery_CC 0070  
              ??_TX_RDM_Response_Set 0074                __end_of_Get_FootPrint 1267  
                       ?_RDM_TXSTART 0070                   ??_RDM_discovery_CC 0039  
    __end_ofRDM@SUPPORTED_PARAMETERS 1A36                               ??_main 0076  
                      ___fttol@sign1 0063                          ?_PWM_TurnOn 0070  
                 _MANUFACTURER_LABEL 1A94                  __size_of_RDM_GET_CC 0206  
                    _DMX_repeatcoeff 0168                               i1S6393 02E9  
                             i1S6395 0300                PFM_write_String@u8len 0023  
                          ??_PD_init 0074                PFM_write_String@u8ptr 0022  
                __size_of_RDM_SET_CC 0072                     __end_of___awtoft 0D69  
                   __end_of___ftpack 0F7E                     __end_of___lbtoft 0BFD  
                             _RA2PPS 0E92                               _RC0PPS 0EA0  
                             _RC1PPS 0EA1                               _RC2PPS 0EA2  
                             _RC4PPS 0EA4                               i1l1124 0257  
                             i1l1125 025B                               i1l1126 0261  
                             i1l1127 0266                               i1l1119 0226  
                             u300_25 00E5                               i1l4815 0087  
                             i1l4807 007A                               i1l4827 00A2  
                             i1l4771 002A                               i1l4851 00D0  
                             i1l4923 0272                               i1l4829 00A4  
                             i1l4781 0043                               i1l4853 00DB  
                             i1l4941 0108                               i1l4917 026A  
                             i1l4847 00CE                               i1l4839 00AC  
                             i1l4935 00FE                               i1l4871 0223  
                             i1l4785 004B                               i1l4881 0239  
                             i1l4795 0062                               i1l4787 004E  
                             i1l4947 0113                               i1l4949 0115  
                             i1l4983 016D                               i1l4959 012C  
                             i1l4977 014E                               i1l4987 016F  
                             _INTCON 000B                               u315_25 0165  
                   __end_of___lwtoft 0D79                               u290_25 0058  
                             _PMCON2 0196                               u292_25 0070  
                             _OSCCON 0099               __size_of_DMX_interrput 00D7  
                             _TMR1IE 0488                               _TMR1IF 0088  
                  _DMX_CurrentBright 00AC                               _TMR2IE 0489  
                             _TMR2IF 0089                               _SPBRGH 019C  
                __size_of_PFM_Unlock 0009                               _SPBRGL 019B  
                             _TRISA2 0462                               _TRISC0 0470  
                             _TRISC1 0471                               _TRISC2 0472  
                             _TRISC3 0473                               _TRISC4 0474  
                             _TRISC5 0475                    __end_of_PFM_Erase 1120  
                   PFM_Erase@AddrErs 0074                       __CFG_PWRTE$OFF 0000  
                  __end_of_PFM_Write 125C                               _RxData 0164  
                   _timer1_interrupt 021B                               ___bmul 121A  
                             ___ftge 0BFD                               ___wmul 1560  
                          ??___ftadd 0050                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 0041                            ??___ftmul 0032  
                          ??___ftsub 0075                            ??___fttol 0060  
                       ?_timer2_loop 0070                         ?_RDM_rx_loop 0070  
                         _TimerState 00E0                    __end_of_SLOT_TYPE 1A57  
                   _timer2_interrupt 02C1                               _rxdata 00E5  
            __end_of_PFM_Read_String 102D                ___ftmul@f3_as_product 0036  
                RDM_get_checkSum@len 0038             _DEVICE_MODEL_DESCRIPTION 1AA4  
                       _DEVICE_LABEL 0220               PFM_Read_String@dataptr 0022  
            __size_of_PD_Read_u16ptr 0017              __size_of_PD_Read_u32ptr 001A  
            __end_of__initialization 086A                           ___ftadd@f1 004A  
                         ___ftadd@f2 004D                           ___ftge@ff1 002C  
                         ___ftge@ff2 002F              __size_of_PD_Read_String 0014  
              __end_of_PD_Read_u8ptr 157F                  __size_of_PWM_TurnOn 0030  
                         ___ftdiv@f1 003E                           ___ftdiv@f2 003B  
                         ___ftdiv@f3 0045                            ?_DMX_init 0070  
                          ?_DMX_loop 0070                        _DMX_loop$1925 0069  
                     _DMXPeriodConst 00E8                           ___awtoft@c 0028  
                         ___lbtoft@c 0074                  ___bmul@multiplicand 0074  
                         ___ftmul@f1 002C                           ___ftmul@f2 002F  
                         ___ftsub@f1 0059                           ___ftsub@f2 0056  
                         ___fttol@f1 005C                            ?_PFM_Read 0074  
                     __pcstackCOMMON 0070                  PD_Read_String@u8len 0020  
                PD_Read_String@u8ptr 0021                         __pidataBANK1 0000  
                       __pidataBANK2 0000                         __pidataBANK3 02AD  
                       __pidataBANK4 028D                     _DMX_TargetBright 00A0  
                          ?_RDM_init 0070                    ??_PD_write_String 0076  
                         __end_ofPL2 0D8F                           __end_ofPL4 0D95  
                         __end_ofPL6 0DB2                           __end_ofPL8 169E  
                      _DMX_interrput 0015                           ___lwtoft@c 0028  
                   _RDM_tx_interrupt 00F7                         ?_PD_write_u8 0070  
       __size_of_RDM_Identify_Switch 000C                         ?_PWM_TurnOff 0070  
                         __pbssBANK0 006C                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                      _DMX_sumRepeat 016C                          _RxAddrCount 00D8  
                         ??_DMX_init 0020                           ??_DMX_loop 0240  
                       ??_RDM_GET_CC 0039                    ?_PFM_write_String 0020  
                         __pmaintext 086D                           ??_PFM_Read 0076  
                       ??_RDM_SET_CC 0076                              ?___bmul 0074  
                            ?___ftge 002C                              ?___wmul 0020  
                 ??_PFM_write_String 0074                           ??_RDM_init 0025  
              __end_of_SLOT_LABEL_ID 1A46                           __pintentry 0004  
                       ??_PFM_Unlock 0074                       ?_DMX_interrput 0070  
                            _BAUDCON 019F                            ?___awtoft 0028  
                          ?___ftpack 0020                            ?___lbtoft 0028  
                  _RDM_tx_TimerBreak 17F5                            ?___lwtoft 0028  
                   ?_PFM_Read_String 0020                        _PERSONALITY_1 1AFD  
                      _PERSONALITY_2 1AF7                        _PERSONALITY_3 1AF1  
                      _PERSONALITY_4 1AEB                        _PERSONALITY_5 1ACC  
                      _PERSONALITY_6 1ABF                 __size_of_RDM_TXSTART 001C  
                 ?_RDM_tx_TimerBreak 0070                              _DMXSign 00C5  
                            _PWM1DCH 0D94                              _PWM1DCL 0D93  
                            _PWM2DCH 0DA4                              _PWM2DCL 0DA3  
                            _OSCTUNE 0098                              _PWM3DCH 0DB4  
                            _PWM3DCL 0DB3                              _PWM4DCH 0DC4  
                            _PWM1CON 0D9B                              _PWM4DCL 0DC3  
                            _PWM2CON 0DAB                              _PWM3CON 0DBB  
                            _PWM4CON 0DCB                              _PWM1PHH 0D92  
                            _PWM1PHL 0D91                              _PWM2PHH 0DA2  
                            _PWM2PHL 0DA1                              _PWM3PHH 0DB2  
                            _PWM3PHL 0DB1                              _PWM1PRH 0D96  
                            _PWM4PHH 0DC2                              _PWM1PRL 0D95  
                            _PWM4PHL 0DC1                              _PWM2PRH 0DA6  
                            _PWM2PRL 0DA5                              _PWM3PRH 0DB6  
                            _PWM3PRL 0DB5                              _PD_Flag 0148  
                            _PWM4PRH 0DC6                              _PWM4PRL 0DC5  
                   _Timer_DelayCount 00DF                   __end_of_RDM_GET_CC 14B3  
                            _PD_init 167F                  ??_RDM_tx_TimerBreak 0074  
                 __end_of_RDM_SET_CC 1114                   __end_of_PFM_Unlock 1588  
                          _ADC_Flags 00DC                              _BytePtr 00E4  
                            _TxCount 00D4                              _RxTimer 00D6  
                            _RxState 00E9                              _TxState 00E3  
                    __size_of___bmul 000D                      __size_of___ftge 002C  
                            ___ftadd 0CA0                              ___ftdiv 0C44  
                    __size_of___wmul 0015                              ___ftmul 0EE4  
                            ___ftsub 0C29                              ___fttol 0F89  
          __end_of_RDM_tx_TimerBreak 1800                     _SLOT_DEFINITIONS 1A46  
                         ??___awtoft 0074                           ??___ftpack 0025  
                         ??___lbtoft 0074                              __ptext1 0FE5  
                            __ptext2 0192                              __ptext3 01BF  
                            __ptext4 102D                              __ptext5 1588  
                            __ptext6 1649                              __ptext7 10A2  
                            __ptext8 019B                              __ptext9 01A7  
                       ??_PWM_TurnOn 0020                 __size_of_timer2_loop 0009  
               __size_of_RDM_rx_loop 0075                           ??___lwtoft 0074  
          __size_of_RDM_get_checkSum 002F                         __size_of_isr 000F  
           __end_of_timer1_interrupt 027E                            _FOOTPRINT 00EE  
                            clrloop0 02DE            __size_of_RDM_discovery_CC 00AA  
               RDM_get_checkSum@Data 0020                 end_of_initialization 086A  
                          _DMX_Flags 0076                        PFM_Write@Data 0022  
                          _DMXPeriod 00ED                       _PD_Read_u32ptr 1649  
                     _PD_Read_u16ptr 1632             __end_of_timer2_interrupt 02D1  
                            init_ram 02D1       __end_of_SOFTWARE_VERSION_LABEL 1A94  
                     _PD_Read_String 1267                              initloop 02D2  
                 __end_of_PWM_TurnOn 01EF                       _DMX_difference 00C9  
        __end_of_TX_RDM_Response_Set 17F5                            _PFM_Erase 1114  
                          _PD_ID_ptr 00D0                      ??_DMX_interrput 0070  
                          _PWM1LDCON 0D9F                            _PWM2LDCON 0DAF  
                          _PWM3LDCON 0DBF                            _PFM_Write 1227  
                          _PWM4LDCON 0DCF                         __pstringtext 1800  
                         _timer_init 0FE5                            _PWMDCHptr 01A8  
                          _PWMDCLptr 01B0           PFM_write_String@AddrWrtStr 0020  
                          _SLOT_TYPE 1A4F                     __CFG_FOSC$INTOSC 0000  
             __end_of_PD_Read_u16ptr 1649               __end_of_PD_Read_u32ptr 1663  
               __size_of_PD_write_u8 0012               __end_of_PD_Read_String 127B  
               __size_of_PWM_TurnOff 0018                          ___ftdiv@exp 0048  
             __size_of_Get_FootPrint 000B              RDM@SUPPORTED_PARAMETERS 1A1E  
                    _PD_write_String 1505             __end_of_RDM_tx_interrupt 0182  
                      PD_write_u8@u8 0020                          ___ftmul@exp 0035  
                         ?_PFM_Erase 0074                    __size_of_DMX_init 0061  
                  __size_of_DMX_loop 02C8                  _RDM_Identify_Switch 019B  
                         ?_PFM_Write 0020                       __end_of___bmul 1227  
                     __end_of___ftge 0C29                    __size_of_PFM_Read 000E  
         __size_of_RDM_tx_TimerBreak 000B                       __end_of___wmul 1575  
                  __size_of_RDM_init 00EC           __end_of_SLOT_DESCRIPTION_0 1AE3  
         __end_of_SLOT_DESCRIPTION_1 1ABF           __end_of_SLOT_DESCRIPTION_2 1AEB  
                   PFM_Write@AddrWrt 0020                          __end_ofPL10 16AD  
                        __end_ofPL20 0DF1                          __end_ofPL12 0DB8  
                        __end_ofPL30 16CA                          __end_ofPL22 01FB  
                        __end_ofPL14 0DD1                          __end_ofPL40 0209  
                        __end_ofPL32 0E07                          __end_ofPL24 0DF9  
                        __end_ofPL16 16B8                          __end_ofPL50 16E7  
                        __end_ofPL42 0E2B                          __end_ofPL34 16D4  
                        __end_ofPL26 16C4                          __end_ofPL18 0DE9  
                        __end_ofPL60 1719                          __end_ofPL52 16EF  
                        __end_ofPL44 16E0                          __end_ofPL36 0E16  
                        __end_ofPL28 0E00                          __end_ofPL70 0E55  
                        __end_ofPL62 0E47                          __end_ofPL54 16FA  
                        __end_ofPL46 0E37                          __end_ofPL38 0E1E  
                        __end_ofPL80 0E62                          __end_ofPL72 1727  
                        __end_ofPL64 0E4E                          __end_ofPL56 1705  
                        __end_ofPL48 0E3E                          __end_ofPL90 0E80  
                        __end_ofPL82 0E6A                          __end_ofPL74 0E5C  
                        __end_ofPL66 018C                          __end_ofPL58 170F  
                        __end_ofPL92 1740                          __end_ofPL84 1738  
                        __end_ofPL76 0287                          __end_ofPL68 1720  
                        __end_ofPL94 020F                          __end_ofPL86 0E72  
                        __end_ofPL78 1730                          __end_ofPL96 1746  
                        __end_ofPL88 0E79                          __end_ofPL98 0E86  
                start_initialization 080E                          __end_of_PWM 1A00  
                          _ReadCount 0078                          __end_of_isr 0013  
               ?_RDM_Identify_Switch 0070                      ?_PD_Read_u32ptr 0071  
                    ?_PD_Read_u16ptr 0071       Get_FootPrint@Input_Personality 0024  
                    ?_PD_Read_String 0020                            _RxDataPtr 00EA  
                       _DMXStepConst 00E6                        ?_PD_write_u16 0024  
                      ?_PD_write_u32 0020                       PFM_Read@AddrRd 0074  
                   __CFG_LPBOREN$OFF 0000                             ??___bmul 0075  
                           ??___ftge 0075                             ??___wmul 0074  
                        __pdataBANK1 00EB                          __pdataBANK2 0168  
                        __pdataBANK3 01DC                          __pdataBANK4 0220  
                      _IDENTIFY_MODE 00EC                          ?_timer_init 0070  
                      _Get_FootPrint 125C                     _RDM_get_checkSum 17A7  
                  __size_of___awtoft 001B                    __size_of___ftpack 003E  
                  __size_of___lbtoft 0010                          __pbssBIGRAM 2318  
                        __pbssCOMMON 0076               __size_of_PD_Read_u8ptr 000A  
          __size_of_PFM_write_String 0032                            ___latbits 0002  
                  __size_of___lwtoft 0010                        __pcstackBANK0 0020  
                      __pcstackBANK4 0240                ??_RDM_Identify_Switch 0076  
                   _RDM_discovery_CC 1588              __end_of_PD_write_String 1516  
                           ?_PD_init 0070             __end_of_SLOT_DEFINITIONS 1A4F  
    __end_of_PERSONALITY_DEFINITIONS 1A1E                      _DMX_SpaceBright 0138  
                     ??_PD_write_u16 0026                       ??_PD_write_u32 0024  
                        ??_PFM_Erase 0076                             ?___ftadd 004A  
                        ??_PFM_Write 0076                             ?___ftdiv 003B  
                           ?___ftmul 002C                             ?___ftsub 0056  
                           ?___fttol 005C                     __CFG_PPS1WAY$OFF 0000  
                      ??_RDM_TXSTART 0074                       ?_Get_FootPrint 0070  
                          __pswtext1 02E9                            __pswtext2 0300  
                           _ADC_Data 00DD                    ?_timer1_interrupt 0070  
           __size_of_PFM_Read_String 0022                   ??_timer1_interrupt 0070  
                     ___wmul@product 0074                    ?_timer2_interrupt 0070  
                __size_of_timer_init 0015                            _preRxData 01C0  
                          clear_ram0 02DD                             _DMX_init 08C4  
                           _DMX_loop 0925                        _PD_Read_u8ptr 1575  
                 ??_timer2_interrupt 0070                             _PFM_Read 120C  
                 DMX_interrput@RxDat 0072                             _RDM_init 1120  
                      ??_timer2_loop 0076                        ??_RDM_rx_loop 003D  
                  ___wmul@multiplier 0020                    _DEVICE_LABEL_SIZE 00EB  
              _DMX_repeat_hereditary 01DC                  __end_of_RDM_TXSTART 167F  
                        _DMX_Address 00DA                     ?_PD_write_String 0024  
                   __size_of_PD_init 0005                       ?_PD_Read_u8ptr 0074  
                  ?_RDM_tx_interrupt 0070                         _Timer2_Count 00DE  
                 ??_RDM_tx_interrupt 0070                      ??_Get_FootPrint 0076  
                   __size_of___ftadd 00AE                __end_of_DMX_interrput 00EC  
                      _SLOT_LABEL_ID 1A36                     __size_of___ftdiv 005C  
                   __size_of___ftmul 005C                     __size_of___ftsub 001B  
                   __size_of___fttol 0055                             ___awtoft 0D4E  
                           ___ftpack 0F40                             ___lbtoft 0BED  
       __size_of_TX_RDM_Response_Set 001F                             ___lwtoft 0D69  
                   ??_PD_Read_u32ptr 0020                     ??_PD_Read_u16ptr 0020  
           PFM_Read_String@AddrRdStr 0020                  __end_of_timer2_loop 019B  
                __end_of_RDM_rx_loop 10A2                             _checkSum 0144  
                   _PFM_write_String 127B                 __end_of_PD_write_u16 1505  
               __end_of_PD_write_u32 1560                        ??_PD_write_u8 0074  
                   ??_PD_Read_String 0076                             __ptext10 127B  
                           __ptext11 1267                             __ptext20 14B3  
                           __ptext12 12AD                             __ptext21 1575  
                           __ptext13 1663                             __ptext30 157F  
                           __ptext22 1632                             __ptext14 17D6  
                           __ptext31 125C                             __ptext23 167F  
                           __ptext15 17F5                             __ptext40 0BFD  
                           __ptext32 1560                             __ptext24 1120  
                           __ptext16 17A7                             __ptext41 0C44  
                           __ptext33 0925                             __ptext25 121A  
                           __ptext17 1516                             __ptext42 0D4E  
                           __ptext34 0D69                             __ptext26 1227  
                           __ptext18 14C5                             __ptext43 0F40  
                           __ptext35 0BED                             __ptext27 100B  
                           __ptext19 1505                             __ptext44 08C4  
                           __ptext36 0F89                             __ptext28 120C  
                           __ptext37 0C29                             __ptext29 1114  
                           __ptext46 02C1                             __ptext38 0CA0  
                           __ptext47 021B                             __ptext39 0EE4  
                           __ptext48 00F7                             __ptext49 0015  
                      ??_PWM_TurnOff 0074                          _PERSONALITY 00E1  
                 _SLOT_DESCRIPTION_0 1AD9                   _SLOT_DESCRIPTION_1 1AB2  
                 _SLOT_DESCRIPTION_2 1AE3                        __size_of_main 0057  
           __end_of_RDM_get_checkSum 17D6                    ??_PFM_Read_String 0076  
                           int$flags 007E           __end_of_MANUFACTURER_LABEL 1AA4  
           __end_of_RDM_discovery_CC 1632                           _DMXDimming 00E7  
                       ??_timer_init 0074                          _RDM_TXSTART 1663  
              __end_of_PERSONALITY_1 1B03                __end_of_PERSONALITY_2 1AFD  
              __end_of_PERSONALITY_3 1AF7                __end_of_PERSONALITY_4 1AF1  
              __end_of_PERSONALITY_5 1AD9                __end_of_PERSONALITY_6 1ACC  
                         _DMX_Repeat 01E8                             intlevel1 0000  
                __end_of_PD_write_u8 14C5                      ??_PD_Read_u8ptr 0076  
                  __CFG_CLKOUTEN$OFF 0000                  __end_of_PWM_TurnOff 01BF  
                 __end_of_timer_init 0FFA                          _PD_Manu_ptr 00D2  
                         _RDM_GET_CC 12AD                           _RDM_SET_CC 10A2  
                 _DISCOVERY_RDM_Data 01C4                           _PWM1CLKCON 0D9E  
                        _timer2_loop 0192                           _PWM2CLKCON 0DAE  
                        _RDM_rx_loop 102D                           _PWM3CLKCON 0DBE  
                         _PWM4CLKCON 0DCE                          _PWMLDCONptr 01A0  
                         _PFM_Unlock 157F          __end_of_RDM_Identify_Switch 01A7  
__end_of_BOOT_SOFTWARE_VERSION_LABEL 1A7B          _BOOT_SOFTWARE_VERSION_LABEL 1A5C  
          __size_of_timer1_interrupt 0063  
