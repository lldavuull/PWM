

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:38:06 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1574
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text29,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text30,local,class=CODE,merge=1,delta=2
    25                           	psect	pa_nodes0,global,class=CODE,delta=2
    26                           	dabs	1,0x320,16
    27                           	dabs	1,0x2A0,80
    28                           	dabs	1,0x26C,4
    29                           	dabs	1,0x218C,0,_PD
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F1574 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000E                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  008C                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010E                     	;# 
   111  0111                     	;# 
   112  0112                     	;# 
   113  0113                     	;# 
   114  0114                     	;# 
   115  0115                     	;# 
   116  0116                     	;# 
   117  0117                     	;# 
   118  0118                     	;# 
   119  0119                     	;# 
   120  018C                     	;# 
   121  018E                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0194                     	;# 
   128  0195                     	;# 
   129  0196                     	;# 
   130  0197                     	;# 
   131  0199                     	;# 
   132  019A                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019C                     	;# 
   136  019D                     	;# 
   137  019E                     	;# 
   138  019F                     	;# 
   139  020C                     	;# 
   140  020E                     	;# 
   141  028C                     	;# 
   142  028E                     	;# 
   143  030C                     	;# 
   144  030E                     	;# 
   145  038C                     	;# 
   146  038E                     	;# 
   147  0391                     	;# 
   148  0392                     	;# 
   149  0393                     	;# 
   150  0397                     	;# 
   151  0398                     	;# 
   152  0399                     	;# 
   153  0691                     	;# 
   154  0692                     	;# 
   155  0693                     	;# 
   156  0694                     	;# 
   157  0695                     	;# 
   158  0D8E                     	;# 
   159  0D8F                     	;# 
   160  0D90                     	;# 
   161  0D91                     	;# 
   162  0D91                     	;# 
   163  0D92                     	;# 
   164  0D93                     	;# 
   165  0D93                     	;# 
   166  0D94                     	;# 
   167  0D95                     	;# 
   168  0D95                     	;# 
   169  0D96                     	;# 
   170  0D97                     	;# 
   171  0D97                     	;# 
   172  0D98                     	;# 
   173  0D99                     	;# 
   174  0D99                     	;# 
   175  0D9A                     	;# 
   176  0D9B                     	;# 
   177  0D9C                     	;# 
   178  0D9C                     	;# 
   179  0D9D                     	;# 
   180  0D9D                     	;# 
   181  0D9E                     	;# 
   182  0D9F                     	;# 
   183  0DA0                     	;# 
   184  0DA1                     	;# 
   185  0DA1                     	;# 
   186  0DA2                     	;# 
   187  0DA3                     	;# 
   188  0DA3                     	;# 
   189  0DA4                     	;# 
   190  0DA5                     	;# 
   191  0DA5                     	;# 
   192  0DA6                     	;# 
   193  0DA7                     	;# 
   194  0DA7                     	;# 
   195  0DA8                     	;# 
   196  0DA9                     	;# 
   197  0DA9                     	;# 
   198  0DAA                     	;# 
   199  0DAB                     	;# 
   200  0DAC                     	;# 
   201  0DAC                     	;# 
   202  0DAD                     	;# 
   203  0DAD                     	;# 
   204  0DAE                     	;# 
   205  0DAF                     	;# 
   206  0DB0                     	;# 
   207  0DB1                     	;# 
   208  0DB1                     	;# 
   209  0DB2                     	;# 
   210  0DB3                     	;# 
   211  0DB3                     	;# 
   212  0DB4                     	;# 
   213  0DB5                     	;# 
   214  0DB5                     	;# 
   215  0DB6                     	;# 
   216  0DB7                     	;# 
   217  0DB7                     	;# 
   218  0DB8                     	;# 
   219  0DB9                     	;# 
   220  0DB9                     	;# 
   221  0DBA                     	;# 
   222  0DBB                     	;# 
   223  0DBC                     	;# 
   224  0DBC                     	;# 
   225  0DBD                     	;# 
   226  0DBD                     	;# 
   227  0DBE                     	;# 
   228  0DBF                     	;# 
   229  0DC0                     	;# 
   230  0DC1                     	;# 
   231  0DC1                     	;# 
   232  0DC2                     	;# 
   233  0DC3                     	;# 
   234  0DC3                     	;# 
   235  0DC4                     	;# 
   236  0DC5                     	;# 
   237  0DC5                     	;# 
   238  0DC6                     	;# 
   239  0DC7                     	;# 
   240  0DC7                     	;# 
   241  0DC8                     	;# 
   242  0DC9                     	;# 
   243  0DC9                     	;# 
   244  0DCA                     	;# 
   245  0DCB                     	;# 
   246  0DCC                     	;# 
   247  0DCC                     	;# 
   248  0DCD                     	;# 
   249  0DCD                     	;# 
   250  0DCE                     	;# 
   251  0DCF                     	;# 
   252  0DD0                     	;# 
   253  0E0F                     	;# 
   254  0E10                     	;# 
   255  0E11                     	;# 
   256  0E12                     	;# 
   257  0E13                     	;# 
   258  0E14                     	;# 
   259  0E15                     	;# 
   260  0E16                     	;# 
   261  0E17                     	;# 
   262  0E90                     	;# 
   263  0E91                     	;# 
   264  0E92                     	;# 
   265  0E94                     	;# 
   266  0E95                     	;# 
   267  0EA0                     	;# 
   268  0EA1                     	;# 
   269  0EA2                     	;# 
   270  0EA3                     	;# 
   271  0EA4                     	;# 
   272  0EA5                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE8                     	;# 
   279  0FE9                     	;# 
   280  0FEA                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000E                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008E                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0093                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  009F                     	;# 
   330  010C                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  018C                     	;# 
   342  018E                     	;# 
   343  0191                     	;# 
   344  0191                     	;# 
   345  0192                     	;# 
   346  0193                     	;# 
   347  0193                     	;# 
   348  0194                     	;# 
   349  0195                     	;# 
   350  0196                     	;# 
   351  0197                     	;# 
   352  0199                     	;# 
   353  019A                     	;# 
   354  019B                     	;# 
   355  019B                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020C                     	;# 
   361  020E                     	;# 
   362  028C                     	;# 
   363  028E                     	;# 
   364  030C                     	;# 
   365  030E                     	;# 
   366  038C                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  0397                     	;# 
   372  0398                     	;# 
   373  0399                     	;# 
   374  0691                     	;# 
   375  0692                     	;# 
   376  0693                     	;# 
   377  0694                     	;# 
   378  0695                     	;# 
   379  0D8E                     	;# 
   380  0D8F                     	;# 
   381  0D90                     	;# 
   382  0D91                     	;# 
   383  0D91                     	;# 
   384  0D92                     	;# 
   385  0D93                     	;# 
   386  0D93                     	;# 
   387  0D94                     	;# 
   388  0D95                     	;# 
   389  0D95                     	;# 
   390  0D96                     	;# 
   391  0D97                     	;# 
   392  0D97                     	;# 
   393  0D98                     	;# 
   394  0D99                     	;# 
   395  0D99                     	;# 
   396  0D9A                     	;# 
   397  0D9B                     	;# 
   398  0D9C                     	;# 
   399  0D9C                     	;# 
   400  0D9D                     	;# 
   401  0D9D                     	;# 
   402  0D9E                     	;# 
   403  0D9F                     	;# 
   404  0DA0                     	;# 
   405  0DA1                     	;# 
   406  0DA1                     	;# 
   407  0DA2                     	;# 
   408  0DA3                     	;# 
   409  0DA3                     	;# 
   410  0DA4                     	;# 
   411  0DA5                     	;# 
   412  0DA5                     	;# 
   413  0DA6                     	;# 
   414  0DA7                     	;# 
   415  0DA7                     	;# 
   416  0DA8                     	;# 
   417  0DA9                     	;# 
   418  0DA9                     	;# 
   419  0DAA                     	;# 
   420  0DAB                     	;# 
   421  0DAC                     	;# 
   422  0DAC                     	;# 
   423  0DAD                     	;# 
   424  0DAD                     	;# 
   425  0DAE                     	;# 
   426  0DAF                     	;# 
   427  0DB0                     	;# 
   428  0DB1                     	;# 
   429  0DB1                     	;# 
   430  0DB2                     	;# 
   431  0DB3                     	;# 
   432  0DB3                     	;# 
   433  0DB4                     	;# 
   434  0DB5                     	;# 
   435  0DB5                     	;# 
   436  0DB6                     	;# 
   437  0DB7                     	;# 
   438  0DB7                     	;# 
   439  0DB8                     	;# 
   440  0DB9                     	;# 
   441  0DB9                     	;# 
   442  0DBA                     	;# 
   443  0DBB                     	;# 
   444  0DBC                     	;# 
   445  0DBC                     	;# 
   446  0DBD                     	;# 
   447  0DBD                     	;# 
   448  0DBE                     	;# 
   449  0DBF                     	;# 
   450  0DC0                     	;# 
   451  0DC1                     	;# 
   452  0DC1                     	;# 
   453  0DC2                     	;# 
   454  0DC3                     	;# 
   455  0DC3                     	;# 
   456  0DC4                     	;# 
   457  0DC5                     	;# 
   458  0DC5                     	;# 
   459  0DC6                     	;# 
   460  0DC7                     	;# 
   461  0DC7                     	;# 
   462  0DC8                     	;# 
   463  0DC9                     	;# 
   464  0DC9                     	;# 
   465  0DCA                     	;# 
   466  0DCB                     	;# 
   467  0DCC                     	;# 
   468  0DCC                     	;# 
   469  0DCD                     	;# 
   470  0DCD                     	;# 
   471  0DCE                     	;# 
   472  0DCF                     	;# 
   473  0DD0                     	;# 
   474  0E0F                     	;# 
   475  0E10                     	;# 
   476  0E11                     	;# 
   477  0E12                     	;# 
   478  0E13                     	;# 
   479  0E14                     	;# 
   480  0E15                     	;# 
   481  0E16                     	;# 
   482  0E17                     	;# 
   483  0E90                     	;# 
   484  0E91                     	;# 
   485  0E92                     	;# 
   486  0E94                     	;# 
   487  0E95                     	;# 
   488  0EA0                     	;# 
   489  0EA1                     	;# 
   490  0EA2                     	;# 
   491  0EA3                     	;# 
   492  0EA4                     	;# 
   493  0EA5                     	;# 
   494  0FE4                     	;# 
   495  0FE5                     	;# 
   496  0FE6                     	;# 
   497  0FE7                     	;# 
   498  0FE8                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEA                     	;# 
   503  0FEB                     	;# 
   504  0FED                     	;# 
   505  0FEE                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000E                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0015                     	;# 
   526  0016                     	;# 
   527  0016                     	;# 
   528  0017                     	;# 
   529  0018                     	;# 
   530  0019                     	;# 
   531  001A                     	;# 
   532  001B                     	;# 
   533  001C                     	;# 
   534  008C                     	;# 
   535  008E                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  009F                     	;# 
   551  010C                     	;# 
   552  010E                     	;# 
   553  0111                     	;# 
   554  0112                     	;# 
   555  0113                     	;# 
   556  0114                     	;# 
   557  0115                     	;# 
   558  0116                     	;# 
   559  0117                     	;# 
   560  0118                     	;# 
   561  0119                     	;# 
   562  018C                     	;# 
   563  018E                     	;# 
   564  0191                     	;# 
   565  0191                     	;# 
   566  0192                     	;# 
   567  0193                     	;# 
   568  0193                     	;# 
   569  0194                     	;# 
   570  0195                     	;# 
   571  0196                     	;# 
   572  0197                     	;# 
   573  0199                     	;# 
   574  019A                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019D                     	;# 
   579  019E                     	;# 
   580  019F                     	;# 
   581  020C                     	;# 
   582  020E                     	;# 
   583  028C                     	;# 
   584  028E                     	;# 
   585  030C                     	;# 
   586  030E                     	;# 
   587  038C                     	;# 
   588  038E                     	;# 
   589  0391                     	;# 
   590  0392                     	;# 
   591  0393                     	;# 
   592  0397                     	;# 
   593  0398                     	;# 
   594  0399                     	;# 
   595  0691                     	;# 
   596  0692                     	;# 
   597  0693                     	;# 
   598  0694                     	;# 
   599  0695                     	;# 
   600  0D8E                     	;# 
   601  0D8F                     	;# 
   602  0D90                     	;# 
   603  0D91                     	;# 
   604  0D91                     	;# 
   605  0D92                     	;# 
   606  0D93                     	;# 
   607  0D93                     	;# 
   608  0D94                     	;# 
   609  0D95                     	;# 
   610  0D95                     	;# 
   611  0D96                     	;# 
   612  0D97                     	;# 
   613  0D97                     	;# 
   614  0D98                     	;# 
   615  0D99                     	;# 
   616  0D99                     	;# 
   617  0D9A                     	;# 
   618  0D9B                     	;# 
   619  0D9C                     	;# 
   620  0D9C                     	;# 
   621  0D9D                     	;# 
   622  0D9D                     	;# 
   623  0D9E                     	;# 
   624  0D9F                     	;# 
   625  0DA0                     	;# 
   626  0DA1                     	;# 
   627  0DA1                     	;# 
   628  0DA2                     	;# 
   629  0DA3                     	;# 
   630  0DA3                     	;# 
   631  0DA4                     	;# 
   632  0DA5                     	;# 
   633  0DA5                     	;# 
   634  0DA6                     	;# 
   635  0DA7                     	;# 
   636  0DA7                     	;# 
   637  0DA8                     	;# 
   638  0DA9                     	;# 
   639  0DA9                     	;# 
   640  0DAA                     	;# 
   641  0DAB                     	;# 
   642  0DAC                     	;# 
   643  0DAC                     	;# 
   644  0DAD                     	;# 
   645  0DAD                     	;# 
   646  0DAE                     	;# 
   647  0DAF                     	;# 
   648  0DB0                     	;# 
   649  0DB1                     	;# 
   650  0DB1                     	;# 
   651  0DB2                     	;# 
   652  0DB3                     	;# 
   653  0DB3                     	;# 
   654  0DB4                     	;# 
   655  0DB5                     	;# 
   656  0DB5                     	;# 
   657  0DB6                     	;# 
   658  0DB7                     	;# 
   659  0DB7                     	;# 
   660  0DB8                     	;# 
   661  0DB9                     	;# 
   662  0DB9                     	;# 
   663  0DBA                     	;# 
   664  0DBB                     	;# 
   665  0DBC                     	;# 
   666  0DBC                     	;# 
   667  0DBD                     	;# 
   668  0DBD                     	;# 
   669  0DBE                     	;# 
   670  0DBF                     	;# 
   671  0DC0                     	;# 
   672  0DC1                     	;# 
   673  0DC1                     	;# 
   674  0DC2                     	;# 
   675  0DC3                     	;# 
   676  0DC3                     	;# 
   677  0DC4                     	;# 
   678  0DC5                     	;# 
   679  0DC5                     	;# 
   680  0DC6                     	;# 
   681  0DC7                     	;# 
   682  0DC7                     	;# 
   683  0DC8                     	;# 
   684  0DC9                     	;# 
   685  0DC9                     	;# 
   686  0DCA                     	;# 
   687  0DCB                     	;# 
   688  0DCC                     	;# 
   689  0DCC                     	;# 
   690  0DCD                     	;# 
   691  0DCD                     	;# 
   692  0DCE                     	;# 
   693  0DCF                     	;# 
   694  0DD0                     	;# 
   695  0E0F                     	;# 
   696  0E10                     	;# 
   697  0E11                     	;# 
   698  0E12                     	;# 
   699  0E13                     	;# 
   700  0E14                     	;# 
   701  0E15                     	;# 
   702  0E16                     	;# 
   703  0E17                     	;# 
   704  0E90                     	;# 
   705  0E91                     	;# 
   706  0E92                     	;# 
   707  0E94                     	;# 
   708  0E95                     	;# 
   709  0EA0                     	;# 
   710  0EA1                     	;# 
   711  0EA2                     	;# 
   712  0EA3                     	;# 
   713  0EA4                     	;# 
   714  0EA5                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE8                     	;# 
   721  0FE9                     	;# 
   722  0FEA                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000E                     	;# 
   743  0011                     	;# 
   744  0012                     	;# 
   745  0013                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008E                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  009F                     	;# 
   772  010C                     	;# 
   773  010E                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  018C                     	;# 
   784  018E                     	;# 
   785  0191                     	;# 
   786  0191                     	;# 
   787  0192                     	;# 
   788  0193                     	;# 
   789  0193                     	;# 
   790  0194                     	;# 
   791  0195                     	;# 
   792  0196                     	;# 
   793  0197                     	;# 
   794  0199                     	;# 
   795  019A                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020C                     	;# 
   803  020E                     	;# 
   804  028C                     	;# 
   805  028E                     	;# 
   806  030C                     	;# 
   807  030E                     	;# 
   808  038C                     	;# 
   809  038E                     	;# 
   810  0391                     	;# 
   811  0392                     	;# 
   812  0393                     	;# 
   813  0397                     	;# 
   814  0398                     	;# 
   815  0399                     	;# 
   816  0691                     	;# 
   817  0692                     	;# 
   818  0693                     	;# 
   819  0694                     	;# 
   820  0695                     	;# 
   821  0D8E                     	;# 
   822  0D8F                     	;# 
   823  0D90                     	;# 
   824  0D91                     	;# 
   825  0D91                     	;# 
   826  0D92                     	;# 
   827  0D93                     	;# 
   828  0D93                     	;# 
   829  0D94                     	;# 
   830  0D95                     	;# 
   831  0D95                     	;# 
   832  0D96                     	;# 
   833  0D97                     	;# 
   834  0D97                     	;# 
   835  0D98                     	;# 
   836  0D99                     	;# 
   837  0D99                     	;# 
   838  0D9A                     	;# 
   839  0D9B                     	;# 
   840  0D9C                     	;# 
   841  0D9C                     	;# 
   842  0D9D                     	;# 
   843  0D9D                     	;# 
   844  0D9E                     	;# 
   845  0D9F                     	;# 
   846  0DA0                     	;# 
   847  0DA1                     	;# 
   848  0DA1                     	;# 
   849  0DA2                     	;# 
   850  0DA3                     	;# 
   851  0DA3                     	;# 
   852  0DA4                     	;# 
   853  0DA5                     	;# 
   854  0DA5                     	;# 
   855  0DA6                     	;# 
   856  0DA7                     	;# 
   857  0DA7                     	;# 
   858  0DA8                     	;# 
   859  0DA9                     	;# 
   860  0DA9                     	;# 
   861  0DAA                     	;# 
   862  0DAB                     	;# 
   863  0DAC                     	;# 
   864  0DAC                     	;# 
   865  0DAD                     	;# 
   866  0DAD                     	;# 
   867  0DAE                     	;# 
   868  0DAF                     	;# 
   869  0DB0                     	;# 
   870  0DB1                     	;# 
   871  0DB1                     	;# 
   872  0DB2                     	;# 
   873  0DB3                     	;# 
   874  0DB3                     	;# 
   875  0DB4                     	;# 
   876  0DB5                     	;# 
   877  0DB5                     	;# 
   878  0DB6                     	;# 
   879  0DB7                     	;# 
   880  0DB7                     	;# 
   881  0DB8                     	;# 
   882  0DB9                     	;# 
   883  0DB9                     	;# 
   884  0DBA                     	;# 
   885  0DBB                     	;# 
   886  0DBC                     	;# 
   887  0DBC                     	;# 
   888  0DBD                     	;# 
   889  0DBD                     	;# 
   890  0DBE                     	;# 
   891  0DBF                     	;# 
   892  0DC0                     	;# 
   893  0DC1                     	;# 
   894  0DC1                     	;# 
   895  0DC2                     	;# 
   896  0DC3                     	;# 
   897  0DC3                     	;# 
   898  0DC4                     	;# 
   899  0DC5                     	;# 
   900  0DC5                     	;# 
   901  0DC6                     	;# 
   902  0DC7                     	;# 
   903  0DC7                     	;# 
   904  0DC8                     	;# 
   905  0DC9                     	;# 
   906  0DC9                     	;# 
   907  0DCA                     	;# 
   908  0DCB                     	;# 
   909  0DCC                     	;# 
   910  0DCC                     	;# 
   911  0DCD                     	;# 
   912  0DCD                     	;# 
   913  0DCE                     	;# 
   914  0DCF                     	;# 
   915  0DD0                     	;# 
   916  0E0F                     	;# 
   917  0E10                     	;# 
   918  0E11                     	;# 
   919  0E12                     	;# 
   920  0E13                     	;# 
   921  0E14                     	;# 
   922  0E15                     	;# 
   923  0E16                     	;# 
   924  0E17                     	;# 
   925  0E90                     	;# 
   926  0E91                     	;# 
   927  0E92                     	;# 
   928  0E94                     	;# 
   929  0E95                     	;# 
   930  0EA0                     	;# 
   931  0EA1                     	;# 
   932  0EA2                     	;# 
   933  0EA3                     	;# 
   934  0EA4                     	;# 
   935  0EA5                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEA                     	;# 
   945  0FEB                     	;# 
   946  0FED                     	;# 
   947  0FEE                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000E                     	;# 
   964  0011                     	;# 
   965  0012                     	;# 
   966  0013                     	;# 
   967  0015                     	;# 
   968  0016                     	;# 
   969  0016                     	;# 
   970  0017                     	;# 
   971  0018                     	;# 
   972  0019                     	;# 
   973  001A                     	;# 
   974  001B                     	;# 
   975  001C                     	;# 
   976  008C                     	;# 
   977  008E                     	;# 
   978  0091                     	;# 
   979  0092                     	;# 
   980  0093                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0098                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  009F                     	;# 
   993  010C                     	;# 
   994  010E                     	;# 
   995  0111                     	;# 
   996  0112                     	;# 
   997  0113                     	;# 
   998  0114                     	;# 
   999  0115                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  0118                     	;# 
  1003  0119                     	;# 
  1004  018C                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019D                     	;# 
  1021  019E                     	;# 
  1022  019F                     	;# 
  1023  020C                     	;# 
  1024  020E                     	;# 
  1025  028C                     	;# 
  1026  028E                     	;# 
  1027  030C                     	;# 
  1028  030E                     	;# 
  1029  038C                     	;# 
  1030  038E                     	;# 
  1031  0391                     	;# 
  1032  0392                     	;# 
  1033  0393                     	;# 
  1034  0397                     	;# 
  1035  0398                     	;# 
  1036  0399                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0D8E                     	;# 
  1043  0D8F                     	;# 
  1044  0D90                     	;# 
  1045  0D91                     	;# 
  1046  0D91                     	;# 
  1047  0D92                     	;# 
  1048  0D93                     	;# 
  1049  0D93                     	;# 
  1050  0D94                     	;# 
  1051  0D95                     	;# 
  1052  0D95                     	;# 
  1053  0D96                     	;# 
  1054  0D97                     	;# 
  1055  0D97                     	;# 
  1056  0D98                     	;# 
  1057  0D99                     	;# 
  1058  0D99                     	;# 
  1059  0D9A                     	;# 
  1060  0D9B                     	;# 
  1061  0D9C                     	;# 
  1062  0D9C                     	;# 
  1063  0D9D                     	;# 
  1064  0D9D                     	;# 
  1065  0D9E                     	;# 
  1066  0D9F                     	;# 
  1067  0DA0                     	;# 
  1068  0DA1                     	;# 
  1069  0DA1                     	;# 
  1070  0DA2                     	;# 
  1071  0DA3                     	;# 
  1072  0DA3                     	;# 
  1073  0DA4                     	;# 
  1074  0DA5                     	;# 
  1075  0DA5                     	;# 
  1076  0DA6                     	;# 
  1077  0DA7                     	;# 
  1078  0DA7                     	;# 
  1079  0DA8                     	;# 
  1080  0DA9                     	;# 
  1081  0DA9                     	;# 
  1082  0DAA                     	;# 
  1083  0DAB                     	;# 
  1084  0DAC                     	;# 
  1085  0DAC                     	;# 
  1086  0DAD                     	;# 
  1087  0DAD                     	;# 
  1088  0DAE                     	;# 
  1089  0DAF                     	;# 
  1090  0DB0                     	;# 
  1091  0DB1                     	;# 
  1092  0DB1                     	;# 
  1093  0DB2                     	;# 
  1094  0DB3                     	;# 
  1095  0DB3                     	;# 
  1096  0DB4                     	;# 
  1097  0DB5                     	;# 
  1098  0DB5                     	;# 
  1099  0DB6                     	;# 
  1100  0DB7                     	;# 
  1101  0DB7                     	;# 
  1102  0DB8                     	;# 
  1103  0DB9                     	;# 
  1104  0DB9                     	;# 
  1105  0DBA                     	;# 
  1106  0DBB                     	;# 
  1107  0DBC                     	;# 
  1108  0DBC                     	;# 
  1109  0DBD                     	;# 
  1110  0DBD                     	;# 
  1111  0DBE                     	;# 
  1112  0DBF                     	;# 
  1113  0DC0                     	;# 
  1114  0DC1                     	;# 
  1115  0DC1                     	;# 
  1116  0DC2                     	;# 
  1117  0DC3                     	;# 
  1118  0DC3                     	;# 
  1119  0DC4                     	;# 
  1120  0DC5                     	;# 
  1121  0DC5                     	;# 
  1122  0DC6                     	;# 
  1123  0DC7                     	;# 
  1124  0DC7                     	;# 
  1125  0DC8                     	;# 
  1126  0DC9                     	;# 
  1127  0DC9                     	;# 
  1128  0DCA                     	;# 
  1129  0DCB                     	;# 
  1130  0DCC                     	;# 
  1131  0DCC                     	;# 
  1132  0DCD                     	;# 
  1133  0DCD                     	;# 
  1134  0DCE                     	;# 
  1135  0DCF                     	;# 
  1136  0DD0                     	;# 
  1137  0E0F                     	;# 
  1138  0E10                     	;# 
  1139  0E11                     	;# 
  1140  0E12                     	;# 
  1141  0E13                     	;# 
  1142  0E14                     	;# 
  1143  0E15                     	;# 
  1144  0E16                     	;# 
  1145  0E17                     	;# 
  1146  0E90                     	;# 
  1147  0E91                     	;# 
  1148  0E92                     	;# 
  1149  0E94                     	;# 
  1150  0E95                     	;# 
  1151  0EA0                     	;# 
  1152  0EA1                     	;# 
  1153  0EA2                     	;# 
  1154  0EA3                     	;# 
  1155  0EA4                     	;# 
  1156  0EA5                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE8                     	;# 
  1163  0FE9                     	;# 
  1164  0FEA                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEE                     	;# 
  1170  0FEF                     	;# 
  1171  0000                     	;# 
  1172  0001                     	;# 
  1173  0002                     	;# 
  1174  0003                     	;# 
  1175  0004                     	;# 
  1176  0005                     	;# 
  1177  0006                     	;# 
  1178  0007                     	;# 
  1179  0008                     	;# 
  1180  0009                     	;# 
  1181  000A                     	;# 
  1182  000B                     	;# 
  1183  000C                     	;# 
  1184  000E                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0013                     	;# 
  1188  0015                     	;# 
  1189  0016                     	;# 
  1190  0016                     	;# 
  1191  0017                     	;# 
  1192  0018                     	;# 
  1193  0019                     	;# 
  1194  001A                     	;# 
  1195  001B                     	;# 
  1196  001C                     	;# 
  1197  008C                     	;# 
  1198  008E                     	;# 
  1199  0091                     	;# 
  1200  0092                     	;# 
  1201  0093                     	;# 
  1202  0095                     	;# 
  1203  0096                     	;# 
  1204  0097                     	;# 
  1205  0098                     	;# 
  1206  0099                     	;# 
  1207  009A                     	;# 
  1208  009B                     	;# 
  1209  009B                     	;# 
  1210  009C                     	;# 
  1211  009D                     	;# 
  1212  009E                     	;# 
  1213  009F                     	;# 
  1214  010C                     	;# 
  1215  010E                     	;# 
  1216  0111                     	;# 
  1217  0112                     	;# 
  1218  0113                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  0118                     	;# 
  1224  0119                     	;# 
  1225  018C                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0194                     	;# 
  1233  0195                     	;# 
  1234  0196                     	;# 
  1235  0197                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020C                     	;# 
  1245  020E                     	;# 
  1246  028C                     	;# 
  1247  028E                     	;# 
  1248  030C                     	;# 
  1249  030E                     	;# 
  1250  038C                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0397                     	;# 
  1256  0398                     	;# 
  1257  0399                     	;# 
  1258  0691                     	;# 
  1259  0692                     	;# 
  1260  0693                     	;# 
  1261  0694                     	;# 
  1262  0695                     	;# 
  1263  0D8E                     	;# 
  1264  0D8F                     	;# 
  1265  0D90                     	;# 
  1266  0D91                     	;# 
  1267  0D91                     	;# 
  1268  0D92                     	;# 
  1269  0D93                     	;# 
  1270  0D93                     	;# 
  1271  0D94                     	;# 
  1272  0D95                     	;# 
  1273  0D95                     	;# 
  1274  0D96                     	;# 
  1275  0D97                     	;# 
  1276  0D97                     	;# 
  1277  0D98                     	;# 
  1278  0D99                     	;# 
  1279  0D99                     	;# 
  1280  0D9A                     	;# 
  1281  0D9B                     	;# 
  1282  0D9C                     	;# 
  1283  0D9C                     	;# 
  1284  0D9D                     	;# 
  1285  0D9D                     	;# 
  1286  0D9E                     	;# 
  1287  0D9F                     	;# 
  1288  0DA0                     	;# 
  1289  0DA1                     	;# 
  1290  0DA1                     	;# 
  1291  0DA2                     	;# 
  1292  0DA3                     	;# 
  1293  0DA3                     	;# 
  1294  0DA4                     	;# 
  1295  0DA5                     	;# 
  1296  0DA5                     	;# 
  1297  0DA6                     	;# 
  1298  0DA7                     	;# 
  1299  0DA7                     	;# 
  1300  0DA8                     	;# 
  1301  0DA9                     	;# 
  1302  0DA9                     	;# 
  1303  0DAA                     	;# 
  1304  0DAB                     	;# 
  1305  0DAC                     	;# 
  1306  0DAC                     	;# 
  1307  0DAD                     	;# 
  1308  0DAD                     	;# 
  1309  0DAE                     	;# 
  1310  0DAF                     	;# 
  1311  0DB0                     	;# 
  1312  0DB1                     	;# 
  1313  0DB1                     	;# 
  1314  0DB2                     	;# 
  1315  0DB3                     	;# 
  1316  0DB3                     	;# 
  1317  0DB4                     	;# 
  1318  0DB5                     	;# 
  1319  0DB5                     	;# 
  1320  0DB6                     	;# 
  1321  0DB7                     	;# 
  1322  0DB7                     	;# 
  1323  0DB8                     	;# 
  1324  0DB9                     	;# 
  1325  0DB9                     	;# 
  1326  0DBA                     	;# 
  1327  0DBB                     	;# 
  1328  0DBC                     	;# 
  1329  0DBC                     	;# 
  1330  0DBD                     	;# 
  1331  0DBD                     	;# 
  1332  0DBE                     	;# 
  1333  0DBF                     	;# 
  1334  0DC0                     	;# 
  1335  0DC1                     	;# 
  1336  0DC1                     	;# 
  1337  0DC2                     	;# 
  1338  0DC3                     	;# 
  1339  0DC3                     	;# 
  1340  0DC4                     	;# 
  1341  0DC5                     	;# 
  1342  0DC5                     	;# 
  1343  0DC6                     	;# 
  1344  0DC7                     	;# 
  1345  0DC7                     	;# 
  1346  0DC8                     	;# 
  1347  0DC9                     	;# 
  1348  0DC9                     	;# 
  1349  0DCA                     	;# 
  1350  0DCB                     	;# 
  1351  0DCC                     	;# 
  1352  0DCC                     	;# 
  1353  0DCD                     	;# 
  1354  0DCD                     	;# 
  1355  0DCE                     	;# 
  1356  0DCF                     	;# 
  1357  0DD0                     	;# 
  1358  0E0F                     	;# 
  1359  0E10                     	;# 
  1360  0E11                     	;# 
  1361  0E12                     	;# 
  1362  0E13                     	;# 
  1363  0E14                     	;# 
  1364  0E15                     	;# 
  1365  0E16                     	;# 
  1366  0E17                     	;# 
  1367  0E90                     	;# 
  1368  0E91                     	;# 
  1369  0E92                     	;# 
  1370  0E94                     	;# 
  1371  0E95                     	;# 
  1372  0EA0                     	;# 
  1373  0EA1                     	;# 
  1374  0EA2                     	;# 
  1375  0EA3                     	;# 
  1376  0EA4                     	;# 
  1377  0EA5                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE8                     	;# 
  1384  0FE9                     	;# 
  1385  0FEA                     	;# 
  1386  0FEA                     	;# 
  1387  0FEB                     	;# 
  1388  0FED                     	;# 
  1389  0FEE                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000E                     	;# 
  1406  0011                     	;# 
  1407  0012                     	;# 
  1408  0013                     	;# 
  1409  0015                     	;# 
  1410  0016                     	;# 
  1411  0016                     	;# 
  1412  0017                     	;# 
  1413  0018                     	;# 
  1414  0019                     	;# 
  1415  001A                     	;# 
  1416  001B                     	;# 
  1417  001C                     	;# 
  1418  008C                     	;# 
  1419  008E                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0093                     	;# 
  1423  0095                     	;# 
  1424  0096                     	;# 
  1425  0097                     	;# 
  1426  0098                     	;# 
  1427  0099                     	;# 
  1428  009A                     	;# 
  1429  009B                     	;# 
  1430  009B                     	;# 
  1431  009C                     	;# 
  1432  009D                     	;# 
  1433  009E                     	;# 
  1434  009F                     	;# 
  1435  010C                     	;# 
  1436  010E                     	;# 
  1437  0111                     	;# 
  1438  0112                     	;# 
  1439  0113                     	;# 
  1440  0114                     	;# 
  1441  0115                     	;# 
  1442  0116                     	;# 
  1443  0117                     	;# 
  1444  0118                     	;# 
  1445  0119                     	;# 
  1446  018C                     	;# 
  1447  018E                     	;# 
  1448  0191                     	;# 
  1449  0191                     	;# 
  1450  0192                     	;# 
  1451  0193                     	;# 
  1452  0193                     	;# 
  1453  0194                     	;# 
  1454  0195                     	;# 
  1455  0196                     	;# 
  1456  0197                     	;# 
  1457  0199                     	;# 
  1458  019A                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019D                     	;# 
  1463  019E                     	;# 
  1464  019F                     	;# 
  1465  020C                     	;# 
  1466  020E                     	;# 
  1467  028C                     	;# 
  1468  028E                     	;# 
  1469  030C                     	;# 
  1470  030E                     	;# 
  1471  038C                     	;# 
  1472  038E                     	;# 
  1473  0391                     	;# 
  1474  0392                     	;# 
  1475  0393                     	;# 
  1476  0397                     	;# 
  1477  0398                     	;# 
  1478  0399                     	;# 
  1479  0691                     	;# 
  1480  0692                     	;# 
  1481  0693                     	;# 
  1482  0694                     	;# 
  1483  0695                     	;# 
  1484  0D8E                     	;# 
  1485  0D8F                     	;# 
  1486  0D90                     	;# 
  1487  0D91                     	;# 
  1488  0D91                     	;# 
  1489  0D92                     	;# 
  1490  0D93                     	;# 
  1491  0D93                     	;# 
  1492  0D94                     	;# 
  1493  0D95                     	;# 
  1494  0D95                     	;# 
  1495  0D96                     	;# 
  1496  0D97                     	;# 
  1497  0D97                     	;# 
  1498  0D98                     	;# 
  1499  0D99                     	;# 
  1500  0D99                     	;# 
  1501  0D9A                     	;# 
  1502  0D9B                     	;# 
  1503  0D9C                     	;# 
  1504  0D9C                     	;# 
  1505  0D9D                     	;# 
  1506  0D9D                     	;# 
  1507  0D9E                     	;# 
  1508  0D9F                     	;# 
  1509  0DA0                     	;# 
  1510  0DA1                     	;# 
  1511  0DA1                     	;# 
  1512  0DA2                     	;# 
  1513  0DA3                     	;# 
  1514  0DA3                     	;# 
  1515  0DA4                     	;# 
  1516  0DA5                     	;# 
  1517  0DA5                     	;# 
  1518  0DA6                     	;# 
  1519  0DA7                     	;# 
  1520  0DA7                     	;# 
  1521  0DA8                     	;# 
  1522  0DA9                     	;# 
  1523  0DA9                     	;# 
  1524  0DAA                     	;# 
  1525  0DAB                     	;# 
  1526  0DAC                     	;# 
  1527  0DAC                     	;# 
  1528  0DAD                     	;# 
  1529  0DAD                     	;# 
  1530  0DAE                     	;# 
  1531  0DAF                     	;# 
  1532  0DB0                     	;# 
  1533  0DB1                     	;# 
  1534  0DB1                     	;# 
  1535  0DB2                     	;# 
  1536  0DB3                     	;# 
  1537  0DB3                     	;# 
  1538  0DB4                     	;# 
  1539  0DB5                     	;# 
  1540  0DB5                     	;# 
  1541  0DB6                     	;# 
  1542  0DB7                     	;# 
  1543  0DB7                     	;# 
  1544  0DB8                     	;# 
  1545  0DB9                     	;# 
  1546  0DB9                     	;# 
  1547  0DBA                     	;# 
  1548  0DBB                     	;# 
  1549  0DBC                     	;# 
  1550  0DBC                     	;# 
  1551  0DBD                     	;# 
  1552  0DBD                     	;# 
  1553  0DBE                     	;# 
  1554  0DBF                     	;# 
  1555  0DC0                     	;# 
  1556  0DC1                     	;# 
  1557  0DC1                     	;# 
  1558  0DC2                     	;# 
  1559  0DC3                     	;# 
  1560  0DC3                     	;# 
  1561  0DC4                     	;# 
  1562  0DC5                     	;# 
  1563  0DC5                     	;# 
  1564  0DC6                     	;# 
  1565  0DC7                     	;# 
  1566  0DC7                     	;# 
  1567  0DC8                     	;# 
  1568  0DC9                     	;# 
  1569  0DC9                     	;# 
  1570  0DCA                     	;# 
  1571  0DCB                     	;# 
  1572  0DCC                     	;# 
  1573  0DCC                     	;# 
  1574  0DCD                     	;# 
  1575  0DCD                     	;# 
  1576  0DCE                     	;# 
  1577  0DCF                     	;# 
  1578  0DD0                     	;# 
  1579  0E0F                     	;# 
  1580  0E10                     	;# 
  1581  0E11                     	;# 
  1582  0E12                     	;# 
  1583  0E13                     	;# 
  1584  0E14                     	;# 
  1585  0E15                     	;# 
  1586  0E16                     	;# 
  1587  0E17                     	;# 
  1588  0E90                     	;# 
  1589  0E91                     	;# 
  1590  0E92                     	;# 
  1591  0E94                     	;# 
  1592  0E95                     	;# 
  1593  0EA0                     	;# 
  1594  0EA1                     	;# 
  1595  0EA2                     	;# 
  1596  0EA3                     	;# 
  1597  0EA4                     	;# 
  1598  0EA5                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEA                     	;# 
  1608  0FEB                     	;# 
  1609  0FED                     	;# 
  1610  0FEE                     	;# 
  1611  0FEE                     	;# 
  1612  0FEF                     	;# 
  1613  0000                     	;# 
  1614  0001                     	;# 
  1615  0002                     	;# 
  1616  0003                     	;# 
  1617  0004                     	;# 
  1618  0005                     	;# 
  1619  0006                     	;# 
  1620  0007                     	;# 
  1621  0008                     	;# 
  1622  0009                     	;# 
  1623  000A                     	;# 
  1624  000B                     	;# 
  1625  000C                     	;# 
  1626  000E                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0013                     	;# 
  1630  0015                     	;# 
  1631  0016                     	;# 
  1632  0016                     	;# 
  1633  0017                     	;# 
  1634  0018                     	;# 
  1635  0019                     	;# 
  1636  001A                     	;# 
  1637  001B                     	;# 
  1638  001C                     	;# 
  1639  008C                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0098                     	;# 
  1648  0099                     	;# 
  1649  009A                     	;# 
  1650  009B                     	;# 
  1651  009B                     	;# 
  1652  009C                     	;# 
  1653  009D                     	;# 
  1654  009E                     	;# 
  1655  009F                     	;# 
  1656  010C                     	;# 
  1657  010E                     	;# 
  1658  0111                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0115                     	;# 
  1663  0116                     	;# 
  1664  0117                     	;# 
  1665  0118                     	;# 
  1666  0119                     	;# 
  1667  018C                     	;# 
  1668  018E                     	;# 
  1669  0191                     	;# 
  1670  0191                     	;# 
  1671  0192                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0197                     	;# 
  1678  0199                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020C                     	;# 
  1687  020E                     	;# 
  1688  028C                     	;# 
  1689  028E                     	;# 
  1690  030C                     	;# 
  1691  030E                     	;# 
  1692  038C                     	;# 
  1693  038E                     	;# 
  1694  0391                     	;# 
  1695  0392                     	;# 
  1696  0393                     	;# 
  1697  0397                     	;# 
  1698  0398                     	;# 
  1699  0399                     	;# 
  1700  0691                     	;# 
  1701  0692                     	;# 
  1702  0693                     	;# 
  1703  0694                     	;# 
  1704  0695                     	;# 
  1705  0D8E                     	;# 
  1706  0D8F                     	;# 
  1707  0D90                     	;# 
  1708  0D91                     	;# 
  1709  0D91                     	;# 
  1710  0D92                     	;# 
  1711  0D93                     	;# 
  1712  0D93                     	;# 
  1713  0D94                     	;# 
  1714  0D95                     	;# 
  1715  0D95                     	;# 
  1716  0D96                     	;# 
  1717  0D97                     	;# 
  1718  0D97                     	;# 
  1719  0D98                     	;# 
  1720  0D99                     	;# 
  1721  0D99                     	;# 
  1722  0D9A                     	;# 
  1723  0D9B                     	;# 
  1724  0D9C                     	;# 
  1725  0D9C                     	;# 
  1726  0D9D                     	;# 
  1727  0D9D                     	;# 
  1728  0D9E                     	;# 
  1729  0D9F                     	;# 
  1730  0DA0                     	;# 
  1731  0DA1                     	;# 
  1732  0DA1                     	;# 
  1733  0DA2                     	;# 
  1734  0DA3                     	;# 
  1735  0DA3                     	;# 
  1736  0DA4                     	;# 
  1737  0DA5                     	;# 
  1738  0DA5                     	;# 
  1739  0DA6                     	;# 
  1740  0DA7                     	;# 
  1741  0DA7                     	;# 
  1742  0DA8                     	;# 
  1743  0DA9                     	;# 
  1744  0DA9                     	;# 
  1745  0DAA                     	;# 
  1746  0DAB                     	;# 
  1747  0DAC                     	;# 
  1748  0DAC                     	;# 
  1749  0DAD                     	;# 
  1750  0DAD                     	;# 
  1751  0DAE                     	;# 
  1752  0DAF                     	;# 
  1753  0DB0                     	;# 
  1754  0DB1                     	;# 
  1755  0DB1                     	;# 
  1756  0DB2                     	;# 
  1757  0DB3                     	;# 
  1758  0DB3                     	;# 
  1759  0DB4                     	;# 
  1760  0DB5                     	;# 
  1761  0DB5                     	;# 
  1762  0DB6                     	;# 
  1763  0DB7                     	;# 
  1764  0DB7                     	;# 
  1765  0DB8                     	;# 
  1766  0DB9                     	;# 
  1767  0DB9                     	;# 
  1768  0DBA                     	;# 
  1769  0DBB                     	;# 
  1770  0DBC                     	;# 
  1771  0DBC                     	;# 
  1772  0DBD                     	;# 
  1773  0DBD                     	;# 
  1774  0DBE                     	;# 
  1775  0DBF                     	;# 
  1776  0DC0                     	;# 
  1777  0DC1                     	;# 
  1778  0DC1                     	;# 
  1779  0DC2                     	;# 
  1780  0DC3                     	;# 
  1781  0DC3                     	;# 
  1782  0DC4                     	;# 
  1783  0DC5                     	;# 
  1784  0DC5                     	;# 
  1785  0DC6                     	;# 
  1786  0DC7                     	;# 
  1787  0DC7                     	;# 
  1788  0DC8                     	;# 
  1789  0DC9                     	;# 
  1790  0DC9                     	;# 
  1791  0DCA                     	;# 
  1792  0DCB                     	;# 
  1793  0DCC                     	;# 
  1794  0DCC                     	;# 
  1795  0DCD                     	;# 
  1796  0DCD                     	;# 
  1797  0DCE                     	;# 
  1798  0DCF                     	;# 
  1799  0DD0                     	;# 
  1800  0E0F                     	;# 
  1801  0E10                     	;# 
  1802  0E11                     	;# 
  1803  0E12                     	;# 
  1804  0E13                     	;# 
  1805  0E14                     	;# 
  1806  0E15                     	;# 
  1807  0E16                     	;# 
  1808  0E17                     	;# 
  1809  0E90                     	;# 
  1810  0E91                     	;# 
  1811  0E92                     	;# 
  1812  0E94                     	;# 
  1813  0E95                     	;# 
  1814  0EA0                     	;# 
  1815  0EA1                     	;# 
  1816  0EA2                     	;# 
  1817  0EA3                     	;# 
  1818  0EA4                     	;# 
  1819  0EA5                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;_PD
  1834                           
  1835                           	psect	idataBANK1
  1836  0000                     __pidataBANK1:	
  1837                           
  1838                           	psect	idataBANK2
  1839  0000                     __pidataBANK2:	
  1840                           
  1841                           	psect	stringtext
  1842  07C6                     __pstringtext:	
  1843  07C6                     _PWM:	
  1844  07C6  3400               	retlw	0
  1845  07C7  3400               	retlw	0
  1846  07C8  3430               	retlw	48
  1847  07C9  3400               	retlw	0
  1848  07CA  3431               	retlw	49
  1849  07CB  3400               	retlw	0
  1850  07CC  3432               	retlw	50
  1851  07CD  3400               	retlw	0
  1852  07CE  3433               	retlw	51
  1853  07CF  3400               	retlw	0
  1854  07D0  3434               	retlw	52
  1855  07D1  3400               	retlw	0
  1856  07D2  3436               	retlw	54
  1857  07D3  3400               	retlw	0
  1858  07D4  3437               	retlw	55
  1859  07D5  3400               	retlw	0
  1860  07D6  3438               	retlw	56
  1861  07D7  3400               	retlw	0
  1862  07D8  343A               	retlw	58
  1863  07D9  3400               	retlw	0
  1864  07DA  343B               	retlw	59
  1865  07DB  3400               	retlw	0
  1866  07DC  343C               	retlw	60
  1867  07DD  3400               	retlw	0
  1868  07DE  343E               	retlw	62
  1869  07DF  3400               	retlw	0
  1870  07E0  343F               	retlw	63
  1871  07E1  3400               	retlw	0
  1872  07E2  3441               	retlw	65
  1873  07E3  3400               	retlw	0
  1874  07E4  3443               	retlw	67
  1875  07E5  3400               	retlw	0
  1876  07E6  3444               	retlw	68
  1877  07E7  3400               	retlw	0
  1878  07E8  3446               	retlw	70
  1879  07E9  3400               	retlw	0
  1880  07EA  3448               	retlw	72
  1881  07EB  3400               	retlw	0
  1882  07EC  3449               	retlw	73
  1883  07ED  3400               	retlw	0
  1884  07EE  344B               	retlw	75
  1885  07EF  3400               	retlw	0
  1886  07F0  344D               	retlw	77
  1887  07F1  3400               	retlw	0
  1888  07F2  344F               	retlw	79
  1889  07F3  3400               	retlw	0
  1890  07F4  3451               	retlw	81
  1891  07F5  3400               	retlw	0
  1892  07F6  3453               	retlw	83
  1893  07F7  3400               	retlw	0
  1894  07F8  3455               	retlw	85
  1895  07F9  3400               	retlw	0
  1896  07FA  3457               	retlw	87
  1897  07FB  3400               	retlw	0
  1898  07FC  3459               	retlw	89
  1899  07FD  3400               	retlw	0
  1900  07FE  345B               	retlw	91
  1901  07FF  3400               	retlw	0
  1902  0800  345D               	retlw	93
  1903  0801  3400               	retlw	0
  1904  0802  3460               	retlw	96
  1905  0803  3400               	retlw	0
  1906  0804  3462               	retlw	98
  1907  0805  3400               	retlw	0
  1908  0806  3464               	retlw	100
  1909  0807  3400               	retlw	0
  1910  0808  3467               	retlw	103
  1911  0809  3400               	retlw	0
  1912  080A  3469               	retlw	105
  1913  080B  3400               	retlw	0
  1914  080C  346C               	retlw	108
  1915  080D  3400               	retlw	0
  1916  080E  346E               	retlw	110
  1917  080F  3400               	retlw	0
  1918  0810  3471               	retlw	113
  1919  0811  3400               	retlw	0
  1920  0812  3474               	retlw	116
  1921  0813  3400               	retlw	0
  1922  0814  3477               	retlw	119
  1923  0815  3400               	retlw	0
  1924  0816  3479               	retlw	121
  1925  0817  3400               	retlw	0
  1926  0818  347C               	retlw	124
  1927  0819  3400               	retlw	0
  1928  081A  347F               	retlw	127
  1929  081B  3400               	retlw	0
  1930  081C  3483               	retlw	131
  1931  081D  3400               	retlw	0
  1932  081E  3486               	retlw	134
  1933  081F  3400               	retlw	0
  1934  0820  3489               	retlw	137
  1935  0821  3400               	retlw	0
  1936  0822  348C               	retlw	140
  1937  0823  3400               	retlw	0
  1938  0824  3490               	retlw	144
  1939  0825  3400               	retlw	0
  1940  0826  3493               	retlw	147
  1941  0827  3400               	retlw	0
  1942  0828  3497               	retlw	151
  1943  0829  3400               	retlw	0
  1944  082A  349A               	retlw	154
  1945  082B  3400               	retlw	0
  1946  082C  349E               	retlw	158
  1947  082D  3400               	retlw	0
  1948  082E  34A2               	retlw	162
  1949  082F  3400               	retlw	0
  1950  0830  34A6               	retlw	166
  1951  0831  3400               	retlw	0
  1952  0832  34AA               	retlw	170
  1953  0833  3400               	retlw	0
  1954  0834  34AE               	retlw	174
  1955  0835  3400               	retlw	0
  1956  0836  34B2               	retlw	178
  1957  0837  3400               	retlw	0
  1958  0838  34B7               	retlw	183
  1959  0839  3400               	retlw	0
  1960  083A  34BB               	retlw	187
  1961  083B  3400               	retlw	0
  1962  083C  34C0               	retlw	192
  1963  083D  3400               	retlw	0
  1964  083E  34C4               	retlw	196
  1965  083F  3400               	retlw	0
  1966  0840  34C9               	retlw	201
  1967  0841  3400               	retlw	0
  1968  0842  34CE               	retlw	206
  1969  0843  3400               	retlw	0
  1970  0844  34D3               	retlw	211
  1971  0845  3400               	retlw	0
  1972  0846  34D8               	retlw	216
  1973  0847  3400               	retlw	0
  1974  0848  34DD               	retlw	221
  1975  0849  3400               	retlw	0
  1976  084A  34E3               	retlw	227
  1977  084B  3400               	retlw	0
  1978  084C  34E8               	retlw	232
  1979  084D  3400               	retlw	0
  1980  084E  34EE               	retlw	238
  1981  084F  3400               	retlw	0
  1982  0850  34F3               	retlw	243
  1983  0851  3400               	retlw	0
  1984  0852  34F9               	retlw	249
  1985  0853  3400               	retlw	0
  1986  0854  34FF               	retlw	255
  1987  0855  3400               	retlw	0
  1988  0856  3406               	retlw	6
  1989  0857  3401               	retlw	1
  1990  0858  340C               	retlw	12
  1991  0859  3401               	retlw	1
  1992  085A  3412               	retlw	18
  1993  085B  3401               	retlw	1
  1994  085C  3419               	retlw	25
  1995  085D  3401               	retlw	1
  1996  085E  3420               	retlw	32
  1997  085F  3401               	retlw	1
  1998  0860  3427               	retlw	39
  1999  0861  3401               	retlw	1
  2000  0862  342E               	retlw	46
  2001  0863  3401               	retlw	1
  2002  0864  3435               	retlw	53
  2003  0865  3401               	retlw	1
  2004  0866  343D               	retlw	61
  2005  0867  3401               	retlw	1
  2006  0868  3444               	retlw	68
  2007  0869  3401               	retlw	1
  2008  086A  344C               	retlw	76
  2009  086B  3401               	retlw	1
  2010  086C  3454               	retlw	84
  2011  086D  3401               	retlw	1
  2012  086E  345D               	retlw	93
  2013  086F  3401               	retlw	1
  2014  0870  3465               	retlw	101
  2015  0871  3401               	retlw	1
  2016  0872  346E               	retlw	110
  2017  0873  3401               	retlw	1
  2018  0874  3477               	retlw	119
  2019  0875  3401               	retlw	1
  2020  0876  3480               	retlw	128
  2021  0877  3401               	retlw	1
  2022  0878  3489               	retlw	137
  2023  0879  3401               	retlw	1
  2024  087A  3492               	retlw	146
  2025  087B  3401               	retlw	1
  2026  087C  349C               	retlw	156
  2027  087D  3401               	retlw	1
  2028  087E  34A6               	retlw	166
  2029  087F  3401               	retlw	1
  2030  0880  34B0               	retlw	176
  2031  0881  3401               	retlw	1
  2032  0882  34BB               	retlw	187
  2033  0883  3401               	retlw	1
  2034  0884  34C6               	retlw	198
  2035  0885  3401               	retlw	1
  2036  0886  34D1               	retlw	209
  2037  0887  3401               	retlw	1
  2038  0888  34DC               	retlw	220
  2039  0889  3401               	retlw	1
  2040  088A  34E7               	retlw	231
  2041  088B  3401               	retlw	1
  2042  088C  34F3               	retlw	243
  2043  088D  3401               	retlw	1
  2044  088E  34FF               	retlw	255
  2045  088F  3401               	retlw	1
  2046  0890  340C               	retlw	12
  2047  0891  3402               	retlw	2
  2048  0892  3418               	retlw	24
  2049  0893  3402               	retlw	2
  2050  0894  3425               	retlw	37
  2051  0895  3402               	retlw	2
  2052  0896  3433               	retlw	51
  2053  0897  3402               	retlw	2
  2054  0898  3440               	retlw	64
  2055  0899  3402               	retlw	2
  2056  089A  344E               	retlw	78
  2057  089B  3402               	retlw	2
  2058  089C  345C               	retlw	92
  2059  089D  3402               	retlw	2
  2060  089E  346B               	retlw	107
  2061  089F  3402               	retlw	2
  2062  08A0  347A               	retlw	122
  2063  08A1  3402               	retlw	2
  2064  08A2  3489               	retlw	137
  2065  08A3  3402               	retlw	2
  2066  08A4  3499               	retlw	153
  2067  08A5  3402               	retlw	2
  2068  08A6  34A9               	retlw	169
  2069  08A7  3402               	retlw	2
  2070  08A8  34BA               	retlw	186
  2071  08A9  3402               	retlw	2
  2072  08AA  34CB               	retlw	203
  2073  08AB  3402               	retlw	2
  2074  08AC  34DC               	retlw	220
  2075  08AD  3402               	retlw	2
  2076  08AE  34EE               	retlw	238
  2077  08AF  3402               	retlw	2
  2078  08B0  3400               	retlw	0
  2079  08B1  3403               	retlw	3
  2080  08B2  3412               	retlw	18
  2081  08B3  3403               	retlw	3
  2082  08B4  3425               	retlw	37
  2083  08B5  3403               	retlw	3
  2084  08B6  3439               	retlw	57
  2085  08B7  3403               	retlw	3
  2086  08B8  344D               	retlw	77
  2087  08B9  3403               	retlw	3
  2088  08BA  3461               	retlw	97
  2089  08BB  3403               	retlw	3
  2090  08BC  3476               	retlw	118
  2091  08BD  3403               	retlw	3
  2092  08BE  348C               	retlw	140
  2093  08BF  3403               	retlw	3
  2094  08C0  34A2               	retlw	162
  2095  08C1  3403               	retlw	3
  2096  08C2  34B8               	retlw	184
  2097  08C3  3403               	retlw	3
  2098  08C4  34CF               	retlw	207
  2099  08C5  3403               	retlw	3
  2100  08C6  34E7               	retlw	231
  2101  08C7  3403               	retlw	3
  2102  08C8  34FF               	retlw	255
  2103  08C9  3403               	retlw	3
  2104  08CA  3418               	retlw	24
  2105  08CB  3404               	retlw	4
  2106  08CC  3431               	retlw	49
  2107  08CD  3404               	retlw	4
  2108  08CE  344B               	retlw	75
  2109  08CF  3404               	retlw	4
  2110  08D0  3466               	retlw	102
  2111  08D1  3404               	retlw	4
  2112  08D2  3481               	retlw	129
  2113  08D3  3404               	retlw	4
  2114  08D4  349D               	retlw	157
  2115  08D5  3404               	retlw	4
  2116  08D6  34B9               	retlw	185
  2117  08D7  3404               	retlw	4
  2118  08D8  34D7               	retlw	215
  2119  08D9  3404               	retlw	4
  2120  08DA  34F5               	retlw	245
  2121  08DB  3404               	retlw	4
  2122  08DC  3413               	retlw	19
  2123  08DD  3405               	retlw	5
  2124  08DE  3433               	retlw	51
  2125  08DF  3405               	retlw	5
  2126  08E0  3453               	retlw	83
  2127  08E1  3405               	retlw	5
  2128  08E2  3474               	retlw	116
  2129  08E3  3405               	retlw	5
  2130  08E4  3496               	retlw	150
  2131  08E5  3405               	retlw	5
  2132  08E6  34B8               	retlw	184
  2133  08E7  3405               	retlw	5
  2134  08E8  34DC               	retlw	220
  2135  08E9  3405               	retlw	5
  2136  08EA  3400               	retlw	0
  2137  08EB  3406               	retlw	6
  2138  08EC  3425               	retlw	37
  2139  08ED  3406               	retlw	6
  2140  08EE  344B               	retlw	75
  2141  08EF  3406               	retlw	6
  2142  08F0  3472               	retlw	114
  2143  08F1  3406               	retlw	6
  2144  08F2  349A               	retlw	154
  2145  08F3  3406               	retlw	6
  2146  08F4  34C3               	retlw	195
  2147  08F5  3406               	retlw	6
  2148  08F6  34ED               	retlw	237
  2149  08F7  3406               	retlw	6
  2150  08F8  3418               	retlw	24
  2151  08F9  3407               	retlw	7
  2152  08FA  3444               	retlw	68
  2153  08FB  3407               	retlw	7
  2154  08FC  3471               	retlw	113
  2155  08FD  3407               	retlw	7
  2156  08FE  349F               	retlw	159
  2157  08FF  3407               	retlw	7
  2158  0900  34CE               	retlw	206
  2159  0901  3407               	retlw	7
  2160  0902  34FF               	retlw	255
  2161  0903  3407               	retlw	7
  2162  0904  3430               	retlw	48
  2163  0905  3408               	retlw	8
  2164  0906  3463               	retlw	99
  2165  0907  3408               	retlw	8
  2166  0908  3497               	retlw	151
  2167  0909  3408               	retlw	8
  2168  090A  34CC               	retlw	204
  2169  090B  3408               	retlw	8
  2170  090C  3403               	retlw	3
  2171  090D  3409               	retlw	9
  2172  090E  343B               	retlw	59
  2173  090F  3409               	retlw	9
  2174  0910  3474               	retlw	116
  2175  0911  3409               	retlw	9
  2176  0912  34AE               	retlw	174
  2177  0913  3409               	retlw	9
  2178  0914  34EA               	retlw	234
  2179  0915  3409               	retlw	9
  2180  0916  3428               	retlw	40
  2181  0917  340A               	retlw	10
  2182  0918  3467               	retlw	103
  2183  0919  340A               	retlw	10
  2184  091A  34A7               	retlw	167
  2185  091B  340A               	retlw	10
  2186  091C  34E9               	retlw	233
  2187  091D  340A               	retlw	10
  2188  091E  342D               	retlw	45
  2189  091F  340B               	retlw	11
  2190  0920  3472               	retlw	114
  2191  0921  340B               	retlw	11
  2192  0922  34B9               	retlw	185
  2193  0923  340B               	retlw	11
  2194  0924  3401               	retlw	1
  2195  0925  340C               	retlw	12
  2196  0926  344C               	retlw	76
  2197  0927  340C               	retlw	12
  2198  0928  3498               	retlw	152
  2199  0929  340C               	retlw	12
  2200  092A  34E6               	retlw	230
  2201  092B  340C               	retlw	12
  2202  092C  3436               	retlw	54
  2203  092D  340D               	retlw	13
  2204  092E  3488               	retlw	136
  2205  092F  340D               	retlw	13
  2206  0930  34DB               	retlw	219
  2207  0931  340D               	retlw	13
  2208  0932  3431               	retlw	49
  2209  0933  340E               	retlw	14
  2210  0934  3489               	retlw	137
  2211  0935  340E               	retlw	14
  2212  0936  34E3               	retlw	227
  2213  0937  340E               	retlw	14
  2214  0938  343F               	retlw	63
  2215  0939  340F               	retlw	15
  2216  093A  349E               	retlw	158
  2217  093B  340F               	retlw	15
  2218  093C  34FE               	retlw	254
  2219  093D  340F               	retlw	15
  2220  093E  3462               	retlw	98
  2221  093F  3410               	retlw	16
  2222  0940  34C7               	retlw	199
  2223  0941  3410               	retlw	16
  2224  0942  342F               	retlw	47
  2225  0943  3411               	retlw	17
  2226  0944  3499               	retlw	153
  2227  0945  3411               	retlw	17
  2228  0946  3406               	retlw	6
  2229  0947  3412               	retlw	18
  2230  0948  3476               	retlw	118
  2231  0949  3412               	retlw	18
  2232  094A  34E8               	retlw	232
  2233  094B  3412               	retlw	18
  2234  094C  345D               	retlw	93
  2235  094D  3413               	retlw	19
  2236  094E  34D5               	retlw	213
  2237  094F  3413               	retlw	19
  2238  0950  3450               	retlw	80
  2239  0951  3414               	retlw	20
  2240  0952  34CE               	retlw	206
  2241  0953  3414               	retlw	20
  2242  0954  344F               	retlw	79
  2243  0955  3415               	retlw	21
  2244  0956  34D3               	retlw	211
  2245  0957  3415               	retlw	21
  2246  0958  345A               	retlw	90
  2247  0959  3416               	retlw	22
  2248  095A  34E5               	retlw	229
  2249  095B  3416               	retlw	22
  2250  095C  3472               	retlw	114
  2251  095D  3417               	retlw	23
  2252  095E  3404               	retlw	4
  2253  095F  3418               	retlw	24
  2254  0960  3498               	retlw	152
  2255  0961  3418               	retlw	24
  2256  0962  3431               	retlw	49
  2257  0963  3419               	retlw	25
  2258  0964  34CD               	retlw	205
  2259  0965  3419               	retlw	25
  2260  0966  346D               	retlw	109
  2261  0967  341A               	retlw	26
  2262  0968  3410               	retlw	16
  2263  0969  341B               	retlw	27
  2264  096A  34B8               	retlw	184
  2265  096B  341B               	retlw	27
  2266  096C  3463               	retlw	99
  2267  096D  341C               	retlw	28
  2268  096E  3413               	retlw	19
  2269  096F  341D               	retlw	29
  2270  0970  34C7               	retlw	199
  2271  0971  341D               	retlw	29
  2272  0972  3480               	retlw	128
  2273  0973  341E               	retlw	30
  2274  0974  343D               	retlw	61
  2275  0975  341F               	retlw	31
  2276  0976  34FE               	retlw	254
  2277  0977  341F               	retlw	31
  2278  0978  34C4               	retlw	196
  2279  0979  3420               	retlw	32
  2280  097A  348F               	retlw	143
  2281  097B  3421               	retlw	33
  2282  097C  345F               	retlw	95
  2283  097D  3422               	retlw	34
  2284  097E  3434               	retlw	52
  2285  097F  3423               	retlw	35
  2286  0980  340E               	retlw	14
  2287  0981  3424               	retlw	36
  2288  0982  34ED               	retlw	237
  2289  0983  3424               	retlw	36
  2290  0984  34D2               	retlw	210
  2291  0985  3425               	retlw	37
  2292  0986  34BC               	retlw	188
  2293  0987  3426               	retlw	38
  2294  0988  34AC               	retlw	172
  2295  0989  3427               	retlw	39
  2296  098A  34A2               	retlw	162
  2297  098B  3428               	retlw	40
  2298  098C  349E               	retlw	158
  2299  098D  3429               	retlw	41
  2300  098E  349F               	retlw	159
  2301  098F  342A               	retlw	42
  2302  0990  34A7               	retlw	167
  2303  0991  342B               	retlw	43
  2304  0992  34B6               	retlw	182
  2305  0993  342C               	retlw	44
  2306  0994  34CB               	retlw	203
  2307  0995  342D               	retlw	45
  2308  0996  34E6               	retlw	230
  2309  0997  342E               	retlw	46
  2310  0998  3409               	retlw	9
  2311  0999  3430               	retlw	48
  2312  099A  3432               	retlw	50
  2313  099B  3431               	retlw	49
  2314  099C  3463               	retlw	99
  2315  099D  3432               	retlw	50
  2316  099E  349B               	retlw	155
  2317  099F  3433               	retlw	51
  2318  09A0  34DB               	retlw	219
  2319  09A1  3434               	retlw	52
  2320  09A2  3422               	retlw	34
  2321  09A3  3436               	retlw	54
  2322  09A4  3471               	retlw	113
  2323  09A5  3437               	retlw	55
  2324  09A6  34C9               	retlw	201
  2325  09A7  3438               	retlw	56
  2326  09A8  3429               	retlw	41
  2327  09A9  343A               	retlw	58
  2328  09AA  3491               	retlw	145
  2329  09AB  343B               	retlw	59
  2330  09AC  3402               	retlw	2
  2331  09AD  343D               	retlw	61
  2332  09AE  347C               	retlw	124
  2333  09AF  343E               	retlw	62
  2334  09B0  34FF               	retlw	255
  2335  09B1  343F               	retlw	63
  2336  09B2  34FF               	retlw	255
  2337  09B3  343F               	retlw	63
  2338  09B4  34FF               	retlw	255
  2339  09B5  343F               	retlw	63
  2340  09B6  34FF               	retlw	255
  2341  09B7  343F               	retlw	63
  2342  09B8  34FF               	retlw	255
  2343  09B9  343F               	retlw	63
  2344  09BA  34FF               	retlw	255
  2345  09BB  343F               	retlw	63
  2346  09BC  34FF               	retlw	255
  2347  09BD  343F               	retlw	63
  2348  09BE  34FF               	retlw	255
  2349  09BF  343F               	retlw	63
  2350  09C0  34FF               	retlw	255
  2351  09C1  343F               	retlw	63
  2352  09C2  34FF               	retlw	255
  2353  09C3  343F               	retlw	63
  2354  09C4  34FF               	retlw	255
  2355  09C5  343F               	retlw	63
  2356  09C6                     __end_of_PWM:	
  2357  09C6                     _UID:	
  2358  09C6  344D               	retlw	77
  2359  09C7  3452               	retlw	82
  2360  09C8  3417               	retlw	23
  2361  09C9  34C3               	retlw	195
  2362  09CA  3410               	retlw	16
  2363  09CB  3492               	retlw	146
  2364  09CC                     __end_of_UID:	
  2365                           
  2366                           	psect	nvBANK1
  2367  00ED                     __pnvBANK1:	
  2368  00ED                     _DMX_Address:	
  2369  00ED                     	ds	2
  2370  0016                     _TMR1	set	22
  2371  0018                     _T1CON	set	24
  2372  000B                     _INTCON	set	11
  2373  001C                     _T2CON	set	28
  2374  001B                     _PR2	set	27
  2375  0065                     _RA5	set	101
  2376  008C                     _TXIF	set	140
  2377  0088                     _TMR1IF	set	136
  2378  008E                     _ADIF	set	142
  2379  005E                     _PEIE	set	94
  2380  008D                     _RCIF	set	141
  2381  0072                     _RC2	set	114
  2382  0071                     _RC1	set	113
  2383  0070                     _RC0	set	112
  2384  0062                     _RA2	set	98
  2385  009C                     _ADRESH	set	156
  2386  009E                     _ADCON1	set	158
  2387  009D                     _ADCON0	set	157
  2388  0098                     _OSCTUNE	set	152
  2389  0099                     _OSCCON	set	153
  2390  048E                     _ADIE	set	1166
  2391  048C                     _TXIE	set	1164
  2392  0474                     _TRISC4	set	1140
  2393  0488                     _TMR1IE	set	1160
  2394  04E9                     _GO_nDONE	set	1257
  2395  0464                     _TRISA4	set	1124
  2396  048D                     _RCIE	set	1165
  2397  0475                     _TRISC5	set	1141
  2398  0473                     _TRISC3	set	1139
  2399  0472                     _TRISC2	set	1138
  2400  0471                     _TRISC1	set	1137
  2401  0470                     _TRISC0	set	1136
  2402  0462                     _TRISA2	set	1122
  2403  0873                     _LATC3	set	2163
  2404  0874                     _LATC4	set	2164
  2405  019A                     _TXREG	set	410
  2406  0199                     _RCREG	set	409
  2407  019B                     _SPBRGL	set	411
  2408  019C                     _SPBRGH	set	412
  2409  019F                     _BAUDCON	set	415
  2410  019D                     _RCSTA	set	413
  2411  0CF0                     _TX9D	set	3312
  2412  0CF6                     _TX9	set	3318
  2413  0CEF                     _SPEN	set	3311
  2414  0CF5                     _TXEN	set	3317
  2415  0C64                     _ANSA4	set	3172
  2416  0CEA                     _FERR	set	3306
  2417  0CF2                     _BRGH	set	3314
  2418  0CF4                     _SYNC	set	3316
  2419  0C73                     _ANSC3	set	3187
  2420  0C72                     _ANSC2	set	3186
  2421  0C71                     _ANSC1	set	3185
  2422  0C70                     _ANSC0	set	3184
  2423  0C62                     _ANSA2	set	3170
  2424  0DCB                     _PWM4CON	set	3531
  2425  0DBB                     _PWM3CON	set	3515
  2426  0DAB                     _PWM2CON	set	3499
  2427  0D9B                     _PWM1CON	set	3483
  2428  0DCE                     _PWM4CLKCON	set	3534
  2429  0DBE                     _PWM3CLKCON	set	3518
  2430  0DAE                     _PWM2CLKCON	set	3502
  2431  0D9E                     _PWM1CLKCON	set	3486
  2432  0DC5                     _PWM4PRL	set	3525
  2433  0DB5                     _PWM3PRL	set	3509
  2434  0DA5                     _PWM2PRL	set	3493
  2435  0D95                     _PWM1PRL	set	3477
  2436  0DC6                     _PWM4PRH	set	3526
  2437  0DB6                     _PWM3PRH	set	3510
  2438  0DA6                     _PWM2PRH	set	3494
  2439  0D96                     _PWM1PRH	set	3478
  2440  0DC1                     _PWM4PHL	set	3521
  2441  0DB1                     _PWM3PHL	set	3505
  2442  0DA1                     _PWM2PHL	set	3489
  2443  0D91                     _PWM1PHL	set	3473
  2444  0DC2                     _PWM4PHH	set	3522
  2445  0DB2                     _PWM3PHH	set	3506
  2446  0DA2                     _PWM2PHH	set	3490
  2447  0D92                     _PWM1PHH	set	3474
  2448  0DCF                     _PWM4LDCON	set	3535
  2449  0DBF                     _PWM3LDCON	set	3519
  2450  0DAF                     _PWM2LDCON	set	3503
  2451  0D9F                     _PWM1LDCON	set	3487
  2452  0DC3                     _PWM4DCL	set	3523
  2453  0DB3                     _PWM3DCL	set	3507
  2454  0DA3                     _PWM2DCL	set	3491
  2455  0D93                     _PWM1DCL	set	3475
  2456  0DC4                     _PWM4DCH	set	3524
  2457  0DB4                     _PWM3DCH	set	3508
  2458  0DA4                     _PWM2DCH	set	3492
  2459  0D94                     _PWM1DCH	set	3476
  2460  0E15                     _RXPPS	set	3605
  2461  0EA4                     _RC4PPS	set	3748
  2462  0EA2                     _RC2PPS	set	3746
  2463  0EA1                     _RC1PPS	set	3745
  2464  0EA0                     _RC0PPS	set	3744
  2465  0E92                     _RA2PPS	set	3730
  2466                           
  2467                           ; #config settings
  2468  0000                     
  2469                           	psect	cinit
  2470  0015                     start_initialization:	
  2471  0015                     __initialization:		;BIGRAM
  2472                           
  2473                           ; Initialize objects allocated to BANK1
  2474  0015  0021               	movlb	1	; select bank1
  2475                           
  2476                           ;initializer for _DMXPeriod
  2477  0016  3064               	movlw	100
  2478  0017  00EF               	movwf	__pdataBANK1& (0+127)
  2479                           
  2480                           ; Initialize objects allocated to BANK2
  2481  0018  0022               	movlb	2	; select bank2
  2482                           
  2483                           ;initializer for _DMX_Repeat
  2484  0019  3001               	movlw	1
  2485  001A  00E4               	movwf	__pdataBANK2& (0+127)
  2486  001B  3002               	movlw	2
  2487  001C  01E5               	clrf	(__pdataBANK2+1)& (0+127)
  2488  001D  01E6               	clrf	(__pdataBANK2+2)& (0+127)
  2489  001E  01E7               	clrf	(__pdataBANK2+3)& (0+127)
  2490  001F  01E8               	clrf	(__pdataBANK2+4)& (0+127)
  2491  0020  01E9               	clrf	(__pdataBANK2+5)& (0+127)
  2492  0021  01EA               	clrf	(__pdataBANK2+6)& (0+127)
  2493  0022  01EB               	clrf	(__pdataBANK2+7)& (0+127)
  2494                           
  2495                           ;initializer for _DMX_sumRepeat
  2496  0023  00EC               	movwf	(__pdataBANK2+8)& (0+127)
  2497  0024  308C               	movlw	140
  2498  0025  01ED               	clrf	(__pdataBANK2+9)& (0+127)
  2499  0026  01EE               	clrf	(__pdataBANK2+10)& (0+127)
  2500  0027  01EF               	clrf	(__pdataBANK2+11)& (0+127)
  2501                           
  2502                           ; Clear objects allocated to BIGRAM
  2503  0028  0084               	movwf	4
  2504  0029  3021               	movlw	33
  2505  002A  0085               	movwf	5
  2506  002B  3064               	movlw	100
  2507  002C  00FE               	movwf	126
  2508  002D  01FF               	clrf	127
  2509  002E  318B  2302  3180   	fcall	clear_ram0
  2510  0031  30A0               	movlw	low __pbssBANK1
  2511                           
  2512                           ; Clear objects allocated to COMMON
  2513  0032  01F6               	clrf	__pbssCOMMON& (0+127)
  2514  0033  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2515  0034  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2516  0035  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2517                           
  2518                           ; Clear objects allocated to BANK1
  2519  0036  0084               	movwf	4
  2520  0037  3000               	movlw	high __pbssBANK1
  2521  0038  0085               	movwf	5
  2522  0039  304D               	movlw	77
  2523  003A  00FE               	movwf	126
  2524  003B  01FF               	clrf	127
  2525  003C  318B  2302  3180   	fcall	clear_ram0
  2526                           
  2527                           ; Clear objects allocated to BANK2
  2528  003F  3020               	movlw	low __pbssBANK2
  2529  0040  0084               	movwf	4
  2530  0041  3001               	movlw	high __pbssBANK2
  2531  0042  0085               	movwf	5
  2532  0043  3044               	movlw	68
  2533  0044  00FE               	movwf	126
  2534  0045  01FF               	clrf	127
  2535  0046  318B  2302  3180   	fcall	clear_ram0
  2536                           
  2537                           ; Clear objects allocated to BANK3
  2538  0049  30A0               	movlw	low __pbssBANK3
  2539  004A  0084               	movwf	4
  2540  004B  3001               	movlw	high __pbssBANK3
  2541  004C  0085               	movwf	5
  2542  004D  3034               	movlw	52
  2543  004E  00FE               	movwf	126
  2544  004F  01FF               	clrf	127
  2545  0050  318B  2302  3180   	fcall	clear_ram0
  2546  0053                     end_of_initialization:	
  2547                           ;End of C runtime variable initialization code
  2548                           
  2549  0053                     __end_of__initialization:	
  2550  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2551  0054  0020               	movlb	0
  2552  0055  2856               	ljmp	_main	;jump to C main() function
  2553  0056                     __pmaintext:	
  2554 ;;
  2555 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2556 ;;
  2557 ;; *************** function _main *****************
  2558 ;; Defined at:
  2559 ;;		line 24 in file "main.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;		None
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : B1F/0
  2570 ;;		On exit  : 1C/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2573 ;;      Params:         0       0       0       0       0       0       0       0
  2574 ;;      Locals:         0       0       0       0       0       0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0
  2576 ;;      Totals:         0       0       0       0       0       0       0       0
  2577 ;;Total ram usage:        0 bytes
  2578 ;; Hardware stack levels required when called:    6
  2579 ;; This function calls:
  2580 ;;		_ADC_init
  2581 ;;		_ADC_loop
  2582 ;;		_DMX_init
  2583 ;;		_DMX_loop
  2584 ;;		_RDM_init
  2585 ;;		_RDM_rx_loop
  2586 ;;		_timer1_init
  2587 ;; This function is called by:
  2588 ;;		Startup code after reset
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           
  2593                           ;psect for function _main
  2594  0056                     _main:	
  2595                           
  2596                           ;main.c: 25: PWM1DCH = 0x00;
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2600  0056  003B               	movlb	27	; select bank27
  2601  0057  0194               	clrf	20	;volatile
  2602                           
  2603                           ;main.c: 26: PWM2DCH = 0x00;
  2604  0058  01A4               	clrf	36	;volatile
  2605                           
  2606                           ;main.c: 27: PWM3DCH = 0x00;
  2607  0059  01B4               	clrf	52	;volatile
  2608                           
  2609                           ;main.c: 28: PWM4DCH = 0x00;
  2610  005A  01C4               	clrf	68	;volatile
  2611                           
  2612                           ;main.c: 30: PWM1DCL = 0x00;
  2613  005B  0193               	clrf	19	;volatile
  2614                           
  2615                           ;main.c: 31: PWM2DCL = 0x00;
  2616  005C  01A3               	clrf	35	;volatile
  2617                           
  2618                           ;main.c: 32: PWM3DCL = 0x00;
  2619  005D  01B3               	clrf	51	;volatile
  2620                           
  2621                           ;main.c: 33: PWM4DCL = 0x00;
  2622  005E  01C3               	clrf	67	;volatile
  2623                           
  2624                           ;main.c: 34: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  2625  005F  2718  3180         	fcall	PL98	;call to abstracted procedure
  2626                           
  2627                           ;main.c: 36: RA2PPS = 0b0011;
  2628  0061  3003               	movlw	3
  2629  0062  003D               	movlb	29	; select bank29
  2630  0063  0092               	movwf	18	;volatile
  2631                           
  2632                           ;main.c: 37: RC0PPS = 0b0100;
  2633  0064  3004               	movlw	4
  2634  0065  00A0               	movwf	32	;volatile
  2635                           
  2636                           ;main.c: 38: RC1PPS = 0b0101;
  2637  0066  3005               	movlw	5
  2638  0067  00A1               	movwf	33	;volatile
  2639                           
  2640                           ;main.c: 39: RC2PPS = 0b0110;
  2641  0068  3006               	movlw	6
  2642  0069  00A2               	movwf	34	;volatile
  2643                           
  2644                           ;main.c: 41: PR2 = 0xFF;
  2645  006A  30FF               	movlw	255
  2646  006B  0020               	movlb	0	; select bank0
  2647  006C  009B               	movwf	27	;volatile
  2648                           
  2649                           ;main.c: 42: T2CON = 0b00000101;
  2650  006D  3005               	movlw	5
  2651  006E  009C               	movwf	28	;volatile
  2652                           
  2653                           ;main.c: 44: OSCCON = 0b11110000;
  2654  006F  30F0               	movlw	240
  2655  0070  0021               	movlb	1	; select bank1
  2656  0071  0099               	movwf	25	;volatile
  2657                           
  2658                           ;main.c: 45: OSCTUNE = 0b000000;
  2659  0072  0198               	clrf	24	;volatile
  2660                           
  2661                           ;main.c: 47: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2662  0073  110E               	bcf	14,2	;volatile
  2663  0074  108E               	bcf	14,1	;volatile
  2664  0075  100E               	bcf	14,0	;volatile
  2665  0076  110C               	bcf	12,2	;volatile
  2666                           
  2667                           ;main.c: 48: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2668  0077  0023               	movlb	3	; select bank3
  2669  0078  110E               	bcf	14,2	;volatile
  2670  0079  108E               	bcf	14,1	;volatile
  2671  007A  100E               	bcf	14,0	;volatile
  2672  007B  110C               	bcf	12,2	;volatile
  2673                           
  2674                           ;main.c: 50: RA2=RC0=RC1=RC2=0;
  2675  007C  0020               	movlb	0	; select bank0
  2676  007D  110E               	bcf	14,2	;volatile
  2677  007E  108E               	bcf	14,1	;volatile
  2678  007F  100E               	bcf	14,0	;volatile
  2679  0080  110C               	bcf	12,2	;volatile
  2680                           
  2681                           ;main.c: 52: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2682  0081  003B               	movlb	27	; select bank27
  2683  0082  01C2               	clrf	66	;volatile
  2684  0083  01B2               	clrf	50	;volatile
  2685  0084  01A2               	clrf	34	;volatile
  2686  0085  0192               	clrf	18	;volatile
  2687                           
  2688                           ;main.c: 53: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2689  0086  01C1               	clrf	65	;volatile
  2690  0087  01B1               	clrf	49	;volatile
  2691  0088  01A1               	clrf	33	;volatile
  2692  0089  0191               	clrf	17	;volatile
  2693                           
  2694                           ;main.c: 54: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0x3F;
  2695  008A  303F               	movlw	63
  2696  008B  00C6               	movwf	70	;volatile
  2697  008C  00B6               	movwf	54	;volatile
  2698  008D  00A6               	movwf	38	;volatile
  2699  008E  0096               	movwf	22	;volatile
  2700                           
  2701                           ;main.c: 55: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2702  008F  30FF               	movlw	255
  2703  0090  00C5               	movwf	69	;volatile
  2704  0091  00B5               	movwf	53	;volatile
  2705  0092  00A5               	movwf	37	;volatile
  2706  0093  0095               	movwf	21	;volatile
  2707                           
  2708                           ;main.c: 56: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2709  0094  01CE               	clrf	78	;volatile
  2710  0095  01BE               	clrf	62	;volatile
  2711  0096  01AE               	clrf	46	;volatile
  2712  0097  019E               	clrf	30	;volatile
  2713                           
  2714                           ;main.c: 60: TRISC3 = 0;
  2715  0098  0021               	movlb	1	; select bank1
  2716  0099  118E               	bcf	14,3	;volatile
  2717                           
  2718                           ;main.c: 61: ANSC3 = 0;
  2719  009A  0023               	movlb	3	; select bank3
  2720  009B  118E               	bcf	14,3	;volatile
  2721                           
  2722                           ;main.c: 62: INTCON = 0b11000000;
  2723  009C  30C0               	movlw	192
  2724  009D  008B               	movwf	11	;volatile
  2725                           
  2726                           ;main.c: 66: timer1_init();
  2727  009E  25D1  3180         	fcall	_timer1_init
  2728                           
  2729                           ;main.c: 73: ADC_init();
  2730  00A0  20B3  3180         	fcall	_ADC_init
  2731                           
  2732                           ;main.c: 74: DMX_init();
  2733  00A2  20E6               	fcall	_DMX_init
  2734                           
  2735                           ;main.c: 75: RDM_init();
  2736  00A3  318B  23EC  3180   	fcall	_RDM_init
  2737                           
  2738                           ;main.c: 76: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  2739  00A6  3080               	movlw	128
  2740  00A7  003B               	movlb	27	; select bank27
  2741  00A8  00CB               	movwf	75	;volatile
  2742  00A9  00BB               	movwf	59	;volatile
  2743  00AA  00AB               	movwf	43	;volatile
  2744  00AB  009B               	movwf	27	;volatile
  2745  00AC                     l4555:	
  2746                           
  2747                           ;main.c: 79: DMX_loop();
  2748  00AC  216F  3180         	fcall	_DMX_loop
  2749                           
  2750                           ;main.c: 80: ADC_loop();
  2751  00AE  20BF               	fcall	_ADC_loop
  2752                           
  2753                           ;main.c: 82: RDM_rx_loop();
  2754  00AF  318D  25EB  3180   	fcall	_RDM_rx_loop
  2755  00B2  28AC               	goto	l4555
  2756  00B3                     __end_of_main:	
  2757  00B3                     __ptext25:	
  2758 ;; *************** function _ADC_init *****************
  2759 ;; Defined at:
  2760 ;;		line 14 in file "ADC.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  2  114[None  ] int 
  2767 ;; Registers used:
  2768 ;;		wreg
  2769 ;; Tracked objects:
  2770 ;;		On entry : B1F/0
  2771 ;;		On exit  : B1F/0
  2772 ;;		Unchanged: B00/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2774 ;;      Params:         0       0       0       0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    2
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           
  2789                           ;psect for function _ADC_init
  2790  00B3                     _ADC_init:	
  2791                           
  2792                           ;ADC.c: 19: TRISA4 = 1;
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _ADC_init: [wreg]
  2796  00B3  0021               	movlb	1	; select bank1
  2797  00B4  160C               	bsf	12,4	;volatile
  2798                           
  2799                           ;ADC.c: 20: ANSA4 = 1;
  2800  00B5  0023               	movlb	3	; select bank3
  2801  00B6  160C               	bsf	12,4	;volatile
  2802                           
  2803                           ;ADC.c: 21: ADCON0 = 0b00001101;
  2804  00B7  300D               	movlw	13
  2805  00B8  0021               	movlb	1	; select bank1
  2806  00B9  009D               	movwf	29	;volatile
  2807                           
  2808                           ;ADC.c: 22: ADCON1 = 0b01110000;
  2809  00BA  3070               	movlw	112
  2810  00BB  009E               	movwf	30	;volatile
  2811                           
  2812                           ;ADC.c: 25: ADIF = 0;
  2813  00BC  0020               	movlb	0	; select bank0
  2814  00BD  1311               	bcf	17,6	;volatile
  2815  00BE  0008               	return
  2816  00BF                     __end_of_ADC_init:	
  2817  00BF                     __ptext24:	
  2818 ;; *************** function _ADC_loop *****************
  2819 ;; Defined at:
  2820 ;;		line 32 in file "ADC.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  2  130[None  ] int 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2829 ;; Tracked objects:
  2830 ;;		On entry : 1E/1
  2831 ;;		On exit  : 1F/1
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2834 ;;      Params:         0       0       0       0       0       0       0       0
  2835 ;;      Locals:         0       0       0       0       0       0       0       0
  2836 ;;      Temps:          2       0       0       0       0       0       0       0
  2837 ;;      Totals:         2       0       0       0       0       0       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    2
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _ADC_loop
  2850  00BF                     _ADC_loop:	
  2851                           
  2852                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2856  00BF  0021               	movlb	1	; select bank1
  2857  00C0  1C5C               	btfss	_ADC_Flags^(0+128),0	;volatile
  2858  00C1  0008               	return
  2859                           
  2860                           ;ADC.c: 34: RxTimer = 0;
  2861  00C2  01D8               	clrf	_RxTimer^(0+128)	;volatile
  2862  00C3  01D9               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2863                           
  2864                           ;ADC.c: 35: ADC_Flags.New = 0;
  2865  00C4  105C               	bcf	_ADC_Flags^(0+128),0	;volatile
  2866                           
  2867                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2868  00C5  085D               	movf	_ADC_Data^(0+128),w	;volatile
  2869  00C6  00F4               	movwf	??_ADC_loop
  2870  00C7  30C7               	movlw	low ((_PWM+1)| (0+32768))
  2871  00C8  271E  3180         	fcall	PL100	;call to abstracted procedure
  2872  00CA  3087               	movlw	high ((_PWM+1)| (0+32768))
  2873  00CB  3D75               	addwfc	??_ADC_loop+1,w
  2874  00CC  0085               	movwf	5
  2875  00CD  0800               	movf	0,w	;code access
  2876  00CE  003B               	movlb	27	; select bank27
  2877  00CF  00C4               	movwf	68	;volatile
  2878  00D0  00B4               	movwf	52	;volatile
  2879  00D1  00A4               	movwf	36	;volatile
  2880  00D2  0094               	movwf	20	;volatile
  2881                           
  2882                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2883  00D3  0021               	movlb	1	; select bank1
  2884  00D4  085D               	movf	_ADC_Data^(0+128),w	;volatile
  2885  00D5  00F4               	movwf	??_ADC_loop
  2886  00D6  30C6               	movlw	low (_PWM| (0+32768))
  2887  00D7  271E  3180         	fcall	PL100	;call to abstracted procedure
  2888  00D9  3087               	movlw	high (_PWM| (0+32768))
  2889  00DA  3D75               	addwfc	??_ADC_loop+1,w
  2890  00DB  0085               	movwf	5
  2891  00DC  0800               	movf	0,w	;code access
  2892  00DD  003B               	movlb	27	; select bank27
  2893  00DE  00C3               	movwf	67	;volatile
  2894  00DF  00B3               	movwf	51	;volatile
  2895  00E0  00A3               	movwf	35	;volatile
  2896  00E1  0093               	movwf	19	;volatile
  2897                           
  2898                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2899  00E2  2718               	fcall	PL98	;call to abstracted procedure
  2900                           
  2901                           ;ADC.c: 39: GO_nDONE = 1;
  2902  00E3  0021               	movlb	1	; select bank1
  2903  00E4  149D               	bsf	29,1	;volatile
  2904  00E5  0008               	return
  2905  00E6                     __end_of_ADC_loop:	
  2906  00E6                     __ptext23:	
  2907 ;; *************** function _DMX_init *****************
  2908 ;; Defined at:
  2909 ;;		line 17 in file "DMX.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  Addr            1    4[COMMON] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2918 ;; Tracked objects:
  2919 ;;		On entry : B1F/0
  2920 ;;		On exit  : B1E/0
  2921 ;;		Unchanged: B00/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2923 ;;      Params:         0       0       0       0       0       0       0       0
  2924 ;;      Locals:         1       0       0       0       0       0       0       0
  2925 ;;      Temps:          0       3       0       0       0       0       0       0
  2926 ;;      Totals:         1       3       0       0       0       0       0       0
  2927 ;;Total ram usage:        4 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    2
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function _DMX_init
  2939  00E6                     _DMX_init:	
  2940                           
  2941                           ;DMX.c: 19: RXPPS = 0b10101;
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  2945  00E6  3015               	movlw	21
  2946  00E7  003C               	movlb	28	; select bank28
  2947  00E8  0095               	movwf	21	;volatile
  2948                           
  2949                           ;DMX.c: 20: TRISC5 = 1;
  2950  00E9  0021               	movlb	1	; select bank1
  2951  00EA  168E               	bsf	14,5	;volatile
  2952                           
  2953                           ;DMX.c: 22: RCSTA = 0b10010000;
  2954  00EB  3090               	movlw	144
  2955  00EC  0023               	movlb	3	; select bank3
  2956  00ED  009D               	movwf	29	;volatile
  2957                           
  2958                           ;DMX.c: 23: SYNC = 0;
  2959  00EE  121E               	bcf	30,4	;volatile
  2960                           
  2961                           ;DMX.c: 24: BAUDCON = 0b00000000;
  2962  00EF  019F               	clrf	31	;volatile
  2963                           
  2964                           ;DMX.c: 25: BRGH = 1;
  2965  00F0  151E               	bsf	30,2	;volatile
  2966                           
  2967                           ;DMX.c: 26: SPBRGH = 0x00;
  2968  00F1  019C               	clrf	28	;volatile
  2969                           
  2970                           ;DMX.c: 27: SPBRGL = 0x7;
  2971  00F2  3007               	movlw	7
  2972  00F3  009B               	movwf	27	;volatile
  2973                           
  2974                           ;DMX.c: 28: RCIE = 1;
  2975  00F4  0021               	movlb	1	; select bank1
  2976  00F5  1691               	bsf	17,5	;volatile
  2977  00F6  300D               	movlw	13
  2978                           
  2979                           ;DMX.c: 34: DMX_Address = 1;
  2980  00F7  01ED               	clrf	_DMX_Address^(0+128)
  2981  00F8  0AED               	incf	_DMX_Address^(0+128),f
  2982  00F9  01EE               	clrf	(_DMX_Address+1)^(0+128)
  2983                           
  2984                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  2985  00FA  0023               	movlb	3	; select bank3
  2986  00FB  00B1               	movwf	(_PWMDCLptr+1)^(0+384)
  2987  00FC  3093               	movlw	147
  2988  00FD  00B0               	movwf	_PWMDCLptr^(0+384)
  2989                           
  2990                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  2991  00FE  300D               	movlw	13
  2992  00FF  00B3               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^(0+128)
  2993  0100  30A3               	movlw	163
  2994  0101  00B2               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^(0+128)
  2995                           
  2996                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  2997  0102  300D               	movlw	13
  2998  0103  00B5               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^(0+128)
  2999  0104  30B3               	movlw	179
  3000  0105  00B4               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^(0+128)
  3001                           
  3002                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  3003  0106  300D               	movlw	13
  3004  0107  00B7               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^(0+128)
  3005  0108  30C3               	movlw	195
  3006  0109  00B6               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^(0+128)
  3007                           
  3008                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  3009  010A  300D               	movlw	13
  3010  010B  00A9               	movwf	(_PWMDCHptr+1)^(0+384)
  3011  010C  3094               	movlw	148
  3012  010D  00A8               	movwf	_PWMDCHptr^(0+384)
  3013                           
  3014                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  3015  010E  300D               	movlw	13
  3016  010F  00AB               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  3017  0110  30A4               	movlw	164
  3018  0111  00AA               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  3019                           
  3020                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  3021  0112  300D               	movlw	13
  3022  0113  00AD               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  3023  0114  30B4               	movlw	180
  3024  0115  00AC               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  3025                           
  3026                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  3027  0116  300D               	movlw	13
  3028  0117  00AF               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  3029  0118  30C4               	movlw	196
  3030  0119  00AE               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  3031                           
  3032                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  3033  011A  300D               	movlw	13
  3034  011B  00A1               	movwf	(_PWMLDCONptr+1)^(0+384)
  3035  011C  309F               	movlw	159
  3036  011D  00A0               	movwf	_PWMLDCONptr^(0+384)
  3037                           
  3038                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  3039  011E  300D               	movlw	13
  3040  011F  00A3               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  3041  0120  30AF               	movlw	175
  3042  0121  00A2               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  3043                           
  3044                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  3045  0122  300D               	movlw	13
  3046  0123  00A5               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  3047  0124  30BF               	movlw	191
  3048  0125  00A4               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  3049                           
  3050                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  3051  0126  300D               	movlw	13
  3052  0127  00A7               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  3053  0128  30CF               	movlw	207
  3054  0129  00A6               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  3055                           
  3056                           ;DMX.c: 48: PWM_Pin[0]=RA2;
  3057  012A  3000               	movlw	0
  3058  012B  0020               	movlb	0	; select bank0
  3059  012C  190C               	btfsc	12,2	;volatile
  3060  012D  3001               	movlw	1
  3061  012E  0021               	movlb	1	; select bank1
  3062  012F  00BF               	movwf	_PWM_Pin^(0+128)	;volatile
  3063                           
  3064                           ;DMX.c: 49: PWM_Pin[1]=RC0;
  3065  0130  3000               	movlw	0
  3066  0131  0020               	movlb	0	; select bank0
  3067  0132  180E               	btfsc	14,0	;volatile
  3068  0133  3001               	movlw	1
  3069  0134  0021               	movlb	1	; select bank1
  3070  0135  00C0               	movwf	(_PWM_Pin^(0+128)+1)	;volatile
  3071                           
  3072                           ;DMX.c: 50: PWM_Pin[2]=RC1;
  3073  0136  3000               	movlw	0
  3074  0137  0020               	movlb	0	; select bank0
  3075  0138  188E               	btfsc	14,1	;volatile
  3076  0139  3001               	movlw	1
  3077  013A  0021               	movlb	1	; select bank1
  3078  013B  00C1               	movwf	(_PWM_Pin^(0+128)+2)	;volatile
  3079                           
  3080                           ;DMX.c: 51: PWM_Pin[3]=RC2;
  3081  013C  3000               	movlw	0
  3082  013D  0020               	movlb	0	; select bank0
  3083  013E  190E               	btfsc	14,2	;volatile
  3084  013F  3001               	movlw	1
  3085  0140  0021               	movlb	1	; select bank1
  3086  0141  00C2               	movwf	(_PWM_Pin^(0+128)+3)	;volatile
  3087                           
  3088                           ;DMX.c: 53: char Addr=0;
  3089  0142  01F4               	clrf	DMX_init@Addr
  3090  0143                     l4297:	
  3091                           ;DMX.c: 54: while(Addr<4){
  3092                           
  3093  0143  3004               	movlw	4
  3094  0144  0274               	subwf	DMX_init@Addr,w
  3095  0145  1803               	btfsc	3,0
  3096  0146  0008               	return
  3097                           
  3098                           ;DMX.c: 55: DMX_sumRepeat[Addr]=2;
  3099  0147  0874               	movf	DMX_init@Addr,w
  3100  0148  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3101  0149  0086               	movwf	6
  3102  014A  3001               	movlw	1	; select bank2/3
  3103  014B  0087               	movwf	7
  3104  014C  3002               	movlw	2
  3105  014D  0081               	movwf	1
  3106                           
  3107                           ;DMX.c: 56: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3108  014E  3574               	lslf	DMX_init@Addr,w
  3109  014F  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3110  0150  0086               	movwf	6
  3111  0151  3574               	lslf	DMX_init@Addr,w
  3112  0152  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3113  0153  0084               	movwf	4
  3114  0154  3001               	movlw	1	; select bank2/3
  3115  0155  0085               	movwf	5
  3116  0156  3F80               	movwi [0]fsr0
  3117  0157  0081               	movwf	1
  3118                           
  3119                           ;DMX.c: 57: DMXSign[Addr].InfiniteLoop=0;
  3120  0158  0874               	movf	DMX_init@Addr,w
  3121  0159  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3122  015A  0086               	movwf	6
  3123  015B  0187               	clrf	7
  3124  015C  1101               	bcf	1,2
  3125                           
  3126                           ;DMX.c: 58: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3127  015D  0020               	movlb	0	; select bank0
  3128  015E  01A0               	clrf	??_DMX_init
  3129  015F  01A1               	clrf	??_DMX_init+1
  3130  0160  01A2               	clrf	??_DMX_init+2
  3131  0161  0874               	movf	DMX_init@Addr,w
  3132  0162  0774               	addwf	DMX_init@Addr,w
  3133  0163  0774               	addwf	DMX_init@Addr,w
  3134  0164  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3135  0165  26B6  3180         	fcall	PL50	;call to abstracted procedure
  3136  0167  0874               	movf	DMX_init@Addr,w
  3137  0168  0774               	addwf	DMX_init@Addr,w
  3138  0169  0774               	addwf	DMX_init@Addr,w
  3139  016A  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  3140  016B  26B6  3180         	fcall	PL50	;call to abstracted procedure
  3141                           
  3142                           ;DMX.c: 59: Addr++;
  3143  016D  0AF4               	incf	DMX_init@Addr,f
  3144  016E  2943               	goto	l4297
  3145  016F                     __end_of_DMX_init:	
  3146  016F                     __ptext12:	
  3147 ;; *************** function _DMX_loop *****************
  3148 ;; Defined at:
  3149 ;;		line 62 in file "DMX.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  Addr            1   76[BANK0 ] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 4/1B
  3160 ;;		On exit  : 1E/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3163 ;;      Params:         0       0       0       0       0       0       0       0
  3164 ;;      Locals:         0       4       0       0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       8       0       0       0
  3166 ;;      Totals:         0       4       0       0       8       0       0       0
  3167 ;;Total ram usage:       12 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    5
  3170 ;; This function calls:
  3171 ;;		___awtoft
  3172 ;;		___ftadd
  3173 ;;		___ftdiv
  3174 ;;		___ftge
  3175 ;;		___ftmul
  3176 ;;		___ftsub
  3177 ;;		___fttol
  3178 ;;		___lbtoft
  3179 ;;		___lwtoft
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _DMX_loop
  3187  016F                     _DMX_loop:	
  3188                           
  3189                           ;DMX.c: 63: char Addr = 0;
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3193  016F  0020               	movlb	0	; select bank0
  3194  0170  01EC               	clrf	DMX_loop@Addr
  3195                           
  3196                           ;DMX.c: 65: if (DMX_Flags.RxNew == 1) {
  3197  0171  1C76               	btfss	_DMX_Flags,0	;volatile
  3198  0172  2AD8               	goto	l374
  3199                           
  3200                           ;DMX.c: 66: DMX_Flags.RxNew = 0;
  3201  0173  1076               	bcf	_DMX_Flags,0	;volatile
  3202                           
  3203                           ;DMX.c: 68: DMXPeriodDimming=0;
  3204  0174  0021               	movlb	1	; select bank1
  3205  0175  01E5               	clrf	_DMXPeriodDimming^(0+128)	;volatile
  3206                           
  3207                           ;DMX.c: 69: DMXStepConst=3;
  3208  0176  3003               	movlw	3
  3209  0177  00E4               	movwf	_DMXStepConst^(0+128)
  3210  0178                     l4435:	
  3211                           ;DMX.c: 70: while (Addr < 4) {
  3212                           
  3213  0178  3004               	movlw	4
  3214  0179  0020               	movlb	0	; select bank0
  3215  017A  026C               	subwf	DMX_loop@Addr,w
  3216  017B  1803               	btfsc	3,0
  3217  017C  2AD8               	goto	l374
  3218                           
  3219                           ;DMX.c: 71: rxdata=RxData[Addr];
  3220  017D  086C               	movf	DMX_loop@Addr,w
  3221  017E  3EE9               	addlw	(low (_RxData| 0))& (0+255)
  3222  017F  0086               	movwf	6
  3223  0180  0187               	clrf	7
  3224  0181  0801               	movf	1,w
  3225  0182  0021               	movlb	1	; select bank1
  3226  0183  00E3               	movwf	_rxdata^(0+128)
  3227                           
  3228                           ;DMX.c: 73: if (DMX_TargetBright[Addr] < rxdata) {
  3229  0184  0020               	movlb	0	; select bank0
  3230  0185  2679  3180         	fcall	PL26	;call to abstracted procedure
  3231  0187  26A6  3180         	fcall	PL46	;call to abstracted procedure
  3232  0189  0021               	movlb	1	; select bank1
  3233  018A  0863               	movf	_rxdata^(0+128),w
  3234  018B  23E9  3180         	fcall	___lbtoft
  3235  018D  0828               	movf	?___lbtoft,w
  3236  018E  00AF               	movwf	___ftge@ff2
  3237  018F  0829               	movf	?___lbtoft+1,w
  3238  0190  00B0               	movwf	___ftge@ff2+1
  3239  0191  082A               	movf	?___lbtoft+2,w
  3240  0192  00B1               	movwf	___ftge@ff2+2
  3241  0193  2414  3180         	fcall	___ftge
  3242  0195  1803               	btfsc	3,0
  3243  0196  29F7               	goto	l4395
  3244                           
  3245                           ;DMX.c: 74: DMX_difference=rxdata-DMX_TargetBright[Addr];
  3246  0197  086C               	movf	DMX_loop@Addr,w
  3247  0198  264E  3180         	fcall	PL16	;call to abstracted procedure
  3248  019A  265B  3180         	fcall	PL20	;call to abstracted procedure
  3249  019C  0021               	movlb	1	; select bank1
  3250  019D  0863               	movf	_rxdata^(0+128),w
  3251  019E  23E9  3180         	fcall	___lbtoft
  3252  01A0  0828               	movf	?___lbtoft,w
  3253  01A1  00D9               	movwf	___ftsub@f1
  3254  01A2  0829               	movf	?___lbtoft+1,w
  3255  01A3  00DA               	movwf	___ftsub@f1+1
  3256  01A4  082A               	movf	?___lbtoft+2,w
  3257  01A5  00DB               	movwf	___ftsub@f1+2
  3258  01A6  23F9  3180         	fcall	___ftsub
  3259                           
  3260                           ;DMX.c: 75: if(DMX_difference<0.05){
  3261  01A8  25ED  3180         	fcall	PL4	;call to abstracted procedure
  3262  01AA  2414  3180         	fcall	___ftge
  3263                           
  3264                           ;DMX.c: 76: DMXSign[Addr].SIGN = 0b00;
  3265  01AC  086C               	movf	DMX_loop@Addr,w
  3266  01AD  1803               	btfsc	3,0
  3267  01AE  29B8               	goto	L2
  3268                           
  3269                           ;DMX.c: 77: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3270  01AF  26AE  3180         	fcall	PL48	;call to abstracted procedure
  3271  01B1  23E9  3180         	fcall	___lbtoft
  3272  01B3  086C               	movf	DMX_loop@Addr,w
  3273  01B4  076C               	addwf	DMX_loop@Addr,w
  3274  01B5  25D7  3180         	fcall	PL2	;call to abstracted procedure
  3275                           
  3276                           ;DMX.c: 78: }else{
  3277  01B7  2A70               	goto	l4415
  3278  01B8                     L2:	
  3279                           ;DMX.c: 79: DMXSign[Addr].SIGN = 0b01;
  3280                           
  3281  01B8  270C  3180         	fcall	PL92	;call to abstracted procedure
  3282  01BA  3801               	iorlw	1
  3283                           
  3284                           ;DMX.c: 80: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3285                           
  3286                           ;DMX.c: 81: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3287  01BB  260A  3180         	fcall	PL6	;call to abstracted procedure
  3288  01BD  076C               	addwf	DMX_loop@Addr,w
  3289  01BE  076C               	addwf	DMX_loop@Addr,w
  3290  01BF  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  3291  01C0  0086               	movwf	6
  3292  01C1  26BE  3180         	fcall	PL52	;call to abstracted procedure
  3293  01C3  086C               	movf	DMX_loop@Addr,w
  3294  01C4  2700  3180         	fcall	PL88	;call to abstracted procedure
  3295  01C6  23E9  3180         	fcall	___lbtoft
  3296  01C8  262E  3180         	fcall	PL10	;call to abstracted procedure
  3297  01CA  254A  3180         	fcall	___ftmul
  3298  01CC  26CA  3180         	fcall	PL60	;call to abstracted procedure
  3299  01CE  2440  3180         	fcall	___ftdiv
  3300  01D0  083B               	movf	?___ftdiv,w
  3301  01D1  00CD               	movwf	___ftadd@f2
  3302  01D2  083C               	movf	?___ftdiv+1,w
  3303  01D3  00CE               	movwf	___ftadd@f2+1
  3304  01D4  083D               	movf	?___ftdiv+2,w
  3305  01D5  00CF               	movwf	___ftadd@f2+2
  3306  01D6  249C  3180         	fcall	___ftadd
  3307  01D8  086C               	movf	DMX_loop@Addr,w
  3308  01D9  264E  3180         	fcall	PL16	;call to abstracted procedure
  3309  01DB  26F4  3180         	fcall	PL78	;call to abstracted procedure
  3310                           
  3311                           ;DMX.c: 82: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>2);
  3312  01DD  268B  3180         	fcall	PL34	;call to abstracted procedure
  3313  01DF  25A6  3180         	fcall	___awtoft
  3314  01E1  2697  3180         	fcall	PL40	;call to abstracted procedure
  3315  01E3  2627  3180         	fcall	PL8	;call to abstracted procedure
  3316  01E5  265B  3180         	fcall	PL20	;call to abstracted procedure
  3317  01E7  2679  3180         	fcall	PL26	;call to abstracted procedure
  3318  01E9  0086               	movwf	6
  3319  01EA  2654  3180         	fcall	PL18	;call to abstracted procedure
  3320  01EC  23F9  3180         	fcall	___ftsub
  3321  01EE  26E6  3180         	fcall	PL70	;call to abstracted procedure
  3322  01F0  2440  3180         	fcall	___ftdiv
  3323  01F2  2671  3180         	fcall	PL24	;call to abstracted procedure
  3324  01F4  26D1  3180         	fcall	PL62	;call to abstracted procedure
  3325  01F6  2A70               	goto	l4415
  3326  01F7                     l4395:	
  3327  01F7  0021               	movlb	1	; select bank1
  3328  01F8  0863               	movf	_rxdata^(0+128),w
  3329  01F9  23E9  3180         	fcall	___lbtoft
  3330  01FB  0828               	movf	?___lbtoft,w
  3331  01FC  00AC               	movwf	___ftge@ff1
  3332  01FD  0829               	movf	?___lbtoft+1,w
  3333  01FE  00AD               	movwf	___ftge@ff1+1
  3334  01FF  082A               	movf	?___lbtoft+2,w
  3335  0200  00AE               	movwf	___ftge@ff1+2
  3336  0201  086C               	movf	DMX_loop@Addr,w
  3337  0202  264E  3180         	fcall	PL16	;call to abstracted procedure
  3338  0204  26DF  3180         	fcall	PL68	;call to abstracted procedure
  3339  0206  2414  3180         	fcall	___ftge
  3340  0208  1803               	btfsc	3,0
  3341  0209  2A63               	goto	l4411
  3342                           
  3343                           ;DMX.c: 85: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  3344  020A  0021               	movlb	1	; select bank1
  3345  020B  0863               	movf	_rxdata^(0+128),w
  3346  020C  23E9  3180         	fcall	___lbtoft
  3347  020E  26ED  3180         	fcall	PL76	;call to abstracted procedure
  3348  0210  2679  3180         	fcall	PL26	;call to abstracted procedure
  3349  0212  2645  3180         	fcall	PL14	;call to abstracted procedure
  3350  0214  23F9  3180         	fcall	___ftsub
  3351                           
  3352                           ;DMX.c: 86: if(DMX_difference<0.05){
  3353  0216  25ED  3180         	fcall	PL4	;call to abstracted procedure
  3354  0218  2414  3180         	fcall	___ftge
  3355                           
  3356                           ;DMX.c: 87: DMXSign[Addr].SIGN = 0b00;
  3357  021A  086C               	movf	DMX_loop@Addr,w
  3358  021B  1803               	btfsc	3,0
  3359  021C  2A26               	goto	L3
  3360                           
  3361                           ;DMX.c: 88: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3362  021D  26AE  3180         	fcall	PL48	;call to abstracted procedure
  3363  021F  23E9  3180         	fcall	___lbtoft
  3364  0221  086C               	movf	DMX_loop@Addr,w
  3365  0222  076C               	addwf	DMX_loop@Addr,w
  3366  0223  25D7  3180         	fcall	PL2	;call to abstracted procedure
  3367                           
  3368                           ;DMX.c: 89: }
  3369  0225  2A70               	goto	l4415
  3370  0226                     L3:	
  3371                           ;DMX.c: 90: else{
  3372                           ;DMX.c: 91: DMXSign[Addr].SIGN = 0b10;
  3373                           
  3374  0226  270C  3180         	fcall	PL92	;call to abstracted procedure
  3375  0228  3802               	iorlw	2
  3376                           
  3377                           ;DMX.c: 92: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  3378                           
  3379                           ;DMX.c: 93: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*2/DMX_sumRepea
      +                          t[Addr]);
  3380  0229  260A  3180         	fcall	PL6	;call to abstracted procedure
  3381  022B  2700  3180         	fcall	PL88	;call to abstracted procedure
  3382  022D  23E9  3180         	fcall	___lbtoft
  3383  022F  262E  3180         	fcall	PL10	;call to abstracted procedure
  3384  0231  254A  3180         	fcall	___ftmul
  3385  0233  26CA  3180         	fcall	PL60	;call to abstracted procedure
  3386  0235  2440  3180         	fcall	___ftdiv
  3387  0237  083B               	movf	?___ftdiv,w
  3388  0238  00D6               	movwf	___ftsub@f2
  3389  0239  083C               	movf	?___ftdiv+1,w
  3390  023A  00D7               	movwf	___ftsub@f2+1
  3391  023B  083D               	movf	?___ftdiv+2,w
  3392  023C  00D8               	movwf	___ftsub@f2+2
  3393  023D  2679  3180         	fcall	PL26	;call to abstracted procedure
  3394  023F  2645  3180         	fcall	PL14	;call to abstracted procedure
  3395  0241  23F9  3180         	fcall	___ftsub
  3396  0243  086C               	movf	DMX_loop@Addr,w
  3397  0244  264E  3180         	fcall	PL16	;call to abstracted procedure
  3398  0246  26FA  3180         	fcall	PL86	;call to abstracted procedure
  3399                           
  3400                           ;DMX.c: 94: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMXP
      +                          eriod>>2);
  3401  0248  268B  3180         	fcall	PL34	;call to abstracted procedure
  3402  024A  25A6  3180         	fcall	___awtoft
  3403  024C  2697  3180         	fcall	PL40	;call to abstracted procedure
  3404  024E  086C               	movf	DMX_loop@Addr,w
  3405  024F  264E  3180         	fcall	PL16	;call to abstracted procedure
  3406  0251  265B  3180         	fcall	PL20	;call to abstracted procedure
  3407  0253  086C               	movf	DMX_loop@Addr,w
  3408  0254  26C5  3180         	fcall	PL54	;call to abstracted procedure
  3409  0256  2654  3180         	fcall	PL18	;call to abstracted procedure
  3410  0258  23F9  3180         	fcall	___ftsub
  3411  025A  26E6  3180         	fcall	PL70	;call to abstracted procedure
  3412  025C  2440  3180         	fcall	___ftdiv
  3413  025E  2671  3180         	fcall	PL24	;call to abstracted procedure
  3414  0260  26D1  3180         	fcall	PL62	;call to abstracted procedure
  3415  0262  2A70               	goto	l4415
  3416  0263                     l4411:	
  3417                           
  3418                           ;DMX.c: 97: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  3419  0263  0021               	movlb	1	; select bank1
  3420  0264  0863               	movf	_rxdata^(0+128),w
  3421  0265  23E9  3180         	fcall	___lbtoft
  3422  0267  086C               	movf	DMX_loop@Addr,w
  3423  0268  076C               	addwf	DMX_loop@Addr,w
  3424  0269  25D7  3180         	fcall	PL2	;call to abstracted procedure
  3425                           
  3426                           ;DMX.c: 98: DMXSign[Addr].SIGN = 0b00;
  3427  026B  086C               	movf	DMX_loop@Addr,w
  3428  026C  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3429  026D  0086               	movwf	6
  3430  026E  30FC               	movlw	-4
  3431  026F  0581               	andwf	1,f
  3432  0270                     l4415:	
  3433                           
  3434                           ;DMX.c: 99: }
  3435                           ;DMX.c: 101: if(preRxData[Addr]==RxData[Addr]){
  3436  0270  086C               	movf	DMX_loop@Addr,w
  3437  0271  3EE9               	addlw	(low (_RxData| 0))& (0+255)
  3438  0272  0086               	movwf	6
  3439  0273  0187               	clrf	7
  3440  0274  086C               	movf	DMX_loop@Addr,w
  3441  0275  3EB8               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3442  0276  0084               	movwf	4
  3443  0277  3001               	movlw	1	; select bank3/4
  3444  0278  0085               	movwf	5
  3445  0279  0800               	movf	0,w
  3446  027A  0601               	xorwf	1,w
  3447  027B  1D03               	skipz
  3448  027C  2AA3               	goto	l4427
  3449                           
  3450                           ;DMX.c: 102: if( !DMXSign[Addr].InfiniteLoop){
  3451  027D  086C               	movf	DMX_loop@Addr,w
  3452  027E  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3453  027F  0086               	movwf	6
  3454  0280  1901               	btfsc	1,2
  3455  0281  2ACB               	goto	l388
  3456                           
  3457                           ;DMX.c: 103: DMX_Repeat[Addr][0]++;
  3458  0282  356C               	lslf	DMX_loop@Addr,w
  3459  0283  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3460  0284  0086               	movwf	6
  3461  0285  3001               	movlw	1	; select bank2/3
  3462  0286  0087               	movwf	7
  3463  0287  0A81               	incf	1,f
  3464                           
  3465                           ;DMX.c: 104: if(DMX_Repeat[Addr][0]==0x10){
  3466  0288  356C               	lslf	DMX_loop@Addr,w
  3467  0289  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3468  028A  0086               	movwf	6
  3469  028B  3010               	movlw	16
  3470  028C  0601               	xorwf	1,w
  3471  028D  1D03               	btfss	3,2
  3472  028E  2ACB               	goto	l388
  3473                           
  3474                           ;DMX.c: 105: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3475  028F  356C               	lslf	DMX_loop@Addr,w
  3476  0290  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3477  0291  0086               	movwf	6
  3478  0292  356C               	lslf	DMX_loop@Addr,w
  3479  0293  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3480  0294  0084               	movwf	4
  3481  0295  3001               	movlw	1	; select bank2/3
  3482  0296  3F80               	movwi [0]fsr0
  3483  0297  0081               	movwf	1
  3484                           
  3485                           ;DMX.c: 106: DMX_sumRepeat[Addr]=2;
  3486  0298  086C               	movf	DMX_loop@Addr,w
  3487  0299  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3488  029A  0086               	movwf	6
  3489  029B  3002               	movlw	2
  3490  029C  0081               	movwf	1
  3491                           
  3492                           ;DMX.c: 107: DMXSign[Addr].InfiniteLoop=1;
  3493  029D  086C               	movf	DMX_loop@Addr,w
  3494  029E  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3495  029F  0086               	movwf	6
  3496  02A0  0187               	clrf	7
  3497  02A1  1501               	bsf	1,2
  3498  02A2  2ACB               	goto	l388
  3499  02A3                     l4427:	
  3500                           
  3501                           ;DMX.c: 111: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  3502  02A3  356C               	lslf	DMX_loop@Addr,w
  3503  02A4  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3504  02A5  0086               	movwf	6
  3505  02A6  3001               	movlw	1	; select bank2/3
  3506  02A7  0087               	movwf	7
  3507  02A8  356C               	lslf	DMX_loop@Addr,w
  3508  02A9  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3509  02AA  0084               	movwf	4
  3510  02AB  3001               	movlw	1	; select bank2/3
  3511  02AC  0085               	movwf	5
  3512  02AD  0800               	movf	0,w
  3513  02AE  0081               	movwf	1
  3514                           
  3515                           ;DMX.c: 112: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  3516  02AF  086C               	movf	DMX_loop@Addr,w
  3517  02B0  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  3518  02B1  0086               	movwf	6
  3519  02B2  356C               	lslf	DMX_loop@Addr,w
  3520  02B3  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  3521  02B4  0084               	movwf	4
  3522  02B5  0800               	movf	0,w
  3523  02B6  0023               	movlb	3	; select bank3
  3524  02B7  00D4               	movwf	??_DMX_loop^(0+384)
  3525  02B8  0020               	movlb	0	; select bank0
  3526  02B9  356C               	lslf	DMX_loop@Addr,w
  3527  02BA  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3528  02BB  0084               	movwf	4
  3529  02BC  0800               	movf	0,w
  3530  02BD  0023               	movlb	3	; select bank3
  3531  02BE  0754               	addwf	??_DMX_loop^(0+384),w
  3532  02BF  0081               	movwf	1
  3533                           
  3534                           ;DMX.c: 113: DMX_Repeat[Addr][0]=1;
  3535  02C0  0020               	movlb	0	; select bank0
  3536  02C1  356C               	lslf	DMX_loop@Addr,w
  3537  02C2  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3538  02C3  0086               	movwf	6
  3539  02C4  0181               	clrf	1
  3540  02C5  0A81               	incf	1,f
  3541                           
  3542                           ;DMX.c: 114: DMXSign[Addr].InfiniteLoop=0;
  3543  02C6  086C               	movf	DMX_loop@Addr,w
  3544  02C7  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3545  02C8  0086               	movwf	6
  3546  02C9  0187               	clrf	7
  3547  02CA  1101               	bcf	1,2
  3548  02CB                     l388:	
  3549                           
  3550                           ;DMX.c: 115: }
  3551                           ;DMX.c: 116: preRxData[Addr]=RxData[Addr];
  3552  02CB  086C               	movf	DMX_loop@Addr,w
  3553  02CC  3EB8               	addlw	(low (_preRxData| (0+256)))& (0+255)
  3554  02CD  0086               	movwf	6
  3555  02CE  3001               	movlw	1	; select bank3/4
  3556  02CF  0087               	movwf	7
  3557  02D0  086C               	movf	DMX_loop@Addr,w
  3558  02D1  3EE9               	addlw	(low (_RxData| 0))& (0+255)
  3559  02D2  0084               	movwf	4
  3560  02D3  0185               	clrf	5
  3561  02D4  0800               	movf	0,w
  3562  02D5  0081               	movwf	1
  3563                           
  3564                           ;DMX.c: 117: Addr++;
  3565  02D6  0AEC               	incf	DMX_loop@Addr,f
  3566  02D7  2978               	goto	l4435
  3567  02D8                     l374:	
  3568                           
  3569                           ;DMX.c: 118: }
  3570                           ;DMX.c: 119: }
  3571                           ;DMX.c: 121: if (Timer.MS) {
  3572  02D8  0021               	movlb	1	; select bank1
  3573  02D9  1C38               	btfss	_Timer^(0+128),0	;volatile
  3574  02DA  0008               	return
  3575                           
  3576                           ;DMX.c: 122: DMXPeriodConst++;
  3577  02DB  0AE6               	incf	_DMXPeriodConst^(0+128),f	;volatile
  3578                           
  3579                           ;DMX.c: 123: Timer.MS = 0;
  3580  02DC  1038               	bcf	_Timer^(0+128),0	;volatile
  3581                           
  3582                           ;DMX.c: 124: Addr = 0;
  3583  02DD  0020               	movlb	0	; select bank0
  3584  02DE  01EC               	clrf	DMX_loop@Addr
  3585                           
  3586                           ;DMX.c: 125: DMXPeriodDimming++;
  3587  02DF  0021               	movlb	1	; select bank1
  3588  02E0  0AE5               	incf	_DMXPeriodDimming^(0+128),f	;volatile
  3589                           
  3590                           ;DMX.c: 126: if(DMXStepConst==0 && DMXPeriodDimming<DMXPeriod){
  3591  02E1  0864               	movf	_DMXStepConst^(0+128),w
  3592  02E2  1D03               	btfss	3,2
  3593  02E3  2BE7               	goto	l4479
  3594  02E4  086F               	movf	_DMXPeriod^(0+128),w
  3595  02E5  0265               	subwf	_DMXPeriodDimming^(0+128),w	;volatile
  3596  02E6  1803               	skipnc
  3597  02E7  2BE7               	goto	l4479
  3598                           
  3599                           ;DMX.c: 127: DMXStepConst=3;
  3600  02E8  3003               	movlw	3
  3601  02E9  00E4               	movwf	_DMXStepConst^(0+128)
  3602                           
  3603                           ;DMX.c: 128: while (Addr < 4) {
  3604  02EA  2BD2               	goto	l4477
  3605  02EB                     l4451:	
  3606                           
  3607                           ;DMX.c: 131: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  3608  02EB  2671  3180         	fcall	PL24	;call to abstracted procedure
  3609  02ED  26BE  3180         	fcall	PL52	;call to abstracted procedure
  3610  02EF  2627  3180         	fcall	PL8	;call to abstracted procedure
  3611  02F1  3F40               	moviw [0]fsr1
  3612  02F2  00CD               	movwf	___ftadd@f2
  3613  02F3  3F41               	moviw [1]fsr1
  3614  02F4  00CE               	movwf	___ftadd@f2+1
  3615  02F5  3F42               	moviw [2]fsr1
  3616  02F6  00CF               	movwf	___ftadd@f2+2
  3617  02F7  249C  3180         	fcall	___ftadd
  3618  02F9  2627  3180         	fcall	PL8	;call to abstracted procedure
  3619  02FB  26F4  3180         	fcall	PL78	;call to abstracted procedure
  3620  02FD  3FC2               	movwi [2]fsr1
  3621                           
  3622                           ;DMX.c: 132: if(DMX_CurrentBright[Addr]>255){
  3623  02FE  307F               	movlw	127
  3624  02FF  01AC               	clrf	___ftge@ff1
  3625  0300  00AD               	movwf	___ftge@ff1+1
  3626  0301  3043               	movlw	67
  3627  0302  00AE               	movwf	___ftge@ff1+2
  3628  0303  086C               	movf	DMX_loop@Addr,w
  3629  0304  26C5  3180         	fcall	PL54	;call to abstracted procedure
  3630  0306  26DF  3180         	fcall	PL68	;call to abstracted procedure
  3631  0308  2414  3180         	fcall	___ftge
  3632                           
  3633                           ;DMX.c: 133: DMX_CurrentBright[Addr]=255;
  3634  030A  086C               	movf	DMX_loop@Addr,w
  3635  030B  1803               	btfsc	3,0
  3636  030C  2B36               	goto	L4
  3637  030D  269E  3180         	fcall	PL44	;call to abstracted procedure
  3638  030F  307F               	movlw	127
  3639  0310  3FC1               	movwi [1]fsr1
  3640  0311  3043               	movlw	67
  3641  0312  3FC2               	movwi [2]fsr1
  3642  0313  2B35               	goto	l4463
  3643  0314                     l4455:	
  3644                           
  3645                           ;DMX.c: 138: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  3646  0314  2671  3180         	fcall	PL24	;call to abstracted procedure
  3647  0316  265B  3180         	fcall	PL20	;call to abstracted procedure
  3648  0318  2627  3180         	fcall	PL8	;call to abstracted procedure
  3649  031A  2654  3180         	fcall	PL18	;call to abstracted procedure
  3650  031C  23F9  3180         	fcall	___ftsub
  3651  031E  2627  3180         	fcall	PL8	;call to abstracted procedure
  3652  0320  26FA  3180         	fcall	PL86	;call to abstracted procedure
  3653  0322  3FC2               	movwi [2]fsr1
  3654                           
  3655                           ;DMX.c: 139: if(DMX_CurrentBright[Addr]<0){
  3656  0323  086C               	movf	DMX_loop@Addr,w
  3657  0324  076C               	addwf	DMX_loop@Addr,w
  3658  0325  076C               	addwf	DMX_loop@Addr,w
  3659  0326  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3660  0327  26A6  3180         	fcall	PL46	;call to abstracted procedure
  3661  0329  01AF               	clrf	___ftge@ff2
  3662  032A  01B0               	clrf	___ftge@ff2+1
  3663  032B  01B1               	clrf	___ftge@ff2+2
  3664  032C  2414  3180         	fcall	___ftge
  3665                           
  3666                           ;DMX.c: 140: DMX_CurrentBright[Addr]=0;
  3667  032E  086C               	movf	DMX_loop@Addr,w
  3668  032F  1803               	btfsc	3,0
  3669  0330  2B36               	goto	L4
  3670  0331  269E  3180         	fcall	PL44	;call to abstracted procedure
  3671  0333  3FC1               	movwi [1]fsr1
  3672  0334  3FC2               	movwi [2]fsr1
  3673  0335                     l4463:	
  3674                           
  3675                           ;DMX.c: 146: rxdata=DMX_CurrentBright[Addr];
  3676  0335  086C               	movf	DMX_loop@Addr,w
  3677  0336                     L4:	
  3678  0336  076C               	addwf	DMX_loop@Addr,w
  3679  0337  076C               	addwf	DMX_loop@Addr,w
  3680  0338  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  3681  0339  0086               	movwf	6
  3682  033A  0187               	clrf	7
  3683  033B  3F40               	moviw [0]fsr1
  3684  033C  00DC               	movwf	___fttol@f1
  3685  033D  3F41               	moviw [1]fsr1
  3686  033E  00DD               	movwf	___fttol@f1+1
  3687  033F  3F42               	moviw [2]fsr1
  3688  0340  00DE               	movwf	___fttol@f1+2
  3689  0341  276A  3180         	fcall	___fttol
  3690  0343  085C               	movf	?___fttol,w
  3691  0344  0021               	movlb	1	; select bank1
  3692  0345  00E3               	movwf	_rxdata^(0+128)
  3693                           
  3694                           ;DMX.c: 148: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3695  0346  267E  3180         	fcall	PL32	;call to abstracted procedure
  3696  0348  00D6               	movwf	(??_DMX_loop+2)^(0+384)
  3697  0349  3F01               	moviw [1]fsr0
  3698  034A  00D7               	movwf	((??_DMX_loop+2)^(0+384)+1)
  3699  034B  0021               	movlb	1	; select bank1
  3700  034C  0863               	movf	_rxdata^(0+128),w
  3701  034D  0023               	movlb	3	; select bank3
  3702  034E  00D8               	movwf	(??_DMX_loop+4)^(0+384)
  3703  034F  30C8               	movlw	low ((_PWM+2)| (0+32768))
  3704  0350  01D9               	clrf	((??_DMX_loop+4)^(0+384)+1)
  3705  0351  35D8               	lslf	(??_DMX_loop+4)^(0+384),f
  3706  0352  0DD9               	rlf	((??_DMX_loop+4)^(0+384)+1),f
  3707  0353  0758               	addwf	(??_DMX_loop+4)^(0+384),w
  3708  0354  0084               	movwf	4
  3709  0355  3087               	movlw	high ((_PWM+2)| (0+32768))
  3710  0356  3D59               	addwfc	(??_DMX_loop+5)^(0+384),w
  3711  0357  0085               	movwf	5
  3712  0358  3F00               	moviw [0]fsr0
  3713  0359  00DA               	movwf	(??_DMX_loop+6)^(0+384)
  3714  035A  3F01               	moviw [1]fsr0
  3715  035B  00DB               	movwf	((??_DMX_loop+6)^(0+384)+1)
  3716  035C  0856               	movf	(??_DMX_loop+2)^(0+384),w
  3717  035D  025A               	subwf	(??_DMX_loop+6)^(0+384),w
  3718  035E  0020               	movlb	0	; select bank0
  3719  035F  00A8               	movwf	___lwtoft@c
  3720  0360  0023               	movlb	3	; select bank3
  3721  0361  0857               	movf	(??_DMX_loop+3)^(0+384),w
  3722  0362  3B5B               	subwfb	(??_DMX_loop+7)^(0+384),w
  3723  0363  0020               	movlb	0	; select bank0
  3724  0364  00A9               	movwf	___lwtoft@c+1
  3725  0365  25C1  3180         	fcall	___lwtoft
  3726  0367  0828               	movf	?___lwtoft,w
  3727  0368  00AF               	movwf	___ftmul@f2
  3728  0369  0829               	movf	?___lwtoft+1,w
  3729  036A  00B0               	movwf	___ftmul@f2+1
  3730  036B  082A               	movf	?___lwtoft+2,w
  3731  036C  00B1               	movwf	___ftmul@f2+2
  3732  036D  2627  3180         	fcall	PL8	;call to abstracted procedure
  3733  036F  2654  3180         	fcall	PL18	;call to abstracted procedure
  3734  0371  0021               	movlb	1	; select bank1
  3735  0372  0863               	movf	_rxdata^(0+128),w
  3736  0373  23E9  3180         	fcall	___lbtoft
  3737  0375  26ED  3180         	fcall	PL76	;call to abstracted procedure
  3738  0377  23F9  3180         	fcall	___ftsub
  3739  0379  0856               	movf	?___ftsub,w
  3740  037A  00AC               	movwf	___ftmul@f1
  3741  037B  0857               	movf	?___ftsub+1,w
  3742  037C  00AD               	movwf	___ftmul@f1+1
  3743  037D  0858               	movf	?___ftsub+2,w
  3744  037E  00AE               	movwf	___ftmul@f1+2
  3745  037F  254A  3180         	fcall	___ftmul
  3746  0381  082C               	movf	?___ftmul,w
  3747  0382  00E9               	movwf	_DMX_loop$1457
  3748  0383  082D               	movf	?___ftmul+1,w
  3749  0384  00EA               	movwf	_DMX_loop$1457+1
  3750  0385  082E               	movf	?___ftmul+2,w
  3751  0386  00EB               	movwf	_DMX_loop$1457+2
  3752                           
  3753                           ;DMX.c: 148: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  3754  0387  0021               	movlb	1	; select bank1
  3755  0388  0863               	movf	_rxdata^(0+128),w
  3756  0389  267E  3180         	fcall	PL32	;call to abstracted procedure
  3757  038B  0020               	movlb	0	; select bank0
  3758  038C  00A8               	movwf	___lwtoft@c
  3759  038D  3F01               	moviw [1]fsr0
  3760  038E  00A9               	movwf	___lwtoft@c+1
  3761  038F  25C1  3180         	fcall	___lwtoft
  3762  0391  0828               	movf	?___lwtoft,w
  3763  0392  00CD               	movwf	___ftadd@f2
  3764  0393  0829               	movf	?___lwtoft+1,w
  3765  0394  00CE               	movwf	___ftadd@f2+1
  3766  0395  082A               	movf	?___lwtoft+2,w
  3767  0396  00CF               	movwf	___ftadd@f2+2
  3768  0397  0869               	movf	_DMX_loop$1457,w
  3769  0398  00CA               	movwf	___ftadd@f1
  3770  0399  086A               	movf	_DMX_loop$1457+1,w
  3771  039A  00CB               	movwf	___ftadd@f1+1
  3772  039B  086B               	movf	_DMX_loop$1457+2,w
  3773  039C  00CC               	movwf	___ftadd@f1+2
  3774  039D  249C  3180         	fcall	___ftadd
  3775  039F  084A               	movf	?___ftadd,w
  3776  03A0  00DC               	movwf	___fttol@f1
  3777  03A1  084B               	movf	?___ftadd+1,w
  3778  03A2  00DD               	movwf	___fttol@f1+1
  3779  03A3  084C               	movf	?___ftadd+2,w
  3780  03A4  00DE               	movwf	___fttol@f1+2
  3781  03A5  276A  3180         	fcall	___fttol
  3782  03A7  356C               	lslf	DMX_loop@Addr,w
  3783  03A8  3E44               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3784  03A9  0086               	movwf	6
  3785  03AA  3001               	movlw	1	; select bank2/3
  3786  03AB  0087               	movwf	7
  3787  03AC  085C               	movf	?___fttol,w
  3788  03AD  3FC0               	movwi [0]fsr1
  3789  03AE  085D               	movf	?___fttol+1,w
  3790  03AF  3FC1               	movwi [1]fsr1
  3791                           
  3792                           ;DMX.c: 149: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  3793  03B0  356C               	lslf	DMX_loop@Addr,w
  3794  03B1  3E45               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  3795  03B2  0086               	movwf	6
  3796  03B3  2712  3180         	fcall	PL96	;call to abstracted procedure
  3797  03B5  3EA8               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  3798                           
  3799                           ;DMX.c: 150: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  3800  03B6  2662  3180         	fcall	PL22	;call to abstracted procedure
  3801  03B8  3E44               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  3802  03B9  0086               	movwf	6
  3803  03BA  3001               	movlw	1	; select bank2/3
  3804  03BB  0087               	movwf	7
  3805  03BC  2712  3180         	fcall	PL96	;call to abstracted procedure
  3806  03BE  3EB0               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  3807                           
  3808                           ;DMX.c: 151: *PWMLDCONptr[Addr] = 0b10000000;
  3809  03BF  2662  3180         	fcall	PL22	;call to abstracted procedure
  3810  03C1  3EA0               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  3811  03C2  0086               	movwf	6
  3812  03C3  3001               	movlw	1	; select bank3/4
  3813  03C4  0087               	movwf	7
  3814  03C5  3F40               	moviw [0]fsr1
  3815  03C6  0023               	movlb	3	; select bank3
  3816  03C7  00D4               	movwf	??_DMX_loop^(0+384)
  3817  03C8  3F41               	moviw [1]fsr1
  3818  03C9  00D5               	movwf	(??_DMX_loop^(0+384)+1)
  3819  03CA  0854               	movf	??_DMX_loop^(0+384),w
  3820  03CB  0086               	movwf	6
  3821  03CC  0855               	movf	(??_DMX_loop+1)^(0+384),w
  3822  03CD  0087               	movwf	7
  3823  03CE  3080               	movlw	128
  3824  03CF  0081               	movwf	1
  3825                           
  3826                           ;DMX.c: 153: Addr++;
  3827  03D0  0020               	movlb	0	; select bank0
  3828  03D1  0AEC               	incf	DMX_loop@Addr,f
  3829  03D2                     l4477:	
  3830  03D2  3004               	movlw	4
  3831  03D3  0020               	movlb	0	; select bank0
  3832  03D4  026C               	subwf	DMX_loop@Addr,w
  3833  03D5  1803               	btfsc	3,0
  3834  03D6  0008               	return
  3835  03D7  086C               	movf	DMX_loop@Addr,w
  3836  03D8  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  3837  03D9  0086               	movwf	6
  3838  03DA  0187               	clrf	7
  3839  03DB  0801               	movf	1,w
  3840  03DC  3903               	andlw	3
  3841                           
  3842                           ; Switch size 1, requested type "space"
  3843                           ; Number of cases is 3, Range of values is 0 to 2
  3844                           ; switch strategies available:
  3845                           ; Name         Instructions Cycles
  3846                           ; simple_byte           10     6 (average)
  3847                           ; direct_byte           12     6 (fixed)
  3848                           ; jumptable            260     6 (fixed)
  3849                           ;	Chosen strategy is simple_byte
  3850  03DD  1903               	skipnz
  3851  03DE  2B35               	goto	l4463
  3852  03DF  3A01               	xorlw	1	; case 1
  3853  03E0  1903               	skipnz
  3854  03E1  2AEB               	goto	l4451
  3855  03E2  3A03               	xorlw	3	; case 2
  3856  03E3  1903               	skipnz
  3857  03E4  2B14               	goto	l4455
  3858  03E5  2B35               	goto	l4463
  3859  03E6  2B35               	goto	l4463
  3860  03E7                     l4479:	
  3861                           
  3862                           ;DMX.c: 161: DMXStepConst--;
  3863  03E7  03E4               	decf	_DMXStepConst^(0+128),f
  3864  03E8  0008               	return
  3865  03E9                     __end_of_DMX_loop:	
  3866  03E9                     __ptext14:	
  3867 ;; *************** function ___lbtoft *****************
  3868 ;; Defined at:
  3869 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  c               1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  c               1    4[COMMON] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  3    8[BANK0 ] float 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 1E/1
  3880 ;;		On exit  : 1F/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3883 ;;      Params:         0       4       0       0       0       0       0       0
  3884 ;;      Locals:         1       0       0       0       0       0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0
  3886 ;;      Totals:         1       4       0       0       0       0       0       0
  3887 ;;Total ram usage:        5 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    3
  3890 ;; This function calls:
  3891 ;;		___ftpack
  3892 ;; This function is called by:
  3893 ;;		_DMX_loop
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function ___lbtoft
  3899  03E9                     ___lbtoft:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3903                           ;___lbtoft@c stored from wreg
  3904  03E9  00F4               	movwf	___lbtoft@c
  3905  03EA  0020               	movlb	0	; select bank0
  3906  03EB  00A0               	movwf	___ftpack@arg
  3907  03EC  308E               	movlw	142
  3908  03ED  01A1               	clrf	___ftpack@arg+1
  3909  03EE  01A2               	clrf	___ftpack@arg+2
  3910  03EF  00A3               	movwf	___ftpack@exp
  3911  03F0  01A4               	clrf	___ftpack@sign
  3912  03F1  272C               	fcall	___ftpack
  3913  03F2  0820               	movf	?___ftpack,w
  3914  03F3  00A8               	movwf	?___lbtoft
  3915  03F4  0821               	movf	?___ftpack+1,w
  3916  03F5  00A9               	movwf	?___lbtoft+1
  3917  03F6  0822               	movf	?___ftpack+2,w
  3918  03F7  00AA               	movwf	?___lbtoft+2
  3919  03F8  0008               	return
  3920  03F9                     __end_of___lbtoft:	
  3921  03F9                     __ptext16:	
  3922 ;; *************** function ___ftsub *****************
  3923 ;; Defined at:
  3924 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  f2              3   54[BANK0 ] float 
  3927 ;;  f1              3   57[BANK0 ] float 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  3   54[BANK0 ] float 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 1F/0
  3936 ;;		On exit  : 1F/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3939 ;;      Params:         0       6       0       0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0       0
  3942 ;;      Totals:         0       6       0       0       0       0       0       0
  3943 ;;Total ram usage:        6 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    4
  3946 ;; This function calls:
  3947 ;;		___ftadd
  3948 ;; This function is called by:
  3949 ;;		_DMX_loop
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function ___ftsub
  3955  03F9                     ___ftsub:	
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3959  03F9  0858               	movf	___ftsub@f2+2,w
  3960  03FA  0457               	iorwf	___ftsub@f2+1,w
  3961  03FB  0456               	iorwf	___ftsub@f2,w
  3962  03FC  1903               	skipnz
  3963  03FD  2C00               	goto	l4225
  3964  03FE  3080               	movlw	128
  3965  03FF  06D8               	xorwf	___ftsub@f2+2,f
  3966  0400                     l4225:	
  3967  0400  0859               	movf	___ftsub@f1,w
  3968  0401  00CA               	movwf	___ftadd@f1
  3969  0402  085A               	movf	___ftsub@f1+1,w
  3970  0403  00CB               	movwf	___ftadd@f1+1
  3971  0404  085B               	movf	___ftsub@f1+2,w
  3972  0405  00CC               	movwf	___ftadd@f1+2
  3973  0406  0856               	movf	___ftsub@f2,w
  3974  0407  00CD               	movwf	___ftadd@f2
  3975  0408  0857               	movf	___ftsub@f2+1,w
  3976  0409  00CE               	movwf	___ftadd@f2+1
  3977  040A  0858               	movf	___ftsub@f2+2,w
  3978  040B  00CF               	movwf	___ftadd@f2+2
  3979  040C  249C               	fcall	___ftadd
  3980  040D  084A               	movf	?___ftadd,w
  3981  040E  00D6               	movwf	?___ftsub
  3982  040F  084B               	movf	?___ftadd+1,w
  3983  0410  00D7               	movwf	?___ftsub+1
  3984  0411  084C               	movf	?___ftadd+2,w
  3985  0412  00D8               	movwf	?___ftsub+2
  3986  0413  0008               	return
  3987  0414                     __end_of___ftsub:	
  3988  0414                     __ptext19:	
  3989 ;; *************** function ___ftge *****************
  3990 ;; Defined at:
  3991 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  ff1             3   12[BANK0 ] float 
  3994 ;;  ff2             3   15[BANK0 ] float 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;		None               void
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0
  4001 ;; Tracked objects:
  4002 ;;		On entry : 1F/0
  4003 ;;		On exit  : 1F/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4006 ;;      Params:         0       6       0       0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0       0
  4009 ;;      Totals:         0       6       0       0       0       0       0       0
  4010 ;;Total ram usage:        6 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    2
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_DMX_loop
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           
  4021                           ;psect for function ___ftge
  4022  0414                     ___ftge:	
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4026  0414  1FAE               	btfss	___ftge@ff1+2,7
  4027  0415  2C23               	goto	l3085
  4028  0416  082C               	movf	___ftge@ff1,w
  4029  0417  3C00               	sublw	0
  4030  0418  00AC               	movwf	___ftge@ff1
  4031  0419  082D               	movf	___ftge@ff1+1,w
  4032  041A  1C03               	skipc
  4033  041B  0F2D               	incfsz	___ftge@ff1+1,w
  4034  041C  3C00               	sublw	0
  4035  041D  00AD               	movwf	___ftge@ff1+1
  4036  041E  082E               	movf	___ftge@ff1+2,w
  4037  041F  1C03               	skipc
  4038  0420  0F2E               	incfsz	___ftge@ff1+2,w
  4039  0421  3C80               	sublw	128
  4040  0422  00AE               	movwf	___ftge@ff1+2
  4041  0423                     l3085:	
  4042  0423  1FB1               	btfss	___ftge@ff2+2,7
  4043  0424  2C32               	goto	l3089
  4044  0425  082F               	movf	___ftge@ff2,w
  4045  0426  3C00               	sublw	0
  4046  0427  00AF               	movwf	___ftge@ff2
  4047  0428  0830               	movf	___ftge@ff2+1,w
  4048  0429  1C03               	skipc
  4049  042A  0F30               	incfsz	___ftge@ff2+1,w
  4050  042B  3C00               	sublw	0
  4051  042C  00B0               	movwf	___ftge@ff2+1
  4052  042D  0831               	movf	___ftge@ff2+2,w
  4053  042E  1C03               	skipc
  4054  042F  0F31               	incfsz	___ftge@ff2+2,w
  4055  0430  3C80               	sublw	128
  4056  0431  00B1               	movwf	___ftge@ff2+2
  4057  0432                     l3089:	
  4058  0432  3080               	movlw	128
  4059  0433  06AE               	xorwf	___ftge@ff1+2,f
  4060  0434  06B1               	xorwf	___ftge@ff2+2,f
  4061  0435  0831               	movf	___ftge@ff2+2,w
  4062  0436  022E               	subwf	___ftge@ff1+2,w
  4063  0437  1D03               	skipz
  4064  0438  0008               	return
  4065  0439  0830               	movf	___ftge@ff2+1,w
  4066  043A  022D               	subwf	___ftge@ff1+1,w
  4067  043B  1D03               	skipz
  4068  043C  0008               	return
  4069  043D  082F               	movf	___ftge@ff2,w
  4070  043E  022C               	subwf	___ftge@ff1,w
  4071  043F  0008               	return
  4072  0440                     __end_of___ftge:	
  4073  0440                     __ptext20:	
  4074 ;; *************** function ___ftdiv *****************
  4075 ;; Defined at:
  4076 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  f2              3   27[BANK0 ] float 
  4079 ;;  f1              3   30[BANK0 ] float 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  f3              3   37[BANK0 ] float 
  4082 ;;  sign            1   41[BANK0 ] unsigned char 
  4083 ;;  exp             1   40[BANK0 ] unsigned char 
  4084 ;;  cntr            1   36[BANK0 ] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  3   27[BANK0 ] float 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0, pclath, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 1F/0
  4091 ;;		On exit  : 1F/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4094 ;;      Params:         0       6       0       0       0       0       0       0
  4095 ;;      Locals:         0       6       0       0       0       0       0       0
  4096 ;;      Temps:          0       3       0       0       0       0       0       0
  4097 ;;      Totals:         0      15       0       0       0       0       0       0
  4098 ;;Total ram usage:       15 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    3
  4101 ;; This function calls:
  4102 ;;		___ftpack
  4103 ;; This function is called by:
  4104 ;;		_DMX_loop
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function ___ftdiv
  4110  0440                     ___ftdiv:	
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4114  0440  083E               	movf	___ftdiv@f1,w
  4115  0441  00C1               	movwf	??___ftdiv
  4116  0442  083F               	movf	___ftdiv@f1+1,w
  4117  0443  00C2               	movwf	??___ftdiv+1
  4118  0444  0840               	movf	___ftdiv@f1+2,w
  4119  0445  00C3               	movwf	??___ftdiv+2
  4120  0446  1003               	clrc
  4121  0447  0D42               	rlf	??___ftdiv+1,w
  4122  0448  0D43               	rlf	??___ftdiv+2,w
  4123  0449  00C8               	movwf	___ftdiv@exp
  4124  044A  0848               	movf	___ftdiv@exp,w
  4125  044B  1D03               	btfss	3,2
  4126  044C  2C4E               	goto	l4133
  4127  044D  2F24               	ljmp	PL104	;call to abstracted procedure
  4128  044E                     l4133:	
  4129  044E  083B               	movf	___ftdiv@f2,w
  4130  044F  00C1               	movwf	??___ftdiv
  4131  0450  083C               	movf	___ftdiv@f2+1,w
  4132  0451  00C2               	movwf	??___ftdiv+1
  4133  0452  083D               	movf	___ftdiv@f2+2,w
  4134  0453  00C3               	movwf	??___ftdiv+2
  4135  0454  1003               	clrc
  4136  0455  0D42               	rlf	??___ftdiv+1,w
  4137  0456  0D43               	rlf	??___ftdiv+2,w
  4138  0457  00C9               	movwf	___ftdiv@sign
  4139  0458  0849               	movf	___ftdiv@sign,w
  4140  0459  1D03               	btfss	3,2
  4141  045A  2C5C               	goto	l1367
  4142  045B  2F24               	ljmp	PL104	;call to abstracted procedure
  4143  045C                     l1367:	
  4144  045C  3089               	movlw	137
  4145  045D  01C5               	clrf	___ftdiv@f3
  4146  045E  01C6               	clrf	___ftdiv@f3+1
  4147  045F  01C7               	clrf	___ftdiv@f3+2
  4148  0460  0749               	addwf	___ftdiv@sign,w
  4149  0461  00C1               	movwf	??___ftdiv
  4150  0462  02C8               	subwf	___ftdiv@exp,f
  4151  0463  0840               	movf	___ftdiv@f1+2,w
  4152  0464  00C9               	movwf	___ftdiv@sign
  4153  0465  083D               	movf	___ftdiv@f2+2,w
  4154  0466  06C9               	xorwf	___ftdiv@sign,f
  4155  0467  3080               	movlw	128
  4156  0468  05C9               	andwf	___ftdiv@sign,f
  4157  0469  3018               	movlw	24
  4158  046A  17BF               	bsf	___ftdiv@f1+1,7
  4159  046B  01C0               	clrf	___ftdiv@f1+2
  4160  046C  17BC               	bsf	___ftdiv@f2+1,7
  4161  046D  01BD               	clrf	___ftdiv@f2+2
  4162  046E  00C4               	movwf	___ftdiv@cntr
  4163  046F                     l4155:	
  4164  046F  35C5               	lslf	___ftdiv@f3,f
  4165  0470  0DC6               	rlf	___ftdiv@f3+1,f
  4166  0471  0DC7               	rlf	___ftdiv@f3+2,f
  4167  0472  083D               	movf	___ftdiv@f2+2,w
  4168  0473  0240               	subwf	___ftdiv@f1+2,w
  4169  0474  1D03               	skipz
  4170  0475  2C7C               	goto	u2995
  4171  0476  083C               	movf	___ftdiv@f2+1,w
  4172  0477  023F               	subwf	___ftdiv@f1+1,w
  4173  0478  1D03               	skipz
  4174  0479  2C7C               	goto	u2995
  4175  047A  083B               	movf	___ftdiv@f2,w
  4176  047B  023E               	subwf	___ftdiv@f1,w
  4177  047C                     u2995:	
  4178  047C  1C03               	skipc
  4179  047D  2C85               	goto	l4161
  4180  047E  083B               	movf	___ftdiv@f2,w
  4181  047F  02BE               	subwf	___ftdiv@f1,f
  4182  0480  083C               	movf	___ftdiv@f2+1,w
  4183  0481  3BBF               	subwfb	___ftdiv@f1+1,f
  4184  0482  083D               	movf	___ftdiv@f2+2,w
  4185  0483  3BC0               	subwfb	___ftdiv@f1+2,f
  4186  0484  1445               	bsf	___ftdiv@f3,0
  4187  0485                     l4161:	
  4188  0485  35BE               	lslf	___ftdiv@f1,f
  4189  0486  0DBF               	rlf	___ftdiv@f1+1,f
  4190  0487  0DC0               	rlf	___ftdiv@f1+2,f
  4191  0488  0BC4               	decfsz	___ftdiv@cntr,f
  4192  0489  2C6F               	goto	l4155
  4193  048A  0845               	movf	___ftdiv@f3,w
  4194  048B  00A0               	movwf	___ftpack@arg
  4195  048C  0846               	movf	___ftdiv@f3+1,w
  4196  048D  00A1               	movwf	___ftpack@arg+1
  4197  048E  0847               	movf	___ftdiv@f3+2,w
  4198  048F  00A2               	movwf	___ftpack@arg+2
  4199  0490  0848               	movf	___ftdiv@exp,w
  4200  0491  00A3               	movwf	___ftpack@exp
  4201  0492  0849               	movf	___ftdiv@sign,w
  4202  0493  00A4               	movwf	___ftpack@sign
  4203  0494  272C               	fcall	___ftpack
  4204  0495  0820               	movf	?___ftpack,w
  4205  0496  00BB               	movwf	?___ftdiv
  4206  0497  0821               	movf	?___ftpack+1,w
  4207  0498  00BC               	movwf	?___ftdiv+1
  4208  0499  0822               	movf	?___ftpack+2,w
  4209  049A  00BD               	movwf	?___ftdiv+2
  4210  049B  0008               	return
  4211  049C                     __end_of___ftdiv:	
  4212  049C                     __ptext17:	
  4213 ;; *************** function ___ftadd *****************
  4214 ;; Defined at:
  4215 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  f1              3   42[BANK0 ] float 
  4218 ;;  f2              3   45[BANK0 ] float 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  exp1            1   53[BANK0 ] unsigned char 
  4221 ;;  exp2            1   52[BANK0 ] unsigned char 
  4222 ;;  sign            1   51[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  3   42[BANK0 ] float 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0, pclath, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 1F/0
  4229 ;;		On exit  : 1F/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4232 ;;      Params:         0       6       0       0       0       0       0       0
  4233 ;;      Locals:         0       3       0       0       0       0       0       0
  4234 ;;      Temps:          0       3       0       0       0       0       0       0
  4235 ;;      Totals:         0      12       0       0       0       0       0       0
  4236 ;;Total ram usage:       12 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    3
  4239 ;; This function calls:
  4240 ;;		___ftpack
  4241 ;; This function is called by:
  4242 ;;		_DMX_loop
  4243 ;;		___ftsub
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           
  4248                           ;psect for function ___ftadd
  4249  049C                     ___ftadd:	
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4253  049C  084A               	movf	___ftadd@f1,w
  4254  049D  00D0               	movwf	??___ftadd
  4255  049E  084B               	movf	___ftadd@f1+1,w
  4256  049F  00D1               	movwf	??___ftadd+1
  4257  04A0  084C               	movf	___ftadd@f1+2,w
  4258  04A1  00D2               	movwf	??___ftadd+2
  4259  04A2  1003               	clrc
  4260  04A3  0D51               	rlf	??___ftadd+1,w
  4261  04A4  0D52               	rlf	??___ftadd+2,w
  4262  04A5  00D5               	movwf	___ftadd@exp1
  4263  04A6  084D               	movf	___ftadd@f2,w
  4264  04A7  00D0               	movwf	??___ftadd
  4265  04A8  084E               	movf	___ftadd@f2+1,w
  4266  04A9  00D1               	movwf	??___ftadd+1
  4267  04AA  084F               	movf	___ftadd@f2+2,w
  4268  04AB  00D2               	movwf	??___ftadd+2
  4269  04AC  1003               	clrc
  4270  04AD  0D51               	rlf	??___ftadd+1,w
  4271  04AE  0D52               	rlf	??___ftadd+2,w
  4272  04AF  00D4               	movwf	___ftadd@exp2
  4273  04B0  0855               	movf	___ftadd@exp1,w
  4274  04B1  1903               	btfsc	3,2
  4275  04B2  2CBF               	goto	l3919
  4276  04B3  0854               	movf	___ftadd@exp2,w
  4277  04B4  0255               	subwf	___ftadd@exp1,w
  4278  04B5  0854               	movf	___ftadd@exp2,w
  4279  04B6  1803               	skipnc
  4280  04B7  2CC7               	goto	L5
  4281  04B8  00D0               	movwf	??___ftadd
  4282  04B9  0855               	movf	___ftadd@exp1,w
  4283  04BA  02D0               	subwf	??___ftadd,f
  4284  04BB  3019               	movlw	25
  4285  04BC  0250               	subwf	??___ftadd,w
  4286  04BD  1C03               	skipc
  4287  04BE  2CC6               	goto	l3923
  4288  04BF                     l3919:	
  4289  04BF  084D               	movf	___ftadd@f2,w
  4290  04C0  00CA               	movwf	?___ftadd
  4291  04C1  084E               	movf	___ftadd@f2+1,w
  4292  04C2  00CB               	movwf	?___ftadd+1
  4293  04C3  084F               	movf	___ftadd@f2+2,w
  4294  04C4  00CC               	movwf	?___ftadd+2
  4295  04C5  0008               	return
  4296  04C6                     l3923:	
  4297  04C6  0854               	movf	___ftadd@exp2,w
  4298  04C7                     L5:	
  4299  04C7  1903               	btfsc	3,2
  4300  04C8  0008               	return
  4301  04C9  0855               	movf	___ftadd@exp1,w
  4302  04CA  0254               	subwf	___ftadd@exp2,w
  4303  04CB  1803               	skipnc
  4304  04CC  2CD5               	goto	l3929
  4305  04CD  0855               	movf	___ftadd@exp1,w
  4306  04CE  00D0               	movwf	??___ftadd
  4307  04CF  0854               	movf	___ftadd@exp2,w
  4308  04D0  02D0               	subwf	??___ftadd,f
  4309  04D1  3019               	movlw	25
  4310  04D2  0250               	subwf	??___ftadd,w
  4311  04D3  1803               	btfsc	3,0
  4312  04D4  0008               	return
  4313  04D5                     l3929:	
  4314  04D5  3006               	movlw	6
  4315  04D6  00D3               	movwf	___ftadd@sign
  4316  04D7  1BCC               	btfsc	___ftadd@f1+2,7
  4317  04D8  17D3               	bsf	___ftadd@sign,7
  4318  04D9  1BCF               	btfsc	___ftadd@f2+2,7
  4319  04DA  1753               	bsf	___ftadd@sign,6
  4320  04DB  17CB               	bsf	___ftadd@f1+1,7
  4321  04DC  01CC               	clrf	___ftadd@f1+2
  4322  04DD  17CE               	bsf	___ftadd@f2+1,7
  4323  04DE  01CF               	clrf	___ftadd@f2+2
  4324  04DF  0854               	movf	___ftadd@exp2,w
  4325  04E0  0255               	subwf	___ftadd@exp1,w
  4326  04E1  1803               	skipnc
  4327  04E2  2CFA               	goto	l3951
  4328  04E3                     l3941:	
  4329  04E3  35CD               	lslf	___ftadd@f2,f
  4330  04E4  0DCE               	rlf	___ftadd@f2+1,f
  4331  04E5  0DCF               	rlf	___ftadd@f2+2,f
  4332  04E6  03D4               	decf	___ftadd@exp2,f
  4333  04E7  0854               	movf	___ftadd@exp2,w
  4334  04E8  0655               	xorwf	___ftadd@exp1,w
  4335  04E9  1903               	skipnz
  4336  04EA  2CF5               	goto	l3949
  4337  04EB  03D3               	decf	___ftadd@sign,f
  4338  04EC  0853               	movf	___ftadd@sign,w
  4339  04ED  3907               	andlw	7
  4340  04EE  1903               	btfsc	3,2
  4341  04EF  2CF5               	goto	l3949
  4342  04F0  2CE3               	goto	l3941
  4343  04F1                     l3947:	
  4344  04F1  36CC               	lsrf	___ftadd@f1+2,f
  4345  04F2  0CCB               	rrf	___ftadd@f1+1,f
  4346  04F3  0CCA               	rrf	___ftadd@f1,f
  4347  04F4  0AD5               	incf	___ftadd@exp1,f
  4348  04F5                     l3949:	
  4349  04F5  0855               	movf	___ftadd@exp1,w
  4350  04F6  0654               	xorwf	___ftadd@exp2,w
  4351  04F7  1903               	btfsc	3,2
  4352  04F8  2D14               	goto	l1349
  4353  04F9  2CF1               	goto	l3947
  4354  04FA                     l3951:	
  4355  04FA  0855               	movf	___ftadd@exp1,w
  4356  04FB  0254               	subwf	___ftadd@exp2,w
  4357  04FC  1803               	skipnc
  4358  04FD  2D14               	goto	l1349
  4359  04FE                     l3953:	
  4360  04FE  35CA               	lslf	___ftadd@f1,f
  4361  04FF  0DCB               	rlf	___ftadd@f1+1,f
  4362  0500  0DCC               	rlf	___ftadd@f1+2,f
  4363  0501  03D5               	decf	___ftadd@exp1,f
  4364  0502  0854               	movf	___ftadd@exp2,w
  4365  0503  0655               	xorwf	___ftadd@exp1,w
  4366  0504  1903               	skipnz
  4367  0505  2D10               	goto	l3961
  4368  0506  03D3               	decf	___ftadd@sign,f
  4369  0507  0853               	movf	___ftadd@sign,w
  4370  0508  3907               	andlw	7
  4371  0509  1903               	btfsc	3,2
  4372  050A  2D10               	goto	l3961
  4373  050B  2CFE               	goto	l3953
  4374  050C                     l3959:	
  4375  050C  36CF               	lsrf	___ftadd@f2+2,f
  4376  050D  0CCE               	rrf	___ftadd@f2+1,f
  4377  050E  0CCD               	rrf	___ftadd@f2,f
  4378  050F  0AD4               	incf	___ftadd@exp2,f
  4379  0510                     l3961:	
  4380  0510  0855               	movf	___ftadd@exp1,w
  4381  0511  0654               	xorwf	___ftadd@exp2,w
  4382  0512  1D03               	skipz
  4383  0513  2D0C               	goto	l3959
  4384  0514                     l1349:	
  4385  0514  1FD3               	btfss	___ftadd@sign,7
  4386  0515  2D1F               	goto	l3967
  4387  0516  30FF               	movlw	255
  4388  0517  06CA               	xorwf	___ftadd@f1,f
  4389  0518  06CB               	xorwf	___ftadd@f1+1,f
  4390  0519  06CC               	xorwf	___ftadd@f1+2,f
  4391  051A  0ACA               	incf	___ftadd@f1,f
  4392  051B  1903               	skipnz
  4393  051C  0ACB               	incf	___ftadd@f1+1,f
  4394  051D  1903               	skipnz
  4395  051E  0ACC               	incf	___ftadd@f1+2,f
  4396  051F                     l3967:	
  4397  051F  1F53               	btfss	___ftadd@sign,6
  4398  0520  2D27               	goto	l3973
  4399  0521  2706  3180         	fcall	PL90	;call to abstracted procedure
  4400  0523  1903               	skipnz
  4401  0524  0ACE               	incf	___ftadd@f2+1,f
  4402  0525  1903               	skipnz
  4403  0526  0ACF               	incf	___ftadd@f2+2,f
  4404  0527                     l3973:	
  4405  0527  01D3               	clrf	___ftadd@sign
  4406  0528  084A               	movf	___ftadd@f1,w
  4407  0529  07CD               	addwf	___ftadd@f2,f
  4408  052A  084B               	movf	___ftadd@f1+1,w
  4409  052B  3DCE               	addwfc	___ftadd@f2+1,f
  4410  052C  084C               	movf	___ftadd@f1+2,w
  4411  052D  3DCF               	addwfc	___ftadd@f2+2,f
  4412  052E  1FCF               	btfss	___ftadd@f2+2,7
  4413  052F  2D38               	goto	l3985
  4414  0530  2706  3180         	fcall	PL90	;call to abstracted procedure
  4415  0532  1903               	skipnz
  4416  0533  0ACE               	incf	___ftadd@f2+1,f
  4417  0534  1903               	skipnz
  4418  0535  0ACF               	incf	___ftadd@f2+2,f
  4419  0536  01D3               	clrf	___ftadd@sign
  4420  0537  0AD3               	incf	___ftadd@sign,f
  4421  0538                     l3985:	
  4422  0538  084D               	movf	___ftadd@f2,w
  4423  0539  00A0               	movwf	___ftpack@arg
  4424  053A  084E               	movf	___ftadd@f2+1,w
  4425  053B  00A1               	movwf	___ftpack@arg+1
  4426  053C  084F               	movf	___ftadd@f2+2,w
  4427  053D  00A2               	movwf	___ftpack@arg+2
  4428  053E  0855               	movf	___ftadd@exp1,w
  4429  053F  00A3               	movwf	___ftpack@exp
  4430  0540  0853               	movf	___ftadd@sign,w
  4431  0541  00A4               	movwf	___ftpack@sign
  4432  0542  272C               	fcall	___ftpack
  4433  0543  0820               	movf	?___ftpack,w
  4434  0544  00CA               	movwf	?___ftadd
  4435  0545  0821               	movf	?___ftpack+1,w
  4436  0546  00CB               	movwf	?___ftadd+1
  4437  0547  0822               	movf	?___ftpack+2,w
  4438  0548  00CC               	movwf	?___ftadd+2
  4439  0549  0008               	return
  4440  054A                     __end_of___ftadd:	
  4441  054A                     __ptext18:	
  4442 ;; *************** function ___ftmul *****************
  4443 ;; Defined at:
  4444 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  f1              3   12[BANK0 ] float 
  4447 ;;  f2              3   15[BANK0 ] float 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  4450 ;;  sign            1   26[BANK0 ] unsigned char 
  4451 ;;  cntr            1   25[BANK0 ] unsigned char 
  4452 ;;  exp             1   21[BANK0 ] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  3   12[BANK0 ] float 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, pclath, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 1F/0
  4459 ;;		On exit  : 1F/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4462 ;;      Params:         0       6       0       0       0       0       0       0
  4463 ;;      Locals:         0       6       0       0       0       0       0       0
  4464 ;;      Temps:          0       3       0       0       0       0       0       0
  4465 ;;      Totals:         0      15       0       0       0       0       0       0
  4466 ;;Total ram usage:       15 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    3
  4469 ;; This function calls:
  4470 ;;		___ftpack
  4471 ;; This function is called by:
  4472 ;;		_DMX_loop
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function ___ftmul
  4478  054A                     ___ftmul:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4482  054A  082C               	movf	___ftmul@f1,w
  4483  054B  00B2               	movwf	??___ftmul
  4484  054C  082D               	movf	___ftmul@f1+1,w
  4485  054D  00B3               	movwf	??___ftmul+1
  4486  054E  082E               	movf	___ftmul@f1+2,w
  4487  054F  00B4               	movwf	??___ftmul+2
  4488  0550  1003               	clrc
  4489  0551  0D33               	rlf	??___ftmul+1,w
  4490  0552  0D34               	rlf	??___ftmul+2,w
  4491  0553  00B5               	movwf	___ftmul@exp
  4492  0554  0835               	movf	___ftmul@exp,w
  4493  0555  1D03               	btfss	3,2
  4494  0556  2D58               	goto	l4173
  4495  0557  2F28               	ljmp	PL108	;call to abstracted procedure
  4496  0558                     l4173:	
  4497  0558  082F               	movf	___ftmul@f2,w
  4498  0559  00B2               	movwf	??___ftmul
  4499  055A  0830               	movf	___ftmul@f2+1,w
  4500  055B  00B3               	movwf	??___ftmul+1
  4501  055C  0831               	movf	___ftmul@f2+2,w
  4502  055D  00B4               	movwf	??___ftmul+2
  4503  055E  1003               	clrc
  4504  055F  0D33               	rlf	??___ftmul+1,w
  4505  0560  0D34               	rlf	??___ftmul+2,w
  4506  0561  00BA               	movwf	___ftmul@sign
  4507  0562  083A               	movf	___ftmul@sign,w
  4508  0563  1D03               	btfss	3,2
  4509  0564  2D66               	goto	l4177
  4510  0565  2F28               	ljmp	PL108	;call to abstracted procedure
  4511  0566                     l4177:	
  4512  0566  083A               	movf	___ftmul@sign,w
  4513  0567  3E7B               	addlw	123
  4514  0568  07B5               	addwf	___ftmul@exp,f
  4515  0569  082E               	movf	___ftmul@f1+2,w
  4516  056A  00BA               	movwf	___ftmul@sign
  4517  056B  0831               	movf	___ftmul@f2+2,w
  4518  056C  06BA               	xorwf	___ftmul@sign,f
  4519  056D  3080               	movlw	128
  4520  056E  05BA               	andwf	___ftmul@sign,f
  4521  056F  30FF               	movlw	255
  4522  0570  17AD               	bsf	___ftmul@f1+1,7
  4523  0571  17B0               	bsf	___ftmul@f2+1,7
  4524  0572  05AF               	andwf	___ftmul@f2,f
  4525  0573  05B0               	andwf	___ftmul@f2+1,f
  4526  0574  3007               	movlw	7
  4527  0575  01B1               	clrf	___ftmul@f2+2
  4528  0576  01B6               	clrf	___ftmul@f3_as_product
  4529  0577  01B7               	clrf	___ftmul@f3_as_product+1
  4530  0578  01B8               	clrf	___ftmul@f3_as_product+2
  4531  0579  00B9               	movwf	___ftmul@cntr
  4532  057A                     l4195:	
  4533  057A  1C2C               	btfss	___ftmul@f1,0
  4534  057B  2D7E               	goto	l4199
  4535  057C  26D8  3180         	fcall	PL66	;call to abstracted procedure
  4536  057E                     l4199:	
  4537  057E  36AE               	lsrf	___ftmul@f1+2,f
  4538  057F  0CAD               	rrf	___ftmul@f1+1,f
  4539  0580  0CAC               	rrf	___ftmul@f1,f
  4540  0581  35AF               	lslf	___ftmul@f2,f
  4541  0582  0DB0               	rlf	___ftmul@f2+1,f
  4542  0583  0DB1               	rlf	___ftmul@f2+2,f
  4543  0584  0BB9               	decfsz	___ftmul@cntr,f
  4544  0585  2D7A               	goto	l4195
  4545  0586  3009               	movlw	9
  4546  0587  00B9               	movwf	___ftmul@cntr
  4547  0588                     l4207:	
  4548  0588  1C2C               	btfss	___ftmul@f1,0
  4549  0589  2D8C               	goto	l4211
  4550  058A  26D8  3180         	fcall	PL66	;call to abstracted procedure
  4551  058C                     l4211:	
  4552  058C  36AE               	lsrf	___ftmul@f1+2,f
  4553  058D  0CAD               	rrf	___ftmul@f1+1,f
  4554  058E  0CAC               	rrf	___ftmul@f1,f
  4555  058F  36B8               	lsrf	___ftmul@f3_as_product+2,f
  4556  0590  0CB7               	rrf	___ftmul@f3_as_product+1,f
  4557  0591  0CB6               	rrf	___ftmul@f3_as_product,f
  4558  0592  0BB9               	decfsz	___ftmul@cntr,f
  4559  0593  2D88               	goto	l4207
  4560  0594  0836               	movf	___ftmul@f3_as_product,w
  4561  0595  00A0               	movwf	___ftpack@arg
  4562  0596  0837               	movf	___ftmul@f3_as_product+1,w
  4563  0597  00A1               	movwf	___ftpack@arg+1
  4564  0598  0838               	movf	___ftmul@f3_as_product+2,w
  4565  0599  00A2               	movwf	___ftpack@arg+2
  4566  059A  0835               	movf	___ftmul@exp,w
  4567  059B  00A3               	movwf	___ftpack@exp
  4568  059C  083A               	movf	___ftmul@sign,w
  4569  059D  00A4               	movwf	___ftpack@sign
  4570  059E  272C               	fcall	___ftpack
  4571  059F  0820               	movf	?___ftpack,w
  4572  05A0  00AC               	movwf	?___ftmul
  4573  05A1  0821               	movf	?___ftpack+1,w
  4574  05A2  00AD               	movwf	?___ftmul+1
  4575  05A3  0822               	movf	?___ftpack+2,w
  4576  05A4  00AE               	movwf	?___ftmul+2
  4577  05A5  0008               	return
  4578  05A6                     __end_of___ftmul:	
  4579  05A6                     __ptext21:	
  4580 ;; *************** function ___awtoft *****************
  4581 ;; Defined at:
  4582 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  c               2    8[BANK0 ] int 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  sign            1    4[COMMON] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  3    8[BANK0 ] float 
  4589 ;; Registers used:
  4590 ;;		wreg, status,2, status,0, pclath, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 1F/0
  4593 ;;		On exit  : 1F/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4596 ;;      Params:         0       3       0       0       0       0       0       0
  4597 ;;      Locals:         1       0       0       0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0
  4599 ;;      Totals:         1       3       0       0       0       0       0       0
  4600 ;;Total ram usage:        4 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    3
  4603 ;; This function calls:
  4604 ;;		___ftpack
  4605 ;; This function is called by:
  4606 ;;		_DMX_loop
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           
  4611                           ;psect for function ___awtoft
  4612  05A6                     ___awtoft:	
  4613                           
  4614                           ;incstack = 0
  4615                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4616  05A6  01F4               	clrf	___awtoft@sign
  4617  05A7  1FA9               	btfss	___awtoft@c+1,7
  4618  05A8  2DB0               	goto	l4125
  4619  05A9  09A8               	comf	___awtoft@c,f
  4620  05AA  09A9               	comf	___awtoft@c+1,f
  4621  05AB  0AA8               	incf	___awtoft@c,f
  4622  05AC  1903               	skipnz
  4623  05AD  0AA9               	incf	___awtoft@c+1,f
  4624  05AE  01F4               	clrf	___awtoft@sign
  4625  05AF  0AF4               	incf	___awtoft@sign,f
  4626  05B0                     l4125:	
  4627  05B0  0828               	movf	___awtoft@c,w
  4628  05B1  00A0               	movwf	___ftpack@arg
  4629  05B2  0829               	movf	___awtoft@c+1,w
  4630  05B3  00A1               	movwf	___ftpack@arg+1
  4631  05B4  308E               	movlw	142
  4632  05B5  01A2               	clrf	___ftpack@arg+2
  4633  05B6  00A3               	movwf	___ftpack@exp
  4634  05B7  0874               	movf	___awtoft@sign,w
  4635  05B8  00A4               	movwf	___ftpack@sign
  4636  05B9  272C               	fcall	___ftpack
  4637  05BA  0820               	movf	?___ftpack,w
  4638  05BB  00A8               	movwf	?___awtoft
  4639  05BC  0821               	movf	?___ftpack+1,w
  4640  05BD  00A9               	movwf	?___awtoft+1
  4641  05BE  0822               	movf	?___ftpack+2,w
  4642  05BF  00AA               	movwf	?___awtoft+2
  4643  05C0  0008               	return
  4644  05C1                     __end_of___awtoft:	
  4645  05C1                     __ptext13:	
  4646 ;; *************** function ___lwtoft *****************
  4647 ;; Defined at:
  4648 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  c               2    8[BANK0 ] unsigned int 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  3    8[BANK0 ] float 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 1F/0
  4659 ;;		On exit  : 1F/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4662 ;;      Params:         0       3       0       0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0
  4665 ;;      Totals:         0       3       0       0       0       0       0       0
  4666 ;;Total ram usage:        3 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    3
  4669 ;; This function calls:
  4670 ;;		___ftpack
  4671 ;; This function is called by:
  4672 ;;		_DMX_loop
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function ___lwtoft
  4678  05C1                     ___lwtoft:	
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4682  05C1  0828               	movf	___lwtoft@c,w
  4683  05C2  00A0               	movwf	___ftpack@arg
  4684  05C3  0829               	movf	___lwtoft@c+1,w
  4685  05C4  00A1               	movwf	___ftpack@arg+1
  4686  05C5  308E               	movlw	142
  4687  05C6  01A2               	clrf	___ftpack@arg+2
  4688  05C7  00A3               	movwf	___ftpack@exp
  4689  05C8  01A4               	clrf	___ftpack@sign
  4690  05C9  272C               	fcall	___ftpack
  4691  05CA  0820               	movf	?___ftpack,w
  4692  05CB  00A8               	movwf	?___lwtoft
  4693  05CC  0821               	movf	?___ftpack+1,w
  4694  05CD  00A9               	movwf	?___lwtoft+1
  4695  05CE  0822               	movf	?___ftpack+2,w
  4696  05CF  00AA               	movwf	?___lwtoft+2
  4697  05D0  0008               	return
  4698  05D1                     __end_of___lwtoft:	
  4699  05D1                     __ptext1:	
  4700 ;; *************** function _timer1_init *****************
  4701 ;; Defined at:
  4702 ;;		line 15 in file "Timer.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  2  112[None  ] int 
  4709 ;; Registers used:
  4710 ;;		wreg
  4711 ;; Tracked objects:
  4712 ;;		On entry : B1F/3
  4713 ;;		On exit  : B1F/0
  4714 ;;		Unchanged: B00/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4716 ;;      Params:         0       0       0       0       0       0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    2
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_main
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _timer1_init
  4732  05D1                     _timer1_init:	
  4733                           
  4734                           ;Timer.c: 16: TMR1IE = 1;
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _timer1_init: [wreg]
  4738  05D1  0021               	movlb	1	; select bank1
  4739  05D2  1411               	bsf	17,0	;volatile
  4740                           
  4741                           ;Timer.c: 17: T1CON = 0b00110001;
  4742  05D3  3031               	movlw	49
  4743  05D4  0020               	movlb	0	; select bank0
  4744  05D5  0098               	movwf	24	;volatile
  4745  05D6  0008               	return
  4746  05D7                     __end_of_timer1_init:	
  4747  05D7                     PL2:	
  4748  05D7  076C               	addwf	DMX_loop@Addr,w
  4749  05D8  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4750  05D9  0086               	movwf	6
  4751  05DA  0187               	clrf	7
  4752  05DB  0828               	movf	?___lbtoft,w
  4753  05DC  3FC0               	movwi [0]fsr1
  4754  05DD  0829               	movf	?___lbtoft+1,w
  4755  05DE  3FC1               	movwi [1]fsr1
  4756  05DF  082A               	movf	?___lbtoft+2,w
  4757  05E0  3FC2               	movwi [2]fsr1
  4758  05E1  086C               	movf	DMX_loop@Addr,w
  4759  05E2  076C               	addwf	DMX_loop@Addr,w
  4760  05E3  076C               	addwf	DMX_loop@Addr,w
  4761  05E4  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4762  05E5  0086               	movwf	6
  4763  05E6  0828               	movf	?___lbtoft,w
  4764  05E7  3FC0               	movwi [0]fsr1
  4765  05E8  0829               	movf	?___lbtoft+1,w
  4766  05E9  3FC1               	movwi [1]fsr1
  4767  05EA  082A               	movf	?___lbtoft+2,w
  4768  05EB  3FC2               	movwi [2]fsr1
  4769  05EC  0008               	return
  4770  05ED                     __end_ofPL2:	
  4771  05ED                     PL4:	
  4772  05ED  0856               	movf	?___ftsub,w
  4773  05EE  0021               	movlb	1	; select bank1
  4774  05EF  00C7               	movwf	_DMX_difference^(0+128)	;volatile
  4775  05F0  0020               	movlb	0	; select bank0
  4776  05F1  0857               	movf	?___ftsub+1,w
  4777  05F2  0021               	movlb	1	; select bank1
  4778  05F3  00C8               	movwf	(_DMX_difference+1)^(0+128)	;volatile
  4779  05F4  0020               	movlb	0	; select bank0
  4780  05F5  0858               	movf	?___ftsub+2,w
  4781  05F6  0021               	movlb	1	; select bank1
  4782  05F7  00C9               	movwf	(_DMX_difference+2)^(0+128)	;volatile
  4783  05F8  0847               	movf	_DMX_difference^(0+128),w	;volatile
  4784  05F9  0020               	movlb	0	; select bank0
  4785  05FA  00AC               	movwf	___ftge@ff1
  4786  05FB  0021               	movlb	1	; select bank1
  4787  05FC  0848               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  4788  05FD  0020               	movlb	0	; select bank0
  4789  05FE  00AD               	movwf	___ftge@ff1+1
  4790  05FF  0021               	movlb	1	; select bank1
  4791  0600  0849               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  4792  0601  0020               	movlb	0	; select bank0
  4793  0602  00AE               	movwf	___ftge@ff1+2
  4794  0603  30CD               	movlw	205
  4795  0604  00AF               	movwf	___ftge@ff2
  4796  0605  304C               	movlw	76
  4797  0606  00B0               	movwf	___ftge@ff2+1
  4798  0607  303D               	movlw	61
  4799  0608  00B1               	movwf	___ftge@ff2+2
  4800  0609  0008               	return
  4801  060A                     __end_ofPL4:	
  4802  060A                     PL6:	
  4803  060A  0081               	movwf	1
  4804  060B  086C               	movf	DMX_loop@Addr,w
  4805  060C  076C               	addwf	DMX_loop@Addr,w
  4806  060D  076C               	addwf	DMX_loop@Addr,w
  4807  060E  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4808  060F  0086               	movwf	6
  4809  0610  3F40               	moviw [0]fsr1
  4810  0611  0023               	movlb	3	; select bank3
  4811  0612  00D4               	movwf	??_DMX_loop^(0+384)
  4812  0613  3F41               	moviw [1]fsr1
  4813  0614  00D5               	movwf	(??_DMX_loop^(0+384)+1)
  4814  0615  3F42               	moviw [2]fsr1
  4815  0616  00D6               	movwf	(??_DMX_loop^(0+384)+2)
  4816  0617  0020               	movlb	0	; select bank0
  4817  0618  086C               	movf	DMX_loop@Addr,w
  4818  0619  076C               	addwf	DMX_loop@Addr,w
  4819  061A  076C               	addwf	DMX_loop@Addr,w
  4820  061B  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4821  061C  0086               	movwf	6
  4822  061D  0023               	movlb	3	; select bank3
  4823  061E  0854               	movf	??_DMX_loop^(0+384),w
  4824  061F  3FC0               	movwi [0]fsr1
  4825  0620  0855               	movf	(??_DMX_loop+1)^(0+384),w
  4826  0621  3FC1               	movwi [1]fsr1
  4827  0622  0856               	movf	(??_DMX_loop+2)^(0+384),w
  4828  0623  3FC2               	movwi [2]fsr1
  4829  0624  0020               	movlb	0	; select bank0
  4830  0625  086C               	movf	DMX_loop@Addr,w
  4831  0626  0008               	return
  4832  0627                     __end_ofPL6:	
  4833  0627                     PL8:	
  4834  0627  086C               	movf	DMX_loop@Addr,w
  4835  0628  076C               	addwf	DMX_loop@Addr,w
  4836  0629  076C               	addwf	DMX_loop@Addr,w
  4837  062A  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4838  062B  0086               	movwf	6
  4839  062C  0187               	clrf	7
  4840  062D  0008               	return
  4841  062E                     __end_ofPL8:	
  4842  062E                     PL10:	
  4843  062E  0828               	movf	?___lbtoft,w
  4844  062F  00BB               	movwf	___ftdiv@f2
  4845  0630  0829               	movf	?___lbtoft+1,w
  4846  0631  00BC               	movwf	___ftdiv@f2+1
  4847  0632  082A               	movf	?___lbtoft+2,w
  4848  0633  00BD               	movwf	___ftdiv@f2+2
  4849  0634  3040               	movlw	64
  4850  0635  01AC               	clrf	___ftmul@f1
  4851  0636  01AD               	clrf	___ftmul@f1+1
  4852  0637  00AE               	movwf	___ftmul@f1+2
  4853  0638  0021               	movlb	1	; select bank1
  4854  0639  0847               	movf	_DMX_difference^(0+128),w	;volatile
  4855  063A  0020               	movlb	0	; select bank0
  4856  063B  00AF               	movwf	___ftmul@f2
  4857  063C  0021               	movlb	1	; select bank1
  4858  063D  0848               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  4859  063E  0020               	movlb	0	; select bank0
  4860  063F  00B0               	movwf	___ftmul@f2+1
  4861  0640  0021               	movlb	1	; select bank1
  4862  0641  0849               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  4863  0642  0020               	movlb	0	; select bank0
  4864  0643  00B1               	movwf	___ftmul@f2+2
  4865  0644  0008               	return
  4866  0645                     __end_ofPL10:	
  4867  0645                     PL14:	
  4868  0645  0086               	movwf	6
  4869  0646  0187               	clrf	7
  4870  0647  3F40               	moviw [0]fsr1
  4871  0648  00D9               	movwf	___ftsub@f1
  4872  0649  3F41               	moviw [1]fsr1
  4873  064A  00DA               	movwf	___ftsub@f1+1
  4874  064B  3F42               	moviw [2]fsr1
  4875  064C  00DB               	movwf	___ftsub@f1+2
  4876  064D  0008               	return
  4877  064E                     __end_ofPL14:	
  4878  064E                     PL16:	
  4879  064E  076C               	addwf	DMX_loop@Addr,w
  4880  064F  076C               	addwf	DMX_loop@Addr,w
  4881  0650  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4882  0651  0086               	movwf	6
  4883  0652  0187               	clrf	7
  4884  0653  0008               	return
  4885  0654                     __end_ofPL16:	
  4886  0654                     PL18:	
  4887  0654  3F40               	moviw [0]fsr1
  4888  0655  00D9               	movwf	___ftsub@f1
  4889  0656  3F41               	moviw [1]fsr1
  4890  0657  00DA               	movwf	___ftsub@f1+1
  4891  0658  3F42               	moviw [2]fsr1
  4892  0659  00DB               	movwf	___ftsub@f1+2
  4893  065A  0008               	return
  4894  065B                     __end_ofPL18:	
  4895  065B                     PL20:	
  4896  065B  3F40               	moviw [0]fsr1
  4897  065C  00D6               	movwf	___ftsub@f2
  4898  065D  3F41               	moviw [1]fsr1
  4899  065E  00D7               	movwf	___ftsub@f2+1
  4900  065F  3F42               	moviw [2]fsr1
  4901  0660  00D8               	movwf	___ftsub@f2+2
  4902  0661  0008               	return
  4903  0662                     __end_ofPL20:	
  4904  0662                     PL22:	
  4905  0662  0086               	movwf	6
  4906  0663  3F40               	moviw [0]fsr1
  4907  0664  0023               	movlb	3	; select bank3
  4908  0665  00D5               	movwf	(??_DMX_loop+1)^(0+384)
  4909  0666  3F41               	moviw [1]fsr1
  4910  0667  00D6               	movwf	((??_DMX_loop+1)^(0+384)+1)
  4911  0668  0855               	movf	(??_DMX_loop+1)^(0+384),w
  4912  0669  0086               	movwf	6
  4913  066A  0856               	movf	(??_DMX_loop+2)^(0+384),w
  4914  066B  0087               	movwf	7
  4915  066C  0854               	movf	??_DMX_loop^(0+384),w
  4916  066D  0081               	movwf	1
  4917  066E  0020               	movlb	0	; select bank0
  4918  066F  356C               	lslf	DMX_loop@Addr,w
  4919  0670  0008               	return
  4920  0671                     __end_ofPL22:	
  4921  0671                     PL24:	
  4922  0671  086C               	movf	DMX_loop@Addr,w
  4923  0672  076C               	addwf	DMX_loop@Addr,w
  4924  0673  076C               	addwf	DMX_loop@Addr,w
  4925  0674  3E38               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  4926  0675  0086               	movwf	6
  4927  0676  3001               	movlw	1	; select bank2/3
  4928  0677  0087               	movwf	7
  4929  0678  0008               	return
  4930  0679                     __end_ofPL24:	
  4931  0679                     PL26:	
  4932  0679  086C               	movf	DMX_loop@Addr,w
  4933  067A  076C               	addwf	DMX_loop@Addr,w
  4934  067B  076C               	addwf	DMX_loop@Addr,w
  4935  067C  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4936  067D  0008               	return
  4937  067E                     __end_ofPL26:	
  4938  067E                     PL32:	
  4939  067E  0023               	movlb	3	; select bank3
  4940  067F  00D4               	movwf	??_DMX_loop^(0+384)
  4941  0680  30C6               	movlw	low (_PWM| (0+32768))
  4942  0681  01D5               	clrf	(??_DMX_loop^(0+384)+1)
  4943  0682  35D4               	lslf	??_DMX_loop^(0+384),f
  4944  0683  0DD5               	rlf	(??_DMX_loop^(0+384)+1),f
  4945  0684  0754               	addwf	??_DMX_loop^(0+384),w
  4946  0685  0084               	movwf	4
  4947  0686  3087               	movlw	high (_PWM| (0+32768))
  4948  0687  3D55               	addwfc	(??_DMX_loop+1)^(0+384),w
  4949  0688  0085               	movwf	5
  4950  0689  3F00               	moviw [0]fsr0
  4951  068A  0008               	return
  4952  068B                     __end_ofPL32:	
  4953  068B                     PL34:	
  4954  068B  3FC2               	movwi [2]fsr1
  4955  068C  0021               	movlb	1	; select bank1
  4956  068D  086F               	movf	_DMXPeriod^(0+128),w
  4957  068E  0023               	movlb	3	; select bank3
  4958  068F  00D4               	movwf	??_DMX_loop^(0+384)
  4959  0690  36D4               	lsrf	??_DMX_loop^(0+384),f
  4960  0691  36D4               	lsrf	??_DMX_loop^(0+384),f
  4961  0692  0854               	movf	??_DMX_loop^(0+384),w
  4962  0693  0020               	movlb	0	; select bank0
  4963  0694  00A8               	movwf	___awtoft@c
  4964  0695  01A9               	clrf	___awtoft@c+1
  4965  0696  0008               	return
  4966  0697                     __end_ofPL34:	
  4967  0697                     PL40:	
  4968  0697  0828               	movf	?___awtoft,w
  4969  0698  00BB               	movwf	___ftdiv@f2
  4970  0699  0829               	movf	?___awtoft+1,w
  4971  069A  00BC               	movwf	___ftdiv@f2+1
  4972  069B  082A               	movf	?___awtoft+2,w
  4973  069C  00BD               	movwf	___ftdiv@f2+2
  4974  069D  0008               	return
  4975  069E                     __end_ofPL40:	
  4976  069E                     PL44:	
  4977  069E  076C               	addwf	DMX_loop@Addr,w
  4978  069F  076C               	addwf	DMX_loop@Addr,w
  4979  06A0  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  4980  06A1  0086               	movwf	6
  4981  06A2  3000               	movlw	0
  4982  06A3  0187               	clrf	7
  4983  06A4  3FC0               	movwi [0]fsr1
  4984  06A5  0008               	return
  4985  06A6                     __end_ofPL44:	
  4986  06A6                     PL46:	
  4987  06A6  0086               	movwf	6
  4988  06A7  3F40               	moviw [0]fsr1
  4989  06A8  00AC               	movwf	___ftge@ff1
  4990  06A9  3F41               	moviw [1]fsr1
  4991  06AA  00AD               	movwf	___ftge@ff1+1
  4992  06AB  3F42               	moviw [2]fsr1
  4993  06AC  00AE               	movwf	___ftge@ff1+2
  4994  06AD  0008               	return
  4995  06AE                     __end_ofPL46:	
  4996  06AE                     PL48:	
  4997  06AE  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  4998  06AF  0086               	movwf	6
  4999  06B0  30FC               	movlw	-4
  5000  06B1  0187               	clrf	7
  5001  06B2  0581               	andwf	1,f
  5002  06B3  0021               	movlb	1	; select bank1
  5003  06B4  0863               	movf	_rxdata^(0+128),w
  5004  06B5  0008               	return
  5005  06B6                     __end_ofPL48:	
  5006  06B6                     PL50:	
  5007  06B6  0086               	movwf	6
  5008  06B7  0820               	movf	??_DMX_init,w
  5009  06B8  3FC0               	movwi [0]fsr1
  5010  06B9  0821               	movf	??_DMX_init+1,w
  5011  06BA  3FC1               	movwi [1]fsr1
  5012  06BB  0822               	movf	??_DMX_init+2,w
  5013  06BC  3FC2               	movwi [2]fsr1
  5014  06BD  0008               	return
  5015  06BE                     __end_ofPL50:	
  5016  06BE                     PL52:	
  5017  06BE  3F40               	moviw [0]fsr1
  5018  06BF  00CA               	movwf	___ftadd@f1
  5019  06C0  3F41               	moviw [1]fsr1
  5020  06C1  00CB               	movwf	___ftadd@f1+1
  5021  06C2  3F42               	moviw [2]fsr1
  5022  06C3  00CC               	movwf	___ftadd@f1+2
  5023  06C4  0008               	return
  5024  06C5                     __end_ofPL52:	
  5025  06C5                     PL54:	
  5026  06C5  076C               	addwf	DMX_loop@Addr,w
  5027  06C6  076C               	addwf	DMX_loop@Addr,w
  5028  06C7  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  5029  06C8  0086               	movwf	6
  5030  06C9  0008               	return
  5031  06CA                     __end_ofPL54:	
  5032  06CA                     PL60:	
  5033  06CA  082C               	movf	?___ftmul,w
  5034  06CB  00BE               	movwf	___ftdiv@f1
  5035  06CC  082D               	movf	?___ftmul+1,w
  5036  06CD  00BF               	movwf	___ftdiv@f1+1
  5037  06CE  082E               	movf	?___ftmul+2,w
  5038  06CF  00C0               	movwf	___ftdiv@f1+2
  5039  06D0  0008               	return
  5040  06D1                     __end_ofPL60:	
  5041  06D1                     PL62:	
  5042  06D1  083B               	movf	?___ftdiv,w
  5043  06D2  3FC0               	movwi [0]fsr1
  5044  06D3  083C               	movf	?___ftdiv+1,w
  5045  06D4  3FC1               	movwi [1]fsr1
  5046  06D5  083D               	movf	?___ftdiv+2,w
  5047  06D6  3FC2               	movwi [2]fsr1
  5048  06D7  0008               	return
  5049  06D8                     __end_ofPL62:	
  5050  06D8                     PL66:	
  5051  06D8  082F               	movf	___ftmul@f2,w
  5052  06D9  07B6               	addwf	___ftmul@f3_as_product,f
  5053  06DA  0830               	movf	___ftmul@f2+1,w
  5054  06DB  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  5055  06DC  0831               	movf	___ftmul@f2+2,w
  5056  06DD  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  5057  06DE  0008               	return
  5058  06DF                     __end_ofPL66:	
  5059  06DF                     PL68:	
  5060  06DF  3F40               	moviw [0]fsr1
  5061  06E0  00AF               	movwf	___ftge@ff2
  5062  06E1  3F41               	moviw [1]fsr1
  5063  06E2  00B0               	movwf	___ftge@ff2+1
  5064  06E3  3F42               	moviw [2]fsr1
  5065  06E4  00B1               	movwf	___ftge@ff2+2
  5066  06E5  0008               	return
  5067  06E6                     __end_ofPL68:	
  5068  06E6                     PL70:	
  5069  06E6  0856               	movf	?___ftsub,w
  5070  06E7  00BE               	movwf	___ftdiv@f1
  5071  06E8  0857               	movf	?___ftsub+1,w
  5072  06E9  00BF               	movwf	___ftdiv@f1+1
  5073  06EA  0858               	movf	?___ftsub+2,w
  5074  06EB  00C0               	movwf	___ftdiv@f1+2
  5075  06EC  0008               	return
  5076  06ED                     __end_ofPL70:	
  5077  06ED                     PL76:	
  5078  06ED  0828               	movf	?___lbtoft,w
  5079  06EE  00D6               	movwf	___ftsub@f2
  5080  06EF  0829               	movf	?___lbtoft+1,w
  5081  06F0  00D7               	movwf	___ftsub@f2+1
  5082  06F1  082A               	movf	?___lbtoft+2,w
  5083  06F2  00D8               	movwf	___ftsub@f2+2
  5084  06F3  0008               	return
  5085  06F4                     __end_ofPL76:	
  5086  06F4                     PL78:	
  5087  06F4  084A               	movf	?___ftadd,w
  5088  06F5  3FC0               	movwi [0]fsr1
  5089  06F6  084B               	movf	?___ftadd+1,w
  5090  06F7  3FC1               	movwi [1]fsr1
  5091  06F8  084C               	movf	?___ftadd+2,w
  5092  06F9  0008               	return
  5093  06FA                     __end_ofPL78:	
  5094  06FA                     PL86:	
  5095  06FA  0856               	movf	?___ftsub,w
  5096  06FB  3FC0               	movwi [0]fsr1
  5097  06FC  0857               	movf	?___ftsub+1,w
  5098  06FD  3FC1               	movwi [1]fsr1
  5099  06FE  0858               	movf	?___ftsub+2,w
  5100  06FF  0008               	return
  5101  0700                     __end_ofPL86:	
  5102  0700                     PL88:	
  5103  0700  3E6C               	addlw	(low (_DMX_sumRepeat| (0+256)))& (0+255)
  5104  0701  0086               	movwf	6
  5105  0702  3001               	movlw	1	; select bank2/3
  5106  0703  0087               	movwf	7
  5107  0704  0801               	movf	1,w
  5108  0705  0008               	return
  5109  0706                     __end_ofPL88:	
  5110  0706                     PL90:	
  5111  0706  30FF               	movlw	255
  5112  0707  06CD               	xorwf	___ftadd@f2,f
  5113  0708  06CE               	xorwf	___ftadd@f2+1,f
  5114  0709  06CF               	xorwf	___ftadd@f2+2,f
  5115  070A  0ACD               	incf	___ftadd@f2,f
  5116  070B  0008               	return
  5117  070C                     __end_ofPL90:	
  5118  070C                     PL92:	
  5119  070C  3EC3               	addlw	(low (_DMXSign| 0))& (0+255)
  5120  070D  0086               	movwf	6
  5121  070E  0187               	clrf	7
  5122  070F  0801               	movf	1,w
  5123  0710  39FC               	andlw	-4
  5124  0711  0008               	return
  5125  0712                     __end_ofPL92:	
  5126  0712                     PL96:	
  5127  0712  0801               	movf	1,w
  5128  0713  0023               	movlb	3	; select bank3
  5129  0714  00D4               	movwf	??_DMX_loop^(0+384)
  5130  0715  0020               	movlb	0	; select bank0
  5131  0716  356C               	lslf	DMX_loop@Addr,w
  5132  0717  0008               	return
  5133  0718                     __end_ofPL96:	
  5134  0718                     PL98:	
  5135  0718  3080               	movlw	128
  5136  0719  00CF               	movwf	79	;volatile
  5137  071A  00BF               	movwf	63	;volatile
  5138  071B  00AF               	movwf	47	;volatile
  5139  071C  009F               	movwf	31	;volatile
  5140  071D  0008               	return
  5141  071E                     __end_ofPL98:	
  5142  071E                     PL100:	
  5143  071E  01F5               	clrf	??_ADC_loop+1
  5144  071F  35F4               	lslf	??_ADC_loop,f
  5145  0720  0DF5               	rlf	??_ADC_loop+1,f
  5146  0721  0774               	addwf	??_ADC_loop,w
  5147  0722  0084               	movwf	4
  5148  0723  0008               	return
  5149  0724                     __end_ofPL100:	
  5150  0724                     PL104:	
  5151  0724  01BB               	clrf	?___ftdiv
  5152  0725  01BC               	clrf	?___ftdiv+1
  5153  0726  01BD               	clrf	?___ftdiv+2
  5154  0727  0008               	return
  5155  0728                     __end_ofPL104:	
  5156  0728                     PL108:	
  5157  0728  01AC               	clrf	?___ftmul
  5158  0729  01AD               	clrf	?___ftmul+1
  5159  072A  01AE               	clrf	?___ftmul+2
  5160  072B  0008               	return
  5161  072C                     __end_ofPL108:	
  5162  072C                     __ptext22:	
  5163 ;; *************** function ___ftpack *****************
  5164 ;; Defined at:
  5165 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  arg             3    0[BANK0 ] unsigned um
  5168 ;;  exp             1    3[BANK0 ] unsigned char 
  5169 ;;  sign            1    4[BANK0 ] unsigned char 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  3    0[BANK0 ] float 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 1F/0
  5178 ;;		On exit  : 1F/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5181 ;;      Params:         0       5       0       0       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0
  5183 ;;      Temps:          0       3       0       0       0       0       0       0
  5184 ;;      Totals:         0       8       0       0       0       0       0       0
  5185 ;;Total ram usage:        8 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    2
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		___awtoft
  5192 ;;		___ftadd
  5193 ;;		___ftdiv
  5194 ;;		___ftmul
  5195 ;;		___lbtoft
  5196 ;;		___lwtoft
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function ___ftpack
  5202  072C                     ___ftpack:	
  5203                           
  5204                           ;incstack = 0
  5205                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5206  072C  0823               	movf	___ftpack@exp,w
  5207  072D  1903               	btfsc	3,2
  5208  072E  2F34               	goto	l1313
  5209  072F  0822               	movf	___ftpack@arg+2,w
  5210  0730  0421               	iorwf	___ftpack@arg+1,w
  5211  0731  0420               	iorwf	___ftpack@arg,w
  5212  0732  1D03               	skipz
  5213  0733  2F3C               	goto	l3895
  5214  0734                     l1313:	
  5215  0734  01A0               	clrf	?___ftpack
  5216  0735  01A1               	clrf	?___ftpack+1
  5217  0736  01A2               	clrf	?___ftpack+2
  5218  0737  0008               	return
  5219  0738                     l3893:	
  5220  0738  0AA3               	incf	___ftpack@exp,f
  5221  0739  36A2               	lsrf	___ftpack@arg+2,f
  5222  073A  0CA1               	rrf	___ftpack@arg+1,f
  5223  073B  0CA0               	rrf	___ftpack@arg,f
  5224  073C                     l3895:	
  5225  073C  30FE               	movlw	254
  5226  073D  0522               	andwf	___ftpack@arg+2,w
  5227  073E  1903               	btfsc	3,2
  5228  073F  2F4A               	goto	l3899
  5229  0740  2F38               	goto	l3893
  5230  0741                     l3897:	
  5231  0741  0AA3               	incf	___ftpack@exp,f
  5232  0742  0AA0               	incf	___ftpack@arg,f
  5233  0743  1903               	skipnz
  5234  0744  0AA1               	incf	___ftpack@arg+1,f
  5235  0745  1903               	skipnz
  5236  0746  0AA2               	incf	___ftpack@arg+2,f
  5237  0747  36A2               	lsrf	___ftpack@arg+2,f
  5238  0748  0CA1               	rrf	___ftpack@arg+1,f
  5239  0749  0CA0               	rrf	___ftpack@arg,f
  5240  074A                     l3899:	
  5241  074A  30FF               	movlw	255
  5242  074B  0522               	andwf	___ftpack@arg+2,w
  5243  074C  1903               	btfsc	3,2
  5244  074D  2F57               	goto	l3903
  5245  074E  2F41               	goto	l3897
  5246  074F                     l3905:	
  5247  074F  3002               	movlw	2
  5248  0750  0223               	subwf	___ftpack@exp,w
  5249  0751  1C03               	btfss	3,0
  5250  0752  2F59               	goto	l1325
  5251  0753  03A3               	decf	___ftpack@exp,f
  5252  0754  35A0               	lslf	___ftpack@arg,f
  5253  0755  0DA1               	rlf	___ftpack@arg+1,f
  5254  0756  0DA2               	rlf	___ftpack@arg+2,f
  5255  0757                     l3903:	
  5256  0757  1FA1               	btfss	___ftpack@arg+1,7
  5257  0758  2F4F               	goto	l3905
  5258  0759                     l1325:	
  5259  0759  1C23               	btfss	___ftpack@exp,0
  5260  075A  13A1               	bcf	___ftpack@arg+1,7
  5261  075B  36A3               	lsrf	___ftpack@exp,f
  5262  075C  0823               	movf	___ftpack@exp,w
  5263  075D  00A7               	movwf	??___ftpack+2
  5264  075E  01A6               	clrf	??___ftpack+1
  5265  075F  01A5               	clrf	??___ftpack
  5266  0760  0825               	movf	??___ftpack,w
  5267  0761  04A0               	iorwf	___ftpack@arg,f
  5268  0762  0826               	movf	??___ftpack+1,w
  5269  0763  04A1               	iorwf	___ftpack@arg+1,f
  5270  0764  0827               	movf	??___ftpack+2,w
  5271  0765  04A2               	iorwf	___ftpack@arg+2,f
  5272  0766  0824               	movf	___ftpack@sign,w
  5273  0767  1D03               	btfss	3,2
  5274  0768  17A2               	bsf	___ftpack@arg+2,7
  5275  0769  0008               	return
  5276  076A                     __end_of___ftpack:	
  5277  076A                     __ptext15:	
  5278 ;; *************** function ___fttol *****************
  5279 ;; Defined at:
  5280 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  f1              3   60[BANK0 ] float 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  lval            4   68[BANK0 ] unsigned long 
  5285 ;;  exp1            1   72[BANK0 ] unsigned char 
  5286 ;;  sign1           1   67[BANK0 ] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  4   60[BANK0 ] long 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0
  5291 ;; Tracked objects:
  5292 ;;		On entry : 1F/0
  5293 ;;		On exit  : 1F/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5296 ;;      Params:         0       4       0       0       0       0       0       0
  5297 ;;      Locals:         0       6       0       0       0       0       0       0
  5298 ;;      Temps:          0       3       0       0       0       0       0       0
  5299 ;;      Totals:         0      13       0       0       0       0       0       0
  5300 ;;Total ram usage:       13 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    2
  5303 ;; This function calls:
  5304 ;;		Nothing
  5305 ;; This function is called by:
  5306 ;;		_DMX_loop
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function ___fttol
  5312  076A                     ___fttol:	
  5313                           
  5314                           ;incstack = 0
  5315                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5316  076A  27BF  3180         	fcall	PL82	;call to abstracted procedure
  5317  076C  1003               	clrc
  5318  076D  0D61               	rlf	??___fttol+1,w
  5319  076E  0D62               	rlf	??___fttol+2,w
  5320  076F  00E8               	movwf	___fttol@exp1
  5321  0770  0868               	movf	___fttol@exp1,w
  5322  0771  1D03               	btfss	3,2
  5323  0772  2F78               	goto	l3165
  5324  0773                     l3163:	
  5325  0773  01DC               	clrf	?___fttol
  5326  0774  01DD               	clrf	?___fttol+1
  5327  0775  01DE               	clrf	?___fttol+2
  5328  0776  01DF               	clrf	?___fttol+3
  5329  0777  0008               	return
  5330  0778                     l3165:	
  5331  0778  27BF  3180         	fcall	PL82	;call to abstracted procedure
  5332  077A  3017               	movlw	23
  5333  077B                     u1865:	
  5334  077B  36E2               	lsrf	??___fttol+2,f
  5335  077C  0CE1               	rrf	??___fttol+1,f
  5336  077D  0CE0               	rrf	??___fttol,f
  5337  077E  0B89               	decfsz	9,f
  5338  077F  2F7B               	goto	u1865
  5339  0780  0860               	movf	??___fttol,w
  5340  0781  00E3               	movwf	___fttol@sign1
  5341  0782  17DD               	bsf	___fttol@f1+1,7
  5342  0783  01DE               	clrf	___fttol@f1+2
  5343  0784  085C               	movf	___fttol@f1,w
  5344  0785  00E4               	movwf	___fttol@lval
  5345  0786  085D               	movf	___fttol@f1+1,w
  5346  0787  00E5               	movwf	___fttol@lval+1
  5347  0788  085E               	movf	___fttol@f1+2,w
  5348  0789  00E6               	movwf	___fttol@lval+2
  5349  078A  308E               	movlw	142
  5350  078B  01E7               	clrf	___fttol@lval+3
  5351  078C  02E8               	subwf	___fttol@exp1,f
  5352  078D  1FE8               	btfss	___fttol@exp1,7
  5353  078E  2F9B               	goto	l3185
  5354  078F  0868               	movf	___fttol@exp1,w
  5355  0790  3A80               	xorlw	128
  5356  0791  3E8F               	addlw	143
  5357  0792  1C03               	btfss	3,0
  5358  0793  2F73               	goto	l3163
  5359  0794                     l3181:	
  5360  0794  36E7               	lsrf	___fttol@lval+3,f
  5361  0795  0CE6               	rrf	___fttol@lval+2,f
  5362  0796  0CE5               	rrf	___fttol@lval+1,f
  5363  0797  0CE4               	rrf	___fttol@lval,f
  5364  0798  0FE8               	incfsz	___fttol@exp1,f
  5365  0799  2F94               	goto	l3181
  5366  079A  2FA8               	goto	l3193
  5367  079B                     l3185:	
  5368  079B  3018               	movlw	24
  5369  079C  0268               	subwf	___fttol@exp1,w
  5370  079D  1803               	btfsc	3,0
  5371  079E  2F73               	goto	l3163
  5372  079F                     l3191:	
  5373  079F  0868               	movf	___fttol@exp1,w
  5374  07A0  1903               	btfsc	3,2
  5375  07A1  2FA8               	goto	l3193
  5376  07A2  35E4               	lslf	___fttol@lval,f
  5377  07A3  0DE5               	rlf	___fttol@lval+1,f
  5378  07A4  0DE6               	rlf	___fttol@lval+2,f
  5379  07A5  0DE7               	rlf	___fttol@lval+3,f
  5380  07A6  03E8               	decf	___fttol@exp1,f
  5381  07A7  2F9F               	goto	l3191
  5382  07A8                     l3193:	
  5383  07A8  0863               	movf	___fttol@sign1,w
  5384  07A9  1903               	btfsc	3,2
  5385  07AA  2FB6               	goto	l3197
  5386  07AB  09E4               	comf	___fttol@lval,f
  5387  07AC  09E5               	comf	___fttol@lval+1,f
  5388  07AD  09E6               	comf	___fttol@lval+2,f
  5389  07AE  09E7               	comf	___fttol@lval+3,f
  5390  07AF  0AE4               	incf	___fttol@lval,f
  5391  07B0  1903               	skipnz
  5392  07B1  0AE5               	incf	___fttol@lval+1,f
  5393  07B2  1903               	skipnz
  5394  07B3  0AE6               	incf	___fttol@lval+2,f
  5395  07B4  1903               	skipnz
  5396  07B5  0AE7               	incf	___fttol@lval+3,f
  5397  07B6                     l3197:	
  5398  07B6  0867               	movf	___fttol@lval+3,w
  5399  07B7  00DF               	movwf	?___fttol+3
  5400  07B8  0866               	movf	___fttol@lval+2,w
  5401  07B9  00DE               	movwf	?___fttol+2
  5402  07BA  0865               	movf	___fttol@lval+1,w
  5403  07BB  00DD               	movwf	?___fttol+1
  5404  07BC  0864               	movf	___fttol@lval,w
  5405  07BD  00DC               	movwf	?___fttol
  5406  07BE  0008               	return
  5407  07BF                     __end_of___fttol:	
  5408  07BF                     PL82:	
  5409  07BF  085C               	movf	___fttol@f1,w
  5410  07C0  00E0               	movwf	??___fttol
  5411  07C1  085D               	movf	___fttol@f1+1,w
  5412  07C2  00E1               	movwf	??___fttol+1
  5413  07C3  085E               	movf	___fttol@f1+2,w
  5414  07C4  00E2               	movwf	??___fttol+2
  5415  07C5  0008               	return
  5416  07C6                     __end_ofPL82:	
  5417                           
  5418                           	psect	bssCOMMON
  5419  0076                     __pbssCOMMON:	
  5420  0076                     _DMX_Flags:	
  5421  0076                     	ds	2
  5422  0078                     _PackCount:	
  5423  0078                     	ds	1
  5424  0079                     _PDCount:	
  5425  0079                     	ds	1
  5426                           
  5427                           	psect	bssBANK1
  5428  00A0                     __pbssBANK1:	
  5429  00A0                     _DMX_TargetBright:	
  5430  00A0                     	ds	12
  5431  00AC                     _DMX_CurrentBright:	
  5432  00AC                     	ds	12
  5433  00B8                     _Timer:	
  5434  00B8                     	ds	7
  5435  00BF                     _PWM_Pin:	
  5436  00BF                     	ds	4
  5437  00C3                     _DMXSign:	
  5438  00C3                     	ds	4
  5439  00C7                     _DMX_difference:	
  5440  00C7                     	ds	3
  5441  00CA                     _checkSum:	
  5442  00CA                     	ds	2
  5443  00CC                     _TX_PD_Flag:	
  5444  00CC                     	ds	2
  5445  00CE                     _PD_Flag:	
  5446  00CE                     	ds	2
  5447  00D0                     _PD_ID:	
  5448  00D0                     	ds	2
  5449  00D2                     _PD_Manu:	
  5450  00D2                     	ds	2
  5451  00D4                     _TxCount:	
  5452  00D4                     	ds	2
  5453  00D6                     _i:	
  5454  00D6                     	ds	2
  5455  00D8                     _RxTimer:	
  5456  00D8                     	ds	2
  5457  00DA                     _RxAddrCount:	
  5458  00DA                     	ds	2
  5459  00DC                     _ADC_Flags:	
  5460  00DC                     	ds	1
  5461  00DD                     _ADC_Data:	
  5462  00DD                     	ds	1
  5463  00DE                     _Timer_DelayCount:	
  5464  00DE                     	ds	1
  5465  00DF                     _TimerState:	
  5466  00DF                     	ds	1
  5467  00E0                     _TX_PDCount:	
  5468  00E0                     	ds	1
  5469  00E1                     _TxState:	
  5470  00E1                     	ds	1
  5471  00E2                     _TxByte:	
  5472  00E2                     	ds	1
  5473  00E3                     _rxdata:	
  5474  00E3                     	ds	1
  5475  00E4                     _DMXStepConst:	
  5476  00E4                     	ds	1
  5477  00E5                     _DMXPeriodDimming:	
  5478  00E5                     	ds	1
  5479  00E6                     _DMXPeriodConst:	
  5480  00E6                     	ds	1
  5481  00E7                     _RxState:	
  5482  00E7                     	ds	1
  5483  00E8                     _RxDataPtr:	
  5484  00E8                     	ds	1
  5485  00E9                     _RxData:	
  5486  00E9                     	ds	4
  5487                           
  5488                           	psect	dataBANK1
  5489  00EF                     __pdataBANK1:	
  5490  00EF                     _DMXPeriod:	
  5491  00EF                     	ds	1
  5492                           
  5493                           	psect	bssBANK2
  5494  0120                     __pbssBANK2:	
  5495  0120                     _RX_RDM_Data:	
  5496  0120                     	ds	24
  5497  0138                     _DMX_SpaceBright:	
  5498  0138                     	ds	12
  5499  0144                     _CurrentPWM:	
  5500  0144                     	ds	8
  5501  014C                     _TX_RDM_Data:	
  5502  014C                     	ds	24
  5503                           
  5504                           	psect	dataBANK2
  5505  0164                     __pdataBANK2:	
  5506  0164                     _DMX_Repeat:	
  5507  0164                     	ds	8
  5508  016C                     _DMX_sumRepeat:	
  5509  016C                     	ds	4
  5510                           
  5511                           	psect	bssBANK3
  5512  01A0                     __pbssBANK3:	
  5513  01A0                     _PWMLDCONptr:	
  5514  01A0                     	ds	8
  5515  01A8                     _PWMDCHptr:	
  5516  01A8                     	ds	8
  5517  01B0                     _PWMDCLptr:	
  5518  01B0                     	ds	8
  5519  01B8                     _preRxData:	
  5520  01B8                     	ds	4
  5521  01BC                     _DISCOVERY_RDM_Data:	
  5522  01BC                     	ds	24
  5523                           
  5524                           	psect	clrtext
  5525  0B02                     clear_ram0:	
  5526                           ;	Called with FSR0 containing the base address, and
  5527                           ;	btemp/btemp+1 has the size to clear
  5528                           
  5529  0B02  0064               	clrwdt	;clear the watchdog before getting into this loop
  5530  0B03                     clrloop0:	
  5531  0B03  3001               	movlw	1
  5532  0B04  0180               	clrf	0	;clear RAM location pointed to by FSR
  5533  0B05  3101               	addfsr 0,1
  5534  0B06  02FE               	subwf	126,f
  5535  0B07  3000               	movlw	0
  5536  0B08  3BFF               	subwfb	127,f
  5537  0B09  087F               	movf	127,w
  5538  0B0A  047E               	iorwf	126,w
  5539  0B0B  1903               	btfsc	3,2
  5540  0B0C  3400               	retlw	0	;all done for this memory range, return
  5541  0B0D  2B03               	goto	clrloop0	;have we reached the end yet?
  5542                           
  5543                           	psect	cstackBANK3
  5544  01D4                     __pcstackBANK3:	
  5545  01D4                     ??_DMX_loop:	
  5546                           
  5547                           ; 1 bytes @ 0x0
  5548  01D4                     	ds	8
  5549                           
  5550                           	psect	cstackCOMMON
  5551  0070                     __pcstackCOMMON:	
  5552  0070                     ?_DMX_init:	
  5553  0070                     ?_DMX_loop:	
  5554                           ; 1 bytes @ 0x0
  5555                           
  5556  0070                     ??_ADC_interrupt:	
  5557                           ; 1 bytes @ 0x0
  5558                           
  5559  0070                     ??_DMX_interrput:	
  5560                           ; 1 bytes @ 0x0
  5561                           
  5562  0070                     ??_timer1_interrupt:	
  5563                           ; 1 bytes @ 0x0
  5564                           
  5565  0070                     ??_RDM_tx_interrupt:	
  5566                           ; 1 bytes @ 0x0
  5567                           
  5568  0070                     ?_RDM_discovery_CC:	
  5569                           ; 1 bytes @ 0x0
  5570                           
  5571  0070                     ?_RDM_GET_CC:	
  5572                           ; 1 bytes @ 0x0
  5573                           
  5574  0070                     ?_RDM_SET_CC:	
  5575                           ; 1 bytes @ 0x0
  5576                           
  5577  0070                     ?_RDM_TXSTART:	
  5578                           ; 1 bytes @ 0x0
  5579                           
  5580  0070                     ?_TX_RDM_Response_Set:	
  5581                           ; 1 bytes @ 0x0
  5582                           
  5583  0070                     ?_main:	
  5584                           ; 1 bytes @ 0x0
  5585                           
  5586  0070                     ?_isr:	
  5587                           ; 1 bytes @ 0x0
  5588                           
  5589  0070                     ?_RDM_tx_TimerBreak:	
  5590                           ; 1 bytes @ 0x0
  5591                           
  5592  0070                     ?_timer1_init:	
  5593                           ; 1 bytes @ 0x0
  5594                           
  5595  0070                     ?_ADC_init:	
  5596                           ; 2 bytes @ 0x0
  5597                           
  5598  0070                     ?_RDM_init:	
  5599                           ; 2 bytes @ 0x0
  5600                           
  5601  0070                     ?_ADC_loop:	
  5602                           ; 2 bytes @ 0x0
  5603                           
  5604  0070                     ?_RDM_rx_loop:	
  5605                           ; 2 bytes @ 0x0
  5606                           
  5607  0070                     ?_ADC_interrupt:	
  5608                           ; 2 bytes @ 0x0
  5609                           
  5610  0070                     ?_DMX_interrput:	
  5611                           ; 2 bytes @ 0x0
  5612                           
  5613  0070                     ?_timer1_interrupt:	
  5614                           ; 2 bytes @ 0x0
  5615                           
  5616  0070                     ?_RDM_tx_interrupt:	
  5617                           ; 2 bytes @ 0x0
  5618                           
  5619                           
  5620                           ; 2 bytes @ 0x0
  5621  0070                     	ds	2
  5622  0072                     DMX_interrput@RxDat:	
  5623                           
  5624                           ; 1 bytes @ 0x2
  5625  0072                     	ds	2
  5626  0074                     ??_timer1_init:	
  5627  0074                     ??_ADC_init:	
  5628                           ; 1 bytes @ 0x4
  5629                           
  5630  0074                     ??_ADC_loop:	
  5631                           ; 1 bytes @ 0x4
  5632                           
  5633  0074                     ??_RDM_get_checkSum:	
  5634                           ; 1 bytes @ 0x4
  5635                           
  5636  0074                     ??_RDM_TXSTART:	
  5637                           ; 1 bytes @ 0x4
  5638                           
  5639  0074                     ??_TX_RDM_Response_Set:	
  5640                           ; 1 bytes @ 0x4
  5641                           
  5642  0074                     ??_isr:	
  5643                           ; 1 bytes @ 0x4
  5644                           
  5645  0074                     ??_RDM_tx_TimerBreak:	
  5646                           ; 1 bytes @ 0x4
  5647                           
  5648  0074                     ?___bmul:	
  5649                           ; 1 bytes @ 0x4
  5650                           
  5651  0074                     ??___awtoft:	
  5652                           ; 1 bytes @ 0x4
  5653                           
  5654  0074                     ??___lbtoft:	
  5655                           ; 1 bytes @ 0x4
  5656                           
  5657  0074                     ??___lwtoft:	
  5658                           ; 1 bytes @ 0x4
  5659                           
  5660  0074                     DMX_init@Addr:	
  5661                           ; 1 bytes @ 0x4
  5662                           
  5663  0074                     ___bmul@multiplicand:	
  5664                           ; 1 bytes @ 0x4
  5665                           
  5666  0074                     ___awtoft@sign:	
  5667                           ; 1 bytes @ 0x4
  5668                           
  5669  0074                     ___lbtoft@c:	
  5670                           ; 1 bytes @ 0x4
  5671                           
  5672                           
  5673                           ; 1 bytes @ 0x4
  5674  0074                     	ds	1
  5675  0075                     ??_RDM_rx_loop:	
  5676  0075                     ??_RDM_SET_CC:	
  5677                           ; 1 bytes @ 0x5
  5678                           
  5679  0075                     ??___bmul:	
  5680                           ; 1 bytes @ 0x5
  5681                           
  5682  0075                     ??___ftge:	
  5683                           ; 1 bytes @ 0x5
  5684                           
  5685  0075                     ??___ftsub:	
  5686                           ; 1 bytes @ 0x5
  5687                           
  5688                           
  5689                           ; 1 bytes @ 0x5
  5690  0075                     	ds	1
  5691  0076                     ??_main:	
  5692                           
  5693                           	psect	cstackBANK0
  5694  0020                     __pcstackBANK0:	
  5695                           ; 1 bytes @ 0x6
  5696                           
  5697  0020                     ??_DMX_init:	
  5698  0020                     ?_RDM_get_checkSum:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  0020                     ?___ftpack:	
  5702                           ; 2 bytes @ 0x0
  5703                           
  5704  0020                     ___bmul@product:	
  5705                           ; 3 bytes @ 0x0
  5706                           
  5707  0020                     ___ftpack@arg:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  0020                     RDM_get_checkSum@Data:	
  5711                           ; 3 bytes @ 0x0
  5712                           
  5713                           
  5714                           ; 24 bytes @ 0x0
  5715  0020                     	ds	1
  5716  0021                     ___bmul@multiplier:	
  5717                           
  5718                           ; 1 bytes @ 0x1
  5719  0021                     	ds	1
  5720  0022                     ??_RDM_init:	
  5721                           
  5722                           ; 1 bytes @ 0x2
  5723  0022                     	ds	1
  5724  0023                     ___ftpack@exp:	
  5725                           
  5726                           ; 1 bytes @ 0x3
  5727  0023                     	ds	1
  5728  0024                     ___ftpack@sign:	
  5729                           
  5730                           ; 1 bytes @ 0x4
  5731  0024                     	ds	1
  5732  0025                     ??___ftpack:	
  5733                           
  5734                           ; 1 bytes @ 0x5
  5735  0025                     	ds	3
  5736  0028                     ?___awtoft:	
  5737  0028                     ?___lbtoft:	
  5738                           ; 3 bytes @ 0x8
  5739                           
  5740  0028                     ?___lwtoft:	
  5741                           ; 3 bytes @ 0x8
  5742                           
  5743  0028                     ___awtoft@c:	
  5744                           ; 3 bytes @ 0x8
  5745                           
  5746  0028                     ___lwtoft@c:	
  5747                           ; 2 bytes @ 0x8
  5748                           
  5749                           
  5750                           ; 2 bytes @ 0x8
  5751  0028                     	ds	4
  5752  002C                     ?___ftge:	
  5753  002C                     ?___ftmul:	
  5754                           ; 1 bit 
  5755                           
  5756  002C                     ___ftge@ff1:	
  5757                           ; 3 bytes @ 0xC
  5758                           
  5759  002C                     ___ftmul@f1:	
  5760                           ; 3 bytes @ 0xC
  5761                           
  5762                           
  5763                           ; 3 bytes @ 0xC
  5764  002C                     	ds	3
  5765  002F                     ___ftge@ff2:	
  5766  002F                     ___ftmul@f2:	
  5767                           ; 3 bytes @ 0xF
  5768                           
  5769                           
  5770                           ; 3 bytes @ 0xF
  5771  002F                     	ds	3
  5772  0032                     ??___ftmul:	
  5773                           
  5774                           ; 1 bytes @ 0x12
  5775  0032                     	ds	3
  5776  0035                     ___ftmul@exp:	
  5777                           
  5778                           ; 1 bytes @ 0x15
  5779  0035                     	ds	1
  5780  0036                     ___ftmul@f3_as_product:	
  5781                           
  5782                           ; 3 bytes @ 0x16
  5783  0036                     	ds	2
  5784  0038                     RDM_get_checkSum@len:	
  5785                           
  5786                           ; 1 bytes @ 0x18
  5787  0038                     	ds	1
  5788  0039                     ??_RDM_discovery_CC:	
  5789  0039                     ??_RDM_GET_CC:	
  5790                           ; 1 bytes @ 0x19
  5791                           
  5792  0039                     ___ftmul@cntr:	
  5793                           ; 1 bytes @ 0x19
  5794                           
  5795                           
  5796                           ; 1 bytes @ 0x19
  5797  0039                     	ds	1
  5798  003A                     ___ftmul@sign:	
  5799                           
  5800                           ; 1 bytes @ 0x1A
  5801  003A                     	ds	1
  5802  003B                     ?___ftdiv:	
  5803  003B                     ___ftdiv@f2:	
  5804                           ; 3 bytes @ 0x1B
  5805                           
  5806                           
  5807                           ; 3 bytes @ 0x1B
  5808  003B                     	ds	3
  5809  003E                     ___ftdiv@f1:	
  5810                           
  5811                           ; 3 bytes @ 0x1E
  5812  003E                     	ds	3
  5813  0041                     ??___ftdiv:	
  5814                           
  5815                           ; 1 bytes @ 0x21
  5816  0041                     	ds	3
  5817  0044                     ___ftdiv@cntr:	
  5818                           
  5819                           ; 1 bytes @ 0x24
  5820  0044                     	ds	1
  5821  0045                     ___ftdiv@f3:	
  5822                           
  5823                           ; 3 bytes @ 0x25
  5824  0045                     	ds	3
  5825  0048                     ___ftdiv@exp:	
  5826                           
  5827                           ; 1 bytes @ 0x28
  5828  0048                     	ds	1
  5829  0049                     ___ftdiv@sign:	
  5830                           
  5831                           ; 1 bytes @ 0x29
  5832  0049                     	ds	1
  5833  004A                     ?___ftadd:	
  5834  004A                     ___ftadd@f1:	
  5835                           ; 3 bytes @ 0x2A
  5836                           
  5837                           
  5838                           ; 3 bytes @ 0x2A
  5839  004A                     	ds	3
  5840  004D                     ___ftadd@f2:	
  5841                           
  5842                           ; 3 bytes @ 0x2D
  5843  004D                     	ds	3
  5844  0050                     ??___ftadd:	
  5845                           
  5846                           ; 1 bytes @ 0x30
  5847  0050                     	ds	3
  5848  0053                     ___ftadd@sign:	
  5849                           
  5850                           ; 1 bytes @ 0x33
  5851  0053                     	ds	1
  5852  0054                     ___ftadd@exp2:	
  5853                           
  5854                           ; 1 bytes @ 0x34
  5855  0054                     	ds	1
  5856  0055                     ___ftadd@exp1:	
  5857                           
  5858                           ; 1 bytes @ 0x35
  5859  0055                     	ds	1
  5860  0056                     ?___ftsub:	
  5861  0056                     ___ftsub@f2:	
  5862                           ; 3 bytes @ 0x36
  5863                           
  5864                           
  5865                           ; 3 bytes @ 0x36
  5866  0056                     	ds	3
  5867  0059                     ___ftsub@f1:	
  5868                           
  5869                           ; 3 bytes @ 0x39
  5870  0059                     	ds	3
  5871  005C                     ?___fttol:	
  5872  005C                     ___fttol@f1:	
  5873                           ; 4 bytes @ 0x3C
  5874                           
  5875                           
  5876                           ; 3 bytes @ 0x3C
  5877  005C                     	ds	4
  5878  0060                     ??___fttol:	
  5879                           
  5880                           ; 1 bytes @ 0x40
  5881  0060                     	ds	3
  5882  0063                     ___fttol@sign1:	
  5883                           
  5884                           ; 1 bytes @ 0x43
  5885  0063                     	ds	1
  5886  0064                     ___fttol@lval:	
  5887                           
  5888                           ; 4 bytes @ 0x44
  5889  0064                     	ds	4
  5890  0068                     ___fttol@exp1:	
  5891                           
  5892                           ; 1 bytes @ 0x48
  5893  0068                     	ds	1
  5894  0069                     _DMX_loop$1457:	
  5895                           
  5896                           ; 3 bytes @ 0x49
  5897  0069                     	ds	3
  5898  006C                     DMX_loop@Addr:	
  5899                           
  5900                           ; 1 bytes @ 0x4C
  5901  006C                     	ds	1
  5902                           
  5903                           	psect	text3
  5904  0D2B                     __ptext3:	
  5905 ;; *************** function _RDM_discovery_CC *****************
  5906 ;; Defined at:
  5907 ;;		line 56 in file "RDM_Read.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;		None
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 1C/2
  5918 ;;		On exit  : 1C/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5921 ;;      Params:         0       0       0       0       0       0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0
  5923 ;;      Temps:          0       4       0       0       0       0       0       0
  5924 ;;      Totals:         0       4       0       0       0       0       0       0
  5925 ;;Total ram usage:        4 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    4
  5928 ;; This function calls:
  5929 ;;		_RDM_TXSTART
  5930 ;; This function is called by:
  5931 ;;		_RDM_rx_loop
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           
  5936                           ;psect for function _RDM_discovery_CC
  5937  0D2B                     _RDM_discovery_CC:	
  5938  0D2B                     l3989:	
  5939                           ;incstack = 0
  5940                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5941                           
  5942                           
  5943                           ;RDM_Read.c: 57: switch (RX_RDM_Data.PID) {
  5944  0D2B  2D8B               	goto	l4049
  5945  0D2C                     l1127:	
  5946                           ;RDM_Read.c: 58: case 0x0001:
  5947                           
  5948                           
  5949                           ;RDM_Read.c: 59: if (!DMX_Flags.RDMmute) {
  5950  0D2C  1977               	btfsc	_DMX_Flags+1,2	;volatile
  5951  0D2D  0008               	return
  5952                           
  5953                           ;RDM_Read.c: 60: DMX_Flags.RDMcheck = 1;
  5954  0D2E  0877               	movf	_DMX_Flags+1,w	;volatile
  5955  0D2F  39FC               	andlw	-4
  5956  0D30  3801               	iorlw	1
  5957  0D31  00F7               	movwf	_DMX_Flags+1	;volatile
  5958                           
  5959                           ;RDM_Read.c: 61: PD_Manu = &PD.u8[100-2];
  5960  0D32  3021               	movlw	33
  5961  0D33  0021               	movlb	1	; select bank1
  5962  0D34  00D3               	movwf	(_PD_Manu+1)^(0+128)
  5963  0D35  30EE               	movlw	238
  5964  0D36  00D2               	movwf	_PD_Manu^(0+128)
  5965                           
  5966                           ;RDM_Read.c: 62: PD_ID = &PD.u8[100-6];
  5967  0D37  3021               	movlw	33
  5968  0D38  00D1               	movwf	(_PD_ID+1)^(0+128)
  5969  0D39  30EA               	movlw	234
  5970                           
  5971                           ;RDM_Read.c: 63: if (*PD_Manu <= 0x4D52) {
  5972  0D3A  2733  318D         	fcall	PL30	;call to abstracted procedure
  5973  0D3C  3053               	movlw	83
  5974  0D3D  1903               	skipnz
  5975  0D3E  0239               	subwf	??_RDM_discovery_CC,w
  5976  0D3F  1803               	skipnc
  5977  0D40  2D4E               	goto	l4007
  5978                           
  5979                           ;RDM_Read.c: 64: DMX_Flags.RDMcheck++;
  5980                           
  5981                           ;RDM_Read.c: 65: if (*PD_Manu == 0x4D52 && *PD_ID > 0x17C31092) {
  5982  0D41  270F  318D         	fcall	PL12	;call to abstracted procedure
  5983  0D43  1D03               	btfss	3,2
  5984  0D44  2D4E               	goto	l4007
  5985  0D45  2740  318D         	fcall	PL42	;call to abstracted procedure
  5986  0D47  3093               	movlw	147
  5987  0D48  2725  318D         	fcall	PL28	;call to abstracted procedure
  5988  0D4A  1C03               	btfss	3,0
  5989  0D4B  2D4E               	goto	l4007
  5990                           
  5991                           ;RDM_Read.c: 66: DMX_Flags.RDMcheck = 0;
  5992  0D4C  30FC               	movlw	-4
  5993  0D4D  05F7               	andwf	_DMX_Flags+1,f	;volatile
  5994  0D4E                     l4007:	
  5995                           
  5996                           ;RDM_Read.c: 67: }
  5997                           ;RDM_Read.c: 68: }
  5998                           ;RDM_Read.c: 69: PD_Manu = &PD.u8[100-8];
  5999  0D4E  3021               	movlw	33
  6000  0D4F  0021               	movlb	1	; select bank1
  6001  0D50  00D3               	movwf	(_PD_Manu+1)^(0+128)
  6002  0D51  30E8               	movlw	232
  6003  0D52  00D2               	movwf	_PD_Manu^(0+128)
  6004                           
  6005                           ;RDM_Read.c: 70: PD_ID = &PD.u8[100-12];
  6006  0D53  3021               	movlw	33
  6007  0D54  00D1               	movwf	(_PD_ID+1)^(0+128)
  6008  0D55  30E4               	movlw	228
  6009                           
  6010                           ;RDM_Read.c: 71: if (*PD_Manu >= 0x4D52) {
  6011  0D56  2733  318D         	fcall	PL30	;call to abstracted procedure
  6012  0D58  3052               	movlw	82
  6013  0D59  1903               	skipnz
  6014  0D5A  0239               	subwf	??_RDM_discovery_CC,w
  6015  0D5B  1C03               	skipc
  6016  0D5C  2D6A               	goto	l1131
  6017                           
  6018                           ;RDM_Read.c: 72: DMX_Flags.RDMcheck++;
  6019                           
  6020                           ;RDM_Read.c: 73: if (*PD_Manu == 0x4D52 && *PD_ID < 0x17C31092) {
  6021  0D5D  270F  318D         	fcall	PL12	;call to abstracted procedure
  6022  0D5F  1D03               	btfss	3,2
  6023  0D60  2D6A               	goto	l1131
  6024  0D61  2740  318D         	fcall	PL42	;call to abstracted procedure
  6025  0D63  3092               	movlw	146
  6026  0D64  2725  318D         	fcall	PL28	;call to abstracted procedure
  6027  0D66  1803               	btfsc	3,0
  6028  0D67  2D6A               	goto	l1131
  6029                           
  6030                           ;RDM_Read.c: 74: DMX_Flags.RDMcheck = 0;
  6031  0D68  30FC               	movlw	-4
  6032  0D69  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6033  0D6A                     l1131:	
  6034                           
  6035                           ;RDM_Read.c: 75: }
  6036                           ;RDM_Read.c: 76: }
  6037                           ;RDM_Read.c: 77: if (DMX_Flags.RDMcheck == 3) {
  6038  0D6A  0877               	movf	_DMX_Flags+1,w	;volatile
  6039  0D6B  3903               	andlw	3
  6040  0D6C  3A03               	xorlw	3
  6041  0D6D  1D03               	skipz
  6042  0D6E  0008               	return
  6043                           
  6044                           ;RDM_Read.c: 78: TxState = TX_DISCOVERY;
  6045  0D6F  0021               	movlb	1	; select bank1
  6046  0D70  01E1               	clrf	_TxState^(0+128)	;volatile
  6047                           
  6048                           ;RDM_Read.c: 79: TXREG = 0xFE;
  6049  0D71  30FE               	movlw	254
  6050  0D72  0023               	movlb	3	; select bank3
  6051  0D73  009A               	movwf	26	;volatile
  6052                           
  6053                           ;RDM_Read.c: 80: TxByte= &DISCOVERY_RDM_Data.value[23];
  6054  0D74  30D3               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  6055  0D75  0021               	movlb	1	; select bank1
  6056  0D76  00E2               	movwf	_TxByte^(0+128)
  6057                           
  6058                           ;RDM_Read.c: 81: TxCount = 0;
  6059  0D77  01D4               	clrf	_TxCount^(0+128)
  6060  0D78  01D5               	clrf	(_TxCount+1)^(0+128)
  6061                           
  6062                           ;RDM_Read.c: 82: LATC3 = 1;
  6063  0D79  0022               	movlb	2	; select bank2
  6064  0D7A  158E               	bsf	14,3	;volatile
  6065                           
  6066                           ;RDM_Read.c: 83: RCIE = 0;
  6067  0D7B  0021               	movlb	1	; select bank1
  6068  0D7C  1291               	bcf	17,5	;volatile
  6069                           
  6070                           ;RDM_Read.c: 84: TXEN = 1;
  6071  0D7D  0023               	movlb	3	; select bank3
  6072  0D7E  169E               	bsf	30,5	;volatile
  6073                           
  6074                           ;RDM_Read.c: 85: TXIE = 1;
  6075  0D7F  0021               	movlb	1	; select bank1
  6076  0D80  1611               	bsf	17,4	;volatile
  6077  0D81  0008               	return
  6078  0D82                     l1135:	
  6079                           ;RDM_Read.c: 90: case 0x0002:
  6080                           
  6081                           
  6082                           ;RDM_Read.c: 91: DMX_Flags.RDMmute = 1;
  6083  0D82  1577               	bsf	_DMX_Flags+1,2	;volatile
  6084  0D83                     L1:	
  6085                           
  6086                           ;RDM_Read.c: 92: TX_RDM_Data.PDL=2;
  6087                           
  6088                           ;RDM_Read.c: 93: PD.u16[20-1] = 0;
  6089  0D83  2756  318D         	fcall	PL72	;call to abstracted procedure
  6090  0D85  3000               	movlw	0
  6091  0D86  3FC0               	movwi [0]fsr1
  6092  0D87  3FC1               	movwi [1]fsr1
  6093                           
  6094                           ;RDM_Read.c: 94: RDM_TXSTART();
  6095  0D88  2D9D               	ljmp	l2799
  6096  0D89                     l1136:	
  6097                           ;RDM_Read.c: 96: case 0x0003:
  6098                           
  6099                           ;RDM_Read.c: 95: break;
  6100                           
  6101                           
  6102                           ;RDM_Read.c: 97: DMX_Flags.RDMmute = 0;
  6103  0D89  1177               	bcf	_DMX_Flags+1,2	;volatile
  6104  0D8A  2D83               	goto	L1
  6105  0D8B                     l4049:	
  6106                           ;RDM_Read.c: 98: TX_RDM_Data.PDL=2;
  6107                           
  6108                           
  6109                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6110                           ; Switch size 1, requested type "space"
  6111                           ; Number of cases is 1, Range of values is 0 to 0
  6112                           ; switch strategies available:
  6113                           ; Name         Instructions Cycles
  6114                           ; simple_byte            4     3 (average)
  6115                           ; direct_byte            8     6 (fixed)
  6116                           ; jumptable            260     6 (fixed)
  6117                           ;	Chosen strategy is simple_byte
  6118  0D8B  0022               	movlb	2	; select bank2
  6119  0D8C  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6120  0D8D  3A00               	xorlw	0	; case 0
  6121  0D8E  1903               	skipnz
  6122  0D8F  2D91               	goto	l4671
  6123  0D90  2D9C               	goto	l1138
  6124  0D91                     l4671:	
  6125                           
  6126                           ; Switch size 1, requested type "space"
  6127                           ; Number of cases is 3, Range of values is 1 to 3
  6128                           ; switch strategies available:
  6129                           ; Name         Instructions Cycles
  6130                           ; simple_byte           10     6 (average)
  6131                           ; direct_byte           15     9 (fixed)
  6132                           ; jumptable            263     9 (fixed)
  6133                           ;	Chosen strategy is simple_byte
  6134  0D91  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6135  0D92  3A01               	xorlw	1	; case 1
  6136  0D93  1903               	skipnz
  6137  0D94  2D2C               	goto	l1127
  6138  0D95  3A03               	xorlw	3	; case 2
  6139  0D96  1903               	skipnz
  6140  0D97  2D82               	goto	l1135
  6141  0D98  3A01               	xorlw	1	; case 3
  6142  0D99  1903               	skipnz
  6143  0D9A  2D89               	goto	l1136
  6144  0D9B  2D9C               	goto	l1138
  6145  0D9C                     l1138:	
  6146  0D9C  0008               	return
  6147  0D9D                     __end_of_RDM_discovery_CC:	
  6148  0D9D                     __ptext6:	
  6149 ;; *************** function _RDM_TXSTART *****************
  6150 ;; Defined at:
  6151 ;;		line 107 in file "RDM_Read.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;		None
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;		None
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 1C/2
  6162 ;;		On exit  : 1F/1
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6165 ;;      Params:         0       0       0       0       0       0       0       0
  6166 ;;      Locals:         0       0       0       0       0       0       0       0
  6167 ;;      Temps:          1       0       0       0       0       0       0       0
  6168 ;;      Totals:         1       0       0       0       0       0       0       0
  6169 ;;Total ram usage:        1 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    3
  6172 ;; This function calls:
  6173 ;;		_RDM_get_checkSum
  6174 ;;		_RDM_tx_TimerBreak
  6175 ;;		_TX_RDM_Response_Set
  6176 ;; This function is called by:
  6177 ;;		_RDM_GET_CC
  6178 ;;		_RDM_SET_CC
  6179 ;;		_RDM_discovery_CC
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           
  6184                           ;psect for function _RDM_TXSTART
  6185  0D9D                     _RDM_TXSTART:	
  6186  0D9D                     l2799:	
  6187                           ;incstack = 0
  6188                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6189                           
  6190                           
  6191                           ;RDM_Read.c: 108: TXREG = 0xCC;
  6192  0D9D  30CC               	movlw	204
  6193  0D9E  0023               	movlb	3	; select bank3
  6194  0D9F  009A               	movwf	26	;volatile
  6195                           
  6196                           ;RDM_Read.c: 109: TX_RDM_Response_Set();
  6197  0DA0  25BC  318D         	fcall	_TX_RDM_Response_Set
  6198                           
  6199                           ;RDM_Read.c: 110: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  6200  0DA2  304C               	movlw	low _TX_RDM_Data
  6201  0DA3  0086               	movwf	6
  6202  0DA4  3001               	movlw	high _TX_RDM_Data
  6203  0DA5  275D  318D         	fcall	PL80	;call to abstracted procedure
  6204  0DA7  00F4               	movwf	??_RDM_TXSTART
  6205  0DA8                     u1400:	
  6206  0DA8  0016               	moviw fsr1++
  6207  0DA9  001A               	movwi fsr0++
  6208  0DAA  0BF4               	decfsz	??_RDM_TXSTART,f
  6209  0DAB  2DA8               	goto	u1400
  6210  0DAC  3028               	movlw	40
  6211  0DAD  0020               	movlb	0	; select bank0
  6212  0DAE  00B8               	movwf	RDM_get_checkSum@len
  6213  0DAF  2652  318D         	fcall	_RDM_get_checkSum
  6214  0DB1  0821               	movf	?_RDM_get_checkSum+1,w
  6215  0DB2  0022               	movlb	2	; select bank2
  6216  0DB3  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  6217  0DB4  0020               	movlb	0	; select bank0
  6218  0DB5  0820               	movf	?_RDM_get_checkSum,w
  6219  0DB6  0022               	movlb	2	; select bank2
  6220  0DB7  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  6221                           
  6222                           ;RDM_Read.c: 111: TxState = TX_START;
  6223  0DB8  3001               	movlw	1
  6224  0DB9  0021               	movlb	1	; select bank1
  6225  0DBA  00E1               	movwf	_TxState^(0+128)	;volatile
  6226                           
  6227                           ;RDM_Read.c: 112: RDM_tx_TimerBreak();
  6228  0DBB  2DDB               	ljmp	l2751
  6229  0DBC                     __end_of_RDM_TXSTART:	
  6230  0DBC                     __ptext7:	
  6231 ;; *************** function _TX_RDM_Response_Set *****************
  6232 ;; Defined at:
  6233 ;;		line 115 in file "RDM_Read.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;		None
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;		None
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6242 ;; Tracked objects:
  6243 ;;		On entry : 1F/3
  6244 ;;		On exit  : 1F/2
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6247 ;;      Params:         0       0       0       0       0       0       0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0
  6250 ;;      Totals:         0       0       0       0       0       0       0       0
  6251 ;;Total ram usage:        0 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    2
  6254 ;; This function calls:
  6255 ;;		Nothing
  6256 ;; This function is called by:
  6257 ;;		_RDM_TXSTART
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           
  6262                           ;psect for function _TX_RDM_Response_Set
  6263  0DBC                     _TX_RDM_Response_Set:	
  6264                           
  6265                           ;RDM_Read.c: 116: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  6269  0DBC  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  6270  0DBD  0086               	movwf	6
  6271  0DBE  3001               	movlw	1	; select bank2/3
  6272  0DBF  0087               	movwf	7
  6273  0DC0  3F40               	moviw [0]fsr1
  6274  0DC1  0022               	movlb	2	; select bank2
  6275  0DC2  00DD               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
  6276  0DC3  3F41               	moviw [1]fsr1
  6277  0DC4  00DE               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
  6278  0DC5  3F42               	moviw [2]fsr1
  6279  0DC6  00DF               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
  6280  0DC7  3F43               	moviw [3]fsr1
  6281  0DC8  00E0               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
  6282                           
  6283                           ;RDM_Read.c: 117: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  6284  0DC9  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  6285  0DCA  00E2               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
  6286  0DCB  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  6287  0DCC  00E1               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
  6288                           
  6289                           ;RDM_Read.c: 118: TX_RDM_Data.TN=RX_RDM_Data.TN;
  6290  0DCD  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  6291  0DCE  00D6               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
  6292                           
  6293                           ;RDM_Read.c: 119: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  6294  0DCF  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6295  0DD0  3E01               	addlw	1
  6296  0DD1  00D1               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
  6297                           
  6298                           ;RDM_Read.c: 120: TX_RDM_Data.PID=RX_RDM_Data.PID;
  6299  0DD2  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6300  0DD3  00D0               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
  6301  0DD4  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6302  0DD5  00CF               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
  6303                           
  6304                           ;RDM_Read.c: 121: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  6305  0DD6  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  6306  0DD7  3E18               	addlw	24
  6307  0DD8  00E3               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
  6308                           
  6309                           ;RDM_Read.c: 122: TX_RDM_Data.PORT=0x00;
  6310  0DD9  01D5               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
  6311  0DDA  0008               	return
  6312  0DDB                     __end_of_TX_RDM_Response_Set:	
  6313  0DDB                     __ptext8:	
  6314 ;; *************** function _RDM_tx_TimerBreak *****************
  6315 ;; Defined at:
  6316 ;;		line 194 in file "RDM.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg
  6325 ;; Tracked objects:
  6326 ;;		On entry : 1F/1
  6327 ;;		On exit  : 1F/1
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6330 ;;      Params:         0       0       0       0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    2
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_RDM_TXSTART
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _RDM_tx_TimerBreak
  6346  0DDB                     _RDM_tx_TimerBreak:	
  6347  0DDB                     l2751:	
  6348                           ;incstack = 0
  6349                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  6350                           
  6351                           
  6352                           ;RDM.c: 195: TMR1 = 0xFFA5;
  6353  0DDB  30FF               	movlw	255
  6354  0DDC  0020               	movlb	0	; select bank0
  6355  0DDD  0097               	movwf	23	;volatile
  6356  0DDE  30A5               	movlw	165
  6357  0DDF  0096               	movwf	22	;volatile
  6358                           
  6359                           ;RDM.c: 196: TimerState = TIMER_BREAK;
  6360  0DE0  3001               	movlw	1
  6361  0DE1  0021               	movlb	1	; select bank1
  6362  0DE2  00DF               	movwf	_TimerState^(0+128)	;volatile
  6363                           
  6364                           ;RDM.c: 197: LATC4 = 0;
  6365  0DE3  0022               	movlb	2	; select bank2
  6366  0DE4  120E               	bcf	14,4	;volatile
  6367                           
  6368                           ;RDM.c: 198: LATC3 = 1;
  6369  0DE5  158E               	bsf	14,3	;volatile
  6370                           
  6371                           ;RDM.c: 199: TX_PD_Flag=1;
  6372  0DE6  0021               	movlb	1	; select bank1
  6373  0DE7  00CC               	movwf	_TX_PD_Flag^(0+128)	;volatile
  6374  0DE8  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  6375                           
  6376                           ;RDM.c: 200: RCIE = 0;
  6377  0DE9  1291               	bcf	17,5	;volatile
  6378  0DEA  0008               	return
  6379  0DEB                     __end_of_RDM_tx_TimerBreak:	
  6380  0DEB                     __ptext2:	
  6381 ;; *************** function _RDM_rx_loop *****************
  6382 ;; Defined at:
  6383 ;;		line 96 in file "RDM.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  2  132[None  ] int 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 1F/1
  6394 ;;		On exit  : 1C/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6397 ;;      Params:         0       0       0       0       0       0       0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0
  6399 ;;      Temps:          1       0       0       0       0       0       0       0
  6400 ;;      Totals:         1       0       0       0       0       0       0       0
  6401 ;;Total ram usage:        1 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		_RDM_GET_CC
  6406 ;;		_RDM_SET_CC
  6407 ;;		_RDM_discovery_CC
  6408 ;;		_RDM_get_checkSum
  6409 ;; This function is called by:
  6410 ;;		_main
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _RDM_rx_loop
  6416  0DEB                     _RDM_rx_loop:	
  6417                           
  6418                           ;RDM.c: 97: if (DMX_Flags.RDMNew == 1) {
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6422  0DEB  1F76               	btfss	_DMX_Flags,6	;volatile
  6423  0DEC  0008               	return
  6424                           
  6425                           ;RDM.c: 98: DMX_Flags.RDMNew = 0;
  6426  0DED  1376               	bcf	_DMX_Flags,6	;volatile
  6427                           
  6428                           ;RDM.c: 99: DMX_Flags.RDMcheck = 0;
  6429  0DEE  30FC               	movlw	-4
  6430  0DEF  05F7               	andwf	_DMX_Flags+1,f	;volatile
  6431                           
  6432                           ;RDM.c: 101: if ((RX_RDM_Data.DUID.M == 0x4D52 || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RD
      +                          M_Data.DUID.ID == 0x17C31092 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  6433  0DF0  3052               	movlw	82
  6434  0DF1  0022               	movlb	2	; select bank2
  6435  0DF2  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6436  0DF3  304D               	movlw	77
  6437  0DF4  1903               	skipnz
  6438  0DF5  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6439  0DF6  1903               	btfsc	3,2
  6440  0DF7  2DFD               	goto	l4489
  6441  0DF8  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  6442  0DF9  2E19               	goto	l740
  6443  0DFA  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  6444  0DFB  1D03               	btfss	3,2
  6445  0DFC  2E19               	goto	l740
  6446  0DFD                     l4489:	
  6447  0DFD  3092               	movlw	146
  6448  0DFE  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6449  0DFF  3010               	movlw	16
  6450  0E00  1903               	skipnz
  6451  0E01  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6452  0E02  30C3               	movlw	195
  6453  0E03  1903               	skipnz
  6454  0E04  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6455  0E05  3017               	movlw	23
  6456  0E06  1903               	skipnz
  6457  0E07  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6458  0E08  1903               	btfsc	3,2
  6459  0E09  2E15               	goto	l4493
  6460  0E0A  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  6461  0E0B  2E19               	goto	l740
  6462  0E0C  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  6463  0E0D  1D03               	skipz
  6464  0E0E  2E19               	goto	l740
  6465  0E0F  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  6466  0E10  1D03               	skipz
  6467  0E11  2E19               	goto	l740
  6468  0E12  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  6469  0E13  1D03               	btfss	3,2
  6470  0E14  2E19               	goto	l740
  6471  0E15                     l4493:	
  6472                           
  6473                           ;RDM.c: 102: DMX_Flags.RDMcheck = 1;
  6474  0E15  0877               	movf	_DMX_Flags+1,w	;volatile
  6475  0E16  39FC               	andlw	-4
  6476  0E17  3801               	iorlw	1
  6477  0E18  00F7               	movwf	_DMX_Flags+1	;volatile
  6478  0E19                     l740:	
  6479                           
  6480                           ;RDM.c: 103: }
  6481                           ;RDM.c: 105: if (DMX_Flags.RDMcheck == 1 && RDM_get_checkSum(RX_RDM_Data,100) == RX_RDM_
      +                          Data.CS) {
  6482  0E19  0877               	movf	_DMX_Flags+1,w	;volatile
  6483  0E1A  3903               	andlw	3
  6484  0E1B  3A01               	xorlw	1
  6485  0E1C  1D03               	skipz
  6486  0E1D  2E3D               	goto	l745
  6487  0E1E  3020               	movlw	low _RX_RDM_Data
  6488  0E1F  0086               	movwf	6
  6489  0E20  3001               	movlw	high _RX_RDM_Data
  6490  0E21  275D  318D         	fcall	PL80	;call to abstracted procedure
  6491  0E23  00F5               	movwf	??_RDM_rx_loop
  6492  0E24                     u3350:	
  6493  0E24  0016               	moviw fsr1++
  6494  0E25  001A               	movwi fsr0++
  6495  0E26  0BF5               	decfsz	??_RDM_rx_loop,f
  6496  0E27  2E24               	goto	u3350
  6497  0E28  3064               	movlw	100
  6498  0E29  0020               	movlb	0	; select bank0
  6499  0E2A  00B8               	movwf	RDM_get_checkSum@len
  6500  0E2B  2652  318D         	fcall	_RDM_get_checkSum
  6501  0E2D  0022               	movlb	2	; select bank2
  6502  0E2E  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  6503  0E2F  0020               	movlb	0	; select bank0
  6504  0E30  0621               	xorwf	?_RDM_get_checkSum+1,w
  6505  0E31  1D03               	skipz
  6506  0E32  2E37               	goto	u3365
  6507  0E33  0022               	movlb	2	; select bank2
  6508  0E34  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  6509  0E35  0020               	movlb	0	; select bank0
  6510  0E36  0620               	xorwf	?_RDM_get_checkSum,w
  6511  0E37                     u3365:	
  6512  0E37  1D03               	skipz
  6513  0E38  2E3D               	goto	l745
  6514                           
  6515                           ;RDM.c: 106: DMX_Flags.RDMcheck = 2;
  6516  0E39  0877               	movf	_DMX_Flags+1,w	;volatile
  6517  0E3A  39FC               	andlw	-4
  6518  0E3B  3802               	iorlw	2
  6519  0E3C  00F7               	movwf	_DMX_Flags+1	;volatile
  6520  0E3D                     l745:	
  6521                           
  6522                           ;RDM.c: 107: }
  6523                           ;RDM.c: 109: if (DMX_Flags.RDMcheck == 2) {
  6524  0E3D  0877               	movf	_DMX_Flags+1,w	;volatile
  6525  0E3E  3903               	andlw	3
  6526  0E3F  3A02               	xorlw	2
  6527  0E40  1D03               	skipz
  6528  0E41  0008               	return
  6529                           
  6530                           ;RDM.c: 119: break;
  6531  0E42  0022               	movlb	2	; select bank2
  6532  0E43  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  6533                           
  6534                           ; Switch size 1, requested type "space"
  6535                           ; Number of cases is 3, Range of values is 16 to 48
  6536                           ; switch strategies available:
  6537                           ; Name         Instructions Cycles
  6538                           ; simple_byte           10     6 (average)
  6539                           ; direct_byte           75     9 (fixed)
  6540                           ; jumptable            263     9 (fixed)
  6541                           ;	Chosen strategy is simple_byte
  6542  0E44  3A10               	xorlw	16	; case 16
  6543  0E45  1903               	skipnz
  6544  0E46  2E4E               	goto	l4501
  6545  0E47  3A30               	xorlw	48	; case 32
  6546  0E48  1903               	skipnz
  6547  0E49  2E4F               	goto	l4503
  6548  0E4A  3A10               	xorlw	16	; case 48
  6549  0E4B  1903               	skipnz
  6550  0E4C  2E50               	goto	l4505
  6551  0E4D  2E51               	goto	l752
  6552  0E4E                     l4501:	
  6553                           
  6554                           ;RDM.c: 112: RDM_discovery_CC();
  6555  0E4E  2D2B               	ljmp	l3989
  6556  0E4F                     l4503:	
  6557                           ;RDM.c: 113: break;
  6558                           
  6559                           
  6560                           ;RDM.c: 115: RDM_GET_CC();
  6561  0E4F  2E83               	ljmp	l4057
  6562  0E50                     l4505:	
  6563                           ;RDM.c: 116: break;
  6564                           
  6565                           
  6566                           ;RDM.c: 118: RDM_SET_CC();
  6567  0E50  2EF6               	ljmp	l2999
  6568  0E51                     l752:	
  6569  0E51  0008               	return
  6570  0E52                     __end_of_RDM_rx_loop:	
  6571  0E52                     __ptext9:	
  6572 ;; *************** function _RDM_get_checkSum *****************
  6573 ;; Defined at:
  6574 ;;		line 126 in file "RDM_Read.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  Data           24    0[BANK0 ] struct .
  6577 ;;  len             1   24[BANK0 ] unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  2    0[BANK0 ] unsigned int 
  6582 ;; Registers used:
  6583 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6584 ;; Tracked objects:
  6585 ;;		On entry : 1F/0
  6586 ;;		On exit  : 1F/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6589 ;;      Params:         0      25       0       0       0       0       0       0
  6590 ;;      Locals:         0       0       0       0       0       0       0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0
  6592 ;;      Totals:         0      25       0       0       0       0       0       0
  6593 ;;Total ram usage:       25 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    2
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		_RDM_rx_loop
  6600 ;;		_RDM_TXSTART
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _RDM_get_checkSum
  6606  0E52                     _RDM_get_checkSum:	
  6607                           
  6608                           ;RDM_Read.c: 127: checkSum = 0x00CD;
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  6612  0E52  30CD               	movlw	205
  6613  0E53  0021               	movlb	1	; select bank1
  6614  0E54  00CA               	movwf	_checkSum^(0+128)
  6615  0E55  3017               	movlw	23
  6616  0E56  01CB               	clrf	(_checkSum+1)^(0+128)
  6617                           
  6618                           ;RDM_Read.c: 128: PackCount = 23;
  6619  0E57  00F8               	movwf	_PackCount	;volatile
  6620  0E58                     l2737:	
  6621                           ;RDM_Read.c: 129: while (PackCount > 1) {
  6622                           
  6623  0E58  3002               	movlw	2
  6624  0E59  0278               	subwf	_PackCount,w	;volatile
  6625  0E5A  1C03               	btfss	3,0
  6626  0E5B  2E66               	goto	l2739
  6627                           
  6628                           ;RDM_Read.c: 130: checkSum += Data.value[PackCount];
  6629  0E5C  0878               	movf	_PackCount,w
  6630  0E5D  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  6631  0E5E  0086               	movwf	6
  6632  0E5F  0187               	clrf	7
  6633  0E60  0801               	movf	1,w
  6634  0E61  07CA               	addwf	_checkSum^(0+128),f
  6635  0E62  1803               	skipnc
  6636  0E63  0ACB               	incf	(_checkSum+1)^(0+128),f
  6637                           
  6638                           ;RDM_Read.c: 131: PackCount--;
  6639  0E64  03F8               	decf	_PackCount,f	;volatile
  6640  0E65  2E58               	goto	l2737
  6641  0E66                     l2739:	
  6642                           
  6643                           ;RDM_Read.c: 132: }
  6644                           ;RDM_Read.c: 133: PackCount = len-1;
  6645  0E66  0020               	movlb	0	; select bank0
  6646  0E67  0838               	movf	RDM_get_checkSum@len,w
  6647  0E68  3EFF               	addlw	255
  6648  0E69  00F8               	movwf	_PackCount	;volatile
  6649                           
  6650                           ;RDM_Read.c: 134: PDCount = len - Data.PDL;
  6651  0E6A  0822               	movf	RDM_get_checkSum@Data+2,w
  6652  0E6B  0238               	subwf	RDM_get_checkSum@len,w
  6653  0E6C  00F9               	movwf	_PDCount
  6654  0E6D                     l2745:	
  6655                           ;RDM_Read.c: 135: while (PackCount >= PDCount) {
  6656                           
  6657  0E6D  0879               	movf	_PDCount,w
  6658  0E6E  0278               	subwf	_PackCount,w	;volatile
  6659  0E6F  1C03               	btfss	3,0
  6660  0E70  2E7A               	goto	l2747
  6661                           
  6662                           ;RDM_Read.c: 136: checkSum += PD.u8[PDCount];
  6663  0E71  0879               	movf	_PDCount,w
  6664  0E72  27F9  318D         	fcall	PL74	;call to abstracted procedure
  6665  0E74  0021               	movlb	1	; select bank1
  6666  0E75  07CA               	addwf	_checkSum^(0+128),f
  6667  0E76  1803               	skipnc
  6668  0E77  0ACB               	incf	(_checkSum+1)^(0+128),f
  6669                           
  6670                           ;RDM_Read.c: 137: PDCount++;
  6671  0E78  0AF9               	incf	_PDCount,f
  6672  0E79  2E6D               	goto	l2745
  6673  0E7A                     l2747:	
  6674                           
  6675                           ;RDM_Read.c: 138: }
  6676                           ;RDM_Read.c: 139: return checkSum;
  6677  0E7A  0021               	movlb	1	; select bank1
  6678  0E7B  084B               	movf	(_checkSum+1)^(0+128),w
  6679  0E7C  0020               	movlb	0	; select bank0
  6680  0E7D  00A1               	movwf	?_RDM_get_checkSum+1
  6681  0E7E  0021               	movlb	1	; select bank1
  6682  0E7F  084A               	movf	_checkSum^(0+128),w
  6683  0E80  0020               	movlb	0	; select bank0
  6684  0E81  00A0               	movwf	?_RDM_get_checkSum
  6685  0E82  0008               	return
  6686  0E83                     __end_of_RDM_get_checkSum:	
  6687  0E83                     __ptext5:	
  6688 ;; *************** function _RDM_GET_CC *****************
  6689 ;; Defined at:
  6690 ;;		line 15 in file "RDM_Read.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6699 ;; Tracked objects:
  6700 ;;		On entry : 1C/2
  6701 ;;		On exit  : 1F/1
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6704 ;;      Params:         0       0       0       0       0       0       0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0
  6706 ;;      Temps:          0       2       0       0       0       0       0       0
  6707 ;;      Totals:         0       2       0       0       0       0       0       0
  6708 ;;Total ram usage:        2 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    4
  6711 ;; This function calls:
  6712 ;;		_RDM_TXSTART
  6713 ;; This function is called by:
  6714 ;;		_RDM_rx_loop
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _RDM_GET_CC
  6720  0E83                     _RDM_GET_CC:	
  6721  0E83                     l4057:	
  6722                           ;incstack = 0
  6723                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6724                           
  6725                           
  6726                           ;RDM_Read.c: 16: switch (RX_RDM_Data.PID){
  6727  0E83  2EDF               	goto	l4091
  6728  0E84                     l4059:	
  6729                           
  6730                           ;RDM_Read.c: 18: TX_RDM_Data.PDL=1;
  6731  0E84  3001               	movlw	1
  6732  0E85  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6733                           
  6734                           ;RDM_Read.c: 19: PD.u8[40-1] =DMX_Flags.RDMidentify;
  6735  0E86  0C77               	rrf	_DMX_Flags+1,w	;volatile
  6736  0E87  0020               	movlb	0	; select bank0
  6737  0E88  00B9               	movwf	??_RDM_GET_CC
  6738  0E89  0CB9               	rrf	??_RDM_GET_CC,f
  6739  0E8A  0C39               	rrf	??_RDM_GET_CC,w
  6740  0E8B  3901               	andlw	1
  6741  0E8C  00BA               	movwf	??_RDM_GET_CC+1
  6742  0E8D  30B3               	movlw	179
  6743  0E8E  0086               	movwf	6
  6744  0E8F  3021               	movlw	33
  6745  0E90  0087               	movwf	7
  6746  0E91  083A               	movf	??_RDM_GET_CC+1,w
  6747  0E92  0081               	movwf	1
  6748                           
  6749                           ;RDM_Read.c: 20: break;
  6750  0E93  2EF5               	goto	l4093
  6751  0E94                     l4063:	
  6752                           
  6753                           ;RDM_Read.c: 22: TX_RDM_Data.PDL=0x13;
  6754  0E94  3013               	movlw	19
  6755  0E95  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6756                           
  6757                           ;RDM_Read.c: 23: PD.u16[20-1]=0x0100;
  6758  0E96  0020               	movlb	0	; select bank0
  6759  0E97  3001               	movlw	1
  6760  0E98  01B9               	clrf	??_RDM_GET_CC
  6761  0E99  00BA               	movwf	??_RDM_GET_CC+1
  6762  0E9A  30B2               	movlw	178
  6763  0E9B  0086               	movwf	6
  6764  0E9C  3021               	movlw	33
  6765  0E9D  0087               	movwf	7
  6766  0E9E  0839               	movf	??_RDM_GET_CC,w
  6767  0E9F  3FC0               	movwi [0]fsr1
  6768  0EA0  083A               	movf	??_RDM_GET_CC+1,w
  6769  0EA1  3FC1               	movwi [1]fsr1
  6770                           
  6771                           ;RDM_Read.c: 24: PD.u16[20-2]=0x0080;
  6772  0EA2  3080               	movlw	128
  6773  0EA3  00B9               	movwf	??_RDM_GET_CC
  6774  0EA4  30B0               	movlw	176
  6775  0EA5  274F  318D         	fcall	PL64	;call to abstracted procedure
  6776                           
  6777                           ;RDM_Read.c: 25: PD.u16[20-3]=0x0004;
  6778  0EA7  3004               	movlw	4
  6779  0EA8  00B9               	movwf	??_RDM_GET_CC
  6780  0EA9  30AE               	movlw	174
  6781  0EAA  274F  318D         	fcall	PL64	;call to abstracted procedure
  6782                           
  6783                           ;RDM_Read.c: 26: PD_ID=&PD.u8[40-10];
  6784  0EAC  3021               	movlw	33
  6785  0EAD  0021               	movlb	1	; select bank1
  6786  0EAE  00D1               	movwf	(_PD_ID+1)^(0+128)
  6787  0EAF  30AA               	movlw	170
  6788  0EB0  00D0               	movwf	_PD_ID^(0+128)
  6789                           
  6790                           ;RDM_Read.c: 27: *PD_ID=1;
  6791  0EB1  0086               	movwf	6
  6792  0EB2  0851               	movf	(_PD_ID+1)^(0+128),w
  6793  0EB3  0087               	movwf	7
  6794  0EB4  3001               	movlw	1
  6795  0EB5  3FC0               	movwi [0]fsr1
  6796  0EB6  3000               	movlw	0
  6797  0EB7  3FC1               	movwi [1]fsr1
  6798  0EB8  3FC2               	movwi [2]fsr1
  6799  0EB9  3FC3               	movwi [3]fsr1
  6800                           
  6801                           ;RDM_Read.c: 28: PD.u16[20-6]=0x04;
  6802  0EBA  3004               	movlw	4
  6803  0EBB  0020               	movlb	0	; select bank0
  6804  0EBC  2763  318D         	fcall	PL84	;call to abstracted procedure
  6805  0EBE  315C               	addfsr 1,28
  6806  0EBF  0839               	movf	??_RDM_GET_CC,w
  6807  0EC0  3FC0               	movwi [0]fsr1
  6808  0EC1  083A               	movf	??_RDM_GET_CC+1,w
  6809  0EC2  3FC1               	movwi [1]fsr1
  6810                           
  6811                           ;RDM_Read.c: 29: PD.u16[20-7]=0x01;
  6812  0EC3  3001               	movlw	1
  6813  0EC4  2763  318D         	fcall	PL84	;call to abstracted procedure
  6814  0EC6  315A               	addfsr 1,26
  6815  0EC7  0839               	movf	??_RDM_GET_CC,w
  6816  0EC8  3FC0               	movwi [0]fsr1
  6817  0EC9  083A               	movf	??_RDM_GET_CC+1,w
  6818                           
  6819                           ;RDM_Read.c: 30: PD.u16[20-8]=DMX_Address;
  6820  0ECA  2749  318D         	fcall	PL56	;call to abstracted procedure
  6821  0ECC  3158               	addfsr 1,24
  6822  0ECD  276A  318D         	fcall	PL94	;call to abstracted procedure
  6823                           
  6824                           ;RDM_Read.c: 31: PD.u16[20-9]=0;
  6825  0ECF  2749  318D         	fcall	PL56	;call to abstracted procedure
  6826  0ED1  3000               	movlw	0
  6827  0ED2  3156               	addfsr 1,22
  6828  0ED3  3FC0               	movwi [0]fsr1
  6829                           
  6830                           ;RDM_Read.c: 32: PD.u8[40-19]=0;
  6831  0ED4  2749  318D         	fcall	PL56	;call to abstracted procedure
  6832  0ED6  3155               	addfsr 1,21
  6833  0ED7  0181               	clrf	1
  6834                           
  6835                           ;RDM_Read.c: 33: break;
  6836  0ED8  2EF5               	goto	l4093
  6837  0ED9                     l4085:	
  6838                           
  6839                           ;RDM_Read.c: 35: TX_RDM_Data.PDL=2;
  6840                           
  6841                           ;RDM_Read.c: 37: PD.u16[20-1]=DMX_Address;
  6842  0ED9  2756  318D         	fcall	PL72	;call to abstracted procedure
  6843  0EDB  276A  318D         	fcall	PL94	;call to abstracted procedure
  6844  0EDD  3FC1               	movwi [1]fsr1
  6845                           
  6846                           ;RDM_Read.c: 38: break;
  6847  0EDE  2EF5               	goto	l4093
  6848  0EDF                     l4091:	
  6849                           
  6850                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6851                           ; Switch size 1, requested type "space"
  6852                           ; Number of cases is 2, Range of values is 0 to 16
  6853                           ; switch strategies available:
  6854                           ; Name         Instructions Cycles
  6855                           ; simple_byte            7     4 (average)
  6856                           ; direct_byte           40     6 (fixed)
  6857                           ; jumptable            260     6 (fixed)
  6858                           ;	Chosen strategy is simple_byte
  6859  0EDF  0022               	movlb	2	; select bank2
  6860  0EE0  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6861  0EE1  3A00               	xorlw	0	; case 0
  6862  0EE2  1903               	skipnz
  6863  0EE3  2EE8               	goto	l4675
  6864  0EE4  3A10               	xorlw	16	; case 16
  6865  0EE5  1903               	skipnz
  6866  0EE6  2EF0               	goto	l4677
  6867  0EE7  2EF5               	goto	l4093
  6868  0EE8                     l4675:	
  6869                           
  6870                           ; Switch size 1, requested type "space"
  6871                           ; Number of cases is 2, Range of values is 96 to 240
  6872                           ; switch strategies available:
  6873                           ; Name         Instructions Cycles
  6874                           ; simple_byte            7     4 (average)
  6875                           ; jumptable            263     9 (fixed)
  6876                           ;	Chosen strategy is simple_byte
  6877  0EE8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6878  0EE9  3A60               	xorlw	96	; case 96
  6879  0EEA  1903               	skipnz
  6880  0EEB  2E94               	goto	l4063
  6881  0EEC  3A90               	xorlw	144	; case 240
  6882  0EED  1903               	skipnz
  6883  0EEE  2ED9               	goto	l4085
  6884  0EEF  2EF5               	goto	l4093
  6885  0EF0                     l4677:	
  6886                           
  6887                           ; Switch size 1, requested type "space"
  6888                           ; Number of cases is 1, Range of values is 0 to 0
  6889                           ; switch strategies available:
  6890                           ; Name         Instructions Cycles
  6891                           ; simple_byte            4     3 (average)
  6892                           ; direct_byte            8     6 (fixed)
  6893                           ; jumptable            260     6 (fixed)
  6894                           ;	Chosen strategy is simple_byte
  6895  0EF0  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6896  0EF1  3A00               	xorlw	0	; case 0
  6897  0EF2  1903               	skipnz
  6898  0EF3  2E84               	goto	l4059
  6899  0EF4  2EF5               	goto	l4093
  6900  0EF5                     l4093:	
  6901                           
  6902                           ;RDM_Read.c: 40: RDM_TXSTART();
  6903  0EF5  2D9D               	ljmp	l2799
  6904  0EF6                     __end_of_RDM_GET_CC:	
  6905  0EF6                     __ptext4:	
  6906 ;; *************** function _RDM_SET_CC *****************
  6907 ;; Defined at:
  6908 ;;		line 43 in file "RDM_Read.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      void 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 1C/2
  6919 ;;		On exit  : 1F/1
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6922 ;;      Params:         0       0       0       0       0       0       0       0
  6923 ;;      Locals:         0       0       0       0       0       0       0       0
  6924 ;;      Temps:          0       0       0       0       0       0       0       0
  6925 ;;      Totals:         0       0       0       0       0       0       0       0
  6926 ;;Total ram usage:        0 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    4
  6929 ;; This function calls:
  6930 ;;		_RDM_TXSTART
  6931 ;; This function is called by:
  6932 ;;		_RDM_rx_loop
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _RDM_SET_CC
  6938  0EF6                     _RDM_SET_CC:	
  6939  0EF6                     l2999:	
  6940                           ;incstack = 0
  6941                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6942                           
  6943                           
  6944                           ;RDM_Read.c: 44: switch (RX_RDM_Data.PID){
  6945  0EF6  2F03               	goto	l3007
  6946  0EF7                     l3001:	
  6947                           
  6948                           ;RDM_Read.c: 47: DMX_Address=PD.u16[50-1];
  6949  0EF7  30EE               	movlw	238
  6950  0EF8  0086               	movwf	6
  6951  0EF9  3021               	movlw	33
  6952  0EFA  0087               	movwf	7
  6953  0EFB  3F40               	moviw [0]fsr1
  6954  0EFC  0021               	movlb	1	; select bank1
  6955  0EFD  00ED               	movwf	_DMX_Address^(0+128)
  6956  0EFE  3F41               	moviw [1]fsr1
  6957  0EFF  00EE               	movwf	(_DMX_Address+1)^(0+128)
  6958                           
  6959                           ;RDM_Read.c: 49: TX_RDM_Data.PDL=0;
  6960  0F00  0022               	movlb	2	; select bank2
  6961  0F01  01CE               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  6962                           
  6963                           ;RDM_Read.c: 51: break;
  6964  0F02  2F0E               	goto	l3009
  6965  0F03                     l3007:	
  6966                           
  6967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6968                           ; Switch size 1, requested type "space"
  6969                           ; Number of cases is 1, Range of values is 0 to 0
  6970                           ; switch strategies available:
  6971                           ; Name         Instructions Cycles
  6972                           ; simple_byte            4     3 (average)
  6973                           ; direct_byte            8     6 (fixed)
  6974                           ; jumptable            260     6 (fixed)
  6975                           ;	Chosen strategy is simple_byte
  6976  0F03  0022               	movlb	2	; select bank2
  6977  0F04  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  6978  0F05  3A00               	xorlw	0	; case 0
  6979  0F06  1903               	skipnz
  6980  0F07  2F09               	goto	l4673
  6981  0F08  2F0E               	goto	l3009
  6982  0F09                     l4673:	
  6983                           
  6984                           ; Switch size 1, requested type "space"
  6985                           ; Number of cases is 1, Range of values is 240 to 240
  6986                           ; switch strategies available:
  6987                           ; Name         Instructions Cycles
  6988                           ; simple_byte            4     3 (average)
  6989                           ; direct_byte           11     9 (fixed)
  6990                           ; jumptable            263     9 (fixed)
  6991                           ;	Chosen strategy is simple_byte
  6992  0F09  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  6993  0F0A  3AF0               	xorlw	240	; case 240
  6994  0F0B  1903               	skipnz
  6995  0F0C  2EF7               	goto	l3001
  6996  0F0D  2F0E               	goto	l3009
  6997  0F0E                     l3009:	
  6998                           
  6999                           ;RDM_Read.c: 53: RDM_TXSTART();
  7000  0F0E  2D9D               	ljmp	l2799
  7001  0F0F                     __end_of_RDM_SET_CC:	
  7002  0F0F                     PL12:	
  7003  0F0F  0877               	movf	_DMX_Flags+1,w	;volatile
  7004  0F10  3903               	andlw	3
  7005  0F11  00B9               	movwf	??_RDM_discovery_CC
  7006  0F12  0AB9               	incf	??_RDM_discovery_CC,f
  7007  0F13  0877               	movf	_DMX_Flags+1,w	;volatile
  7008  0F14  0639               	xorwf	??_RDM_discovery_CC,w
  7009  0F15  39FC               	andlw	-4
  7010  0F16  0639               	xorwf	??_RDM_discovery_CC,w
  7011  0F17  00F7               	movwf	_DMX_Flags+1	;volatile
  7012  0F18  0021               	movlb	1	; select bank1
  7013  0F19  0852               	movf	_PD_Manu^(0+128),w
  7014  0F1A  0086               	movwf	6
  7015  0F1B  0853               	movf	(_PD_Manu+1)^(0+128),w
  7016  0F1C  0087               	movwf	7
  7017  0F1D  0016               	moviw fsr1++
  7018  0F1E  3A52               	xorlw	82
  7019  0F1F  0020               	movlb	0	; select bank0
  7020  0F20  00B9               	movwf	??_RDM_discovery_CC
  7021  0F21  0016               	moviw fsr1++
  7022  0F22  3A4D               	xorlw	77
  7023  0F23  04B9               	iorwf	??_RDM_discovery_CC,f
  7024  0F24  0008               	return
  7025  0F25                     __end_ofPL12:	
  7026  0F25                     PL28:	
  7027  0F25  0239               	subwf	??_RDM_discovery_CC,w
  7028  0F26  3F41               	moviw [1]fsr1
  7029  0F27  00B9               	movwf	??_RDM_discovery_CC
  7030  0F28  3010               	movlw	16
  7031  0F29  3B39               	subwfb	??_RDM_discovery_CC,w
  7032  0F2A  3F42               	moviw [2]fsr1
  7033  0F2B  00B9               	movwf	??_RDM_discovery_CC
  7034  0F2C  30C3               	movlw	195
  7035  0F2D  3B39               	subwfb	??_RDM_discovery_CC,w
  7036  0F2E  3F43               	moviw [3]fsr1
  7037  0F2F  00B9               	movwf	??_RDM_discovery_CC
  7038  0F30  3017               	movlw	23
  7039  0F31  3B39               	subwfb	??_RDM_discovery_CC,w
  7040  0F32  0008               	return
  7041  0F33                     __end_ofPL28:	
  7042  0F33                     PL30:	
  7043  0F33  00D0               	movwf	_PD_ID^(0+128)
  7044  0F34  0852               	movf	_PD_Manu^(0+128),w
  7045  0F35  0086               	movwf	6
  7046  0F36  0853               	movf	(_PD_Manu+1)^(0+128),w
  7047  0F37  0087               	movwf	7
  7048  0F38  3F40               	moviw [0]fsr1
  7049  0F39  0020               	movlb	0	; select bank0
  7050  0F3A  00B9               	movwf	??_RDM_discovery_CC
  7051  0F3B  3F41               	moviw [1]fsr1
  7052  0F3C  00BA               	movwf	??_RDM_discovery_CC+1
  7053  0F3D  304D               	movlw	77
  7054  0F3E  023A               	subwf	??_RDM_discovery_CC+1,w
  7055  0F3F  0008               	return
  7056  0F40                     __end_ofPL30:	
  7057  0F40                     PL42:	
  7058  0F40  0021               	movlb	1	; select bank1
  7059  0F41  0850               	movf	_PD_ID^(0+128),w
  7060  0F42  0086               	movwf	6
  7061  0F43  0851               	movf	(_PD_ID+1)^(0+128),w
  7062  0F44  0087               	movwf	7
  7063  0F45  3F40               	moviw [0]fsr1
  7064  0F46  0020               	movlb	0	; select bank0
  7065  0F47  00B9               	movwf	??_RDM_discovery_CC
  7066  0F48  0008               	return
  7067  0F49                     __end_ofPL42:	
  7068  0F49                     PL56:	
  7069  0F49  3FC1               	movwi [1]fsr1
  7070  0F4A  308C               	movlw	140
  7071  0F4B  0086               	movwf	6
  7072  0F4C  3021               	movlw	33
  7073  0F4D  0087               	movwf	7
  7074  0F4E  0008               	return
  7075  0F4F                     __end_ofPL56:	
  7076  0F4F                     PL64:	
  7077  0F4F  01BA               	clrf	??_RDM_GET_CC+1
  7078  0F50  0086               	movwf	6
  7079  0F51  0839               	movf	??_RDM_GET_CC,w
  7080  0F52  3FC0               	movwi [0]fsr1
  7081  0F53  083A               	movf	??_RDM_GET_CC+1,w
  7082  0F54  3FC1               	movwi [1]fsr1
  7083  0F55  0008               	return
  7084  0F56                     __end_ofPL64:	
  7085  0F56                     PL72:	
  7086  0F56  3002               	movlw	2
  7087  0F57  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  7088  0F58  30B2               	movlw	178
  7089  0F59  0086               	movwf	6
  7090  0F5A  3021               	movlw	33
  7091  0F5B  0087               	movwf	7
  7092  0F5C  0008               	return
  7093  0F5D                     __end_ofPL72:	
  7094  0F5D                     PL80:	
  7095  0F5D  0087               	movwf	7
  7096  0F5E  3020               	movlw	low RDM_get_checkSum@Data
  7097  0F5F  0084               	movwf	4
  7098  0F60  3000               	movlw	high RDM_get_checkSum@Data
  7099  0F61  0085               	movwf	5
  7100  0F62  3418               	retlw	24
  7101  0F63                     __end_ofPL80:	
  7102  0F63                     PL84:	
  7103  0F63  00B9               	movwf	??_RDM_GET_CC
  7104  0F64  308C               	movlw	140
  7105  0F65  01BA               	clrf	??_RDM_GET_CC+1
  7106  0F66  0086               	movwf	6
  7107  0F67  3021               	movlw	33
  7108  0F68  0087               	movwf	7
  7109  0F69  0008               	return
  7110  0F6A                     __end_ofPL84:	
  7111  0F6A                     PL94:	
  7112  0F6A  0021               	movlb	1	; select bank1
  7113  0F6B  086D               	movf	_DMX_Address^(0+128),w
  7114  0F6C  3FC0               	movwi [0]fsr1
  7115  0F6D  086E               	movf	(_DMX_Address+1)^(0+128),w
  7116  0F6E  0008               	return
  7117  0F6F                     __end_ofPL94:	
  7118  0F6F                     __ptext28:	
  7119 ;; *************** function _RDM_tx_interrupt *****************
  7120 ;; Defined at:
  7121 ;;		line 125 in file "RDM.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  2  140[None  ] int 
  7128 ;; Registers used:
  7129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 1E/0
  7132 ;;		On exit  : 1C/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7135 ;;      Params:         0       0       0       0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0
  7137 ;;      Temps:          4       0       0       0       0       0       0       0
  7138 ;;      Totals:         4       0       0       0       0       0       0       0
  7139 ;;Total ram usage:        4 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_isr
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _RDM_tx_interrupt
  7150  0F6F                     _RDM_tx_interrupt:	
  7151                           
  7152                           ;RDM.c: 126: if (TXIE && TXIF) {
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  7156  0F6F  0021               	movlb	1	; select bank1
  7157  0F70  1E11               	btfss	17,4	;volatile
  7158  0F71  0008               	return
  7159  0F72  0020               	movlb	0	; select bank0
  7160  0F73  1E11               	btfss	17,4	;volatile
  7161  0F74  0008               	return
  7162  0F75  2FDE               	goto	i1l3719
  7163  0F76                     i1l3673:	
  7164                           
  7165                           ;RDM.c: 135: if(TX_PD_Flag==1){
  7166  0F76  034C               	decf	_TX_PD_Flag^(0+128),w	;volatile
  7167  0F77  044D               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7168  0F78  1D03               	btfss	3,2
  7169  0F79  2F80               	goto	i1l3679
  7170                           
  7171                           ;RDM.c: 136: TX_PD_Flag=0;
  7172  0F7A  01CC               	clrf	_TX_PD_Flag^(0+128)	;volatile
  7173  0F7B  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7174                           
  7175                           ;RDM.c: 137: TXREG = 0xCC;
  7176  0F7C  30CC               	movlw	204
  7177  0F7D  0023               	movlb	3	; select bank3
  7178  0F7E  009A               	movwf	26	;volatile
  7179                           
  7180                           ;RDM.c: 138: }else{
  7181  0F7F  0008               	return
  7182  0F80                     i1l3679:	
  7183                           
  7184                           ;RDM.c: 139: TXREG = 0x01;
  7185  0F80  3001               	movlw	1
  7186  0F81  0023               	movlb	3	; select bank3
  7187  0F82  009A               	movwf	26	;volatile
  7188                           
  7189                           ;RDM.c: 140: TxByte = &TX_RDM_Data.value[23];
  7190  0F83  3063               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
  7191  0F84  0021               	movlb	1	; select bank1
  7192  0F85  00E2               	movwf	_TxByte^(0+128)
  7193  0F86  3002               	movlw	2
  7194                           
  7195                           ;RDM.c: 141: TxCount = 0;
  7196  0F87  01D4               	clrf	_TxCount^(0+128)
  7197  0F88  01D5               	clrf	(_TxCount+1)^(0+128)
  7198                           
  7199                           ;RDM.c: 142: TxState = TX_DATA;
  7200  0F89  00E1               	movwf	_TxState^(0+128)	;volatile
  7201  0F8A  0008               	return
  7202  0F8B                     i1l3685:	
  7203                           
  7204                           ;RDM.c: 150: if (TxCount <= 24) {
  7205  0F8B  3000               	movlw	0
  7206  0F8C  0255               	subwf	(_TxCount+1)^(0+128),w
  7207  0F8D  3019               	movlw	25
  7208  0F8E  1903               	skipnz
  7209  0F8F  0254               	subwf	_TxCount^(0+128),w
  7210  0F90  1803               	skipnc
  7211  0F91  2F96               	goto	i1l762
  7212                           
  7213                           ;RDM.c: 152: TXREG = *TxByte;
  7214                           
  7215                           ;RDM.c: 153: TxByte--;
  7216                           
  7217                           ;RDM.c: 154: TxCount++;
  7218  0F92  27EE               	fcall	PL38	;call to abstracted procedure
  7219  0F93  1903               	skipnz
  7220  0F94  0AD5               	incf	(_TxCount+1)^(0+128),f
  7221                           
  7222                           ;RDM.c: 155: }else{
  7223  0F95  0008               	return
  7224  0F96                     i1l762:	
  7225                           
  7226                           ;RDM.c: 156: RCIE = 1;
  7227  0F96  1691               	bsf	17,5	;volatile
  7228                           
  7229                           ;RDM.c: 157: LATC4 = 1;
  7230  0F97  0022               	movlb	2	; select bank2
  7231  0F98  160E               	bsf	14,4	;volatile
  7232                           
  7233                           ;RDM.c: 158: TXEN = 0;
  7234  0F99  0023               	movlb	3	; select bank3
  7235  0F9A  129E               	bcf	30,5	;volatile
  7236                           
  7237                           ;RDM.c: 159: TXIE = 0;
  7238  0F9B  0021               	movlb	1	; select bank1
  7239  0F9C  1211               	bcf	17,4	;volatile
  7240                           
  7241                           ;RDM.c: 160: LATC3=0;
  7242  0F9D  0022               	movlb	2	; select bank2
  7243  0F9E  118E               	bcf	14,3	;volatile
  7244  0F9F  0008               	return
  7245  0FA0                     i1l3693:	
  7246                           
  7247                           ;RDM.c: 164: if (TxCount <= 24) {
  7248  0FA0  3000               	movlw	0
  7249  0FA1  0255               	subwf	(_TxCount+1)^(0+128),w
  7250  0FA2  3019               	movlw	25
  7251  0FA3  1903               	skipnz
  7252  0FA4  0254               	subwf	_TxCount^(0+128),w
  7253  0FA5  1803               	skipnc
  7254  0FA6  2F96               	goto	i1l762
  7255                           
  7256                           ;RDM.c: 166: TXREG = *TxByte;
  7257                           
  7258                           ;RDM.c: 167: TxByte--;
  7259                           
  7260                           ;RDM.c: 168: TxCount++;
  7261  0FA7  27EE  318D         	fcall	PL38	;call to abstracted procedure
  7262  0FA9  1903               	skipnz
  7263  0FAA  0AD5               	incf	(_TxCount+1)^(0+128),f
  7264                           
  7265                           ;RDM.c: 169: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  7266  0FAB  3016               	movlw	22
  7267  0FAC  0654               	xorwf	_TxCount^(0+128),w
  7268  0FAD  0455               	iorwf	(_TxCount+1)^(0+128),w
  7269  0FAE  1D03               	btfss	3,2
  7270  0FAF  0008               	return
  7271  0FB0  0022               	movlb	2	; select bank2
  7272  0FB1  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7273  0FB2  1903               	btfsc	3,2
  7274  0FB3  0008               	return
  7275  0FB4  0021               	movlb	1	; select bank1
  7276  0FB5  084C               	movf	_TX_PD_Flag^(0+128),w	;volatile
  7277  0FB6  044D               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  7278  0FB7  1D03               	btfss	3,2
  7279  0FB8  0008               	return
  7280                           
  7281                           ;RDM.c: 170: TxState = TX_RDM_PD;
  7282  0FB9  3003               	movlw	3
  7283  0FBA  00E1               	movwf	_TxState^(0+128)	;volatile
  7284                           
  7285                           ;RDM.c: 171: TX_PDCount = 40-1;
  7286  0FBB  3027               	movlw	39
  7287  0FBC  00E0               	movwf	_TX_PDCount^(0+128)
  7288  0FBD  0008               	return
  7289  0FBE                     i1l3709:	
  7290                           
  7291                           ;RDM.c: 182: TXREG = PD.u8[TX_PDCount];
  7292  0FBE  0860               	movf	_TX_PDCount^(0+128),w
  7293  0FBF  27F9  318D         	fcall	PL74	;call to abstracted procedure
  7294  0FC1  0023               	movlb	3	; select bank3
  7295  0FC2  009A               	movwf	26	;volatile
  7296                           
  7297                           ;RDM.c: 183: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  7298  0FC3  01F1               	clrf	??_RDM_tx_interrupt+1
  7299  0FC4  0022               	movlb	2	; select bank2
  7300  0FC5  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7301  0FC6  3C28               	sublw	40
  7302  0FC7  00F0               	movwf	??_RDM_tx_interrupt
  7303  0FC8  1C03               	skipc
  7304  0FC9  03F1               	decf	??_RDM_tx_interrupt+1,f
  7305  0FCA  0021               	movlb	1	; select bank1
  7306  0FCB  0860               	movf	_TX_PDCount^(0+128),w
  7307  0FCC  00F2               	movwf	??_RDM_tx_interrupt+2
  7308  0FCD  01F3               	clrf	??_RDM_tx_interrupt+3
  7309  0FCE  0871               	movf	??_RDM_tx_interrupt+1,w
  7310  0FCF  0673               	xorwf	??_RDM_tx_interrupt+3,w
  7311  0FD0  1D03               	skipz
  7312  0FD1  2FD4               	goto	u258_25
  7313  0FD2  0870               	movf	??_RDM_tx_interrupt,w
  7314  0FD3  0672               	xorwf	??_RDM_tx_interrupt+2,w
  7315  0FD4                     u258_25:	
  7316  0FD4  1D03               	skipz
  7317  0FD5  2FDC               	goto	i1l3715
  7318                           
  7319                           ;RDM.c: 184: TxState = TX_DATA;
  7320  0FD6  3002               	movlw	2
  7321  0FD7  00E1               	movwf	_TxState^(0+128)	;volatile
  7322                           
  7323                           ;RDM.c: 185: TX_PD_Flag = 1;
  7324  0FD8  3001               	movlw	1
  7325  0FD9  00CC               	movwf	_TX_PD_Flag^(0+128)	;volatile
  7326  0FDA  01CD               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  7327                           
  7328                           ;RDM.c: 186: }else{
  7329  0FDB  0008               	return
  7330  0FDC                     i1l3715:	
  7331                           
  7332                           ;RDM.c: 187: TX_PDCount--;
  7333  0FDC  03E0               	decf	_TX_PDCount^(0+128),f
  7334  0FDD  0008               	return
  7335  0FDE                     i1l3719:	
  7336  0FDE  0021               	movlb	1	; select bank1
  7337  0FDF  0861               	movf	_TxState^(0+128),w	;volatile
  7338                           
  7339                           ; Switch size 1, requested type "space"
  7340                           ; Number of cases is 4, Range of values is 0 to 3
  7341                           ; switch strategies available:
  7342                           ; Name         Instructions Cycles
  7343                           ; simple_byte           13     7 (average)
  7344                           ; direct_byte           14     6 (fixed)
  7345                           ; jumptable            260     6 (fixed)
  7346                           ;	Chosen strategy is simple_byte
  7347  0FE0  3A00               	xorlw	0	; case 0
  7348  0FE1  1903               	skipnz
  7349  0FE2  2F8B               	goto	i1l3685
  7350  0FE3  3A01               	xorlw	1	; case 1
  7351  0FE4  1903               	skipnz
  7352  0FE5  2F76               	goto	i1l3673
  7353  0FE6  3A03               	xorlw	3	; case 2
  7354  0FE7  1903               	skipnz
  7355  0FE8  2FA0               	goto	i1l3693
  7356  0FE9  3A01               	xorlw	1	; case 3
  7357  0FEA  1903               	skipnz
  7358  0FEB  2FBE               	goto	i1l3709
  7359  0FEC  2FED               	goto	i1l771
  7360  0FED                     i1l771:	
  7361  0FED  0008               	return
  7362  0FEE                     __end_of_RDM_tx_interrupt:	
  7363  0FEE                     PL38:	
  7364  0FEE  0862               	movf	_TxByte^(0+128),w
  7365  0FEF  0086               	movwf	6
  7366  0FF0  3001               	movlw	1	; select bank2/3
  7367  0FF1  0087               	movwf	7
  7368  0FF2  0801               	movf	1,w
  7369  0FF3  0023               	movlb	3	; select bank3
  7370  0FF4  009A               	movwf	26	;volatile
  7371  0FF5  0021               	movlb	1	; select bank1
  7372  0FF6  03E2               	decf	_TxByte^(0+128),f
  7373  0FF7  0AD4               	incf	_TxCount^(0+128),f
  7374  0FF8  0008               	return
  7375  0FF9                     __end_ofPL38:	
  7376  0FF9                     PL74:	
  7377  0FF9  3E8C               	addlw	140
  7378  0FFA  0086               	movwf	6
  7379  0FFB  3021               	movlw	33
  7380  0FFC  0187               	clrf	7
  7381  0FFD  3D87               	addwfc	7,f
  7382  0FFE  0801               	movf	1,w
  7383  0FFF  0008               	return
  7384  1000                     __end_ofPL74:	
  7385                           
  7386                           	psect	text10
  7387  0BEC                     __ptext10:	
  7388 ;; *************** function _RDM_init *****************
  7389 ;; Defined at:
  7390 ;;		line 16 in file "RDM.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;		None
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;		None
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  2  118[None  ] int 
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : B1E/0
  7401 ;;		On exit  : 1C/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7404 ;;      Params:         0       0       0       0       0       0       0       0
  7405 ;;      Locals:         0       0       0       0       0       0       0       0
  7406 ;;      Temps:          0       2       0       0       0       0       0       0
  7407 ;;      Totals:         0       2       0       0       0       0       0       0
  7408 ;;Total ram usage:        2 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    3
  7411 ;; This function calls:
  7412 ;;		___bmul
  7413 ;; This function is called by:
  7414 ;;		_main
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _RDM_init
  7420  0BEC                     _RDM_init:	
  7421                           
  7422                           ;RDM.c: 17: TimerState = 0;
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7426  0BEC  0021               	movlb	1	; select bank1
  7427  0BED  01DF               	clrf	_TimerState^(0+128)	;volatile
  7428                           
  7429                           ;RDM.c: 19: Timer.HR_Count = 0;
  7430  0BEE  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  7431                           
  7432                           ;RDM.c: 20: Timer.MIN_Count = 0;
  7433  0BEF  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7434                           
  7435                           ;RDM.c: 21: Timer.SEC_Count = 0;
  7436  0BF0  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7437                           
  7438                           ;RDM.c: 22: Timer.flags = 0;
  7439  0BF1  01B8               	clrf	_Timer^(0+128)	;volatile
  7440                           
  7441                           ;RDM.c: 25: TMR1 = 0xFE0B;
  7442  0BF2  2525  318B         	fcall	PL102	;call to abstracted procedure
  7443                           
  7444                           ;RDM.c: 26: TMR1IF = 0;
  7445  0BF4  1011               	bcf	17,0	;volatile
  7446                           
  7447                           ;RDM.c: 27: TMR1IE = 1;
  7448  0BF5  0021               	movlb	1	; select bank1
  7449  0BF6  1411               	bsf	17,0	;volatile
  7450                           
  7451                           ;RDM.c: 28: PEIE = 1;
  7452  0BF7  170B               	bsf	11,6	;volatile
  7453                           
  7454                           ;RDM.c: 31: LATC4 = 1;
  7455  0BF8  0022               	movlb	2	; select bank2
  7456  0BF9  160E               	bsf	14,4	;volatile
  7457                           
  7458                           ;RDM.c: 32: TRISC4 = 0;
  7459  0BFA  0021               	movlb	1	; select bank1
  7460  0BFB  120E               	bcf	14,4	;volatile
  7461                           
  7462                           ;RDM.c: 33: TXEN = 1;
  7463  0BFC  0023               	movlb	3	; select bank3
  7464  0BFD  169E               	bsf	30,5	;volatile
  7465                           
  7466                           ;RDM.c: 34: SPEN = 1;
  7467  0BFE  179D               	bsf	29,7	;volatile
  7468                           
  7469                           ;RDM.c: 35: SYNC = 0;
  7470  0BFF  121E               	bcf	30,4	;volatile
  7471                           
  7472                           ;RDM.c: 36: RC4PPS = 0b1001;
  7473  0C00  3009               	movlw	9
  7474  0C01  003D               	movlb	29	; select bank29
  7475  0C02  00A4               	movwf	36	;volatile
  7476                           
  7477                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  7478  0C03  304C               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7479  0C04  0021               	movlb	1	; select bank1
  7480  0C05  00E2               	movwf	_TxByte^(0+128)
  7481                           
  7482                           ;RDM.c: 39: TX9 = TX9D = 1;
  7483  0C06  0023               	movlb	3	; select bank3
  7484  0C07  141E               	bsf	30,0	;volatile
  7485  0C08  1C1E               	btfss	30,0	;volatile
  7486  0C09  2C0D               	goto	u3090
  7487  0C0A  0023               	movlb	3	; select bank3
  7488  0C0B  171E               	bsf	30,6	;volatile
  7489  0C0C  2C0F               	goto	l4325
  7490  0C0D                     u3090:	
  7491  0C0D  0023               	movlb	3	; select bank3
  7492  0C0E  131E               	bcf	30,6	;volatile
  7493  0C0F                     l4325:	
  7494                           
  7495                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  7496  0C0F  1177               	bcf	_DMX_Flags+1,2	;volatile
  7497                           
  7498                           ;RDM.c: 44: DMX_Flags.RDMidentify = 0;
  7499  0C10  11F7               	bcf	_DMX_Flags+1,3	;volatile
  7500                           
  7501                           ;RDM.c: 59: DMX_Address=1;
  7502  0C11  0021               	movlb	1	; select bank1
  7503  0C12  3017               	movlw	23
  7504  0C13  01ED               	clrf	_DMX_Address^(0+128)
  7505  0C14  0AED               	incf	_DMX_Address^(0+128),f
  7506  0C15  01EE               	clrf	(_DMX_Address+1)^(0+128)
  7507                           
  7508                           ;RDM.c: 64: PDCount = 23;
  7509  0C16  00F9               	movwf	_PDCount
  7510  0C17                     l4337:	
  7511                           ;RDM.c: 65: while (PDCount >= 17) {
  7512                           
  7513  0C17  3011               	movlw	17
  7514  0C18  0279               	subwf	_PDCount,w
  7515  0C19  1C03               	btfss	3,0
  7516  0C1A  2C24               	goto	l4339
  7517                           
  7518                           ;RDM.c: 66: DISCOVERY_RDM_Data.value[PDCount] = 0xFE;
  7519  0C1B  0879               	movf	_PDCount,w
  7520  0C1C  3EBC               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  7521  0C1D  0086               	movwf	6
  7522  0C1E  3001               	movlw	1	; select bank3/4
  7523  0C1F  0087               	movwf	7
  7524  0C20  30FE               	movlw	254
  7525  0C21  0081               	movwf	1
  7526                           
  7527                           ;RDM.c: 67: PDCount--;
  7528  0C22  03F9               	decf	_PDCount,f
  7529  0C23  2C17               	goto	l4337
  7530  0C24                     l4339:	
  7531                           
  7532                           ;RDM.c: 68: }
  7533                           ;RDM.c: 69: DISCOVERY_RDM_Data.value[16] = 0xAA;
  7534  0C24  30AA               	movlw	170
  7535  0C25  0023               	movlb	3	; select bank3
  7536  0C26  00CC               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)	;volatile
  7537                           
  7538                           ;RDM.c: 70: PDCount = 0;
  7539  0C27  01F9               	clrf	_PDCount
  7540                           
  7541                           ;RDM.c: 71: checkSum = 0;
  7542  0C28  0021               	movlb	1	; select bank1
  7543  0C29  01CA               	clrf	_checkSum^(0+128)
  7544  0C2A  01CB               	clrf	(_checkSum+1)^(0+128)
  7545  0C2B                     l4353:	
  7546                           ;RDM.c: 72: while (PDCount < 6) {
  7547                           
  7548  0C2B  3006               	movlw	6
  7549  0C2C  0279               	subwf	_PDCount,w
  7550  0C2D  1803               	btfsc	3,0
  7551  0C2E  2C55               	goto	l4355
  7552                           
  7553                           ;RDM.c: 73: DISCOVERY_RDM_Data.value[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  7554  0C2F  30FE               	movlw	254
  7555  0C30  00F4               	movwf	___bmul@multiplicand
  7556  0C31  0879               	movf	_PDCount,w
  7557  0C32  248A  318B         	fcall	___bmul
  7558  0C34  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7559  0C35  2497  318B         	fcall	PL36	;call to abstracted procedure
  7560  0C37  38AA               	iorlw	170
  7561                           
  7562                           ;RDM.c: 74: DISCOVERY_RDM_Data.value[14 - PDCount * 2] = UID[PDCount] | 0x55;
  7563  0C38  24AA  318B         	fcall	PL110	;call to abstracted procedure
  7564  0C3A  248A  318B         	fcall	___bmul
  7565  0C3C  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7566  0C3D  2497  318B         	fcall	PL36	;call to abstracted procedure
  7567  0C3F  3855               	iorlw	85
  7568                           
  7569                           ;RDM.c: 75: checkSum += DISCOVERY_RDM_Data.value[15 - PDCount * 2];
  7570  0C40  24AA  318B         	fcall	PL110	;call to abstracted procedure
  7571  0C42  248A  318B         	fcall	___bmul
  7572  0C44  3ECB               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  7573  0C45  24A3  318B         	fcall	PL58	;call to abstracted procedure
  7574  0C47  1803               	skipnc
  7575  0C48  0ACB               	incf	(_checkSum+1)^(0+128),f
  7576                           
  7577                           ;RDM.c: 76: checkSum += DISCOVERY_RDM_Data.value[14 - PDCount * 2];
  7578  0C49  30FE               	movlw	254
  7579  0C4A  00F4               	movwf	___bmul@multiplicand
  7580  0C4B  0879               	movf	_PDCount,w
  7581  0C4C  248A  318B         	fcall	___bmul
  7582  0C4E  3ECA               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  7583  0C4F  24A3  318B         	fcall	PL58	;call to abstracted procedure
  7584  0C51  1803               	skipnc
  7585  0C52  0ACB               	incf	(_checkSum+1)^(0+128),f
  7586                           
  7587                           ;RDM.c: 77: PDCount++;
  7588  0C53  0AF9               	incf	_PDCount,f
  7589  0C54  2C2B               	goto	l4353
  7590  0C55                     l4355:	
  7591                           
  7592                           ;RDM.c: 78: }
  7593                           ;RDM.c: 79: TX_RDM_Data.CS = checkSum;
  7594  0C55  084B               	movf	(_checkSum+1)^(0+128),w
  7595  0C56  0022               	movlb	2	; select bank2
  7596  0C57  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7597  0C58  0021               	movlb	1	; select bank1
  7598  0C59  084A               	movf	_checkSum^(0+128),w
  7599  0C5A  0022               	movlb	2	; select bank2
  7600  0C5B  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7601                           
  7602                           ;RDM.c: 80: PDCount = 0;
  7603  0C5C  01F9               	clrf	_PDCount
  7604                           
  7605                           ;RDM.c: 81: DISCOVERY_RDM_Data.value[3] = TX_RDM_Data.CSH | 0xAA;
  7606  0C5D  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7607  0C5E  38AA               	iorlw	170
  7608  0C5F  0023               	movlb	3	; select bank3
  7609  0C60  00BF               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)	;volatile
  7610                           
  7611                           ;RDM.c: 82: DISCOVERY_RDM_Data.value[2] = TX_RDM_Data.CSH | 0x55;
  7612  0C61  0022               	movlb	2	; select bank2
  7613  0C62  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  7614  0C63  3855               	iorlw	85
  7615  0C64  0023               	movlb	3	; select bank3
  7616  0C65  00BE               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)	;volatile
  7617                           
  7618                           ;RDM.c: 83: DISCOVERY_RDM_Data.value[1] = TX_RDM_Data.CSL | 0xAA;
  7619  0C66  0022               	movlb	2	; select bank2
  7620  0C67  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7621  0C68  38AA               	iorlw	170
  7622  0C69  0023               	movlb	3	; select bank3
  7623  0C6A  00BD               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)	;volatile
  7624                           
  7625                           ;RDM.c: 84: DISCOVERY_RDM_Data.value[0] = TX_RDM_Data.CSL | 0x55;
  7626  0C6B  0022               	movlb	2	; select bank2
  7627  0C6C  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  7628  0C6D  3855               	iorlw	85
  7629  0C6E  0023               	movlb	3	; select bank3
  7630  0C6F  00BC               	movwf	_DISCOVERY_RDM_Data^(0+384)	;volatile
  7631                           
  7632                           ;RDM.c: 86: PDCount = 16;
  7633  0C70  3010               	movlw	16
  7634  0C71  00F9               	movwf	_PDCount
  7635  0C72                     l4365:	
  7636                           ;RDM.c: 87: while (PDCount >= 11) {
  7637                           
  7638  0C72  300B               	movlw	11
  7639  0C73  0279               	subwf	_PDCount,w
  7640  0C74  1C03               	btfss	3,0
  7641  0C75  0008               	return
  7642                           
  7643                           ;RDM.c: 88: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  7644  0C76  0879               	movf	_PDCount,w
  7645  0C77  3E4C               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  7646  0C78  0086               	movwf	6
  7647  0C79  3001               	movlw	1	; select bank2/3
  7648  0C7A  0087               	movwf	7
  7649  0C7B  3089               	movlw	high ((_UID| (0+32768)+16))
  7650  0C7C  0020               	movlb	0	; select bank0
  7651  0C7D  00A3               	movwf	??_RDM_init+1
  7652  0C7E  0879               	movf	_PDCount,w
  7653  0C7F  3CD6               	sublw	low ((_UID| (0+32768)+16))
  7654  0C80  00A2               	movwf	??_RDM_init
  7655  0C81  1C03               	skipc
  7656  0C82  03A3               	decf	??_RDM_init+1,f
  7657  0C83  0084               	movwf	4
  7658  0C84  0823               	movf	??_RDM_init+1,w
  7659  0C85  0085               	movwf	5
  7660  0C86  0800               	movf	0,w	;code access
  7661  0C87  0081               	movwf	1
  7662                           
  7663                           ;RDM.c: 89: PDCount--;
  7664  0C88  03F9               	decf	_PDCount,f
  7665  0C89  2C72               	goto	l4365
  7666  0C8A                     __end_of_RDM_init:	
  7667  0C8A                     __ptext11:	
  7668 ;; *************** function ___bmul *****************
  7669 ;; Defined at:
  7670 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  multiplier      1    wreg     unsigned char 
  7673 ;;  multiplicand    1    4[COMMON] unsigned char 
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;  multiplier      1    1[BANK0 ] unsigned char 
  7676 ;;  product         1    0[BANK0 ] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      unsigned char 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0
  7681 ;; Tracked objects:
  7682 ;;		On entry : 1E/1
  7683 ;;		On exit  : 1F/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7686 ;;      Params:         1       0       0       0       0       0       0       0
  7687 ;;      Locals:         0       2       0       0       0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0
  7689 ;;      Totals:         1       2       0       0       0       0       0       0
  7690 ;;Total ram usage:        3 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    2
  7693 ;; This function calls:
  7694 ;;		Nothing
  7695 ;; This function is called by:
  7696 ;;		_RDM_init
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           
  7701                           ;psect for function ___bmul
  7702  0C8A                     ___bmul:	
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7706                           ;___bmul@multiplier stored from wreg
  7707  0C8A  0020               	movlb	0	; select bank0
  7708  0C8B  00A1               	movwf	___bmul@multiplier
  7709  0C8C  01A0               	clrf	___bmul@product
  7710  0C8D                     l4105:	
  7711  0C8D  0874               	movf	___bmul@multiplicand,w
  7712  0C8E  1821               	btfsc	___bmul@multiplier,0
  7713  0C8F  07A0               	addwf	___bmul@product,f
  7714  0C90  35F4               	lslf	___bmul@multiplicand,f
  7715  0C91  36A1               	lsrf	___bmul@multiplier,f
  7716  0C92  0821               	movf	___bmul@multiplier,w
  7717  0C93  1D03               	btfss	3,2
  7718  0C94  2C8D               	goto	l4105
  7719  0C95  0820               	movf	___bmul@product,w
  7720  0C96  0008               	return
  7721  0C97                     __end_of___bmul:	
  7722  0C97                     PL36:	
  7723  0C97  0086               	movwf	6
  7724  0C98  3001               	movlw	1	; select bank3/4
  7725  0C99  0087               	movwf	7
  7726  0C9A  0879               	movf	_PDCount,w
  7727  0C9B  3EC6               	addlw	low (_UID| (0+32768))
  7728  0C9C  0084               	movwf	4
  7729  0C9D  3089               	movlw	high (_UID| (0+32768))
  7730  0C9E  1803               	skipnc
  7731  0C9F  3E01               	addlw	1
  7732  0CA0  0085               	movwf	5
  7733  0CA1  0800               	movf	0,w	;code access
  7734  0CA2  0008               	return
  7735  0CA3                     __end_ofPL36:	
  7736  0CA3                     PL58:	
  7737  0CA3  0086               	movwf	6
  7738  0CA4  3001               	movlw	1	; select bank3/4
  7739  0CA5  0087               	movwf	7
  7740  0CA6  0801               	movf	1,w
  7741  0CA7  0021               	movlb	1	; select bank1
  7742  0CA8  07CA               	addwf	_checkSum^(0+128),f
  7743  0CA9  0008               	return
  7744  0CAA                     __end_ofPL58:	
  7745  0CAA                     PL110:	
  7746  0CAA  0081               	movwf	1
  7747  0CAB  30FE               	movlw	254
  7748  0CAC  00F4               	movwf	___bmul@multiplicand
  7749  0CAD  0879               	movf	_PDCount,w
  7750  0CAE  0008               	return
  7751  0CAF                     __end_ofPL110:	
  7752  0CAF                     __ptext27:	
  7753 ;; *************** function _timer1_interrupt *****************
  7754 ;; Defined at:
  7755 ;;		line 24 in file "Timer.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;		None
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;		None
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  2  138[None  ] int 
  7762 ;; Registers used:
  7763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 1E/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7769 ;;      Params:         0       0       0       0       0       0       0       0
  7770 ;;      Locals:         0       0       0       0       0       0       0       0
  7771 ;;      Temps:          1       0       0       0       0       0       0       0
  7772 ;;      Totals:         1       0       0       0       0       0       0       0
  7773 ;;Total ram usage:        1 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_isr
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _timer1_interrupt
  7784  0CAF                     _timer1_interrupt:	
  7785                           
  7786                           ;Timer.c: 25: if (TMR1IE && TMR1IF) {
  7787                           
  7788                           ;incstack = 0
  7789                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
  7790  0CAF  0021               	movlb	1	; select bank1
  7791  0CB0  1C11               	btfss	17,0	;volatile
  7792  0CB1  0008               	return
  7793  0CB2  0020               	movlb	0	; select bank0
  7794  0CB3  1C11               	btfss	17,0	;volatile
  7795  0CB4  0008               	return
  7796                           
  7797                           ;Timer.c: 26: TMR1IF = 0;
  7798  0CB5  1011               	bcf	17,0	;volatile
  7799                           
  7800                           ;Timer.c: 27: switch (TimerState) {
  7801  0CB6  2D15               	goto	i1l3665
  7802  0CB7                     i1l3615:	
  7803                           
  7804                           ;Timer.c: 29: TimerState = TIMER_500US;
  7805  0CB7  01DF               	clrf	_TimerState^(0+128)	;volatile
  7806  0CB8                     i1l917:	
  7807                           ;Timer.c: 30: case TIMER_StartUpDelay:
  7808                           
  7809                           
  7810                           ;Timer.c: 31: TMR1=0;
  7811  0CB8  0020               	movlb	0	; select bank0
  7812  0CB9  0196               	clrf	22	;volatile
  7813  0CBA  0197               	clrf	23	;volatile
  7814                           
  7815                           ;Timer.c: 32: Timer_DelayCount++;
  7816  0CBB  0021               	movlb	1	; select bank1
  7817  0CBC  0ADE               	incf	_Timer_DelayCount^(0+128),f	;volatile
  7818  0CBD  0008               	return
  7819  0CBE                     i1l3621:	
  7820                           
  7821                           ;Timer.c: 50: if(ADIE==RA5){
  7822  0CBE  0020               	movlb	0	; select bank0
  7823  0CBF  1E8C               	btfss	12,5	;volatile
  7824  0CC0  2CC3               	goto	u243_20
  7825  0CC1  3001               	movlw	1
  7826  0CC2  2CC4               	goto	u243_22
  7827  0CC3                     u243_20:	
  7828  0CC3  3000               	movlw	0
  7829  0CC4                     u243_22:	
  7830  0CC4  00F0               	movwf	??_timer1_interrupt
  7831  0CC5  0021               	movlb	1	; select bank1
  7832  0CC6  1F11               	btfss	17,6	;volatile
  7833  0CC7  2CCA               	goto	u244_20
  7834  0CC8  3001               	movlw	1
  7835  0CC9  2CCB               	goto	u244_22
  7836  0CCA                     u244_20:	
  7837  0CCA  3000               	movlw	0
  7838  0CCB                     u244_22:	
  7839  0CCB  0670               	xorwf	??_timer1_interrupt,w
  7840  0CCC  1903               	btfsc	3,2
  7841                           
  7842                           ;Timer.c: 51: Timer.Switch=1;
  7843  0CCD  143E               	bsf	(_Timer^(0+128)+6),0	;volatile
  7844                           
  7845                           ;Timer.c: 52: }
  7846                           ;Timer.c: 53: TMR1 = 0xFE0B;
  7847  0CCE  2525  318B         	fcall	PL102	;call to abstracted procedure
  7848                           
  7849                           ;Timer.c: 54: RxTimer++;
  7850  0CD0  0021               	movlb	1	; select bank1
  7851  0CD1  0AD8               	incf	_RxTimer^(0+128),f	;volatile
  7852  0CD2  1903               	skipnz
  7853  0CD3  0AD9               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7854                           
  7855                           ;Timer.c: 55: if (RxTimer == 2400) {
  7856  0CD4  3060               	movlw	96
  7857  0CD5  0658               	xorwf	_RxTimer^(0+128),w	;volatile
  7858  0CD6  3009               	movlw	9
  7859  0CD7  1903               	skipnz
  7860  0CD8  0659               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7861  0CD9  1D03               	btfss	3,2
  7862  0CDA  2CE0               	goto	i1l3633
  7863                           
  7864                           ;Timer.c: 56: RxTimer = 2400 + 1;
  7865  0CDB  3061               	movlw	97
  7866  0CDC  00D8               	movwf	_RxTimer^(0+128)	;volatile
  7867  0CDD  3009               	movlw	9
  7868  0CDE  00D9               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7869                           
  7870                           ;Timer.c: 57: DMX_Flags.RxTimeout = 1;
  7871  0CDF  1576               	bsf	_DMX_Flags,2	;volatile
  7872  0CE0                     i1l3633:	
  7873                           
  7874                           ;Timer.c: 58: }
  7875                           ;Timer.c: 60: Timer.MS_Count++;
  7876  0CE0  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
  7877  0CE1  1903               	skipnz
  7878  0CE2  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7879                           
  7880                           ;Timer.c: 61: Timer.MS = 1;
  7881  0CE3  1438               	bsf	_Timer^(0+128),0	;volatile
  7882                           
  7883                           ;Timer.c: 62: if (Timer.MS_Count == 1000)
  7884  0CE4  30E8               	movlw	232
  7885  0CE5  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7886  0CE6  3003               	movlw	3
  7887  0CE7  1903               	skipnz
  7888  0CE8  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7889  0CE9  1D03               	btfss	3,2
  7890  0CEA  0008               	return
  7891                           
  7892                           ;Timer.c: 63: {
  7893                           ;Timer.c: 64: Timer.MS_Count = 0;
  7894  0CEB  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
  7895  0CEC  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7896                           
  7897                           ;Timer.c: 65: Timer.SEC_Count++;
  7898  0CED  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
  7899                           
  7900                           ;Timer.c: 66: Timer.SEC = 1;
  7901  0CEE  14B8               	bsf	_Timer^(0+128),1	;volatile
  7902                           
  7903                           ;Timer.c: 67: if (Timer.SEC_Count == 60)
  7904  0CEF  303C               	movlw	60
  7905  0CF0  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7906  0CF1  1D03               	btfss	3,2
  7907  0CF2  0008               	return
  7908                           
  7909                           ;Timer.c: 68: {
  7910                           ;Timer.c: 69: Timer.SEC_Count = 0;
  7911  0CF3  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7912                           
  7913                           ;Timer.c: 70: Timer.MIN_Count++;
  7914  0CF4  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
  7915                           
  7916                           ;Timer.c: 71: Timer.MIN = 1;
  7917  0CF5  1538               	bsf	_Timer^(0+128),2	;volatile
  7918                           
  7919                           ;Timer.c: 73: if (Timer.MIN_Count == 60)
  7920  0CF6  303C               	movlw	60
  7921  0CF7  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
  7922  0CF8  1D03               	btfss	3,2
  7923  0CF9  0008               	return
  7924                           
  7925                           ;Timer.c: 74: {
  7926                           ;Timer.c: 75: Timer.MIN_Count = 0;
  7927  0CFA  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7928                           
  7929                           ;Timer.c: 76: Timer.HR_Count++;
  7930  0CFB  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
  7931                           
  7932                           ;Timer.c: 77: Timer.HR = 1;
  7933  0CFC  15B8               	bsf	_Timer^(0+128),3	;volatile
  7934  0CFD  0008               	return
  7935  0CFE                     i1l926:	
  7936                           ;Timer.c: 89: case TIMER_BREAK:
  7937                           
  7938                           
  7939                           ;Timer.c: 90: LATC4 = 1;
  7940  0CFE  0022               	movlb	2	; select bank2
  7941  0CFF  160E               	bsf	14,4	;volatile
  7942                           
  7943                           ;Timer.c: 91: TMR1 = 0xFFF5;
  7944  0D00  30FF               	movlw	255
  7945  0D01  0020               	movlb	0	; select bank0
  7946  0D02  0097               	movwf	23	;volatile
  7947  0D03  30F5               	movlw	245
  7948  0D04  0096               	movwf	22	;volatile
  7949                           
  7950                           ;Timer.c: 92: TimerState = TX_TIMER_MAB;
  7951  0D05  3002               	movlw	2
  7952  0D06  0021               	movlb	1	; select bank1
  7953  0D07  00DF               	movwf	_TimerState^(0+128)	;volatile
  7954                           
  7955                           ;Timer.c: 93: break;
  7956  0D08  0008               	return
  7957  0D09                     i1l927:	
  7958                           ;Timer.c: 95: case TX_TIMER_MAB:
  7959                           
  7960                           
  7961                           ;Timer.c: 96: TXEN = 1;
  7962  0D09  0023               	movlb	3	; select bank3
  7963  0D0A  169E               	bsf	30,5	;volatile
  7964                           
  7965                           ;Timer.c: 97: TXIE = 1;
  7966  0D0B  0021               	movlb	1	; select bank1
  7967  0D0C  1611               	bsf	17,4	;volatile
  7968                           
  7969                           ;Timer.c: 98: TMR1 = 0xFCDF;
  7970  0D0D  30FC               	movlw	252
  7971  0D0E  0020               	movlb	0	; select bank0
  7972  0D0F  0097               	movwf	23	;volatile
  7973  0D10  30DF               	movlw	223
  7974  0D11  0096               	movwf	22	;volatile
  7975                           
  7976                           ;Timer.c: 99: TimerState = TIMER_500US;
  7977  0D12  0021               	movlb	1	; select bank1
  7978  0D13  01DF               	clrf	_TimerState^(0+128)	;volatile
  7979                           
  7980                           ;Timer.c: 100: break;
  7981  0D14  0008               	return
  7982  0D15                     i1l3665:	
  7983  0D15  0021               	movlb	1	; select bank1
  7984  0D16  085F               	movf	_TimerState^(0+128),w	;volatile
  7985                           
  7986                           ; Switch size 1, requested type "space"
  7987                           ; Number of cases is 4, Range of values is 0 to 3
  7988                           ; switch strategies available:
  7989                           ; Name         Instructions Cycles
  7990                           ; simple_byte           13     7 (average)
  7991                           ; direct_byte           14     6 (fixed)
  7992                           ; jumptable            260     6 (fixed)
  7993                           ;	Chosen strategy is simple_byte
  7994  0D17  3A00               	xorlw	0	; case 0
  7995  0D18  1903               	skipnz
  7996  0D19  2CBE               	goto	i1l3621
  7997  0D1A  3A01               	xorlw	1	; case 1
  7998  0D1B  1903               	skipnz
  7999  0D1C  2CFE               	goto	i1l926
  8000  0D1D  3A03               	xorlw	3	; case 2
  8001  0D1E  1903               	skipnz
  8002  0D1F  2D09               	goto	i1l927
  8003  0D20  3A01               	xorlw	1	; case 3
  8004  0D21  1903               	skipnz
  8005  0D22  2CB8               	goto	i1l917
  8006  0D23  2CB7               	goto	i1l3615
  8007  0D24  0008               	return
  8008  0D25                     __end_of_timer1_interrupt:	
  8009  0D25                     PL102:	
  8010  0D25  30FE               	movlw	254
  8011  0D26  0020               	movlb	0	; select bank0
  8012  0D27  0097               	movwf	23	;volatile
  8013  0D28  300B               	movlw	11
  8014  0D29  0096               	movwf	22	;volatile
  8015  0D2A  0008               	return
  8016  0D2B                     __end_ofPL102:	
  8017                           
  8018                           	psect	intentry
  8019  0004                     __pintentry:	
  8020 ;; *************** function _isr *****************
  8021 ;; Defined at:
  8022 ;;		line 86 in file "main.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      void 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 1C/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8036 ;;      Params:         0       0       0       0       0       0       0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0       0
  8039 ;;      Totals:         0       0       0       0       0       0       0       0
  8040 ;;Total ram usage:        0 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    1
  8043 ;; This function calls:
  8044 ;;		_ADC_interrupt
  8045 ;;		_DMX_interrput
  8046 ;;		_RDM_tx_interrupt
  8047 ;;		_timer1_interrupt
  8048 ;; This function is called by:
  8049 ;;		Interrupt level 1
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053  0004                     _isr:	
  8054                           
  8055                           ;incstack = 0
  8056  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8057                           
  8058                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8059  0005  3180               	pagesel	$
  8060                           
  8061                           ;main.c: 87: ADC_interrupt();
  8062  0006  318A  22F8  3180   	fcall	_ADC_interrupt
  8063                           
  8064                           ;main.c: 89: DMX_interrput();
  8065  0009  318B  230E  3180   	fcall	_DMX_interrput
  8066                           
  8067                           ;main.c: 90: timer1_interrupt();
  8068  000C  318C  24AF  3180   	fcall	_timer1_interrupt
  8069                           
  8070                           ;main.c: 91: RDM_tx_interrupt();
  8071  000F  318F  276F         	fcall	_RDM_tx_interrupt
  8072  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8073  0012  0009               	retfie
  8074  0013                     __end_of_isr:	
  8075                           
  8076                           	psect	text29
  8077  0B0E                     __ptext29:	
  8078 ;; *************** function _DMX_interrput *****************
  8079 ;; Defined at:
  8080 ;;		line 182 in file "DMX.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;		None
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  2  136[None  ] int 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8089 ;; Tracked objects:
  8090 ;;		On entry : 1F/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8094 ;;      Params:         0       0       0       0       0       0       0       0
  8095 ;;      Locals:         1       0       0       0       0       0       0       0
  8096 ;;      Temps:          2       0       0       0       0       0       0       0
  8097 ;;      Totals:         3       0       0       0       0       0       0       0
  8098 ;;Total ram usage:        3 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_isr
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _DMX_interrput
  8109  0B0E                     _DMX_interrput:	
  8110                           
  8111                           ;DMX.c: 183: if (RCIE & RCIF) {
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8115  0B0E  3001               	movlw	1
  8116  0B0F  0021               	movlb	1	; select bank1
  8117  0B10  1E91               	btfss	17,5	;volatile
  8118  0B11  3900               	andlw	0
  8119  0B12  0020               	movlb	0	; select bank0
  8120  0B13  1E91               	btfss	17,5	;volatile
  8121  0B14  3900               	andlw	0
  8122  0B15  1C09               	btfss	9,0
  8123  0B16  0008               	return
  8124                           
  8125                           ;DMX.c: 184: volatile char RxDat;
  8126                           ;DMX.c: 185: if (FERR)
  8127  0B17  0023               	movlb	3	; select bank3
  8128  0B18  1D1D               	btfss	29,2	;volatile
  8129  0B19  2BCB               	goto	i1l3595
  8130                           
  8131                           ;DMX.c: 186: {
  8132                           ;DMX.c: 187: RxDat = RCREG;
  8133  0B1A  0819               	movf	25,w	;volatile
  8134  0B1B  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8135                           
  8136                           ;DMX.c: 188: DMX_Flags.RxBreak = 1;
  8137  0B1C  14F6               	bsf	_DMX_Flags,1	;volatile
  8138                           
  8139                           ;DMX.c: 189: RxState = WAIT_FOR_START;
  8140  0B1D  3001               	movlw	1
  8141  0B1E  0021               	movlb	1	; select bank1
  8142  0B1F  00E7               	movwf	_RxState^(0+128)	;volatile
  8143                           
  8144                           ;DMX.c: 190: RxTimer = 0;
  8145  0B20  01D8               	clrf	_RxTimer^(0+128)	;volatile
  8146  0B21  01D9               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8147  0B22  2BCB               	goto	i1l3595
  8148  0B23                     i1l3515:	
  8149                           
  8150                           ;DMX.c: 194: RxDat = RCREG;
  8151  0B23  0023               	movlb	3	; select bank3
  8152  0B24  0819               	movf	25,w	;volatile
  8153  0B25  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8154                           
  8155                           ;DMX.c: 195: break;
  8156  0B26  2BD6               	goto	i1l3597
  8157  0B27                     i1l411:	
  8158                           ;DMX.c: 196: case WAIT_FOR_START:
  8159                           
  8160                           
  8161                           ;DMX.c: 197: if (RCIF)
  8162  0B27  0020               	movlb	0	; select bank0
  8163  0B28  1E91               	btfss	17,5	;volatile
  8164  0B29  2BD6               	goto	i1l3597
  8165                           
  8166                           ;DMX.c: 198: {
  8167                           ;DMX.c: 199: RxDat = RCREG;
  8168  0B2A  0023               	movlb	3	; select bank3
  8169  0B2B  0819               	movf	25,w	;volatile
  8170  0B2C  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8171  0B2D  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8172  0B2E  1D03               	btfss	3,2
  8173  0B2F  2B3C               	goto	i1l3525
  8174                           
  8175                           ;DMX.c: 202: RxState = RX_DMX_READ_DATA;
  8176  0B30  3002               	movlw	2
  8177  0B31  0021               	movlb	1	; select bank1
  8178  0B32  00E7               	movwf	_RxState^(0+128)	;volatile
  8179                           
  8180                           ;DMX.c: 203: RxDataPtr = &RxData[0];
  8181  0B33  30E9               	movlw	(low (_RxData| 0))& (0+255)
  8182  0B34  00E8               	movwf	_RxDataPtr^(0+128)
  8183                           
  8184                           ;DMX.c: 204: RxAddrCount = 1;
  8185  0B35  3001               	movlw	1
  8186  0B36  00DA               	movwf	_RxAddrCount^(0+128)	;volatile
  8187  0B37  01DB               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8188                           
  8189                           ;DMX.c: 206: DMXPeriod = DMXPeriodConst;
  8190  0B38  0866               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8191  0B39  00EF               	movwf	_DMXPeriod^(0+128)
  8192                           
  8193                           ;DMX.c: 207: DMXPeriodConst = 0;
  8194  0B3A  01E6               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8195                           
  8196                           ;DMX.c: 208: } else if (RxDat == 0xCC) {
  8197  0B3B  2BD6               	goto	i1l3597
  8198  0B3C                     i1l3525:	
  8199  0B3C  30CC               	movlw	204
  8200  0B3D  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8201  0B3E  1D03               	btfss	3,2
  8202  0B3F  2B44               	goto	i1l3529
  8203                           
  8204                           ;DMX.c: 210: RxState = RX_RDM_READ_SubStartCode;
  8205  0B40  3003               	movlw	3
  8206  0B41  0021               	movlb	1	; select bank1
  8207  0B42  00E7               	movwf	_RxState^(0+128)	;volatile
  8208                           
  8209                           ;DMX.c: 212: } else {
  8210  0B43  2BD6               	goto	i1l3597
  8211  0B44                     i1l3529:	
  8212                           
  8213                           ;DMX.c: 213: RxState = RX_WAIT_FOR_BREAK;
  8214  0B44  0021               	movlb	1	; select bank1
  8215  0B45  01E7               	clrf	_RxState^(0+128)	;volatile
  8216  0B46  2BD6               	goto	i1l3597
  8217  0B47                     i1l3531:	
  8218                           
  8219                           ;DMX.c: 218: RxDat = RCREG;
  8220  0B47  0023               	movlb	3	; select bank3
  8221  0B48  0819               	movf	25,w	;volatile
  8222  0B49  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8223                           
  8224                           ;DMX.c: 219: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8225  0B4A  0021               	movlb	1	; select bank1
  8226  0B4B  086E               	movf	(_DMX_Address+1)^(0+128),w
  8227  0B4C  025B               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8228  0B4D  1D03               	skipz
  8229  0B4E  2B51               	goto	u230_25
  8230  0B4F  086D               	movf	_DMX_Address^(0+128),w
  8231  0B50  025A               	subwf	_RxAddrCount^(0+128),w	;volatile
  8232  0B51                     u230_25:	
  8233  0B51  1C03               	skipc
  8234  0B52  2B5D               	goto	i1l3539
  8235  0B53  086D               	movf	_DMX_Address^(0+128),w
  8236  0B54  046E               	iorwf	(_DMX_Address+1)^(0+128),w
  8237  0B55  1903               	btfsc	3,2
  8238  0B56  2B5D               	goto	i1l3539
  8239                           
  8240                           ;DMX.c: 220: {
  8241                           ;DMX.c: 221: *RxDataPtr = RxDat;
  8242  0B57  0868               	movf	_RxDataPtr^(0+128),w
  8243  0B58  0086               	movwf	6
  8244  0B59  0187               	clrf	7
  8245  0B5A  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8246  0B5B  0081               	movwf	1
  8247                           
  8248                           ;DMX.c: 222: RxDataPtr++;
  8249  0B5C  0AE8               	incf	_RxDataPtr^(0+128),f
  8250  0B5D                     i1l3539:	
  8251                           
  8252                           ;DMX.c: 223: }
  8253                           ;DMX.c: 224: RxAddrCount++;
  8254  0B5D  0ADA               	incf	_RxAddrCount^(0+128),f	;volatile
  8255  0B5E  1903               	skipnz
  8256  0B5F  0ADB               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8257                           
  8258                           ;DMX.c: 226: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8259  0B60  086D               	movf	_DMX_Address^(0+128),w
  8260  0B61  3E04               	addlw	4
  8261  0B62  00F0               	movwf	??_DMX_interrput
  8262  0B63  3000               	movlw	0
  8263  0B64  3D6E               	addwfc	(_DMX_Address+1)^(0+128),w
  8264  0B65  00F1               	movwf	??_DMX_interrput+1
  8265  0B66  025B               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8266  0B67  1D03               	skipz
  8267  0B68  2B6B               	goto	u232_25
  8268  0B69  0870               	movf	??_DMX_interrput,w
  8269  0B6A  025A               	subwf	_RxAddrCount^(0+128),w	;volatile
  8270  0B6B                     u232_25:	
  8271  0B6B  1C03               	skipc
  8272  0B6C  2BD6               	goto	i1l3597
  8273  0B6D  086D               	movf	_DMX_Address^(0+128),w
  8274  0B6E  046E               	iorwf	(_DMX_Address+1)^(0+128),w
  8275  0B6F  1903               	btfsc	3,2
  8276  0B70  2BD6               	goto	i1l3597
  8277                           
  8278                           ;DMX.c: 227: DMX_Flags.RxNew = 1;
  8279  0B71  1476               	bsf	_DMX_Flags,0	;volatile
  8280                           
  8281                           ;DMX.c: 228: RxState = RX_WAIT_FOR_BREAK;
  8282                           
  8283                           ;DMX.c: 229: RxTimer = 0;
  8284                           
  8285                           ;DMX.c: 230: DMX_Flags.RxTimeout = 0;
  8286  0B72  23E7  318B         	fcall	PL106	;call to abstracted procedure
  8287  0B74  2BD6               	goto	i1l3597
  8288  0B75                     i1l3551:	
  8289                           
  8290                           ;DMX.c: 234: RxDat = RCREG;
  8291  0B75  0023               	movlb	3	; select bank3
  8292  0B76  0819               	movf	25,w	;volatile
  8293  0B77  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8294                           
  8295                           ;DMX.c: 235: if (RxDat == 0x01)
  8296  0B78  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8297  0B79  2BD6               	goto	i1l3597
  8298                           
  8299                           ;DMX.c: 236: {
  8300                           ;DMX.c: 237: RxState = RX_RDM_READ_DATA;
  8301  0B7A  3004               	movlw	4
  8302  0B7B  0021               	movlb	1	; select bank1
  8303  0B7C  00E7               	movwf	_RxState^(0+128)	;volatile
  8304                           
  8305                           ;DMX.c: 238: PackCount = 23;
  8306  0B7D  3017               	movlw	23
  8307  0B7E  00F8               	movwf	_PackCount	;volatile
  8308                           
  8309                           ;DMX.c: 239: PD_Flag = 0;
  8310  0B7F  01CE               	clrf	_PD_Flag^(0+128)	;volatile
  8311  0B80  2BC7               	goto	L7
  8312  0B81                     i1l3559:	
  8313                           
  8314                           ;DMX.c: 244: RxDat = RCREG;
  8315  0B81  0023               	movlb	3	; select bank3
  8316  0B82  0819               	movf	25,w	;volatile
  8317  0B83  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8318                           
  8319                           ;DMX.c: 245: RX_RDM_Data.value[PackCount] = RxDat;
  8320  0B84  0878               	movf	_PackCount,w
  8321  0B85  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8322  0B86  0086               	movwf	6
  8323  0B87  3001               	movlw	1	; select bank2/3
  8324  0B88  0087               	movwf	7
  8325  0B89  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8326  0B8A  0081               	movwf	1
  8327                           
  8328                           ;DMX.c: 247: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8329  0B8B  3002               	movlw	2
  8330  0B8C  0678               	xorwf	_PackCount,w	;volatile
  8331  0B8D  1D03               	btfss	3,2
  8332  0B8E  2BA0               	goto	i1l3573
  8333  0B8F  0878               	movf	_PackCount,w
  8334  0B90  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8335  0B91  0086               	movwf	6
  8336  0B92  0801               	movf	1,w
  8337  0B93  1903               	btfsc	3,2
  8338  0B94  2BA0               	goto	i1l3573
  8339  0B95  0021               	movlb	1	; select bank1
  8340  0B96  084E               	movf	_PD_Flag^(0+128),w	;volatile
  8341  0B97  044F               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8342  0B98  1D03               	btfss	3,2
  8343  0B99  2BA0               	goto	i1l3573
  8344                           
  8345                           ;DMX.c: 248: RxState = RX_RDM_PD;
  8346  0B9A  3005               	movlw	5
  8347  0B9B  00E7               	movwf	_RxState^(0+128)	;volatile
  8348                           
  8349                           ;DMX.c: 249: PDCount = 100-1;
  8350  0B9C  3063               	movlw	99
  8351  0B9D  00F9               	movwf	_PDCount
  8352  0B9E                     i1l3571:	
  8353                           
  8354                           ;DMX.c: 250: PackCount--;
  8355  0B9E  03F8               	decf	_PackCount,f	;volatile
  8356                           
  8357                           ;DMX.c: 251: break;
  8358  0B9F  2BD6               	goto	i1l3597
  8359  0BA0                     i1l3573:	
  8360                           
  8361                           ;DMX.c: 252: }
  8362                           ;DMX.c: 253: if (PackCount == 0) {
  8363  0BA0  0878               	movf	_PackCount,w	;volatile
  8364  0BA1  1D03               	btfss	3,2
  8365  0BA2  2B9E               	goto	i1l3571
  8366                           
  8367                           ;DMX.c: 254: DMX_Flags.RDMNew = 1;
  8368  0BA3  1776               	bsf	_DMX_Flags,6	;volatile
  8369                           
  8370                           ;DMX.c: 255: RxState = RX_WAIT_FOR_BREAK;
  8371  0BA4  0021               	movlb	1	; select bank1
  8372                           
  8373                           ;DMX.c: 256: RxTimer = 0;
  8374                           
  8375                           ;DMX.c: 257: DMX_Flags.RxTimeout = 0;
  8376  0BA5  23E7  318B         	fcall	PL106	;call to abstracted procedure
  8377  0BA7  2B9E               	goto	i1l3571
  8378  0BA8                     i1l3583:	
  8379                           
  8380                           ;DMX.c: 263: RxDat = RCREG;
  8381  0BA8  0023               	movlb	3	; select bank3
  8382  0BA9  0819               	movf	25,w	;volatile
  8383  0BAA  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8384                           
  8385                           ;DMX.c: 264: PD.u8[PDCount] = RxDat;
  8386  0BAB  0879               	movf	_PDCount,w
  8387  0BAC  3E8C               	addlw	140
  8388  0BAD  00F0               	movwf	??_DMX_interrput
  8389  0BAE  3021               	movlw	33
  8390  0BAF  01F1               	clrf	??_DMX_interrput+1
  8391  0BB0  3DF1               	addwfc	??_DMX_interrput+1,f
  8392  0BB1  0870               	movf	??_DMX_interrput,w
  8393  0BB2  0086               	movwf	6
  8394  0BB3  0871               	movf	??_DMX_interrput+1,w
  8395  0BB4  0087               	movwf	7
  8396  0BB5  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8397  0BB6  0081               	movwf	1
  8398                           
  8399                           ;DMX.c: 265: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  8400  0BB7  01F1               	clrf	??_DMX_interrput+1
  8401  0BB8  0022               	movlb	2	; select bank2
  8402  0BB9  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8403  0BBA  3C64               	sublw	100
  8404  0BBB  00F0               	movwf	??_DMX_interrput
  8405  0BBC  1C03               	skipc
  8406  0BBD  03F1               	decf	??_DMX_interrput+1,f
  8407  0BBE  0679               	xorwf	_PDCount,w
  8408  0BBF  0471               	iorwf	??_DMX_interrput+1,w
  8409  0BC0  1D03               	skipz
  8410  0BC1  2BC9               	goto	i1l3591
  8411                           
  8412                           ;DMX.c: 266: RxState = RX_RDM_READ_DATA;
  8413  0BC2  3004               	movlw	4
  8414  0BC3  0021               	movlb	1	; select bank1
  8415  0BC4  00E7               	movwf	_RxState^(0+128)	;volatile
  8416                           
  8417                           ;DMX.c: 267: PD_Flag = 1;
  8418  0BC5  3001               	movlw	1
  8419  0BC6  00CE               	movwf	_PD_Flag^(0+128)	;volatile
  8420  0BC7                     L7:	
  8421  0BC7  01CF               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8422                           
  8423                           ;DMX.c: 268: }else{
  8424  0BC8  2BD6               	goto	i1l3597
  8425  0BC9                     i1l3591:	
  8426                           
  8427                           ;DMX.c: 269: PDCount--;
  8428  0BC9  03F9               	decf	_PDCount,f
  8429  0BCA  2BD6               	goto	i1l3597
  8430  0BCB                     i1l3595:	
  8431  0BCB  0021               	movlb	1	; select bank1
  8432  0BCC  0867               	movf	_RxState^(0+128),w	;volatile
  8433                           
  8434                           ; Switch size 1, requested type "space"
  8435                           ; Number of cases is 6, Range of values is 0 to 5
  8436                           ; switch strategies available:
  8437                           ; Name         Instructions Cycles
  8438                           ; direct_byte           18     6 (fixed)
  8439                           ; simple_byte           19    10 (average)
  8440                           ; jumptable            260     6 (fixed)
  8441                           ;	Chosen strategy is direct_byte
  8442  0BCD  0084               	movwf	4
  8443  0BCE  3006               	movlw	6
  8444  0BCF  0204               	subwf	4,w
  8445  0BD0  1803               	skipnc
  8446  0BD1  2BD6               	goto	i1l3597
  8447  0BD2  3189               	movlp	high i1S4679
  8448  0BD3  3504               	lslf	4,w
  8449  0BD4  3ECC               	addlw	low i1S4679
  8450  0BD5  0082               	movwf	2
  8451  0BD6                     i1l3597:	
  8452                           
  8453                           ;DMX.c: 274: if (RxTimer > 2400) {
  8454  0BD6  0021               	movlb	1	; select bank1
  8455  0BD7  0859               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8456  0BD8  3A80               	xorlw	128
  8457  0BD9  00F0               	movwf	??_DMX_interrput
  8458  0BDA  3089               	movlw	137
  8459  0BDB  0270               	subwf	??_DMX_interrput,w
  8460  0BDC  1D03               	skipz
  8461  0BDD  2BE0               	goto	u240_25
  8462  0BDE  3061               	movlw	97
  8463  0BDF  0258               	subwf	_RxTimer^(0+128),w	;volatile
  8464  0BE0                     u240_25:	
  8465  0BE0  1C03               	skipc
  8466  0BE1  0008               	return
  8467                           
  8468                           ;DMX.c: 275: DMX_Flags.RxTimeout = 1;
  8469  0BE2  1576               	bsf	_DMX_Flags,2	;volatile
  8470                           
  8471                           ;DMX.c: 276: RxTimer = 0;
  8472  0BE3  0021               	movlb	1	; select bank1
  8473  0BE4  01D8               	clrf	_RxTimer^(0+128)	;volatile
  8474  0BE5  01D9               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8475  0BE6  0008               	return
  8476  0BE7                     __end_of_DMX_interrput:	
  8477  0BE7                     PL106:	
  8478  0BE7  01E7               	clrf	_RxState^(0+128)	;volatile
  8479  0BE8  01D8               	clrf	_RxTimer^(0+128)	;volatile
  8480  0BE9  01D9               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8481  0BEA  1176               	bcf	_DMX_Flags,2	;volatile
  8482  0BEB  0008               	return
  8483  0BEC                     __end_ofPL106:	
  8484                           
  8485                           	psect	swtext1
  8486  09CC                     __pswtext1:	
  8487  09CC                     i1S4679:	
  8488  09CC  318B  2B23         	ljmp	i1l3515
  8489  09CE  318B  2B27         	ljmp	i1l411
  8490  09D0  318B  2B47         	ljmp	i1l3531
  8491  09D2  318B  2B75         	ljmp	i1l3551
  8492  09D4  318B  2B81         	ljmp	i1l3559
  8493  09D6  318B  2BA8         	ljmp	i1l3583
  8494                           
  8495                           	psect	text30
  8496  0AF8                     __ptext30:	
  8497 ;; *************** function _ADC_interrupt *****************
  8498 ;; Defined at:
  8499 ;;		line 43 in file "ADC.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  2  134[None  ] int 
  8506 ;; Registers used:
  8507 ;;		wreg
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 1F/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8513 ;;      Params:         0       0       0       0       0       0       0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0
  8516 ;;      Totals:         0       0       0       0       0       0       0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_isr
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _ADC_interrupt
  8528  0AF8                     _ADC_interrupt:	
  8529                           
  8530                           ;ADC.c: 44: if (ADIF == 1) {
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _ADC_interrupt: [wreg]
  8534  0AF8  0020               	movlb	0	; select bank0
  8535  0AF9  1F11               	btfss	17,6	;volatile
  8536  0AFA  0008               	return
  8537                           
  8538                           ;ADC.c: 45: ADC_Data=ADRESH;
  8539  0AFB  0021               	movlb	1	; select bank1
  8540  0AFC  081C               	movf	28,w	;volatile
  8541  0AFD  00DD               	movwf	_ADC_Data^(0+128)	;volatile
  8542                           
  8543                           ;ADC.c: 46: ADC_Flags.New=1;
  8544  0AFE  145C               	bsf	_ADC_Flags^(0+128),0	;volatile
  8545                           
  8546                           ;ADC.c: 47: ADIF = 0;
  8547  0AFF  0020               	movlb	0	; select bank0
  8548  0B00  1311               	bcf	17,6	;volatile
  8549  0B01  0008               	return
  8550  0B02                     __end_of_ADC_interrupt:	
  8551  007E                     btemp	set	126	;btemp
  8552  007E                     int$flags	set	126
  8553  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        13
    BSS         201
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     77      77
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      8      60
    BANK4            76      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    DataPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    RxArPtr	PTR volatile unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PD_Manu	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    TxByte	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK1[4]), 

    PWMLDCONptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    _main->_ADC_loop
    _main->_RDM_rx_loop
    _RDM_discovery_CC->_RDM_TXSTART
    _RDM_SET_CC->_RDM_TXSTART
    _RDM_GET_CC->_RDM_TXSTART
    _RDM_init->___bmul
    _DMX_loop->___awtoft
    _DMX_loop->___lbtoft
    ___fttol->___lbtoft
    ___ftsub->___lbtoft
    ___ftadd->___lbtoft
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_DMX_loop
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_TXSTART->_RDM_get_checkSum
    _RDM_init->___bmul
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39142
                           _ADC_init
                           _ADC_loop
                           _DMX_init
                           _DMX_loop
                           _RDM_init
                        _RDM_rx_loop
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    1784
                                              5 COMMON     1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     446
                                             25 BANK0      4     4      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0     446
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     446
                                             25 BANK0      2     2      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     446
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     446
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             2     2      0     276
                                              2 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            12    12      0   36859
                                             73 BANK0      4     4      0
                                              0 BANK3      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              4 COMMON     1     1      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     430
                                             60 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7084
                                             54 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5532
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1204
                                             12 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4733
                                             27 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             4     4      0     223
                                              4 COMMON     1     1      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_loop
   _DMX_init
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _RDM_init
     ___bmul
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_SET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     133       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4D      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      8      3C      12       75.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4C      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     133      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:38:06 2017

                           _i 00D6                             pc 0002                ___bmul@product 0020  
                 __CFG_CP$OFF 0000                            PL2 05D7                            PL4 05ED  
                          PL6 060A                            PL8 0627                            _PD 218C  
                ___ftadd@exp1 0055                  ___ftadd@exp2 0054                           PL10 062E  
                         PL20 065B                           PL12 0F0F                           PL30 0F33  
                         PL22 0662                           PL14 0645                           PL40 0697  
                         PL32 067E                           PL24 0671                           PL16 064E  
                         PL50 06B6                           PL42 0F40                           PL34 068B  
                         PL26 0679                           PL18 0654                           PL60 06CA  
                         PL52 06BE                           PL44 069E                           PL36 0C97  
                         PL28 0F25                           PL70 06E6                           PL62 06D1  
                         PL54 06C5                           PL46 06A6                           PL38 0FEE  
                         PL80 0F5D                           PL72 0F56                           PL64 0F4F  
                         PL56 0F49                           PL48 06AE                           PL90 0706  
                         PL82 07BF                           PL74 0FF9                           PL66 06D8  
                         PL58 0CA3                           PL92 070C                           PL84 0F63  
                         PL76 06ED                           PL68 06DF                           PL94 0F6A  
                         PL86 06FA                           PL78 06F4                           PL96 0712  
                         PL88 0700                           PL98 0718                  ___ftadd@sign 0053  
                         l374 02D8                           l388 02CB                           l740 0E19  
                         l752 0E51                           l745 0E3D                           _RA2 0062  
                         _RC0 0070                           _RC1 0071                           _RA5 0065  
                         _RC2 0072                           _PR2 001B                           _UID 09C6  
                         _TX9 0CF6                           _PWM 07C6                           _isr 0004  
                         wreg 0009                          PL100 071E                          PL110 0CAA  
                        PL102 0D25                          PL104 0724                          PL106 0BE7  
                        PL108 0728                  __CFG_LVP$OFF 0000                  ___ftdiv@cntr 0044  
                ___ftdiv@sign 0049                          l1131 0D6A                          l1135 0D82  
                        l1127 0D2C                          l1136 0D89                          l1313 0734  
                        l3001 0EF7                          l1138 0D9C                          l1325 0759  
                        l3007 0F03                          l3009 0F0E                          l1349 0514  
                        l1367 045C                          l4007 0D4E                          l4105 0C8D  
                        l4211 058C                          l3163 0773                          l4125 05B0  
                        l4133 044E                          l3085 0423                          l3181 0794  
                        l3165 0778                          l4207 0588                          l3191 079F  
                        l4063 0E94                          l4161 0485                          l3089 0432  
                        l4225 0400                          l3193 07A8                          l3185 079B  
                        l4057 0E83                          l4049 0D8B                          l4155 046F  
                        l4411 0263                          l4059 0E84                          l4091 0EDF  
                        l4173 0558                          l3197 07B6                          l4325 0C0F  
                        l4085 0ED9                          l4093 0EF5                          l4501 0E4E  
                        l4415 0270                          l2751 0DDB                          l4503 0E4F  
                        l4177 0566                          l4353 0C2B                          l4337 0C17  
                        l2745 0E6D                          l2737 0E58                          l4505 0E50  
                        l4195 057A                          l4451 02EB                          l4427 02A3  
                        l4435 0178                          l4355 0C55                          l4339 0C24  
                        l2747 0E7A                          l2739 0E66                          l4365 0C72  
                        l3903 0757                          l4199 057E                          l4455 0314  
                        l4463 0335                          l4297 0143                          l3905 074F  
                        l3923 04C6                          l4395 01F7                          l4555 00AC  
                        l3941 04E3                          l4477 03D2                          l4493 0E15  
                        l3951 04FA                          l3919 04BF                          l4479 03E7  
                        l2799 0D9D                          l4671 0D91                          l3961 0510  
                        l3953 04FE                          l3929 04D5                          l4673 0F09  
                        l4489 0DFD                          l3947 04F1                          l4675 0EE8  
                        l3893 0738                          l3973 0527                          l3949 04F5  
                        l4677 0EF0                          l3895 073C                          l3967 051F  
                        l3959 050C                          l2999 0EF6                          _ADIE 048E  
                        _ADIF 008E                          l3897 0741                          l3985 0538  
                        l3899 074A                          ?_isr 0070                          l3989 0D2B  
                        _BRGH 0CF2                          _FERR 0CEA                          u1400 0DA8  
                        u3090 0C0D                          u3350 0E24                          u3365 0E37  
                        u1865 077B                          _PEIE 005E                          _RCIE 048D  
                        _RCIF 008D                          u2995 047C                          _TMR1 0016  
            _DMXPeriodDimming 00E5                          _SPEN 0CEF                          _TX9D 0CF0  
                        _TXIE 048C                          _TXEN 0CF5                          _TXIF 008C  
                        _SYNC 0CF4                  __CFG_WRT$OFF 0000           _TX_RDM_Response_Set 0DBC  
                        _main 0056                  ___ftpack@arg 0020                  ___ftpack@exp 0023  
                        fsr0h 0005                          fsr1h 0007                          indf0 0000  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E                          start 0013                    _TX_PDCount 00E0  
            __end_of_ADC_init 00BF              __end_of_ADC_loop 00E6                    _TX_PD_Flag 00CC  
                 ?_RDM_GET_CC 0070             ___bmul@multiplier 0021                 __CFG_MCLRE$ON 0000  
                ___ftmul@cntr 0039                  ___ftmul@sign 003A                   ?_RDM_SET_CC 0070  
                ___fttol@exp1 0068                  ___fttol@lval 0064                         ??_isr 0074  
               __CFG_PLLEN$ON 0000          ?_TX_RDM_Response_Set 0070                   _RX_RDM_Data 0120  
                       ?_main 0070               __end_of___ftadd 054A                 __CFG_WDTE$OFF 0000  
            __end_of_DMX_init 016F                         _ANSA2 0C62                         _ANSC0 0C70  
                       _ANSA4 0C64               __end_of___ftdiv 049C                         _ANSC1 0C71  
                       _ANSC2 0C72                         _ANSC3 0C73              __end_of_DMX_loop 03E9  
             __end_of___ftmul 05A6                         _T1CON 0018               __end_of___ftsub 0414  
             __end_of___fttol 07BF                         _T2CON 001C                         _LATC3 0873  
                       _LATC4 0874                         i1l411 0B27                         i1l762 0F96  
                       i1l771 0FED                         i1l917 0CB8                         i1l926 0CFE  
                       i1l927 0D09                         _RCREG 0199     __size_of_RDM_tx_interrupt 007F  
                       _RCSTA 019D                         _PD_ID 00D0                         _RXPPS 0E15  
                       _TXREG 019A                         _Timer 00B8              __end_of_RDM_init 0C8A  
               ___awtoft@sign 0074                 ___ftpack@sign 0024                __CFG_BOREN$OFF 0000  
                 _TX_RDM_Data 014C                         status 0003                         wtemp0 007E  
                __end_ofPL100 0724                  __end_ofPL110 0CAF                  __end_ofPL102 0D2B  
                __end_ofPL104 0728                  __end_ofPL106 0BEC                  __end_ofPL108 072C  
           ?_RDM_get_checkSum 0020            ??_RDM_get_checkSum 0074               __initialization 0015  
                __end_of_main 00B3                    _CurrentPWM 0144             ?_RDM_discovery_CC 0070  
       ??_TX_RDM_Response_Set 0074                  ?_RDM_TXSTART 0070            ??_RDM_discovery_CC 0039  
                      ??_main 0076                 ___fttol@sign1 0063           __size_of_RDM_GET_CC 0073  
                      _ADCON0 009D                        _ADCON1 009E                        i1S4679 09CC  
                      _ADRESH 009C           __size_of_RDM_SET_CC 0019              __end_of___awtoft 05C1  
            __end_of___ftpack 076A              __end_of___lbtoft 03F9                        _RA2PPS 0E92  
                      _RC0PPS 0EA0                        _RC1PPS 0EA1                        _RC2PPS 0EA2  
                      _RC4PPS 0EA4                        i1l3531 0B47                        i1l3515 0B23  
                      i1l3525 0B3C                        i1l3621 0CBE                        i1l3551 0B75  
                      i1l3615 0CB7                        i1l3529 0B44                        i1l3633 0CE0  
                      i1l3571 0B9E                        i1l3539 0B5D                        i1l3715 0FDC  
                      i1l3573 0BA0                        i1l3709 0FBE                        i1l3591 0BC9  
                      i1l3583 0BA8                        i1l3559 0B81                        i1l3719 0FDE  
                      i1l3673 0F76                        i1l3665 0D15                        i1l3595 0BCB  
                      i1l3597 0BD6                        i1l3693 0FA0                        i1l3685 0F8B  
                      i1l3679 0F80                        u230_25 0B51                        u240_25 0BE0  
                      u232_25 0B6B                        _INTCON 000B                        u243_20 0CC3  
                      u243_22 0CC4                        u244_20 0CCA                        u244_22 0CCB  
            __end_of___lwtoft 05D1                        u258_25 0FD4                        _OSCCON 0099  
      __size_of_DMX_interrput 00D9                        _TMR1IE 0488                        _TMR1IF 0088  
           _DMX_CurrentBright 00AC                        _SPBRGH 019C                        _SPBRGL 019B  
                      _TRISA2 0462                        _TRISC0 0470                        _TRISA4 0464  
                      _TRISC1 0471                        _TRISC2 0472                        _TRISC3 0473  
                      _TRISC4 0474                        _TRISC5 0475                __CFG_PWRTE$OFF 0000  
                      _RxData 00E9              _timer1_interrupt 0CAF                        _TxByte 00E2  
                      ___bmul 0C8A                        ___ftge 0414                     ??___ftadd 0050  
              __CFG_STVREN$ON 0000                     ??___ftdiv 0041                     ??___ftmul 0032  
                   ??___ftsub 0075                     ??___fttol 0060                  ?_timer1_init 0070  
                ?_RDM_rx_loop 0070                    _TimerState 00DF                        _rxdata 00E3  
       ___ftmul@f3_as_product 0036           RDM_get_checkSum@len 0038                     ?_ADC_init 0070  
                   ?_ADC_loop 0070       __end_of__initialization 0053                    ___ftadd@f1 004A  
                  ___ftadd@f2 004D                    ___ftge@ff1 002C                    ___ftge@ff2 002F  
                  ___ftdiv@f1 003E                    ___ftdiv@f2 003B                    ___ftdiv@f3 0045  
                   ?_DMX_init 0070                     ?_DMX_loop 0070                 _DMX_loop$1457 0069  
              _DMXPeriodConst 00E6                    ___awtoft@c 0028                    ___lbtoft@c 0074  
         ___bmul@multiplicand 0074                    ___ftmul@f1 002C                    ___ftmul@f2 002F  
                  ___ftsub@f1 0059                    ___ftsub@f2 0056                    ___fttol@f1 005C  
              __pcstackCOMMON 0070                  __pidataBANK1 0000                  __pidataBANK2 0000  
            _DMX_TargetBright 00A0                     ?_RDM_init 0070                    __end_ofPL2 05ED  
                  __end_ofPL4 060A                    __end_ofPL6 0627                    __end_ofPL8 062E  
               _DMX_interrput 0B0E                    ___lwtoft@c 0028              _RDM_tx_interrupt 0F6F  
                  ??_ADC_init 0074                    ??_ADC_loop 0074                    __pbssBANK1 00A0  
                  __pbssBANK2 0120                    __pbssBANK3 01A0                 _DMX_sumRepeat 016C  
                 _RxAddrCount 00DA        __size_of_ADC_interrupt 000A                    ??_DMX_init 0020  
                  ??_DMX_loop 01D4                  ??_RDM_GET_CC 0039                    __pmaintext 0056  
                ??_RDM_SET_CC 0075                       ?___bmul 0074                       ?___ftge 002C  
                  ??_RDM_init 0022                    __pintentry 0004                ?_DMX_interrput 0070  
                     _BAUDCON 019F                     ?___awtoft 0028                     ?___ftpack 0020  
                   ?___lbtoft 0028             _RDM_tx_TimerBreak 0DDB                     ?___lwtoft 0028  
        __size_of_RDM_TXSTART 001F            ?_RDM_tx_TimerBreak 0070                       _DMXSign 00C3  
                     _PWM1DCH 0D94                       _PWM1DCL 0D93                       _PWM2DCH 0DA4  
                     _PWM2DCL 0DA3                       _OSCTUNE 0098                       _PWM3DCH 0DB4  
                     _PWM3DCL 0DB3                       _PWM4DCH 0DC4                       _PWM1CON 0D9B  
                     _PWM4DCL 0DC3                       _PWM2CON 0DAB                       _PWM3CON 0DBB  
                     _PWM4CON 0DCB                       _PDCount 0079                       _PWM1PHH 0D92  
                     _PWM1PHL 0D91                       _PWM2PHH 0DA2                       _PWM2PHL 0DA1  
                     _PWM3PHH 0DB2                       _PWM3PHL 0DB1                       _PWM1PRH 0D96  
                     _PWM4PHH 0DC2                       _PWM1PRL 0D95                       _PWM4PHL 0DC1  
                     _PWM2PRH 0DA6                       _PWM2PRL 0DA5                       _PWM3PRH 0DB6  
                     _PWM3PRL 0DB5                       _PD_Flag 00CE                       _PWM4PRH 0DC6  
                     _PWM4PRL 0DC5                       _PD_Manu 00D2              _Timer_DelayCount 00DE  
          __end_of_RDM_GET_CC 0EF6                       _PWM_Pin 00BF           ??_RDM_tx_TimerBreak 0074  
          __end_of_RDM_SET_CC 0F0F                     _ADC_Flags 00DC                  DMX_init@Addr 0074  
                     _TxCount 00D4                       _RxTimer 00D8                       _RxState 00E7  
                     _TxState 00E1               __size_of___bmul 000D               __size_of___ftge 002C  
                     ___ftadd 049C                       ___ftdiv 0440                       ___ftmul 054A  
                     ___ftsub 03F9                       ___fttol 076A     __end_of_RDM_tx_TimerBreak 0DEB  
                DMX_loop@Addr 006C                    ??___awtoft 0074                    ??___ftpack 0025  
                  ??___lbtoft 0074          __size_of_timer1_init 0006                       __ptext1 05D1  
                     __ptext2 0DEB                       __ptext3 0D2B                       __ptext4 0EF6  
                     __ptext5 0E83                       __ptext6 0D9D                       __ptext7 0DBC  
                     __ptext8 0DDB                       __ptext9 0E52                 _ADC_interrupt 0AF8  
        __size_of_RDM_rx_loop 0067                    ??___lwtoft 0074     __size_of_RDM_get_checkSum 0031  
                __size_of_isr 000F      __end_of_timer1_interrupt 0D25                       clrloop0 0B03  
   __size_of_RDM_discovery_CC 0072          RDM_get_checkSum@Data 0020          end_of_initialization 0053  
                   _DMX_Flags 0076                     _DMXPeriod 00EF                _DMX_difference 00C7  
 __end_of_TX_RDM_Response_Set 0DDB               ??_DMX_interrput 0070                     _PWM1LDCON 0D9F  
                   _PWM2LDCON 0DAF                     _PWM3LDCON 0DBF                     _PWM4LDCON 0DCF  
                __pstringtext 07C6                ?_ADC_interrupt 0070                     _PWMDCHptr 01A8  
                   _PWMDCLptr 01B0              __CFG_FOSC$INTOSC 0000             __size_of_ADC_init 000C  
           __size_of_ADC_loop 0027                   ___ftdiv@exp 0048      __end_of_RDM_tx_interrupt 0FEE  
                 ___ftmul@exp 0035             __size_of_DMX_init 0089             __size_of_DMX_loop 027A  
              __end_of___bmul 0C97                __end_of___ftge 0440    __size_of_RDM_tx_TimerBreak 0010  
           __size_of_RDM_init 009E                     _PackCount 0078                   __end_ofPL10 0645  
                 __end_ofPL20 0662                   __end_ofPL12 0F25                   __end_ofPL30 0F40  
                 __end_ofPL22 0671                   __end_ofPL14 064E                   __end_ofPL40 069E  
                 __end_ofPL32 068B                   __end_ofPL24 0679                   __end_ofPL16 0654  
                 __end_ofPL50 06BE                   __end_ofPL42 0F49                   __end_ofPL34 0697  
                 __end_ofPL26 067E                   __end_ofPL18 065B                   __end_ofPL60 06D1  
                 __end_ofPL52 06C5                   __end_ofPL44 06A6                   __end_ofPL36 0CA3  
                 __end_ofPL28 0F33                   __end_ofPL70 06ED                   __end_ofPL62 06D8  
                 __end_ofPL54 06CA                   __end_ofPL46 06AE                   __end_ofPL38 0FF9  
                 __end_ofPL80 0F63                   __end_ofPL72 0F5D                   __end_ofPL64 0F56  
                 __end_ofPL56 0F4F                   __end_ofPL48 06B6                   __end_ofPL90 070C  
                 __end_ofPL82 07C6                   __end_ofPL74 1000                   __end_ofPL66 06DF  
                 __end_ofPL58 0CAA                   __end_ofPL92 0712                   __end_ofPL84 0F6A  
                 __end_ofPL76 06F4                   __end_ofPL68 06E6                   __end_ofPL94 0F6F  
                 __end_ofPL86 0700                   __end_ofPL78 06FA                   __end_ofPL96 0718  
                 __end_ofPL88 0706                   __end_ofPL98 071E           start_initialization 0015  
                 __end_of_UID 09CC                   __end_of_PWM 09C6                   __end_of_isr 0013  
                   _RxDataPtr 00E8                  _DMXStepConst 00E4              __CFG_LPBOREN$OFF 0000  
                    ??___bmul 0075                      ??___ftge 0075               ??_ADC_interrupt 0070  
                 __pdataBANK1 00EF                   __pdataBANK2 0164              _RDM_get_checkSum 0E52  
           __size_of___awtoft 001B             __size_of___ftpack 003E             __size_of___lbtoft 0010  
                 __pbssBIGRAM 218C                   __pbssCOMMON 0076                     ___latbits 0001  
           __size_of___lwtoft 0010                 __pcstackBANK0 0020                 __pcstackBANK3 01D4  
            _RDM_discovery_CC 0D2B               _DMX_SpaceBright 0138                     __pnvBANK1 00ED  
                    ?___ftadd 004A                      ?___ftdiv 003B                      ?___ftmul 002C  
                    ?___ftsub 0056                      ?___fttol 005C              __CFG_PPS1WAY$OFF 0000  
               ??_RDM_TXSTART 0074                     __pswtext1 09CC                      _ADC_Data 00DD  
                    _ADC_init 00B3                      _ADC_loop 00BF             ?_timer1_interrupt 0070  
          ??_timer1_interrupt 0070                     _preRxData 01B8                     clear_ram0 0B02  
                    _DMX_init 00E6                      _DMX_loop 016F                      _GO_nDONE 04E9  
          DMX_interrput@RxDat 0072                 ??_timer1_init 0074                      _RDM_init 0BEC  
               ??_RDM_rx_loop 0075           __end_of_RDM_TXSTART 0DBC                   _DMX_Address 00ED  
           ?_RDM_tx_interrupt 0070            ??_RDM_tx_interrupt 0070              __size_of___ftadd 00AE  
       __end_of_DMX_interrput 0BE7              __size_of___ftdiv 005C              __size_of___ftmul 005C  
            __size_of___ftsub 001B              __size_of___fttol 0055                      ___awtoft 05A6  
                    ___ftpack 072C                      ___lbtoft 03E9  __size_of_TX_RDM_Response_Set 001F  
                    ___lwtoft 05C1           __end_of_timer1_init 05D7           __end_of_RDM_rx_loop 0E52  
                    _checkSum 00CA                      __ptext10 0BEC                      __ptext11 0C8A  
                    __ptext20 0440                      __ptext12 016F                      __ptext21 05A6  
                    __ptext13 05C1                      __ptext30 0AF8                      __ptext22 072C  
                    __ptext14 03E9                      __ptext23 00E6                      __ptext15 076A  
                    __ptext24 00BF                      __ptext16 03F9                      __ptext25 00B3  
                    __ptext17 049C                      __ptext18 054A                      __ptext27 0CAF  
                    __ptext19 0414                      __ptext28 0F6F                      __ptext29 0B0E  
               __size_of_main 005D      __end_of_RDM_get_checkSum 0E83                      int$flags 007E  
    __end_of_RDM_discovery_CC 0D9D                   _RDM_TXSTART 0D9D                    _DMX_Repeat 0164  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                    _RDM_GET_CC 0E83  
                  _RDM_SET_CC 0EF6            _DISCOVERY_RDM_Data 01BC                   _timer1_init 05D1  
                  _PWM1CLKCON 0D9E                    _PWM2CLKCON 0DAE                   _RDM_rx_loop 0DEB  
                  _PWM3CLKCON 0DBE                    _PWM4CLKCON 0DCE                   _PWMLDCONptr 01A0  
       __end_of_ADC_interrupt 0B02     __size_of_timer1_interrupt 0076  
