

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Oct 03 16:15:15 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text15,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	text30,local,class=CODE,merge=1,delta=2
    24                           	psect	text31,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text32,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text33,local,class=CODE,merge=1,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x620,32
    31                           	dabs	1,0x5AC,68
    32                           	dabs	1,0x237C,0,_PD
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.41
    36                           ; Generated 25/01/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F1575 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000E                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  008C                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010E                     	;# 
   114  0111                     	;# 
   115  0112                     	;# 
   116  0113                     	;# 
   117  0114                     	;# 
   118  0115                     	;# 
   119  0116                     	;# 
   120  0117                     	;# 
   121  0118                     	;# 
   122  0119                     	;# 
   123  018C                     	;# 
   124  018E                     	;# 
   125  0191                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0194                     	;# 
   131  0195                     	;# 
   132  0196                     	;# 
   133  0197                     	;# 
   134  0199                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020E                     	;# 
   144  028C                     	;# 
   145  028E                     	;# 
   146  030C                     	;# 
   147  030E                     	;# 
   148  038C                     	;# 
   149  038E                     	;# 
   150  0391                     	;# 
   151  0392                     	;# 
   152  0393                     	;# 
   153  0397                     	;# 
   154  0398                     	;# 
   155  0399                     	;# 
   156  0691                     	;# 
   157  0692                     	;# 
   158  0693                     	;# 
   159  0694                     	;# 
   160  0695                     	;# 
   161  0D8E                     	;# 
   162  0D8F                     	;# 
   163  0D90                     	;# 
   164  0D91                     	;# 
   165  0D91                     	;# 
   166  0D92                     	;# 
   167  0D93                     	;# 
   168  0D93                     	;# 
   169  0D94                     	;# 
   170  0D95                     	;# 
   171  0D95                     	;# 
   172  0D96                     	;# 
   173  0D97                     	;# 
   174  0D97                     	;# 
   175  0D98                     	;# 
   176  0D99                     	;# 
   177  0D99                     	;# 
   178  0D9A                     	;# 
   179  0D9B                     	;# 
   180  0D9C                     	;# 
   181  0D9C                     	;# 
   182  0D9D                     	;# 
   183  0D9D                     	;# 
   184  0D9E                     	;# 
   185  0D9F                     	;# 
   186  0DA0                     	;# 
   187  0DA1                     	;# 
   188  0DA1                     	;# 
   189  0DA2                     	;# 
   190  0DA3                     	;# 
   191  0DA3                     	;# 
   192  0DA4                     	;# 
   193  0DA5                     	;# 
   194  0DA5                     	;# 
   195  0DA6                     	;# 
   196  0DA7                     	;# 
   197  0DA7                     	;# 
   198  0DA8                     	;# 
   199  0DA9                     	;# 
   200  0DA9                     	;# 
   201  0DAA                     	;# 
   202  0DAB                     	;# 
   203  0DAC                     	;# 
   204  0DAC                     	;# 
   205  0DAD                     	;# 
   206  0DAD                     	;# 
   207  0DAE                     	;# 
   208  0DAF                     	;# 
   209  0DB0                     	;# 
   210  0DB1                     	;# 
   211  0DB1                     	;# 
   212  0DB2                     	;# 
   213  0DB3                     	;# 
   214  0DB3                     	;# 
   215  0DB4                     	;# 
   216  0DB5                     	;# 
   217  0DB5                     	;# 
   218  0DB6                     	;# 
   219  0DB7                     	;# 
   220  0DB7                     	;# 
   221  0DB8                     	;# 
   222  0DB9                     	;# 
   223  0DB9                     	;# 
   224  0DBA                     	;# 
   225  0DBB                     	;# 
   226  0DBC                     	;# 
   227  0DBC                     	;# 
   228  0DBD                     	;# 
   229  0DBD                     	;# 
   230  0DBE                     	;# 
   231  0DBF                     	;# 
   232  0DC0                     	;# 
   233  0DC1                     	;# 
   234  0DC1                     	;# 
   235  0DC2                     	;# 
   236  0DC3                     	;# 
   237  0DC3                     	;# 
   238  0DC4                     	;# 
   239  0DC5                     	;# 
   240  0DC5                     	;# 
   241  0DC6                     	;# 
   242  0DC7                     	;# 
   243  0DC7                     	;# 
   244  0DC8                     	;# 
   245  0DC9                     	;# 
   246  0DC9                     	;# 
   247  0DCA                     	;# 
   248  0DCB                     	;# 
   249  0DCC                     	;# 
   250  0DCC                     	;# 
   251  0DCD                     	;# 
   252  0DCD                     	;# 
   253  0DCE                     	;# 
   254  0DCF                     	;# 
   255  0DD0                     	;# 
   256  0E0F                     	;# 
   257  0E10                     	;# 
   258  0E11                     	;# 
   259  0E12                     	;# 
   260  0E13                     	;# 
   261  0E14                     	;# 
   262  0E15                     	;# 
   263  0E16                     	;# 
   264  0E17                     	;# 
   265  0E90                     	;# 
   266  0E91                     	;# 
   267  0E92                     	;# 
   268  0E94                     	;# 
   269  0E95                     	;# 
   270  0EA0                     	;# 
   271  0EA1                     	;# 
   272  0EA2                     	;# 
   273  0EA3                     	;# 
   274  0EA4                     	;# 
   275  0EA5                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEA                     	;# 
   285  0FEB                     	;# 
   286  0FED                     	;# 
   287  0FEE                     	;# 
   288  0FEE                     	;# 
   289  0FEF                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000E                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  008C                     	;# 
   317  008E                     	;# 
   318  0091                     	;# 
   319  0092                     	;# 
   320  0093                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0098                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  009F                     	;# 
   333  010C                     	;# 
   334  010E                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0113                     	;# 
   338  0114                     	;# 
   339  0115                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  0118                     	;# 
   343  0119                     	;# 
   344  018C                     	;# 
   345  018E                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0194                     	;# 
   352  0195                     	;# 
   353  0196                     	;# 
   354  0197                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019C                     	;# 
   360  019D                     	;# 
   361  019E                     	;# 
   362  019F                     	;# 
   363  020C                     	;# 
   364  020E                     	;# 
   365  028C                     	;# 
   366  028E                     	;# 
   367  030C                     	;# 
   368  030E                     	;# 
   369  038C                     	;# 
   370  038E                     	;# 
   371  0391                     	;# 
   372  0392                     	;# 
   373  0393                     	;# 
   374  0397                     	;# 
   375  0398                     	;# 
   376  0399                     	;# 
   377  0691                     	;# 
   378  0692                     	;# 
   379  0693                     	;# 
   380  0694                     	;# 
   381  0695                     	;# 
   382  0D8E                     	;# 
   383  0D8F                     	;# 
   384  0D90                     	;# 
   385  0D91                     	;# 
   386  0D91                     	;# 
   387  0D92                     	;# 
   388  0D93                     	;# 
   389  0D93                     	;# 
   390  0D94                     	;# 
   391  0D95                     	;# 
   392  0D95                     	;# 
   393  0D96                     	;# 
   394  0D97                     	;# 
   395  0D97                     	;# 
   396  0D98                     	;# 
   397  0D99                     	;# 
   398  0D99                     	;# 
   399  0D9A                     	;# 
   400  0D9B                     	;# 
   401  0D9C                     	;# 
   402  0D9C                     	;# 
   403  0D9D                     	;# 
   404  0D9D                     	;# 
   405  0D9E                     	;# 
   406  0D9F                     	;# 
   407  0DA0                     	;# 
   408  0DA1                     	;# 
   409  0DA1                     	;# 
   410  0DA2                     	;# 
   411  0DA3                     	;# 
   412  0DA3                     	;# 
   413  0DA4                     	;# 
   414  0DA5                     	;# 
   415  0DA5                     	;# 
   416  0DA6                     	;# 
   417  0DA7                     	;# 
   418  0DA7                     	;# 
   419  0DA8                     	;# 
   420  0DA9                     	;# 
   421  0DA9                     	;# 
   422  0DAA                     	;# 
   423  0DAB                     	;# 
   424  0DAC                     	;# 
   425  0DAC                     	;# 
   426  0DAD                     	;# 
   427  0DAD                     	;# 
   428  0DAE                     	;# 
   429  0DAF                     	;# 
   430  0DB0                     	;# 
   431  0DB1                     	;# 
   432  0DB1                     	;# 
   433  0DB2                     	;# 
   434  0DB3                     	;# 
   435  0DB3                     	;# 
   436  0DB4                     	;# 
   437  0DB5                     	;# 
   438  0DB5                     	;# 
   439  0DB6                     	;# 
   440  0DB7                     	;# 
   441  0DB7                     	;# 
   442  0DB8                     	;# 
   443  0DB9                     	;# 
   444  0DB9                     	;# 
   445  0DBA                     	;# 
   446  0DBB                     	;# 
   447  0DBC                     	;# 
   448  0DBC                     	;# 
   449  0DBD                     	;# 
   450  0DBD                     	;# 
   451  0DBE                     	;# 
   452  0DBF                     	;# 
   453  0DC0                     	;# 
   454  0DC1                     	;# 
   455  0DC1                     	;# 
   456  0DC2                     	;# 
   457  0DC3                     	;# 
   458  0DC3                     	;# 
   459  0DC4                     	;# 
   460  0DC5                     	;# 
   461  0DC5                     	;# 
   462  0DC6                     	;# 
   463  0DC7                     	;# 
   464  0DC7                     	;# 
   465  0DC8                     	;# 
   466  0DC9                     	;# 
   467  0DC9                     	;# 
   468  0DCA                     	;# 
   469  0DCB                     	;# 
   470  0DCC                     	;# 
   471  0DCC                     	;# 
   472  0DCD                     	;# 
   473  0DCD                     	;# 
   474  0DCE                     	;# 
   475  0DCF                     	;# 
   476  0DD0                     	;# 
   477  0E0F                     	;# 
   478  0E10                     	;# 
   479  0E11                     	;# 
   480  0E12                     	;# 
   481  0E13                     	;# 
   482  0E14                     	;# 
   483  0E15                     	;# 
   484  0E16                     	;# 
   485  0E17                     	;# 
   486  0E90                     	;# 
   487  0E91                     	;# 
   488  0E92                     	;# 
   489  0E94                     	;# 
   490  0E95                     	;# 
   491  0EA0                     	;# 
   492  0EA1                     	;# 
   493  0EA2                     	;# 
   494  0EA3                     	;# 
   495  0EA4                     	;# 
   496  0EA5                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE8                     	;# 
   503  0FE9                     	;# 
   504  0FEA                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEE                     	;# 
   510  0FEF                     	;# 
   511  0000                     	;# 
   512  0001                     	;# 
   513  0002                     	;# 
   514  0003                     	;# 
   515  0004                     	;# 
   516  0005                     	;# 
   517  0006                     	;# 
   518  0007                     	;# 
   519  0008                     	;# 
   520  0009                     	;# 
   521  000A                     	;# 
   522  000B                     	;# 
   523  000C                     	;# 
   524  000E                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008E                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0097                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  018C                     	;# 
   566  018E                     	;# 
   567  0191                     	;# 
   568  0191                     	;# 
   569  0192                     	;# 
   570  0193                     	;# 
   571  0193                     	;# 
   572  0194                     	;# 
   573  0195                     	;# 
   574  0196                     	;# 
   575  0197                     	;# 
   576  0199                     	;# 
   577  019A                     	;# 
   578  019B                     	;# 
   579  019B                     	;# 
   580  019C                     	;# 
   581  019D                     	;# 
   582  019E                     	;# 
   583  019F                     	;# 
   584  020C                     	;# 
   585  020E                     	;# 
   586  028C                     	;# 
   587  028E                     	;# 
   588  030C                     	;# 
   589  030E                     	;# 
   590  038C                     	;# 
   591  038E                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0397                     	;# 
   596  0398                     	;# 
   597  0399                     	;# 
   598  0691                     	;# 
   599  0692                     	;# 
   600  0693                     	;# 
   601  0694                     	;# 
   602  0695                     	;# 
   603  0D8E                     	;# 
   604  0D8F                     	;# 
   605  0D90                     	;# 
   606  0D91                     	;# 
   607  0D91                     	;# 
   608  0D92                     	;# 
   609  0D93                     	;# 
   610  0D93                     	;# 
   611  0D94                     	;# 
   612  0D95                     	;# 
   613  0D95                     	;# 
   614  0D96                     	;# 
   615  0D97                     	;# 
   616  0D97                     	;# 
   617  0D98                     	;# 
   618  0D99                     	;# 
   619  0D99                     	;# 
   620  0D9A                     	;# 
   621  0D9B                     	;# 
   622  0D9C                     	;# 
   623  0D9C                     	;# 
   624  0D9D                     	;# 
   625  0D9D                     	;# 
   626  0D9E                     	;# 
   627  0D9F                     	;# 
   628  0DA0                     	;# 
   629  0DA1                     	;# 
   630  0DA1                     	;# 
   631  0DA2                     	;# 
   632  0DA3                     	;# 
   633  0DA3                     	;# 
   634  0DA4                     	;# 
   635  0DA5                     	;# 
   636  0DA5                     	;# 
   637  0DA6                     	;# 
   638  0DA7                     	;# 
   639  0DA7                     	;# 
   640  0DA8                     	;# 
   641  0DA9                     	;# 
   642  0DA9                     	;# 
   643  0DAA                     	;# 
   644  0DAB                     	;# 
   645  0DAC                     	;# 
   646  0DAC                     	;# 
   647  0DAD                     	;# 
   648  0DAD                     	;# 
   649  0DAE                     	;# 
   650  0DAF                     	;# 
   651  0DB0                     	;# 
   652  0DB1                     	;# 
   653  0DB1                     	;# 
   654  0DB2                     	;# 
   655  0DB3                     	;# 
   656  0DB3                     	;# 
   657  0DB4                     	;# 
   658  0DB5                     	;# 
   659  0DB5                     	;# 
   660  0DB6                     	;# 
   661  0DB7                     	;# 
   662  0DB7                     	;# 
   663  0DB8                     	;# 
   664  0DB9                     	;# 
   665  0DB9                     	;# 
   666  0DBA                     	;# 
   667  0DBB                     	;# 
   668  0DBC                     	;# 
   669  0DBC                     	;# 
   670  0DBD                     	;# 
   671  0DBD                     	;# 
   672  0DBE                     	;# 
   673  0DBF                     	;# 
   674  0DC0                     	;# 
   675  0DC1                     	;# 
   676  0DC1                     	;# 
   677  0DC2                     	;# 
   678  0DC3                     	;# 
   679  0DC3                     	;# 
   680  0DC4                     	;# 
   681  0DC5                     	;# 
   682  0DC5                     	;# 
   683  0DC6                     	;# 
   684  0DC7                     	;# 
   685  0DC7                     	;# 
   686  0DC8                     	;# 
   687  0DC9                     	;# 
   688  0DC9                     	;# 
   689  0DCA                     	;# 
   690  0DCB                     	;# 
   691  0DCC                     	;# 
   692  0DCC                     	;# 
   693  0DCD                     	;# 
   694  0DCD                     	;# 
   695  0DCE                     	;# 
   696  0DCF                     	;# 
   697  0DD0                     	;# 
   698  0E0F                     	;# 
   699  0E10                     	;# 
   700  0E11                     	;# 
   701  0E12                     	;# 
   702  0E13                     	;# 
   703  0E14                     	;# 
   704  0E15                     	;# 
   705  0E16                     	;# 
   706  0E17                     	;# 
   707  0E90                     	;# 
   708  0E91                     	;# 
   709  0E92                     	;# 
   710  0E94                     	;# 
   711  0E95                     	;# 
   712  0EA0                     	;# 
   713  0EA1                     	;# 
   714  0EA2                     	;# 
   715  0EA3                     	;# 
   716  0EA4                     	;# 
   717  0EA5                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000E                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0015                     	;# 
   750  0016                     	;# 
   751  0016                     	;# 
   752  0017                     	;# 
   753  0018                     	;# 
   754  0019                     	;# 
   755  001A                     	;# 
   756  001B                     	;# 
   757  001C                     	;# 
   758  008C                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009B                     	;# 
   771  009C                     	;# 
   772  009D                     	;# 
   773  009E                     	;# 
   774  009F                     	;# 
   775  010C                     	;# 
   776  010E                     	;# 
   777  0111                     	;# 
   778  0112                     	;# 
   779  0113                     	;# 
   780  0114                     	;# 
   781  0115                     	;# 
   782  0116                     	;# 
   783  0117                     	;# 
   784  0118                     	;# 
   785  0119                     	;# 
   786  018C                     	;# 
   787  018E                     	;# 
   788  0191                     	;# 
   789  0191                     	;# 
   790  0192                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0194                     	;# 
   794  0195                     	;# 
   795  0196                     	;# 
   796  0197                     	;# 
   797  0199                     	;# 
   798  019A                     	;# 
   799  019B                     	;# 
   800  019B                     	;# 
   801  019C                     	;# 
   802  019D                     	;# 
   803  019E                     	;# 
   804  019F                     	;# 
   805  020C                     	;# 
   806  020E                     	;# 
   807  028C                     	;# 
   808  028E                     	;# 
   809  030C                     	;# 
   810  030E                     	;# 
   811  038C                     	;# 
   812  038E                     	;# 
   813  0391                     	;# 
   814  0392                     	;# 
   815  0393                     	;# 
   816  0397                     	;# 
   817  0398                     	;# 
   818  0399                     	;# 
   819  0691                     	;# 
   820  0692                     	;# 
   821  0693                     	;# 
   822  0694                     	;# 
   823  0695                     	;# 
   824  0D8E                     	;# 
   825  0D8F                     	;# 
   826  0D90                     	;# 
   827  0D91                     	;# 
   828  0D91                     	;# 
   829  0D92                     	;# 
   830  0D93                     	;# 
   831  0D93                     	;# 
   832  0D94                     	;# 
   833  0D95                     	;# 
   834  0D95                     	;# 
   835  0D96                     	;# 
   836  0D97                     	;# 
   837  0D97                     	;# 
   838  0D98                     	;# 
   839  0D99                     	;# 
   840  0D99                     	;# 
   841  0D9A                     	;# 
   842  0D9B                     	;# 
   843  0D9C                     	;# 
   844  0D9C                     	;# 
   845  0D9D                     	;# 
   846  0D9D                     	;# 
   847  0D9E                     	;# 
   848  0D9F                     	;# 
   849  0DA0                     	;# 
   850  0DA1                     	;# 
   851  0DA1                     	;# 
   852  0DA2                     	;# 
   853  0DA3                     	;# 
   854  0DA3                     	;# 
   855  0DA4                     	;# 
   856  0DA5                     	;# 
   857  0DA5                     	;# 
   858  0DA6                     	;# 
   859  0DA7                     	;# 
   860  0DA7                     	;# 
   861  0DA8                     	;# 
   862  0DA9                     	;# 
   863  0DA9                     	;# 
   864  0DAA                     	;# 
   865  0DAB                     	;# 
   866  0DAC                     	;# 
   867  0DAC                     	;# 
   868  0DAD                     	;# 
   869  0DAD                     	;# 
   870  0DAE                     	;# 
   871  0DAF                     	;# 
   872  0DB0                     	;# 
   873  0DB1                     	;# 
   874  0DB1                     	;# 
   875  0DB2                     	;# 
   876  0DB3                     	;# 
   877  0DB3                     	;# 
   878  0DB4                     	;# 
   879  0DB5                     	;# 
   880  0DB5                     	;# 
   881  0DB6                     	;# 
   882  0DB7                     	;# 
   883  0DB7                     	;# 
   884  0DB8                     	;# 
   885  0DB9                     	;# 
   886  0DB9                     	;# 
   887  0DBA                     	;# 
   888  0DBB                     	;# 
   889  0DBC                     	;# 
   890  0DBC                     	;# 
   891  0DBD                     	;# 
   892  0DBD                     	;# 
   893  0DBE                     	;# 
   894  0DBF                     	;# 
   895  0DC0                     	;# 
   896  0DC1                     	;# 
   897  0DC1                     	;# 
   898  0DC2                     	;# 
   899  0DC3                     	;# 
   900  0DC3                     	;# 
   901  0DC4                     	;# 
   902  0DC5                     	;# 
   903  0DC5                     	;# 
   904  0DC6                     	;# 
   905  0DC7                     	;# 
   906  0DC7                     	;# 
   907  0DC8                     	;# 
   908  0DC9                     	;# 
   909  0DC9                     	;# 
   910  0DCA                     	;# 
   911  0DCB                     	;# 
   912  0DCC                     	;# 
   913  0DCC                     	;# 
   914  0DCD                     	;# 
   915  0DCD                     	;# 
   916  0DCE                     	;# 
   917  0DCF                     	;# 
   918  0DD0                     	;# 
   919  0E0F                     	;# 
   920  0E10                     	;# 
   921  0E11                     	;# 
   922  0E12                     	;# 
   923  0E13                     	;# 
   924  0E14                     	;# 
   925  0E15                     	;# 
   926  0E16                     	;# 
   927  0E17                     	;# 
   928  0E90                     	;# 
   929  0E91                     	;# 
   930  0E92                     	;# 
   931  0E94                     	;# 
   932  0E95                     	;# 
   933  0EA0                     	;# 
   934  0EA1                     	;# 
   935  0EA2                     	;# 
   936  0EA3                     	;# 
   937  0EA4                     	;# 
   938  0EA5                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE8                     	;# 
   945  0FE9                     	;# 
   946  0FEA                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEE                     	;# 
   952  0FEF                     	;# 
   953  0000                     	;# 
   954  0001                     	;# 
   955  0002                     	;# 
   956  0003                     	;# 
   957  0004                     	;# 
   958  0005                     	;# 
   959  0006                     	;# 
   960  0007                     	;# 
   961  0008                     	;# 
   962  0009                     	;# 
   963  000A                     	;# 
   964  000B                     	;# 
   965  000C                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008E                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0093                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  009F                     	;# 
   996  010C                     	;# 
   997  010E                     	;# 
   998  0111                     	;# 
   999  0112                     	;# 
  1000  0113                     	;# 
  1001  0114                     	;# 
  1002  0115                     	;# 
  1003  0116                     	;# 
  1004  0117                     	;# 
  1005  0118                     	;# 
  1006  0119                     	;# 
  1007  018C                     	;# 
  1008  018E                     	;# 
  1009  0191                     	;# 
  1010  0191                     	;# 
  1011  0192                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0194                     	;# 
  1015  0195                     	;# 
  1016  0196                     	;# 
  1017  0197                     	;# 
  1018  0199                     	;# 
  1019  019A                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020C                     	;# 
  1027  020E                     	;# 
  1028  028C                     	;# 
  1029  028E                     	;# 
  1030  030C                     	;# 
  1031  030E                     	;# 
  1032  038C                     	;# 
  1033  038E                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  0397                     	;# 
  1038  0398                     	;# 
  1039  0399                     	;# 
  1040  0691                     	;# 
  1041  0692                     	;# 
  1042  0693                     	;# 
  1043  0694                     	;# 
  1044  0695                     	;# 
  1045  0D8E                     	;# 
  1046  0D8F                     	;# 
  1047  0D90                     	;# 
  1048  0D91                     	;# 
  1049  0D91                     	;# 
  1050  0D92                     	;# 
  1051  0D93                     	;# 
  1052  0D93                     	;# 
  1053  0D94                     	;# 
  1054  0D95                     	;# 
  1055  0D95                     	;# 
  1056  0D96                     	;# 
  1057  0D97                     	;# 
  1058  0D97                     	;# 
  1059  0D98                     	;# 
  1060  0D99                     	;# 
  1061  0D99                     	;# 
  1062  0D9A                     	;# 
  1063  0D9B                     	;# 
  1064  0D9C                     	;# 
  1065  0D9C                     	;# 
  1066  0D9D                     	;# 
  1067  0D9D                     	;# 
  1068  0D9E                     	;# 
  1069  0D9F                     	;# 
  1070  0DA0                     	;# 
  1071  0DA1                     	;# 
  1072  0DA1                     	;# 
  1073  0DA2                     	;# 
  1074  0DA3                     	;# 
  1075  0DA3                     	;# 
  1076  0DA4                     	;# 
  1077  0DA5                     	;# 
  1078  0DA5                     	;# 
  1079  0DA6                     	;# 
  1080  0DA7                     	;# 
  1081  0DA7                     	;# 
  1082  0DA8                     	;# 
  1083  0DA9                     	;# 
  1084  0DA9                     	;# 
  1085  0DAA                     	;# 
  1086  0DAB                     	;# 
  1087  0DAC                     	;# 
  1088  0DAC                     	;# 
  1089  0DAD                     	;# 
  1090  0DAD                     	;# 
  1091  0DAE                     	;# 
  1092  0DAF                     	;# 
  1093  0DB0                     	;# 
  1094  0DB1                     	;# 
  1095  0DB1                     	;# 
  1096  0DB2                     	;# 
  1097  0DB3                     	;# 
  1098  0DB3                     	;# 
  1099  0DB4                     	;# 
  1100  0DB5                     	;# 
  1101  0DB5                     	;# 
  1102  0DB6                     	;# 
  1103  0DB7                     	;# 
  1104  0DB7                     	;# 
  1105  0DB8                     	;# 
  1106  0DB9                     	;# 
  1107  0DB9                     	;# 
  1108  0DBA                     	;# 
  1109  0DBB                     	;# 
  1110  0DBC                     	;# 
  1111  0DBC                     	;# 
  1112  0DBD                     	;# 
  1113  0DBD                     	;# 
  1114  0DBE                     	;# 
  1115  0DBF                     	;# 
  1116  0DC0                     	;# 
  1117  0DC1                     	;# 
  1118  0DC1                     	;# 
  1119  0DC2                     	;# 
  1120  0DC3                     	;# 
  1121  0DC3                     	;# 
  1122  0DC4                     	;# 
  1123  0DC5                     	;# 
  1124  0DC5                     	;# 
  1125  0DC6                     	;# 
  1126  0DC7                     	;# 
  1127  0DC7                     	;# 
  1128  0DC8                     	;# 
  1129  0DC9                     	;# 
  1130  0DC9                     	;# 
  1131  0DCA                     	;# 
  1132  0DCB                     	;# 
  1133  0DCC                     	;# 
  1134  0DCC                     	;# 
  1135  0DCD                     	;# 
  1136  0DCD                     	;# 
  1137  0DCE                     	;# 
  1138  0DCF                     	;# 
  1139  0DD0                     	;# 
  1140  0E0F                     	;# 
  1141  0E10                     	;# 
  1142  0E11                     	;# 
  1143  0E12                     	;# 
  1144  0E13                     	;# 
  1145  0E14                     	;# 
  1146  0E15                     	;# 
  1147  0E16                     	;# 
  1148  0E17                     	;# 
  1149  0E90                     	;# 
  1150  0E91                     	;# 
  1151  0E92                     	;# 
  1152  0E94                     	;# 
  1153  0E95                     	;# 
  1154  0EA0                     	;# 
  1155  0EA1                     	;# 
  1156  0EA2                     	;# 
  1157  0EA3                     	;# 
  1158  0EA4                     	;# 
  1159  0EA5                     	;# 
  1160  0FE4                     	;# 
  1161  0FE5                     	;# 
  1162  0FE6                     	;# 
  1163  0FE7                     	;# 
  1164  0FE8                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEA                     	;# 
  1169  0FEB                     	;# 
  1170  0FED                     	;# 
  1171  0FEE                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000E                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0013                     	;# 
  1191  0015                     	;# 
  1192  0016                     	;# 
  1193  0016                     	;# 
  1194  0017                     	;# 
  1195  0018                     	;# 
  1196  0019                     	;# 
  1197  001A                     	;# 
  1198  001B                     	;# 
  1199  001C                     	;# 
  1200  008C                     	;# 
  1201  008E                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0098                     	;# 
  1209  0099                     	;# 
  1210  009A                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  009F                     	;# 
  1217  010C                     	;# 
  1218  010E                     	;# 
  1219  0111                     	;# 
  1220  0112                     	;# 
  1221  0113                     	;# 
  1222  0114                     	;# 
  1223  0115                     	;# 
  1224  0116                     	;# 
  1225  0117                     	;# 
  1226  0118                     	;# 
  1227  0119                     	;# 
  1228  018C                     	;# 
  1229  018E                     	;# 
  1230  0191                     	;# 
  1231  0191                     	;# 
  1232  0192                     	;# 
  1233  0193                     	;# 
  1234  0193                     	;# 
  1235  0194                     	;# 
  1236  0195                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0199                     	;# 
  1240  019A                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020C                     	;# 
  1248  020E                     	;# 
  1249  028C                     	;# 
  1250  028E                     	;# 
  1251  030C                     	;# 
  1252  030E                     	;# 
  1253  038C                     	;# 
  1254  038E                     	;# 
  1255  0391                     	;# 
  1256  0392                     	;# 
  1257  0393                     	;# 
  1258  0397                     	;# 
  1259  0398                     	;# 
  1260  0399                     	;# 
  1261  0691                     	;# 
  1262  0692                     	;# 
  1263  0693                     	;# 
  1264  0694                     	;# 
  1265  0695                     	;# 
  1266  0D8E                     	;# 
  1267  0D8F                     	;# 
  1268  0D90                     	;# 
  1269  0D91                     	;# 
  1270  0D91                     	;# 
  1271  0D92                     	;# 
  1272  0D93                     	;# 
  1273  0D93                     	;# 
  1274  0D94                     	;# 
  1275  0D95                     	;# 
  1276  0D95                     	;# 
  1277  0D96                     	;# 
  1278  0D97                     	;# 
  1279  0D97                     	;# 
  1280  0D98                     	;# 
  1281  0D99                     	;# 
  1282  0D99                     	;# 
  1283  0D9A                     	;# 
  1284  0D9B                     	;# 
  1285  0D9C                     	;# 
  1286  0D9C                     	;# 
  1287  0D9D                     	;# 
  1288  0D9D                     	;# 
  1289  0D9E                     	;# 
  1290  0D9F                     	;# 
  1291  0DA0                     	;# 
  1292  0DA1                     	;# 
  1293  0DA1                     	;# 
  1294  0DA2                     	;# 
  1295  0DA3                     	;# 
  1296  0DA3                     	;# 
  1297  0DA4                     	;# 
  1298  0DA5                     	;# 
  1299  0DA5                     	;# 
  1300  0DA6                     	;# 
  1301  0DA7                     	;# 
  1302  0DA7                     	;# 
  1303  0DA8                     	;# 
  1304  0DA9                     	;# 
  1305  0DA9                     	;# 
  1306  0DAA                     	;# 
  1307  0DAB                     	;# 
  1308  0DAC                     	;# 
  1309  0DAC                     	;# 
  1310  0DAD                     	;# 
  1311  0DAD                     	;# 
  1312  0DAE                     	;# 
  1313  0DAF                     	;# 
  1314  0DB0                     	;# 
  1315  0DB1                     	;# 
  1316  0DB1                     	;# 
  1317  0DB2                     	;# 
  1318  0DB3                     	;# 
  1319  0DB3                     	;# 
  1320  0DB4                     	;# 
  1321  0DB5                     	;# 
  1322  0DB5                     	;# 
  1323  0DB6                     	;# 
  1324  0DB7                     	;# 
  1325  0DB7                     	;# 
  1326  0DB8                     	;# 
  1327  0DB9                     	;# 
  1328  0DB9                     	;# 
  1329  0DBA                     	;# 
  1330  0DBB                     	;# 
  1331  0DBC                     	;# 
  1332  0DBC                     	;# 
  1333  0DBD                     	;# 
  1334  0DBD                     	;# 
  1335  0DBE                     	;# 
  1336  0DBF                     	;# 
  1337  0DC0                     	;# 
  1338  0DC1                     	;# 
  1339  0DC1                     	;# 
  1340  0DC2                     	;# 
  1341  0DC3                     	;# 
  1342  0DC3                     	;# 
  1343  0DC4                     	;# 
  1344  0DC5                     	;# 
  1345  0DC5                     	;# 
  1346  0DC6                     	;# 
  1347  0DC7                     	;# 
  1348  0DC7                     	;# 
  1349  0DC8                     	;# 
  1350  0DC9                     	;# 
  1351  0DC9                     	;# 
  1352  0DCA                     	;# 
  1353  0DCB                     	;# 
  1354  0DCC                     	;# 
  1355  0DCC                     	;# 
  1356  0DCD                     	;# 
  1357  0DCD                     	;# 
  1358  0DCE                     	;# 
  1359  0DCF                     	;# 
  1360  0DD0                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E90                     	;# 
  1371  0E91                     	;# 
  1372  0E92                     	;# 
  1373  0E94                     	;# 
  1374  0E95                     	;# 
  1375  0EA0                     	;# 
  1376  0EA1                     	;# 
  1377  0EA2                     	;# 
  1378  0EA3                     	;# 
  1379  0EA4                     	;# 
  1380  0EA5                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE8                     	;# 
  1387  0FE9                     	;# 
  1388  0FEA                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEE                     	;# 
  1394  0FEF                     	;# 
  1395  0000                     	;# 
  1396  0001                     	;# 
  1397  0002                     	;# 
  1398  0003                     	;# 
  1399  0004                     	;# 
  1400  0005                     	;# 
  1401  0006                     	;# 
  1402  0007                     	;# 
  1403  0008                     	;# 
  1404  0009                     	;# 
  1405  000A                     	;# 
  1406  000B                     	;# 
  1407  000C                     	;# 
  1408  000E                     	;# 
  1409  0011                     	;# 
  1410  0012                     	;# 
  1411  0013                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008E                     	;# 
  1423  0091                     	;# 
  1424  0092                     	;# 
  1425  0093                     	;# 
  1426  0095                     	;# 
  1427  0096                     	;# 
  1428  0097                     	;# 
  1429  0098                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  009F                     	;# 
  1438  010C                     	;# 
  1439  010E                     	;# 
  1440  0111                     	;# 
  1441  0112                     	;# 
  1442  0113                     	;# 
  1443  0114                     	;# 
  1444  0115                     	;# 
  1445  0116                     	;# 
  1446  0117                     	;# 
  1447  0118                     	;# 
  1448  0119                     	;# 
  1449  018C                     	;# 
  1450  018E                     	;# 
  1451  0191                     	;# 
  1452  0191                     	;# 
  1453  0192                     	;# 
  1454  0193                     	;# 
  1455  0193                     	;# 
  1456  0194                     	;# 
  1457  0195                     	;# 
  1458  0196                     	;# 
  1459  0197                     	;# 
  1460  0199                     	;# 
  1461  019A                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019C                     	;# 
  1465  019D                     	;# 
  1466  019E                     	;# 
  1467  019F                     	;# 
  1468  020C                     	;# 
  1469  020E                     	;# 
  1470  028C                     	;# 
  1471  028E                     	;# 
  1472  030C                     	;# 
  1473  030E                     	;# 
  1474  038C                     	;# 
  1475  038E                     	;# 
  1476  0391                     	;# 
  1477  0392                     	;# 
  1478  0393                     	;# 
  1479  0397                     	;# 
  1480  0398                     	;# 
  1481  0399                     	;# 
  1482  0691                     	;# 
  1483  0692                     	;# 
  1484  0693                     	;# 
  1485  0694                     	;# 
  1486  0695                     	;# 
  1487  0D8E                     	;# 
  1488  0D8F                     	;# 
  1489  0D90                     	;# 
  1490  0D91                     	;# 
  1491  0D91                     	;# 
  1492  0D92                     	;# 
  1493  0D93                     	;# 
  1494  0D93                     	;# 
  1495  0D94                     	;# 
  1496  0D95                     	;# 
  1497  0D95                     	;# 
  1498  0D96                     	;# 
  1499  0D97                     	;# 
  1500  0D97                     	;# 
  1501  0D98                     	;# 
  1502  0D99                     	;# 
  1503  0D99                     	;# 
  1504  0D9A                     	;# 
  1505  0D9B                     	;# 
  1506  0D9C                     	;# 
  1507  0D9C                     	;# 
  1508  0D9D                     	;# 
  1509  0D9D                     	;# 
  1510  0D9E                     	;# 
  1511  0D9F                     	;# 
  1512  0DA0                     	;# 
  1513  0DA1                     	;# 
  1514  0DA1                     	;# 
  1515  0DA2                     	;# 
  1516  0DA3                     	;# 
  1517  0DA3                     	;# 
  1518  0DA4                     	;# 
  1519  0DA5                     	;# 
  1520  0DA5                     	;# 
  1521  0DA6                     	;# 
  1522  0DA7                     	;# 
  1523  0DA7                     	;# 
  1524  0DA8                     	;# 
  1525  0DA9                     	;# 
  1526  0DA9                     	;# 
  1527  0DAA                     	;# 
  1528  0DAB                     	;# 
  1529  0DAC                     	;# 
  1530  0DAC                     	;# 
  1531  0DAD                     	;# 
  1532  0DAD                     	;# 
  1533  0DAE                     	;# 
  1534  0DAF                     	;# 
  1535  0DB0                     	;# 
  1536  0DB1                     	;# 
  1537  0DB1                     	;# 
  1538  0DB2                     	;# 
  1539  0DB3                     	;# 
  1540  0DB3                     	;# 
  1541  0DB4                     	;# 
  1542  0DB5                     	;# 
  1543  0DB5                     	;# 
  1544  0DB6                     	;# 
  1545  0DB7                     	;# 
  1546  0DB7                     	;# 
  1547  0DB8                     	;# 
  1548  0DB9                     	;# 
  1549  0DB9                     	;# 
  1550  0DBA                     	;# 
  1551  0DBB                     	;# 
  1552  0DBC                     	;# 
  1553  0DBC                     	;# 
  1554  0DBD                     	;# 
  1555  0DBD                     	;# 
  1556  0DBE                     	;# 
  1557  0DBF                     	;# 
  1558  0DC0                     	;# 
  1559  0DC1                     	;# 
  1560  0DC1                     	;# 
  1561  0DC2                     	;# 
  1562  0DC3                     	;# 
  1563  0DC3                     	;# 
  1564  0DC4                     	;# 
  1565  0DC5                     	;# 
  1566  0DC5                     	;# 
  1567  0DC6                     	;# 
  1568  0DC7                     	;# 
  1569  0DC7                     	;# 
  1570  0DC8                     	;# 
  1571  0DC9                     	;# 
  1572  0DC9                     	;# 
  1573  0DCA                     	;# 
  1574  0DCB                     	;# 
  1575  0DCC                     	;# 
  1576  0DCC                     	;# 
  1577  0DCD                     	;# 
  1578  0DCD                     	;# 
  1579  0DCE                     	;# 
  1580  0DCF                     	;# 
  1581  0DD0                     	;# 
  1582  0E0F                     	;# 
  1583  0E10                     	;# 
  1584  0E11                     	;# 
  1585  0E12                     	;# 
  1586  0E13                     	;# 
  1587  0E14                     	;# 
  1588  0E15                     	;# 
  1589  0E16                     	;# 
  1590  0E17                     	;# 
  1591  0E90                     	;# 
  1592  0E91                     	;# 
  1593  0E92                     	;# 
  1594  0E94                     	;# 
  1595  0E95                     	;# 
  1596  0EA0                     	;# 
  1597  0EA1                     	;# 
  1598  0EA2                     	;# 
  1599  0EA3                     	;# 
  1600  0EA4                     	;# 
  1601  0EA5                     	;# 
  1602  0FE4                     	;# 
  1603  0FE5                     	;# 
  1604  0FE6                     	;# 
  1605  0FE7                     	;# 
  1606  0FE8                     	;# 
  1607  0FE8                     	;# 
  1608  0FE9                     	;# 
  1609  0FEA                     	;# 
  1610  0FEA                     	;# 
  1611  0FEB                     	;# 
  1612  0FED                     	;# 
  1613  0FEE                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;_PD
  1616                           
  1617                           	psect	idataBANK1
  1618  0000                     __pidataBANK1:	
  1619                           
  1620                           	psect	idataBANK2
  1621  0000                     __pidataBANK2:	
  1622                           
  1623                           	psect	idataBANK3
  1624  0000                     __pidataBANK3:	
  1625                           
  1626                           	psect	stringtext
  1627  1000                     __pstringtext:	
  1628  1000                     _PWM:	
  1629  1000  3400               	retlw	0
  1630  1001  3400               	retlw	0
  1631  1002  34C8               	retlw	200
  1632  1003  3400               	retlw	0
  1633  1004  34CC               	retlw	204
  1634  1005  3400               	retlw	0
  1635  1006  34D1               	retlw	209
  1636  1007  3400               	retlw	0
  1637  1008  34D6               	retlw	214
  1638  1009  3400               	retlw	0
  1639  100A  34DB               	retlw	219
  1640  100B  3400               	retlw	0
  1641  100C  34E1               	retlw	225
  1642  100D  3400               	retlw	0
  1643  100E  34E6               	retlw	230
  1644  100F  3400               	retlw	0
  1645  1010  34EC               	retlw	236
  1646  1011  3400               	retlw	0
  1647  1012  34F1               	retlw	241
  1648  1013  3400               	retlw	0
  1649  1014  34F7               	retlw	247
  1650  1015  3400               	retlw	0
  1651  1016  34FD               	retlw	253
  1652  1017  3400               	retlw	0
  1653  1018  3403               	retlw	3
  1654  1019  3401               	retlw	1
  1655  101A  3409               	retlw	9
  1656  101B  3401               	retlw	1
  1657  101C  3410               	retlw	16
  1658  101D  3401               	retlw	1
  1659  101E  3416               	retlw	22
  1660  101F  3401               	retlw	1
  1661  1020  341D               	retlw	29
  1662  1021  3401               	retlw	1
  1663  1022  3424               	retlw	36
  1664  1023  3401               	retlw	1
  1665  1024  342B               	retlw	43
  1666  1025  3401               	retlw	1
  1667  1026  3432               	retlw	50
  1668  1027  3401               	retlw	1
  1669  1028  3439               	retlw	57
  1670  1029  3401               	retlw	1
  1671  102A  3441               	retlw	65
  1672  102B  3401               	retlw	1
  1673  102C  3449               	retlw	73
  1674  102D  3401               	retlw	1
  1675  102E  3451               	retlw	81
  1676  102F  3401               	retlw	1
  1677  1030  3459               	retlw	89
  1678  1031  3401               	retlw	1
  1679  1032  3461               	retlw	97
  1680  1033  3401               	retlw	1
  1681  1034  346A               	retlw	106
  1682  1035  3401               	retlw	1
  1683  1036  3472               	retlw	114
  1684  1037  3401               	retlw	1
  1685  1038  347B               	retlw	123
  1686  1039  3401               	retlw	1
  1687  103A  3484               	retlw	132
  1688  103B  3401               	retlw	1
  1689  103C  348E               	retlw	142
  1690  103D  3401               	retlw	1
  1691  103E  3497               	retlw	151
  1692  103F  3401               	retlw	1
  1693  1040  34A1               	retlw	161
  1694  1041  3401               	retlw	1
  1695  1042  34AB               	retlw	171
  1696  1043  3401               	retlw	1
  1697  1044  34B5               	retlw	181
  1698  1045  3401               	retlw	1
  1699  1046  34C0               	retlw	192
  1700  1047  3401               	retlw	1
  1701  1048  34CB               	retlw	203
  1702  1049  3401               	retlw	1
  1703  104A  34D6               	retlw	214
  1704  104B  3401               	retlw	1
  1705  104C  34E1               	retlw	225
  1706  104D  3401               	retlw	1
  1707  104E  34EC               	retlw	236
  1708  104F  3401               	retlw	1
  1709  1050  34F8               	retlw	248
  1710  1051  3401               	retlw	1
  1711  1052  3404               	retlw	4
  1712  1053  3402               	retlw	2
  1713  1054  3411               	retlw	17
  1714  1055  3402               	retlw	2
  1715  1056  341E               	retlw	30
  1716  1057  3402               	retlw	2
  1717  1058  342B               	retlw	43
  1718  1059  3402               	retlw	2
  1719  105A  3438               	retlw	56
  1720  105B  3402               	retlw	2
  1721  105C  3446               	retlw	70
  1722  105D  3402               	retlw	2
  1723  105E  3454               	retlw	84
  1724  105F  3402               	retlw	2
  1725  1060  3462               	retlw	98
  1726  1061  3402               	retlw	2
  1727  1062  3470               	retlw	112
  1728  1063  3402               	retlw	2
  1729  1064  3480               	retlw	128
  1730  1065  3402               	retlw	2
  1731  1066  348F               	retlw	143
  1732  1067  3402               	retlw	2
  1733  1068  349F               	retlw	159
  1734  1069  3402               	retlw	2
  1735  106A  34AF               	retlw	175
  1736  106B  3402               	retlw	2
  1737  106C  34BF               	retlw	191
  1738  106D  3402               	retlw	2
  1739  106E  34D0               	retlw	208
  1740  106F  3402               	retlw	2
  1741  1070  34E1               	retlw	225
  1742  1071  3402               	retlw	2
  1743  1072  34F3               	retlw	243
  1744  1073  3402               	retlw	2
  1745  1074  3405               	retlw	5
  1746  1075  3403               	retlw	3
  1747  1076  3418               	retlw	24
  1748  1077  3403               	retlw	3
  1749  1078  342B               	retlw	43
  1750  1079  3403               	retlw	3
  1751  107A  343E               	retlw	62
  1752  107B  3403               	retlw	3
  1753  107C  3452               	retlw	82
  1754  107D  3403               	retlw	3
  1755  107E  3467               	retlw	103
  1756  107F  3403               	retlw	3
  1757  1080  347C               	retlw	124
  1758  1081  3403               	retlw	3
  1759  1082  3491               	retlw	145
  1760  1083  3403               	retlw	3
  1761  1084  34A7               	retlw	167
  1762  1085  3403               	retlw	3
  1763  1086  34BE               	retlw	190
  1764  1087  3403               	retlw	3
  1765  1088  34D5               	retlw	213
  1766  1089  3403               	retlw	3
  1767  108A  34EC               	retlw	236
  1768  108B  3403               	retlw	3
  1769  108C  3404               	retlw	4
  1770  108D  3404               	retlw	4
  1771  108E  341D               	retlw	29
  1772  108F  3404               	retlw	4
  1773  1090  3436               	retlw	54
  1774  1091  3404               	retlw	4
  1775  1092  3450               	retlw	80
  1776  1093  3404               	retlw	4
  1777  1094  346B               	retlw	107
  1778  1095  3404               	retlw	4
  1779  1096  3486               	retlw	134
  1780  1097  3404               	retlw	4
  1781  1098  34A2               	retlw	162
  1782  1099  3404               	retlw	4
  1783  109A  34BE               	retlw	190
  1784  109B  3404               	retlw	4
  1785  109C  34DC               	retlw	220
  1786  109D  3404               	retlw	4
  1787  109E  34F9               	retlw	249
  1788  109F  3404               	retlw	4
  1789  10A0  3418               	retlw	24
  1790  10A1  3405               	retlw	5
  1791  10A2  3437               	retlw	55
  1792  10A3  3405               	retlw	5
  1793  10A4  3457               	retlw	87
  1794  10A5  3405               	retlw	5
  1795  10A6  3478               	retlw	120
  1796  10A7  3405               	retlw	5
  1797  10A8  349A               	retlw	154
  1798  10A9  3405               	retlw	5
  1799  10AA  34BC               	retlw	188
  1800  10AB  3405               	retlw	5
  1801  10AC  34E0               	retlw	224
  1802  10AD  3405               	retlw	5
  1803  10AE  3404               	retlw	4
  1804  10AF  3406               	retlw	6
  1805  10B0  3429               	retlw	41
  1806  10B1  3406               	retlw	6
  1807  10B2  344F               	retlw	79
  1808  10B3  3406               	retlw	6
  1809  10B4  3476               	retlw	118
  1810  10B5  3406               	retlw	6
  1811  10B6  349D               	retlw	157
  1812  10B7  3406               	retlw	6
  1813  10B8  34C6               	retlw	198
  1814  10B9  3406               	retlw	6
  1815  10BA  34F0               	retlw	240
  1816  10BB  3406               	retlw	6
  1817  10BC  341A               	retlw	26
  1818  10BD  3407               	retlw	7
  1819  10BE  3446               	retlw	70
  1820  10BF  3407               	retlw	7
  1821  10C0  3473               	retlw	115
  1822  10C1  3407               	retlw	7
  1823  10C2  34A1               	retlw	161
  1824  10C3  3407               	retlw	7
  1825  10C4  34CF               	retlw	207
  1826  10C5  3407               	retlw	7
  1827  10C6  3400               	retlw	0
  1828  10C7  3408               	retlw	8
  1829  10C8  3431               	retlw	49
  1830  10C9  3408               	retlw	8
  1831  10CA  3463               	retlw	99
  1832  10CB  3408               	retlw	8
  1833  10CC  3497               	retlw	151
  1834  10CD  3408               	retlw	8
  1835  10CE  34CB               	retlw	203
  1836  10CF  3408               	retlw	8
  1837  10D0  3402               	retlw	2
  1838  10D1  3409               	retlw	9
  1839  10D2  3439               	retlw	57
  1840  10D3  3409               	retlw	9
  1841  10D4  3472               	retlw	114
  1842  10D5  3409               	retlw	9
  1843  10D6  34AC               	retlw	172
  1844  10D7  3409               	retlw	9
  1845  10D8  34E7               	retlw	231
  1846  10D9  3409               	retlw	9
  1847  10DA  3424               	retlw	36
  1848  10DB  340A               	retlw	10
  1849  10DC  3463               	retlw	99
  1850  10DD  340A               	retlw	10
  1851  10DE  34A2               	retlw	162
  1852  10DF  340A               	retlw	10
  1853  10E0  34E4               	retlw	228
  1854  10E1  340A               	retlw	10
  1855  10E2  3427               	retlw	39
  1856  10E3  340B               	retlw	11
  1857  10E4  346B               	retlw	107
  1858  10E5  340B               	retlw	11
  1859  10E6  34B2               	retlw	178
  1860  10E7  340B               	retlw	11
  1861  10E8  34FA               	retlw	250
  1862  10E9  340B               	retlw	11
  1863  10EA  3443               	retlw	67
  1864  10EB  340C               	retlw	12
  1865  10EC  348F               	retlw	143
  1866  10ED  340C               	retlw	12
  1867  10EE  34DC               	retlw	220
  1868  10EF  340C               	retlw	12
  1869  10F0  342B               	retlw	43
  1870  10F1  340D               	retlw	13
  1871  10F2  347C               	retlw	124
  1872  10F3  340D               	retlw	13
  1873  10F4  34CF               	retlw	207
  1874  10F5  340D               	retlw	13
  1875  10F6  3424               	retlw	36
  1876  10F7  340E               	retlw	14
  1877  10F8  347B               	retlw	123
  1878  10F9  340E               	retlw	14
  1879  10FA  34D4               	retlw	212
  1880  10FB  340E               	retlw	14
  1881  10FC  342F               	retlw	47
  1882  10FD  340F               	retlw	15
  1883  10FE  348C               	retlw	140
  1884  10FF  340F               	retlw	15
  1885  1100  34EC               	retlw	236
  1886  1101  340F               	retlw	15
  1887  1102  344E               	retlw	78
  1888  1103  3410               	retlw	16
  1889  1104  34B2               	retlw	178
  1890  1105  3410               	retlw	16
  1891  1106  3419               	retlw	25
  1892  1107  3411               	retlw	17
  1893  1108  3482               	retlw	130
  1894  1109  3411               	retlw	17
  1895  110A  34EE               	retlw	238
  1896  110B  3411               	retlw	17
  1897  110C  345C               	retlw	92
  1898  110D  3412               	retlw	18
  1899  110E  34CD               	retlw	205
  1900  110F  3412               	retlw	18
  1901  1110  3441               	retlw	65
  1902  1111  3413               	retlw	19
  1903  1112  34B7               	retlw	183
  1904  1113  3413               	retlw	19
  1905  1114  3430               	retlw	48
  1906  1115  3414               	retlw	20
  1907  1116  34AC               	retlw	172
  1908  1117  3414               	retlw	20
  1909  1118  342C               	retlw	44
  1910  1119  3415               	retlw	21
  1911  111A  34AE               	retlw	174
  1912  111B  3415               	retlw	21
  1913  111C  3433               	retlw	51
  1914  111D  3416               	retlw	22
  1915  111E  34BC               	retlw	188
  1916  111F  3416               	retlw	22
  1917  1120  3447               	retlw	71
  1918  1121  3417               	retlw	23
  1919  1122  34D7               	retlw	215
  1920  1123  3417               	retlw	23
  1921  1124  3469               	retlw	105
  1922  1125  3418               	retlw	24
  1923  1126  34FF               	retlw	255
  1924  1127  3418               	retlw	24
  1925  1128  3499               	retlw	153
  1926  1129  3419               	retlw	25
  1927  112A  3437               	retlw	55
  1928  112B  341A               	retlw	26
  1929  112C  34D8               	retlw	216
  1930  112D  341A               	retlw	26
  1931  112E  347D               	retlw	125
  1932  112F  341B               	retlw	27
  1933  1130  3426               	retlw	38
  1934  1131  341C               	retlw	28
  1935  1132  34D3               	retlw	211
  1936  1133  341C               	retlw	28
  1937  1134  3484               	retlw	132
  1938  1135  341D               	retlw	29
  1939  1136  343A               	retlw	58
  1940  1137  341E               	retlw	30
  1941  1138  34F4               	retlw	244
  1942  1139  341E               	retlw	30
  1943  113A  34B2               	retlw	178
  1944  113B  341F               	retlw	31
  1945  113C  3475               	retlw	117
  1946  113D  3420               	retlw	32
  1947  113E  343D               	retlw	61
  1948  113F  3421               	retlw	33
  1949  1140  3409               	retlw	9
  1950  1141  3422               	retlw	34
  1951  1142  34DA               	retlw	218
  1952  1143  3422               	retlw	34
  1953  1144  34B1               	retlw	177
  1954  1145  3423               	retlw	35
  1955  1146  348C               	retlw	140
  1956  1147  3424               	retlw	36
  1957  1148  346D               	retlw	109
  1958  1149  3425               	retlw	37
  1959  114A  3453               	retlw	83
  1960  114B  3426               	retlw	38
  1961  114C  343F               	retlw	63
  1962  114D  3427               	retlw	39
  1963  114E  3430               	retlw	48
  1964  114F  3428               	retlw	40
  1965  1150  3427               	retlw	39
  1966  1151  3429               	retlw	41
  1967  1152  3424               	retlw	36
  1968  1153  342A               	retlw	42
  1969  1154  3428               	retlw	40
  1970  1155  342B               	retlw	43
  1971  1156  3431               	retlw	49
  1972  1157  342C               	retlw	44
  1973  1158  3441               	retlw	65
  1974  1159  342D               	retlw	45
  1975  115A  3457               	retlw	87
  1976  115B  342E               	retlw	46
  1977  115C  3474               	retlw	116
  1978  115D  342F               	retlw	47
  1979  115E  3498               	retlw	152
  1980  115F  3430               	retlw	48
  1981  1160  34C3               	retlw	195
  1982  1161  3431               	retlw	49
  1983  1162  34F5               	retlw	245
  1984  1163  3432               	retlw	50
  1985  1164  342E               	retlw	46
  1986  1165  3434               	retlw	52
  1987  1166  346F               	retlw	111
  1988  1167  3435               	retlw	53
  1989  1168  34B7               	retlw	183
  1990  1169  3436               	retlw	54
  1991  116A  3408               	retlw	8
  1992  116B  3438               	retlw	56
  1993  116C  3461               	retlw	97
  1994  116D  3439               	retlw	57
  1995  116E  34C1               	retlw	193
  1996  116F  343A               	retlw	58
  1997  1170  342B               	retlw	43
  1998  1171  343C               	retlw	60
  1999  1172  349D               	retlw	157
  2000  1173  343D               	retlw	61
  2001  1174  3418               	retlw	24
  2002  1175  343F               	retlw	63
  2003  1176  349C               	retlw	156
  2004  1177  3440               	retlw	64
  2005  1178  3429               	retlw	41
  2006  1179  3442               	retlw	66
  2007  117A  34C0               	retlw	192
  2008  117B  3443               	retlw	67
  2009  117C  3461               	retlw	97
  2010  117D  3445               	retlw	69
  2011  117E  340B               	retlw	11
  2012  117F  3447               	retlw	71
  2013  1180  34C0               	retlw	192
  2014  1181  3448               	retlw	72
  2015  1182  347F               	retlw	127
  2016  1183  344A               	retlw	74
  2017  1184  344A               	retlw	74
  2018  1185  344C               	retlw	76
  2019  1186  341F               	retlw	31
  2020  1187  344E               	retlw	78
  2021  1188  34FF               	retlw	255
  2022  1189  344F               	retlw	79
  2023  118A  34EB               	retlw	235
  2024  118B  3451               	retlw	81
  2025  118C  34E3               	retlw	227
  2026  118D  3453               	retlw	83
  2027  118E  34E7               	retlw	231
  2028  118F  3455               	retlw	85
  2029  1190  34F7               	retlw	247
  2030  1191  3457               	retlw	87
  2031  1192  3414               	retlw	20
  2032  1193  345A               	retlw	90
  2033  1194  343E               	retlw	62
  2034  1195  345C               	retlw	92
  2035  1196  3475               	retlw	117
  2036  1197  345E               	retlw	94
  2037  1198  34BA               	retlw	186
  2038  1199  3460               	retlw	96
  2039  119A  340D               	retlw	13
  2040  119B  3463               	retlw	99
  2041  119C  346E               	retlw	110
  2042  119D  3465               	retlw	101
  2043  119E  34DE               	retlw	222
  2044  119F  3467               	retlw	103
  2045  11A0  345D               	retlw	93
  2046  11A1  346A               	retlw	106
  2047  11A2  34EB               	retlw	235
  2048  11A3  346C               	retlw	108
  2049  11A4  3488               	retlw	136
  2050  11A5  346F               	retlw	111
  2051  11A6  3436               	retlw	54
  2052  11A7  3472               	retlw	114
  2053  11A8  34F5               	retlw	245
  2054  11A9  3474               	retlw	116
  2055  11AA  34C4               	retlw	196
  2056  11AB  3477               	retlw	119
  2057  11AC  34A5               	retlw	165
  2058  11AD  347A               	retlw	122
  2059  11AE  3497               	retlw	151
  2060  11AF  347D               	retlw	125
  2061  11B0  349B               	retlw	155
  2062  11B1  3480               	retlw	128
  2063  11B2  34B2               	retlw	178
  2064  11B3  3483               	retlw	131
  2065  11B4  34DC               	retlw	220
  2066  11B5  3486               	retlw	134
  2067  11B6  3419               	retlw	25
  2068  11B7  348A               	retlw	138
  2069  11B8  346A               	retlw	106
  2070  11B9  348D               	retlw	141
  2071  11BA  34D0               	retlw	208
  2072  11BB  3490               	retlw	144
  2073  11BC  344B               	retlw	75
  2074  11BD  3494               	retlw	148
  2075  11BE  34DB               	retlw	219
  2076  11BF  3497               	retlw	151
  2077  11C0  3480               	retlw	128
  2078  11C1  349B               	retlw	155
  2079  11C2  343D               	retlw	61
  2080  11C3  349F               	retlw	159
  2081  11C4  3410               	retlw	16
  2082  11C5  34A3               	retlw	163
  2083  11C6  34FB               	retlw	251
  2084  11C7  34A6               	retlw	166
  2085  11C8  34FE               	retlw	254
  2086  11C9  34AA               	retlw	170
  2087  11CA  3419               	retlw	25
  2088  11CB  34AF               	retlw	175
  2089  11CC  344E               	retlw	78
  2090  11CD  34B3               	retlw	179
  2091  11CE  349D               	retlw	157
  2092  11CF  34B7               	retlw	183
  2093  11D0  3406               	retlw	6
  2094  11D1  34BC               	retlw	188
  2095  11D2  348A               	retlw	138
  2096  11D3  34C0               	retlw	192
  2097  11D4  342A               	retlw	42
  2098  11D5  34C5               	retlw	197
  2099  11D6  34E7               	retlw	231
  2100  11D7  34C9               	retlw	201
  2101  11D8  34C0               	retlw	192
  2102  11D9  34CE               	retlw	206
  2103  11DA  34B8               	retlw	184
  2104  11DB  34D3               	retlw	211
  2105  11DC  34CE               	retlw	206
  2106  11DD  34D8               	retlw	216
  2107  11DE  3403               	retlw	3
  2108  11DF  34DE               	retlw	222
  2109  11E0  3458               	retlw	88
  2110  11E1  34E3               	retlw	227
  2111  11E2  34CE               	retlw	206
  2112  11E3  34E8               	retlw	232
  2113  11E4  3466               	retlw	102
  2114  11E5  34EE               	retlw	238
  2115  11E6  3420               	retlw	32
  2116  11E7  34F4               	retlw	244
  2117  11E8  34FD               	retlw	253
  2118  11E9  34F9               	retlw	249
  2119  11EA  34FF               	retlw	255
  2120  11EB  34FF               	retlw	255
  2121  11EC  34FF               	retlw	255
  2122  11ED  34FF               	retlw	255
  2123  11EE  34FF               	retlw	255
  2124  11EF  34FF               	retlw	255
  2125  11F0  34FF               	retlw	255
  2126  11F1  34FF               	retlw	255
  2127  11F2  34FF               	retlw	255
  2128  11F3  34FF               	retlw	255
  2129  11F4  34FF               	retlw	255
  2130  11F5  34FF               	retlw	255
  2131  11F6  34FF               	retlw	255
  2132  11F7  34FF               	retlw	255
  2133  11F8  34FF               	retlw	255
  2134  11F9  34FF               	retlw	255
  2135  11FA  34FF               	retlw	255
  2136  11FB  34FF               	retlw	255
  2137  11FC  34FF               	retlw	255
  2138  11FD  34FF               	retlw	255
  2139  11FE  34FF               	retlw	255
  2140  11FF  34FF               	retlw	255
  2141  1200                     __end_of_PWM:	
  2142  1200                     _UID:	
  2143  1200  3408               	retlw	8
  2144  1201  34BA               	retlw	186
  2145  1202  3412               	retlw	18
  2146  1203  3434               	retlw	52
  2147  1204  3456               	retlw	86
  2148  1205  3478               	retlw	120
  2149  1206                     __end_of_UID:	
  2150  0016                     _TMR1	set	22
  2151  0018                     _T1CON	set	24
  2152  000B                     _INTCON	set	11
  2153  001B                     _PR2	set	27
  2154  005F                     _GIE	set	95
  2155  0073                     _RC3	set	115
  2156  0065                     _RA5	set	101
  2157  008C                     _TXIF	set	140
  2158  005E                     _PEIE	set	94
  2159  0088                     _TMR1IF	set	136
  2160  008E                     _ADIF	set	142
  2161  008D                     _RCIF	set	141
  2162  0072                     _RC2	set	114
  2163  0071                     _RC1	set	113
  2164  0070                     _RC0	set	112
  2165  0062                     _RA2	set	98
  2166  009C                     _ADRESH	set	156
  2167  009E                     _ADCON1	set	158
  2168  009D                     _ADCON0	set	157
  2169  0098                     _OSCTUNE	set	152
  2170  0099                     _OSCCON	set	153
  2171  04E8                     _ADON	set	1256
  2172  048E                     _ADIE	set	1166
  2173  048C                     _TXIE	set	1164
  2174  0474                     _TRISC4	set	1140
  2175  0488                     _TMR1IE	set	1160
  2176  04E9                     _GO_nDONE	set	1257
  2177  0464                     _TRISA4	set	1124
  2178  048D                     _RCIE	set	1165
  2179  0475                     _TRISC5	set	1141
  2180  0473                     _TRISC3	set	1139
  2181  0472                     _TRISC2	set	1138
  2182  0471                     _TRISC1	set	1137
  2183  0470                     _TRISC0	set	1136
  2184  0462                     _TRISA2	set	1122
  2185  0873                     _LATC3	set	2163
  2186  0874                     _LATC4	set	2164
  2187  0193                     _PMDAT	set	403
  2188  0191                     _PMADR	set	401
  2189  0196                     _PMCON2	set	406
  2190  019A                     _TXREG	set	410
  2191  0199                     _RCREG	set	409
  2192  019B                     _SPBRGL	set	411
  2193  019C                     _SPBRGH	set	412
  2194  019F                     _BAUDCON	set	415
  2195  019D                     _RCSTA	set	413
  2196  0CAD                     _LWLO	set	3245
  2197  0CA9                     _WR	set	3241
  2198  0CAA                     _WREN	set	3242
  2199  0CAC                     _FREE	set	3244
  2200  0CAE                     _CFGS	set	3246
  2201  0CA8                     _RD	set	3240
  2202  0CF0                     _TX9D	set	3312
  2203  0CF6                     _TX9	set	3318
  2204  0CEF                     _SPEN	set	3311
  2205  0CF5                     _TXEN	set	3317
  2206  0C64                     _ANSA4	set	3172
  2207  0CEA                     _FERR	set	3306
  2208  0CF2                     _BRGH	set	3314
  2209  0CF4                     _SYNC	set	3316
  2210  0C73                     _ANSC3	set	3187
  2211  0C72                     _ANSC2	set	3186
  2212  0C71                     _ANSC1	set	3185
  2213  0C70                     _ANSC0	set	3184
  2214  0C62                     _ANSA2	set	3170
  2215  0DCB                     _PWM4CON	set	3531
  2216  0DBB                     _PWM3CON	set	3515
  2217  0DAB                     _PWM2CON	set	3499
  2218  0D9B                     _PWM1CON	set	3483
  2219  0DCE                     _PWM4CLKCON	set	3534
  2220  0DBE                     _PWM3CLKCON	set	3518
  2221  0DAE                     _PWM2CLKCON	set	3502
  2222  0D9E                     _PWM1CLKCON	set	3486
  2223  0DC5                     _PWM4PRL	set	3525
  2224  0DB5                     _PWM3PRL	set	3509
  2225  0DA5                     _PWM2PRL	set	3493
  2226  0D95                     _PWM1PRL	set	3477
  2227  0DC6                     _PWM4PRH	set	3526
  2228  0DB6                     _PWM3PRH	set	3510
  2229  0DA6                     _PWM2PRH	set	3494
  2230  0D96                     _PWM1PRH	set	3478
  2231  0DC1                     _PWM4PHL	set	3521
  2232  0DB1                     _PWM3PHL	set	3505
  2233  0DA1                     _PWM2PHL	set	3489
  2234  0D91                     _PWM1PHL	set	3473
  2235  0DC2                     _PWM4PHH	set	3522
  2236  0DB2                     _PWM3PHH	set	3506
  2237  0DA2                     _PWM2PHH	set	3490
  2238  0D92                     _PWM1PHH	set	3474
  2239  0D93                     _PWM1DC	set	3475
  2240  0DCF                     _PWM4LDCON	set	3535
  2241  0DBF                     _PWM3LDCON	set	3519
  2242  0DAF                     _PWM2LDCON	set	3503
  2243  0D9F                     _PWM1LDCON	set	3487
  2244  0DC3                     _PWM4DCL	set	3523
  2245  0DB3                     _PWM3DCL	set	3507
  2246  0DA3                     _PWM2DCL	set	3491
  2247  0D93                     _PWM1DCL	set	3475
  2248  0DC4                     _PWM4DCH	set	3524
  2249  0DB4                     _PWM3DCH	set	3508
  2250  0DA4                     _PWM2DCH	set	3492
  2251  0D94                     _PWM1DCH	set	3476
  2252  0E15                     _RXPPS	set	3605
  2253  0EA4                     _RC4PPS	set	3748
  2254  0EA2                     _RC2PPS	set	3746
  2255  0EA1                     _RC1PPS	set	3745
  2256  0EA0                     _RC0PPS	set	3744
  2257  0E92                     _RA2PPS	set	3730
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0015                     start_initialization:	
  2263  0015                     __initialization:		;BIGRAM
  2264                           
  2265                           ; Initialize objects allocated to BANK1
  2266  0015  0021               	movlb	1	; select bank1
  2267                           
  2268                           ;initializer for _DMX_sumRepeat
  2269  0016  3002               	movlw	2
  2270  0017  00EB               	movwf	__pdataBANK1& (0+127)
  2271  0018  3064               	movlw	100
  2272  0019  01EC               	clrf	(__pdataBANK1+1)& (0+127)
  2273  001A  01ED               	clrf	(__pdataBANK1+2)& (0+127)
  2274  001B  01EE               	clrf	(__pdataBANK1+3)& (0+127)
  2275                           
  2276                           ;initializer for _DMXPeriod
  2277  001C  00EF               	movwf	(__pdataBANK1+4)& (0+127)
  2278                           
  2279                           ; Initialize objects allocated to BANK2
  2280  001D  0022               	movlb	2	; select bank2
  2281                           
  2282                           ;initializer for _DMX_Repeat
  2283  001E  3001               	movlw	1
  2284  001F  00E4               	movwf	__pdataBANK2& (0+127)
  2285  0020  01E5               	clrf	(__pdataBANK2+1)& (0+127)
  2286  0021  01E6               	clrf	(__pdataBANK2+2)& (0+127)
  2287  0022  01E7               	clrf	(__pdataBANK2+3)& (0+127)
  2288  0023  01E8               	clrf	(__pdataBANK2+4)& (0+127)
  2289  0024  01E9               	clrf	(__pdataBANK2+5)& (0+127)
  2290  0025  01EA               	clrf	(__pdataBANK2+6)& (0+127)
  2291  0026  01EB               	clrf	(__pdataBANK2+7)& (0+127)
  2292                           
  2293                           ;initializer for _DMX_repeatcoeff
  2294  0027  00EC               	movwf	(__pdataBANK2+8)& (0+127)
  2295  0028  01ED               	clrf	(__pdataBANK2+9)& (0+127)
  2296  0029  01EE               	clrf	(__pdataBANK2+10)& (0+127)
  2297  002A  01EF               	clrf	(__pdataBANK2+11)& (0+127)
  2298                           
  2299                           ; Initialize objects allocated to BANK3
  2300  002B  0023               	movlb	3	; select bank3
  2301  002C  3040               	movlw	64
  2302                           
  2303                           ;initializer for _DMX_repeat_hereditary
  2304  002D  01DC               	clrf	__pdataBANK3& (0+127)
  2305  002E  01DD               	clrf	(__pdataBANK3+1)& (0+127)
  2306  002F  00DE               	movwf	(__pdataBANK3+2)& (0+127)
  2307  0030  307C               	movlw	124
  2308  0031  01DF               	clrf	(__pdataBANK3+3)& (0+127)
  2309  0032  01E0               	clrf	(__pdataBANK3+4)& (0+127)
  2310  0033  01E1               	clrf	(__pdataBANK3+5)& (0+127)
  2311  0034  01E2               	clrf	(__pdataBANK3+6)& (0+127)
  2312  0035  01E3               	clrf	(__pdataBANK3+7)& (0+127)
  2313  0036  01E4               	clrf	(__pdataBANK3+8)& (0+127)
  2314  0037  01E5               	clrf	(__pdataBANK3+9)& (0+127)
  2315  0038  01E6               	clrf	(__pdataBANK3+10)& (0+127)
  2316  0039  01E7               	clrf	(__pdataBANK3+11)& (0+127)
  2317                           
  2318                           ; Clear objects allocated to BIGRAM
  2319  003A  0084               	movwf	4
  2320  003B  3023               	movlw	35
  2321  003C  0085               	movwf	5
  2322  003D  3064               	movlw	100
  2323  003E  00FE               	movwf	126
  2324  003F  01FF               	clrf	127
  2325  0040  3187  2740  3180   	fcall	clear_ram0
  2326                           
  2327                           ; Clear objects allocated to COMMON
  2328  0043  01F6               	clrf	__pbssCOMMON& (0+127)
  2329  0044  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2330  0045  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2331  0046  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2332                           
  2333                           ; Clear objects allocated to BANK0
  2334  0047  0020               	movlb	0	; select bank0
  2335  0048  30A0               	movlw	low __pbssBANK1
  2336  0049  01EC               	clrf	__pbssBANK0& (0+127)
  2337                           
  2338                           ; Clear objects allocated to BANK1
  2339  004A  0084               	movwf	4
  2340  004B  3000               	movlw	high __pbssBANK1
  2341  004C  0085               	movwf	5
  2342  004D  304B               	movlw	75
  2343  004E  00FE               	movwf	126
  2344  004F  01FF               	clrf	127
  2345  0050  3187  2740  3180   	fcall	clear_ram0
  2346                           
  2347                           ; Clear objects allocated to BANK2
  2348  0053  3020               	movlw	low __pbssBANK2
  2349  0054  0084               	movwf	4
  2350  0055  3001               	movlw	high __pbssBANK2
  2351  0056  0085               	movwf	5
  2352  0057  3044               	movlw	68
  2353  0058  00FE               	movwf	126
  2354  0059  01FF               	clrf	127
  2355  005A  3187  2740  3180   	fcall	clear_ram0
  2356                           
  2357                           ; Clear objects allocated to BANK3
  2358  005D  30A0               	movlw	low __pbssBANK3
  2359  005E  0084               	movwf	4
  2360  005F  3001               	movlw	high __pbssBANK3
  2361  0060  0085               	movwf	5
  2362  0061  303C               	movlw	60
  2363  0062  00FE               	movwf	126
  2364  0063  01FF               	clrf	127
  2365  0064  3187  2740  3180   	fcall	clear_ram0
  2366  0067                     end_of_initialization:	
  2367                           ;End of C runtime variable initialization code
  2368                           
  2369  0067                     __end_of__initialization:	
  2370  0067  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2371  0068  0020               	movlb	0
  2372  0069  286A               	ljmp	_main	;jump to C main() function
  2373  006A                     __pmaintext:	
  2374 ;;
  2375 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2376 ;;
  2377 ;; *************** function _main *****************
  2378 ;; Defined at:
  2379 ;;		line 24 in file "main.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : B1F/0
  2390 ;;		On exit  : 1C/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2397 ;;Total ram usage:        0 bytes
  2398 ;; Hardware stack levels required when called:    6
  2399 ;; This function calls:
  2400 ;;		_ADC_init
  2401 ;;		_ADC_loop
  2402 ;;		_DMX_init
  2403 ;;		_DMX_loop
  2404 ;;		_PFM_Read
  2405 ;;		_PFM_Write
  2406 ;;		_RDM_init
  2407 ;;		_RDM_rx_loop
  2408 ;;		_timer1_init
  2409 ;;		_timer1_switch
  2410 ;; This function is called by:
  2411 ;;		Startup code after reset
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           
  2416                           ;psect for function _main
  2417  006A                     _main:	
  2418                           
  2419                           ;main.c: 25: PWM1DCH = 0x00;
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2423  006A  003B               	movlb	27	; select bank27
  2424  006B  0194               	clrf	20	;volatile
  2425                           
  2426                           ;main.c: 26: PWM2DCH = 0x00;
  2427  006C  01A4               	clrf	36	;volatile
  2428                           
  2429                           ;main.c: 27: PWM3DCH = 0x00;
  2430  006D  01B4               	clrf	52	;volatile
  2431                           
  2432                           ;main.c: 28: PWM4DCH = 0x00;
  2433  006E  01C4               	clrf	68	;volatile
  2434                           
  2435                           ;main.c: 30: PWM1DCL = 0x00;
  2436  006F  0193               	clrf	19	;volatile
  2437                           
  2438                           ;main.c: 31: PWM2DCL = 0x00;
  2439  0070  01A3               	clrf	35	;volatile
  2440                           
  2441                           ;main.c: 32: PWM3DCL = 0x00;
  2442  0071  01B3               	clrf	51	;volatile
  2443                           
  2444                           ;main.c: 33: PWM4DCL = 0x00;
  2445  0072  01C3               	clrf	67	;volatile
  2446                           
  2447                           ;main.c: 34: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON=0b10000000;
  2448  0073  23C0  3180         	fcall	PL112	;call to abstracted procedure
  2449                           
  2450                           ;main.c: 36: RA2PPS = 0b0011;
  2451  0075  3003               	movlw	3
  2452  0076  003D               	movlb	29	; select bank29
  2453  0077  0092               	movwf	18	;volatile
  2454                           
  2455                           ;main.c: 37: RC0PPS = 0b0100;
  2456  0078  3004               	movlw	4
  2457  0079  00A0               	movwf	32	;volatile
  2458                           
  2459                           ;main.c: 38: RC1PPS = 0b0101;
  2460  007A  3005               	movlw	5
  2461  007B  00A1               	movwf	33	;volatile
  2462                           
  2463                           ;main.c: 39: RC2PPS = 0b0110;
  2464  007C  3006               	movlw	6
  2465  007D  00A2               	movwf	34	;volatile
  2466                           
  2467                           ;main.c: 41: PR2 = 0xFF;
  2468  007E  30FF               	movlw	255
  2469  007F  0020               	movlb	0	; select bank0
  2470  0080  009B               	movwf	27	;volatile
  2471                           
  2472                           ;main.c: 44: OSCCON = 0b11110000;
  2473  0081  30F0               	movlw	240
  2474  0082  0021               	movlb	1	; select bank1
  2475  0083  0099               	movwf	25	;volatile
  2476                           
  2477                           ;main.c: 45: OSCTUNE = 0b000000;
  2478  0084  0198               	clrf	24	;volatile
  2479                           
  2480                           ;main.c: 47: TRISA2 = TRISC0 = TRISC1 = TRISC2 = 0;
  2481  0085  110E               	bcf	14,2	;volatile
  2482  0086  108E               	bcf	14,1	;volatile
  2483  0087  100E               	bcf	14,0	;volatile
  2484  0088  110C               	bcf	12,2	;volatile
  2485                           
  2486                           ;main.c: 48: ANSA2 = ANSC0 = ANSC1 = ANSC2 = 0;
  2487  0089  0023               	movlb	3	; select bank3
  2488  008A  110E               	bcf	14,2	;volatile
  2489  008B  108E               	bcf	14,1	;volatile
  2490  008C  100E               	bcf	14,0	;volatile
  2491  008D  110C               	bcf	12,2	;volatile
  2492                           
  2493                           ;main.c: 50: RA2=RC0=RC1=RC2=0;
  2494  008E  0020               	movlb	0	; select bank0
  2495  008F  110E               	bcf	14,2	;volatile
  2496  0090  108E               	bcf	14,1	;volatile
  2497  0091  100E               	bcf	14,0	;volatile
  2498  0092  110C               	bcf	12,2	;volatile
  2499                           
  2500                           ;main.c: 52: PWM1PHH = PWM2PHH = PWM3PHH = PWM4PHH = 0x00;
  2501  0093  003B               	movlb	27	; select bank27
  2502  0094  01C2               	clrf	66	;volatile
  2503  0095  01B2               	clrf	50	;volatile
  2504  0096  01A2               	clrf	34	;volatile
  2505  0097  0192               	clrf	18	;volatile
  2506                           
  2507                           ;main.c: 53: PWM1PHL = PWM2PHL = PWM3PHL = PWM4PHL = 0x00;
  2508  0098  01C1               	clrf	65	;volatile
  2509  0099  01B1               	clrf	49	;volatile
  2510  009A  01A1               	clrf	33	;volatile
  2511  009B  0191               	clrf	17	;volatile
  2512                           
  2513                           ;main.c: 54: PWM1PRH = PWM2PRH = PWM3PRH = PWM4PRH = 0xFF;
  2514  009C  30FF               	movlw	255
  2515  009D  00C6               	movwf	70	;volatile
  2516  009E  00B6               	movwf	54	;volatile
  2517  009F  00A6               	movwf	38	;volatile
  2518  00A0  0096               	movwf	22	;volatile
  2519                           
  2520                           ;main.c: 55: PWM1PRL = PWM2PRL = PWM3PRL = PWM4PRL = 0xFF;
  2521  00A1  00C5               	movwf	69	;volatile
  2522  00A2  00B5               	movwf	53	;volatile
  2523  00A3  00A5               	movwf	37	;volatile
  2524  00A4  0095               	movwf	21	;volatile
  2525                           
  2526                           ;main.c: 56: PWM1CLKCON = PWM2CLKCON = PWM3CLKCON = PWM4CLKCON = 0b00000000;
  2527  00A5  01CE               	clrf	78	;volatile
  2528  00A6  01BE               	clrf	62	;volatile
  2529  00A7  01AE               	clrf	46	;volatile
  2530  00A8  019E               	clrf	30	;volatile
  2531                           
  2532                           ;main.c: 59: TRISC3 = 0;
  2533  00A9  0021               	movlb	1	; select bank1
  2534  00AA  118E               	bcf	14,3	;volatile
  2535                           
  2536                           ;main.c: 60: ANSC3 = 0;
  2537  00AB  0023               	movlb	3	; select bank3
  2538  00AC  118E               	bcf	14,3	;volatile
  2539                           
  2540                           ;main.c: 61: INTCON = 0b11000000;
  2541  00AD  30C0               	movlw	192
  2542  00AE  008B               	movwf	11	;volatile
  2543                           
  2544                           ;main.c: 63: timer1_init();
  2545  00AF  231D  3180         	fcall	_timer1_init
  2546                           
  2547                           ;main.c: 68: ADC_init();
  2548  00B1  20F3  3180         	fcall	_ADC_init
  2549                           
  2550                           ;main.c: 69: DMX_init();
  2551  00B3  2126  3180         	fcall	_DMX_init
  2552                           
  2553                           ;main.c: 70: RDM_init();
  2554  00B5  219B  3180         	fcall	_RDM_init
  2555                           
  2556                           ;main.c: 71: PWM1CON = PWM2CON = PWM3CON = PWM4CON = 0b10000000;
  2557  00B7  3080               	movlw	128
  2558  00B8  003B               	movlb	27	; select bank27
  2559  00B9  00CB               	movwf	75	;volatile
  2560  00BA  00BB               	movwf	59	;volatile
  2561  00BB  00AB               	movwf	43	;volatile
  2562  00BC  009B               	movwf	27	;volatile
  2563                           
  2564                           ;main.c: 73: DMX_Address=PFM_Read(Flash_DMXAddress);
  2565  00BD  00F4               	movwf	PFM_Read@AddrPFM
  2566  00BE  301F               	movlw	31
  2567  00BF  00F5               	movwf	PFM_Read@AddrPFM+1
  2568  00C0  20E5  3180         	fcall	_PFM_Read
  2569  00C2  23BA  3180         	fcall	PL104	;call to abstracted procedure
  2570                           
  2571                           ;main.c: 74: if(DMX_Address==0x3fff){
  2572  00C4  0A58               	incf	_DMX_Address^(0+128),w
  2573  00C5  303F               	movlw	63
  2574  00C6  1903               	skipnz
  2575  00C7  0659               	xorwf	(_DMX_Address+1)^(0+128),w
  2576                           
  2577                           ;main.c: 75: PFM_Write(Flash_DMXAddress,0x0001);
  2578  00C8  3080               	movlw	128
  2579  00C9  1D03               	btfss	3,2
  2580  00CA  28D5               	goto	L1
  2581  00CB  0020               	movlb	0	; select bank0
  2582  00CC  00A0               	movwf	PFM_Write@AddrPFM
  2583  00CD  301F               	movlw	31
  2584  00CE  00A1               	movwf	PFM_Write@AddrPFM+1
  2585  00CF  01A2               	clrf	PFM_Write@Data
  2586  00D0  0AA2               	incf	PFM_Write@Data,f
  2587  00D1  01A3               	clrf	PFM_Write@Data+1
  2588  00D2  224A  3180         	fcall	_PFM_Write
  2589                           
  2590                           ;main.c: 76: }
  2591                           ;main.c: 77: DMX_Address=PFM_Read(Flash_DMXAddress);
  2592  00D4  3080               	movlw	128
  2593  00D5                     L1:	
  2594  00D5  00F4               	movwf	PFM_Read@AddrPFM
  2595  00D6  301F               	movlw	31
  2596  00D7  00F5               	movwf	PFM_Read@AddrPFM+1
  2597  00D8  20E5  3180         	fcall	_PFM_Read
  2598  00DA  23BA               	fcall	PL104	;call to abstracted procedure
  2599  00DB                     l4833:	
  2600                           
  2601                           ;main.c: 80: DMX_loop();
  2602  00DB  3189  214F  3180   	fcall	_DMX_loop
  2603                           
  2604                           ;main.c: 81: ADC_loop();
  2605  00DE  20FF  3180         	fcall	_ADC_loop
  2606                           
  2607                           ;main.c: 82: timer1_switch();
  2608  00E0  2323  3180         	fcall	_timer1_switch
  2609                           
  2610                           ;main.c: 83: RDM_rx_loop();
  2611  00E2  2285  3180         	fcall	_RDM_rx_loop
  2612  00E4  28DB               	goto	l4833
  2613  00E5                     __end_of_main:	
  2614  00E5                     __ptext7:	
  2615 ;; *************** function _PFM_Read *****************
  2616 ;; Defined at:
  2617 ;;		line 13 in file "PFM.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  AddrPFM         2    4[COMMON] unsigned int 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  2    4[COMMON] unsigned int 
  2624 ;; Registers used:
  2625 ;;		wreg
  2626 ;; Tracked objects:
  2627 ;;		On entry : 4/1B
  2628 ;;		On exit  : 1F/3
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2635 ;;Total ram usage:        2 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    2
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;;		_PFM_Write
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _PFM_Read
  2648  00E5                     _PFM_Read:	
  2649                           
  2650                           ;PFM.c: 16: PMADR=AddrPFM;
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _PFM_Read: [wreg]
  2654  00E5  0875               	movf	PFM_Read@AddrPFM+1,w
  2655  00E6  0023               	movlb	3	; select bank3
  2656  00E7  0092               	movwf	18	;volatile
  2657  00E8  0874               	movf	PFM_Read@AddrPFM,w
  2658  00E9  0091               	movwf	17	;volatile
  2659                           
  2660                           ;PFM.c: 17: RD=1;
  2661  00EA  1415               	bsf	21,0	;volatile
  2662  00EB  0000               	nop	;# 
  2663  00EC  0000               	nop	;# 
  2664                           
  2665                           ;PFM.c: 20: return PMDAT;
  2666  00ED  0023               	movlb	3	; select bank3
  2667  00EE  0814               	movf	20,w	;volatile
  2668  00EF  00F5               	movwf	?_PFM_Read+1
  2669  00F0  0813               	movf	19,w	;volatile
  2670  00F1  00F4               	movwf	?_PFM_Read
  2671  00F2  0008               	return
  2672  00F3                     __end_of_PFM_Read:	
  2673  00F3                     __ptext28:	
  2674 ;; *************** function _ADC_init *****************
  2675 ;; Defined at:
  2676 ;;		line 14 in file "ADC.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  2  112[None  ] int 
  2683 ;; Registers used:
  2684 ;;		wreg
  2685 ;; Tracked objects:
  2686 ;;		On entry : B1F/0
  2687 ;;		On exit  : B1F/0
  2688 ;;		Unchanged: B00/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2694 ;;Total ram usage:        0 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    2
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _ADC_init
  2706  00F3                     _ADC_init:	
  2707                           
  2708                           ;ADC.c: 19: TRISA4 = 1;
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _ADC_init: [wreg]
  2712  00F3  0021               	movlb	1	; select bank1
  2713  00F4  160C               	bsf	12,4	;volatile
  2714                           
  2715                           ;ADC.c: 20: ANSA4 = 1;
  2716  00F5  0023               	movlb	3	; select bank3
  2717  00F6  160C               	bsf	12,4	;volatile
  2718                           
  2719                           ;ADC.c: 21: ADCON0 = 0b00001101;
  2720  00F7  300D               	movlw	13
  2721  00F8  0021               	movlb	1	; select bank1
  2722  00F9  009D               	movwf	29	;volatile
  2723                           
  2724                           ;ADC.c: 22: ADCON1 = 0b01110000;
  2725  00FA  3070               	movlw	112
  2726  00FB  009E               	movwf	30	;volatile
  2727                           
  2728                           ;ADC.c: 25: ADIF = 0;
  2729  00FC  0020               	movlb	0	; select bank0
  2730  00FD  1311               	bcf	17,6	;volatile
  2731  00FE  0008               	return
  2732  00FF                     __end_of_ADC_init:	
  2733  00FF                     __ptext27:	
  2734 ;; *************** function _ADC_loop *****************
  2735 ;; Defined at:
  2736 ;;		line 32 in file "ADC.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  2  132[None  ] int 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2745 ;; Tracked objects:
  2746 ;;		On entry : 1E/1
  2747 ;;		On exit  : 1F/1
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;Total ram usage:        2 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    2
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_main
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           
  2765                           ;psect for function _ADC_loop
  2766  00FF                     _ADC_loop:	
  2767                           
  2768                           ;ADC.c: 33: if(ADC_Flags.New==1){
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _ADC_loop: [wreg-fsr0h+status,2+status,0+pclath]
  2772  00FF  0021               	movlb	1	; select bank1
  2773  0100  1C5A               	btfss	_ADC_Flags^(0+128),0	;volatile
  2774  0101  0008               	return
  2775                           
  2776                           ;ADC.c: 34: RxTimer = 0;
  2777  0102  01D4               	clrf	_RxTimer^(0+128)	;volatile
  2778  0103  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  2779                           
  2780                           ;ADC.c: 35: ADC_Flags.New = 0;
  2781  0104  105A               	bcf	_ADC_Flags^(0+128),0	;volatile
  2782                           
  2783                           ;ADC.c: 36: PWM1DCH=PWM2DCH=PWM3DCH=PWM4DCH = PWM.PWM[ADC_Data].DCH;
  2784  0105  085B               	movf	_ADC_Data^(0+128),w	;volatile
  2785  0106  00F4               	movwf	??_ADC_loop
  2786  0107  3001               	movlw	low ((_PWM+1)| (0+32768))
  2787  0108  23C6  3180         	fcall	PL114	;call to abstracted procedure
  2788  010A  3090               	movlw	high ((_PWM+1)| (0+32768))
  2789  010B  3D75               	addwfc	??_ADC_loop+1,w
  2790  010C  0085               	movwf	5
  2791  010D  0800               	movf	0,w	;code access
  2792  010E  003B               	movlb	27	; select bank27
  2793  010F  00C4               	movwf	68	;volatile
  2794  0110  00B4               	movwf	52	;volatile
  2795  0111  00A4               	movwf	36	;volatile
  2796  0112  0094               	movwf	20	;volatile
  2797                           
  2798                           ;ADC.c: 37: PWM1DCL=PWM2DCL=PWM3DCL=PWM4DCL = PWM.PWM[ADC_Data].DCL;
  2799  0113  0021               	movlb	1	; select bank1
  2800  0114  085B               	movf	_ADC_Data^(0+128),w	;volatile
  2801  0115  00F4               	movwf	??_ADC_loop
  2802  0116  3000               	movlw	low (_PWM| (0+32768))
  2803  0117  23C6  3180         	fcall	PL114	;call to abstracted procedure
  2804  0119  3090               	movlw	high (_PWM| (0+32768))
  2805  011A  3D75               	addwfc	??_ADC_loop+1,w
  2806  011B  0085               	movwf	5
  2807  011C  0800               	movf	0,w	;code access
  2808  011D  003B               	movlb	27	; select bank27
  2809  011E  00C3               	movwf	67	;volatile
  2810  011F  00B3               	movwf	51	;volatile
  2811  0120  00A3               	movwf	35	;volatile
  2812  0121  0093               	movwf	19	;volatile
  2813                           
  2814                           ;ADC.c: 38: PWM1LDCON=PWM2LDCON=PWM3LDCON=PWM4LDCON = 0b10000000;
  2815  0122  23C0               	fcall	PL112	;call to abstracted procedure
  2816                           
  2817                           ;ADC.c: 39: GO_nDONE = 1;
  2818  0123  0021               	movlb	1	; select bank1
  2819  0124  149D               	bsf	29,1	;volatile
  2820  0125  0008               	return
  2821  0126                     __end_of_ADC_loop:	
  2822  0126                     __ptext26:	
  2823 ;; *************** function _DMX_init *****************
  2824 ;; Defined at:
  2825 ;;		line 17 in file "DMX.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : B1F/0
  2836 ;;		On exit  : B1F/0
  2837 ;;		Unchanged: B00/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2841 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2843 ;;Total ram usage:        3 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_main
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _DMX_init
  2855  0126                     _DMX_init:	
  2856                           
  2857                           ;DMX.c: 19: RXPPS = 0b10101;
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in _DMX_init: [wreg-fsr1h+status,2+status,0]
  2861  0126  3015               	movlw	21
  2862  0127  003C               	movlb	28	; select bank28
  2863  0128  0095               	movwf	21	;volatile
  2864                           
  2865                           ;DMX.c: 20: TRISC5 = 1;
  2866  0129  0021               	movlb	1	; select bank1
  2867  012A  168E               	bsf	14,5	;volatile
  2868                           
  2869                           ;DMX.c: 22: RCSTA = 0b10010000;
  2870  012B  3090               	movlw	144
  2871  012C  0023               	movlb	3	; select bank3
  2872  012D  009D               	movwf	29	;volatile
  2873                           
  2874                           ;DMX.c: 23: SYNC = 0;
  2875  012E  121E               	bcf	30,4	;volatile
  2876                           
  2877                           ;DMX.c: 24: BAUDCON = 0b00000000;
  2878  012F  019F               	clrf	31	;volatile
  2879                           
  2880                           ;DMX.c: 25: BRGH = 1;
  2881  0130  151E               	bsf	30,2	;volatile
  2882                           
  2883                           ;DMX.c: 26: SPBRGH = 0x00;
  2884  0131  019C               	clrf	28	;volatile
  2885                           
  2886                           ;DMX.c: 27: SPBRGL = 0x7;
  2887  0132  3007               	movlw	7
  2888  0133  009B               	movwf	27	;volatile
  2889                           
  2890                           ;DMX.c: 28: RCIE = 1;
  2891  0134  0021               	movlb	1	; select bank1
  2892  0135  1691               	bsf	17,5	;volatile
  2893                           
  2894                           ;DMX.c: 35: PWMDCLptr[0] = &PWM1DCL;
  2895  0136  300D               	movlw	13
  2896  0137  0023               	movlb	3	; select bank3
  2897  0138  00B9               	movwf	(_PWMDCLptr+1)^(0+384)
  2898  0139  3093               	movlw	147
  2899  013A  00B8               	movwf	_PWMDCLptr^(0+384)
  2900                           
  2901                           ;DMX.c: 36: PWMDCLptr[1] = &PWM2DCL;
  2902  013B  300D               	movlw	13
  2903  013C  00BB               	movwf	((low ((_PWMDCLptr| (0+256)+2))+1))^(0+128)
  2904  013D  30A3               	movlw	163
  2905  013E  00BA               	movwf	(low ((_PWMDCLptr| (0+256)+2)))^(0+128)
  2906                           
  2907                           ;DMX.c: 37: PWMDCLptr[2] = &PWM3DCL;
  2908  013F  300D               	movlw	13
  2909  0140  00BD               	movwf	((low ((_PWMDCLptr| (0+256)+4))+1))^(0+128)
  2910  0141  30B3               	movlw	179
  2911  0142  00BC               	movwf	(low ((_PWMDCLptr| (0+256)+4)))^(0+128)
  2912                           
  2913                           ;DMX.c: 38: PWMDCLptr[3] = &PWM4DCL;
  2914  0143  300D               	movlw	13
  2915  0144  00BF               	movwf	((low ((_PWMDCLptr| (0+256)+6))+1))^(0+128)
  2916  0145  30C3               	movlw	195
  2917  0146  00BE               	movwf	(low ((_PWMDCLptr| (0+256)+6)))^(0+128)
  2918                           
  2919                           ;DMX.c: 39: PWMDCHptr[0] = &PWM1DCH;
  2920  0147  300D               	movlw	13
  2921  0148  00B1               	movwf	(_PWMDCHptr+1)^(0+384)
  2922  0149  3094               	movlw	148
  2923  014A  00B0               	movwf	_PWMDCHptr^(0+384)
  2924                           
  2925                           ;DMX.c: 40: PWMDCHptr[1] = &PWM2DCH;
  2926  014B  300D               	movlw	13
  2927  014C  00B3               	movwf	((low ((_PWMDCHptr| (0+256)+2))+1))^(0+128)
  2928  014D  30A4               	movlw	164
  2929  014E  00B2               	movwf	(low ((_PWMDCHptr| (0+256)+2)))^(0+128)
  2930                           
  2931                           ;DMX.c: 41: PWMDCHptr[2] = &PWM3DCH;
  2932  014F  300D               	movlw	13
  2933  0150  00B5               	movwf	((low ((_PWMDCHptr| (0+256)+4))+1))^(0+128)
  2934  0151  30B4               	movlw	180
  2935  0152  00B4               	movwf	(low ((_PWMDCHptr| (0+256)+4)))^(0+128)
  2936                           
  2937                           ;DMX.c: 42: PWMDCHptr[3] = &PWM4DCH;
  2938  0153  300D               	movlw	13
  2939  0154  00B7               	movwf	((low ((_PWMDCHptr| (0+256)+6))+1))^(0+128)
  2940  0155  30C4               	movlw	196
  2941  0156  00B6               	movwf	(low ((_PWMDCHptr| (0+256)+6)))^(0+128)
  2942                           
  2943                           ;DMX.c: 43: PWMLDCONptr[0] = &PWM1LDCON;
  2944  0157  300D               	movlw	13
  2945  0158  00A1               	movwf	(_PWMLDCONptr+1)^(0+384)
  2946  0159  309F               	movlw	159
  2947  015A  00A0               	movwf	_PWMLDCONptr^(0+384)
  2948                           
  2949                           ;DMX.c: 44: PWMLDCONptr[1] = &PWM2LDCON;
  2950  015B  300D               	movlw	13
  2951  015C  00A3               	movwf	((low ((_PWMLDCONptr| (0+256)+2))+1))^(0+128)
  2952  015D  30AF               	movlw	175
  2953  015E  00A2               	movwf	(low ((_PWMLDCONptr| (0+256)+2)))^(0+128)
  2954                           
  2955                           ;DMX.c: 45: PWMLDCONptr[2] = &PWM3LDCON;
  2956  015F  300D               	movlw	13
  2957  0160  00A5               	movwf	((low ((_PWMLDCONptr| (0+256)+4))+1))^(0+128)
  2958  0161  30BF               	movlw	191
  2959  0162  00A4               	movwf	(low ((_PWMLDCONptr| (0+256)+4)))^(0+128)
  2960                           
  2961                           ;DMX.c: 46: PWMLDCONptr[3] = &PWM4LDCON;
  2962  0163  300D               	movlw	13
  2963  0164  00A7               	movwf	((low ((_PWMLDCONptr| (0+256)+6))+1))^(0+128)
  2964  0165  30CF               	movlw	207
  2965  0166  00A6               	movwf	(low ((_PWMLDCONptr| (0+256)+6)))^(0+128)
  2966                           
  2967                           ;DMX.c: 48: PWMDCptr[0]=&PWM1DC;
  2968  0167  300D               	movlw	13
  2969  0168  00A9               	movwf	(_PWMDCptr+1)^(0+384)
  2970  0169  3093               	movlw	147
  2971  016A  00A8               	movwf	_PWMDCptr^(0+384)
  2972                           
  2973                           ;DMX.c: 49: PWMDCptr[1]=&PWM1DC;
  2974  016B  300D               	movlw	13
  2975  016C  00AB               	movwf	((low ((_PWMDCptr| (0+256)+2))+1))^(0+128)
  2976  016D  3093               	movlw	147
  2977  016E  00AA               	movwf	(low ((_PWMDCptr| (0+256)+2)))^(0+128)
  2978                           
  2979                           ;DMX.c: 50: PWMDCptr[2]=&PWM1DC;
  2980  016F  300D               	movlw	13
  2981  0170  00AD               	movwf	((low ((_PWMDCptr| (0+256)+4))+1))^(0+128)
  2982  0171  3093               	movlw	147
  2983  0172  00AC               	movwf	(low ((_PWMDCptr| (0+256)+4)))^(0+128)
  2984                           
  2985                           ;DMX.c: 51: PWMDCptr[3]=&PWM1DC;
  2986  0173  300D               	movlw	13
  2987  0174  00AF               	movwf	((low ((_PWMDCptr| (0+256)+6))+1))^(0+128)
  2988  0175  3093               	movlw	147
  2989  0176  00AE               	movwf	(low ((_PWMDCptr| (0+256)+6)))^(0+128)
  2990                           
  2991                           ;DMX.c: 59: Addr=0;
  2992  0177  0020               	movlb	0	; select bank0
  2993  0178  01EC               	clrf	_Addr
  2994  0179                     l4545:	
  2995                           ;DMX.c: 60: while(Addr<4){
  2996                           
  2997  0179  3004               	movlw	4
  2998  017A  026C               	subwf	_Addr,w
  2999  017B  1803               	btfsc	3,0
  3000  017C  0008               	return
  3001                           
  3002                           ;DMX.c: 61: DMX_sumRepeat[Addr]=2;
  3003  017D  23B3  3180         	fcall	PL82	;call to abstracted procedure
  3004                           
  3005                           ;DMX.c: 62: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  3006  017F  356C               	lslf	_Addr,w
  3007  0180  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  3008  0181  0086               	movwf	6
  3009  0182  3001               	movlw	1	; select bank2/3
  3010  0183  0087               	movwf	7
  3011  0184  23CC               	fcall	PL118	;call to abstracted procedure
  3012  0185  3F80               	movwi [0]fsr0
  3013  0186  0081               	movwf	1
  3014                           
  3015                           ;DMX.c: 63: DMXSign[Addr].InfiniteLoop=0;
  3016  0187  086C               	movf	_Addr,w
  3017  0188  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  3018  0189  0086               	movwf	6
  3019  018A  0187               	clrf	7
  3020  018B  1101               	bcf	1,2
  3021                           
  3022                           ;DMX.c: 64: DMX_TargetBright[Addr]=DMX_CurrentBright[Addr]=0.0;
  3023  018C  01A0               	clrf	??_DMX_init
  3024  018D  01A1               	clrf	??_DMX_init+1
  3025  018E  01A2               	clrf	??_DMX_init+2
  3026  018F  318E  26D7  3180   	fcall	PL8	;call to abstracted procedure
  3027  0192  23A6               	fcall	PL78	;call to abstracted procedure
  3028  0193  318F  274A  3180   	fcall	PL30	;call to abstracted procedure
  3029  0196  0086               	movwf	6
  3030  0197  23A6  3180         	fcall	PL78	;call to abstracted procedure
  3031                           
  3032                           ;DMX.c: 65: Addr++;
  3033  0199  0AEC               	incf	_Addr,f
  3034  019A  2979               	goto	l4545
  3035  019B                     __end_of_DMX_init:	
  3036  019B                     __ptext13:	
  3037 ;; *************** function _RDM_init *****************
  3038 ;; Defined at:
  3039 ;;		line 16 in file "RDM.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2  116[None  ] int 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : B1F/0
  3050 ;;		On exit  : 1C/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;Total ram usage:        2 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    3
  3060 ;; This function calls:
  3061 ;;		___bmul
  3062 ;; This function is called by:
  3063 ;;		_main
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _RDM_init
  3069  019B                     _RDM_init:	
  3070                           
  3071                           ;RDM.c: 17: TimerState = 0;
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _RDM_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3075  019B  0021               	movlb	1	; select bank1
  3076  019C  01DD               	clrf	_TimerState^(0+128)	;volatile
  3077                           
  3078                           ;RDM.c: 19: Timer.HR_Count = 0;
  3079  019D  01BD               	clrf	(_Timer^(0+128)+5)	;volatile
  3080                           
  3081                           ;RDM.c: 20: Timer.MIN_Count = 0;
  3082  019E  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  3083                           
  3084                           ;RDM.c: 21: Timer.SEC_Count = 0;
  3085  019F  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  3086                           
  3087                           ;RDM.c: 22: Timer.flags = 0;
  3088  01A0  01B8               	clrf	_Timer^(0+128)	;volatile
  3089                           
  3090                           ;RDM.c: 25: TMR1 = 0xFE0B;
  3091  01A1  3184  243C  3180   	fcall	PL116	;call to abstracted procedure
  3092                           
  3093                           ;RDM.c: 26: TMR1IF = 0;
  3094  01A4  1011               	bcf	17,0	;volatile
  3095                           
  3096                           ;RDM.c: 27: TMR1IE = 1;
  3097  01A5  0021               	movlb	1	; select bank1
  3098  01A6  1411               	bsf	17,0	;volatile
  3099                           
  3100                           ;RDM.c: 28: PEIE = 1;
  3101  01A7  170B               	bsf	11,6	;volatile
  3102                           
  3103                           ;RDM.c: 31: LATC4 = 1;
  3104  01A8  0022               	movlb	2	; select bank2
  3105  01A9  160E               	bsf	14,4	;volatile
  3106                           
  3107                           ;RDM.c: 32: TRISC4 = 0;
  3108  01AA  0021               	movlb	1	; select bank1
  3109  01AB  120E               	bcf	14,4	;volatile
  3110                           
  3111                           ;RDM.c: 33: TXEN = 1;
  3112  01AC  0023               	movlb	3	; select bank3
  3113  01AD  169E               	bsf	30,5	;volatile
  3114                           
  3115                           ;RDM.c: 34: SPEN = 1;
  3116  01AE  179D               	bsf	29,7	;volatile
  3117                           
  3118                           ;RDM.c: 35: SYNC = 0;
  3119  01AF  121E               	bcf	30,4	;volatile
  3120                           
  3121                           ;RDM.c: 36: RC4PPS = 0b1001;
  3122  01B0  3009               	movlw	9
  3123  01B1  003D               	movlb	29	; select bank29
  3124  01B2  00A4               	movwf	36	;volatile
  3125                           
  3126                           ;RDM.c: 38: TxByte = &TX_RDM_Data.value[0];
  3127  01B3  304C               	movlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  3128  01B4  0021               	movlb	1	; select bank1
  3129  01B5  00E0               	movwf	_TxByte^(0+128)
  3130                           
  3131                           ;RDM.c: 39: TX9 = TX9D = 1;
  3132  01B6  0023               	movlb	3	; select bank3
  3133  01B7  141E               	bsf	30,0	;volatile
  3134  01B8  1C1E               	btfss	30,0	;volatile
  3135  01B9  29BD               	goto	u3440
  3136  01BA  0023               	movlb	3	; select bank3
  3137  01BB  171E               	bsf	30,6	;volatile
  3138  01BC  29BF               	goto	l4573
  3139  01BD                     u3440:	
  3140  01BD  0023               	movlb	3	; select bank3
  3141  01BE  131E               	bcf	30,6	;volatile
  3142  01BF                     l4573:	
  3143                           
  3144                           ;RDM.c: 43: DMX_Flags.RDMmute = 0;
  3145  01BF  1177               	bcf	_DMX_Flags+1,2	;volatile
  3146                           
  3147                           ;RDM.c: 44: DMX_Flags.RDM_Identify_Device = 0;
  3148  01C0  11F7               	bcf	_DMX_Flags+1,3	;volatile
  3149                           
  3150                           ;RDM.c: 59: DMX_Address=1;
  3151  01C1  0021               	movlb	1	; select bank1
  3152  01C2  3018               	movlw	24
  3153  01C3  01D8               	clrf	_DMX_Address^(0+128)
  3154  01C4  0AD8               	incf	_DMX_Address^(0+128),f
  3155  01C5  01D9               	clrf	(_DMX_Address+1)^(0+128)
  3156                           
  3157                           ;RDM.c: 64: PDCount = 24;
  3158  01C6  00F9               	movwf	_PDCount
  3159  01C7                     l4585:	
  3160                           ;RDM.c: 67: while (PDCount >= 17) {
  3161                           
  3162  01C7  3011               	movlw	17
  3163  01C8  0279               	subwf	_PDCount,w
  3164  01C9  1C03               	btfss	3,0
  3165  01CA  29D4               	goto	l4587
  3166                           
  3167                           ;RDM.c: 68: DISCOVERY_RDM_Data[PDCount] = 0xFE;
  3168  01CB  0879               	movf	_PDCount,w
  3169  01CC  3EC4               	addlw	(low (_DISCOVERY_RDM_Data| (0+256)))& (0+255)
  3170  01CD  0086               	movwf	6
  3171  01CE  3001               	movlw	1	; select bank3/4
  3172  01CF  0087               	movwf	7
  3173  01D0  30FE               	movlw	254
  3174  01D1  0081               	movwf	1
  3175                           
  3176                           ;RDM.c: 69: PDCount--;
  3177  01D2  03F9               	decf	_PDCount,f
  3178  01D3  29C7               	goto	l4585
  3179  01D4                     l4587:	
  3180                           
  3181                           ;RDM.c: 70: }
  3182                           ;RDM.c: 71: DISCOVERY_RDM_Data[16] = 0xAA;
  3183  01D4  30AA               	movlw	170
  3184  01D5  0023               	movlb	3	; select bank3
  3185  01D6  00D4               	movwf	(_DISCOVERY_RDM_Data^(0+384)+16)
  3186                           
  3187                           ;RDM.c: 72: PDCount = 0;
  3188  01D7  01F9               	clrf	_PDCount
  3189                           
  3190                           ;RDM.c: 73: checkSum = 0;
  3191  01D8  0021               	movlb	1	; select bank1
  3192  01D9  01C6               	clrf	_checkSum^(0+128)
  3193  01DA  01C7               	clrf	(_checkSum+1)^(0+128)
  3194  01DB                     l4601:	
  3195                           ;RDM.c: 74: while (PDCount < 6) {
  3196                           
  3197  01DB  3006               	movlw	6
  3198  01DC  0279               	subwf	_PDCount,w
  3199  01DD  1803               	btfsc	3,0
  3200  01DE  2A09               	goto	l4603
  3201                           
  3202                           ;RDM.c: 75: DISCOVERY_RDM_Data[15 - PDCount * 2] = UID[PDCount] | 0xAA;
  3203  01DF  30FE               	movlw	254
  3204  01E0  00F4               	movwf	___bmul@multiplicand
  3205  01E1  0879               	movf	_PDCount,w
  3206  01E2  223D  3180         	fcall	___bmul
  3207  01E4  3ED3               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  3208  01E5  2393  3180         	fcall	PL40	;call to abstracted procedure
  3209  01E7  38AA               	iorlw	170
  3210                           
  3211                           ;RDM.c: 76: DISCOVERY_RDM_Data[14 - PDCount * 2] = UID[PDCount] | 0x55;
  3212  01E8  23D2  3180         	fcall	PL126	;call to abstracted procedure
  3213  01EA  223D  3180         	fcall	___bmul
  3214  01EC  3ED2               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  3215  01ED  2393  3180         	fcall	PL40	;call to abstracted procedure
  3216  01EF  3855               	iorlw	85
  3217                           
  3218                           ;RDM.c: 77: checkSum += DISCOVERY_RDM_Data[15 - PDCount * 2];
  3219  01F0  23D2  3180         	fcall	PL126	;call to abstracted procedure
  3220  01F2  223D  3180         	fcall	___bmul
  3221  01F4  3ED3               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+15)))& (0+255)
  3222  01F5  0086               	movwf	6
  3223  01F6  3001               	movlw	1	; select bank3/4
  3224  01F7  0087               	movwf	7
  3225  01F8  0801               	movf	1,w
  3226  01F9  0021               	movlb	1	; select bank1
  3227  01FA  07C6               	addwf	_checkSum^(0+128),f
  3228  01FB  1803               	skipnc
  3229  01FC  0AC7               	incf	(_checkSum+1)^(0+128),f
  3230                           
  3231                           ;RDM.c: 78: checkSum += DISCOVERY_RDM_Data[14 - PDCount * 2];
  3232  01FD  30FE               	movlw	254
  3233  01FE  00F4               	movwf	___bmul@multiplicand
  3234  01FF  0879               	movf	_PDCount,w
  3235  0200  223D  3180         	fcall	___bmul
  3236  0202  3ED2               	addlw	(low ((_DISCOVERY_RDM_Data| (0+256)+14)))& (0+255)
  3237  0203  0086               	movwf	6
  3238  0204  3001               	movlw	1	; select bank3/4
  3239  0205  0087               	movwf	7
  3240                           
  3241                           ;RDM.c: 79: PDCount++;
  3242  0206  239F  3180         	fcall	PL72	;call to abstracted procedure
  3243  0208  29DB               	goto	l4601
  3244  0209                     l4603:	
  3245                           
  3246                           ;RDM.c: 80: }
  3247                           ;RDM.c: 81: TX_RDM_Data.CS = checkSum;
  3248  0209  0847               	movf	(_checkSum+1)^(0+128),w
  3249  020A  0022               	movlb	2	; select bank2
  3250  020B  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  3251  020C  0021               	movlb	1	; select bank1
  3252  020D  0846               	movf	_checkSum^(0+128),w
  3253  020E  0022               	movlb	2	; select bank2
  3254  020F  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  3255                           
  3256                           ;RDM.c: 83: DISCOVERY_RDM_Data[3] = TX_RDM_Data.CSH | 0xAA;
  3257  0210  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  3258  0211  38AA               	iorlw	170
  3259  0212  0023               	movlb	3	; select bank3
  3260  0213  00C7               	movwf	(_DISCOVERY_RDM_Data^(0+384)+3)
  3261                           
  3262                           ;RDM.c: 84: DISCOVERY_RDM_Data[2] = TX_RDM_Data.CSH | 0x55;
  3263  0214  0022               	movlb	2	; select bank2
  3264  0215  084D               	movf	(_TX_RDM_Data^(0+256)+1),w	;volatile
  3265  0216  3855               	iorlw	85
  3266  0217  0023               	movlb	3	; select bank3
  3267  0218  00C6               	movwf	(_DISCOVERY_RDM_Data^(0+384)+2)
  3268                           
  3269                           ;RDM.c: 85: DISCOVERY_RDM_Data[1] = TX_RDM_Data.CSL | 0xAA;
  3270  0219  0022               	movlb	2	; select bank2
  3271  021A  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  3272  021B  38AA               	iorlw	170
  3273  021C  0023               	movlb	3	; select bank3
  3274  021D  00C5               	movwf	(_DISCOVERY_RDM_Data^(0+384)+1)
  3275                           
  3276                           ;RDM.c: 86: DISCOVERY_RDM_Data[0] = TX_RDM_Data.CSL | 0x55;
  3277  021E  0022               	movlb	2	; select bank2
  3278  021F  084C               	movf	_TX_RDM_Data^(0+256),w	;volatile
  3279  0220  3855               	iorlw	85
  3280  0221  0023               	movlb	3	; select bank3
  3281  0222  00C4               	movwf	_DISCOVERY_RDM_Data^(0+384)
  3282                           
  3283                           ;RDM.c: 88: PDCount = 16;
  3284  0223  3010               	movlw	16
  3285  0224  00F9               	movwf	_PDCount
  3286  0225                     l4617:	
  3287                           ;RDM.c: 89: while (PDCount >= 11) {
  3288                           
  3289  0225  300B               	movlw	11
  3290  0226  0279               	subwf	_PDCount,w
  3291  0227  1C03               	btfss	3,0
  3292  0228  0008               	return
  3293                           
  3294                           ;RDM.c: 90: TX_RDM_Data.value[PDCount] = UID[16-PDCount];
  3295  0229  0879               	movf	_PDCount,w
  3296  022A  3E4C               	addlw	(low (_TX_RDM_Data| (0+256)))& (0+255)
  3297  022B  0086               	movwf	6
  3298  022C  3001               	movlw	1	; select bank2/3
  3299  022D  0087               	movwf	7
  3300  022E  3092               	movlw	high ((_UID| (0+32768)+16))
  3301  022F  0020               	movlb	0	; select bank0
  3302  0230  00A3               	movwf	??_RDM_init+1
  3303  0231  0879               	movf	_PDCount,w
  3304  0232  3C10               	sublw	low ((_UID| (0+32768)+16))
  3305  0233  00A2               	movwf	??_RDM_init
  3306  0234  1C03               	skipc
  3307  0235  03A3               	decf	??_RDM_init+1,f
  3308  0236  0084               	movwf	4
  3309  0237  0823               	movf	??_RDM_init+1,w
  3310  0238  0085               	movwf	5
  3311  0239  0800               	movf	0,w	;code access
  3312  023A  0081               	movwf	1
  3313                           
  3314                           ;RDM.c: 91: PDCount--;
  3315  023B  03F9               	decf	_PDCount,f
  3316  023C  2A25               	goto	l4617
  3317  023D                     __end_of_RDM_init:	
  3318  023D                     __ptext14:	
  3319 ;; *************** function ___bmul *****************
  3320 ;; Defined at:
  3321 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  multiplier      1    wreg     unsigned char 
  3324 ;;  multiplicand    1    4[COMMON] unsigned char 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  multiplier      1    1[BANK0 ] unsigned char 
  3327 ;;  product         1    0[BANK0 ] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      unsigned char 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 1E/1
  3334 ;;		On exit  : 1F/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3337 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3341 ;;Total ram usage:        3 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    2
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_RDM_init
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function ___bmul
  3353  023D                     ___bmul:	
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3357                           ;___bmul@multiplier stored from wreg
  3358  023D  0020               	movlb	0	; select bank0
  3359  023E  00A1               	movwf	___bmul@multiplier
  3360  023F  01A0               	clrf	___bmul@product
  3361  0240                     l4355:	
  3362  0240  0874               	movf	___bmul@multiplicand,w
  3363  0241  1821               	btfsc	___bmul@multiplier,0
  3364  0242  07A0               	addwf	___bmul@product,f
  3365  0243  35F4               	lslf	___bmul@multiplicand,f
  3366  0244  36A1               	lsrf	___bmul@multiplier,f
  3367  0245  0821               	movf	___bmul@multiplier,w
  3368  0246  1D03               	btfss	3,2
  3369  0247  2A40               	goto	l4355
  3370  0248  0820               	movf	___bmul@product,w
  3371  0249  0008               	return
  3372  024A                     __end_of___bmul:	
  3373  024A                     __ptext6:	
  3374 ;; *************** function _PFM_Write *****************
  3375 ;; Defined at:
  3376 ;;		line 23 in file "PFM.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  AddrPFM         2    0[BANK0 ] unsigned int 
  3379 ;;  Data            2    2[BANK0 ] unsigned int 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg, pclath, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 1F/0
  3388 ;;		On exit  : 1F/3
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3395 ;;Total ram usage:        4 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    3
  3398 ;; This function calls:
  3399 ;;		_PFM_Read
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;;		_RDM_SET_CC
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           
  3407                           ;psect for function _PFM_Write
  3408  024A                     _PFM_Write:	
  3409  024A                     l958:	
  3410                           ;incstack = 0
  3411                           ; Regs used in _PFM_Write: [wreg+pclath+cstack]
  3412                           ;PFM.c: 24: do{
  3413                           
  3414                           
  3415                           ;PFM.c: 25: GIE=0;
  3416  024A  138B               	bcf	11,7	;volatile
  3417                           
  3418                           ;PFM.c: 26: CFGS=0;
  3419  024B  0023               	movlb	3	; select bank3
  3420  024C  1315               	bcf	21,6	;volatile
  3421                           
  3422                           ;PFM.c: 27: PMADR=AddrPFM;
  3423  024D  0020               	movlb	0	; select bank0
  3424  024E  0821               	movf	PFM_Write@AddrPFM+1,w
  3425  024F  0023               	movlb	3	; select bank3
  3426  0250  0092               	movwf	18	;volatile
  3427  0251  0020               	movlb	0	; select bank0
  3428  0252  0820               	movf	PFM_Write@AddrPFM,w
  3429  0253  0023               	movlb	3	; select bank3
  3430  0254  0091               	movwf	17	;volatile
  3431                           
  3432                           ;PFM.c: 30: FREE = 1;
  3433  0255  1615               	bsf	21,4	;volatile
  3434                           
  3435                           ;PFM.c: 31: WREN = 1;
  3436  0256  1515               	bsf	21,2	;volatile
  3437                           
  3438                           ;PFM.c: 32: PMCON2=0x55;
  3439  0257  3055               	movlw	85
  3440  0258  0096               	movwf	22	;volsfr
  3441                           
  3442                           ;PFM.c: 33: PMCON2=0xAA;
  3443  0259  30AA               	movlw	170
  3444  025A  0096               	movwf	22	;volsfr
  3445                           
  3446                           ;PFM.c: 34: WR=1;
  3447  025B  1495               	bsf	21,1	;volatile
  3448  025C  0000               	nop	;# 
  3449  025D  0000               	nop	;# 
  3450                           
  3451                           ;PFM.c: 39: FREE = 0;
  3452  025E  0023               	movlb	3	; select bank3
  3453  025F  1215               	bcf	21,4	;volatile
  3454                           
  3455                           ;PFM.c: 40: LWLO = 1;
  3456  0260  1695               	bsf	21,5	;volatile
  3457                           
  3458                           ;PFM.c: 41: PMDAT=Data;
  3459  0261  0020               	movlb	0	; select bank0
  3460  0262  0823               	movf	PFM_Write@Data+1,w
  3461  0263  0023               	movlb	3	; select bank3
  3462  0264  0094               	movwf	20	;volatile
  3463  0265  0020               	movlb	0	; select bank0
  3464  0266  0822               	movf	PFM_Write@Data,w
  3465  0267  0023               	movlb	3	; select bank3
  3466  0268  0093               	movwf	19	;volatile
  3467                           
  3468                           ;PFM.c: 42: LWLO=0;
  3469  0269  1295               	bcf	21,5	;volatile
  3470                           
  3471                           ;PFM.c: 43: PMCON2=0x55;
  3472  026A  3055               	movlw	85
  3473  026B  0096               	movwf	22	;volsfr
  3474                           
  3475                           ;PFM.c: 44: PMCON2=0xAA;
  3476  026C  30AA               	movlw	170
  3477  026D  0096               	movwf	22	;volsfr
  3478                           
  3479                           ;PFM.c: 45: WR=1;
  3480  026E  1495               	bsf	21,1	;volatile
  3481  026F  0000               	nop	;# 
  3482  0270  0000               	nop	;# 
  3483                           
  3484                           ;PFM.c: 49: }while(PFM_Read(AddrPFM)!=Data);
  3485  0271  0020               	movlb	0	; select bank0
  3486  0272  0821               	movf	PFM_Write@AddrPFM+1,w
  3487  0273  00F5               	movwf	PFM_Read@AddrPFM+1
  3488  0274  0820               	movf	PFM_Write@AddrPFM,w
  3489  0275  00F4               	movwf	PFM_Read@AddrPFM
  3490  0276  20E5  3180         	fcall	_PFM_Read
  3491  0278  0020               	movlb	0	; select bank0
  3492  0279  0823               	movf	PFM_Write@Data+1,w
  3493  027A  0675               	xorwf	?_PFM_Read+1,w
  3494  027B  1D03               	skipz
  3495  027C  2A7F               	goto	u3015
  3496  027D  0822               	movf	PFM_Write@Data,w
  3497  027E  0674               	xorwf	?_PFM_Read,w
  3498  027F                     u3015:	
  3499  027F  1D03               	skipz
  3500  0280  2A4A               	goto	l958
  3501                           
  3502                           ;PFM.c: 50: WREN=0;
  3503  0281  0023               	movlb	3	; select bank3
  3504  0282  1115               	bcf	21,2	;volatile
  3505                           
  3506                           ;PFM.c: 51: GIE=1;
  3507  0283  178B               	bsf	11,7	;volatile
  3508  0284  0008               	return
  3509  0285                     __end_of_PFM_Write:	
  3510  0285                     __ptext3:	
  3511 ;; *************** function _RDM_rx_loop *****************
  3512 ;; Defined at:
  3513 ;;		line 98 in file "RDM.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  2  136[None  ] int 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 1F/1
  3524 ;;		On exit  : 1C/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;Total ram usage:        1 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    5
  3534 ;; This function calls:
  3535 ;;		_RDM_GET_CC
  3536 ;;		_RDM_SET_CC
  3537 ;;		_RDM_discovery_CC
  3538 ;;		_RDM_get_checkSum
  3539 ;; This function is called by:
  3540 ;;		_main
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _RDM_rx_loop
  3546  0285                     _RDM_rx_loop:	
  3547                           
  3548                           ;RDM.c: 99: if (DMX_Flags.RDMNew == 1) {
  3549                           
  3550                           ;incstack = 0
  3551                           ; Regs used in _RDM_rx_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3552  0285  1F76               	btfss	_DMX_Flags,6	;volatile
  3553  0286  0008               	return
  3554                           
  3555                           ;RDM.c: 100: DMX_Flags.RDMNew = 0;
  3556  0287  1376               	bcf	_DMX_Flags,6	;volatile
  3557                           
  3558                           ;RDM.c: 101: DMX_Flags.RDMcheckUID_flag = 0;
  3559  0288  30FC               	movlw	-4
  3560  0289  05F7               	andwf	_DMX_Flags+1,f	;volatile
  3561                           
  3562                           ;RDM.c: 103: if ((RX_RDM_Data.DUID.M == 0x08BA || RX_RDM_Data.DUID.M == 0xFFFF)&& (RX_RD
      +                          M_Data.DUID.ID == 0x12345678 || RX_RDM_Data.DUID.ID == 0xFFFFFFFF)) {
  3563  028A  30BA               	movlw	186
  3564  028B  0022               	movlb	2	; select bank2
  3565  028C  0635               	xorwf	(_RX_RDM_Data^(0+256)+21),w	;volatile
  3566  028D  3008               	movlw	8
  3567  028E  1903               	skipnz
  3568  028F  0636               	xorwf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  3569  0290  1903               	btfsc	3,2
  3570  0291  2A97               	goto	l4757
  3571  0292  0F35               	incfsz	(_RX_RDM_Data^(0+256)+21),w	;volatile
  3572  0293  2AB3               	goto	l690
  3573  0294  0A36               	incf	((_RX_RDM_Data+1)^(0+256)+21),w	;volatile
  3574  0295  1D03               	btfss	3,2
  3575  0296  2AB3               	goto	l690
  3576  0297                     l4757:	
  3577  0297  3078               	movlw	120
  3578  0298  0631               	xorwf	(_RX_RDM_Data^(0+256)+17),w	;volatile
  3579  0299  3056               	movlw	86
  3580  029A  1903               	skipnz
  3581  029B  0632               	xorwf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  3582  029C  3034               	movlw	52
  3583  029D  1903               	skipnz
  3584  029E  0633               	xorwf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  3585  029F  3012               	movlw	18
  3586  02A0  1903               	skipnz
  3587  02A1  0634               	xorwf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  3588  02A2  1903               	btfsc	3,2
  3589  02A3  2AAF               	goto	l4761
  3590  02A4  0F31               	incfsz	(_RX_RDM_Data^(0+256)+17),w	;volatile
  3591  02A5  2AB3               	goto	l690
  3592  02A6  0A32               	incf	((_RX_RDM_Data+1)^(0+256)+17),w	;volatile
  3593  02A7  1D03               	skipz
  3594  02A8  2AB3               	goto	l690
  3595  02A9  0A33               	incf	((_RX_RDM_Data+2)^(0+256)+17),w	;volatile
  3596  02AA  1D03               	skipz
  3597  02AB  2AB3               	goto	l690
  3598  02AC  0A34               	incf	((_RX_RDM_Data+3)^(0+256)+17),w	;volatile
  3599  02AD  1D03               	btfss	3,2
  3600  02AE  2AB3               	goto	l690
  3601  02AF                     l4761:	
  3602                           
  3603                           ;RDM.c: 104: DMX_Flags.RDMcheckUID_flag = 1;
  3604  02AF  0877               	movf	_DMX_Flags+1,w	;volatile
  3605  02B0  39FC               	andlw	-4
  3606  02B1  3801               	iorlw	1
  3607  02B2  00F7               	movwf	_DMX_Flags+1	;volatile
  3608  02B3                     l690:	
  3609                           
  3610                           ;RDM.c: 105: }
  3611                           ;RDM.c: 107: if (DMX_Flags.RDMcheckUID_flag == 1 && RDM_get_checkSum(RX_RDM_Data,100) ==
      +                           RX_RDM_Data.CS) {
  3612  02B3  0877               	movf	_DMX_Flags+1,w	;volatile
  3613  02B4  3903               	andlw	3
  3614  02B5  3A01               	xorlw	1
  3615  02B6  1D03               	skipz
  3616  02B7  2AD7               	goto	l695
  3617  02B8  3020               	movlw	low _RX_RDM_Data
  3618  02B9  0086               	movwf	6
  3619  02BA  3001               	movlw	high _RX_RDM_Data
  3620  02BB  23AD  3180         	fcall	PL80	;call to abstracted procedure
  3621  02BD  0020               	movlb	0	; select bank0
  3622  02BE  00BD               	movwf	??_RDM_rx_loop
  3623  02BF                     u3720:	
  3624  02BF  0016               	moviw fsr1++
  3625  02C0  001A               	movwi fsr0++
  3626  02C1  0BBD               	decfsz	??_RDM_rx_loop,f
  3627  02C2  2ABF               	goto	u3720
  3628  02C3  3064               	movlw	100
  3629  02C4  00B8               	movwf	RDM_get_checkSum@len
  3630  02C5  22EE  3180         	fcall	_RDM_get_checkSum
  3631  02C7  0022               	movlb	2	; select bank2
  3632  02C8  0821               	movf	(_RX_RDM_Data+1)^(0+256),w	;volatile
  3633  02C9  0020               	movlb	0	; select bank0
  3634  02CA  0621               	xorwf	?_RDM_get_checkSum+1,w
  3635  02CB  1D03               	skipz
  3636  02CC  2AD1               	goto	u3735
  3637  02CD  0022               	movlb	2	; select bank2
  3638  02CE  0820               	movf	_RX_RDM_Data^(0+256),w	;volatile
  3639  02CF  0020               	movlb	0	; select bank0
  3640  02D0  0620               	xorwf	?_RDM_get_checkSum,w
  3641  02D1                     u3735:	
  3642  02D1  1D03               	skipz
  3643  02D2  2AD7               	goto	l695
  3644                           
  3645                           ;RDM.c: 108: DMX_Flags.RDMcheckUID_flag = 2;
  3646  02D3  0877               	movf	_DMX_Flags+1,w	;volatile
  3647  02D4  39FC               	andlw	-4
  3648  02D5  3802               	iorlw	2
  3649  02D6  00F7               	movwf	_DMX_Flags+1	;volatile
  3650  02D7                     l695:	
  3651                           
  3652                           ;RDM.c: 109: }
  3653                           ;RDM.c: 111: if (DMX_Flags.RDMcheckUID_flag == 2) {
  3654  02D7  0877               	movf	_DMX_Flags+1,w	;volatile
  3655  02D8  3903               	andlw	3
  3656  02D9  3A02               	xorlw	2
  3657  02DA  1D03               	skipz
  3658  02DB  0008               	return
  3659                           
  3660                           ;RDM.c: 121: break;
  3661  02DC  0022               	movlb	2	; select bank2
  3662  02DD  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  3663                           
  3664                           ; Switch size 1, requested type "space"
  3665                           ; Number of cases is 3, Range of values is 16 to 48
  3666                           ; switch strategies available:
  3667                           ; Name         Instructions Cycles
  3668                           ; simple_byte           10     6 (average)
  3669                           ; direct_byte           75     9 (fixed)
  3670                           ; jumptable            263     9 (fixed)
  3671                           ;	Chosen strategy is simple_byte
  3672  02DE  3A10               	xorlw	16	; case 16
  3673  02DF  1903               	skipnz
  3674  02E0  2AE8               	goto	l4769
  3675  02E1  3A30               	xorlw	48	; case 32
  3676  02E2  1903               	skipnz
  3677  02E3  2AEA               	goto	l4771
  3678  02E4  3A10               	xorlw	16	; case 48
  3679  02E5  1903               	skipnz
  3680  02E6  2AEC               	goto	l4773
  3681  02E7  2AED               	goto	l702
  3682  02E8                     l4769:	
  3683                           
  3684                           ;RDM.c: 114: RDM_discovery_CC();
  3685  02E8  3184  2CB6         	ljmp	l4213
  3686  02EA                     l4771:	
  3687                           ;RDM.c: 115: break;
  3688                           
  3689                           
  3690                           ;RDM.c: 117: RDM_GET_CC();
  3691  02EA  3184  2C42         	ljmp	l4279
  3692  02EC                     l4773:	
  3693                           ;RDM.c: 118: break;
  3694                           
  3695                           
  3696                           ;RDM.c: 120: RDM_SET_CC();
  3697  02EC  2B5F               	ljmp	l4325
  3698  02ED                     l702:	
  3699  02ED  0008               	return
  3700  02EE                     __end_of_RDM_rx_loop:	
  3701  02EE                     __ptext12:	
  3702 ;; *************** function _RDM_get_checkSum *****************
  3703 ;; Defined at:
  3704 ;;		line 136 in file "RDM_Read.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  Data           24    0[BANK0 ] struct .
  3707 ;;  len             1   24[BANK0 ] unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  2    0[BANK0 ] unsigned int 
  3712 ;; Registers used:
  3713 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3714 ;; Tracked objects:
  3715 ;;		On entry : 1F/0
  3716 ;;		On exit  : 1F/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3719 ;;      Params:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;Total ram usage:       25 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    2
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_RDM_rx_loop
  3730 ;;		_RDM_TXSTART
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _RDM_get_checkSum
  3736  02EE                     _RDM_get_checkSum:	
  3737                           
  3738                           ;RDM_Read.c: 137: checkSum = 0x00CD;
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _RDM_get_checkSum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3742  02EE  30CD               	movlw	205
  3743  02EF  0021               	movlb	1	; select bank1
  3744  02F0  00C6               	movwf	_checkSum^(0+128)
  3745  02F1  3017               	movlw	23
  3746  02F2  01C7               	clrf	(_checkSum+1)^(0+128)
  3747                           
  3748                           ;RDM_Read.c: 138: PackCount = 23;
  3749  02F3  00F8               	movwf	_PackCount	;volatile
  3750  02F4                     l2825:	
  3751                           ;RDM_Read.c: 139: while (PackCount > 1) {
  3752                           
  3753  02F4  3002               	movlw	2
  3754  02F5  0278               	subwf	_PackCount,w	;volatile
  3755  02F6  1C03               	btfss	3,0
  3756  02F7  2B02               	goto	l2827
  3757                           
  3758                           ;RDM_Read.c: 140: checkSum += Data.value[PackCount];
  3759  02F8  0878               	movf	_PackCount,w
  3760  02F9  3E20               	addlw	(low (RDM_get_checkSum@Data| 0))& (0+255)
  3761  02FA  0086               	movwf	6
  3762  02FB  0187               	clrf	7
  3763  02FC  0801               	movf	1,w
  3764  02FD  07C6               	addwf	_checkSum^(0+128),f
  3765  02FE  1803               	skipnc
  3766  02FF  0AC7               	incf	(_checkSum+1)^(0+128),f
  3767                           
  3768                           ;RDM_Read.c: 141: PackCount--;
  3769  0300  03F8               	decf	_PackCount,f	;volatile
  3770  0301  2AF4               	goto	l2825
  3771  0302                     l2827:	
  3772                           
  3773                           ;RDM_Read.c: 142: }
  3774                           ;RDM_Read.c: 143: PackCount = len-1;
  3775  0302  0020               	movlb	0	; select bank0
  3776  0303  0838               	movf	RDM_get_checkSum@len,w
  3777  0304  3EFF               	addlw	255
  3778  0305  00F8               	movwf	_PackCount	;volatile
  3779                           
  3780                           ;RDM_Read.c: 144: PDCount = len - Data.PDL;
  3781  0306  0822               	movf	RDM_get_checkSum@Data+2,w
  3782  0307  0238               	subwf	RDM_get_checkSum@len,w
  3783  0308  00F9               	movwf	_PDCount
  3784  0309                     l2833:	
  3785                           ;RDM_Read.c: 145: while (PackCount >= PDCount) {
  3786                           
  3787  0309  0879               	movf	_PDCount,w
  3788  030A  0278               	subwf	_PackCount,w	;volatile
  3789  030B  1C03               	btfss	3,0
  3790  030C  2B14               	goto	l2835
  3791                           
  3792                           ;RDM_Read.c: 146: checkSum += PD.u8[PDCount];
  3793  030D  0879               	movf	_PDCount,w
  3794  030E  3187  273A  3180   	fcall	PL88	;call to abstracted procedure
  3795                           
  3796                           ;RDM_Read.c: 147: PDCount++;
  3797  0311  239F  3180         	fcall	PL72	;call to abstracted procedure
  3798  0313  2B09               	goto	l2833
  3799  0314                     l2835:	
  3800                           
  3801                           ;RDM_Read.c: 148: }
  3802                           ;RDM_Read.c: 149: return checkSum;
  3803  0314  0021               	movlb	1	; select bank1
  3804  0315  0847               	movf	(_checkSum+1)^(0+128),w
  3805  0316  0020               	movlb	0	; select bank0
  3806  0317  00A1               	movwf	?_RDM_get_checkSum+1
  3807  0318  0021               	movlb	1	; select bank1
  3808  0319  0846               	movf	_checkSum^(0+128),w
  3809  031A  0020               	movlb	0	; select bank0
  3810  031B  00A0               	movwf	?_RDM_get_checkSum
  3811  031C  0008               	return
  3812  031D                     __end_of_RDM_get_checkSum:	
  3813  031D                     __ptext2:	
  3814 ;; *************** function _timer1_init *****************
  3815 ;; Defined at:
  3816 ;;		line 15 in file "Timer.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  2  110[None  ] int 
  3823 ;; Registers used:
  3824 ;;		wreg
  3825 ;; Tracked objects:
  3826 ;;		On entry : B1F/3
  3827 ;;		On exit  : B1F/0
  3828 ;;		Unchanged: B00/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    2
  3837 ;; This function calls:
  3838 ;;		Nothing
  3839 ;; This function is called by:
  3840 ;;		_main
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _timer1_init
  3846  031D                     _timer1_init:	
  3847                           
  3848                           ;Timer.c: 16: TMR1IE = 1;
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in _timer1_init: [wreg]
  3852  031D  0021               	movlb	1	; select bank1
  3853  031E  1411               	bsf	17,0	;volatile
  3854                           
  3855                           ;Timer.c: 17: T1CON = 0b00110001;
  3856  031F  3031               	movlw	49
  3857  0320  0020               	movlb	0	; select bank0
  3858  0321  0098               	movwf	24	;volatile
  3859  0322  0008               	return
  3860  0323                     __end_of_timer1_init:	
  3861  0323                     __ptext1:	
  3862 ;; *************** function _timer1_switch *****************
  3863 ;; Defined at:
  3864 ;;		line 121 in file "Timer.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  RxDat2          1    4[COMMON] volatile unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2  134[None  ] int 
  3871 ;; Registers used:
  3872 ;;		wreg
  3873 ;; Tracked objects:
  3874 ;;		On entry : 1F/1
  3875 ;;		On exit  : 1F/1
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;Total ram usage:        1 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    2
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _timer1_switch
  3894  0323                     _timer1_switch:	
  3895                           
  3896                           ;Timer.c: 122: if(Timer.Switch==1){
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _timer1_switch: [wreg]
  3900  0323  1C3E               	btfss	(_Timer^(0+128)+6),0	;volatile
  3901  0324  0008               	return
  3902                           
  3903                           ;Timer.c: 123: SPEN=RA5;
  3904  0325  0020               	movlb	0	; select bank0
  3905  0326  1E8C               	btfss	12,5	;volatile
  3906  0327  2B2B               	goto	u2360
  3907  0328  0023               	movlb	3	; select bank3
  3908  0329  179D               	bsf	29,7	;volatile
  3909  032A  2B2D               	goto	u2374
  3910  032B                     u2360:	
  3911  032B  0023               	movlb	3	; select bank3
  3912  032C  139D               	bcf	29,7	;volatile
  3913  032D                     u2374:	
  3914                           
  3915                           ;Timer.c: 124: RC3=RA5;
  3916  032D  0020               	movlb	0	; select bank0
  3917  032E  1E8C               	btfss	12,5	;volatile
  3918  032F  2B33               	goto	u2380
  3919  0330  0020               	movlb	0	; select bank0
  3920  0331  158E               	bsf	14,3	;volatile
  3921  0332  2B35               	goto	u2394
  3922  0333                     u2380:	
  3923  0333  0020               	movlb	0	; select bank0
  3924  0334  118E               	bcf	14,3	;volatile
  3925  0335                     u2394:	
  3926                           
  3927                           ;Timer.c: 125: RCIE=RA5;
  3928  0335  1E8C               	btfss	12,5	;volatile
  3929  0336  2B3A               	goto	u2400
  3930  0337  0021               	movlb	1	; select bank1
  3931  0338  1691               	bsf	17,5	;volatile
  3932  0339  2B3C               	goto	u2414
  3933  033A                     u2400:	
  3934  033A  0021               	movlb	1	; select bank1
  3935  033B  1291               	bcf	17,5	;volatile
  3936  033C                     u2414:	
  3937                           
  3938                           ;Timer.c: 126: volatile char RxDat2;
  3939                           ;Timer.c: 127: Timer.Switch=0;
  3940  033C  103E               	bcf	(_Timer^(0+128)+6),0	;volatile
  3941                           
  3942                           ;Timer.c: 128: ADIE=~RA5;
  3943  033D  0020               	movlb	0	; select bank0
  3944  033E  1A8C               	btfsc	12,5	;volatile
  3945  033F  2B43               	goto	u2420
  3946  0340  0021               	movlb	1	; select bank1
  3947  0341  1711               	bsf	17,6	;volatile
  3948  0342  2B45               	goto	u2434
  3949  0343                     u2420:	
  3950  0343  0021               	movlb	1	; select bank1
  3951  0344  1311               	bcf	17,6	;volatile
  3952  0345                     u2434:	
  3953                           
  3954                           ;Timer.c: 129: ADON=~RA5;
  3955  0345  0020               	movlb	0	; select bank0
  3956  0346  1A8C               	btfsc	12,5	;volatile
  3957  0347  2B4B               	goto	u2440
  3958  0348  0021               	movlb	1	; select bank1
  3959  0349  141D               	bsf	29,0	;volatile
  3960  034A  2B4D               	goto	u2454
  3961  034B                     u2440:	
  3962  034B  0021               	movlb	1	; select bank1
  3963  034C  101D               	bcf	29,0	;volatile
  3964  034D                     u2454:	
  3965                           
  3966                           ;Timer.c: 130: GO_nDONE = ~RA5;
  3967  034D  0020               	movlb	0	; select bank0
  3968  034E  1A8C               	btfsc	12,5	;volatile
  3969  034F  2B53               	goto	u2460
  3970  0350  0021               	movlb	1	; select bank1
  3971  0351  149D               	bsf	29,1	;volatile
  3972  0352  2B55               	goto	l3613
  3973  0353                     u2460:	
  3974  0353  0021               	movlb	1	; select bank1
  3975  0354  109D               	bcf	29,1	;volatile
  3976  0355                     l3613:	
  3977                           ;Timer.c: 131: if (FERR){}
  3978                           
  3979                           
  3980                           ;Timer.c: 132: RxDat2 = RCREG;
  3981  0355  0023               	movlb	3	; select bank3
  3982  0356  0819               	movf	25,w	;volatile
  3983  0357  00F4               	movwf	timer1_switch@RxDat2	;volatile
  3984                           
  3985                           ;Timer.c: 133: ADIF = 0;
  3986  0358  0020               	movlb	0	; select bank0
  3987  0359  1311               	bcf	17,6	;volatile
  3988                           
  3989                           ;Timer.c: 134: DMX_Flags.RxTimeout = 0;
  3990  035A  1176               	bcf	_DMX_Flags,2	;volatile
  3991                           
  3992                           ;Timer.c: 135: RxState = WAIT_FOR_START;
  3993  035B  3001               	movlw	1
  3994  035C  0021               	movlb	1	; select bank1
  3995  035D  00E5               	movwf	_RxState^(0+128)	;volatile
  3996  035E  0008               	return
  3997  035F                     __end_of_timer1_switch:	
  3998  035F                     __ptext5:	
  3999 ;; *************** function _RDM_SET_CC *****************
  4000 ;; Defined at:
  4001 ;;		line 44 in file "RDM_Read.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 1C/2
  4012 ;;		On exit  : 1F/1
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    4
  4022 ;; This function calls:
  4023 ;;		_PFM_Write
  4024 ;;		_RDM_TXSTART
  4025 ;; This function is called by:
  4026 ;;		_RDM_rx_loop
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _RDM_SET_CC
  4032  035F                     _RDM_SET_CC:	
  4033  035F                     l4325:	
  4034                           ;incstack = 0
  4035                           ; Regs used in _RDM_SET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4036                           
  4037                           
  4038                           ;RDM_Read.c: 45: switch (RX_RDM_Data.PID){
  4039  035F  2B7E               	goto	l4337
  4040  0360                     l4327:	
  4041                           
  4042                           ;RDM_Read.c: 48: DMX_Address=PD.u16[50-1];
  4043  0360  30DE               	movlw	222
  4044  0361  0086               	movwf	6
  4045  0362  3023               	movlw	35
  4046  0363  0087               	movwf	7
  4047  0364  3F40               	moviw [0]fsr1
  4048  0365  0021               	movlb	1	; select bank1
  4049  0366  00D8               	movwf	_DMX_Address^(0+128)
  4050  0367  3F41               	moviw [1]fsr1
  4051  0368  00D9               	movwf	(_DMX_Address+1)^(0+128)
  4052                           
  4053                           ;RDM_Read.c: 49: PFM_Write(Flash_DMXAddress,DMX_Address);
  4054  0369  3080               	movlw	128
  4055  036A  0020               	movlb	0	; select bank0
  4056  036B  00A0               	movwf	PFM_Write@AddrPFM
  4057  036C  301F               	movlw	31
  4058  036D  00A1               	movwf	PFM_Write@AddrPFM+1
  4059  036E  0021               	movlb	1	; select bank1
  4060  036F  0859               	movf	(_DMX_Address+1)^(0+128),w
  4061  0370  0020               	movlb	0	; select bank0
  4062  0371  00A3               	movwf	PFM_Write@Data+1
  4063  0372  0021               	movlb	1	; select bank1
  4064  0373  0858               	movf	_DMX_Address^(0+128),w
  4065  0374  0020               	movlb	0	; select bank0
  4066  0375  00A2               	movwf	PFM_Write@Data
  4067  0376  224A  3180         	fcall	_PFM_Write
  4068                           
  4069                           ;RDM_Read.c: 50: TX_RDM_Data.PDL=0;
  4070  0378  0022               	movlb	2	; select bank2
  4071  0379  01CE               	clrf	(_TX_RDM_Data^(0+256)+2)	;volatile
  4072                           
  4073                           ;RDM_Read.c: 52: break;
  4074  037A  2B91               	goto	l4339
  4075  037B                     l4333:	
  4076                           
  4077                           ;RDM_Read.c: 54: DMX_Flags.RDM_Identify_Device=~DMX_Flags.RDM_Identify_Device;
  4078  037B  3008               	movlw	8
  4079  037C  06F7               	xorwf	_DMX_Flags+1,f	;volatile
  4080                           
  4081                           ;RDM_Read.c: 55: break;
  4082  037D  2B91               	goto	l4339
  4083  037E                     l4337:	
  4084                           
  4085                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4086                           ; Switch size 1, requested type "space"
  4087                           ; Number of cases is 2, Range of values is 0 to 16
  4088                           ; switch strategies available:
  4089                           ; Name         Instructions Cycles
  4090                           ; simple_byte            7     4 (average)
  4091                           ; direct_byte           40     6 (fixed)
  4092                           ; jumptable            260     6 (fixed)
  4093                           ;	Chosen strategy is simple_byte
  4094  037E  0022               	movlb	2	; select bank2
  4095  037F  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  4096  0380  3A00               	xorlw	0	; case 0
  4097  0381  1903               	skipnz
  4098  0382  2B87               	goto	l4993
  4099  0383  3A10               	xorlw	16	; case 16
  4100  0384  1903               	skipnz
  4101  0385  2B8C               	goto	l4995
  4102  0386  2B91               	goto	l4339
  4103  0387                     l4993:	
  4104                           
  4105                           ; Switch size 1, requested type "space"
  4106                           ; Number of cases is 1, Range of values is 240 to 240
  4107                           ; switch strategies available:
  4108                           ; Name         Instructions Cycles
  4109                           ; simple_byte            4     3 (average)
  4110                           ; direct_byte           11     9 (fixed)
  4111                           ; jumptable            263     9 (fixed)
  4112                           ;	Chosen strategy is simple_byte
  4113  0387  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4114  0388  3AF0               	xorlw	240	; case 240
  4115  0389  1903               	skipnz
  4116  038A  2B60               	goto	l4327
  4117  038B  2B91               	goto	l4339
  4118  038C                     l4995:	
  4119                           
  4120                           ; Switch size 1, requested type "space"
  4121                           ; Number of cases is 1, Range of values is 0 to 0
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte            4     3 (average)
  4125                           ; direct_byte            8     6 (fixed)
  4126                           ; jumptable            260     6 (fixed)
  4127                           ;	Chosen strategy is simple_byte
  4128  038C  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  4129  038D  3A00               	xorlw	0	; case 0
  4130  038E  1903               	skipnz
  4131  038F  2B7B               	goto	l4333
  4132  0390  2B91               	goto	l4339
  4133  0391                     l4339:	
  4134                           
  4135                           ;RDM_Read.c: 57: RDM_TXSTART();
  4136  0391  3185  2D23         	ljmp	l2903
  4137  0393                     __end_of_RDM_SET_CC:	
  4138  0393                     PL40:	
  4139  0393  0086               	movwf	6
  4140  0394  3001               	movlw	1	; select bank3/4
  4141  0395  0087               	movwf	7
  4142  0396  0879               	movf	_PDCount,w
  4143  0397  3E00               	addlw	low (_UID| (0+32768))
  4144  0398  0084               	movwf	4
  4145  0399  3092               	movlw	high (_UID| (0+32768))
  4146  039A  1803               	skipnc
  4147  039B  3E01               	addlw	1
  4148  039C  0085               	movwf	5
  4149  039D  0800               	movf	0,w	;code access
  4150  039E  0008               	return
  4151  039F                     __end_ofPL40:	
  4152  039F                     PL72:	
  4153  039F  0801               	movf	1,w
  4154  03A0  0021               	movlb	1	; select bank1
  4155  03A1  07C6               	addwf	_checkSum^(0+128),f
  4156  03A2  1803               	skipnc
  4157  03A3  0AC7               	incf	(_checkSum+1)^(0+128),f
  4158  03A4  0AF9               	incf	_PDCount,f
  4159  03A5  0008               	return
  4160  03A6                     __end_ofPL72:	
  4161  03A6                     PL78:	
  4162  03A6  0820               	movf	??_DMX_init,w
  4163  03A7  3FC0               	movwi [0]fsr1
  4164  03A8  0821               	movf	??_DMX_init+1,w
  4165  03A9  3FC1               	movwi [1]fsr1
  4166  03AA  0822               	movf	??_DMX_init+2,w
  4167  03AB  3FC2               	movwi [2]fsr1
  4168  03AC  0008               	return
  4169  03AD                     __end_ofPL78:	
  4170  03AD                     PL80:	
  4171  03AD  0087               	movwf	7
  4172  03AE  3020               	movlw	low RDM_get_checkSum@Data
  4173  03AF  0084               	movwf	4
  4174  03B0  3000               	movlw	high RDM_get_checkSum@Data
  4175  03B1  0085               	movwf	5
  4176  03B2  3418               	retlw	24
  4177  03B3                     __end_ofPL80:	
  4178  03B3                     PL82:	
  4179  03B3  086C               	movf	_Addr,w
  4180  03B4  3EEB               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  4181  03B5  0086               	movwf	6
  4182  03B6  3002               	movlw	2
  4183  03B7  0187               	clrf	7
  4184  03B8  0081               	movwf	1
  4185  03B9  0008               	return
  4186  03BA                     __end_ofPL82:	
  4187  03BA                     PL104:	
  4188  03BA  0875               	movf	?_PFM_Read+1,w
  4189  03BB  0021               	movlb	1	; select bank1
  4190  03BC  00D9               	movwf	(_DMX_Address+1)^(0+128)
  4191  03BD  0874               	movf	?_PFM_Read,w
  4192  03BE  00D8               	movwf	_DMX_Address^(0+128)
  4193  03BF  0008               	return
  4194  03C0                     __end_ofPL104:	
  4195  03C0                     PL112:	
  4196  03C0  3080               	movlw	128
  4197  03C1  00CF               	movwf	79	;volatile
  4198  03C2  00BF               	movwf	63	;volatile
  4199  03C3  00AF               	movwf	47	;volatile
  4200  03C4  009F               	movwf	31	;volatile
  4201  03C5  0008               	return
  4202  03C6                     __end_ofPL112:	
  4203  03C6                     PL114:	
  4204  03C6  01F5               	clrf	??_ADC_loop+1
  4205  03C7  35F4               	lslf	??_ADC_loop,f
  4206  03C8  0DF5               	rlf	??_ADC_loop+1,f
  4207  03C9  0774               	addwf	??_ADC_loop,w
  4208  03CA  0084               	movwf	4
  4209  03CB  0008               	return
  4210  03CC                     __end_ofPL114:	
  4211  03CC                     PL118:	
  4212  03CC  356C               	lslf	_Addr,w
  4213  03CD  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  4214  03CE  0084               	movwf	4
  4215  03CF  3001               	movlw	1	; select bank2/3
  4216  03D0  0085               	movwf	5
  4217  03D1  0008               	return
  4218  03D2                     __end_ofPL118:	
  4219  03D2                     PL126:	
  4220  03D2  0081               	movwf	1
  4221  03D3  30FE               	movlw	254
  4222  03D4  00F4               	movwf	___bmul@multiplicand
  4223  03D5  0879               	movf	_PDCount,w
  4224  03D6  0008               	return
  4225  03D7                     __end_ofPL126:	
  4226                           
  4227                           	psect	bssCOMMON
  4228  0076                     __pbssCOMMON:	
  4229  0076                     _DMX_Flags:	
  4230  0076                     	ds	2
  4231  0078                     _PackCount:	
  4232  0078                     	ds	1
  4233  0079                     _PDCount:	
  4234  0079                     	ds	1
  4235                           
  4236                           	psect	bssBANK0
  4237  006C                     __pbssBANK0:	
  4238  006C                     _Addr:	
  4239  006C                     	ds	1
  4240                           
  4241                           	psect	bssBANK1
  4242  00A0                     __pbssBANK1:	
  4243  00A0                     _DMX_TargetBright:	
  4244  00A0                     	ds	12
  4245  00AC                     _DMX_CurrentBright:	
  4246  00AC                     	ds	12
  4247  00B8                     _Timer:	
  4248  00B8                     	ds	7
  4249  00BF                     _DMXSign:	
  4250  00BF                     	ds	4
  4251  00C3                     _DMX_difference:	
  4252  00C3                     	ds	3
  4253  00C6                     _checkSum:	
  4254  00C6                     	ds	2
  4255  00C8                     _TX_PD_Flag:	
  4256  00C8                     	ds	2
  4257  00CA                     _PD_Flag:	
  4258  00CA                     	ds	2
  4259  00CC                     _PD_ID:	
  4260  00CC                     	ds	2
  4261  00CE                     _PD_Manu:	
  4262  00CE                     	ds	2
  4263  00D0                     _TxCount:	
  4264  00D0                     	ds	2
  4265  00D2                     _i:	
  4266  00D2                     	ds	2
  4267  00D4                     _RxTimer:	
  4268  00D4                     	ds	2
  4269  00D6                     _RxAddrCount:	
  4270  00D6                     	ds	2
  4271  00D8                     _DMX_Address:	
  4272  00D8                     	ds	2
  4273  00DA                     _ADC_Flags:	
  4274  00DA                     	ds	1
  4275  00DB                     _ADC_Data:	
  4276  00DB                     	ds	1
  4277  00DC                     _Timer_DelayCount:	
  4278  00DC                     	ds	1
  4279  00DD                     _TimerState:	
  4280  00DD                     	ds	1
  4281  00DE                     _TX_PDCount:	
  4282  00DE                     	ds	1
  4283  00DF                     _TxState:	
  4284  00DF                     	ds	1
  4285  00E0                     _TxByte:	
  4286  00E0                     	ds	1
  4287  00E1                     _rxdata:	
  4288  00E1                     	ds	1
  4289  00E2                     _DMXStepConst:	
  4290  00E2                     	ds	1
  4291  00E3                     _DMXPeriodDimming:	
  4292  00E3                     	ds	1
  4293  00E4                     _DMXPeriodConst:	
  4294  00E4                     	ds	1
  4295  00E5                     _RxState:	
  4296  00E5                     	ds	1
  4297  00E6                     _RxDataPtr:	
  4298  00E6                     	ds	1
  4299  00E7                     _RxData:	
  4300  00E7                     	ds	4
  4301                           
  4302                           	psect	dataBANK1
  4303  00EB                     __pdataBANK1:	
  4304  00EB                     _DMX_sumRepeat:	
  4305  00EB                     	ds	4
  4306  00EF                     _DMXPeriod:	
  4307  00EF                     	ds	1
  4308                           
  4309                           	psect	bssBANK2
  4310  0120                     __pbssBANK2:	
  4311  0120                     _RX_RDM_Data:	
  4312  0120                     	ds	24
  4313  0138                     _DMX_SpaceBright:	
  4314  0138                     	ds	12
  4315  0144                     _CurrentPWM:	
  4316  0144                     	ds	8
  4317  014C                     _TX_RDM_Data:	
  4318  014C                     	ds	24
  4319                           
  4320                           	psect	dataBANK2
  4321  0164                     __pdataBANK2:	
  4322  0164                     _DMX_Repeat:	
  4323  0164                     	ds	8
  4324  016C                     _DMX_repeatcoeff:	
  4325  016C                     	ds	4
  4326                           
  4327                           	psect	bssBANK3
  4328  01A0                     __pbssBANK3:	
  4329  01A0                     _PWMLDCONptr:	
  4330  01A0                     	ds	8
  4331  01A8                     _PWMDCptr:	
  4332  01A8                     	ds	8
  4333  01B0                     _PWMDCHptr:	
  4334  01B0                     	ds	8
  4335  01B8                     _PWMDCLptr:	
  4336  01B8                     	ds	8
  4337  01C0                     _preRxData:	
  4338  01C0                     	ds	4
  4339  01C4                     _DISCOVERY_RDM_Data:	
  4340  01C4                     	ds	24
  4341                           
  4342                           	psect	dataBANK3
  4343  01DC                     __pdataBANK3:	
  4344  01DC                     _DMX_repeat_hereditary:	
  4345  01DC                     	ds	12
  4346                           
  4347                           	psect	clrtext
  4348  0740                     clear_ram0:	
  4349                           ;	Called with FSR0 containing the base address, and
  4350                           ;	btemp/btemp+1 has the size to clear
  4351                           
  4352  0740  0064               	clrwdt	;clear the watchdog before getting into this loop
  4353  0741                     clrloop0:	
  4354  0741  3001               	movlw	1
  4355  0742  0180               	clrf	0	;clear RAM location pointed to by FSR
  4356  0743  3101               	addfsr 0,1
  4357  0744  02FE               	subwf	126,f
  4358  0745  3000               	movlw	0
  4359  0746  3BFF               	subwfb	127,f
  4360  0747  087F               	movf	127,w
  4361  0748  047E               	iorwf	126,w
  4362  0749  1903               	btfsc	3,2
  4363  074A  3400               	retlw	0	;all done for this memory range, return
  4364  074B  2F41               	goto	clrloop0	;have we reached the end yet?
  4365                           
  4366                           	psect	cstackBANK3
  4367  01E8                     __pcstackBANK3:	
  4368  01E8                     ??_DMX_loop:	
  4369                           
  4370                           ; 1 bytes @ 0x0
  4371  01E8                     	ds	8
  4372                           
  4373                           	psect	cstackCOMMON
  4374  0070                     __pcstackCOMMON:	
  4375  0070                     ?_DMX_init:	
  4376  0070                     ?_DMX_loop:	
  4377                           ; 1 bytes @ 0x0
  4378                           
  4379  0070                     ??_ADC_interrupt:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382  0070                     ??_DMX_interrput:	
  4383                           ; 1 bytes @ 0x0
  4384                           
  4385  0070                     ??_timer1_interrupt:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  0070                     ??_RDM_tx_interrupt:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391  0070                     ?_RDM_discovery_CC:	
  4392                           ; 1 bytes @ 0x0
  4393                           
  4394  0070                     ?_RDM_GET_CC:	
  4395                           ; 1 bytes @ 0x0
  4396                           
  4397  0070                     ?_RDM_SET_CC:	
  4398                           ; 1 bytes @ 0x0
  4399                           
  4400  0070                     ?_RDM_TXSTART:	
  4401                           ; 1 bytes @ 0x0
  4402                           
  4403  0070                     ?_TX_RDM_Response_Set:	
  4404                           ; 1 bytes @ 0x0
  4405                           
  4406  0070                     ?_main:	
  4407                           ; 1 bytes @ 0x0
  4408                           
  4409  0070                     ?_isr:	
  4410                           ; 1 bytes @ 0x0
  4411                           
  4412  0070                     ?_RDM_tx_TimerBreak:	
  4413                           ; 1 bytes @ 0x0
  4414                           
  4415  0070                     ?_timer1_init:	
  4416                           ; 1 bytes @ 0x0
  4417                           
  4418  0070                     ?_ADC_init:	
  4419                           ; 2 bytes @ 0x0
  4420                           
  4421  0070                     ?_RDM_init:	
  4422                           ; 2 bytes @ 0x0
  4423                           
  4424  0070                     ?_ADC_loop:	
  4425                           ; 2 bytes @ 0x0
  4426                           
  4427  0070                     ?_timer1_switch:	
  4428                           ; 2 bytes @ 0x0
  4429                           
  4430  0070                     ?_RDM_rx_loop:	
  4431                           ; 2 bytes @ 0x0
  4432                           
  4433  0070                     ?_ADC_interrupt:	
  4434                           ; 2 bytes @ 0x0
  4435                           
  4436  0070                     ?_DMX_interrput:	
  4437                           ; 2 bytes @ 0x0
  4438                           
  4439  0070                     ?_timer1_interrupt:	
  4440                           ; 2 bytes @ 0x0
  4441                           
  4442  0070                     ?_RDM_tx_interrupt:	
  4443                           ; 2 bytes @ 0x0
  4444                           
  4445                           
  4446                           ; 2 bytes @ 0x0
  4447  0070                     	ds	2
  4448  0072                     DMX_interrput@RxDat:	
  4449                           
  4450                           ; 1 bytes @ 0x2
  4451  0072                     	ds	2
  4452  0074                     ??_timer1_init:	
  4453  0074                     ??_ADC_init:	
  4454                           ; 1 bytes @ 0x4
  4455                           
  4456  0074                     ??_ADC_loop:	
  4457                           ; 1 bytes @ 0x4
  4458                           
  4459  0074                     ??_timer1_switch:	
  4460                           ; 1 bytes @ 0x4
  4461                           
  4462  0074                     ??_RDM_get_checkSum:	
  4463                           ; 1 bytes @ 0x4
  4464                           
  4465  0074                     ??_RDM_TXSTART:	
  4466                           ; 1 bytes @ 0x4
  4467                           
  4468  0074                     ??_TX_RDM_Response_Set:	
  4469                           ; 1 bytes @ 0x4
  4470                           
  4471  0074                     ??_isr:	
  4472                           ; 1 bytes @ 0x4
  4473                           
  4474  0074                     ??_RDM_tx_TimerBreak:	
  4475                           ; 1 bytes @ 0x4
  4476                           
  4477  0074                     ?___bmul:	
  4478                           ; 1 bytes @ 0x4
  4479                           
  4480  0074                     ??___awtoft:	
  4481                           ; 1 bytes @ 0x4
  4482                           
  4483  0074                     ??___lbtoft:	
  4484                           ; 1 bytes @ 0x4
  4485                           
  4486  0074                     ??___lwtoft:	
  4487                           ; 1 bytes @ 0x4
  4488                           
  4489  0074                     ?_PFM_Read:	
  4490                           ; 1 bytes @ 0x4
  4491                           
  4492  0074                     timer1_switch@RxDat2:	
  4493                           ; 2 bytes @ 0x4
  4494                           
  4495  0074                     ___bmul@multiplicand:	
  4496                           ; 1 bytes @ 0x4
  4497                           
  4498  0074                     ___awtoft@sign:	
  4499                           ; 1 bytes @ 0x4
  4500                           
  4501  0074                     ___lbtoft@c:	
  4502                           ; 1 bytes @ 0x4
  4503                           
  4504  0074                     PFM_Read@AddrPFM:	
  4505                           ; 1 bytes @ 0x4
  4506                           
  4507                           
  4508                           ; 2 bytes @ 0x4
  4509  0074                     	ds	1
  4510  0075                     ??___bmul:	
  4511  0075                     ??___ftge:	
  4512                           ; 1 bytes @ 0x5
  4513                           
  4514  0075                     ??___ftsub:	
  4515                           ; 1 bytes @ 0x5
  4516                           
  4517                           
  4518                           ; 1 bytes @ 0x5
  4519  0075                     	ds	1
  4520  0076                     ??_PFM_Read:	
  4521  0076                     ??_PFM_Write:	
  4522                           ; 1 bytes @ 0x6
  4523                           
  4524  0076                     ??_RDM_SET_CC:	
  4525                           ; 1 bytes @ 0x6
  4526                           
  4527  0076                     ??_main:	
  4528                           ; 1 bytes @ 0x6
  4529                           
  4530                           
  4531                           	psect	cstackBANK0
  4532  0020                     __pcstackBANK0:	
  4533                           ; 1 bytes @ 0x6
  4534                           
  4535  0020                     ??_DMX_init:	
  4536  0020                     ?_PFM_Write:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0020                     ?_RDM_get_checkSum:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0020                     ?___ftpack:	
  4543                           ; 2 bytes @ 0x0
  4544                           
  4545  0020                     ___bmul@product:	
  4546                           ; 3 bytes @ 0x0
  4547                           
  4548  0020                     PFM_Write@AddrPFM:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0020                     ___ftpack@arg:	
  4552                           ; 2 bytes @ 0x0
  4553                           
  4554  0020                     RDM_get_checkSum@Data:	
  4555                           ; 3 bytes @ 0x0
  4556                           
  4557                           
  4558                           ; 24 bytes @ 0x0
  4559  0020                     	ds	1
  4560  0021                     ___bmul@multiplier:	
  4561                           
  4562                           ; 1 bytes @ 0x1
  4563  0021                     	ds	1
  4564  0022                     ??_RDM_init:	
  4565  0022                     PFM_Write@Data:	
  4566                           ; 1 bytes @ 0x2
  4567                           
  4568                           
  4569                           ; 2 bytes @ 0x2
  4570  0022                     	ds	1
  4571  0023                     ___ftpack@exp:	
  4572                           
  4573                           ; 1 bytes @ 0x3
  4574  0023                     	ds	1
  4575  0024                     ___ftpack@sign:	
  4576                           
  4577                           ; 1 bytes @ 0x4
  4578  0024                     	ds	1
  4579  0025                     ??___ftpack:	
  4580                           
  4581                           ; 1 bytes @ 0x5
  4582  0025                     	ds	3
  4583  0028                     ?___awtoft:	
  4584  0028                     ?___lbtoft:	
  4585                           ; 3 bytes @ 0x8
  4586                           
  4587  0028                     ?___lwtoft:	
  4588                           ; 3 bytes @ 0x8
  4589                           
  4590  0028                     ___awtoft@c:	
  4591                           ; 3 bytes @ 0x8
  4592                           
  4593  0028                     ___lwtoft@c:	
  4594                           ; 2 bytes @ 0x8
  4595                           
  4596                           
  4597                           ; 2 bytes @ 0x8
  4598  0028                     	ds	4
  4599  002C                     ?___ftge:	
  4600  002C                     ?___ftmul:	
  4601                           ; 1 bit 
  4602                           
  4603  002C                     ___ftge@ff1:	
  4604                           ; 3 bytes @ 0xC
  4605                           
  4606  002C                     ___ftmul@f1:	
  4607                           ; 3 bytes @ 0xC
  4608                           
  4609                           
  4610                           ; 3 bytes @ 0xC
  4611  002C                     	ds	3
  4612  002F                     ___ftge@ff2:	
  4613  002F                     ___ftmul@f2:	
  4614                           ; 3 bytes @ 0xF
  4615                           
  4616                           
  4617                           ; 3 bytes @ 0xF
  4618  002F                     	ds	3
  4619  0032                     ??___ftmul:	
  4620                           
  4621                           ; 1 bytes @ 0x12
  4622  0032                     	ds	3
  4623  0035                     ___ftmul@exp:	
  4624                           
  4625                           ; 1 bytes @ 0x15
  4626  0035                     	ds	1
  4627  0036                     ___ftmul@f3_as_product:	
  4628                           
  4629                           ; 3 bytes @ 0x16
  4630  0036                     	ds	2
  4631  0038                     RDM_get_checkSum@len:	
  4632                           
  4633                           ; 1 bytes @ 0x18
  4634  0038                     	ds	1
  4635  0039                     ??_RDM_discovery_CC:	
  4636  0039                     ??_RDM_GET_CC:	
  4637                           ; 1 bytes @ 0x19
  4638                           
  4639  0039                     ___ftmul@cntr:	
  4640                           ; 1 bytes @ 0x19
  4641                           
  4642                           
  4643                           ; 1 bytes @ 0x19
  4644  0039                     	ds	1
  4645  003A                     ___ftmul@sign:	
  4646                           
  4647                           ; 1 bytes @ 0x1A
  4648  003A                     	ds	1
  4649  003B                     ?___ftdiv:	
  4650  003B                     ___ftdiv@f2:	
  4651                           ; 3 bytes @ 0x1B
  4652                           
  4653                           
  4654                           ; 3 bytes @ 0x1B
  4655  003B                     	ds	2
  4656  003D                     ??_RDM_rx_loop:	
  4657                           
  4658                           ; 1 bytes @ 0x1D
  4659  003D                     	ds	1
  4660  003E                     ___ftdiv@f1:	
  4661                           
  4662                           ; 3 bytes @ 0x1E
  4663  003E                     	ds	3
  4664  0041                     ??___ftdiv:	
  4665                           
  4666                           ; 1 bytes @ 0x21
  4667  0041                     	ds	3
  4668  0044                     ___ftdiv@cntr:	
  4669                           
  4670                           ; 1 bytes @ 0x24
  4671  0044                     	ds	1
  4672  0045                     ___ftdiv@f3:	
  4673                           
  4674                           ; 3 bytes @ 0x25
  4675  0045                     	ds	3
  4676  0048                     ___ftdiv@exp:	
  4677                           
  4678                           ; 1 bytes @ 0x28
  4679  0048                     	ds	1
  4680  0049                     ___ftdiv@sign:	
  4681                           
  4682                           ; 1 bytes @ 0x29
  4683  0049                     	ds	1
  4684  004A                     ?___ftadd:	
  4685  004A                     ___ftadd@f1:	
  4686                           ; 3 bytes @ 0x2A
  4687                           
  4688                           
  4689                           ; 3 bytes @ 0x2A
  4690  004A                     	ds	3
  4691  004D                     ___ftadd@f2:	
  4692                           
  4693                           ; 3 bytes @ 0x2D
  4694  004D                     	ds	3
  4695  0050                     ??___ftadd:	
  4696                           
  4697                           ; 1 bytes @ 0x30
  4698  0050                     	ds	3
  4699  0053                     ___ftadd@sign:	
  4700                           
  4701                           ; 1 bytes @ 0x33
  4702  0053                     	ds	1
  4703  0054                     ___ftadd@exp2:	
  4704                           
  4705                           ; 1 bytes @ 0x34
  4706  0054                     	ds	1
  4707  0055                     ___ftadd@exp1:	
  4708                           
  4709                           ; 1 bytes @ 0x35
  4710  0055                     	ds	1
  4711  0056                     ?___ftsub:	
  4712  0056                     ___ftsub@f2:	
  4713                           ; 3 bytes @ 0x36
  4714                           
  4715                           
  4716                           ; 3 bytes @ 0x36
  4717  0056                     	ds	3
  4718  0059                     ___ftsub@f1:	
  4719                           
  4720                           ; 3 bytes @ 0x39
  4721  0059                     	ds	3
  4722  005C                     ?___fttol:	
  4723  005C                     ___fttol@f1:	
  4724                           ; 4 bytes @ 0x3C
  4725                           
  4726                           
  4727                           ; 3 bytes @ 0x3C
  4728  005C                     	ds	4
  4729  0060                     ??___fttol:	
  4730                           
  4731                           ; 1 bytes @ 0x40
  4732  0060                     	ds	3
  4733  0063                     ___fttol@sign1:	
  4734                           
  4735                           ; 1 bytes @ 0x43
  4736  0063                     	ds	1
  4737  0064                     ___fttol@lval:	
  4738                           
  4739                           ; 4 bytes @ 0x44
  4740  0064                     	ds	4
  4741  0068                     ___fttol@exp1:	
  4742                           
  4743                           ; 1 bytes @ 0x48
  4744  0068                     	ds	1
  4745  0069                     _DMX_loop$1453:	
  4746                           
  4747                           ; 3 bytes @ 0x49
  4748  0069                     	ds	3
  4749                           
  4750                           	psect	text15
  4751  094F                     __ptext15:	
  4752 ;; *************** function _DMX_loop *****************
  4753 ;; Defined at:
  4754 ;;		line 68 in file "DMX.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 1C/1
  4765 ;;		On exit  : 1E/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       3       0       0       8       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:       11 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    5
  4775 ;; This function calls:
  4776 ;;		___awtoft
  4777 ;;		___ftadd
  4778 ;;		___ftdiv
  4779 ;;		___ftge
  4780 ;;		___ftmul
  4781 ;;		___ftsub
  4782 ;;		___fttol
  4783 ;;		___lbtoft
  4784 ;;		___lwtoft
  4785 ;; This function is called by:
  4786 ;;		_main
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _DMX_loop
  4792  094F                     _DMX_loop:	
  4793                           
  4794                           ;DMX.c: 69: Addr = 0;
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _DMX_loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4798  094F  0020               	movlb	0	; select bank0
  4799  0950  01EC               	clrf	_Addr
  4800                           
  4801                           ;DMX.c: 71: if (DMX_Flags.RxNew == 1) {
  4802  0951  1C76               	btfss	_DMX_Flags,0	;volatile
  4803  0952  2AF9               	goto	l375
  4804                           
  4805                           ;DMX.c: 72: DMX_Flags.RxNew = 0;
  4806  0953  1076               	bcf	_DMX_Flags,0	;volatile
  4807                           
  4808                           ;DMX.c: 74: DMXPeriodDimming=0;
  4809  0954  0021               	movlb	1	; select bank1
  4810  0955  01E3               	clrf	_DMXPeriodDimming^(0+128)	;volatile
  4811                           
  4812                           ;DMX.c: 75: DMXStepConst=3;
  4813  0956  3003               	movlw	3
  4814  0957  00E2               	movwf	_DMXStepConst^(0+128)
  4815  0958                     l4701:	
  4816                           ;DMX.c: 76: while (Addr < 4) {
  4817                           
  4818  0958  3004               	movlw	4
  4819  0959  0020               	movlb	0	; select bank0
  4820  095A  026C               	subwf	_Addr,w
  4821  095B  1803               	btfsc	3,0
  4822  095C  2AF9               	goto	l375
  4823                           
  4824                           ;DMX.c: 77: rxdata=RxData[Addr];
  4825  095D  086C               	movf	_Addr,w
  4826  095E  3EE7               	addlw	(low (_RxData| 0))& (0+255)
  4827  095F  0086               	movwf	6
  4828  0960  0187               	clrf	7
  4829  0961  0801               	movf	1,w
  4830  0962  0021               	movlb	1	; select bank1
  4831  0963  00E1               	movwf	_rxdata^(0+128)
  4832                           
  4833                           ;DMX.c: 79: if (DMX_TargetBright[Addr] < rxdata) {
  4834  0964  0020               	movlb	0	; select bank0
  4835  0965  274A  3189         	fcall	PL30	;call to abstracted procedure
  4836  0967  0086               	movwf	6
  4837  0968  27D2  3189         	fcall	PL96	;call to abstracted procedure
  4838  096A  0021               	movlb	1	; select bank1
  4839  096B  0861               	movf	_rxdata^(0+128),w
  4840  096C  240C  3189         	fcall	___lbtoft
  4841  096E  0828               	movf	?___lbtoft,w
  4842  096F  00AF               	movwf	___ftge@ff2
  4843  0970  0829               	movf	?___lbtoft+1,w
  4844  0971  00B0               	movwf	___ftge@ff2+1
  4845  0972  082A               	movf	?___lbtoft+2,w
  4846  0973  00B1               	movwf	___ftge@ff2+2
  4847  0974  241C  3189         	fcall	___ftge
  4848  0976  1803               	btfsc	3,0
  4849  0977  29DD               	goto	l4647
  4850                           
  4851                           ;DMX.c: 80: DMX_difference=rxdata-DMX_TargetBright[Addr];
  4852  0978  086C               	movf	_Addr,w
  4853  0979  271F  3189         	fcall	PL20	;call to abstracted procedure
  4854  097B  272C  3189         	fcall	PL24	;call to abstracted procedure
  4855  097D  0021               	movlb	1	; select bank1
  4856  097E  0861               	movf	_rxdata^(0+128),w
  4857  097F  240C  3189         	fcall	___lbtoft
  4858  0981  0828               	movf	?___lbtoft,w
  4859  0982  00D9               	movwf	___ftsub@f1
  4860  0983  0829               	movf	?___lbtoft+1,w
  4861  0984  00DA               	movwf	___ftsub@f1+1
  4862  0985  082A               	movf	?___lbtoft+2,w
  4863  0986  00DB               	movwf	___ftsub@f1+2
  4864  0987  2448  3189         	fcall	___ftsub
  4865                           
  4866                           ;DMX.c: 81: if(DMX_difference<0.05){
  4867  0989  26BA  3189         	fcall	PL6	;call to abstracted procedure
  4868  098B  241C  3189         	fcall	___ftge
  4869                           
  4870                           ;DMX.c: 82: DMXSign[Addr].SIGN = 0b00;
  4871  098D  086C               	movf	_Addr,w
  4872  098E  1803               	btfsc	3,0
  4873  098F  2999               	goto	L3
  4874                           
  4875                           ;DMX.c: 83: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  4876  0990  2784  3189         	fcall	PL56	;call to abstracted procedure
  4877  0992  240C  3189         	fcall	___lbtoft
  4878  0994  086C               	movf	_Addr,w
  4879  0995  076C               	addwf	_Addr,w
  4880  0996  2687  3189         	fcall	PL2	;call to abstracted procedure
  4881                           
  4882                           ;DMX.c: 84: }else{
  4883  0998  2A5A               	goto	l4667
  4884  0999                     L3:	
  4885                           ;DMX.c: 85: DMXSign[Addr].SIGN = 0b01;
  4886                           
  4887  0999  27EC  3189         	fcall	PL106	;call to abstracted procedure
  4888  099B  3801               	iorlw	1
  4889                           
  4890                           ;DMX.c: 86: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  4891                           
  4892                           ;DMX.c: 87: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]+(DMX_difference*DMX_repeatcoef
      +                          f[Addr]/DMX_sumRepeat[Addr]);
  4893  099C  269D  3189         	fcall	PL4	;call to abstracted procedure
  4894  099E  076C               	addwf	_Addr,w
  4895  099F  076C               	addwf	_Addr,w
  4896  09A0  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  4897  09A1  0086               	movwf	6
  4898  09A2  278C  3189         	fcall	PL58	;call to abstracted procedure
  4899  09A4  086C               	movf	_Addr,w
  4900  09A5  3EEB               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  4901  09A6  0086               	movwf	6
  4902  09A7  0801               	movf	1,w
  4903  09A8  240C  3189         	fcall	___lbtoft
  4904  09AA  26DD  3189         	fcall	PL10	;call to abstracted procedure
  4905  09AC  240C  3189         	fcall	___lbtoft
  4906  09AE  27D9  3189         	fcall	PL98	;call to abstracted procedure
  4907  09B0  256D  3189         	fcall	___ftmul
  4908  09B2  27C4  3189         	fcall	PL90	;call to abstracted procedure
  4909  09B4  2463  3189         	fcall	___ftdiv
  4910  09B6  277D  3189         	fcall	PL52	;call to abstracted procedure
  4911  09B8  24BF  3189         	fcall	___ftadd
  4912  09BA  086C               	movf	_Addr,w
  4913  09BB  271F  3189         	fcall	PL20	;call to abstracted procedure
  4914  09BD  084A               	movf	?___ftadd,w
  4915  09BE  3FC0               	movwi [0]fsr1
  4916  09BF  084B               	movf	?___ftadd+1,w
  4917  09C0  3FC1               	movwi [1]fsr1
  4918  09C1  084C               	movf	?___ftadd+2,w
  4919                           
  4920                           ;DMX.c: 88: DMX_SpaceBright[Addr]=(DMX_TargetBright[Addr]-DMX_CurrentBright[Addr])/(DMXP
      +                          eriod>>2);
  4921  09C2  275C  3189         	fcall	PL38	;call to abstracted procedure
  4922  09C4  2607  3189         	fcall	___awtoft
  4923  09C6  276F  3189         	fcall	PL46	;call to abstracted procedure
  4924  09C8  26D7  3189         	fcall	PL8	;call to abstracted procedure
  4925  09CA  0187               	clrf	7
  4926  09CB  272C  3189         	fcall	PL24	;call to abstracted procedure
  4927  09CD  274A  3189         	fcall	PL30	;call to abstracted procedure
  4928  09CF  0086               	movwf	6
  4929  09D0  2725  3189         	fcall	PL22	;call to abstracted procedure
  4930  09D2  2448  3189         	fcall	___ftsub
  4931  09D4  27A9  3189         	fcall	PL68	;call to abstracted procedure
  4932  09D6  2463  3189         	fcall	___ftdiv
  4933  09D8  2742  3189         	fcall	PL28	;call to abstracted procedure
  4934  09DA  27CB  3189         	fcall	PL92	;call to abstracted procedure
  4935  09DC  2A5A               	goto	l4667
  4936  09DD                     l4647:	
  4937  09DD  0021               	movlb	1	; select bank1
  4938  09DE  0861               	movf	_rxdata^(0+128),w
  4939  09DF  240C  3189         	fcall	___lbtoft
  4940  09E1  0828               	movf	?___lbtoft,w
  4941  09E2  00AC               	movwf	___ftge@ff1
  4942  09E3  0829               	movf	?___lbtoft+1,w
  4943  09E4  00AD               	movwf	___ftge@ff1+1
  4944  09E5  082A               	movf	?___lbtoft+2,w
  4945  09E6  00AE               	movwf	___ftge@ff1+2
  4946  09E7  086C               	movf	_Addr,w
  4947  09E8  271F  3189         	fcall	PL20	;call to abstracted procedure
  4948  09EA  2776  3189         	fcall	PL50	;call to abstracted procedure
  4949  09EC  241C  3189         	fcall	___ftge
  4950  09EE  1803               	btfsc	3,0
  4951  09EF  2A4D               	goto	l4663
  4952                           
  4953                           ;DMX.c: 91: DMX_difference=DMX_TargetBright[Addr]-rxdata;
  4954  09F0  0021               	movlb	1	; select bank1
  4955  09F1  0861               	movf	_rxdata^(0+128),w
  4956  09F2  240C  3189         	fcall	___lbtoft
  4957  09F4  27B0  3189         	fcall	PL76	;call to abstracted procedure
  4958  09F6  274A  3189         	fcall	PL30	;call to abstracted procedure
  4959  09F8  2716  3189         	fcall	PL18	;call to abstracted procedure
  4960  09FA  2448  3189         	fcall	___ftsub
  4961                           
  4962                           ;DMX.c: 92: if(DMX_difference<0.05){
  4963  09FC  26BA  3189         	fcall	PL6	;call to abstracted procedure
  4964  09FE  241C  3189         	fcall	___ftge
  4965                           
  4966                           ;DMX.c: 93: DMXSign[Addr].SIGN = 0b00;
  4967  0A00  086C               	movf	_Addr,w
  4968  0A01  1803               	btfsc	3,0
  4969  0A02  2A0C               	goto	L4
  4970                           
  4971                           ;DMX.c: 94: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  4972  0A03  2784  3189         	fcall	PL56	;call to abstracted procedure
  4973  0A05  240C  3189         	fcall	___lbtoft
  4974  0A07  086C               	movf	_Addr,w
  4975  0A08  076C               	addwf	_Addr,w
  4976  0A09  2687  3189         	fcall	PL2	;call to abstracted procedure
  4977                           
  4978                           ;DMX.c: 95: }
  4979  0A0B  2A5A               	goto	l4667
  4980  0A0C                     L4:	
  4981                           ;DMX.c: 96: else{
  4982                           ;DMX.c: 97: DMXSign[Addr].SIGN = 0b10;
  4983                           
  4984  0A0C  27EC  3189         	fcall	PL106	;call to abstracted procedure
  4985  0A0E  3802               	iorlw	2
  4986                           
  4987                           ;DMX.c: 98: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr];
  4988                           
  4989                           ;DMX.c: 99: DMX_TargetBright[Addr]=DMX_TargetBright[Addr]-(DMX_difference*DMX_repeatcoef
      +                          f[Addr]/DMX_sumRepeat[Addr]);
  4990  0A0F  269D  3189         	fcall	PL4	;call to abstracted procedure
  4991  0A11  3EEB               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  4992  0A12  0086               	movwf	6
  4993  0A13  0801               	movf	1,w
  4994  0A14  240C  3189         	fcall	___lbtoft
  4995  0A16  26DD  3189         	fcall	PL10	;call to abstracted procedure
  4996  0A18  240C  3189         	fcall	___lbtoft
  4997  0A1A  27D9  3189         	fcall	PL98	;call to abstracted procedure
  4998  0A1C  256D  3189         	fcall	___ftmul
  4999  0A1E  27C4  3189         	fcall	PL90	;call to abstracted procedure
  5000  0A20  2463  3189         	fcall	___ftdiv
  5001  0A22  083B               	movf	?___ftdiv,w
  5002  0A23  00D6               	movwf	___ftsub@f2
  5003  0A24  083C               	movf	?___ftdiv+1,w
  5004  0A25  00D7               	movwf	___ftsub@f2+1
  5005  0A26  083D               	movf	?___ftdiv+2,w
  5006  0A27  00D8               	movwf	___ftsub@f2+2
  5007  0A28  274A  3189         	fcall	PL30	;call to abstracted procedure
  5008  0A2A  2716  3189         	fcall	PL18	;call to abstracted procedure
  5009  0A2C  2448  3189         	fcall	___ftsub
  5010  0A2E  086C               	movf	_Addr,w
  5011  0A2F  271F  3189         	fcall	PL20	;call to abstracted procedure
  5012  0A31  27BE  3189         	fcall	PL86	;call to abstracted procedure
  5013                           
  5014                           ;DMX.c: 100: DMX_SpaceBright[Addr]=(DMX_CurrentBright[Addr]-DMX_TargetBright[Addr])/(DMX
      +                          Period>>2);
  5015  0A33  275C  3189         	fcall	PL38	;call to abstracted procedure
  5016  0A35  2607  3189         	fcall	___awtoft
  5017  0A37  276F  3189         	fcall	PL46	;call to abstracted procedure
  5018  0A39  086C               	movf	_Addr,w
  5019  0A3A  271F  3189         	fcall	PL20	;call to abstracted procedure
  5020  0A3C  272C  3189         	fcall	PL24	;call to abstracted procedure
  5021  0A3E  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5022  0A40  2725  3189         	fcall	PL22	;call to abstracted procedure
  5023  0A42  2448  3189         	fcall	___ftsub
  5024  0A44  27A9  3189         	fcall	PL68	;call to abstracted procedure
  5025  0A46  2463  3189         	fcall	___ftdiv
  5026  0A48  2742  3189         	fcall	PL28	;call to abstracted procedure
  5027  0A4A  27CB  3189         	fcall	PL92	;call to abstracted procedure
  5028  0A4C  2A5A               	goto	l4667
  5029  0A4D                     l4663:	
  5030                           
  5031                           ;DMX.c: 103: DMX_CurrentBright[Addr]=DMX_TargetBright[Addr]=rxdata;
  5032  0A4D  0021               	movlb	1	; select bank1
  5033  0A4E  0861               	movf	_rxdata^(0+128),w
  5034  0A4F  240C  3189         	fcall	___lbtoft
  5035  0A51  086C               	movf	_Addr,w
  5036  0A52  076C               	addwf	_Addr,w
  5037  0A53  2687  3189         	fcall	PL2	;call to abstracted procedure
  5038                           
  5039                           ;DMX.c: 104: DMXSign[Addr].SIGN = 0b00;
  5040  0A55  086C               	movf	_Addr,w
  5041  0A56  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5042  0A57  0086               	movwf	6
  5043  0A58  30FC               	movlw	-4
  5044  0A59  0581               	andwf	1,f
  5045  0A5A                     l4667:	
  5046                           
  5047                           ;DMX.c: 105: }
  5048                           ;DMX.c: 107: if(preRxData[Addr]==RxData[Addr] && !DMXSign[Addr].InfiniteLoop){
  5049  0A5A  086C               	movf	_Addr,w
  5050  0A5B  3EE7               	addlw	(low (_RxData| 0))& (0+255)
  5051  0A5C  0086               	movwf	6
  5052  0A5D  0187               	clrf	7
  5053  0A5E  086C               	movf	_Addr,w
  5054  0A5F  3EC0               	addlw	(low (_preRxData| (0+256)))& (0+255)
  5055  0A60  0084               	movwf	4
  5056  0A61  3001               	movlw	1	; select bank3/4
  5057  0A62  0085               	movwf	5
  5058  0A63  0800               	movf	0,w
  5059  0A64  0601               	xorwf	1,w
  5060  0A65  1D03               	skipz
  5061  0A66  2A9B               	goto	l4683
  5062  0A67  086C               	movf	_Addr,w
  5063  0A68  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5064  0A69  0086               	movwf	6
  5065  0A6A  1901               	btfsc	1,2
  5066  0A6B  2A9B               	goto	l4683
  5067                           
  5068                           ;DMX.c: 108: DMX_Repeat[Addr][0]++;
  5069  0A6C  27F2  3189         	fcall	PL110	;call to abstracted procedure
  5070  0A6E  0A81               	incf	1,f
  5071                           
  5072                           ;DMX.c: 109: if(DMX_Repeat[Addr][0]==0x10){
  5073  0A6F  356C               	lslf	_Addr,w
  5074  0A70  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5075  0A71  0086               	movwf	6
  5076  0A72  3010               	movlw	16
  5077  0A73  0601               	xorwf	1,w
  5078  0A74  1D03               	btfss	3,2
  5079  0A75  2A89               	goto	l4681
  5080                           
  5081                           ;DMX.c: 110: DMX_Repeat[Addr][0]=DMX_Repeat[Addr][1]=1;
  5082  0A76  356C               	lslf	_Addr,w
  5083  0A77  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5084  0A78  0086               	movwf	6
  5085  0A79  356C               	lslf	_Addr,w
  5086  0A7A  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5087  0A7B  0084               	movwf	4
  5088  0A7C  3001               	movlw	1	; select bank2/3
  5089  0A7D  3F80               	movwi [0]fsr0
  5090  0A7E  0081               	movwf	1
  5091                           
  5092                           ;DMX.c: 111: DMX_sumRepeat[Addr]=2;
  5093  0A7F  3183  23B3  3189   	fcall	PL82	;call to abstracted procedure
  5094                           
  5095                           ;DMX.c: 112: DMXSign[Addr].InfiniteLoop=1;
  5096  0A82  086C               	movf	_Addr,w
  5097  0A83  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5098  0A84  0086               	movwf	6
  5099  0A85  1501               	bsf	1,2
  5100                           
  5101                           ;DMX.c: 113: DMX_repeatcoeff[Addr]=2;
  5102  0A86  086C               	movf	_Addr,w
  5103  0A87  27A2  3189         	fcall	PL66	;call to abstracted procedure
  5104  0A89                     l4681:	
  5105                           
  5106                           ;DMX.c: 114: }
  5107                           ;DMX.c: 115: DMX_repeat_hereditary[Addr]=DMX_repeat_hereditary[Addr]/2+DMX_Repeat[Addr][
      +                          0];
  5108  0A89  27F2  3189         	fcall	PL110	;call to abstracted procedure
  5109  0A8B  0801               	movf	1,w
  5110  0A8C  240C  3189         	fcall	___lbtoft
  5111  0A8E  26F6  3189         	fcall	PL12	;call to abstracted procedure
  5112  0A90  2463  3189         	fcall	___ftdiv
  5113  0A92  277D  3189         	fcall	PL52	;call to abstracted procedure
  5114  0A94  24BF  3189         	fcall	___ftadd
  5115  0A96  270E  3189         	fcall	PL16	;call to abstracted procedure
  5116  0A98  2768  3189         	fcall	PL42	;call to abstracted procedure
  5117                           
  5118                           ;DMX.c: 116: }else{
  5119  0A9A  2AEC               	goto	l4697
  5120  0A9B                     l4683:	
  5121                           
  5122                           ;DMX.c: 117: DMX_sumRepeat[Addr]=DMX_Repeat[Addr][0]+DMX_Repeat[Addr][1];
  5123  0A9B  086C               	movf	_Addr,w
  5124  0A9C  3EEB               	addlw	(low (_DMX_sumRepeat| 0))& (0+255)
  5125  0A9D  0086               	movwf	6
  5126  0A9E  0187               	clrf	7
  5127  0A9F  3183  23CC  3189   	fcall	PL118	;call to abstracted procedure
  5128  0AA2  0800               	movf	0,w
  5129  0AA3  0023               	movlb	3	; select bank3
  5130  0AA4  00E8               	movwf	??_DMX_loop^(0+384)
  5131  0AA5  0020               	movlb	0	; select bank0
  5132  0AA6  356C               	lslf	_Addr,w
  5133  0AA7  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5134  0AA8  0084               	movwf	4
  5135  0AA9  0800               	movf	0,w
  5136  0AAA  0023               	movlb	3	; select bank3
  5137  0AAB  0768               	addwf	??_DMX_loop^(0+384),w
  5138  0AAC  0081               	movwf	1
  5139                           
  5140                           ;DMX.c: 118: DMX_Repeat[Addr][1]=DMX_Repeat[Addr][0];
  5141  0AAD  0020               	movlb	0	; select bank0
  5142  0AAE  356C               	lslf	_Addr,w
  5143  0AAF  3E65               	addlw	(low ((_DMX_Repeat| (0+256)+1)))& (0+255)
  5144  0AB0  0086               	movwf	6
  5145  0AB1  3001               	movlw	1	; select bank2/3
  5146  0AB2  0087               	movwf	7
  5147  0AB3  356C               	lslf	_Addr,w
  5148  0AB4  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5149  0AB5  0084               	movwf	4
  5150  0AB6  0800               	movf	0,w
  5151  0AB7  0081               	movwf	1
  5152                           
  5153                           ;DMX.c: 119: DMX_repeat_hereditary[Addr]=DMX_repeat_hereditary[Addr]/2+DMX_Repeat[Addr][
      +                          0];
  5154  0AB8  356C               	lslf	_Addr,w
  5155  0AB9  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5156  0ABA  0086               	movwf	6
  5157  0ABB  0801               	movf	1,w
  5158  0ABC  240C  3189         	fcall	___lbtoft
  5159  0ABE  26F6  3189         	fcall	PL12	;call to abstracted procedure
  5160  0AC0  2463  3189         	fcall	___ftdiv
  5161  0AC2  277D  3189         	fcall	PL52	;call to abstracted procedure
  5162  0AC4  24BF  3189         	fcall	___ftadd
  5163  0AC6  270E  3189         	fcall	PL16	;call to abstracted procedure
  5164  0AC8  2768  3189         	fcall	PL42	;call to abstracted procedure
  5165                           
  5166                           ;DMX.c: 120: DMX_Repeat[Addr][0]=1;
  5167  0ACA  356C               	lslf	_Addr,w
  5168  0ACB  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  5169  0ACC  0086               	movwf	6
  5170  0ACD  0181               	clrf	1
  5171  0ACE  0A81               	incf	1,f
  5172                           
  5173                           ;DMX.c: 121: DMXSign[Addr].InfiniteLoop=0;
  5174  0ACF  086C               	movf	_Addr,w
  5175  0AD0  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5176  0AD1  0086               	movwf	6
  5177  0AD2  3066               	movlw	102
  5178  0AD3  0187               	clrf	7
  5179  0AD4  1101               	bcf	1,2
  5180                           
  5181                           ;DMX.c: 122: if(DMX_repeat_hereditary[Addr]>2.1){
  5182  0AD5  00AC               	movwf	___ftge@ff1
  5183  0AD6  3006               	movlw	6
  5184  0AD7  00AD               	movwf	___ftge@ff1+1
  5185  0AD8  3040               	movlw	64
  5186  0AD9  00AE               	movwf	___ftge@ff1+2
  5187  0ADA  270E  3189         	fcall	PL16	;call to abstracted procedure
  5188  0ADC  2776  3189         	fcall	PL50	;call to abstracted procedure
  5189  0ADE  241C  3189         	fcall	___ftge
  5190                           
  5191                           ;DMX.c: 123: DMX_repeatcoeff[Addr]=1;
  5192  0AE0  086C               	movf	_Addr,w
  5193  0AE1  1803               	btfsc	3,0
  5194  0AE2  2AEA               	goto	L5
  5195  0AE3  3E6C               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  5196  0AE4  0086               	movwf	6
  5197  0AE5  3001               	movlw	1	; select bank2/3
  5198  0AE6  0087               	movwf	7
  5199  0AE7  0181               	clrf	1
  5200  0AE8  0A81               	incf	1,f
  5201                           
  5202                           ;DMX.c: 124: }else{
  5203  0AE9  2AEC               	goto	l4697
  5204  0AEA                     L5:	
  5205                           ;DMX.c: 125: DMX_repeatcoeff[Addr]=2;
  5206                           
  5207  0AEA  27A2  3189         	fcall	PL66	;call to abstracted procedure
  5208  0AEC                     l4697:	
  5209                           
  5210                           ;DMX.c: 126: }
  5211                           ;DMX.c: 127: }
  5212                           ;DMX.c: 128: preRxData[Addr]=RxData[Addr];
  5213  0AEC  086C               	movf	_Addr,w
  5214  0AED  3EC0               	addlw	(low (_preRxData| (0+256)))& (0+255)
  5215  0AEE  0086               	movwf	6
  5216  0AEF  3001               	movlw	1	; select bank3/4
  5217  0AF0  0087               	movwf	7
  5218  0AF1  086C               	movf	_Addr,w
  5219  0AF2  3EE7               	addlw	(low (_RxData| 0))& (0+255)
  5220  0AF3  0084               	movwf	4
  5221  0AF4  0185               	clrf	5
  5222  0AF5  0800               	movf	0,w
  5223  0AF6  0081               	movwf	1
  5224                           
  5225                           ;DMX.c: 129: Addr++;
  5226  0AF7  0AEC               	incf	_Addr,f
  5227  0AF8  2958               	goto	l4701
  5228  0AF9                     l375:	
  5229                           
  5230                           ;DMX.c: 130: }
  5231                           ;DMX.c: 131: }
  5232                           ;DMX.c: 133: if (Timer.MS && !DMX_Flags.RDM_Identify_Device) {
  5233  0AF9  0021               	movlb	1	; select bank1
  5234  0AFA  1838               	btfsc	_Timer^(0+128),0	;volatile
  5235  0AFB  19F7               	btfsc	_DMX_Flags+1,3	;volatile
  5236  0AFC  0008               	return
  5237                           
  5238                           ;DMX.c: 134: DMXPeriodConst++;
  5239  0AFD  0AE4               	incf	_DMXPeriodConst^(0+128),f	;volatile
  5240                           
  5241                           ;DMX.c: 135: Timer.MS = 0;
  5242  0AFE  1038               	bcf	_Timer^(0+128),0	;volatile
  5243                           
  5244                           ;DMX.c: 136: Addr = 0;
  5245  0AFF  0020               	movlb	0	; select bank0
  5246  0B00  01EC               	clrf	_Addr
  5247                           
  5248                           ;DMX.c: 137: DMXPeriodDimming++;
  5249  0B01  0021               	movlb	1	; select bank1
  5250  0B02  0AE3               	incf	_DMXPeriodDimming^(0+128),f	;volatile
  5251                           
  5252                           ;DMX.c: 138: if(DMXStepConst==0 && DMXPeriodDimming<DMXPeriod){
  5253  0B03  0862               	movf	_DMXStepConst^(0+128),w
  5254  0B04  1D03               	btfss	3,2
  5255  0B05  2C0A               	goto	l4747
  5256  0B06  086F               	movf	_DMXPeriod^(0+128),w
  5257  0B07  0263               	subwf	_DMXPeriodDimming^(0+128),w	;volatile
  5258  0B08  1803               	skipnc
  5259  0B09  2C0A               	goto	l4747
  5260                           
  5261                           ;DMX.c: 139: DMXStepConst=3;
  5262  0B0A  3003               	movlw	3
  5263  0B0B  00E2               	movwf	_DMXStepConst^(0+128)
  5264                           
  5265                           ;DMX.c: 140: while (Addr < 4) {
  5266  0B0C  2BF5               	goto	l4745
  5267  0B0D                     l4719:	
  5268                           
  5269                           ;DMX.c: 143: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]+DMX_SpaceBright[Addr];
  5270  0B0D  2742  3189         	fcall	PL28	;call to abstracted procedure
  5271  0B0F  278C  3189         	fcall	PL58	;call to abstracted procedure
  5272  0B11  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5273  0B13  0187               	clrf	7
  5274  0B14  3F40               	moviw [0]fsr1
  5275  0B15  00CD               	movwf	___ftadd@f2
  5276  0B16  3F41               	moviw [1]fsr1
  5277  0B17  00CE               	movwf	___ftadd@f2+1
  5278  0B18  3F42               	moviw [2]fsr1
  5279  0B19  00CF               	movwf	___ftadd@f2+2
  5280  0B1A  24BF  3189         	fcall	___ftadd
  5281  0B1C  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5282  0B1E  0187               	clrf	7
  5283  0B1F  2768  3189         	fcall	PL42	;call to abstracted procedure
  5284                           
  5285                           ;DMX.c: 144: if(DMX_CurrentBright[Addr]>255){
  5286  0B21  307F               	movlw	127
  5287  0B22  01AC               	clrf	___ftge@ff1
  5288  0B23  00AD               	movwf	___ftge@ff1+1
  5289  0B24  3043               	movlw	67
  5290  0B25  00AE               	movwf	___ftge@ff1+2
  5291  0B26  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5292  0B28  2776  3189         	fcall	PL50	;call to abstracted procedure
  5293  0B2A  241C  3189         	fcall	___ftge
  5294                           
  5295                           ;DMX.c: 145: DMX_CurrentBright[Addr]=255;
  5296  0B2C  086C               	movf	_Addr,w
  5297  0B2D  1803               	btfsc	3,0
  5298  0B2E  2B58               	goto	L6
  5299  0B2F  2793  3189         	fcall	PL60	;call to abstracted procedure
  5300  0B31  307F               	movlw	127
  5301  0B32  3FC1               	movwi [1]fsr1
  5302  0B33  3043               	movlw	67
  5303  0B34  3FC2               	movwi [2]fsr1
  5304  0B35  2B57               	goto	l4731
  5305  0B36                     l4723:	
  5306                           
  5307                           ;DMX.c: 149: DMX_CurrentBright[Addr]=DMX_CurrentBright[Addr]-DMX_SpaceBright[Addr];
  5308  0B36  2742  3189         	fcall	PL28	;call to abstracted procedure
  5309  0B38  272C  3189         	fcall	PL24	;call to abstracted procedure
  5310  0B3A  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5311  0B3C  0187               	clrf	7
  5312  0B3D  2725  3189         	fcall	PL22	;call to abstracted procedure
  5313  0B3F  2448  3189         	fcall	___ftsub
  5314  0B41  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5315  0B43  0187               	clrf	7
  5316  0B44  27BE  3189         	fcall	PL86	;call to abstracted procedure
  5317  0B46  3FC2               	movwi [2]fsr1
  5318                           
  5319                           ;DMX.c: 150: if(DMX_CurrentBright[Addr]<0){
  5320  0B47  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5321  0B49  27D2  3189         	fcall	PL96	;call to abstracted procedure
  5322  0B4B  01AF               	clrf	___ftge@ff2
  5323  0B4C  01B0               	clrf	___ftge@ff2+1
  5324  0B4D  01B1               	clrf	___ftge@ff2+2
  5325  0B4E  241C  3189         	fcall	___ftge
  5326                           
  5327                           ;DMX.c: 151: DMX_CurrentBright[Addr]=0;
  5328  0B50  086C               	movf	_Addr,w
  5329  0B51  1803               	btfsc	3,0
  5330  0B52  2B58               	goto	L6
  5331  0B53  2793  3189         	fcall	PL60	;call to abstracted procedure
  5332  0B55  3FC1               	movwi [1]fsr1
  5333  0B56  3FC2               	movwi [2]fsr1
  5334  0B57                     l4731:	
  5335                           
  5336                           ;DMX.c: 157: rxdata=DMX_CurrentBright[Addr];
  5337  0B57  086C               	movf	_Addr,w
  5338  0B58                     L6:	
  5339  0B58  076C               	addwf	_Addr,w
  5340  0B59  076C               	addwf	_Addr,w
  5341  0B5A  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  5342  0B5B  0086               	movwf	6
  5343  0B5C  0187               	clrf	7
  5344  0B5D  3F40               	moviw [0]fsr1
  5345  0B5E  00DC               	movwf	___fttol@f1
  5346  0B5F  3F41               	moviw [1]fsr1
  5347  0B60  00DD               	movwf	___fttol@f1+1
  5348  0B61  3F42               	moviw [2]fsr1
  5349  0B62  00DE               	movwf	___fttol@f1+2
  5350  0B63  2622  3189         	fcall	___fttol
  5351  0B65  085C               	movf	?___fttol,w
  5352  0B66  0021               	movlb	1	; select bank1
  5353  0B67  00E1               	movwf	_rxdata^(0+128)
  5354                           
  5355                           ;DMX.c: 159: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5356  0B68  274F  3189         	fcall	PL36	;call to abstracted procedure
  5357  0B6A  00EA               	movwf	(??_DMX_loop+2)^(0+384)
  5358  0B6B  3F01               	moviw [1]fsr0
  5359  0B6C  00EB               	movwf	((??_DMX_loop+2)^(0+384)+1)
  5360  0B6D  0021               	movlb	1	; select bank1
  5361  0B6E  0861               	movf	_rxdata^(0+128),w
  5362  0B6F  0023               	movlb	3	; select bank3
  5363  0B70  00EC               	movwf	(??_DMX_loop+4)^(0+384)
  5364  0B71  3002               	movlw	low ((_PWM+2)| (0+32768))
  5365  0B72  01ED               	clrf	((??_DMX_loop+4)^(0+384)+1)
  5366  0B73  35EC               	lslf	(??_DMX_loop+4)^(0+384),f
  5367  0B74  0DED               	rlf	((??_DMX_loop+4)^(0+384)+1),f
  5368  0B75  076C               	addwf	(??_DMX_loop+4)^(0+384),w
  5369  0B76  0084               	movwf	4
  5370  0B77  3090               	movlw	high ((_PWM+2)| (0+32768))
  5371  0B78  3D6D               	addwfc	(??_DMX_loop+5)^(0+384),w
  5372  0B79  0085               	movwf	5
  5373  0B7A  3F00               	moviw [0]fsr0
  5374  0B7B  00EE               	movwf	(??_DMX_loop+6)^(0+384)
  5375  0B7C  3F01               	moviw [1]fsr0
  5376  0B7D  00EF               	movwf	((??_DMX_loop+6)^(0+384)+1)
  5377  0B7E  086A               	movf	(??_DMX_loop+2)^(0+384),w
  5378  0B7F  026E               	subwf	(??_DMX_loop+6)^(0+384),w
  5379  0B80  0020               	movlb	0	; select bank0
  5380  0B81  00A8               	movwf	___lwtoft@c
  5381  0B82  0023               	movlb	3	; select bank3
  5382  0B83  086B               	movf	(??_DMX_loop+3)^(0+384),w
  5383  0B84  3B6F               	subwfb	(??_DMX_loop+7)^(0+384),w
  5384  0B85  0020               	movlb	0	; select bank0
  5385  0B86  00A9               	movwf	___lwtoft@c+1
  5386  0B87  2677  3189         	fcall	___lwtoft
  5387  0B89  0828               	movf	?___lwtoft,w
  5388  0B8A  00AF               	movwf	___ftmul@f2
  5389  0B8B  0829               	movf	?___lwtoft+1,w
  5390  0B8C  00B0               	movwf	___ftmul@f2+1
  5391  0B8D  082A               	movf	?___lwtoft+2,w
  5392  0B8E  00B1               	movwf	___ftmul@f2+2
  5393  0B8F  26D7  3189         	fcall	PL8	;call to abstracted procedure
  5394  0B91  0187               	clrf	7
  5395  0B92  2725  3189         	fcall	PL22	;call to abstracted procedure
  5396  0B94  0021               	movlb	1	; select bank1
  5397  0B95  0861               	movf	_rxdata^(0+128),w
  5398  0B96  240C  3189         	fcall	___lbtoft
  5399  0B98  27B0  3189         	fcall	PL76	;call to abstracted procedure
  5400  0B9A  2448  3189         	fcall	___ftsub
  5401  0B9C  0856               	movf	?___ftsub,w
  5402  0B9D  00AC               	movwf	___ftmul@f1
  5403  0B9E  0857               	movf	?___ftsub+1,w
  5404  0B9F  00AD               	movwf	___ftmul@f1+1
  5405  0BA0  0858               	movf	?___ftsub+2,w
  5406  0BA1  00AE               	movwf	___ftmul@f1+2
  5407  0BA2  256D  3189         	fcall	___ftmul
  5408  0BA4  082C               	movf	?___ftmul,w
  5409  0BA5  00E9               	movwf	_DMX_loop$1453
  5410  0BA6  082D               	movf	?___ftmul+1,w
  5411  0BA7  00EA               	movwf	_DMX_loop$1453+1
  5412  0BA8  082E               	movf	?___ftmul+2,w
  5413  0BA9  00EB               	movwf	_DMX_loop$1453+2
  5414                           
  5415                           ;DMX.c: 159: CurrentPWM.DC[Addr]=PWM.DC[rxdata]+(PWM.DC[rxdata+1]-PWM.DC[rxdata])*(DMX_C
      +                          urrentBright[Addr]-rxdata);
  5416  0BAA  0021               	movlb	1	; select bank1
  5417  0BAB  0861               	movf	_rxdata^(0+128),w
  5418  0BAC  274F  3189         	fcall	PL36	;call to abstracted procedure
  5419  0BAE  0020               	movlb	0	; select bank0
  5420  0BAF  00A8               	movwf	___lwtoft@c
  5421  0BB0  3F01               	moviw [1]fsr0
  5422  0BB1  00A9               	movwf	___lwtoft@c+1
  5423  0BB2  2677  3189         	fcall	___lwtoft
  5424  0BB4  0828               	movf	?___lwtoft,w
  5425  0BB5  00CD               	movwf	___ftadd@f2
  5426  0BB6  0829               	movf	?___lwtoft+1,w
  5427  0BB7  00CE               	movwf	___ftadd@f2+1
  5428  0BB8  082A               	movf	?___lwtoft+2,w
  5429  0BB9  00CF               	movwf	___ftadd@f2+2
  5430  0BBA  0869               	movf	_DMX_loop$1453,w
  5431  0BBB  00CA               	movwf	___ftadd@f1
  5432  0BBC  086A               	movf	_DMX_loop$1453+1,w
  5433  0BBD  00CB               	movwf	___ftadd@f1+1
  5434  0BBE  086B               	movf	_DMX_loop$1453+2,w
  5435  0BBF  00CC               	movwf	___ftadd@f1+2
  5436  0BC0  24BF  3189         	fcall	___ftadd
  5437  0BC2  084A               	movf	?___ftadd,w
  5438  0BC3  00DC               	movwf	___fttol@f1
  5439  0BC4  084B               	movf	?___ftadd+1,w
  5440  0BC5  00DD               	movwf	___fttol@f1+1
  5441  0BC6  084C               	movf	?___ftadd+2,w
  5442  0BC7  00DE               	movwf	___fttol@f1+2
  5443  0BC8  2622  3189         	fcall	___fttol
  5444  0BCA  356C               	lslf	_Addr,w
  5445  0BCB  3E44               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  5446  0BCC  0086               	movwf	6
  5447  0BCD  3001               	movlw	1	; select bank2/3
  5448  0BCE  0087               	movwf	7
  5449  0BCF  085C               	movf	?___fttol,w
  5450  0BD0  3FC0               	movwi [0]fsr1
  5451  0BD1  085D               	movf	?___fttol+1,w
  5452  0BD2  3FC1               	movwi [1]fsr1
  5453                           
  5454                           ;DMX.c: 160: *PWMDCHptr[Addr] = CurrentPWM.PWM[Addr].DCH;
  5455  0BD3  356C               	lslf	_Addr,w
  5456  0BD4  3E45               	addlw	(low ((_CurrentPWM| (0+256)+1)))& (0+255)
  5457  0BD5  0086               	movwf	6
  5458  0BD6  27E0  3189         	fcall	PL100	;call to abstracted procedure
  5459  0BD8  3EB0               	addlw	(low (_PWMDCHptr| (0+256)))& (0+255)
  5460                           
  5461                           ;DMX.c: 161: *PWMDCLptr[Addr] = CurrentPWM.PWM[Addr].DCL;
  5462  0BD9  2733  3189         	fcall	PL26	;call to abstracted procedure
  5463  0BDB  3E44               	addlw	(low (_CurrentPWM| (0+256)))& (0+255)
  5464  0BDC  0086               	movwf	6
  5465  0BDD  3001               	movlw	1	; select bank2/3
  5466  0BDE  0087               	movwf	7
  5467  0BDF  27E0  3189         	fcall	PL100	;call to abstracted procedure
  5468  0BE1  3EB8               	addlw	(low (_PWMDCLptr| (0+256)))& (0+255)
  5469                           
  5470                           ;DMX.c: 163: *PWMLDCONptr[Addr] = 0b10000000;
  5471  0BE2  2733  3189         	fcall	PL26	;call to abstracted procedure
  5472  0BE4  3EA0               	addlw	(low (_PWMLDCONptr| (0+256)))& (0+255)
  5473  0BE5  0086               	movwf	6
  5474  0BE6  3001               	movlw	1	; select bank3/4
  5475  0BE7  0087               	movwf	7
  5476  0BE8  3F40               	moviw [0]fsr1
  5477  0BE9  0023               	movlb	3	; select bank3
  5478  0BEA  00E8               	movwf	??_DMX_loop^(0+384)
  5479  0BEB  3F41               	moviw [1]fsr1
  5480  0BEC  00E9               	movwf	(??_DMX_loop^(0+384)+1)
  5481  0BED  0868               	movf	??_DMX_loop^(0+384),w
  5482  0BEE  0086               	movwf	6
  5483  0BEF  0869               	movf	(??_DMX_loop+1)^(0+384),w
  5484  0BF0  0087               	movwf	7
  5485  0BF1  3080               	movlw	128
  5486  0BF2  0081               	movwf	1
  5487                           
  5488                           ;DMX.c: 164: Addr++;
  5489  0BF3  0020               	movlb	0	; select bank0
  5490  0BF4  0AEC               	incf	_Addr,f
  5491  0BF5                     l4745:	
  5492  0BF5  3004               	movlw	4
  5493  0BF6  0020               	movlb	0	; select bank0
  5494  0BF7  026C               	subwf	_Addr,w
  5495  0BF8  1803               	btfsc	3,0
  5496  0BF9  0008               	return
  5497  0BFA  086C               	movf	_Addr,w
  5498  0BFB  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  5499  0BFC  0086               	movwf	6
  5500  0BFD  0187               	clrf	7
  5501  0BFE  0801               	movf	1,w
  5502  0BFF  3903               	andlw	3
  5503                           
  5504                           ; Switch size 1, requested type "space"
  5505                           ; Number of cases is 3, Range of values is 0 to 2
  5506                           ; switch strategies available:
  5507                           ; Name         Instructions Cycles
  5508                           ; simple_byte           10     6 (average)
  5509                           ; direct_byte           12     6 (fixed)
  5510                           ; jumptable            260     6 (fixed)
  5511                           ;	Chosen strategy is simple_byte
  5512  0C00  1903               	skipnz
  5513  0C01  2B57               	goto	l4731
  5514  0C02  3A01               	xorlw	1	; case 1
  5515  0C03  1903               	skipnz
  5516  0C04  2B0D               	goto	l4719
  5517  0C05  3A03               	xorlw	3	; case 2
  5518  0C06  1903               	skipnz
  5519  0C07  2B36               	goto	l4723
  5520  0C08  2B57               	goto	l4731
  5521  0C09  2B57               	goto	l4731
  5522  0C0A                     l4747:	
  5523                           
  5524                           ;DMX.c: 171: DMXStepConst--;
  5525  0C0A  03E2               	decf	_DMXStepConst^(0+128),f
  5526  0C0B  0008               	return
  5527  0C0C                     __end_of_DMX_loop:	
  5528  0C0C                     __ptext17:	
  5529 ;; *************** function ___lbtoft *****************
  5530 ;; Defined at:
  5531 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  c               1    wreg     unsigned char 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  c               1    4[COMMON] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  3    8[BANK0 ] float 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 1E/1
  5542 ;;		On exit  : 1F/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:        5 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    3
  5552 ;; This function calls:
  5553 ;;		___ftpack
  5554 ;; This function is called by:
  5555 ;;		_DMX_loop
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function ___lbtoft
  5561  0C0C                     ___lbtoft:	
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  5565                           ;___lbtoft@c stored from wreg
  5566  0C0C  00F4               	movwf	___lbtoft@c
  5567  0C0D  0020               	movlb	0	; select bank0
  5568  0C0E  00A0               	movwf	___ftpack@arg
  5569  0C0F  308E               	movlw	142
  5570  0C10  01A1               	clrf	___ftpack@arg+1
  5571  0C11  01A2               	clrf	___ftpack@arg+2
  5572  0C12  00A3               	movwf	___ftpack@exp
  5573  0C13  01A4               	clrf	___ftpack@sign
  5574  0C14  25C9               	fcall	___ftpack
  5575  0C15  0820               	movf	?___ftpack,w
  5576  0C16  00A8               	movwf	?___lbtoft
  5577  0C17  0821               	movf	?___ftpack+1,w
  5578  0C18  00A9               	movwf	?___lbtoft+1
  5579  0C19  0822               	movf	?___ftpack+2,w
  5580  0C1A  00AA               	movwf	?___lbtoft+2
  5581  0C1B  0008               	return
  5582  0C1C                     __end_of___lbtoft:	
  5583  0C1C                     __ptext22:	
  5584 ;; *************** function ___ftge *****************
  5585 ;; Defined at:
  5586 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  ff1             3   12[BANK0 ] float 
  5589 ;;  ff2             3   15[BANK0 ] float 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;		None               void
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0
  5596 ;; Tracked objects:
  5597 ;;		On entry : 1F/0
  5598 ;;		On exit  : 1F/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        6 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    2
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_DMX_loop
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function ___ftge
  5617  0C1C                     ___ftge:	
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5621  0C1C  1FAE               	btfss	___ftge@ff1+2,7
  5622  0C1D  2C2B               	goto	l3199
  5623  0C1E  082C               	movf	___ftge@ff1,w
  5624  0C1F  3C00               	sublw	0
  5625  0C20  00AC               	movwf	___ftge@ff1
  5626  0C21  082D               	movf	___ftge@ff1+1,w
  5627  0C22  1C03               	skipc
  5628  0C23  0F2D               	incfsz	___ftge@ff1+1,w
  5629  0C24  3C00               	sublw	0
  5630  0C25  00AD               	movwf	___ftge@ff1+1
  5631  0C26  082E               	movf	___ftge@ff1+2,w
  5632  0C27  1C03               	skipc
  5633  0C28  0F2E               	incfsz	___ftge@ff1+2,w
  5634  0C29  3C80               	sublw	128
  5635  0C2A  00AE               	movwf	___ftge@ff1+2
  5636  0C2B                     l3199:	
  5637  0C2B  1FB1               	btfss	___ftge@ff2+2,7
  5638  0C2C  2C3A               	goto	l3203
  5639  0C2D  082F               	movf	___ftge@ff2,w
  5640  0C2E  3C00               	sublw	0
  5641  0C2F  00AF               	movwf	___ftge@ff2
  5642  0C30  0830               	movf	___ftge@ff2+1,w
  5643  0C31  1C03               	skipc
  5644  0C32  0F30               	incfsz	___ftge@ff2+1,w
  5645  0C33  3C00               	sublw	0
  5646  0C34  00B0               	movwf	___ftge@ff2+1
  5647  0C35  0831               	movf	___ftge@ff2+2,w
  5648  0C36  1C03               	skipc
  5649  0C37  0F31               	incfsz	___ftge@ff2+2,w
  5650  0C38  3C80               	sublw	128
  5651  0C39  00B1               	movwf	___ftge@ff2+2
  5652  0C3A                     l3203:	
  5653  0C3A  3080               	movlw	128
  5654  0C3B  06AE               	xorwf	___ftge@ff1+2,f
  5655  0C3C  06B1               	xorwf	___ftge@ff2+2,f
  5656  0C3D  0831               	movf	___ftge@ff2+2,w
  5657  0C3E  022E               	subwf	___ftge@ff1+2,w
  5658  0C3F  1D03               	skipz
  5659  0C40  0008               	return
  5660  0C41  0830               	movf	___ftge@ff2+1,w
  5661  0C42  022D               	subwf	___ftge@ff1+1,w
  5662  0C43  1D03               	skipz
  5663  0C44  0008               	return
  5664  0C45  082F               	movf	___ftge@ff2,w
  5665  0C46  022C               	subwf	___ftge@ff1,w
  5666  0C47  0008               	return
  5667  0C48                     __end_of___ftge:	
  5668  0C48                     __ptext19:	
  5669 ;; *************** function ___ftsub *****************
  5670 ;; Defined at:
  5671 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;  f2              3   54[BANK0 ] float 
  5674 ;;  f1              3   57[BANK0 ] float 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  3   54[BANK0 ] float 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 1F/0
  5683 ;;		On exit  : 1F/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        6 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    4
  5693 ;; This function calls:
  5694 ;;		___ftadd
  5695 ;; This function is called by:
  5696 ;;		_DMX_loop
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function ___ftsub
  5702  0C48                     ___ftsub:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5706  0C48  0858               	movf	___ftsub@f2+2,w
  5707  0C49  0457               	iorwf	___ftsub@f2+1,w
  5708  0C4A  0456               	iorwf	___ftsub@f2,w
  5709  0C4B  1903               	skipnz
  5710  0C4C  2C4F               	goto	l4475
  5711  0C4D  3080               	movlw	128
  5712  0C4E  06D8               	xorwf	___ftsub@f2+2,f
  5713  0C4F                     l4475:	
  5714  0C4F  0859               	movf	___ftsub@f1,w
  5715  0C50  00CA               	movwf	___ftadd@f1
  5716  0C51  085A               	movf	___ftsub@f1+1,w
  5717  0C52  00CB               	movwf	___ftadd@f1+1
  5718  0C53  085B               	movf	___ftsub@f1+2,w
  5719  0C54  00CC               	movwf	___ftadd@f1+2
  5720  0C55  0856               	movf	___ftsub@f2,w
  5721  0C56  00CD               	movwf	___ftadd@f2
  5722  0C57  0857               	movf	___ftsub@f2+1,w
  5723  0C58  00CE               	movwf	___ftadd@f2+1
  5724  0C59  0858               	movf	___ftsub@f2+2,w
  5725  0C5A  00CF               	movwf	___ftadd@f2+2
  5726  0C5B  24BF               	fcall	___ftadd
  5727  0C5C  084A               	movf	?___ftadd,w
  5728  0C5D  00D6               	movwf	?___ftsub
  5729  0C5E  084B               	movf	?___ftadd+1,w
  5730  0C5F  00D7               	movwf	?___ftsub+1
  5731  0C60  084C               	movf	?___ftadd+2,w
  5732  0C61  00D8               	movwf	?___ftsub+2
  5733  0C62  0008               	return
  5734  0C63                     __end_of___ftsub:	
  5735  0C63                     __ptext23:	
  5736 ;; *************** function ___ftdiv *****************
  5737 ;; Defined at:
  5738 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  f2              3   27[BANK0 ] float 
  5741 ;;  f1              3   30[BANK0 ] float 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  f3              3   37[BANK0 ] float 
  5744 ;;  sign            1   41[BANK0 ] unsigned char 
  5745 ;;  exp             1   40[BANK0 ] unsigned char 
  5746 ;;  cntr            1   36[BANK0 ] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  3   27[BANK0 ] float 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0, pclath, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 1F/0
  5753 ;;		On exit  : 1F/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;Total ram usage:       15 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    3
  5763 ;; This function calls:
  5764 ;;		___ftpack
  5765 ;; This function is called by:
  5766 ;;		_DMX_loop
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           
  5771                           ;psect for function ___ftdiv
  5772  0C63                     ___ftdiv:	
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5776  0C63  083E               	movf	___ftdiv@f1,w
  5777  0C64  00C1               	movwf	??___ftdiv
  5778  0C65  083F               	movf	___ftdiv@f1+1,w
  5779  0C66  00C2               	movwf	??___ftdiv+1
  5780  0C67  0840               	movf	___ftdiv@f1+2,w
  5781  0C68  00C3               	movwf	??___ftdiv+2
  5782  0C69  1003               	clrc
  5783  0C6A  0D42               	rlf	??___ftdiv+1,w
  5784  0C6B  0D43               	rlf	??___ftdiv+2,w
  5785  0C6C  00C8               	movwf	___ftdiv@exp
  5786  0C6D  0848               	movf	___ftdiv@exp,w
  5787  0C6E  1D03               	btfss	3,2
  5788  0C6F  2C71               	goto	l4383
  5789  0C70  2FF8               	ljmp	PL120	;call to abstracted procedure
  5790  0C71                     l4383:	
  5791  0C71  083B               	movf	___ftdiv@f2,w
  5792  0C72  00C1               	movwf	??___ftdiv
  5793  0C73  083C               	movf	___ftdiv@f2+1,w
  5794  0C74  00C2               	movwf	??___ftdiv+1
  5795  0C75  083D               	movf	___ftdiv@f2+2,w
  5796  0C76  00C3               	movwf	??___ftdiv+2
  5797  0C77  1003               	clrc
  5798  0C78  0D42               	rlf	??___ftdiv+1,w
  5799  0C79  0D43               	rlf	??___ftdiv+2,w
  5800  0C7A  00C9               	movwf	___ftdiv@sign
  5801  0C7B  0849               	movf	___ftdiv@sign,w
  5802  0C7C  1D03               	btfss	3,2
  5803  0C7D  2C7F               	goto	l1325
  5804  0C7E  2FF8               	ljmp	PL120	;call to abstracted procedure
  5805  0C7F                     l1325:	
  5806  0C7F  3089               	movlw	137
  5807  0C80  01C5               	clrf	___ftdiv@f3
  5808  0C81  01C6               	clrf	___ftdiv@f3+1
  5809  0C82  01C7               	clrf	___ftdiv@f3+2
  5810  0C83  0749               	addwf	___ftdiv@sign,w
  5811  0C84  00C1               	movwf	??___ftdiv
  5812  0C85  02C8               	subwf	___ftdiv@exp,f
  5813  0C86  0840               	movf	___ftdiv@f1+2,w
  5814  0C87  00C9               	movwf	___ftdiv@sign
  5815  0C88  083D               	movf	___ftdiv@f2+2,w
  5816  0C89  06C9               	xorwf	___ftdiv@sign,f
  5817  0C8A  3080               	movlw	128
  5818  0C8B  05C9               	andwf	___ftdiv@sign,f
  5819  0C8C  3018               	movlw	24
  5820  0C8D  17BF               	bsf	___ftdiv@f1+1,7
  5821  0C8E  01C0               	clrf	___ftdiv@f1+2
  5822  0C8F  17BC               	bsf	___ftdiv@f2+1,7
  5823  0C90  01BD               	clrf	___ftdiv@f2+2
  5824  0C91  00C4               	movwf	___ftdiv@cntr
  5825  0C92                     l4405:	
  5826  0C92  35C5               	lslf	___ftdiv@f3,f
  5827  0C93  0DC6               	rlf	___ftdiv@f3+1,f
  5828  0C94  0DC7               	rlf	___ftdiv@f3+2,f
  5829  0C95  083D               	movf	___ftdiv@f2+2,w
  5830  0C96  0240               	subwf	___ftdiv@f1+2,w
  5831  0C97  1D03               	skipz
  5832  0C98  2C9F               	goto	u3345
  5833  0C99  083C               	movf	___ftdiv@f2+1,w
  5834  0C9A  023F               	subwf	___ftdiv@f1+1,w
  5835  0C9B  1D03               	skipz
  5836  0C9C  2C9F               	goto	u3345
  5837  0C9D  083B               	movf	___ftdiv@f2,w
  5838  0C9E  023E               	subwf	___ftdiv@f1,w
  5839  0C9F                     u3345:	
  5840  0C9F  1C03               	skipc
  5841  0CA0  2CA8               	goto	l4411
  5842  0CA1  083B               	movf	___ftdiv@f2,w
  5843  0CA2  02BE               	subwf	___ftdiv@f1,f
  5844  0CA3  083C               	movf	___ftdiv@f2+1,w
  5845  0CA4  3BBF               	subwfb	___ftdiv@f1+1,f
  5846  0CA5  083D               	movf	___ftdiv@f2+2,w
  5847  0CA6  3BC0               	subwfb	___ftdiv@f1+2,f
  5848  0CA7  1445               	bsf	___ftdiv@f3,0
  5849  0CA8                     l4411:	
  5850  0CA8  35BE               	lslf	___ftdiv@f1,f
  5851  0CA9  0DBF               	rlf	___ftdiv@f1+1,f
  5852  0CAA  0DC0               	rlf	___ftdiv@f1+2,f
  5853  0CAB  0BC4               	decfsz	___ftdiv@cntr,f
  5854  0CAC  2C92               	goto	l4405
  5855  0CAD  0845               	movf	___ftdiv@f3,w
  5856  0CAE  00A0               	movwf	___ftpack@arg
  5857  0CAF  0846               	movf	___ftdiv@f3+1,w
  5858  0CB0  00A1               	movwf	___ftpack@arg+1
  5859  0CB1  0847               	movf	___ftdiv@f3+2,w
  5860  0CB2  00A2               	movwf	___ftpack@arg+2
  5861  0CB3  0848               	movf	___ftdiv@exp,w
  5862  0CB4  00A3               	movwf	___ftpack@exp
  5863  0CB5  0849               	movf	___ftdiv@sign,w
  5864  0CB6  00A4               	movwf	___ftpack@sign
  5865  0CB7  25C9               	fcall	___ftpack
  5866  0CB8  0820               	movf	?___ftpack,w
  5867  0CB9  00BB               	movwf	?___ftdiv
  5868  0CBA  0821               	movf	?___ftpack+1,w
  5869  0CBB  00BC               	movwf	?___ftdiv+1
  5870  0CBC  0822               	movf	?___ftpack+2,w
  5871  0CBD  00BD               	movwf	?___ftdiv+2
  5872  0CBE  0008               	return
  5873  0CBF                     __end_of___ftdiv:	
  5874  0CBF                     __ptext20:	
  5875 ;; *************** function ___ftadd *****************
  5876 ;; Defined at:
  5877 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  f1              3   42[BANK0 ] float 
  5880 ;;  f2              3   45[BANK0 ] float 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  exp1            1   53[BANK0 ] unsigned char 
  5883 ;;  exp2            1   52[BANK0 ] unsigned char 
  5884 ;;  sign            1   51[BANK0 ] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  3   42[BANK0 ] float 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0, pclath, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 1F/0
  5891 ;;		On exit  : 1F/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5894 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;Total ram usage:       12 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    3
  5901 ;; This function calls:
  5902 ;;		___ftpack
  5903 ;; This function is called by:
  5904 ;;		_DMX_loop
  5905 ;;		___ftsub
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function ___ftadd
  5911  0CBF                     ___ftadd:	
  5912                           
  5913                           ;incstack = 0
  5914                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5915  0CBF  084A               	movf	___ftadd@f1,w
  5916  0CC0  00D0               	movwf	??___ftadd
  5917  0CC1  084B               	movf	___ftadd@f1+1,w
  5918  0CC2  00D1               	movwf	??___ftadd+1
  5919  0CC3  084C               	movf	___ftadd@f1+2,w
  5920  0CC4  00D2               	movwf	??___ftadd+2
  5921  0CC5  1003               	clrc
  5922  0CC6  0D51               	rlf	??___ftadd+1,w
  5923  0CC7  0D52               	rlf	??___ftadd+2,w
  5924  0CC8  00D5               	movwf	___ftadd@exp1
  5925  0CC9  084D               	movf	___ftadd@f2,w
  5926  0CCA  00D0               	movwf	??___ftadd
  5927  0CCB  084E               	movf	___ftadd@f2+1,w
  5928  0CCC  00D1               	movwf	??___ftadd+1
  5929  0CCD  084F               	movf	___ftadd@f2+2,w
  5930  0CCE  00D2               	movwf	??___ftadd+2
  5931  0CCF  1003               	clrc
  5932  0CD0  0D51               	rlf	??___ftadd+1,w
  5933  0CD1  0D52               	rlf	??___ftadd+2,w
  5934  0CD2  00D4               	movwf	___ftadd@exp2
  5935  0CD3  0855               	movf	___ftadd@exp1,w
  5936  0CD4  1903               	btfsc	3,2
  5937  0CD5  2CE2               	goto	l4143
  5938  0CD6  0854               	movf	___ftadd@exp2,w
  5939  0CD7  0255               	subwf	___ftadd@exp1,w
  5940  0CD8  0854               	movf	___ftadd@exp2,w
  5941  0CD9  1803               	skipnc
  5942  0CDA  2CEA               	goto	L7
  5943  0CDB  00D0               	movwf	??___ftadd
  5944  0CDC  0855               	movf	___ftadd@exp1,w
  5945  0CDD  02D0               	subwf	??___ftadd,f
  5946  0CDE  3019               	movlw	25
  5947  0CDF  0250               	subwf	??___ftadd,w
  5948  0CE0  1C03               	skipc
  5949  0CE1  2CE9               	goto	l4147
  5950  0CE2                     l4143:	
  5951  0CE2  084D               	movf	___ftadd@f2,w
  5952  0CE3  00CA               	movwf	?___ftadd
  5953  0CE4  084E               	movf	___ftadd@f2+1,w
  5954  0CE5  00CB               	movwf	?___ftadd+1
  5955  0CE6  084F               	movf	___ftadd@f2+2,w
  5956  0CE7  00CC               	movwf	?___ftadd+2
  5957  0CE8  0008               	return
  5958  0CE9                     l4147:	
  5959  0CE9  0854               	movf	___ftadd@exp2,w
  5960  0CEA                     L7:	
  5961  0CEA  1903               	btfsc	3,2
  5962  0CEB  0008               	return
  5963  0CEC  0855               	movf	___ftadd@exp1,w
  5964  0CED  0254               	subwf	___ftadd@exp2,w
  5965  0CEE  1803               	skipnc
  5966  0CEF  2CF8               	goto	l4153
  5967  0CF0  0855               	movf	___ftadd@exp1,w
  5968  0CF1  00D0               	movwf	??___ftadd
  5969  0CF2  0854               	movf	___ftadd@exp2,w
  5970  0CF3  02D0               	subwf	??___ftadd,f
  5971  0CF4  3019               	movlw	25
  5972  0CF5  0250               	subwf	??___ftadd,w
  5973  0CF6  1803               	btfsc	3,0
  5974  0CF7  0008               	return
  5975  0CF8                     l4153:	
  5976  0CF8  3006               	movlw	6
  5977  0CF9  00D3               	movwf	___ftadd@sign
  5978  0CFA  1BCC               	btfsc	___ftadd@f1+2,7
  5979  0CFB  17D3               	bsf	___ftadd@sign,7
  5980  0CFC  1BCF               	btfsc	___ftadd@f2+2,7
  5981  0CFD  1753               	bsf	___ftadd@sign,6
  5982  0CFE  17CB               	bsf	___ftadd@f1+1,7
  5983  0CFF  01CC               	clrf	___ftadd@f1+2
  5984  0D00  17CE               	bsf	___ftadd@f2+1,7
  5985  0D01  01CF               	clrf	___ftadd@f2+2
  5986  0D02  0854               	movf	___ftadd@exp2,w
  5987  0D03  0255               	subwf	___ftadd@exp1,w
  5988  0D04  1803               	skipnc
  5989  0D05  2D1D               	goto	l4175
  5990  0D06                     l4165:	
  5991  0D06  35CD               	lslf	___ftadd@f2,f
  5992  0D07  0DCE               	rlf	___ftadd@f2+1,f
  5993  0D08  0DCF               	rlf	___ftadd@f2+2,f
  5994  0D09  03D4               	decf	___ftadd@exp2,f
  5995  0D0A  0854               	movf	___ftadd@exp2,w
  5996  0D0B  0655               	xorwf	___ftadd@exp1,w
  5997  0D0C  1903               	skipnz
  5998  0D0D  2D18               	goto	l4173
  5999  0D0E  03D3               	decf	___ftadd@sign,f
  6000  0D0F  0853               	movf	___ftadd@sign,w
  6001  0D10  3907               	andlw	7
  6002  0D11  1903               	btfsc	3,2
  6003  0D12  2D18               	goto	l4173
  6004  0D13  2D06               	goto	l4165
  6005  0D14                     l4171:	
  6006  0D14  36CC               	lsrf	___ftadd@f1+2,f
  6007  0D15  0CCB               	rrf	___ftadd@f1+1,f
  6008  0D16  0CCA               	rrf	___ftadd@f1,f
  6009  0D17  0AD5               	incf	___ftadd@exp1,f
  6010  0D18                     l4173:	
  6011  0D18  0855               	movf	___ftadd@exp1,w
  6012  0D19  0654               	xorwf	___ftadd@exp2,w
  6013  0D1A  1903               	btfsc	3,2
  6014  0D1B  2D37               	goto	l1307
  6015  0D1C  2D14               	goto	l4171
  6016  0D1D                     l4175:	
  6017  0D1D  0855               	movf	___ftadd@exp1,w
  6018  0D1E  0254               	subwf	___ftadd@exp2,w
  6019  0D1F  1803               	skipnc
  6020  0D20  2D37               	goto	l1307
  6021  0D21                     l4177:	
  6022  0D21  35CA               	lslf	___ftadd@f1,f
  6023  0D22  0DCB               	rlf	___ftadd@f1+1,f
  6024  0D23  0DCC               	rlf	___ftadd@f1+2,f
  6025  0D24  03D5               	decf	___ftadd@exp1,f
  6026  0D25  0854               	movf	___ftadd@exp2,w
  6027  0D26  0655               	xorwf	___ftadd@exp1,w
  6028  0D27  1903               	skipnz
  6029  0D28  2D33               	goto	l4185
  6030  0D29  03D3               	decf	___ftadd@sign,f
  6031  0D2A  0853               	movf	___ftadd@sign,w
  6032  0D2B  3907               	andlw	7
  6033  0D2C  1903               	btfsc	3,2
  6034  0D2D  2D33               	goto	l4185
  6035  0D2E  2D21               	goto	l4177
  6036  0D2F                     l4183:	
  6037  0D2F  36CF               	lsrf	___ftadd@f2+2,f
  6038  0D30  0CCE               	rrf	___ftadd@f2+1,f
  6039  0D31  0CCD               	rrf	___ftadd@f2,f
  6040  0D32  0AD4               	incf	___ftadd@exp2,f
  6041  0D33                     l4185:	
  6042  0D33  0855               	movf	___ftadd@exp1,w
  6043  0D34  0654               	xorwf	___ftadd@exp2,w
  6044  0D35  1D03               	skipz
  6045  0D36  2D2F               	goto	l4183
  6046  0D37                     l1307:	
  6047  0D37  1FD3               	btfss	___ftadd@sign,7
  6048  0D38  2D42               	goto	l4191
  6049  0D39  30FF               	movlw	255
  6050  0D3A  06CA               	xorwf	___ftadd@f1,f
  6051  0D3B  06CB               	xorwf	___ftadd@f1+1,f
  6052  0D3C  06CC               	xorwf	___ftadd@f1+2,f
  6053  0D3D  0ACA               	incf	___ftadd@f1,f
  6054  0D3E  1903               	skipnz
  6055  0D3F  0ACB               	incf	___ftadd@f1+1,f
  6056  0D40  1903               	skipnz
  6057  0D41  0ACC               	incf	___ftadd@f1+2,f
  6058  0D42                     l4191:	
  6059  0D42  1F53               	btfss	___ftadd@sign,6
  6060  0D43  2D4A               	goto	l4197
  6061  0D44  27E6  3189         	fcall	PL102	;call to abstracted procedure
  6062  0D46  1903               	skipnz
  6063  0D47  0ACE               	incf	___ftadd@f2+1,f
  6064  0D48  1903               	skipnz
  6065  0D49  0ACF               	incf	___ftadd@f2+2,f
  6066  0D4A                     l4197:	
  6067  0D4A  01D3               	clrf	___ftadd@sign
  6068  0D4B  084A               	movf	___ftadd@f1,w
  6069  0D4C  07CD               	addwf	___ftadd@f2,f
  6070  0D4D  084B               	movf	___ftadd@f1+1,w
  6071  0D4E  3DCE               	addwfc	___ftadd@f2+1,f
  6072  0D4F  084C               	movf	___ftadd@f1+2,w
  6073  0D50  3DCF               	addwfc	___ftadd@f2+2,f
  6074  0D51  1FCF               	btfss	___ftadd@f2+2,7
  6075  0D52  2D5B               	goto	l4209
  6076  0D53  27E6  3189         	fcall	PL102	;call to abstracted procedure
  6077  0D55  1903               	skipnz
  6078  0D56  0ACE               	incf	___ftadd@f2+1,f
  6079  0D57  1903               	skipnz
  6080  0D58  0ACF               	incf	___ftadd@f2+2,f
  6081  0D59  01D3               	clrf	___ftadd@sign
  6082  0D5A  0AD3               	incf	___ftadd@sign,f
  6083  0D5B                     l4209:	
  6084  0D5B  084D               	movf	___ftadd@f2,w
  6085  0D5C  00A0               	movwf	___ftpack@arg
  6086  0D5D  084E               	movf	___ftadd@f2+1,w
  6087  0D5E  00A1               	movwf	___ftpack@arg+1
  6088  0D5F  084F               	movf	___ftadd@f2+2,w
  6089  0D60  00A2               	movwf	___ftpack@arg+2
  6090  0D61  0855               	movf	___ftadd@exp1,w
  6091  0D62  00A3               	movwf	___ftpack@exp
  6092  0D63  0853               	movf	___ftadd@sign,w
  6093  0D64  00A4               	movwf	___ftpack@sign
  6094  0D65  25C9               	fcall	___ftpack
  6095  0D66  0820               	movf	?___ftpack,w
  6096  0D67  00CA               	movwf	?___ftadd
  6097  0D68  0821               	movf	?___ftpack+1,w
  6098  0D69  00CB               	movwf	?___ftadd+1
  6099  0D6A  0822               	movf	?___ftpack+2,w
  6100  0D6B  00CC               	movwf	?___ftadd+2
  6101  0D6C  0008               	return
  6102  0D6D                     __end_of___ftadd:	
  6103  0D6D                     __ptext21:	
  6104 ;; *************** function ___ftmul *****************
  6105 ;; Defined at:
  6106 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  f1              3   12[BANK0 ] float 
  6109 ;;  f2              3   15[BANK0 ] float 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  6112 ;;  sign            1   26[BANK0 ] unsigned char 
  6113 ;;  cntr            1   25[BANK0 ] unsigned char 
  6114 ;;  exp             1   21[BANK0 ] unsigned char 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  3   12[BANK0 ] float 
  6117 ;; Registers used:
  6118 ;;		wreg, status,2, status,0, pclath, cstack
  6119 ;; Tracked objects:
  6120 ;;		On entry : 1F/0
  6121 ;;		On exit  : 1F/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6124 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;Total ram usage:       15 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; Hardware stack levels required when called:    3
  6131 ;; This function calls:
  6132 ;;		___ftpack
  6133 ;; This function is called by:
  6134 ;;		_DMX_loop
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function ___ftmul
  6140  0D6D                     ___ftmul:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6144  0D6D  082C               	movf	___ftmul@f1,w
  6145  0D6E  00B2               	movwf	??___ftmul
  6146  0D6F  082D               	movf	___ftmul@f1+1,w
  6147  0D70  00B3               	movwf	??___ftmul+1
  6148  0D71  082E               	movf	___ftmul@f1+2,w
  6149  0D72  00B4               	movwf	??___ftmul+2
  6150  0D73  1003               	clrc
  6151  0D74  0D33               	rlf	??___ftmul+1,w
  6152  0D75  0D34               	rlf	??___ftmul+2,w
  6153  0D76  00B5               	movwf	___ftmul@exp
  6154  0D77  0835               	movf	___ftmul@exp,w
  6155  0D78  1D03               	btfss	3,2
  6156  0D79  2D7B               	goto	l4423
  6157  0D7A  2FFC               	ljmp	PL124	;call to abstracted procedure
  6158  0D7B                     l4423:	
  6159  0D7B  082F               	movf	___ftmul@f2,w
  6160  0D7C  00B2               	movwf	??___ftmul
  6161  0D7D  0830               	movf	___ftmul@f2+1,w
  6162  0D7E  00B3               	movwf	??___ftmul+1
  6163  0D7F  0831               	movf	___ftmul@f2+2,w
  6164  0D80  00B4               	movwf	??___ftmul+2
  6165  0D81  1003               	clrc
  6166  0D82  0D33               	rlf	??___ftmul+1,w
  6167  0D83  0D34               	rlf	??___ftmul+2,w
  6168  0D84  00BA               	movwf	___ftmul@sign
  6169  0D85  083A               	movf	___ftmul@sign,w
  6170  0D86  1D03               	btfss	3,2
  6171  0D87  2D89               	goto	l4427
  6172  0D88  2FFC               	ljmp	PL124	;call to abstracted procedure
  6173  0D89                     l4427:	
  6174  0D89  083A               	movf	___ftmul@sign,w
  6175  0D8A  3E7B               	addlw	123
  6176  0D8B  07B5               	addwf	___ftmul@exp,f
  6177  0D8C  082E               	movf	___ftmul@f1+2,w
  6178  0D8D  00BA               	movwf	___ftmul@sign
  6179  0D8E  0831               	movf	___ftmul@f2+2,w
  6180  0D8F  06BA               	xorwf	___ftmul@sign,f
  6181  0D90  3080               	movlw	128
  6182  0D91  05BA               	andwf	___ftmul@sign,f
  6183  0D92  30FF               	movlw	255
  6184  0D93  17AD               	bsf	___ftmul@f1+1,7
  6185  0D94  17B0               	bsf	___ftmul@f2+1,7
  6186  0D95  05AF               	andwf	___ftmul@f2,f
  6187  0D96  05B0               	andwf	___ftmul@f2+1,f
  6188  0D97  3007               	movlw	7
  6189  0D98  01B1               	clrf	___ftmul@f2+2
  6190  0D99  01B6               	clrf	___ftmul@f3_as_product
  6191  0D9A  01B7               	clrf	___ftmul@f3_as_product+1
  6192  0D9B  01B8               	clrf	___ftmul@f3_as_product+2
  6193  0D9C  00B9               	movwf	___ftmul@cntr
  6194  0D9D                     l4445:	
  6195  0D9D  1C2C               	btfss	___ftmul@f1,0
  6196  0D9E  2DA1               	goto	l4449
  6197  0D9F  279B  3189         	fcall	PL64	;call to abstracted procedure
  6198  0DA1                     l4449:	
  6199  0DA1  36AE               	lsrf	___ftmul@f1+2,f
  6200  0DA2  0CAD               	rrf	___ftmul@f1+1,f
  6201  0DA3  0CAC               	rrf	___ftmul@f1,f
  6202  0DA4  35AF               	lslf	___ftmul@f2,f
  6203  0DA5  0DB0               	rlf	___ftmul@f2+1,f
  6204  0DA6  0DB1               	rlf	___ftmul@f2+2,f
  6205  0DA7  0BB9               	decfsz	___ftmul@cntr,f
  6206  0DA8  2D9D               	goto	l4445
  6207  0DA9  3009               	movlw	9
  6208  0DAA  00B9               	movwf	___ftmul@cntr
  6209  0DAB                     l4457:	
  6210  0DAB  1C2C               	btfss	___ftmul@f1,0
  6211  0DAC  2DAF               	goto	l4461
  6212  0DAD  279B  3189         	fcall	PL64	;call to abstracted procedure
  6213  0DAF                     l4461:	
  6214  0DAF  36AE               	lsrf	___ftmul@f1+2,f
  6215  0DB0  0CAD               	rrf	___ftmul@f1+1,f
  6216  0DB1  0CAC               	rrf	___ftmul@f1,f
  6217  0DB2  36B8               	lsrf	___ftmul@f3_as_product+2,f
  6218  0DB3  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6219  0DB4  0CB6               	rrf	___ftmul@f3_as_product,f
  6220  0DB5  0BB9               	decfsz	___ftmul@cntr,f
  6221  0DB6  2DAB               	goto	l4457
  6222  0DB7  0836               	movf	___ftmul@f3_as_product,w
  6223  0DB8  00A0               	movwf	___ftpack@arg
  6224  0DB9  0837               	movf	___ftmul@f3_as_product+1,w
  6225  0DBA  00A1               	movwf	___ftpack@arg+1
  6226  0DBB  0838               	movf	___ftmul@f3_as_product+2,w
  6227  0DBC  00A2               	movwf	___ftpack@arg+2
  6228  0DBD  0835               	movf	___ftmul@exp,w
  6229  0DBE  00A3               	movwf	___ftpack@exp
  6230  0DBF  083A               	movf	___ftmul@sign,w
  6231  0DC0  00A4               	movwf	___ftpack@sign
  6232  0DC1  25C9               	fcall	___ftpack
  6233  0DC2  0820               	movf	?___ftpack,w
  6234  0DC3  00AC               	movwf	?___ftmul
  6235  0DC4  0821               	movf	?___ftpack+1,w
  6236  0DC5  00AD               	movwf	?___ftmul+1
  6237  0DC6  0822               	movf	?___ftpack+2,w
  6238  0DC7  00AE               	movwf	?___ftmul+2
  6239  0DC8  0008               	return
  6240  0DC9                     __end_of___ftmul:	
  6241  0DC9                     __ptext25:	
  6242 ;; *************** function ___ftpack *****************
  6243 ;; Defined at:
  6244 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  arg             3    0[BANK0 ] unsigned um
  6247 ;;  exp             1    3[BANK0 ] unsigned char 
  6248 ;;  sign            1    4[BANK0 ] unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  3    0[BANK0 ] float 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 1F/0
  6257 ;;		On exit  : 1F/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        8 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    2
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		___awtoft
  6271 ;;		___ftadd
  6272 ;;		___ftdiv
  6273 ;;		___ftmul
  6274 ;;		___lbtoft
  6275 ;;		___lwtoft
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           
  6280                           ;psect for function ___ftpack
  6281  0DC9                     ___ftpack:	
  6282                           
  6283                           ;incstack = 0
  6284                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6285  0DC9  0823               	movf	___ftpack@exp,w
  6286  0DCA  1903               	btfsc	3,2
  6287  0DCB  2DD1               	goto	l1271
  6288  0DCC  0822               	movf	___ftpack@arg+2,w
  6289  0DCD  0421               	iorwf	___ftpack@arg+1,w
  6290  0DCE  0420               	iorwf	___ftpack@arg,w
  6291  0DCF  1D03               	skipz
  6292  0DD0  2DD9               	goto	l4101
  6293  0DD1                     l1271:	
  6294  0DD1  01A0               	clrf	?___ftpack
  6295  0DD2  01A1               	clrf	?___ftpack+1
  6296  0DD3  01A2               	clrf	?___ftpack+2
  6297  0DD4  0008               	return
  6298  0DD5                     l4099:	
  6299  0DD5  0AA3               	incf	___ftpack@exp,f
  6300  0DD6  36A2               	lsrf	___ftpack@arg+2,f
  6301  0DD7  0CA1               	rrf	___ftpack@arg+1,f
  6302  0DD8  0CA0               	rrf	___ftpack@arg,f
  6303  0DD9                     l4101:	
  6304  0DD9  30FE               	movlw	254
  6305  0DDA  0522               	andwf	___ftpack@arg+2,w
  6306  0DDB  1903               	btfsc	3,2
  6307  0DDC  2DE7               	goto	l4105
  6308  0DDD  2DD5               	goto	l4099
  6309  0DDE                     l4103:	
  6310  0DDE  0AA3               	incf	___ftpack@exp,f
  6311  0DDF  0AA0               	incf	___ftpack@arg,f
  6312  0DE0  1903               	skipnz
  6313  0DE1  0AA1               	incf	___ftpack@arg+1,f
  6314  0DE2  1903               	skipnz
  6315  0DE3  0AA2               	incf	___ftpack@arg+2,f
  6316  0DE4  36A2               	lsrf	___ftpack@arg+2,f
  6317  0DE5  0CA1               	rrf	___ftpack@arg+1,f
  6318  0DE6  0CA0               	rrf	___ftpack@arg,f
  6319  0DE7                     l4105:	
  6320  0DE7  30FF               	movlw	255
  6321  0DE8  0522               	andwf	___ftpack@arg+2,w
  6322  0DE9  1903               	btfsc	3,2
  6323  0DEA  2DF4               	goto	l4109
  6324  0DEB  2DDE               	goto	l4103
  6325  0DEC                     l4111:	
  6326  0DEC  3002               	movlw	2
  6327  0DED  0223               	subwf	___ftpack@exp,w
  6328  0DEE  1C03               	btfss	3,0
  6329  0DEF  2DF6               	goto	l1283
  6330  0DF0  03A3               	decf	___ftpack@exp,f
  6331  0DF1  35A0               	lslf	___ftpack@arg,f
  6332  0DF2  0DA1               	rlf	___ftpack@arg+1,f
  6333  0DF3  0DA2               	rlf	___ftpack@arg+2,f
  6334  0DF4                     l4109:	
  6335  0DF4  1FA1               	btfss	___ftpack@arg+1,7
  6336  0DF5  2DEC               	goto	l4111
  6337  0DF6                     l1283:	
  6338  0DF6  1C23               	btfss	___ftpack@exp,0
  6339  0DF7  13A1               	bcf	___ftpack@arg+1,7
  6340  0DF8  36A3               	lsrf	___ftpack@exp,f
  6341  0DF9  0823               	movf	___ftpack@exp,w
  6342  0DFA  00A7               	movwf	??___ftpack+2
  6343  0DFB  01A6               	clrf	??___ftpack+1
  6344  0DFC  01A5               	clrf	??___ftpack
  6345  0DFD  0825               	movf	??___ftpack,w
  6346  0DFE  04A0               	iorwf	___ftpack@arg,f
  6347  0DFF  0826               	movf	??___ftpack+1,w
  6348  0E00  04A1               	iorwf	___ftpack@arg+1,f
  6349  0E01  0827               	movf	??___ftpack+2,w
  6350  0E02  04A2               	iorwf	___ftpack@arg+2,f
  6351  0E03  0824               	movf	___ftpack@sign,w
  6352  0E04  1D03               	btfss	3,2
  6353  0E05  17A2               	bsf	___ftpack@arg+2,7
  6354  0E06  0008               	return
  6355  0E07                     __end_of___ftpack:	
  6356  0E07                     __ptext24:	
  6357 ;; *************** function ___awtoft *****************
  6358 ;; Defined at:
  6359 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  c               2    8[BANK0 ] int 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  sign            1    4[COMMON] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  3    8[BANK0 ] float 
  6366 ;; Registers used:
  6367 ;;		wreg, status,2, status,0, pclath, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 1F/0
  6370 ;;		On exit  : 1F/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:        4 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    3
  6380 ;; This function calls:
  6381 ;;		___ftpack
  6382 ;; This function is called by:
  6383 ;;		_DMX_loop
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function ___awtoft
  6389  0E07                     ___awtoft:	
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6393  0E07  01F4               	clrf	___awtoft@sign
  6394  0E08  1FA9               	btfss	___awtoft@c+1,7
  6395  0E09  2E11               	goto	l4375
  6396  0E0A  09A8               	comf	___awtoft@c,f
  6397  0E0B  09A9               	comf	___awtoft@c+1,f
  6398  0E0C  0AA8               	incf	___awtoft@c,f
  6399  0E0D  1903               	skipnz
  6400  0E0E  0AA9               	incf	___awtoft@c+1,f
  6401  0E0F  01F4               	clrf	___awtoft@sign
  6402  0E10  0AF4               	incf	___awtoft@sign,f
  6403  0E11                     l4375:	
  6404  0E11  0828               	movf	___awtoft@c,w
  6405  0E12  00A0               	movwf	___ftpack@arg
  6406  0E13  0829               	movf	___awtoft@c+1,w
  6407  0E14  00A1               	movwf	___ftpack@arg+1
  6408  0E15  308E               	movlw	142
  6409  0E16  01A2               	clrf	___ftpack@arg+2
  6410  0E17  00A3               	movwf	___ftpack@exp
  6411  0E18  0874               	movf	___awtoft@sign,w
  6412  0E19  00A4               	movwf	___ftpack@sign
  6413  0E1A  25C9               	fcall	___ftpack
  6414  0E1B  0820               	movf	?___ftpack,w
  6415  0E1C  00A8               	movwf	?___awtoft
  6416  0E1D  0821               	movf	?___ftpack+1,w
  6417  0E1E  00A9               	movwf	?___awtoft+1
  6418  0E1F  0822               	movf	?___ftpack+2,w
  6419  0E20  00AA               	movwf	?___awtoft+2
  6420  0E21  0008               	return
  6421  0E22                     __end_of___awtoft:	
  6422  0E22                     __ptext18:	
  6423 ;; *************** function ___fttol *****************
  6424 ;; Defined at:
  6425 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  f1              3   60[BANK0 ] float 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  lval            4   68[BANK0 ] unsigned long 
  6430 ;;  exp1            1   72[BANK0 ] unsigned char 
  6431 ;;  sign1           1   67[BANK0 ] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  4   60[BANK0 ] long 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 1F/0
  6438 ;;		On exit  : 1F/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:       13 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    2
  6448 ;; This function calls:
  6449 ;;		Nothing
  6450 ;; This function is called by:
  6451 ;;		_DMX_loop
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function ___fttol
  6457  0E22                     ___fttol:	
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6461  0E22  27B7  3189         	fcall	PL84	;call to abstracted procedure
  6462  0E24  1003               	clrc
  6463  0E25  0D61               	rlf	??___fttol+1,w
  6464  0E26  0D62               	rlf	??___fttol+2,w
  6465  0E27  00E8               	movwf	___fttol@exp1
  6466  0E28  0868               	movf	___fttol@exp1,w
  6467  0E29  1D03               	btfss	3,2
  6468  0E2A  2E30               	goto	l3279
  6469  0E2B                     l3277:	
  6470  0E2B  01DC               	clrf	?___fttol
  6471  0E2C  01DD               	clrf	?___fttol+1
  6472  0E2D  01DE               	clrf	?___fttol+2
  6473  0E2E  01DF               	clrf	?___fttol+3
  6474  0E2F  0008               	return
  6475  0E30                     l3279:	
  6476  0E30  27B7  3189         	fcall	PL84	;call to abstracted procedure
  6477  0E32  3017               	movlw	23
  6478  0E33                     u2045:	
  6479  0E33  36E2               	lsrf	??___fttol+2,f
  6480  0E34  0CE1               	rrf	??___fttol+1,f
  6481  0E35  0CE0               	rrf	??___fttol,f
  6482  0E36  0B89               	decfsz	9,f
  6483  0E37  2E33               	goto	u2045
  6484  0E38  0860               	movf	??___fttol,w
  6485  0E39  00E3               	movwf	___fttol@sign1
  6486  0E3A  17DD               	bsf	___fttol@f1+1,7
  6487  0E3B  01DE               	clrf	___fttol@f1+2
  6488  0E3C  085C               	movf	___fttol@f1,w
  6489  0E3D  00E4               	movwf	___fttol@lval
  6490  0E3E  085D               	movf	___fttol@f1+1,w
  6491  0E3F  00E5               	movwf	___fttol@lval+1
  6492  0E40  085E               	movf	___fttol@f1+2,w
  6493  0E41  00E6               	movwf	___fttol@lval+2
  6494  0E42  308E               	movlw	142
  6495  0E43  01E7               	clrf	___fttol@lval+3
  6496  0E44  02E8               	subwf	___fttol@exp1,f
  6497  0E45  1FE8               	btfss	___fttol@exp1,7
  6498  0E46  2E53               	goto	l3299
  6499  0E47  0868               	movf	___fttol@exp1,w
  6500  0E48  3A80               	xorlw	128
  6501  0E49  3E8F               	addlw	143
  6502  0E4A  1C03               	btfss	3,0
  6503  0E4B  2E2B               	goto	l3277
  6504  0E4C                     l3295:	
  6505  0E4C  36E7               	lsrf	___fttol@lval+3,f
  6506  0E4D  0CE6               	rrf	___fttol@lval+2,f
  6507  0E4E  0CE5               	rrf	___fttol@lval+1,f
  6508  0E4F  0CE4               	rrf	___fttol@lval,f
  6509  0E50  0FE8               	incfsz	___fttol@exp1,f
  6510  0E51  2E4C               	goto	l3295
  6511  0E52  2E60               	goto	l3307
  6512  0E53                     l3299:	
  6513  0E53  3018               	movlw	24
  6514  0E54  0268               	subwf	___fttol@exp1,w
  6515  0E55  1803               	btfsc	3,0
  6516  0E56  2E2B               	goto	l3277
  6517  0E57                     l3305:	
  6518  0E57  0868               	movf	___fttol@exp1,w
  6519  0E58  1903               	btfsc	3,2
  6520  0E59  2E60               	goto	l3307
  6521  0E5A  35E4               	lslf	___fttol@lval,f
  6522  0E5B  0DE5               	rlf	___fttol@lval+1,f
  6523  0E5C  0DE6               	rlf	___fttol@lval+2,f
  6524  0E5D  0DE7               	rlf	___fttol@lval+3,f
  6525  0E5E  03E8               	decf	___fttol@exp1,f
  6526  0E5F  2E57               	goto	l3305
  6527  0E60                     l3307:	
  6528  0E60  0863               	movf	___fttol@sign1,w
  6529  0E61  1903               	btfsc	3,2
  6530  0E62  2E6E               	goto	l3311
  6531  0E63  09E4               	comf	___fttol@lval,f
  6532  0E64  09E5               	comf	___fttol@lval+1,f
  6533  0E65  09E6               	comf	___fttol@lval+2,f
  6534  0E66  09E7               	comf	___fttol@lval+3,f
  6535  0E67  0AE4               	incf	___fttol@lval,f
  6536  0E68  1903               	skipnz
  6537  0E69  0AE5               	incf	___fttol@lval+1,f
  6538  0E6A  1903               	skipnz
  6539  0E6B  0AE6               	incf	___fttol@lval+2,f
  6540  0E6C  1903               	skipnz
  6541  0E6D  0AE7               	incf	___fttol@lval+3,f
  6542  0E6E                     l3311:	
  6543  0E6E  0867               	movf	___fttol@lval+3,w
  6544  0E6F  00DF               	movwf	?___fttol+3
  6545  0E70  0866               	movf	___fttol@lval+2,w
  6546  0E71  00DE               	movwf	?___fttol+2
  6547  0E72  0865               	movf	___fttol@lval+1,w
  6548  0E73  00DD               	movwf	?___fttol+1
  6549  0E74  0864               	movf	___fttol@lval,w
  6550  0E75  00DC               	movwf	?___fttol
  6551  0E76  0008               	return
  6552  0E77                     __end_of___fttol:	
  6553  0E77                     __ptext16:	
  6554 ;; *************** function ___lwtoft *****************
  6555 ;; Defined at:
  6556 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  c               2    8[BANK0 ] unsigned int 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  3    8[BANK0 ] float 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, pclath, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 1F/0
  6567 ;;		On exit  : 1F/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6570 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;Total ram usage:        3 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    3
  6577 ;; This function calls:
  6578 ;;		___ftpack
  6579 ;; This function is called by:
  6580 ;;		_DMX_loop
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function ___lwtoft
  6586  0E77                     ___lwtoft:	
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6590  0E77  0828               	movf	___lwtoft@c,w
  6591  0E78  00A0               	movwf	___ftpack@arg
  6592  0E79  0829               	movf	___lwtoft@c+1,w
  6593  0E7A  00A1               	movwf	___ftpack@arg+1
  6594  0E7B  308E               	movlw	142
  6595  0E7C  01A2               	clrf	___ftpack@arg+2
  6596  0E7D  00A3               	movwf	___ftpack@exp
  6597  0E7E  01A4               	clrf	___ftpack@sign
  6598  0E7F  25C9               	fcall	___ftpack
  6599  0E80  0820               	movf	?___ftpack,w
  6600  0E81  00A8               	movwf	?___lwtoft
  6601  0E82  0821               	movf	?___ftpack+1,w
  6602  0E83  00A9               	movwf	?___lwtoft+1
  6603  0E84  0822               	movf	?___ftpack+2,w
  6604  0E85  00AA               	movwf	?___lwtoft+2
  6605  0E86  0008               	return
  6606  0E87                     __end_of___lwtoft:	
  6607  0E87                     PL2:	
  6608  0E87  076C               	addwf	_Addr,w
  6609  0E88  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  6610  0E89  0086               	movwf	6
  6611  0E8A  0187               	clrf	7
  6612  0E8B  0828               	movf	?___lbtoft,w
  6613  0E8C  3FC0               	movwi [0]fsr1
  6614  0E8D  0829               	movf	?___lbtoft+1,w
  6615  0E8E  3FC1               	movwi [1]fsr1
  6616  0E8F  082A               	movf	?___lbtoft+2,w
  6617  0E90  3FC2               	movwi [2]fsr1
  6618  0E91  086C               	movf	_Addr,w
  6619  0E92  076C               	addwf	_Addr,w
  6620  0E93  076C               	addwf	_Addr,w
  6621  0E94  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  6622  0E95  0086               	movwf	6
  6623  0E96  0828               	movf	?___lbtoft,w
  6624  0E97  3FC0               	movwi [0]fsr1
  6625  0E98  0829               	movf	?___lbtoft+1,w
  6626  0E99  3FC1               	movwi [1]fsr1
  6627  0E9A  082A               	movf	?___lbtoft+2,w
  6628  0E9B  3FC2               	movwi [2]fsr1
  6629  0E9C  0008               	return
  6630  0E9D                     __end_ofPL2:	
  6631  0E9D                     PL4:	
  6632  0E9D  0081               	movwf	1
  6633  0E9E  086C               	movf	_Addr,w
  6634  0E9F  076C               	addwf	_Addr,w
  6635  0EA0  076C               	addwf	_Addr,w
  6636  0EA1  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  6637  0EA2  0086               	movwf	6
  6638  0EA3  3F40               	moviw [0]fsr1
  6639  0EA4  0023               	movlb	3	; select bank3
  6640  0EA5  00E8               	movwf	??_DMX_loop^(0+384)
  6641  0EA6  3F41               	moviw [1]fsr1
  6642  0EA7  00E9               	movwf	(??_DMX_loop^(0+384)+1)
  6643  0EA8  3F42               	moviw [2]fsr1
  6644  0EA9  00EA               	movwf	(??_DMX_loop^(0+384)+2)
  6645  0EAA  0020               	movlb	0	; select bank0
  6646  0EAB  086C               	movf	_Addr,w
  6647  0EAC  076C               	addwf	_Addr,w
  6648  0EAD  076C               	addwf	_Addr,w
  6649  0EAE  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  6650  0EAF  0086               	movwf	6
  6651  0EB0  0023               	movlb	3	; select bank3
  6652  0EB1  0868               	movf	??_DMX_loop^(0+384),w
  6653  0EB2  3FC0               	movwi [0]fsr1
  6654  0EB3  0869               	movf	(??_DMX_loop+1)^(0+384),w
  6655  0EB4  3FC1               	movwi [1]fsr1
  6656  0EB5  086A               	movf	(??_DMX_loop+2)^(0+384),w
  6657  0EB6  3FC2               	movwi [2]fsr1
  6658  0EB7  0020               	movlb	0	; select bank0
  6659  0EB8  086C               	movf	_Addr,w
  6660  0EB9  0008               	return
  6661  0EBA                     __end_ofPL4:	
  6662  0EBA                     PL6:	
  6663  0EBA  0856               	movf	?___ftsub,w
  6664  0EBB  0021               	movlb	1	; select bank1
  6665  0EBC  00C3               	movwf	_DMX_difference^(0+128)	;volatile
  6666  0EBD  0020               	movlb	0	; select bank0
  6667  0EBE  0857               	movf	?___ftsub+1,w
  6668  0EBF  0021               	movlb	1	; select bank1
  6669  0EC0  00C4               	movwf	(_DMX_difference+1)^(0+128)	;volatile
  6670  0EC1  0020               	movlb	0	; select bank0
  6671  0EC2  0858               	movf	?___ftsub+2,w
  6672  0EC3  0021               	movlb	1	; select bank1
  6673  0EC4  00C5               	movwf	(_DMX_difference+2)^(0+128)	;volatile
  6674  0EC5  0843               	movf	_DMX_difference^(0+128),w	;volatile
  6675  0EC6  0020               	movlb	0	; select bank0
  6676  0EC7  00AC               	movwf	___ftge@ff1
  6677  0EC8  0021               	movlb	1	; select bank1
  6678  0EC9  0844               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  6679  0ECA  0020               	movlb	0	; select bank0
  6680  0ECB  00AD               	movwf	___ftge@ff1+1
  6681  0ECC  0021               	movlb	1	; select bank1
  6682  0ECD  0845               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  6683  0ECE  0020               	movlb	0	; select bank0
  6684  0ECF  00AE               	movwf	___ftge@ff1+2
  6685  0ED0  30CD               	movlw	205
  6686  0ED1  00AF               	movwf	___ftge@ff2
  6687  0ED2  304C               	movlw	76
  6688  0ED3  00B0               	movwf	___ftge@ff2+1
  6689  0ED4  303D               	movlw	61
  6690  0ED5  00B1               	movwf	___ftge@ff2+2
  6691  0ED6  0008               	return
  6692  0ED7                     __end_ofPL6:	
  6693  0ED7                     PL8:	
  6694  0ED7  086C               	movf	_Addr,w
  6695  0ED8  076C               	addwf	_Addr,w
  6696  0ED9  076C               	addwf	_Addr,w
  6697  0EDA  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  6698  0EDB  0086               	movwf	6
  6699  0EDC  0008               	return
  6700  0EDD                     __end_ofPL8:	
  6701  0EDD                     PL10:	
  6702  0EDD  0828               	movf	?___lbtoft,w
  6703  0EDE  00BB               	movwf	___ftdiv@f2
  6704  0EDF  0829               	movf	?___lbtoft+1,w
  6705  0EE0  00BC               	movwf	___ftdiv@f2+1
  6706  0EE1  082A               	movf	?___lbtoft+2,w
  6707  0EE2  00BD               	movwf	___ftdiv@f2+2
  6708  0EE3  0021               	movlb	1	; select bank1
  6709  0EE4  0843               	movf	_DMX_difference^(0+128),w	;volatile
  6710  0EE5  0020               	movlb	0	; select bank0
  6711  0EE6  00AC               	movwf	___ftmul@f1
  6712  0EE7  0021               	movlb	1	; select bank1
  6713  0EE8  0844               	movf	(_DMX_difference+1)^(0+128),w	;volatile
  6714  0EE9  0020               	movlb	0	; select bank0
  6715  0EEA  00AD               	movwf	___ftmul@f1+1
  6716  0EEB  0021               	movlb	1	; select bank1
  6717  0EEC  0845               	movf	(_DMX_difference+2)^(0+128),w	;volatile
  6718  0EED  0020               	movlb	0	; select bank0
  6719  0EEE  00AE               	movwf	___ftmul@f1+2
  6720  0EEF  086C               	movf	_Addr,w
  6721  0EF0  3E6C               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  6722  0EF1  0086               	movwf	6
  6723  0EF2  3001               	movlw	1	; select bank2/3
  6724  0EF3  0087               	movwf	7
  6725  0EF4  0801               	movf	1,w
  6726  0EF5  0008               	return
  6727  0EF6                     __end_ofPL10:	
  6728  0EF6                     PL12:	
  6729  0EF6  0828               	movf	?___lbtoft,w
  6730  0EF7  00CA               	movwf	___ftadd@f1
  6731  0EF8  0829               	movf	?___lbtoft+1,w
  6732  0EF9  00CB               	movwf	___ftadd@f1+1
  6733  0EFA  082A               	movf	?___lbtoft+2,w
  6734  0EFB  00CC               	movwf	___ftadd@f1+2
  6735  0EFC  3040               	movlw	64
  6736  0EFD  01BB               	clrf	___ftdiv@f2
  6737  0EFE  01BC               	clrf	___ftdiv@f2+1
  6738  0EFF  00BD               	movwf	___ftdiv@f2+2
  6739  0F00  086C               	movf	_Addr,w
  6740  0F01  076C               	addwf	_Addr,w
  6741  0F02  076C               	addwf	_Addr,w
  6742  0F03  3EDC               	addlw	(low (_DMX_repeat_hereditary| (0+256)))& (0+255)
  6743  0F04  0086               	movwf	6
  6744  0F05  3001               	movlw	1	; select bank3/4
  6745  0F06  0087               	movwf	7
  6746  0F07  3F40               	moviw [0]fsr1
  6747  0F08  00BE               	movwf	___ftdiv@f1
  6748  0F09  3F41               	moviw [1]fsr1
  6749  0F0A  00BF               	movwf	___ftdiv@f1+1
  6750  0F0B  3F42               	moviw [2]fsr1
  6751  0F0C  00C0               	movwf	___ftdiv@f1+2
  6752  0F0D  0008               	return
  6753  0F0E                     __end_ofPL12:	
  6754  0F0E                     PL16:	
  6755  0F0E  086C               	movf	_Addr,w
  6756  0F0F  076C               	addwf	_Addr,w
  6757  0F10  076C               	addwf	_Addr,w
  6758  0F11  3EDC               	addlw	(low (_DMX_repeat_hereditary| (0+256)))& (0+255)
  6759  0F12  0086               	movwf	6
  6760  0F13  3001               	movlw	1	; select bank3/4
  6761  0F14  0087               	movwf	7
  6762  0F15  0008               	return
  6763  0F16                     __end_ofPL16:	
  6764  0F16                     PL18:	
  6765  0F16  0086               	movwf	6
  6766  0F17  0187               	clrf	7
  6767  0F18  3F40               	moviw [0]fsr1
  6768  0F19  00D9               	movwf	___ftsub@f1
  6769  0F1A  3F41               	moviw [1]fsr1
  6770  0F1B  00DA               	movwf	___ftsub@f1+1
  6771  0F1C  3F42               	moviw [2]fsr1
  6772  0F1D  00DB               	movwf	___ftsub@f1+2
  6773  0F1E  0008               	return
  6774  0F1F                     __end_ofPL18:	
  6775  0F1F                     PL20:	
  6776  0F1F  076C               	addwf	_Addr,w
  6777  0F20  076C               	addwf	_Addr,w
  6778  0F21  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  6779  0F22  0086               	movwf	6
  6780  0F23  0187               	clrf	7
  6781  0F24  0008               	return
  6782  0F25                     __end_ofPL20:	
  6783  0F25                     PL22:	
  6784  0F25  3F40               	moviw [0]fsr1
  6785  0F26  00D9               	movwf	___ftsub@f1
  6786  0F27  3F41               	moviw [1]fsr1
  6787  0F28  00DA               	movwf	___ftsub@f1+1
  6788  0F29  3F42               	moviw [2]fsr1
  6789  0F2A  00DB               	movwf	___ftsub@f1+2
  6790  0F2B  0008               	return
  6791  0F2C                     __end_ofPL22:	
  6792  0F2C                     PL24:	
  6793  0F2C  3F40               	moviw [0]fsr1
  6794  0F2D  00D6               	movwf	___ftsub@f2
  6795  0F2E  3F41               	moviw [1]fsr1
  6796  0F2F  00D7               	movwf	___ftsub@f2+1
  6797  0F30  3F42               	moviw [2]fsr1
  6798  0F31  00D8               	movwf	___ftsub@f2+2
  6799  0F32  0008               	return
  6800  0F33                     __end_ofPL24:	
  6801  0F33                     PL26:	
  6802  0F33  0086               	movwf	6
  6803  0F34  3F40               	moviw [0]fsr1
  6804  0F35  0023               	movlb	3	; select bank3
  6805  0F36  00E9               	movwf	(??_DMX_loop+1)^(0+384)
  6806  0F37  3F41               	moviw [1]fsr1
  6807  0F38  00EA               	movwf	((??_DMX_loop+1)^(0+384)+1)
  6808  0F39  0869               	movf	(??_DMX_loop+1)^(0+384),w
  6809  0F3A  0086               	movwf	6
  6810  0F3B  086A               	movf	(??_DMX_loop+2)^(0+384),w
  6811  0F3C  0087               	movwf	7
  6812  0F3D  0868               	movf	??_DMX_loop^(0+384),w
  6813  0F3E  0081               	movwf	1
  6814  0F3F  0020               	movlb	0	; select bank0
  6815  0F40  356C               	lslf	_Addr,w
  6816  0F41  0008               	return
  6817  0F42                     __end_ofPL26:	
  6818  0F42                     PL28:	
  6819  0F42  086C               	movf	_Addr,w
  6820  0F43  076C               	addwf	_Addr,w
  6821  0F44  076C               	addwf	_Addr,w
  6822  0F45  3E38               	addlw	(low (_DMX_SpaceBright| (0+256)))& (0+255)
  6823  0F46  0086               	movwf	6
  6824  0F47  3001               	movlw	1	; select bank2/3
  6825  0F48  0087               	movwf	7
  6826  0F49  0008               	return
  6827  0F4A                     __end_ofPL28:	
  6828  0F4A                     PL30:	
  6829  0F4A  086C               	movf	_Addr,w
  6830  0F4B  076C               	addwf	_Addr,w
  6831  0F4C  076C               	addwf	_Addr,w
  6832  0F4D  3EA0               	addlw	(low (_DMX_TargetBright| 0))& (0+255)
  6833  0F4E  0008               	return
  6834  0F4F                     __end_ofPL30:	
  6835  0F4F                     PL36:	
  6836  0F4F  0023               	movlb	3	; select bank3
  6837  0F50  00E8               	movwf	??_DMX_loop^(0+384)
  6838  0F51  3000               	movlw	low (_PWM| (0+32768))
  6839  0F52  01E9               	clrf	(??_DMX_loop^(0+384)+1)
  6840  0F53  35E8               	lslf	??_DMX_loop^(0+384),f
  6841  0F54  0DE9               	rlf	(??_DMX_loop^(0+384)+1),f
  6842  0F55  0768               	addwf	??_DMX_loop^(0+384),w
  6843  0F56  0084               	movwf	4
  6844  0F57  3090               	movlw	high (_PWM| (0+32768))
  6845  0F58  3D69               	addwfc	(??_DMX_loop+1)^(0+384),w
  6846  0F59  0085               	movwf	5
  6847  0F5A  3F00               	moviw [0]fsr0
  6848  0F5B  0008               	return
  6849  0F5C                     __end_ofPL36:	
  6850  0F5C                     PL38:	
  6851  0F5C  3FC2               	movwi [2]fsr1
  6852  0F5D  0021               	movlb	1	; select bank1
  6853  0F5E  086F               	movf	_DMXPeriod^(0+128),w
  6854  0F5F  0023               	movlb	3	; select bank3
  6855  0F60  00E8               	movwf	??_DMX_loop^(0+384)
  6856  0F61  36E8               	lsrf	??_DMX_loop^(0+384),f
  6857  0F62  36E8               	lsrf	??_DMX_loop^(0+384),f
  6858  0F63  0868               	movf	??_DMX_loop^(0+384),w
  6859  0F64  0020               	movlb	0	; select bank0
  6860  0F65  00A8               	movwf	___awtoft@c
  6861  0F66  01A9               	clrf	___awtoft@c+1
  6862  0F67  0008               	return
  6863  0F68                     __end_ofPL38:	
  6864  0F68                     PL42:	
  6865  0F68  084A               	movf	?___ftadd,w
  6866  0F69  3FC0               	movwi [0]fsr1
  6867  0F6A  084B               	movf	?___ftadd+1,w
  6868  0F6B  3FC1               	movwi [1]fsr1
  6869  0F6C  084C               	movf	?___ftadd+2,w
  6870  0F6D  3FC2               	movwi [2]fsr1
  6871  0F6E  0008               	return
  6872  0F6F                     __end_ofPL42:	
  6873  0F6F                     PL46:	
  6874  0F6F  0828               	movf	?___awtoft,w
  6875  0F70  00BB               	movwf	___ftdiv@f2
  6876  0F71  0829               	movf	?___awtoft+1,w
  6877  0F72  00BC               	movwf	___ftdiv@f2+1
  6878  0F73  082A               	movf	?___awtoft+2,w
  6879  0F74  00BD               	movwf	___ftdiv@f2+2
  6880  0F75  0008               	return
  6881  0F76                     __end_ofPL46:	
  6882  0F76                     PL50:	
  6883  0F76  3F40               	moviw [0]fsr1
  6884  0F77  00AF               	movwf	___ftge@ff2
  6885  0F78  3F41               	moviw [1]fsr1
  6886  0F79  00B0               	movwf	___ftge@ff2+1
  6887  0F7A  3F42               	moviw [2]fsr1
  6888  0F7B  00B1               	movwf	___ftge@ff2+2
  6889  0F7C  0008               	return
  6890  0F7D                     __end_ofPL50:	
  6891  0F7D                     PL52:	
  6892  0F7D  083B               	movf	?___ftdiv,w
  6893  0F7E  00CD               	movwf	___ftadd@f2
  6894  0F7F  083C               	movf	?___ftdiv+1,w
  6895  0F80  00CE               	movwf	___ftadd@f2+1
  6896  0F81  083D               	movf	?___ftdiv+2,w
  6897  0F82  00CF               	movwf	___ftadd@f2+2
  6898  0F83  0008               	return
  6899  0F84                     __end_ofPL52:	
  6900  0F84                     PL56:	
  6901  0F84  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  6902  0F85  0086               	movwf	6
  6903  0F86  30FC               	movlw	-4
  6904  0F87  0187               	clrf	7
  6905  0F88  0581               	andwf	1,f
  6906  0F89  0021               	movlb	1	; select bank1
  6907  0F8A  0861               	movf	_rxdata^(0+128),w
  6908  0F8B  0008               	return
  6909  0F8C                     __end_ofPL56:	
  6910  0F8C                     PL58:	
  6911  0F8C  3F40               	moviw [0]fsr1
  6912  0F8D  00CA               	movwf	___ftadd@f1
  6913  0F8E  3F41               	moviw [1]fsr1
  6914  0F8F  00CB               	movwf	___ftadd@f1+1
  6915  0F90  3F42               	moviw [2]fsr1
  6916  0F91  00CC               	movwf	___ftadd@f1+2
  6917  0F92  0008               	return
  6918  0F93                     __end_ofPL58:	
  6919  0F93                     PL60:	
  6920  0F93  076C               	addwf	_Addr,w
  6921  0F94  076C               	addwf	_Addr,w
  6922  0F95  3EAC               	addlw	(low (_DMX_CurrentBright| 0))& (0+255)
  6923  0F96  0086               	movwf	6
  6924  0F97  3000               	movlw	0
  6925  0F98  0187               	clrf	7
  6926  0F99  3FC0               	movwi [0]fsr1
  6927  0F9A  0008               	return
  6928  0F9B                     __end_ofPL60:	
  6929  0F9B                     PL64:	
  6930  0F9B  082F               	movf	___ftmul@f2,w
  6931  0F9C  07B6               	addwf	___ftmul@f3_as_product,f
  6932  0F9D  0830               	movf	___ftmul@f2+1,w
  6933  0F9E  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  6934  0F9F  0831               	movf	___ftmul@f2+2,w
  6935  0FA0  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  6936  0FA1  0008               	return
  6937  0FA2                     __end_ofPL64:	
  6938  0FA2                     PL66:	
  6939  0FA2  3E6C               	addlw	(low (_DMX_repeatcoeff| (0+256)))& (0+255)
  6940  0FA3  0086               	movwf	6
  6941  0FA4  3001               	movlw	1	; select bank2/3
  6942  0FA5  0087               	movwf	7
  6943  0FA6  3002               	movlw	2
  6944  0FA7  0081               	movwf	1
  6945  0FA8  0008               	return
  6946  0FA9                     __end_ofPL66:	
  6947  0FA9                     PL68:	
  6948  0FA9  0856               	movf	?___ftsub,w
  6949  0FAA  00BE               	movwf	___ftdiv@f1
  6950  0FAB  0857               	movf	?___ftsub+1,w
  6951  0FAC  00BF               	movwf	___ftdiv@f1+1
  6952  0FAD  0858               	movf	?___ftsub+2,w
  6953  0FAE  00C0               	movwf	___ftdiv@f1+2
  6954  0FAF  0008               	return
  6955  0FB0                     __end_ofPL68:	
  6956  0FB0                     PL76:	
  6957  0FB0  0828               	movf	?___lbtoft,w
  6958  0FB1  00D6               	movwf	___ftsub@f2
  6959  0FB2  0829               	movf	?___lbtoft+1,w
  6960  0FB3  00D7               	movwf	___ftsub@f2+1
  6961  0FB4  082A               	movf	?___lbtoft+2,w
  6962  0FB5  00D8               	movwf	___ftsub@f2+2
  6963  0FB6  0008               	return
  6964  0FB7                     __end_ofPL76:	
  6965  0FB7                     PL84:	
  6966  0FB7  085C               	movf	___fttol@f1,w
  6967  0FB8  00E0               	movwf	??___fttol
  6968  0FB9  085D               	movf	___fttol@f1+1,w
  6969  0FBA  00E1               	movwf	??___fttol+1
  6970  0FBB  085E               	movf	___fttol@f1+2,w
  6971  0FBC  00E2               	movwf	??___fttol+2
  6972  0FBD  0008               	return
  6973  0FBE                     __end_ofPL84:	
  6974  0FBE                     PL86:	
  6975  0FBE  0856               	movf	?___ftsub,w
  6976  0FBF  3FC0               	movwi [0]fsr1
  6977  0FC0  0857               	movf	?___ftsub+1,w
  6978  0FC1  3FC1               	movwi [1]fsr1
  6979  0FC2  0858               	movf	?___ftsub+2,w
  6980  0FC3  0008               	return
  6981  0FC4                     __end_ofPL86:	
  6982  0FC4                     PL90:	
  6983  0FC4  082C               	movf	?___ftmul,w
  6984  0FC5  00BE               	movwf	___ftdiv@f1
  6985  0FC6  082D               	movf	?___ftmul+1,w
  6986  0FC7  00BF               	movwf	___ftdiv@f1+1
  6987  0FC8  082E               	movf	?___ftmul+2,w
  6988  0FC9  00C0               	movwf	___ftdiv@f1+2
  6989  0FCA  0008               	return
  6990  0FCB                     __end_ofPL90:	
  6991  0FCB                     PL92:	
  6992  0FCB  083B               	movf	?___ftdiv,w
  6993  0FCC  3FC0               	movwi [0]fsr1
  6994  0FCD  083C               	movf	?___ftdiv+1,w
  6995  0FCE  3FC1               	movwi [1]fsr1
  6996  0FCF  083D               	movf	?___ftdiv+2,w
  6997  0FD0  3FC2               	movwi [2]fsr1
  6998  0FD1  0008               	return
  6999  0FD2                     __end_ofPL92:	
  7000  0FD2                     PL96:	
  7001  0FD2  3F40               	moviw [0]fsr1
  7002  0FD3  00AC               	movwf	___ftge@ff1
  7003  0FD4  3F41               	moviw [1]fsr1
  7004  0FD5  00AD               	movwf	___ftge@ff1+1
  7005  0FD6  3F42               	moviw [2]fsr1
  7006  0FD7  00AE               	movwf	___ftge@ff1+2
  7007  0FD8  0008               	return
  7008  0FD9                     __end_ofPL96:	
  7009  0FD9                     PL98:	
  7010  0FD9  0828               	movf	?___lbtoft,w
  7011  0FDA  00AF               	movwf	___ftmul@f2
  7012  0FDB  0829               	movf	?___lbtoft+1,w
  7013  0FDC  00B0               	movwf	___ftmul@f2+1
  7014  0FDD  082A               	movf	?___lbtoft+2,w
  7015  0FDE  00B1               	movwf	___ftmul@f2+2
  7016  0FDF  0008               	return
  7017  0FE0                     __end_ofPL98:	
  7018  0FE0                     PL100:	
  7019  0FE0  0801               	movf	1,w
  7020  0FE1  0023               	movlb	3	; select bank3
  7021  0FE2  00E8               	movwf	??_DMX_loop^(0+384)
  7022  0FE3  0020               	movlb	0	; select bank0
  7023  0FE4  356C               	lslf	_Addr,w
  7024  0FE5  0008               	return
  7025  0FE6                     __end_ofPL100:	
  7026  0FE6                     PL102:	
  7027  0FE6  30FF               	movlw	255
  7028  0FE7  06CD               	xorwf	___ftadd@f2,f
  7029  0FE8  06CE               	xorwf	___ftadd@f2+1,f
  7030  0FE9  06CF               	xorwf	___ftadd@f2+2,f
  7031  0FEA  0ACD               	incf	___ftadd@f2,f
  7032  0FEB  0008               	return
  7033  0FEC                     __end_ofPL102:	
  7034  0FEC                     PL106:	
  7035  0FEC  3EBF               	addlw	(low (_DMXSign| 0))& (0+255)
  7036  0FED  0086               	movwf	6
  7037  0FEE  0187               	clrf	7
  7038  0FEF  0801               	movf	1,w
  7039  0FF0  39FC               	andlw	-4
  7040  0FF1  0008               	return
  7041  0FF2                     __end_ofPL106:	
  7042  0FF2                     PL110:	
  7043  0FF2  356C               	lslf	_Addr,w
  7044  0FF3  3E64               	addlw	(low (_DMX_Repeat| (0+256)))& (0+255)
  7045  0FF4  0086               	movwf	6
  7046  0FF5  3001               	movlw	1	; select bank2/3
  7047  0FF6  0087               	movwf	7
  7048  0FF7  0008               	return
  7049  0FF8                     __end_ofPL110:	
  7050  0FF8                     PL120:	
  7051  0FF8  01BB               	clrf	?___ftdiv
  7052  0FF9  01BC               	clrf	?___ftdiv+1
  7053  0FFA  01BD               	clrf	?___ftdiv+2
  7054  0FFB  0008               	return
  7055  0FFC                     __end_ofPL120:	
  7056  0FFC                     PL124:	
  7057  0FFC  01AC               	clrf	?___ftmul
  7058  0FFD  01AD               	clrf	?___ftmul+1
  7059  0FFE  01AE               	clrf	?___ftmul+2
  7060  0FFF  0008               	return
  7061  1000                     __end_ofPL124:	
  7062                           
  7063                           	psect	intentry
  7064  0004                     __pintentry:	
  7065 ;; *************** function _isr *****************
  7066 ;; Defined at:
  7067 ;;		line 87 in file "main.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;		None
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      void 
  7074 ;; Registers used:
  7075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 1C/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;Total ram usage:        0 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    1
  7088 ;; This function calls:
  7089 ;;		_ADC_interrupt
  7090 ;;		_DMX_interrput
  7091 ;;		_RDM_tx_interrupt
  7092 ;;		_timer1_interrupt
  7093 ;; This function is called by:
  7094 ;;		Interrupt level 1
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098  0004                     _isr:	
  7099                           
  7100                           ;incstack = 0
  7101  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7102                           
  7103                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7104  0005  3180               	pagesel	$
  7105                           
  7106                           ;main.c: 88: ADC_interrupt();
  7107  0006  3187  2762  3180   	fcall	_ADC_interrupt
  7108                           
  7109                           ;main.c: 90: DMX_interrput();
  7110  0009  3185  25D4  3180   	fcall	_DMX_interrput
  7111                           
  7112                           ;main.c: 91: timer1_interrupt();
  7113  000C  3183  23D7  3180   	fcall	_timer1_interrupt
  7114                           
  7115                           ;main.c: 92: RDM_tx_interrupt();
  7116  000F  3186  26B2         	fcall	_RDM_tx_interrupt
  7117  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7118  0012  0009               	retfie
  7119  0013                     __end_of_isr:	
  7120                           
  7121                           	psect	text30
  7122  03D7                     __ptext30:	
  7123 ;; *************** function _timer1_interrupt *****************
  7124 ;; Defined at:
  7125 ;;		line 24 in file "Timer.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  2  142[None  ] int 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 1E/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;Total ram usage:        1 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_isr
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           
  7153                           ;psect for function _timer1_interrupt
  7154  03D7                     _timer1_interrupt:	
  7155                           
  7156                           ;Timer.c: 25: if (TMR1IE && TMR1IF) {
  7157                           
  7158                           ;incstack = 0
  7159                           ; Regs used in _timer1_interrupt: [wreg-fsr0h+status,2+status,0]
  7160  03D7  0021               	movlb	1	; select bank1
  7161  03D8  1C11               	btfss	17,0	;volatile
  7162  03D9  0008               	return
  7163  03DA  0020               	movlb	0	; select bank0
  7164  03DB  1C11               	btfss	17,0	;volatile
  7165  03DC  0008               	return
  7166                           
  7167                           ;Timer.c: 26: TMR1IF = 0;
  7168  03DD  1011               	bcf	17,0	;volatile
  7169                           
  7170                           ;Timer.c: 27: switch (TimerState) {
  7171  03DE  2C2F               	goto	i1l3813
  7172  03DF                     i1l3767:	
  7173                           
  7174                           ;Timer.c: 29: TimerState = TIMER_500US;
  7175  03DF  01DD               	clrf	_TimerState^(0+128)	;volatile
  7176  03E0                     i1l3769:	
  7177                           
  7178                           ;Timer.c: 50: if(ADIE==RA5){
  7179  03E0  0020               	movlb	0	; select bank0
  7180  03E1  1E8C               	btfss	12,5	;volatile
  7181  03E2  2BE5               	goto	u276_20
  7182  03E3  3001               	movlw	1
  7183  03E4  2BE6               	goto	u276_22
  7184  03E5                     u276_20:	
  7185  03E5  3000               	movlw	0
  7186  03E6                     u276_22:	
  7187  03E6  00F0               	movwf	??_timer1_interrupt
  7188  03E7  0021               	movlb	1	; select bank1
  7189  03E8  1F11               	btfss	17,6	;volatile
  7190  03E9  2BEC               	goto	u277_20
  7191  03EA  3001               	movlw	1
  7192  03EB  2BED               	goto	u277_22
  7193  03EC                     u277_20:	
  7194  03EC  3000               	movlw	0
  7195  03ED                     u277_22:	
  7196  03ED  0670               	xorwf	??_timer1_interrupt,w
  7197  03EE  1903               	btfsc	3,2
  7198                           
  7199                           ;Timer.c: 51: Timer.Switch=1;
  7200  03EF  143E               	bsf	(_Timer^(0+128)+6),0	;volatile
  7201                           
  7202                           ;Timer.c: 52: }
  7203                           ;Timer.c: 53: TMR1 = 0xFE0B;
  7204  03F0  243C  3183         	fcall	PL116	;call to abstracted procedure
  7205                           
  7206                           ;Timer.c: 54: RxTimer++;
  7207  03F2  0021               	movlb	1	; select bank1
  7208  03F3  0AD4               	incf	_RxTimer^(0+128),f	;volatile
  7209  03F4  1903               	skipnz
  7210  03F5  0AD5               	incf	(_RxTimer+1)^(0+128),f	;volatile
  7211                           
  7212                           ;Timer.c: 55: if (RxTimer == 2400) {
  7213  03F6  3060               	movlw	96
  7214  03F7  0654               	xorwf	_RxTimer^(0+128),w	;volatile
  7215  03F8  3009               	movlw	9
  7216  03F9  1903               	skipnz
  7217  03FA  0655               	xorwf	(_RxTimer+1)^(0+128),w	;volatile
  7218  03FB  1D03               	btfss	3,2
  7219  03FC  2C02               	goto	i1l3781
  7220                           
  7221                           ;Timer.c: 56: RxTimer = 2400 + 1;
  7222  03FD  3061               	movlw	97
  7223  03FE  00D4               	movwf	_RxTimer^(0+128)	;volatile
  7224  03FF  3009               	movlw	9
  7225  0400  00D5               	movwf	(_RxTimer^(0+128)+1)	;volatile
  7226                           
  7227                           ;Timer.c: 57: DMX_Flags.RxTimeout = 1;
  7228  0401  1576               	bsf	_DMX_Flags,2	;volatile
  7229  0402                     i1l3781:	
  7230                           
  7231                           ;Timer.c: 58: }
  7232                           ;Timer.c: 60: Timer.MS_Count++;
  7233  0402  0AB9               	incf	(_Timer^(0+128)+1),f	;volatile
  7234  0403  1903               	skipnz
  7235  0404  0ABA               	incf	((_Timer+1)^(0+128)+1),f	;volatile
  7236                           
  7237                           ;Timer.c: 61: Timer.MS = 1;
  7238  0405  1438               	bsf	_Timer^(0+128),0	;volatile
  7239                           
  7240                           ;Timer.c: 62: if (Timer.MS_Count == 1000)
  7241  0406  30E8               	movlw	232
  7242  0407  0639               	xorwf	(_Timer^(0+128)+1),w	;volatile
  7243  0408  3003               	movlw	3
  7244  0409  1903               	skipnz
  7245  040A  063A               	xorwf	((_Timer+1)^(0+128)+1),w	;volatile
  7246  040B  1D03               	btfss	3,2
  7247  040C  0008               	return
  7248                           
  7249                           ;Timer.c: 63: {
  7250                           ;Timer.c: 80: Timer.MS_Count = 0;
  7251  040D  01B9               	clrf	(_Timer^(0+128)+1)	;volatile
  7252  040E  01BA               	clrf	((_Timer+1)^(0+128)+1)	;volatile
  7253                           
  7254                           ;Timer.c: 81: Timer.SEC_Count++;
  7255  040F  0ABB               	incf	(_Timer^(0+128)+3),f	;volatile
  7256                           
  7257                           ;Timer.c: 82: Timer.SEC = 1;
  7258  0410  14B8               	bsf	_Timer^(0+128),1	;volatile
  7259                           
  7260                           ;Timer.c: 83: if (Timer.SEC_Count == 60)
  7261  0411  303C               	movlw	60
  7262  0412  063B               	xorwf	(_Timer^(0+128)+3),w	;volatile
  7263  0413  1D03               	btfss	3,2
  7264  0414  0008               	return
  7265                           
  7266                           ;Timer.c: 84: {
  7267                           ;Timer.c: 85: Timer.SEC_Count = 0;
  7268  0415  01BB               	clrf	(_Timer^(0+128)+3)	;volatile
  7269                           
  7270                           ;Timer.c: 86: Timer.MIN_Count++;
  7271  0416  0ABC               	incf	(_Timer^(0+128)+4),f	;volatile
  7272                           
  7273                           ;Timer.c: 87: Timer.MIN = 1;
  7274  0417  1538               	bsf	_Timer^(0+128),2	;volatile
  7275                           
  7276                           ;Timer.c: 89: if (Timer.MIN_Count == 60)
  7277  0418  303C               	movlw	60
  7278  0419  063C               	xorwf	(_Timer^(0+128)+4),w	;volatile
  7279  041A  1D03               	btfss	3,2
  7280  041B  0008               	return
  7281                           
  7282                           ;Timer.c: 90: {
  7283                           ;Timer.c: 91: Timer.MIN_Count = 0;
  7284  041C  01BC               	clrf	(_Timer^(0+128)+4)	;volatile
  7285                           
  7286                           ;Timer.c: 92: Timer.HR_Count++;
  7287  041D  0ABD               	incf	(_Timer^(0+128)+5),f	;volatile
  7288                           
  7289                           ;Timer.c: 93: Timer.HR = 1;
  7290  041E  15B8               	bsf	_Timer^(0+128),3	;volatile
  7291  041F  0008               	return
  7292  0420                     i1l875:	
  7293                           ;Timer.c: 105: case TIMER_BREAK:
  7294                           
  7295                           
  7296                           ;Timer.c: 106: LATC4 = 1;
  7297  0420  0022               	movlb	2	; select bank2
  7298  0421  160E               	bsf	14,4	;volatile
  7299                           
  7300                           ;Timer.c: 107: TMR1 = 0xFFF5;
  7301                           
  7302                           ;Timer.c: 108: TimerState = TX_TIMER_MAB;
  7303                           
  7304                           ;Timer.c: 109: break;
  7305  0422  2DA2               	ljmp	PL48	;call to abstracted procedure
  7306  0423                     i1l876:	
  7307                           ;Timer.c: 111: case TX_TIMER_MAB:
  7308                           
  7309                           
  7310                           ;Timer.c: 112: TXEN = 1;
  7311  0423  0023               	movlb	3	; select bank3
  7312  0424  169E               	bsf	30,5	;volatile
  7313                           
  7314                           ;Timer.c: 113: TXIE = 1;
  7315  0425  0021               	movlb	1	; select bank1
  7316  0426  1611               	bsf	17,4	;volatile
  7317                           
  7318                           ;Timer.c: 114: TMR1 = 0xFCDF;
  7319  0427  30FC               	movlw	252
  7320  0428  0020               	movlb	0	; select bank0
  7321  0429  0097               	movwf	23	;volatile
  7322  042A  30DF               	movlw	223
  7323  042B  0096               	movwf	22	;volatile
  7324                           
  7325                           ;Timer.c: 115: TimerState = TIMER_500US;
  7326  042C  0021               	movlb	1	; select bank1
  7327  042D  01DD               	clrf	_TimerState^(0+128)	;volatile
  7328                           
  7329                           ;Timer.c: 116: break;
  7330  042E  0008               	return
  7331  042F                     i1l3813:	
  7332  042F  0021               	movlb	1	; select bank1
  7333  0430  085D               	movf	_TimerState^(0+128),w	;volatile
  7334                           
  7335                           ; Switch size 1, requested type "space"
  7336                           ; Number of cases is 3, Range of values is 0 to 2
  7337                           ; switch strategies available:
  7338                           ; Name         Instructions Cycles
  7339                           ; simple_byte           10     6 (average)
  7340                           ; direct_byte           12     6 (fixed)
  7341                           ; jumptable            260     6 (fixed)
  7342                           ;	Chosen strategy is simple_byte
  7343  0431  3A00               	xorlw	0	; case 0
  7344  0432  1903               	skipnz
  7345  0433  2BE0               	goto	i1l3769
  7346  0434  3A01               	xorlw	1	; case 1
  7347  0435  1903               	skipnz
  7348  0436  2C20               	goto	i1l875
  7349  0437  3A03               	xorlw	3	; case 2
  7350  0438  1903               	skipnz
  7351  0439  2C23               	goto	i1l876
  7352  043A  2BDF               	goto	i1l3767
  7353  043B  0008               	return
  7354  043C                     __end_of_timer1_interrupt:	
  7355  043C                     PL116:	
  7356  043C  30FE               	movlw	254
  7357  043D  0020               	movlb	0	; select bank0
  7358  043E  0097               	movwf	23	;volatile
  7359  043F  300B               	movlw	11
  7360  0440  0096               	movwf	22	;volatile
  7361  0441  0008               	return
  7362  0442                     __end_ofPL116:	
  7363  0442                     __ptext8:	
  7364 ;; *************** function _RDM_GET_CC *****************
  7365 ;; Defined at:
  7366 ;;		line 16 in file "RDM_Read.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 1C/2
  7377 ;;		On exit  : 1F/1
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;Total ram usage:        2 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    4
  7387 ;; This function calls:
  7388 ;;		_RDM_TXSTART
  7389 ;; This function is called by:
  7390 ;;		_RDM_rx_loop
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _RDM_GET_CC
  7396  0442                     _RDM_GET_CC:	
  7397  0442                     l4279:	
  7398                           ;incstack = 0
  7399                           ; Regs used in _RDM_GET_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7400                           
  7401                           
  7402                           ;RDM_Read.c: 17: switch (RX_RDM_Data.PID){
  7403  0442  2C9F               	goto	l4313
  7404  0443                     l4281:	
  7405                           
  7406                           ;RDM_Read.c: 19: TX_RDM_Data.PDL=1;
  7407  0443  3001               	movlw	1
  7408  0444  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  7409                           
  7410                           ;RDM_Read.c: 20: PD.u8[40-1] =DMX_Flags.RDM_Identify_Device;
  7411  0445  0C77               	rrf	_DMX_Flags+1,w	;volatile
  7412  0446  0020               	movlb	0	; select bank0
  7413  0447  00B9               	movwf	??_RDM_GET_CC
  7414  0448  0CB9               	rrf	??_RDM_GET_CC,f
  7415  0449  0C39               	rrf	??_RDM_GET_CC,w
  7416  044A  3901               	andlw	1
  7417  044B  00BA               	movwf	??_RDM_GET_CC+1
  7418  044C  30A3               	movlw	163
  7419  044D  0086               	movwf	6
  7420  044E  3023               	movlw	35
  7421  044F  0087               	movwf	7
  7422  0450  083A               	movf	??_RDM_GET_CC+1,w
  7423  0451  0081               	movwf	1
  7424                           
  7425                           ;RDM_Read.c: 21: break;
  7426  0452  2CB5               	goto	l4315
  7427  0453                     l4285:	
  7428                           
  7429                           ;RDM_Read.c: 23: TX_RDM_Data.PDL=0x13;
  7430  0453  3013               	movlw	19
  7431  0454  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  7432                           
  7433                           ;RDM_Read.c: 24: PD.u16[20-1]=0x0100;
  7434  0455  0020               	movlb	0	; select bank0
  7435  0456  3001               	movlw	1
  7436  0457  01B9               	clrf	??_RDM_GET_CC
  7437  0458  00BA               	movwf	??_RDM_GET_CC+1
  7438  0459  30A2               	movlw	162
  7439  045A  0086               	movwf	6
  7440  045B  3023               	movlw	35
  7441  045C  0087               	movwf	7
  7442  045D  0839               	movf	??_RDM_GET_CC,w
  7443  045E  3FC0               	movwi [0]fsr1
  7444  045F  083A               	movf	??_RDM_GET_CC+1,w
  7445  0460  3FC1               	movwi [1]fsr1
  7446                           
  7447                           ;RDM_Read.c: 25: PD.u16[20-2]=0x0080;
  7448  0461  3080               	movlw	128
  7449  0462  00B9               	movwf	??_RDM_GET_CC
  7450  0463  30A0               	movlw	160
  7451  0464  25C8  3183         	fcall	PL94	;call to abstracted procedure
  7452                           
  7453                           ;RDM_Read.c: 26: PD.u16[20-3]=0x0004;
  7454  0466  3004               	movlw	4
  7455  0467  00B9               	movwf	??_RDM_GET_CC
  7456  0468  309E               	movlw	158
  7457  0469  25C8  3183         	fcall	PL94	;call to abstracted procedure
  7458                           
  7459                           ;RDM_Read.c: 27: PD_ID=&PD.u8[40-10];
  7460  046B  3023               	movlw	35
  7461  046C  0021               	movlb	1	; select bank1
  7462  046D  00CD               	movwf	(_PD_ID+1)^(0+128)
  7463  046E  309A               	movlw	154
  7464  046F  00CC               	movwf	_PD_ID^(0+128)
  7465                           
  7466                           ;RDM_Read.c: 28: *PD_ID=0x1003;
  7467  0470  0086               	movwf	6
  7468  0471  084D               	movf	(_PD_ID+1)^(0+128),w
  7469  0472  0087               	movwf	7
  7470  0473  3003               	movlw	3
  7471  0474  3FC0               	movwi [0]fsr1
  7472  0475  3010               	movlw	16
  7473  0476  3FC1               	movwi [1]fsr1
  7474  0477  3000               	movlw	0
  7475  0478  3FC2               	movwi [2]fsr1
  7476  0479  3FC3               	movwi [3]fsr1
  7477                           
  7478                           ;RDM_Read.c: 29: PD.u16[20-6]=0x04;
  7479  047A  3004               	movlw	4
  7480  047B  0020               	movlb	0	; select bank0
  7481  047C  25C1  3183         	fcall	PL74	;call to abstracted procedure
  7482  047E  315C               	addfsr 1,28
  7483  047F  0839               	movf	??_RDM_GET_CC,w
  7484  0480  3FC0               	movwi [0]fsr1
  7485  0481  083A               	movf	??_RDM_GET_CC+1,w
  7486  0482  3FC1               	movwi [1]fsr1
  7487                           
  7488                           ;RDM_Read.c: 30: PD.u16[20-7]=0x01;
  7489  0483  3001               	movlw	1
  7490  0484  25C1  3183         	fcall	PL74	;call to abstracted procedure
  7491  0486  315A               	addfsr 1,26
  7492  0487  0839               	movf	??_RDM_GET_CC,w
  7493  0488  3FC0               	movwi [0]fsr1
  7494  0489  083A               	movf	??_RDM_GET_CC+1,w
  7495                           
  7496                           ;RDM_Read.c: 31: PD.u16[20-8]=DMX_Address;
  7497  048A  25B4  3183         	fcall	PL62	;call to abstracted procedure
  7498  048C  3158               	addfsr 1,24
  7499  048D  25CF  3183         	fcall	PL108	;call to abstracted procedure
  7500                           
  7501                           ;RDM_Read.c: 32: PD.u16[20-9]=0;
  7502  048F  25B4  3183         	fcall	PL62	;call to abstracted procedure
  7503  0491  3000               	movlw	0
  7504  0492  3156               	addfsr 1,22
  7505  0493  3FC0               	movwi [0]fsr1
  7506                           
  7507                           ;RDM_Read.c: 33: PD.u8[40-19]=0;
  7508  0494  25B4  3183         	fcall	PL62	;call to abstracted procedure
  7509  0496  3155               	addfsr 1,21
  7510  0497  0181               	clrf	1
  7511                           
  7512                           ;RDM_Read.c: 34: break;
  7513  0498  2CB5               	goto	l4315
  7514  0499                     l4307:	
  7515                           
  7516                           ;RDM_Read.c: 36: TX_RDM_Data.PDL=2;
  7517                           
  7518                           ;RDM_Read.c: 38: PD.u16[20-1]=DMX_Address;
  7519  0499  25BA  3183         	fcall	PL70	;call to abstracted procedure
  7520  049B  25CF  3183         	fcall	PL108	;call to abstracted procedure
  7521  049D  3FC1               	movwi [1]fsr1
  7522                           
  7523                           ;RDM_Read.c: 39: break;
  7524  049E  2CB5               	goto	l4315
  7525  049F                     l4313:	
  7526                           
  7527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7528                           ; Switch size 1, requested type "space"
  7529                           ; Number of cases is 2, Range of values is 0 to 16
  7530                           ; switch strategies available:
  7531                           ; Name         Instructions Cycles
  7532                           ; simple_byte            7     4 (average)
  7533                           ; direct_byte           40     6 (fixed)
  7534                           ; jumptable            260     6 (fixed)
  7535                           ;	Chosen strategy is simple_byte
  7536  049F  0022               	movlb	2	; select bank2
  7537  04A0  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  7538  04A1  3A00               	xorlw	0	; case 0
  7539  04A2  1903               	skipnz
  7540  04A3  2CA8               	goto	l4997
  7541  04A4  3A10               	xorlw	16	; case 16
  7542  04A5  1903               	skipnz
  7543  04A6  2CB0               	goto	l4999
  7544  04A7  2CB5               	goto	l4315
  7545  04A8                     l4997:	
  7546                           
  7547                           ; Switch size 1, requested type "space"
  7548                           ; Number of cases is 2, Range of values is 96 to 240
  7549                           ; switch strategies available:
  7550                           ; Name         Instructions Cycles
  7551                           ; simple_byte            7     4 (average)
  7552                           ; jumptable            263     9 (fixed)
  7553                           ;	Chosen strategy is simple_byte
  7554  04A8  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7555  04A9  3A60               	xorlw	96	; case 96
  7556  04AA  1903               	skipnz
  7557  04AB  2C53               	goto	l4285
  7558  04AC  3A90               	xorlw	144	; case 240
  7559  04AD  1903               	skipnz
  7560  04AE  2C99               	goto	l4307
  7561  04AF  2CB5               	goto	l4315
  7562  04B0                     l4999:	
  7563                           
  7564                           ; Switch size 1, requested type "space"
  7565                           ; Number of cases is 1, Range of values is 0 to 0
  7566                           ; switch strategies available:
  7567                           ; Name         Instructions Cycles
  7568                           ; simple_byte            4     3 (average)
  7569                           ; direct_byte            8     6 (fixed)
  7570                           ; jumptable            260     6 (fixed)
  7571                           ;	Chosen strategy is simple_byte
  7572  04B0  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7573  04B1  3A00               	xorlw	0	; case 0
  7574  04B2  1903               	skipnz
  7575  04B3  2C43               	goto	l4281
  7576  04B4  2CB5               	goto	l4315
  7577  04B5                     l4315:	
  7578                           
  7579                           ;RDM_Read.c: 41: RDM_TXSTART();
  7580  04B5  2D23               	ljmp	l2903
  7581  04B6                     __end_of_RDM_GET_CC:	
  7582  04B6                     __ptext4:	
  7583 ;; *************** function _RDM_discovery_CC *****************
  7584 ;; Defined at:
  7585 ;;		line 60 in file "RDM_Read.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 1C/2
  7596 ;;		On exit  : 1C/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;Total ram usage:        4 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    4
  7606 ;; This function calls:
  7607 ;;		_RDM_TXSTART
  7608 ;; This function is called by:
  7609 ;;		_RDM_rx_loop
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _RDM_discovery_CC
  7615  04B6                     _RDM_discovery_CC:	
  7616  04B6                     l4213:	
  7617                           ;incstack = 0
  7618                           ; Regs used in _RDM_discovery_CC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7619                           
  7620                           
  7621                           ;RDM_Read.c: 61: switch (RX_RDM_Data.PID) {
  7622  04B6  2D11               	goto	l4271
  7623  04B7                     l1085:	
  7624                           ;RDM_Read.c: 62: case 0x0001:
  7625                           
  7626                           
  7627                           ;RDM_Read.c: 63: if (!DMX_Flags.RDMmute) {
  7628  04B7  1977               	btfsc	_DMX_Flags+1,2	;volatile
  7629  04B8  0008               	return
  7630                           
  7631                           ;RDM_Read.c: 64: DMX_Flags.RDMcheckUID_flag = 1;
  7632  04B9  0877               	movf	_DMX_Flags+1,w	;volatile
  7633  04BA  39FC               	andlw	-4
  7634  04BB  3801               	iorlw	1
  7635  04BC  00F7               	movwf	_DMX_Flags+1	;volatile
  7636                           
  7637                           ;RDM_Read.c: 65: PD_Manu = &PD.u8[100-2];
  7638  04BD  3023               	movlw	35
  7639  04BE  0021               	movlb	1	; select bank1
  7640  04BF  00CF               	movwf	(_PD_Manu+1)^(0+128)
  7641  04C0  30DE               	movlw	222
  7642  04C1  00CE               	movwf	_PD_Manu^(0+128)
  7643                           
  7644                           ;RDM_Read.c: 66: PD_ID = &PD.u8[100-6];
  7645  04C2  3023               	movlw	35
  7646  04C3  00CD               	movwf	(_PD_ID+1)^(0+128)
  7647  04C4  30DA               	movlw	218
  7648                           
  7649                           ;RDM_Read.c: 67: if (*PD_Manu < 0x08BA) {
  7650  04C5  2595  3183         	fcall	PL34	;call to abstracted procedure
  7651  04C7  30BA               	movlw	186
  7652  04C8  1903               	skipnz
  7653  04C9  0239               	subwf	??_RDM_discovery_CC,w
  7654  04CA  1803               	skipnc
  7655  04CB  2CD9               	goto	l4231
  7656                           
  7657                           ;RDM_Read.c: 68: DMX_Flags.RDMcheckUID_flag++;
  7658                           
  7659                           ;RDM_Read.c: 69: if (*PD_Manu == 0x08BA && *PD_ID > 0x12345678) {
  7660  04CC  2571  3183         	fcall	PL14	;call to abstracted procedure
  7661  04CE  1D03               	btfss	3,2
  7662  04CF  2CD9               	goto	l4231
  7663  04D0  25AB  3183         	fcall	PL54	;call to abstracted procedure
  7664  04D2  3079               	movlw	121
  7665  04D3  2587  3183         	fcall	PL32	;call to abstracted procedure
  7666  04D5  1C03               	btfss	3,0
  7667  04D6  2CD9               	goto	l4231
  7668                           
  7669                           ;RDM_Read.c: 70: DMX_Flags.RDMcheckUID_flag = 0;
  7670  04D7  30FC               	movlw	-4
  7671  04D8  05F7               	andwf	_DMX_Flags+1,f	;volatile
  7672  04D9                     l4231:	
  7673                           
  7674                           ;RDM_Read.c: 71: }
  7675                           ;RDM_Read.c: 72: }
  7676                           ;RDM_Read.c: 73: PD_Manu = &PD.u8[100-8];
  7677  04D9  3023               	movlw	35
  7678  04DA  0021               	movlb	1	; select bank1
  7679  04DB  00CF               	movwf	(_PD_Manu+1)^(0+128)
  7680  04DC  30D8               	movlw	216
  7681  04DD  00CE               	movwf	_PD_Manu^(0+128)
  7682                           
  7683                           ;RDM_Read.c: 74: PD_ID = &PD.u8[100-12];
  7684  04DE  3023               	movlw	35
  7685  04DF  00CD               	movwf	(_PD_ID+1)^(0+128)
  7686  04E0  30D4               	movlw	212
  7687                           
  7688                           ;RDM_Read.c: 75: if (*PD_Manu > 0x08BA) {
  7689  04E1  2595  3183         	fcall	PL34	;call to abstracted procedure
  7690  04E3  30BB               	movlw	187
  7691  04E4  1903               	skipnz
  7692  04E5  0239               	subwf	??_RDM_discovery_CC,w
  7693  04E6  1C03               	skipc
  7694  04E7  2CF5               	goto	l1089
  7695                           
  7696                           ;RDM_Read.c: 76: DMX_Flags.RDMcheckUID_flag++;
  7697                           
  7698                           ;RDM_Read.c: 77: if (*PD_Manu == 0x08BA && *PD_ID < 0x12345678) {
  7699  04E8  2571  3183         	fcall	PL14	;call to abstracted procedure
  7700  04EA  1D03               	btfss	3,2
  7701  04EB  2CF5               	goto	l1089
  7702  04EC  25AB  3183         	fcall	PL54	;call to abstracted procedure
  7703  04EE  3078               	movlw	120
  7704  04EF  2587  3183         	fcall	PL32	;call to abstracted procedure
  7705  04F1  1803               	btfsc	3,0
  7706  04F2  2CF5               	goto	l1089
  7707                           
  7708                           ;RDM_Read.c: 78: DMX_Flags.RDMcheckUID_flag = 0;
  7709  04F3  30FC               	movlw	-4
  7710  04F4  05F7               	andwf	_DMX_Flags+1,f	;volatile
  7711  04F5                     l1089:	
  7712                           
  7713                           ;RDM_Read.c: 79: }
  7714                           ;RDM_Read.c: 80: }
  7715                           ;RDM_Read.c: 81: if (DMX_Flags.RDMcheckUID_flag == 3) {
  7716  04F5  0877               	movf	_DMX_Flags+1,w	;volatile
  7717  04F6  3903               	andlw	3
  7718  04F7  3A03               	xorlw	3
  7719  04F8  1D03               	skipz
  7720  04F9  0008               	return
  7721                           
  7722                           ;RDM_Read.c: 82: LATC4 = 1;
  7723  04FA  0022               	movlb	2	; select bank2
  7724  04FB  160E               	bsf	14,4	;volatile
  7725                           
  7726                           ;RDM_Read.c: 83: TXREG = 0x00;
  7727  04FC  0023               	movlb	3	; select bank3
  7728  04FD  019A               	clrf	26	;volatile
  7729                           
  7730                           ;RDM_Read.c: 84: TxByte= &DISCOVERY_RDM_Data[24-1];
  7731  04FE  30DB               	movlw	(low ((_DISCOVERY_RDM_Data| (0+256)+23)))& (0+255)
  7732  04FF  0021               	movlb	1	; select bank1
  7733  0500  00E0               	movwf	_TxByte^(0+128)
  7734  0501  3002               	movlw	2
  7735                           
  7736                           ;RDM_Read.c: 85: TxCount = 0;
  7737  0502  01D0               	clrf	_TxCount^(0+128)
  7738  0503  01D1               	clrf	(_TxCount+1)^(0+128)
  7739                           
  7740                           ;RDM_Read.c: 86: TxState = TX_SART_DISCOVERY;
  7741  0504  00DF               	movwf	_TxState^(0+128)	;volatile
  7742                           
  7743                           ;RDM_Read.c: 88: LATC3 = 1;
  7744  0505  0022               	movlb	2	; select bank2
  7745  0506  158E               	bsf	14,3	;volatile
  7746                           
  7747                           ;RDM_Read.c: 89: TMR1 = 0xFFF5;
  7748                           
  7749                           ;RDM_Read.c: 96: TimerState = TX_TIMER_MAB;
  7750  0507  2DA2               	ljmp	PL48	;call to abstracted procedure
  7751  0508                     l1093:	
  7752                           ;RDM_Read.c: 100: case 0x0002:
  7753                           
  7754                           
  7755                           ;RDM_Read.c: 101: DMX_Flags.RDMmute = 1;
  7756  0508  1577               	bsf	_DMX_Flags+1,2	;volatile
  7757  0509                     L2:	
  7758                           
  7759                           ;RDM_Read.c: 102: TX_RDM_Data.PDL=2;
  7760                           
  7761                           ;RDM_Read.c: 103: PD.u16[20-1] = 0;
  7762  0509  25BA  3183         	fcall	PL70	;call to abstracted procedure
  7763  050B  3000               	movlw	0
  7764  050C  3FC0               	movwi [0]fsr1
  7765  050D  3FC1               	movwi [1]fsr1
  7766                           
  7767                           ;RDM_Read.c: 104: RDM_TXSTART();
  7768  050E  2D23               	ljmp	l2903
  7769  050F                     l1094:	
  7770                           ;RDM_Read.c: 106: case 0x0003:
  7771                           
  7772                           ;RDM_Read.c: 105: break;
  7773                           
  7774                           
  7775                           ;RDM_Read.c: 107: DMX_Flags.RDMmute = 0;
  7776  050F  1177               	bcf	_DMX_Flags+1,2	;volatile
  7777  0510  2D09               	goto	L2
  7778  0511                     l4271:	
  7779                           ;RDM_Read.c: 108: TX_RDM_Data.PDL=2;
  7780                           
  7781                           
  7782                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7783                           ; Switch size 1, requested type "space"
  7784                           ; Number of cases is 1, Range of values is 0 to 0
  7785                           ; switch strategies available:
  7786                           ; Name         Instructions Cycles
  7787                           ; simple_byte            4     3 (average)
  7788                           ; direct_byte            8     6 (fixed)
  7789                           ; jumptable            260     6 (fixed)
  7790                           ;	Chosen strategy is simple_byte
  7791  0511  0022               	movlb	2	; select bank2
  7792  0512  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  7793  0513  3A00               	xorlw	0	; case 0
  7794  0514  1903               	skipnz
  7795  0515  2D17               	goto	l4991
  7796  0516  2D22               	goto	l1096
  7797  0517                     l4991:	
  7798                           
  7799                           ; Switch size 1, requested type "space"
  7800                           ; Number of cases is 3, Range of values is 1 to 3
  7801                           ; switch strategies available:
  7802                           ; Name         Instructions Cycles
  7803                           ; simple_byte           10     6 (average)
  7804                           ; direct_byte           15     9 (fixed)
  7805                           ; jumptable            263     9 (fixed)
  7806                           ;	Chosen strategy is simple_byte
  7807  0517  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7808  0518  3A01               	xorlw	1	; case 1
  7809  0519  1903               	skipnz
  7810  051A  2CB7               	goto	l1085
  7811  051B  3A03               	xorlw	3	; case 2
  7812  051C  1903               	skipnz
  7813  051D  2D08               	goto	l1093
  7814  051E  3A01               	xorlw	1	; case 3
  7815  051F  1903               	skipnz
  7816  0520  2D0F               	goto	l1094
  7817  0521  2D22               	goto	l1096
  7818  0522                     l1096:	
  7819  0522  0008               	return
  7820  0523                     __end_of_RDM_discovery_CC:	
  7821  0523                     __ptext9:	
  7822 ;; *************** function _RDM_TXSTART *****************
  7823 ;; Defined at:
  7824 ;;		line 117 in file "RDM_Read.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;		None
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      void 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 1C/2
  7835 ;;		On exit  : 1F/1
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;Total ram usage:        1 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    3
  7845 ;; This function calls:
  7846 ;;		_RDM_get_checkSum
  7847 ;;		_RDM_tx_TimerBreak
  7848 ;;		_TX_RDM_Response_Set
  7849 ;; This function is called by:
  7850 ;;		_RDM_GET_CC
  7851 ;;		_RDM_SET_CC
  7852 ;;		_RDM_discovery_CC
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _RDM_TXSTART
  7858  0523                     _RDM_TXSTART:	
  7859  0523                     l2903:	
  7860                           ;incstack = 0
  7861                           ; Regs used in _RDM_TXSTART: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7862                           
  7863                           
  7864                           ;RDM_Read.c: 118: TXREG = 0xCC;
  7865  0523  30CC               	movlw	204
  7866  0524  0023               	movlb	3	; select bank3
  7867  0525  009A               	movwf	26	;volatile
  7868                           
  7869                           ;RDM_Read.c: 119: TX_RDM_Response_Set();
  7870  0526  2543               	fcall	_TX_RDM_Response_Set
  7871                           
  7872                           ;RDM_Read.c: 120: TX_RDM_Data.CS=RDM_get_checkSum(TX_RDM_Data,40);
  7873  0527  304C               	movlw	low _TX_RDM_Data
  7874  0528  0086               	movwf	6
  7875  0529  3001               	movlw	high _TX_RDM_Data
  7876  052A  3183  23AD  3183   	fcall	PL80	;call to abstracted procedure
  7877  052D  00F4               	movwf	??_RDM_TXSTART
  7878  052E                     u1580:	
  7879  052E  0016               	moviw fsr1++
  7880  052F  001A               	movwi fsr0++
  7881  0530  0BF4               	decfsz	??_RDM_TXSTART,f
  7882  0531  2D2E               	goto	u1580
  7883  0532  3028               	movlw	40
  7884  0533  0020               	movlb	0	; select bank0
  7885  0534  00B8               	movwf	RDM_get_checkSum@len
  7886  0535  3182  22EE  3183   	fcall	_RDM_get_checkSum
  7887  0538  0821               	movf	?_RDM_get_checkSum+1,w
  7888  0539  0022               	movlb	2	; select bank2
  7889  053A  00CD               	movwf	(_TX_RDM_Data+1)^(0+256)	;volatile
  7890  053B  0020               	movlb	0	; select bank0
  7891  053C  0820               	movf	?_RDM_get_checkSum,w
  7892  053D  0022               	movlb	2	; select bank2
  7893  053E  00CC               	movwf	_TX_RDM_Data^(0+256)	;volatile
  7894                           
  7895                           ;RDM_Read.c: 121: TxState = TX_START;
  7896  053F  3001               	movlw	1
  7897  0540  0021               	movlb	1	; select bank1
  7898  0541  00DF               	movwf	_TxState^(0+128)	;volatile
  7899                           
  7900                           ;RDM_Read.c: 122: RDM_tx_TimerBreak();
  7901  0542  2D62               	ljmp	l2839
  7902  0543                     __end_of_RDM_TXSTART:	
  7903  0543                     __ptext10:	
  7904 ;; *************** function _TX_RDM_Response_Set *****************
  7905 ;; Defined at:
  7906 ;;		line 125 in file "RDM_Read.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7915 ;; Tracked objects:
  7916 ;;		On entry : 1F/3
  7917 ;;		On exit  : 1F/2
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;Total ram usage:        0 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    2
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_RDM_TXSTART
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _TX_RDM_Response_Set
  7936  0543                     _TX_RDM_Response_Set:	
  7937                           
  7938                           ;RDM_Read.c: 126: TX_RDM_Data.DUID.ID=RX_RDM_Data.SUID.ID;
  7939                           
  7940                           ;incstack = 0
  7941                           ; Regs used in _TX_RDM_Response_Set: [wreg+fsr1l+fsr1h+status,2+status,0]
  7942  0543  302B               	movlw	((low (_RX_RDM_Data| (0+256)))& (0+255)+11)
  7943  0544  0086               	movwf	6
  7944  0545  3001               	movlw	1	; select bank2/3
  7945  0546  0087               	movwf	7
  7946  0547  3F40               	moviw [0]fsr1
  7947  0548  0022               	movlb	2	; select bank2
  7948  0549  00DD               	movwf	(_TX_RDM_Data^(0+256)+17)	;volatile
  7949  054A  3F41               	moviw [1]fsr1
  7950  054B  00DE               	movwf	((_TX_RDM_Data+1)^(0+256)+17)	;volatile
  7951  054C  3F42               	moviw [2]fsr1
  7952  054D  00DF               	movwf	((_TX_RDM_Data+2)^(0+256)+17)	;volatile
  7953  054E  3F43               	moviw [3]fsr1
  7954  054F  00E0               	movwf	((_TX_RDM_Data+3)^(0+256)+17)	;volatile
  7955                           
  7956                           ;RDM_Read.c: 127: TX_RDM_Data.DUID.M=RX_RDM_Data.SUID.M;
  7957  0550  0830               	movf	((_RX_RDM_Data+1)^(0+256)+15),w	;volatile
  7958  0551  00E2               	movwf	((_TX_RDM_Data+1)^(0+256)+21)	;volatile
  7959  0552  082F               	movf	(_RX_RDM_Data^(0+256)+15),w	;volatile
  7960  0553  00E1               	movwf	(_TX_RDM_Data^(0+256)+21)	;volatile
  7961                           
  7962                           ;RDM_Read.c: 128: TX_RDM_Data.TN=RX_RDM_Data.TN;
  7963  0554  082A               	movf	(_RX_RDM_Data^(0+256)+10),w	;volatile
  7964  0555  00D6               	movwf	(_TX_RDM_Data^(0+256)+10)	;volatile
  7965                           
  7966                           ;RDM_Read.c: 129: TX_RDM_Data.CC=RX_RDM_Data.CC+1;
  7967  0556  0825               	movf	(_RX_RDM_Data^(0+256)+5),w	;volatile
  7968  0557  3E01               	addlw	1
  7969  0558  00D1               	movwf	(_TX_RDM_Data^(0+256)+5)	;volatile
  7970                           
  7971                           ;RDM_Read.c: 130: TX_RDM_Data.PID=RX_RDM_Data.PID;
  7972  0559  0824               	movf	((_RX_RDM_Data+1)^(0+256)+3),w	;volatile
  7973  055A  00D0               	movwf	((_TX_RDM_Data+1)^(0+256)+3)	;volatile
  7974  055B  0823               	movf	(_RX_RDM_Data^(0+256)+3),w	;volatile
  7975  055C  00CF               	movwf	(_TX_RDM_Data^(0+256)+3)	;volatile
  7976                           
  7977                           ;RDM_Read.c: 131: TX_RDM_Data.ML=24+TX_RDM_Data.PDL;
  7978  055D  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  7979  055E  3E18               	addlw	24
  7980  055F  00E3               	movwf	(_TX_RDM_Data^(0+256)+23)	;volatile
  7981                           
  7982                           ;RDM_Read.c: 132: TX_RDM_Data.PORT=0x00;
  7983  0560  01D5               	clrf	(_TX_RDM_Data^(0+256)+9)	;volatile
  7984  0561  0008               	return
  7985  0562                     __end_of_TX_RDM_Response_Set:	
  7986  0562                     __ptext11:	
  7987 ;; *************** function _RDM_tx_TimerBreak *****************
  7988 ;; Defined at:
  7989 ;;		line 193 in file "RDM.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;		None
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		wreg
  7998 ;; Tracked objects:
  7999 ;;		On entry : 1F/1
  8000 ;;		On exit  : 1F/1
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;Total ram usage:        0 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    2
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_RDM_TXSTART
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           
  8018                           ;psect for function _RDM_tx_TimerBreak
  8019  0562                     _RDM_tx_TimerBreak:	
  8020  0562                     l2839:	
  8021                           ;incstack = 0
  8022                           ; Regs used in _RDM_tx_TimerBreak: [wreg]
  8023                           
  8024                           
  8025                           ;RDM.c: 194: TMR1 = 0xFF0B;
  8026  0562  30FF               	movlw	255
  8027  0563  0020               	movlb	0	; select bank0
  8028  0564  0097               	movwf	23	;volatile
  8029  0565  300B               	movlw	11
  8030  0566  0096               	movwf	22	;volatile
  8031                           
  8032                           ;RDM.c: 195: TimerState = TIMER_BREAK;
  8033  0567  3001               	movlw	1
  8034  0568  0021               	movlb	1	; select bank1
  8035  0569  00DD               	movwf	_TimerState^(0+128)	;volatile
  8036                           
  8037                           ;RDM.c: 196: LATC4 = 0;
  8038  056A  0022               	movlb	2	; select bank2
  8039  056B  120E               	bcf	14,4	;volatile
  8040                           
  8041                           ;RDM.c: 197: LATC3 = 1;
  8042  056C  158E               	bsf	14,3	;volatile
  8043                           
  8044                           ;RDM.c: 198: TX_PD_Flag=1;
  8045  056D  0021               	movlb	1	; select bank1
  8046  056E  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  8047  056F  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  8048  0570  0008               	return
  8049  0571                     __end_of_RDM_tx_TimerBreak:	
  8050  0571                     PL14:	
  8051  0571  0877               	movf	_DMX_Flags+1,w	;volatile
  8052  0572  3903               	andlw	3
  8053  0573  00B9               	movwf	??_RDM_discovery_CC
  8054  0574  0AB9               	incf	??_RDM_discovery_CC,f
  8055  0575  0877               	movf	_DMX_Flags+1,w	;volatile
  8056  0576  0639               	xorwf	??_RDM_discovery_CC,w
  8057  0577  39FC               	andlw	-4
  8058  0578  0639               	xorwf	??_RDM_discovery_CC,w
  8059  0579  00F7               	movwf	_DMX_Flags+1	;volatile
  8060  057A  0021               	movlb	1	; select bank1
  8061  057B  084E               	movf	_PD_Manu^(0+128),w
  8062  057C  0086               	movwf	6
  8063  057D  084F               	movf	(_PD_Manu+1)^(0+128),w
  8064  057E  0087               	movwf	7
  8065  057F  0016               	moviw fsr1++
  8066  0580  3ABA               	xorlw	186
  8067  0581  0020               	movlb	0	; select bank0
  8068  0582  00B9               	movwf	??_RDM_discovery_CC
  8069  0583  0016               	moviw fsr1++
  8070  0584  3A08               	xorlw	8
  8071  0585  04B9               	iorwf	??_RDM_discovery_CC,f
  8072  0586  0008               	return
  8073  0587                     __end_ofPL14:	
  8074  0587                     PL32:	
  8075  0587  0239               	subwf	??_RDM_discovery_CC,w
  8076  0588  3F41               	moviw [1]fsr1
  8077  0589  00B9               	movwf	??_RDM_discovery_CC
  8078  058A  3056               	movlw	86
  8079  058B  3B39               	subwfb	??_RDM_discovery_CC,w
  8080  058C  3F42               	moviw [2]fsr1
  8081  058D  00B9               	movwf	??_RDM_discovery_CC
  8082  058E  3034               	movlw	52
  8083  058F  3B39               	subwfb	??_RDM_discovery_CC,w
  8084  0590  3F43               	moviw [3]fsr1
  8085  0591  00B9               	movwf	??_RDM_discovery_CC
  8086  0592  3012               	movlw	18
  8087  0593  3B39               	subwfb	??_RDM_discovery_CC,w
  8088  0594  0008               	return
  8089  0595                     __end_ofPL32:	
  8090  0595                     PL34:	
  8091  0595  00CC               	movwf	_PD_ID^(0+128)
  8092  0596  084E               	movf	_PD_Manu^(0+128),w
  8093  0597  0086               	movwf	6
  8094  0598  084F               	movf	(_PD_Manu+1)^(0+128),w
  8095  0599  0087               	movwf	7
  8096  059A  3F40               	moviw [0]fsr1
  8097  059B  0020               	movlb	0	; select bank0
  8098  059C  00B9               	movwf	??_RDM_discovery_CC
  8099  059D  3F41               	moviw [1]fsr1
  8100  059E  00BA               	movwf	??_RDM_discovery_CC+1
  8101  059F  3008               	movlw	8
  8102  05A0  023A               	subwf	??_RDM_discovery_CC+1,w
  8103  05A1  0008               	return
  8104  05A2                     __end_ofPL34:	
  8105  05A2                     PL48:	
  8106  05A2  30FF               	movlw	255
  8107  05A3  0020               	movlb	0	; select bank0
  8108  05A4  0097               	movwf	23	;volatile
  8109  05A5  30F5               	movlw	245
  8110  05A6  0096               	movwf	22	;volatile
  8111  05A7  3002               	movlw	2
  8112  05A8  0021               	movlb	1	; select bank1
  8113  05A9  00DD               	movwf	_TimerState^(0+128)	;volatile
  8114  05AA  0008               	return
  8115  05AB                     __end_ofPL48:	
  8116  05AB                     PL54:	
  8117  05AB  0021               	movlb	1	; select bank1
  8118  05AC  084C               	movf	_PD_ID^(0+128),w
  8119  05AD  0086               	movwf	6
  8120  05AE  084D               	movf	(_PD_ID+1)^(0+128),w
  8121  05AF  0087               	movwf	7
  8122  05B0  3F40               	moviw [0]fsr1
  8123  05B1  0020               	movlb	0	; select bank0
  8124  05B2  00B9               	movwf	??_RDM_discovery_CC
  8125  05B3  0008               	return
  8126  05B4                     __end_ofPL54:	
  8127  05B4                     PL62:	
  8128  05B4  3FC1               	movwi [1]fsr1
  8129  05B5  307C               	movlw	124
  8130  05B6  0086               	movwf	6
  8131  05B7  3023               	movlw	35
  8132  05B8  0087               	movwf	7
  8133  05B9  0008               	return
  8134  05BA                     __end_ofPL62:	
  8135  05BA                     PL70:	
  8136  05BA  3002               	movlw	2
  8137  05BB  00CE               	movwf	(_TX_RDM_Data^(0+256)+2)	;volatile
  8138  05BC  30A2               	movlw	162
  8139  05BD  0086               	movwf	6
  8140  05BE  3023               	movlw	35
  8141  05BF  0087               	movwf	7
  8142  05C0  0008               	return
  8143  05C1                     __end_ofPL70:	
  8144  05C1                     PL74:	
  8145  05C1  00B9               	movwf	??_RDM_GET_CC
  8146  05C2  307C               	movlw	124
  8147  05C3  01BA               	clrf	??_RDM_GET_CC+1
  8148  05C4  0086               	movwf	6
  8149  05C5  3023               	movlw	35
  8150  05C6  0087               	movwf	7
  8151  05C7  0008               	return
  8152  05C8                     __end_ofPL74:	
  8153  05C8                     PL94:	
  8154  05C8  01BA               	clrf	??_RDM_GET_CC+1
  8155  05C9  0086               	movwf	6
  8156  05CA  0839               	movf	??_RDM_GET_CC,w
  8157  05CB  3FC0               	movwi [0]fsr1
  8158  05CC  083A               	movf	??_RDM_GET_CC+1,w
  8159  05CD  3FC1               	movwi [1]fsr1
  8160  05CE  0008               	return
  8161  05CF                     __end_ofPL94:	
  8162  05CF                     PL108:	
  8163  05CF  0021               	movlb	1	; select bank1
  8164  05D0  0858               	movf	_DMX_Address^(0+128),w
  8165  05D1  3FC0               	movwi [0]fsr1
  8166  05D2  0859               	movf	(_DMX_Address+1)^(0+128),w
  8167  05D3  0008               	return
  8168  05D4                     __end_ofPL108:	
  8169                           
  8170                           	psect	text31
  8171  06B2                     __ptext31:	
  8172 ;; *************** function _RDM_tx_interrupt *****************
  8173 ;; Defined at:
  8174 ;;		line 127 in file "RDM.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  2  144[None  ] int 
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8183 ;; Tracked objects:
  8184 ;;		On entry : 1E/0
  8185 ;;		On exit  : 1C/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;Total ram usage:        4 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; This function calls:
  8195 ;;		Nothing
  8196 ;; This function is called by:
  8197 ;;		_isr
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _RDM_tx_interrupt
  8203  06B2                     _RDM_tx_interrupt:	
  8204                           
  8205                           ;RDM.c: 128: if (TXIE && TXIF) {
  8206                           
  8207                           ;incstack = 0
  8208                           ; Regs used in _RDM_tx_interrupt: [wreg-fsr1h+status,2+status,0]
  8209  06B2  0021               	movlb	1	; select bank1
  8210  06B3  1E11               	btfss	17,4	;volatile
  8211  06B4  0008               	return
  8212  06B5  0020               	movlb	0	; select bank0
  8213  06B6  1E11               	btfss	17,4	;volatile
  8214  06B7  0008               	return
  8215  06B8  2F23               	goto	i1l3869
  8216  06B9                     i1l3821:	
  8217                           
  8218                           ;RDM.c: 136: if(TX_PD_Flag==1){
  8219  06B9  0348               	decf	_TX_PD_Flag^(0+128),w	;volatile
  8220  06BA  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  8221  06BB  1D03               	btfss	3,2
  8222  06BC  2EC3               	goto	i1l3827
  8223                           
  8224                           ;RDM.c: 137: TX_PD_Flag=0;
  8225  06BD  01C8               	clrf	_TX_PD_Flag^(0+128)	;volatile
  8226  06BE  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  8227                           
  8228                           ;RDM.c: 138: TXREG = 0xCC;
  8229  06BF  30CC               	movlw	204
  8230  06C0  0023               	movlb	3	; select bank3
  8231  06C1  009A               	movwf	26	;volatile
  8232                           
  8233                           ;RDM.c: 139: }else{
  8234  06C2  0008               	return
  8235  06C3                     i1l3827:	
  8236                           
  8237                           ;RDM.c: 140: TXREG = 0x01;
  8238  06C3  3001               	movlw	1
  8239  06C4  0023               	movlb	3	; select bank3
  8240  06C5  009A               	movwf	26	;volatile
  8241                           
  8242                           ;RDM.c: 141: TxByte = &TX_RDM_Data.value[23];
  8243  06C6  3063               	movlw	(low ((_TX_RDM_Data| (0+256)+23)))& (0+255)
  8244  06C7  0021               	movlb	1	; select bank1
  8245  06C8  00E0               	movwf	_TxByte^(0+128)
  8246  06C9  3003               	movlw	3
  8247                           
  8248                           ;RDM.c: 142: TxCount = 0;
  8249  06CA  01D0               	clrf	_TxCount^(0+128)
  8250  06CB  01D1               	clrf	(_TxCount+1)^(0+128)
  8251                           
  8252                           ;RDM.c: 143: TxState = TX_DATA;
  8253  06CC  00DF               	movwf	_TxState^(0+128)	;volatile
  8254  06CD  0008               	return
  8255  06CE                     i1l3833:	
  8256                           
  8257                           ;RDM.c: 147: TxState = TX_DISCOVERY;
  8258  06CE  01DF               	clrf	_TxState^(0+128)	;volatile
  8259                           
  8260                           ;RDM.c: 148: break;
  8261  06CF  0008               	return
  8262  06D0                     i1l3835:	
  8263                           
  8264                           ;RDM.c: 150: if (TxCount <= 24) {
  8265  06D0  3000               	movlw	0
  8266  06D1  0251               	subwf	(_TxCount+1)^(0+128),w
  8267  06D2  3019               	movlw	25
  8268  06D3  1903               	skipnz
  8269  06D4  0250               	subwf	_TxCount^(0+128),w
  8270  06D5  1803               	skipnc
  8271  06D6  2EDB               	goto	i1l713
  8272                           
  8273                           ;RDM.c: 151: TXREG = *TxByte;
  8274                           
  8275                           ;RDM.c: 152: TxByte--;
  8276                           
  8277                           ;RDM.c: 153: TxCount++;
  8278  06D7  272F               	fcall	PL44	;call to abstracted procedure
  8279  06D8  1903               	skipnz
  8280  06D9  0AD1               	incf	(_TxCount+1)^(0+128),f
  8281                           
  8282                           ;RDM.c: 154: }else{
  8283  06DA  0008               	return
  8284  06DB                     i1l713:	
  8285                           
  8286                           ;RDM.c: 156: LATC4 = 1;
  8287  06DB  0022               	movlb	2	; select bank2
  8288  06DC  160E               	bsf	14,4	;volatile
  8289                           
  8290                           ;RDM.c: 157: TXEN = 0;
  8291  06DD  0023               	movlb	3	; select bank3
  8292  06DE  129E               	bcf	30,5	;volatile
  8293                           
  8294                           ;RDM.c: 158: TXIE = 0;
  8295  06DF  0021               	movlb	1	; select bank1
  8296  06E0  1211               	bcf	17,4	;volatile
  8297                           
  8298                           ;RDM.c: 159: LATC3=0;
  8299  06E1  0022               	movlb	2	; select bank2
  8300  06E2  118E               	bcf	14,3	;volatile
  8301  06E3  0008               	return
  8302  06E4                     i1l3843:	
  8303                           
  8304                           ;RDM.c: 163: if (TxCount <= 24) {
  8305  06E4  3000               	movlw	0
  8306  06E5  0251               	subwf	(_TxCount+1)^(0+128),w
  8307  06E6  3019               	movlw	25
  8308  06E7  1903               	skipnz
  8309  06E8  0250               	subwf	_TxCount^(0+128),w
  8310  06E9  1803               	skipnc
  8311  06EA  2EDB               	goto	i1l713
  8312                           
  8313                           ;RDM.c: 165: TXREG = *TxByte;
  8314                           
  8315                           ;RDM.c: 166: TxByte--;
  8316                           
  8317                           ;RDM.c: 167: TxCount++;
  8318  06EB  272F  3186         	fcall	PL44	;call to abstracted procedure
  8319  06ED  1903               	skipnz
  8320  06EE  0AD1               	incf	(_TxCount+1)^(0+128),f
  8321                           
  8322                           ;RDM.c: 168: if(TxCount == 22 & TX_RDM_Data.PDL > 0 & TX_PD_Flag == 0){
  8323  06EF  3016               	movlw	22
  8324  06F0  0650               	xorwf	_TxCount^(0+128),w
  8325  06F1  0451               	iorwf	(_TxCount+1)^(0+128),w
  8326  06F2  1D03               	btfss	3,2
  8327  06F3  0008               	return
  8328  06F4  0022               	movlb	2	; select bank2
  8329  06F5  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8330  06F6  1903               	btfsc	3,2
  8331  06F7  0008               	return
  8332  06F8  0021               	movlb	1	; select bank1
  8333  06F9  0848               	movf	_TX_PD_Flag^(0+128),w	;volatile
  8334  06FA  0449               	iorwf	(_TX_PD_Flag+1)^(0+128),w	;volatile
  8335  06FB  1D03               	btfss	3,2
  8336  06FC  0008               	return
  8337                           
  8338                           ;RDM.c: 169: TxState = TX_RDM_PD;
  8339  06FD  3004               	movlw	4
  8340  06FE  00DF               	movwf	_TxState^(0+128)	;volatile
  8341                           
  8342                           ;RDM.c: 170: TX_PDCount = 40-1;
  8343  06FF  3027               	movlw	39
  8344  0700  00DE               	movwf	_TX_PDCount^(0+128)
  8345  0701  0008               	return
  8346  0702                     i1l3859:	
  8347                           
  8348                           ;RDM.c: 181: TXREG = PD.u8[TX_PDCount];
  8349  0702  085E               	movf	_TX_PDCount^(0+128),w
  8350  0703  273A  3186         	fcall	PL88	;call to abstracted procedure
  8351  0705  0801               	movf	1,w
  8352  0706  0023               	movlb	3	; select bank3
  8353  0707  009A               	movwf	26	;volatile
  8354                           
  8355                           ;RDM.c: 182: if (TX_PDCount == 40-TX_RDM_Data.PDL) {
  8356  0708  01F1               	clrf	??_RDM_tx_interrupt+1
  8357  0709  0022               	movlb	2	; select bank2
  8358  070A  084E               	movf	(_TX_RDM_Data^(0+256)+2),w	;volatile
  8359  070B  3C28               	sublw	40
  8360  070C  00F0               	movwf	??_RDM_tx_interrupt
  8361  070D  1C03               	skipc
  8362  070E  03F1               	decf	??_RDM_tx_interrupt+1,f
  8363  070F  0021               	movlb	1	; select bank1
  8364  0710  085E               	movf	_TX_PDCount^(0+128),w
  8365  0711  00F2               	movwf	??_RDM_tx_interrupt+2
  8366  0712  01F3               	clrf	??_RDM_tx_interrupt+3
  8367  0713  0871               	movf	??_RDM_tx_interrupt+1,w
  8368  0714  0673               	xorwf	??_RDM_tx_interrupt+3,w
  8369  0715  1D03               	skipz
  8370  0716  2F19               	goto	u291_25
  8371  0717  0870               	movf	??_RDM_tx_interrupt,w
  8372  0718  0672               	xorwf	??_RDM_tx_interrupt+2,w
  8373  0719                     u291_25:	
  8374  0719  1D03               	skipz
  8375  071A  2F21               	goto	i1l3865
  8376                           
  8377                           ;RDM.c: 183: TxState = TX_DATA;
  8378  071B  3003               	movlw	3
  8379  071C  00DF               	movwf	_TxState^(0+128)	;volatile
  8380                           
  8381                           ;RDM.c: 184: TX_PD_Flag = 1;
  8382  071D  3001               	movlw	1
  8383  071E  00C8               	movwf	_TX_PD_Flag^(0+128)	;volatile
  8384  071F  01C9               	clrf	(_TX_PD_Flag+1)^(0+128)	;volatile
  8385                           
  8386                           ;RDM.c: 185: }else{
  8387  0720  0008               	return
  8388  0721                     i1l3865:	
  8389                           
  8390                           ;RDM.c: 186: TX_PDCount--;
  8391  0721  03DE               	decf	_TX_PDCount^(0+128),f
  8392  0722  0008               	return
  8393  0723                     i1l3869:	
  8394  0723  0021               	movlb	1	; select bank1
  8395  0724  085F               	movf	_TxState^(0+128),w	;volatile
  8396                           
  8397                           ; Switch size 1, requested type "space"
  8398                           ; Number of cases is 5, Range of values is 0 to 4
  8399                           ; switch strategies available:
  8400                           ; Name         Instructions Cycles
  8401                           ; direct_byte           16     6 (fixed)
  8402                           ; simple_byte           16     9 (average)
  8403                           ; jumptable            260     6 (fixed)
  8404                           ;	Chosen strategy is direct_byte
  8405  0725  0084               	movwf	4
  8406  0726  3005               	movlw	5
  8407  0727  0204               	subwf	4,w
  8408  0728  1803               	skipnc
  8409  0729  0008               	return
  8410  072A  3187               	movlp	high i1S5001
  8411  072B  3504               	lslf	4,w
  8412  072C  3E58               	addlw	low i1S5001
  8413  072D  0082               	movwf	2
  8414  072E  0008               	return
  8415  072F                     __end_of_RDM_tx_interrupt:	
  8416  072F                     PL44:	
  8417  072F  0860               	movf	_TxByte^(0+128),w
  8418  0730  0086               	movwf	6
  8419  0731  3001               	movlw	1	; select bank2/3
  8420  0732  0087               	movwf	7
  8421  0733  0801               	movf	1,w
  8422  0734  0023               	movlb	3	; select bank3
  8423  0735  009A               	movwf	26	;volatile
  8424  0736  0021               	movlb	1	; select bank1
  8425  0737  03E0               	decf	_TxByte^(0+128),f
  8426  0738  0AD0               	incf	_TxCount^(0+128),f
  8427  0739  0008               	return
  8428  073A                     __end_ofPL44:	
  8429  073A                     PL88:	
  8430  073A  3E7C               	addlw	124
  8431  073B  0086               	movwf	6
  8432  073C  3023               	movlw	35
  8433  073D  0187               	clrf	7
  8434  073E  3D87               	addwfc	7,f
  8435  073F  0008               	return
  8436  0740                     __end_ofPL88:	
  8437                           
  8438                           	psect	swtext1
  8439  0758                     __pswtext1:	
  8440  0758                     i1S5001:	
  8441  0758  3186  2ED0         	ljmp	i1l3835
  8442  075A  3186  2EB9         	ljmp	i1l3821
  8443  075C  3186  2ECE         	ljmp	i1l3833
  8444  075E  3186  2EE4         	ljmp	i1l3843
  8445  0760  3187  2F02         	ljmp	i1l3859
  8446                           
  8447                           	psect	text32
  8448  05D4                     __ptext32:	
  8449 ;; *************** function _DMX_interrput *****************
  8450 ;; Defined at:
  8451 ;;		line 192 in file "DMX.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  RxDat           1    2[COMMON] volatile unsigned char 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  2  140[None  ] int 
  8458 ;; Registers used:
  8459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8460 ;; Tracked objects:
  8461 ;;		On entry : 1F/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;Total ram usage:        3 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; This function calls:
  8472 ;;		Nothing
  8473 ;; This function is called by:
  8474 ;;		_isr
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           
  8479                           ;psect for function _DMX_interrput
  8480  05D4                     _DMX_interrput:	
  8481                           
  8482                           ;DMX.c: 193: if (RCIE & RCIF) {
  8483                           
  8484                           ;incstack = 0
  8485                           ; Regs used in _DMX_interrput: [wreg-fsr1h+status,2+status,0]
  8486  05D4  3001               	movlw	1
  8487  05D5  0021               	movlb	1	; select bank1
  8488  05D6  1E91               	btfss	17,5	;volatile
  8489  05D7  3900               	andlw	0
  8490  05D8  0020               	movlb	0	; select bank0
  8491  05D9  1E91               	btfss	17,5	;volatile
  8492  05DA  3900               	andlw	0
  8493  05DB  1C09               	btfss	9,0
  8494  05DC  0008               	return
  8495                           
  8496                           ;DMX.c: 194: volatile char RxDat;
  8497                           ;DMX.c: 195: if (FERR)
  8498  05DD  0023               	movlb	3	; select bank3
  8499  05DE  1D1D               	btfss	29,2	;volatile
  8500  05DF  2E91               	goto	i1l3747
  8501                           
  8502                           ;DMX.c: 196: {
  8503                           ;DMX.c: 197: RxDat = RCREG;
  8504  05E0  0819               	movf	25,w	;volatile
  8505  05E1  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8506                           
  8507                           ;DMX.c: 198: DMX_Flags.RxBreak = 1;
  8508  05E2  14F6               	bsf	_DMX_Flags,1	;volatile
  8509                           
  8510                           ;DMX.c: 199: RxState = WAIT_FOR_START;
  8511  05E3  3001               	movlw	1
  8512  05E4  0021               	movlb	1	; select bank1
  8513  05E5  00E5               	movwf	_RxState^(0+128)	;volatile
  8514                           
  8515                           ;DMX.c: 200: RxTimer = 0;
  8516  05E6  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8517  05E7  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8518  05E8  2E91               	goto	i1l3747
  8519  05E9                     i1l3667:	
  8520                           
  8521                           ;DMX.c: 204: RxDat = RCREG;
  8522  05E9  0023               	movlb	3	; select bank3
  8523  05EA  0819               	movf	25,w	;volatile
  8524  05EB  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8525                           
  8526                           ;DMX.c: 205: break;
  8527  05EC  2E9C               	goto	i1l3749
  8528  05ED                     i1l413:	
  8529                           ;DMX.c: 206: case WAIT_FOR_START:
  8530                           
  8531                           
  8532                           ;DMX.c: 207: if (RCIF)
  8533  05ED  0020               	movlb	0	; select bank0
  8534  05EE  1E91               	btfss	17,5	;volatile
  8535  05EF  2E9C               	goto	i1l3749
  8536                           
  8537                           ;DMX.c: 208: {
  8538                           ;DMX.c: 209: RxDat = RCREG;
  8539  05F0  0023               	movlb	3	; select bank3
  8540  05F1  0819               	movf	25,w	;volatile
  8541  05F2  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8542  05F3  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8543  05F4  1D03               	btfss	3,2
  8544  05F5  2E02               	goto	i1l3677
  8545                           
  8546                           ;DMX.c: 212: RxState = RX_DMX_READ_DATA;
  8547  05F6  3002               	movlw	2
  8548  05F7  0021               	movlb	1	; select bank1
  8549  05F8  00E5               	movwf	_RxState^(0+128)	;volatile
  8550                           
  8551                           ;DMX.c: 213: RxDataPtr = &RxData[0];
  8552  05F9  30E7               	movlw	(low (_RxData| 0))& (0+255)
  8553  05FA  00E6               	movwf	_RxDataPtr^(0+128)
  8554                           
  8555                           ;DMX.c: 214: RxAddrCount = 1;
  8556  05FB  3001               	movlw	1
  8557  05FC  00D6               	movwf	_RxAddrCount^(0+128)	;volatile
  8558  05FD  01D7               	clrf	(_RxAddrCount+1)^(0+128)	;volatile
  8559                           
  8560                           ;DMX.c: 216: DMXPeriod = DMXPeriodConst;
  8561  05FE  0864               	movf	_DMXPeriodConst^(0+128),w	;volatile
  8562  05FF  00EF               	movwf	_DMXPeriod^(0+128)
  8563                           
  8564                           ;DMX.c: 217: DMXPeriodConst = 0;
  8565  0600  01E4               	clrf	_DMXPeriodConst^(0+128)	;volatile
  8566                           
  8567                           ;DMX.c: 218: } else if (RxDat == 0xCC) {
  8568  0601  2E9C               	goto	i1l3749
  8569  0602                     i1l3677:	
  8570  0602  30CC               	movlw	204
  8571  0603  0672               	xorwf	DMX_interrput@RxDat,w	;volatile
  8572  0604  1D03               	btfss	3,2
  8573  0605  2E0A               	goto	i1l3681
  8574                           
  8575                           ;DMX.c: 220: RxState = RX_RDM_READ_SubStartCode;
  8576  0606  3003               	movlw	3
  8577  0607  0021               	movlb	1	; select bank1
  8578  0608  00E5               	movwf	_RxState^(0+128)	;volatile
  8579                           
  8580                           ;DMX.c: 222: } else {
  8581  0609  2E9C               	goto	i1l3749
  8582  060A                     i1l3681:	
  8583                           
  8584                           ;DMX.c: 223: RxState = RX_WAIT_FOR_BREAK;
  8585  060A  0021               	movlb	1	; select bank1
  8586  060B  01E5               	clrf	_RxState^(0+128)	;volatile
  8587  060C  2E9C               	goto	i1l3749
  8588  060D                     i1l3683:	
  8589                           
  8590                           ;DMX.c: 228: RxDat = RCREG;
  8591  060D  0023               	movlb	3	; select bank3
  8592  060E  0819               	movf	25,w	;volatile
  8593  060F  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8594                           
  8595                           ;DMX.c: 229: if (RxAddrCount >= DMX_Address && (DMX_Address != 0))
  8596  0610  0021               	movlb	1	; select bank1
  8597  0611  0859               	movf	(_DMX_Address+1)^(0+128),w
  8598  0612  0257               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8599  0613  1D03               	skipz
  8600  0614  2E17               	goto	u263_25
  8601  0615  0858               	movf	_DMX_Address^(0+128),w
  8602  0616  0256               	subwf	_RxAddrCount^(0+128),w	;volatile
  8603  0617                     u263_25:	
  8604  0617  1C03               	skipc
  8605  0618  2E23               	goto	i1l3691
  8606  0619  0858               	movf	_DMX_Address^(0+128),w
  8607  061A  0459               	iorwf	(_DMX_Address+1)^(0+128),w
  8608  061B  1903               	btfsc	3,2
  8609  061C  2E23               	goto	i1l3691
  8610                           
  8611                           ;DMX.c: 230: {
  8612                           ;DMX.c: 231: *RxDataPtr = RxDat;
  8613  061D  0866               	movf	_RxDataPtr^(0+128),w
  8614  061E  0086               	movwf	6
  8615  061F  0187               	clrf	7
  8616  0620  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8617  0621  0081               	movwf	1
  8618                           
  8619                           ;DMX.c: 232: RxDataPtr++;
  8620  0622  0AE6               	incf	_RxDataPtr^(0+128),f
  8621  0623                     i1l3691:	
  8622                           
  8623                           ;DMX.c: 233: }
  8624                           ;DMX.c: 234: RxAddrCount++;
  8625  0623  0AD6               	incf	_RxAddrCount^(0+128),f	;volatile
  8626  0624  1903               	skipnz
  8627  0625  0AD7               	incf	(_RxAddrCount+1)^(0+128),f	;volatile
  8628                           
  8629                           ;DMX.c: 236: if (RxAddrCount >= (DMX_Address + 4) && DMX_Address != 0) {
  8630  0626  0858               	movf	_DMX_Address^(0+128),w
  8631  0627  3E04               	addlw	4
  8632  0628  00F0               	movwf	??_DMX_interrput
  8633  0629  3000               	movlw	0
  8634  062A  3D59               	addwfc	(_DMX_Address+1)^(0+128),w
  8635  062B  00F1               	movwf	??_DMX_interrput+1
  8636  062C  0257               	subwf	(_RxAddrCount+1)^(0+128),w	;volatile
  8637  062D  1D03               	skipz
  8638  062E  2E31               	goto	u265_25
  8639  062F  0870               	movf	??_DMX_interrput,w
  8640  0630  0256               	subwf	_RxAddrCount^(0+128),w	;volatile
  8641  0631                     u265_25:	
  8642  0631  1C03               	skipc
  8643  0632  2E9C               	goto	i1l3749
  8644  0633  0858               	movf	_DMX_Address^(0+128),w
  8645  0634  0459               	iorwf	(_DMX_Address+1)^(0+128),w
  8646  0635  1903               	btfsc	3,2
  8647  0636  2E9C               	goto	i1l3749
  8648                           
  8649                           ;DMX.c: 237: DMX_Flags.RxNew = 1;
  8650  0637  1476               	bsf	_DMX_Flags,0	;volatile
  8651                           
  8652                           ;DMX.c: 238: RxState = RX_WAIT_FOR_BREAK;
  8653                           
  8654                           ;DMX.c: 239: RxTimer = 0;
  8655                           
  8656                           ;DMX.c: 240: DMX_Flags.RxTimeout = 0;
  8657  0638  26AD  3185         	fcall	PL122	;call to abstracted procedure
  8658  063A  2E9C               	goto	i1l3749
  8659  063B                     i1l3703:	
  8660                           
  8661                           ;DMX.c: 244: RxDat = RCREG;
  8662  063B  0023               	movlb	3	; select bank3
  8663  063C  0819               	movf	25,w	;volatile
  8664  063D  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8665                           
  8666                           ;DMX.c: 245: if (RxDat == 0x01)
  8667  063E  0B72               	decfsz	DMX_interrput@RxDat,w	;volatile
  8668  063F  2E9C               	goto	i1l3749
  8669                           
  8670                           ;DMX.c: 246: {
  8671                           ;DMX.c: 247: RxState = RX_RDM_READ_DATA;
  8672  0640  3004               	movlw	4
  8673  0641  0021               	movlb	1	; select bank1
  8674  0642  00E5               	movwf	_RxState^(0+128)	;volatile
  8675                           
  8676                           ;DMX.c: 248: PackCount = 23;
  8677  0643  3017               	movlw	23
  8678  0644  00F8               	movwf	_PackCount	;volatile
  8679                           
  8680                           ;DMX.c: 249: PD_Flag = 0;
  8681  0645  01CA               	clrf	_PD_Flag^(0+128)	;volatile
  8682  0646  2E8D               	goto	L9
  8683  0647                     i1l3711:	
  8684                           
  8685                           ;DMX.c: 254: RxDat = RCREG;
  8686  0647  0023               	movlb	3	; select bank3
  8687  0648  0819               	movf	25,w	;volatile
  8688  0649  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8689                           
  8690                           ;DMX.c: 255: RX_RDM_Data.value[PackCount] = RxDat;
  8691  064A  0878               	movf	_PackCount,w
  8692  064B  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8693  064C  0086               	movwf	6
  8694  064D  3001               	movlw	1	; select bank2/3
  8695  064E  0087               	movwf	7
  8696  064F  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8697  0650  0081               	movwf	1
  8698                           
  8699                           ;DMX.c: 257: if (PackCount == 2 && RX_RDM_Data.value[PackCount] > 0 && PD_Flag == 0) {
  8700  0651  3002               	movlw	2
  8701  0652  0678               	xorwf	_PackCount,w	;volatile
  8702  0653  1D03               	btfss	3,2
  8703  0654  2E66               	goto	i1l3725
  8704  0655  0878               	movf	_PackCount,w
  8705  0656  3E20               	addlw	(low (_RX_RDM_Data| (0+256)))& (0+255)
  8706  0657  0086               	movwf	6
  8707  0658  0801               	movf	1,w
  8708  0659  1903               	btfsc	3,2
  8709  065A  2E66               	goto	i1l3725
  8710  065B  0021               	movlb	1	; select bank1
  8711  065C  084A               	movf	_PD_Flag^(0+128),w	;volatile
  8712  065D  044B               	iorwf	(_PD_Flag+1)^(0+128),w	;volatile
  8713  065E  1D03               	btfss	3,2
  8714  065F  2E66               	goto	i1l3725
  8715                           
  8716                           ;DMX.c: 258: RxState = RX_RDM_PD;
  8717  0660  3005               	movlw	5
  8718  0661  00E5               	movwf	_RxState^(0+128)	;volatile
  8719                           
  8720                           ;DMX.c: 259: PDCount = 100-1;
  8721  0662  3063               	movlw	99
  8722  0663  00F9               	movwf	_PDCount
  8723  0664                     i1l3723:	
  8724                           
  8725                           ;DMX.c: 260: PackCount--;
  8726  0664  03F8               	decf	_PackCount,f	;volatile
  8727                           
  8728                           ;DMX.c: 261: break;
  8729  0665  2E9C               	goto	i1l3749
  8730  0666                     i1l3725:	
  8731                           
  8732                           ;DMX.c: 262: }
  8733                           ;DMX.c: 263: if (PackCount == 0) {
  8734  0666  0878               	movf	_PackCount,w	;volatile
  8735  0667  1D03               	btfss	3,2
  8736  0668  2E64               	goto	i1l3723
  8737                           
  8738                           ;DMX.c: 264: DMX_Flags.RDMNew = 1;
  8739  0669  1776               	bsf	_DMX_Flags,6	;volatile
  8740                           
  8741                           ;DMX.c: 265: RxState = RX_WAIT_FOR_BREAK;
  8742  066A  0021               	movlb	1	; select bank1
  8743                           
  8744                           ;DMX.c: 266: RxTimer = 0;
  8745                           
  8746                           ;DMX.c: 267: DMX_Flags.RxTimeout = 0;
  8747  066B  26AD  3185         	fcall	PL122	;call to abstracted procedure
  8748  066D  2E64               	goto	i1l3723
  8749  066E                     i1l3735:	
  8750                           
  8751                           ;DMX.c: 273: RxDat = RCREG;
  8752  066E  0023               	movlb	3	; select bank3
  8753  066F  0819               	movf	25,w	;volatile
  8754  0670  00F2               	movwf	DMX_interrput@RxDat	;volatile
  8755                           
  8756                           ;DMX.c: 274: PD.u8[PDCount] = RxDat;
  8757  0671  0879               	movf	_PDCount,w
  8758  0672  3E7C               	addlw	124
  8759  0673  00F0               	movwf	??_DMX_interrput
  8760  0674  3023               	movlw	35
  8761  0675  01F1               	clrf	??_DMX_interrput+1
  8762  0676  3DF1               	addwfc	??_DMX_interrput+1,f
  8763  0677  0870               	movf	??_DMX_interrput,w
  8764  0678  0086               	movwf	6
  8765  0679  0871               	movf	??_DMX_interrput+1,w
  8766  067A  0087               	movwf	7
  8767  067B  0872               	movf	DMX_interrput@RxDat,w	;volatile
  8768  067C  0081               	movwf	1
  8769                           
  8770                           ;DMX.c: 275: if ((100 - RX_RDM_Data.PDL) == PDCount) {
  8771  067D  01F1               	clrf	??_DMX_interrput+1
  8772  067E  0022               	movlb	2	; select bank2
  8773  067F  0822               	movf	(_RX_RDM_Data^(0+256)+2),w	;volatile
  8774  0680  3C64               	sublw	100
  8775  0681  00F0               	movwf	??_DMX_interrput
  8776  0682  1C03               	skipc
  8777  0683  03F1               	decf	??_DMX_interrput+1,f
  8778  0684  0679               	xorwf	_PDCount,w
  8779  0685  0471               	iorwf	??_DMX_interrput+1,w
  8780  0686  1D03               	skipz
  8781  0687  2E8F               	goto	i1l3743
  8782                           
  8783                           ;DMX.c: 276: RxState = RX_RDM_READ_DATA;
  8784  0688  3004               	movlw	4
  8785  0689  0021               	movlb	1	; select bank1
  8786  068A  00E5               	movwf	_RxState^(0+128)	;volatile
  8787                           
  8788                           ;DMX.c: 277: PD_Flag = 1;
  8789  068B  3001               	movlw	1
  8790  068C  00CA               	movwf	_PD_Flag^(0+128)	;volatile
  8791  068D                     L9:	
  8792  068D  01CB               	clrf	(_PD_Flag+1)^(0+128)	;volatile
  8793                           
  8794                           ;DMX.c: 278: }else{
  8795  068E  2E9C               	goto	i1l3749
  8796  068F                     i1l3743:	
  8797                           
  8798                           ;DMX.c: 279: PDCount--;
  8799  068F  03F9               	decf	_PDCount,f
  8800  0690  2E9C               	goto	i1l3749
  8801  0691                     i1l3747:	
  8802  0691  0021               	movlb	1	; select bank1
  8803  0692  0865               	movf	_RxState^(0+128),w	;volatile
  8804                           
  8805                           ; Switch size 1, requested type "space"
  8806                           ; Number of cases is 6, Range of values is 0 to 5
  8807                           ; switch strategies available:
  8808                           ; Name         Instructions Cycles
  8809                           ; direct_byte           18     6 (fixed)
  8810                           ; simple_byte           19    10 (average)
  8811                           ; jumptable            260     6 (fixed)
  8812                           ;	Chosen strategy is direct_byte
  8813  0693  0084               	movwf	4
  8814  0694  3006               	movlw	6
  8815  0695  0204               	subwf	4,w
  8816  0696  1803               	skipnc
  8817  0697  2E9C               	goto	i1l3749
  8818  0698  3187               	movlp	high i1S5003
  8819  0699  3504               	lslf	4,w
  8820  069A  3E4C               	addlw	low i1S5003
  8821  069B  0082               	movwf	2
  8822  069C                     i1l3749:	
  8823                           
  8824                           ;DMX.c: 284: if (RxTimer > 2400) {
  8825  069C  0021               	movlb	1	; select bank1
  8826  069D  0855               	movf	(_RxTimer+1)^(0+128),w	;volatile
  8827  069E  3A80               	xorlw	128
  8828  069F  00F0               	movwf	??_DMX_interrput
  8829  06A0  3089               	movlw	137
  8830  06A1  0270               	subwf	??_DMX_interrput,w
  8831  06A2  1D03               	skipz
  8832  06A3  2EA6               	goto	u273_25
  8833  06A4  3061               	movlw	97
  8834  06A5  0254               	subwf	_RxTimer^(0+128),w	;volatile
  8835  06A6                     u273_25:	
  8836  06A6  1C03               	skipc
  8837  06A7  0008               	return
  8838                           
  8839                           ;DMX.c: 285: DMX_Flags.RxTimeout = 1;
  8840  06A8  1576               	bsf	_DMX_Flags,2	;volatile
  8841                           
  8842                           ;DMX.c: 286: RxTimer = 0;
  8843  06A9  0021               	movlb	1	; select bank1
  8844  06AA  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8845  06AB  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8846  06AC  0008               	return
  8847  06AD                     __end_of_DMX_interrput:	
  8848  06AD                     PL122:	
  8849  06AD  01E5               	clrf	_RxState^(0+128)	;volatile
  8850  06AE  01D4               	clrf	_RxTimer^(0+128)	;volatile
  8851  06AF  01D5               	clrf	(_RxTimer+1)^(0+128)	;volatile
  8852  06B0  1176               	bcf	_DMX_Flags,2	;volatile
  8853  06B1  0008               	return
  8854  06B2                     __end_ofPL122:	
  8855                           
  8856                           	psect	swtext2
  8857  074C                     __pswtext2:	
  8858  074C                     i1S5003:	
  8859  074C  3185  2DE9         	ljmp	i1l3667
  8860  074E  3185  2DED         	ljmp	i1l413
  8861  0750  3186  2E0D         	ljmp	i1l3683
  8862  0752  3186  2E3B         	ljmp	i1l3703
  8863  0754  3186  2E47         	ljmp	i1l3711
  8864  0756  3186  2E6E         	ljmp	i1l3735
  8865                           
  8866                           	psect	text33
  8867  0762                     __ptext33:	
  8868 ;; *************** function _ADC_interrupt *****************
  8869 ;; Defined at:
  8870 ;;		line 43 in file "ADC.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  2  138[None  ] int 
  8877 ;; Registers used:
  8878 ;;		wreg
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 1F/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; This function calls:
  8891 ;;		Nothing
  8892 ;; This function is called by:
  8893 ;;		_isr
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _ADC_interrupt
  8899  0762                     _ADC_interrupt:	
  8900                           
  8901                           ;ADC.c: 44: if (ADIF == 1) {
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in _ADC_interrupt: [wreg]
  8905  0762  0020               	movlb	0	; select bank0
  8906  0763  1F11               	btfss	17,6	;volatile
  8907  0764  0008               	return
  8908                           
  8909                           ;ADC.c: 45: ADC_Data=ADRESH;
  8910  0765  0021               	movlb	1	; select bank1
  8911  0766  081C               	movf	28,w	;volatile
  8912  0767  00DB               	movwf	_ADC_Data^(0+128)	;volatile
  8913                           
  8914                           ;ADC.c: 46: ADC_Flags.New=1;
  8915  0768  145A               	bsf	_ADC_Flags^(0+128),0	;volatile
  8916                           
  8917                           ;ADC.c: 47: ADIF = 0;
  8918  0769  0020               	movlb	0	; select bank0
  8919  076A  1311               	bcf	17,6	;volatile
  8920  076B  0008               	return
  8921  076C                     __end_of_ADC_interrupt:	
  8922  007E                     btemp	set	126	;btemp
  8923  007E                     int$flags	set	126
  8924  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    518
    Data        29
    BSS         208
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     76      77
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      8      80
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           12      0       0
    BANK12            0      0       0

Pointer List with Targets:

    PD_Manu	PTR unsigned int  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    PD_ID	PTR unsigned long  size(2) Largest target is 100
		 -> NULL(NULL[0]), PD(BIGRAM[100]), 

    TxByte	PTR volatile unsigned char  size(1) Largest target is 24
		 -> NULL(NULL[0]), DISCOVERY_RDM_Data(BANK3[24]), TX_RDM_Data(BANK2[24]), 

    RxDataPtr	PTR volatile unsigned char  size(1) Largest target is 4
		 -> NULL(NULL[0]), RxData(BANK1[4]), 

    PWMDCptr	PTR volatile unsigned char [4] size(2) Largest target is 2
		 -> PWM1DC(SFR27[2]), 

    PWMLDCONptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4LDCON(SFR27[1]), PWM3LDCON(SFR27[1]), PWM2LDCON(SFR27[1]), PWM1LDCON(SFR27[1]), 

    PWMDCHptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCH(SFR27[1]), PWM3DCH(SFR27[1]), PWM2DCH(SFR27[1]), PWM1DCH(SFR27[1]), 

    PWMDCLptr	PTR volatile unsigned char [4] size(2) Largest target is 1
		 -> PWM4DCL(SFR27[1]), PWM3DCL(SFR27[1]), PWM2DCL(SFR27[1]), PWM1DCL(SFR27[1]), 


Critical Paths under _main in COMMON

    _main->_ADC_loop
    _main->_PFM_Read
    _RDM_discovery_CC->_RDM_TXSTART
    _PFM_Write->_PFM_Read
    _RDM_GET_CC->_RDM_TXSTART
    _RDM_init->___bmul
    _DMX_loop->___awtoft
    _DMX_loop->___lbtoft
    ___fttol->___lbtoft
    ___ftsub->___lbtoft
    ___ftadd->___lbtoft
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft

Critical Paths under _isr in COMMON

    _isr->_RDM_tx_interrupt

Critical Paths under _main in BANK0

    _main->_DMX_loop
    _RDM_rx_loop->_RDM_discovery_CC
    _RDM_TXSTART->_RDM_get_checkSum
    _RDM_init->___bmul
    _DMX_loop->___fttol
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack
    ___fttol->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lbtoft
    ___ftge->___lbtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_DMX_loop

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40080
                           _ADC_init
                           _ADC_loop
                           _DMX_init
                           _DMX_loop
                           _PFM_Read
                          _PFM_Write
                           _RDM_init
                        _RDM_rx_loop
                        _timer1_init
                      _timer1_switch
 ---------------------------------------------------------------------------------
 (1) _timer1_switch                                        1     1      0       1
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RDM_rx_loop                                          1     1      0    2613
                                             29 BANK0      1     1      0
                         _RDM_GET_CC
                         _RDM_SET_CC
                   _RDM_discovery_CC
                   _RDM_get_checkSum
 ---------------------------------------------------------------------------------
 (2) _RDM_discovery_CC                                     4     4      0     446
                                             25 BANK0      4     4      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (2) _RDM_SET_CC                                           0     0      0    1275
                          _PFM_Write
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _PFM_Write                                            4     0      4     829
                                              0 BANK0      4     0      4
                           _PFM_Read
 ---------------------------------------------------------------------------------
 (4) _PFM_Read                                             2     0      2     289
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _RDM_GET_CC                                           2     2      0     446
                                             25 BANK0      2     2      0
                        _RDM_TXSTART
 ---------------------------------------------------------------------------------
 (3) _RDM_TXSTART                                          1     1      0     446
                                              4 COMMON     1     1      0
                   _RDM_get_checkSum
                  _RDM_tx_TimerBreak
                _TX_RDM_Response_Set
 ---------------------------------------------------------------------------------
 (4) _TX_RDM_Response_Set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RDM_tx_TimerBreak                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RDM_get_checkSum                                    25     0     25     446
                                              0 BANK0     25     0     25
 ---------------------------------------------------------------------------------
 (1) _RDM_init                                             2     2      0     276
                                              2 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     276
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DMX_loop                                            11    11      0   36072
                                             73 BANK0      3     3      0
                                              0 BANK3      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3714
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     1      4    3506
                                              4 COMMON     1     1      0
                                              8 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     430
                                             60 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7500
                                             54 BANK0      6     0      6
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5948
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4593
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1382
                                             12 BANK0      6     0      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5149
                                             27 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3816
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3475
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DMX_init                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_loop                                             2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  0     0      0     139
                      _ADC_interrupt
                      _DMX_interrput
                   _RDM_tx_interrupt
                   _timer1_interrupt
 ---------------------------------------------------------------------------------
 (6) _timer1_interrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _RDM_tx_interrupt                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _DMX_interrput                                        3     3      0     139
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _ADC_interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_loop
   _DMX_init
   _DMX_loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwtoft
       ___ftpack
   _PFM_Read
   _PFM_Write
     _PFM_Read
   _RDM_init
     ___bmul
   _RDM_rx_loop
     _RDM_GET_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_SET_CC
       _PFM_Write
         _PFM_Read
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_discovery_CC
       _RDM_TXSTART
         _RDM_get_checkSum
         _RDM_tx_TimerBreak
         _TX_RDM_Response_Set
     _RDM_get_checkSum
   _timer1_init
   _timer1_switch

 _isr (ROOT)
   _ADC_interrupt
   _DMX_interrput
   _RDM_tx_interrupt
   _timer1_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      8      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     147      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11               C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     147      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Oct 03 16:15:15 2017

                           _i 00D2                             pc 0002                ___bmul@product 0020  
                 __CFG_CP$OFF 0000                            PL2 0E87                            PL4 0E9D  
                          PL6 0EBA                            PL8 0ED7                            _PD 237C  
                          _RD 0CA8                            _WR 0CA9                  ___ftadd@exp1 0055  
                ___ftadd@exp2 0054                           PL10 0EDD                           PL20 0F1F  
                         PL12 0EF6                           PL30 0F4A                           PL22 0F25  
                         PL14 0571                           PL40 0393                           PL32 0587  
                         PL24 0F2C                           PL16 0F0E                           PL50 0F76  
                         PL42 0F68                           PL34 0595                           PL26 0F33  
                         PL18 0F16                           PL60 0F93                           PL52 0F7D  
                         PL44 072F                           PL36 0F4F                           PL28 0F42  
                         PL70 05BA                           PL62 05B4                           PL54 05AB  
                         PL46 0F6F                           PL38 0F5C                           PL80 03AD  
                         PL72 039F                           PL64 0F9B                           PL56 0F84  
                         PL48 05A2                           PL90 0FC4                           PL82 03B3  
                         PL74 05C1                           PL66 0FA2                           PL58 0F8C  
                         PL92 0FCB                           PL84 0FB7                           PL76 0FB0  
                         PL68 0FA9                           PL94 05C8                           PL86 0FBE  
                         PL78 03A6                           PL96 0FD2                           PL88 073A  
                         PL98 0FD9                  ___ftadd@sign 0053                           l702 02ED  
                         l375 0AF9                           l690 02B3                           l695 02D7  
                         l958 024A                           _GIE 005F                           _RA2 0062  
                         _RC0 0070                           _RC1 0071                           _RA5 0065  
                         _RC2 0072                           _RC3 0073                           _PR2 001B  
                         _UID 1200                           _TX9 0CF6                           _PWM 1000  
                         _isr 0004                           wreg 0009                          PL100 0FE0  
                        PL110 0FF2                          PL102 0FE6                          PL120 0FF8  
                        PL112 03C0                          PL104 03BA                          PL122 06AD  
                        PL114 03C6                          PL106 0FEC                          PL124 0FFC  
                        PL116 043C                          PL108 05CF                          PL126 03D2  
                        PL118 03CC                  __CFG_LVP$OFF 0000                  ___ftdiv@cntr 0044  
                ___ftdiv@sign 0049                          l1307 0D37                          l1325 0C7F  
                        l1093 0508                          l1085 04B7                          l1094 050F  
                        l1271 0DD1                          l1096 0522                          l1089 04F5  
                        l1283 0DF6                          l3203 0C3A                          l4101 0DD9  
                        l4111 0DEC                          l4103 0DDE                          l3311 0E6E  
                        l4105 0DE7                          l3305 0E57                          l3307 0E60  
                        l4109 0DF4                          l4213 04B6                          l4143 0CE2  
                        l4231 04D9                          l4209 0D5B                          l4153 0CF8  
                        l4313 049F                          l4411 0CA8                          l4171 0D14  
                        l4147 0CE9                          l4307 0499                          l4315 04B5  
                        l4405 0C92                          l4173 0D18                          l4165 0D06  
                        l3277 0E2B                          l4333 037B                          l4325 035F  
                        l3613 0355                          l3199 0C2B                          l4423 0D7B  
                        l4191 0D42                          l4183 0D2F                          l4175 0D1D  
                        l3295 0E4C                          l3279 0E30                          l2903 0523  
                        l4327 0360                          l4271 0511                          l4185 0D33  
                        l4177 0D21                          l4601 01DB                          l2833 0309  
                        l2825 02F4                          l4281 0443                          l4337 037E  
                        l4099 0DD5                          l4427 0D89                          l3299 0E53  
                        l4355 0240                          l4603 0209                          l2835 0314  
                        l2827 0302                          l4339 0391                          l4461 0DAF  
                        l4445 0D9D                          l4197 0D4A                          l4701 0958  
                        l4285 0453                          l4375 0E11                          l4383 0C71  
                        l2839 0562                          l4279 0442                          l4545 0179  
                        l4457 0DAB                          l4449 0DA1                          l4617 0225  
                        l4475 0C4F                          l4723 0B36                          l4731 0B57  
                        l4573 01BF                          l4719 0B0D                          l4663 0A4D  
                        l4647 09DD                          l4745 0BF5                          l4681 0A89  
                        l4585 01C7                          l4761 02AF                          l4833 00DB  
                        l4747 0C0A                          l4683 0A9B                          l4667 0A5A  
                        l4587 01D4                          l4771 02EA                          l4773 02EC  
                        l4757 0297                          _ADIE 048E                          _ADIF 008E  
                        l4697 0AEC                          l4769 02E8                          ?_isr 0070  
                        l4991 0517                          l4993 0387                          l4995 038C  
                        l4997 04A8                          l4999 04B0                          _ADON 04E8  
                        _CFGS 0CAE                          _BRGH 0CF2                          _FERR 0CEA  
                        _FREE 0CAC                          u2045 0E33                          u3015 027F  
                        u2400 033A                          u2420 0343                          u2414 033C  
                        u2440 034B                          u2360 032B                          u2434 0345  
                        u1580 052E                          u2460 0353                          u2380 0333  
                        u2454 034D                          u2374 032D                          u3440 01BD  
                        u3345 0C9F                          u2394 0335                          u3720 02BF  
                        _PEIE 005E                          u3735 02D1                          _RCIE 048D  
                        _RCIF 008D                          _LWLO 0CAD                          _TMR1 0016  
            _DMXPeriodDimming 00E3                          _SPEN 0CEF                          _TX9D 0CF0  
                        _Addr 006C                          _TXIE 048C                          _TXEN 0CF5  
                        _WREN 0CAA                          _TXIF 008C                          _SYNC 0CF4  
         _TX_RDM_Response_Set 0543                          _main 006A                  ___ftpack@arg 0020  
                ___ftpack@exp 0023                          fsr0h 0005                          fsr1h 0007  
                        indf0 0000                          fsr0l 0004                          indf1 0001  
                        fsr1l 0006                          btemp 007E                          start 0013  
                  _TX_PDCount 00DE              __end_of_ADC_init 00FF              __end_of_ADC_loop 0126  
                  _TX_PD_Flag 00C8                   ?_RDM_GET_CC 0070             ___bmul@multiplier 0021  
               __CFG_MCLRE$ON 0000                  ___ftmul@cntr 0039                  ___ftmul@sign 003A  
                 ?_RDM_SET_CC 0070                  ___fttol@exp1 0068                  ___fttol@lval 0064  
                       ??_isr 0074                 __CFG_PLLEN$ON 0000          ?_TX_RDM_Response_Set 0070  
                 _RX_RDM_Data 0120                         ?_main 0070               __end_of___ftadd 0D6D  
               __CFG_WDTE$OFF 0000              __end_of_DMX_init 019B                         _ANSA2 0C62  
                       _ANSC0 0C70                         _ANSA4 0C64               __end_of___ftdiv 0CBF  
                       _ANSC1 0C71                         _ANSC2 0C72                         _ANSC3 0C73  
            __end_of_DMX_loop 0C0C               __end_of___ftmul 0DC9                         _T1CON 0018  
             __end_of___ftsub 0C63               __end_of___fttol 0E77                         _LATC3 0873  
                       _LATC4 0874                         i1l413 05ED                         i1l713 06DB  
                       i1l875 0420                         i1l876 0423                         _PMADR 0191  
                       _PMDAT 0193                         _RCREG 0199     __size_of_RDM_tx_interrupt 007D  
                       _RCSTA 019D                         _PD_ID 00CC            __size_of_PFM_Write 003B  
                       _RXPPS 0E15                         _TXREG 019A              __end_of_PFM_Read 00F3  
               __CFG_WRT$HALF 0000                         _Timer 00B8              __end_of_RDM_init 023D  
               ___awtoft@sign 0074                 ___ftpack@sign 0024                __CFG_BOREN$OFF 0000  
                 _TX_RDM_Data 014C                         status 0003                         wtemp0 007E  
                __end_ofPL100 0FE6                  __end_ofPL110 0FF8                  __end_ofPL102 0FEC  
                __end_ofPL120 0FFC                  __end_ofPL112 03C6                  __end_ofPL104 03C0  
                __end_ofPL122 06B2                  __end_ofPL114 03CC                  __end_ofPL106 0FF2  
                __end_ofPL124 1000                  __end_ofPL116 0442                  __end_ofPL108 05D4  
                __end_ofPL126 03D7                  __end_ofPL118 03D2             ?_RDM_get_checkSum 0020  
          ??_RDM_get_checkSum 0074               __initialization 0015                  __end_of_main 00E5  
                  _CurrentPWM 0144             ?_RDM_discovery_CC 0070         ??_TX_RDM_Response_Set 0074  
                ?_RDM_TXSTART 0070            ??_RDM_discovery_CC 0039                        ??_main 0076  
               ___fttol@sign1 0063           __size_of_RDM_GET_CC 0074               _DMX_repeatcoeff 016C  
                      _ADCON0 009D                        _ADCON1 009E                        i1S5001 0758  
                      i1S5003 074C                        _ADRESH 009C           __size_of_RDM_SET_CC 0034  
            __end_of___awtoft 0E22              __end_of___ftpack 0E07              __end_of___lbtoft 0C1C  
                      _RA2PPS 0E92                        _RC0PPS 0EA0                        _RC1PPS 0EA1  
                      _RC2PPS 0EA2                        _RC4PPS 0EA4                        i1l3711 0647  
                      i1l3703 063B                        i1l3723 0664                        i1l3725 0666  
                      i1l3821 06B9                        i1l3813 042F                        i1l3743 068F  
                      i1l3735 066E                        i1l3681 060A                        i1l3833 06CE  
                      i1l3691 0623                        i1l3683 060D                        i1l3667 05E9  
                      i1l3747 0691                        i1l3843 06E4                        i1l3835 06D0  
                      i1l3827 06C3                        i1l3677 0602                        i1l3749 069C  
                      i1l3781 0402                        i1l3767 03DF                        i1l3865 0721  
                      i1l3769 03E0                        i1l3859 0702                        i1l3869 0723  
                      _INTCON 000B                        u263_25 0617                        u273_25 06A6  
                      u265_25 0631              __end_of___lwtoft 0E87                        u291_25 0719  
                      u276_20 03E5                        u276_22 03E6                        _PMCON2 0196  
                      u277_20 03EC                        u277_22 03ED                        _OSCCON 0099  
                      _PWM1DC 0D93        __size_of_DMX_interrput 00D9                        _TMR1IE 0488  
                      _TMR1IF 0088             _DMX_CurrentBright 00AC                        _SPBRGH 019C  
                      _SPBRGL 019B                        _TRISA2 0462                        _TRISC0 0470  
                      _TRISA4 0464                        _TRISC1 0471                        _TRISC2 0472  
                      _TRISC3 0473                        _TRISC4 0474                        _TRISC5 0475  
             PFM_Read@AddrPFM 0074                __CFG_PWRTE$OFF 0000             __end_of_PFM_Write 0285  
                      _RxData 00E7              _timer1_interrupt 03D7                        _TxByte 00E0  
                      ___bmul 023D                        ___ftge 0C1C                     ??___ftadd 0050  
              __CFG_STVREN$ON 0000                     ??___ftdiv 0041                     ??___ftmul 0032  
                   ??___ftsub 0075                     ??___fttol 0060                  ?_timer1_init 0070  
                ?_RDM_rx_loop 0070                    _TimerState 00DD                        _rxdata 00E1  
       ___ftmul@f3_as_product 0036           RDM_get_checkSum@len 0038                     ?_ADC_init 0070  
                   ?_ADC_loop 0070           timer1_switch@RxDat2 0074       __end_of__initialization 0067  
                  ___ftadd@f1 004A                    ___ftadd@f2 004D                    ___ftge@ff1 002C  
                  ___ftge@ff2 002F                    ___ftdiv@f1 003E                    ___ftdiv@f2 003B  
                  ___ftdiv@f3 0045                     ?_DMX_init 0070                     ?_DMX_loop 0070  
               _DMX_loop$1453 0069                _DMXPeriodConst 00E4                    ___awtoft@c 0028  
                  ___lbtoft@c 0074           ___bmul@multiplicand 0074                    ___ftmul@f1 002C  
                  ___ftmul@f2 002F                    ___ftsub@f1 0059                    ___ftsub@f2 0056  
                  ___fttol@f1 005C                     ?_PFM_Read 0074                __pcstackCOMMON 0070  
                __pidataBANK1 0000                  __pidataBANK2 0000                  __pidataBANK3 0000  
            _DMX_TargetBright 00A0                     ?_RDM_init 0070                    __end_ofPL2 0E9D  
                  __end_ofPL4 0EBA                    __end_ofPL6 0ED7                    __end_ofPL8 0EDD  
               _DMX_interrput 05D4                    ___lwtoft@c 0028              _RDM_tx_interrupt 06B2  
                  ??_ADC_init 0074                    ??_ADC_loop 0074         __end_of_timer1_switch 035F  
                  __pbssBANK0 006C                    __pbssBANK1 00A0                    __pbssBANK2 0120  
                  __pbssBANK3 01A0                 _DMX_sumRepeat 00EB                   _RxAddrCount 00D6  
      __size_of_ADC_interrupt 000A                    ??_DMX_init 0020                    ??_DMX_loop 01E8  
                ??_RDM_GET_CC 0039                    __pmaintext 006A                    ??_PFM_Read 0076  
                ??_RDM_SET_CC 0076                       ?___bmul 0074                       ?___ftge 002C  
                  ??_RDM_init 0022                    __pintentry 0004                ?_DMX_interrput 0070  
                     _BAUDCON 019F                     ?___awtoft 0028                     ?___ftpack 0020  
                   ?___lbtoft 0028             _RDM_tx_TimerBreak 0562                     ?___lwtoft 0028  
        __size_of_RDM_TXSTART 0020            ?_RDM_tx_TimerBreak 0070                       _DMXSign 00BF  
                     _PWM1DCH 0D94                       _PWM1DCL 0D93                       _PWM2DCH 0DA4  
                     _PWM2DCL 0DA3                       _OSCTUNE 0098                       _PWM3DCH 0DB4  
                     _PWM3DCL 0DB3                       _PWM4DCH 0DC4                       _PWM1CON 0D9B  
                     _PWM4DCL 0DC3                       _PWM2CON 0DAB                       _PWM3CON 0DBB  
                     _PWM4CON 0DCB                       _PDCount 0079                       _PWM1PHH 0D92  
                     _PWM1PHL 0D91                       _PWM2PHH 0DA2                       _PWM2PHL 0DA1  
                     _PWM3PHH 0DB2                       _PWM3PHL 0DB1                       _PWM1PRH 0D96  
                     _PWM4PHH 0DC2                       _PWM1PRL 0D95                       _PWM4PHL 0DC1  
                     _PWM2PRH 0DA6                       _PWM2PRL 0DA5                       _PWM3PRH 0DB6  
                     _PWM3PRL 0DB5                       _PD_Flag 00CA                       _PWM4PRH 0DC6  
                     _PWM4PRL 0DC5                       _PD_Manu 00CE              _Timer_DelayCount 00DC  
          __end_of_RDM_GET_CC 04B6           ??_RDM_tx_TimerBreak 0074            __end_of_RDM_SET_CC 0393  
                   _ADC_Flags 00DA                       _TxCount 00D0                       _RxTimer 00D4  
                     _RxState 00E5                       _TxState 00DF               __size_of___bmul 000D  
             __size_of___ftge 002C                       ___ftadd 0CBF                       ___ftdiv 0C63  
                     ___ftmul 0D6D                       ___ftsub 0C48                       ___fttol 0E22  
   __end_of_RDM_tx_TimerBreak 0571                    ??___awtoft 0074                    ??___ftpack 0025  
                  ??___lbtoft 0074          __size_of_timer1_init 0006                       __ptext1 0323  
                     __ptext2 031D                       __ptext3 0285                       __ptext4 04B6  
                     __ptext5 035F                       __ptext6 024A                       __ptext7 00E5  
                     __ptext8 0442                       __ptext9 0523                 _ADC_interrupt 0762  
        __size_of_RDM_rx_loop 0069                    ??___lwtoft 0074     __size_of_RDM_get_checkSum 002F  
                __size_of_isr 000F      __end_of_timer1_interrupt 043C                       clrloop0 0741  
   __size_of_RDM_discovery_CC 006D          RDM_get_checkSum@Data 0020          end_of_initialization 0067  
                   _DMX_Flags 0076                 PFM_Write@Data 0022                     _DMXPeriod 00EF  
              _DMX_difference 00C3   __end_of_TX_RDM_Response_Set 0562               ??_DMX_interrput 0070  
                   _PWM1LDCON 0D9F                     _PWM2LDCON 0DAF                     _PWM3LDCON 0DBF  
                   _PFM_Write 024A                     _PWM4LDCON 0DCF                  __pstringtext 1000  
              ?_ADC_interrupt 0070                     _PWMDCHptr 01B0                     _PWMDCLptr 01B8  
            __CFG_FOSC$INTOSC 0000             __size_of_ADC_init 000C             __size_of_ADC_loop 0027  
                 ___ftdiv@exp 0048      __end_of_RDM_tx_interrupt 072F                   ___ftmul@exp 0035  
           __size_of_DMX_init 0075             __size_of_DMX_loop 02BD                    ?_PFM_Write 0020  
              __end_of___bmul 024A                __end_of___ftge 0C48             __size_of_PFM_Read 000E  
  __size_of_RDM_tx_TimerBreak 000F             __size_of_RDM_init 00A2              PFM_Write@AddrPFM 0020  
                   _PackCount 0078                   __end_ofPL10 0EF6                   __end_ofPL20 0F25  
                 __end_ofPL12 0F0E                   __end_ofPL30 0F4F                   __end_ofPL22 0F2C  
                 __end_ofPL14 0587                   __end_ofPL40 039F                   __end_ofPL32 0595  
                 __end_ofPL24 0F33                   __end_ofPL16 0F16                   __end_ofPL50 0F7D  
                 __end_ofPL42 0F6F                   __end_ofPL34 05A2                   __end_ofPL26 0F42  
                 __end_ofPL18 0F1F                   __end_ofPL60 0F9B                   __end_ofPL52 0F84  
                 __end_ofPL44 073A                   __end_ofPL36 0F5C                   __end_ofPL28 0F4A  
                 __end_ofPL70 05C1                   __end_ofPL62 05BA                   __end_ofPL54 05B4  
                 __end_ofPL46 0F76                   __end_ofPL38 0F68                   __end_ofPL80 03B3  
                 __end_ofPL72 03A6                   __end_ofPL64 0FA2                   __end_ofPL56 0F8C  
                 __end_ofPL48 05AB                   __end_ofPL90 0FCB                   __end_ofPL82 03BA  
                 __end_ofPL74 05C8                   __end_ofPL66 0FA9                   __end_ofPL58 0F93  
                 __end_ofPL92 0FD2                   __end_ofPL84 0FBE                   __end_ofPL76 0FB7  
                 __end_ofPL68 0FB0                   __end_ofPL94 05CF                   __end_ofPL86 0FC4  
                 __end_ofPL78 03AD                   __end_ofPL96 0FD9                   __end_ofPL88 0740  
                 __end_ofPL98 0FE0           start_initialization 0015                   __end_of_UID 1206  
                 __end_of_PWM 1200                   __end_of_isr 0013                     _RxDataPtr 00E6  
                _DMXStepConst 00E2              __CFG_LPBOREN$OFF 0000                      ??___bmul 0075  
                    ??___ftge 0075               ??_ADC_interrupt 0070                   __pdataBANK1 00EB  
                 __pdataBANK2 0164                   __pdataBANK3 01DC              _RDM_get_checkSum 02EE  
           __size_of___awtoft 001B             __size_of___ftpack 003E             __size_of___lbtoft 0010  
                 __pbssBIGRAM 237C                   __pbssCOMMON 0076                     ___latbits 0002  
           __size_of___lwtoft 0010                 __pcstackBANK0 0020                 __pcstackBANK3 01E8  
            _RDM_discovery_CC 04B6               _DMX_SpaceBright 0138                      ?___ftadd 004A  
                 ??_PFM_Write 0076                      ?___ftdiv 003B                      ?___ftmul 002C  
                    ?___ftsub 0056                      ?___fttol 005C              __CFG_PPS1WAY$OFF 0000  
               ??_RDM_TXSTART 0074        __size_of_timer1_switch 003C                     __pswtext1 0758  
                   __pswtext2 074C                      _ADC_Data 00DB                      _ADC_init 00F3  
                    _ADC_loop 00FF             ?_timer1_interrupt 0070            ??_timer1_interrupt 0070  
                   _preRxData 01C0                     clear_ram0 0740                      _DMX_init 0126  
                    _DMX_loop 094F                      _GO_nDONE 04E9                      _PFM_Read 00E5  
          DMX_interrput@RxDat 0072                 ??_timer1_init 0074                      _RDM_init 019B  
               ??_RDM_rx_loop 003D                      _PWMDCptr 01A8         _DMX_repeat_hereditary 01DC  
         __end_of_RDM_TXSTART 0543                   _DMX_Address 00D8                 _timer1_switch 0323  
           ?_RDM_tx_interrupt 0070            ??_RDM_tx_interrupt 0070              __size_of___ftadd 00AE  
       __end_of_DMX_interrput 06AD              __size_of___ftdiv 005C              __size_of___ftmul 005C  
            __size_of___ftsub 001B              __size_of___fttol 0055                      ___awtoft 0E07  
                    ___ftpack 0DC9                      ___lbtoft 0C0C  __size_of_TX_RDM_Response_Set 001F  
                    ___lwtoft 0E77           __end_of_timer1_init 0323           __end_of_RDM_rx_loop 02EE  
                    _checkSum 00C6                      __ptext10 0543                      __ptext11 0562  
                    __ptext20 0CBF                      __ptext12 02EE                      __ptext21 0D6D  
                    __ptext13 019B                      __ptext30 03D7                      __ptext22 0C1C  
                    __ptext14 023D                      __ptext31 06B2                      __ptext23 0C63  
                    __ptext15 094F                      __ptext32 05D4                      __ptext24 0E07  
                    __ptext16 0E77                      __ptext33 0762                      __ptext25 0DC9  
                    __ptext17 0C0C                      __ptext26 0126                      __ptext18 0E22  
                    __ptext27 00FF                      __ptext19 0C48                      __ptext28 00F3  
              ?_timer1_switch 0070                 __size_of_main 007B      __end_of_RDM_get_checkSum 031D  
                    int$flags 007E      __end_of_RDM_discovery_CC 0523                   _RDM_TXSTART 0523  
                  _DMX_Repeat 0164                      intlevel1 0000             __CFG_CLKOUTEN$OFF 0000  
                  _RDM_GET_CC 0442                    _RDM_SET_CC 035F            _DISCOVERY_RDM_Data 01C4  
                 _timer1_init 031D                    _PWM1CLKCON 0D9E                    _PWM2CLKCON 0DAE  
                 _RDM_rx_loop 0285                    _PWM3CLKCON 0DBE                    _PWM4CLKCON 0DCE  
                 _PWMLDCONptr 01A0         __end_of_ADC_interrupt 076C               ??_timer1_switch 0074  
   __size_of_timer1_interrupt 0065  
